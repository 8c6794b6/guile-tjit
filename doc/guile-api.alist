;; Generated Thu Feb 28 23:33:42 PST 2002 by guile-scripts/scan-api -- do not edit!
(
(meta (GUILE_LOAD_PATH . "")
      (LTDL_LOAD_PATH . "")
      (guile . "pre-inst-guile")
      (sofile . "libguile/.libs/libguile.so.15.0.0"))
(scheme
($abs "#<primitive-procedure $abs>")
($acos "#<primitive-procedure $acos>")
($acosh "#<primitive-procedure $acosh>")
($asin "#<primitive-procedure $asin>")
($asinh "#<primitive-procedure $asinh>")
($atan "#<primitive-procedure $atan>")
($atan2 "#<primitive-procedure $atan2>")
($atanh "#<primitive-procedure $atanh>")
($cos "#<primitive-procedure $cos>")
($cosh "#<primitive-procedure $cosh>")
($exp "#<primitive-procedure $exp>")
($expt "#<primitive-procedure $expt>")
($log "#<primitive-procedure $log>")
($sin "#<primitive-procedure $sin>")
($sinh "#<primitive-procedure $sinh>")
($sqrt "#<primitive-procedure $sqrt>")
($tan "#<primitive-procedure $tan>")
($tanh "#<primitive-procedure $tanh>")
(%cond-expand-features "")
(%cond-expand-table "")
(%deliver-signals "#<primitive-procedure %deliver-signals>")
(%get-pre-modules-obarray "#<primitive-procedure %get-pre-modules-obarray>")
(%guile-build-info "")
(%init-goops-builtins "#<primitive-procedure %init-goops-builtins>")
(%init-rdelim-builtins "#<primitive-procedure %init-rdelim-builtins>")
(%init-rw-builtins "#<primitive-procedure %init-rw-builtins>")
(%library-dir "#<primitive-procedure %library-dir>")
(%load-announce "#<procedure %load-announce (file)>")
(%load-extensions "")
(%load-hook "#<procedure %load-announce (file)>")
(%load-path "")
(%load-verbosely "")
(%make-void-port "#<primitive-procedure %make-void-port>")
(%module-public-interface "")
(%module-public-interface "")
(%nil "")
(%package-data-dir "#<primitive-procedure %package-data-dir>")
(%print-module "#<procedure %print-module (mod port)>")
(%print-values "#<primitive-procedure %print-values>")
(%search-load-path "#<primitive-procedure %search-load-path>")
(%site-dir "#<primitive-procedure %site-dir>")
(* "#<primitive-procedure *>")
(*features* "")
(*null-device* "")
(*random-state* "")
(*unspecified* "")
(+ "#<primitive-procedure +>")
(- "#<primitive-procedure ->")
(->bool "#<procedure ->bool (x)>")
(/ "#<primitive-procedure />")
(1+ "#<procedure 1+ (n)>")
(1- "#<procedure 1- (n)>")
(< "#<primitive-procedure <>")
(<= "#<primitive-procedure <=>")
(<class> "")
(<entity> "")
(<operator-class> "")
(= "#<primitive-procedure =>")
(> "#<primitive-procedure >>")
(>= "#<primitive-procedure >=>")
(@apply "")
(@bind "")
(@call-with-current-continuation "")
(@call-with-values "")
(@fop "")
(AF_INET "")
(AF_INET6 "")
(AF_UNIX "")
(AF_UNSPEC "")
(E2BIG "")
(EACCES "")
(EADDRINUSE "")
(EADDRNOTAVAIL "")
(EADV "")
(EAFNOSUPPORT "")
(EAGAIN "")
(EALREADY "")
(EBADE "")
(EBADF "")
(EBADFD "")
(EBADMSG "")
(EBADR "")
(EBADRQC "")
(EBADSLT "")
(EBFONT "")
(EBUSY "")
(ECHILD "")
(ECHRNG "")
(ECOMM "")
(ECONNABORTED "")
(ECONNREFUSED "")
(ECONNRESET "")
(EDEADLK "")
(EDEADLOCK "")
(EDESTADDRREQ "")
(EDOM "")
(EDOTDOT "")
(EDQUOT "")
(EEXIST "")
(EFAULT "")
(EFBIG "")
(EHOSTDOWN "")
(EHOSTUNREACH "")
(EIDRM "")
(EILSEQ "")
(EINPROGRESS "")
(EINTR "")
(EINVAL "")
(EIO "")
(EISCONN "")
(EISDIR "")
(EISNAM "")
(EL2HLT "")
(EL2NSYNC "")
(EL3HLT "")
(EL3RST "")
(ELIBACC "")
(ELIBBAD "")
(ELIBEXEC "")
(ELIBMAX "")
(ELIBSCN "")
(ELNRNG "")
(ELOOP "")
(EMFILE "")
(EMLINK "")
(EMSGSIZE "")
(EMULTIHOP "")
(ENAMETOOLONG "")
(ENAVAIL "")
(ENETDOWN "")
(ENETRESET "")
(ENETUNREACH "")
(ENFILE "")
(ENOANO "")
(ENOBUFS "")
(ENOCSI "")
(ENODATA "")
(ENODEV "")
(ENOENT "")
(ENOEXEC "")
(ENOLCK "")
(ENOLINK "")
(ENOMEM "")
(ENOMSG "")
(ENONET "")
(ENOPKG "")
(ENOPROTOOPT "")
(ENOSPC "")
(ENOSR "")
(ENOSTR "")
(ENOSYS "")
(ENOTBLK "")
(ENOTCONN "")
(ENOTDIR "")
(ENOTEMPTY "")
(ENOTNAM "")
(ENOTSOCK "")
(ENOTTY "")
(ENOTUNIQ "")
(ENXIO "")
(EOPNOTSUPP "")
(EOVERFLOW "")
(EPERM "")
(EPFNOSUPPORT "")
(EPIPE "")
(EPROTO "")
(EPROTONOSUPPORT "")
(EPROTOTYPE "")
(ERANGE "")
(EREMCHG "")
(EREMOTE "")
(EREMOTEIO "")
(ERESTART "")
(EROFS "")
(ESHUTDOWN "")
(ESOCKTNOSUPPORT "")
(ESPIPE "")
(ESRCH "")
(ESRMNT "")
(ESTALE "")
(ESTRPIPE "")
(ETIME "")
(ETIMEDOUT "")
(ETOOMANYREFS "")
(ETXTBSY "")
(EUCLEAN "")
(EUNATCH "")
(EUSERS "")
(EWOULDBLOCK "")
(EXDEV "")
(EXFULL "")
(FD_CLOEXEC "")
(F_DUPFD "")
(F_GETFD "")
(F_GETFL "")
(F_GETOWN "")
(F_OK "")
(F_SETFD "")
(F_SETFL "")
(F_SETOWN "")
(INADDR_ANY "")
(INADDR_BROADCAST "")
(INADDR_LOOPBACK "")
(INADDR_NONE "")
(ITIMER_PROF "")
(ITIMER_REAL "")
(ITIMER_VIRTUAL "")
(LC_ALL "")
(LC_COLLATE "")
(LC_CTYPE "")
(LC_MESSAGES "")
(LC_MONETARY "")
(LC_NUMERIC "")
(LC_TIME "")
(LOCK_EX "")
(LOCK_NB "")
(LOCK_SH "")
(LOCK_UN "")
(MSG_DONTROUTE "")
(MSG_OOB "")
(MSG_PEEK "")
(NSIG "")
(OPEN_BOTH "")
(OPEN_READ "")
(OPEN_WRITE "")
(O_APPEND "")
(O_CREAT "")
(O_EXCL "")
(O_NDELAY "")
(O_NOCTTY "")
(O_NONBLOCK "")
(O_RDONLY "")
(O_RDWR "")
(O_SYNC "")
(O_TRUNC "")
(O_WRONLY "")
(PF_INET "")
(PF_INET6 "")
(PF_UNIX "")
(PF_UNSPEC "")
(PIPE_BUF "")
(PRIO_PGRP "")
(PRIO_PROCESS "")
(PRIO_USER "")
(R_OK "")
(SA_NOCLDSTOP "")
(SA_RESTART "")
(SEEK_CUR "")
(SEEK_END "")
(SEEK_SET "")
(SIGABRT "")
(SIGALRM "")
(SIGBUS "")
(SIGCHLD "")
(SIGCLD "")
(SIGCONT "")
(SIGFPE "")
(SIGHUP "")
(SIGILL "")
(SIGINT "")
(SIGIO "")
(SIGIOT "")
(SIGKILL "")
(SIGPIPE "")
(SIGPOLL "")
(SIGPROF "")
(SIGPWR "")
(SIGQUIT "")
(SIGSEGV "")
(SIGSTKFLT "")
(SIGSTOP "")
(SIGTERM "")
(SIGTRAP "")
(SIGTSTP "")
(SIGTTIN "")
(SIGTTOU "")
(SIGUNUSED "")
(SIGURG "")
(SIGUSR1 "")
(SIGUSR2 "")
(SIGVTALRM "")
(SIGWINCH "")
(SIGXCPU "")
(SIGXFSZ "")
(SIG_DFL "")
(SIG_IGN "")
(SOCK_DGRAM "")
(SOCK_RAW "")
(SOCK_STREAM "")
(SOL_IP "")
(SOL_SOCKET "")
(SO_BROADCAST "")
(SO_DEBUG "")
(SO_DONTROUTE "")
(SO_ERROR "")
(SO_KEEPALIVE "")
(SO_LINGER "")
(SO_NO_CHECK "")
(SO_OOBINLINE "")
(SO_PRIORITY "")
(SO_RCVBUF "")
(SO_REUSEADDR "")
(SO_SNDBUF "")
(SO_TYPE "")
(WAIT_ANY "")
(WAIT_MYPGRP "")
(WNOHANG "")
(WUNTRACED "")
(W_OK "")
(X_OK "")
(_IOFBF "")
(_IOLBF "")
(_IONBF "")
(abort-hook "")
(abs "#<primitive-procedure abs>")
(accept "#<primitive-procedure accept>")
(access? "#<primitive-procedure access?>")
(acons "#<primitive-procedure acons>")
(acos "#<procedure acos (z)>")
(acosh "#<procedure acosh (z)>")
(add-hook! "#<primitive-procedure add-hook!>")
(after-backtrace-hook "")
(after-error-hook "")
(after-eval-hook "")
(after-gc-hook "")
(after-print-hook "")
(after-read-hook "")
(alarm "#<primitive-procedure alarm>")
(and "")
(and-map "#<procedure and-map (f lst)>")
(and=> "#<procedure and=> (value procedure)>")
(angle "#<primitive-procedure angle>")
(app "")
(append "#<primitive-procedure append>")
(append! "#<primitive-procedure append!>")
(apply "#<procedure apply (fun . args)>")
(apply-to-args "#<procedure apply-to-args (args fn)>")
(apply:nconc2last "#<primitive-procedure apply:nconc2last>")
(array->list "#<primitive-procedure array->list>")
(array-contents "#<primitive-procedure array-contents>")
(array-copy! "#<primitive-procedure array-copy!>")
(array-copy-in-order! "#<primitive-procedure array-copy-in-order!>")
(array-dimensions "#<primitive-procedure array-dimensions>")
(array-equal? "#<primitive-procedure array-equal?>")
(array-fill! "#<primitive-procedure array-fill!>")
(array-for-each "#<primitive-procedure array-for-each>")
(array-in-bounds? "#<primitive-procedure array-in-bounds?>")
(array-index-map! "#<primitive-procedure array-index-map!>")
(array-map! "#<primitive-procedure array-map!>")
(array-map-in-order! "#<primitive-procedure array-map-in-order!>")
(array-prototype "#<primitive-procedure array-prototype>")
(array-rank "#<primitive-procedure array-rank>")
(array-ref "#<primitive-procedure array-ref>")
(array-set! "#<primitive-procedure array-set!>")
(array-shape "#<procedure array-shape (a)>")
(array? "#<primitive-procedure array?>")
(ash "#<primitive-procedure ash>")
(asin "#<procedure asin (z)>")
(asinh "#<procedure asinh (z)>")
(assert-defmacro?! "#<procedure assert-defmacro?! (m)>")
(assert-load-verbosity "#<procedure assert-load-verbosity (v)>")
(assert-repl-print-unspecified "#<procedure assert-repl-print-unspecified (v)>")
(assert-repl-silence "#<procedure assert-repl-silence (v)>")
(assert-repl-verbosity "#<procedure assert-repl-verbosity (v)>")
(assoc "#<primitive-procedure assoc>")
(assoc-ref "#<primitive-procedure assoc-ref>")
(assoc-remove! "#<primitive-procedure assoc-remove!>")
(assoc-set! "#<primitive-procedure assoc-set!>")
(assq "#<primitive-procedure assq>")
(assq-ref "#<primitive-procedure assq-ref>")
(assq-remove! "#<primitive-procedure assq-remove!>")
(assq-set! "#<primitive-procedure assq-set!>")
(assv "#<primitive-procedure assv>")
(assv-ref "#<primitive-procedure assv-ref>")
(assv-remove! "#<primitive-procedure assv-remove!>")
(assv-set! "#<primitive-procedure assv-set!>")
(async "#<primitive-procedure async>")
(async-mark "#<primitive-procedure async-mark>")
(atan "#<procedure atan (z . y)>")
(atanh "#<procedure atanh (z)>")
(autoload-done! "#<procedure autoload-done! (p m)>")
(autoload-done-or-in-progress? "#<procedure autoload-done-or-in-progress? (p m)>")
(autoload-in-progress! "#<procedure autoload-in-progress! (p m)>")
(autoloads-done "")
(autoloads-in-progress "")
(backtrace "#<primitive-procedure backtrace>")
(bad-throw "#<procedure bad-throw (key . args)>")
(basename "#<primitive-procedure basename>")
(basic-load "#<procedure load (name)>")
(batch-mode? "#<procedure batch-mode? ()>")
(beautify-user-module! "#<procedure beautify-user-module! (module)>")
(before-backtrace-hook "")
(before-error-hook "")
(before-eval-hook "")
(before-print-hook "")
(before-read-hook "")
(before-signal-stack "")
(begin "")
(begin-deprecated "")
(bind "#<primitive-procedure bind>")
(bit-count "#<primitive-procedure bit-count>")
(bit-count* "#<primitive-procedure bit-count*>")
(bit-extract "#<primitive-procedure bit-extract>")
(bit-invert! "#<primitive-procedure bit-invert!>")
(bit-position "#<primitive-procedure bit-position>")
(bit-set*! "#<primitive-procedure bit-set*!>")
(boolean? "#<primitive-procedure boolean?>")
(caaaar "#<primitive-procedure caaaar>")
(caaadr "#<primitive-procedure caaadr>")
(caaar "#<primitive-procedure caaar>")
(caadar "#<primitive-procedure caadar>")
(caaddr "#<primitive-procedure caaddr>")
(caadr "#<primitive-procedure caadr>")
(caar "#<primitive-procedure caar>")
(cadaar "#<primitive-procedure cadaar>")
(cadadr "#<primitive-procedure cadadr>")
(cadar "#<primitive-procedure cadar>")
(caddar "#<primitive-procedure caddar>")
(cadddr "#<primitive-procedure cadddr>")
(caddr "#<primitive-procedure caddr>")
(cadr "#<primitive-procedure cadr>")
(call-with-current-continuation "#<procedure call-with-current-continuation (proc)>")
(call-with-dynamic-root "#<primitive-procedure call-with-dynamic-root>")
(call-with-input-file "#<procedure call-with-input-file (str proc)>")
(call-with-input-string "#<primitive-procedure call-with-input-string>")
(call-with-new-thread "#<primitive-procedure call-with-new-thread>")
(call-with-output-file "#<procedure call-with-output-file (str proc)>")
(call-with-output-string "#<primitive-procedure call-with-output-string>")
(call-with-values "#<procedure call-with-values (producer consumer)>")
(car "#<primitive-procedure car>")
(case "")
(catch "#<primitive-procedure catch>")
(cdaaar "#<primitive-procedure cdaaar>")
(cdaadr "#<primitive-procedure cdaadr>")
(cdaar "#<primitive-procedure cdaar>")
(cdadar "#<primitive-procedure cdadar>")
(cdaddr "#<primitive-procedure cdaddr>")
(cdadr "#<primitive-procedure cdadr>")
(cdar "#<primitive-procedure cdar>")
(cddaar "#<primitive-procedure cddaar>")
(cddadr "#<primitive-procedure cddadr>")
(cddar "#<primitive-procedure cddar>")
(cdddar "#<primitive-procedure cdddar>")
(cddddr "#<primitive-procedure cddddr>")
(cdddr "#<primitive-procedure cdddr>")
(cddr "#<primitive-procedure cddr>")
(cdr "#<primitive-procedure cdr>")
(ceiling "#<primitive-procedure ceiling>")
(char->integer "#<primitive-procedure char->integer>")
(char-alphabetic? "#<primitive-procedure char-alphabetic?>")
(char-ci<=? "#<primitive-procedure char-ci<=?>")
(char-ci<? "#<primitive-procedure char-ci<?>")
(char-ci=? "#<primitive-procedure char-ci=?>")
(char-ci>=? "#<primitive-procedure char-ci>=?>")
(char-ci>? "#<primitive-procedure char-ci>?>")
(char-code-limit "")
(char-downcase "#<primitive-procedure char-downcase>")
(char-is-both? "#<primitive-procedure char-is-both?>")
(char-lower-case? "#<primitive-procedure char-lower-case?>")
(char-numeric? "#<primitive-procedure char-numeric?>")
(char-ready? "#<primitive-procedure char-ready?>")
(char-upcase "#<primitive-procedure char-upcase>")
(char-upper-case? "#<primitive-procedure char-upper-case?>")
(char-whitespace? "#<primitive-procedure char-whitespace?>")
(char<=? "#<primitive-procedure char<=?>")
(char<? "#<primitive-procedure char<?>")
(char=? "#<primitive-procedure char=?>")
(char>=? "#<primitive-procedure char>=?>")
(char>? "#<primitive-procedure char>?>")
(char? "#<primitive-procedure char?>")
(chdir "#<primitive-procedure chdir>")
(chmod "#<primitive-procedure chmod>")
(chown "#<primitive-procedure chown>")
(chroot "#<primitive-procedure chroot>")
(class-of "#<primitive-procedure class-of>")
(close "#<primitive-procedure close>")
(close-fdes "#<primitive-procedure close-fdes>")
(close-input-port "#<primitive-procedure close-input-port>")
(close-io-port "#<primitive-procedure close-port>")
(close-output-port "#<primitive-procedure close-output-port>")
(close-port "#<primitive-procedure close-port>")
(closedir "#<primitive-procedure closedir>")
(closure? "#<primitive-procedure closure?>")
(collect "")
(command-line "#<procedure command-line ()>")
(compile-define-module-args "#<procedure compile-define-module-args (args)>")
(compile-interface-spec "#<procedure compile-interface-spec (spec)>")
(complex? "#<primitive-procedure complex?>")
(cond "")
(cond-expand "")
(cond-expand-provide "#<procedure cond-expand-provide (module features)>")
(connect "#<primitive-procedure connect>")
(cons "#<primitive-procedure cons>")
(cons* "#<primitive-procedure cons*>")
(cons-source "#<primitive-procedure cons-source>")
(copy-file "#<primitive-procedure copy-file>")
(copy-random-state "#<primitive-procedure copy-random-state>")
(copy-tree "#<primitive-procedure copy-tree>")
(cos "#<procedure cos (z)>")
(cosh "#<procedure cosh (z)>")
(crypt "#<primitive-procedure crypt>")
(ctermid "#<primitive-procedure ctermid>")
(current-error-port "#<primitive-procedure current-error-port>")
(current-input-port "#<primitive-procedure current-input-port>")
(current-load-port "#<primitive-procedure current-load-port>")
(current-module "#<primitive-procedure current-module>")
(current-output-port "#<primitive-procedure current-output-port>")
(current-time "#<primitive-procedure current-time>")
(cuserid "#<primitive-procedure cuserid>")
(debug-disable "#<procedure debug-disable flags>")
(debug-enable "#<procedure debug-enable flags>")
(debug-object? "#<primitive-procedure debug-object?>")
(debug-options "#<procedure debug-options args>")
(debug-options-interface "#<primitive-procedure debug-options-interface>")
(debug-set! "")
(default-lazy-handler "#<procedure default-lazy-handler (key . args)>")
(define "")
(define-macro "")
(define-module "")
(define-option-interface "")
(define-private "")
(define-public "")
(define-syntax-macro "")
(defined? "#<primitive-procedure defined?>")
(defmacro "")
(defmacro-public "")
(defmacro-transformer "#<procedure defmacro-transformer (m)>")
(defmacro:syntax-transformer "#<procedure defmacro:syntax-transformer (f)>")
(defmacro:transformer "#<procedure defmacro:transformer (f)>")
(defmacro? "#<procedure defmacro? (m)>")
(delay "")
(delete "#<primitive-procedure delete>")
(delete! "#<primitive-procedure delete!>")
(delete-file "#<primitive-procedure delete-file>")
(delete1! "#<primitive-procedure delete1!>")
(delq "#<primitive-procedure delq>")
(delq! "#<primitive-procedure delq!>")
(delq1! "#<primitive-procedure delq1!>")
(delv "#<primitive-procedure delv>")
(delv! "#<primitive-procedure delv!>")
(delv1! "#<primitive-procedure delv1!>")
(destroy-guardian! "#<primitive-procedure destroy-guardian!>")
(dimensions->uniform-array "#<primitive-procedure dimensions->uniform-array>")
(directory-stream? "#<primitive-procedure directory-stream?>")
(dirname "#<primitive-procedure dirname>")
(display "#<primitive-procedure display>")
(display-application "#<primitive-procedure display-application>")
(display-backtrace "#<primitive-procedure display-backtrace>")
(display-error "#<primitive-procedure display-error>")
(display-usage-report "#<procedure display-usage-report (kw-desc)>")
(do "")
(doubly-weak-hash-table? "#<primitive-procedure doubly-weak-hash-table?>")
(drain-input "#<primitive-procedure drain-input>")
(dup "#<procedure dup (port/fd . maybe-fd)>")
(dup->fdes "#<primitive-procedure dup->fdes>")
(dup->inport "#<procedure dup->inport (port/fd . maybe-fd)>")
(dup->outport "#<procedure dup->outport (port/fd . maybe-fd)>")
(dup->port "#<procedure dup->port (port/fd mode . maybe-fd)>")
(dup2 "#<primitive-procedure dup2>")
(duplicate-port "#<procedure duplicate-port (port modes)>")
(dynamic-args-call "#<primitive-procedure dynamic-args-call>")
(dynamic-call "#<primitive-procedure dynamic-call>")
(dynamic-func "#<primitive-procedure dynamic-func>")
(dynamic-link "#<primitive-procedure dynamic-link>")
(dynamic-object? "#<primitive-procedure dynamic-object?>")
(dynamic-root "#<primitive-procedure dynamic-root>")
(dynamic-unlink "#<primitive-procedure dynamic-unlink>")
(dynamic-wind "#<primitive-procedure dynamic-wind>")
(enclose-array "#<primitive-procedure enclose-array>")
(endgrent "#<procedure endgrent ()>")
(endhostent "#<procedure endhostent ()>")
(endnetent "#<procedure endnetent ()>")
(endprotoent "#<procedure endprotoent ()>")
(endpwent "#<procedure endpwent ()>")
(endservent "#<procedure endservent ()>")
(entity? "#<primitive-procedure entity?>")
(env-module "#<primitive-procedure env-module>")
(environ "#<primitive-procedure environ>")
(environment-bound? "#<primitive-procedure environment-bound?>")
(environment-cell "#<primitive-procedure environment-cell>")
(environment-define "#<primitive-procedure environment-define>")
(environment-fold "#<primitive-procedure environment-fold>")
(environment-module "#<procedure environment-module (env)>")
(environment-observe "#<primitive-procedure environment-observe>")
(environment-observe-weak "#<primitive-procedure environment-observe-weak>")
(environment-ref "#<primitive-procedure environment-ref>")
(environment-set! "#<primitive-procedure environment-set!>")
(environment-undefine "#<primitive-procedure environment-undefine>")
(environment-unobserve "#<primitive-procedure environment-unobserve>")
(environment? "#<primitive-procedure environment?>")
(eof-object? "#<primitive-procedure eof-object?>")
(eq? "#<primitive-procedure eq?>")
(equal? "#<primitive-procedure equal?>")
(eqv? "#<primitive-procedure eqv?>")
(error "#<procedure error args>")
(error-catching-loop "#<procedure error-catching-loop (thunk)>")
(error-catching-repl "#<procedure error-catching-repl (r e p)>")
(eval "#<primitive-procedure eval>")
(eval-case "")
(eval-disable "#<procedure eval-disable flags>")
(eval-enable "#<procedure eval-enable flags>")
(eval-environment-imported "#<primitive-procedure eval-environment-imported>")
(eval-environment-local "#<primitive-procedure eval-environment-local>")
(eval-environment-set-imported! "#<primitive-procedure eval-environment-set-imported!>")
(eval-environment-set-local! "#<primitive-procedure eval-environment-set-local!>")
(eval-environment? "#<primitive-procedure eval-environment?>")
(eval-options "#<procedure eval-options args>")
(eval-options-interface "#<primitive-procedure eval-options-interface>")
(eval-set! "")
(eval-string "#<primitive-procedure eval-string>")
(evaluator-traps-interface "#<primitive-procedure evaluator-traps-interface>")
(even? "#<primitive-procedure even?>")
(exact->inexact "#<primitive-procedure exact->inexact>")
(exact? "#<primitive-procedure exact?>")
(execl "#<primitive-procedure execl>")
(execle "#<primitive-procedure execle>")
(execlp "#<primitive-procedure execlp>")
(exit "#<procedure quit args>")
(exit-hook "")
(exp "#<procedure exp (z)>")
(export "")
(export-environment-private "#<primitive-procedure export-environment-private>")
(export-environment-set-private! "#<primitive-procedure export-environment-set-private!>")
(export-environment-set-signature! "#<primitive-procedure export-environment-set-signature!>")
(export-environment-signature "#<primitive-procedure export-environment-signature>")
(export-environment? "#<primitive-procedure export-environment?>")
(export-syntax "")
(expt "#<procedure expt (z1 z2)>")
(false-if-exception "")
(fcntl "#<primitive-procedure fcntl>")
(fdes->inport "#<procedure fdes->inport (fdes)>")
(fdes->outport "#<procedure fdes->outport (fdes)>")
(fdes->ports "#<primitive-procedure fdes->ports>")
(fdopen "#<primitive-procedure fdopen>")
(feature? "#<procedure provided? (feature)>")
(file-exists? "#<procedure file-exists? (str)>")
(file-is-directory? "#<procedure file-is-directory? (str)>")
(file-port? "#<primitive-procedure file-port?>")
(file-position "#<procedure file-position args>")
(file-set-position "#<procedure file-set-position args>")
(fileno "#<primitive-procedure fileno>")
(flock "#<primitive-procedure flock>")
(floor "#<primitive-procedure floor>")
(fluid-ref "#<primitive-procedure fluid-ref>")
(fluid-set! "#<primitive-procedure fluid-set!>")
(fluid? "#<primitive-procedure fluid?>")
(flush-all-ports "#<primitive-procedure flush-all-ports>")
(for-each "#<primitive-procedure for-each>")
(for-next-option "#<procedure for-next-option (proc argv kw-opts kw-args)>")
(force "#<primitive-procedure force>")
(force-output "#<primitive-procedure force-output>")
(format "#<primitive-procedure simple-format>")
(frame-arguments "#<primitive-procedure frame-arguments>")
(frame-evaluating-args? "#<primitive-procedure frame-evaluating-args?>")
(frame-next "#<primitive-procedure frame-next>")
(frame-number "#<primitive-procedure frame-number>")
(frame-overflow? "#<primitive-procedure frame-overflow?>")
(frame-previous "#<primitive-procedure frame-previous>")
(frame-procedure "#<primitive-procedure frame-procedure>")
(frame-procedure? "#<primitive-procedure frame-procedure?>")
(frame-real? "#<primitive-procedure frame-real?>")
(frame-source "#<primitive-procedure frame-source>")
(frame? "#<primitive-procedure frame?>")
(fsync "#<primitive-procedure fsync>")
(ftell "#<primitive-procedure ftell>")
(gc "#<primitive-procedure gc>")
(gc-run-time "#<procedure gc-run-time ()>")
(gc-stats "#<primitive-procedure gc-stats>")
(gcd "#<primitive-procedure gcd>")
(gensym "#<primitive-procedure gensym>")
(get-internal-real-time "#<primitive-procedure get-internal-real-time>")
(get-internal-run-time "#<primitive-procedure get-internal-run-time>")
(get-option "#<procedure get-option (argv kw-opts kw-args return)>")
(get-output-string "#<primitive-procedure get-output-string>")
(get-print-state "#<primitive-procedure get-print-state>")
(getcwd "#<primitive-procedure getcwd>")
(getegid "#<primitive-procedure getegid>")
(getenv "#<primitive-procedure getenv>")
(geteuid "#<primitive-procedure geteuid>")
(getgid "#<primitive-procedure getgid>")
(getgr "#<primitive-procedure getgr>")
(getgrent "#<procedure getgrent ()>")
(getgrgid "#<procedure getgrgid (id)>")
(getgrnam "#<procedure getgrnam (name)>")
(getgroups "#<primitive-procedure getgroups>")
(gethost "#<primitive-procedure gethost>")
(gethostbyaddr "#<procedure gethostbyaddr (addr)>")
(gethostbyname "#<procedure gethostbyname (name)>")
(gethostent "#<procedure gethostent ()>")
(gethostname "#<primitive-procedure gethostname>")
(getitimer "#<primitive-procedure getitimer>")
(getlogin "#<primitive-procedure getlogin>")
(getnet "#<primitive-procedure getnet>")
(getnetbyaddr "#<procedure getnetbyaddr (addr)>")
(getnetbyname "#<procedure getnetbyname (name)>")
(getnetent "#<procedure getnetent ()>")
(getpass "#<primitive-procedure getpass>")
(getpeername "#<primitive-procedure getpeername>")
(getpgrp "#<primitive-procedure getpgrp>")
(getpid "#<primitive-procedure getpid>")
(getppid "#<primitive-procedure getppid>")
(getpriority "#<primitive-procedure getpriority>")
(getproto "#<primitive-procedure getproto>")
(getprotobyname "#<procedure getprotobyname (name)>")
(getprotobynumber "#<procedure getprotobynumber (addr)>")
(getprotoent "#<procedure getprotoent ()>")
(getpw "#<primitive-procedure getpw>")
(getpwent "#<procedure getpwent ()>")
(getpwnam "#<procedure getpwnam (name)>")
(getpwuid "#<procedure getpwuid (uid)>")
(getserv "#<primitive-procedure getserv>")
(getservbyname "#<procedure getservbyname (name proto)>")
(getservbyport "#<procedure getservbyport (port proto)>")
(getservent "#<procedure getservent ()>")
(getsockname "#<primitive-procedure getsockname>")
(getsockopt "#<primitive-procedure getsockopt>")
(gettimeofday "#<primitive-procedure gettimeofday>")
(getuid "#<primitive-procedure getuid>")
(gmtime "#<primitive-procedure gmtime>")
(group:gid "#<procedure group:gid (obj)>")
(group:mem "#<procedure group:mem (obj)>")
(group:name "#<procedure group:name (obj)>")
(group:passwd "#<procedure group:passwd (obj)>")
(guardian-destroyed? "#<primitive-procedure guardian-destroyed?>")
(guardian-greedy? "#<primitive-procedure guardian-greedy?>")
(handle-system-error "#<procedure handle-system-error (key . args)>")
(has-shown-backtrace-hint? "")
(has-shown-debugger-hint? "")
(has-suffix? "#<procedure has-suffix? (str suffix)>")
(hash "#<primitive-procedure hash>")
(hash-create-handle! "#<primitive-procedure hash-create-handle!>")
(hash-fold "#<primitive-procedure hash-fold>")
(hash-get-handle "#<primitive-procedure hash-get-handle>")
(hash-ref "#<primitive-procedure hash-ref>")
(hash-remove! "#<primitive-procedure hash-remove!>")
(hash-set! "#<primitive-procedure hash-set!>")
(hashq "#<primitive-procedure hashq>")
(hashq-create-handle! "#<primitive-procedure hashq-create-handle!>")
(hashq-get-handle "#<primitive-procedure hashq-get-handle>")
(hashq-ref "#<primitive-procedure hashq-ref>")
(hashq-remove! "#<primitive-procedure hashq-remove!>")
(hashq-set! "#<primitive-procedure hashq-set!>")
(hashv "#<primitive-procedure hashv>")
(hashv-create-handle! "#<primitive-procedure hashv-create-handle!>")
(hashv-get-handle "#<primitive-procedure hashv-get-handle>")
(hashv-ref "#<primitive-procedure hashv-ref>")
(hashv-remove! "#<primitive-procedure hashv-remove!>")
(hashv-set! "#<primitive-procedure hashv-set!>")
(hashx-create-handle! "#<primitive-procedure hashx-create-handle!>")
(hashx-get-handle "#<primitive-procedure hashx-get-handle>")
(hashx-ref "#<primitive-procedure hashx-ref>")
(hashx-set! "#<primitive-procedure hashx-set!>")
(hook->list "#<primitive-procedure hook->list>")
(hook-empty? "#<primitive-procedure hook-empty?>")
(hook? "#<primitive-procedure hook?>")
(hostent:addr-list "#<procedure hostent:addr-list (obj)>")
(hostent:addrtype "#<procedure hostent:addrtype (obj)>")
(hostent:aliases "#<procedure hostent:aliases (obj)>")
(hostent:length "#<procedure hostent:length (obj)>")
(hostent:name "#<procedure hostent:name (obj)>")
(htonl "#<primitive-procedure htonl>")
(htons "#<primitive-procedure htons>")
(identity "#<procedure identity (x)>")
(if "")
(imag-part "#<primitive-procedure imag-part>")
(import-environment-imports "#<primitive-procedure import-environment-imports>")
(import-environment-set-imports! "#<primitive-procedure import-environment-set-imports!>")
(import-environment? "#<primitive-procedure import-environment?>")
(in-vicinity "#<procedure in-vicinity (vicinity file)>")
(include-deprecated-features "#<primitive-procedure include-deprecated-features>")
(inet-aton "#<primitive-procedure inet-aton>")
(inet-lnaof "#<primitive-procedure inet-lnaof>")
(inet-makeaddr "#<primitive-procedure inet-makeaddr>")
(inet-netof "#<primitive-procedure inet-netof>")
(inet-ntoa "#<primitive-procedure inet-ntoa>")
(inet-ntop "#<primitive-procedure inet-ntop>")
(inet-pton "#<primitive-procedure inet-pton>")
(inexact->exact "#<primitive-procedure inexact->exact>")
(inexact? "#<primitive-procedure inexact?>")
(inherit-print-state "#<procedure inherit-print-state (old-port new-port)>")
(input-port? "#<primitive-procedure input-port?>")
(integer->char "#<primitive-procedure integer->char>")
(integer-expt "#<primitive-procedure integer-expt>")
(integer-length "#<primitive-procedure integer-length>")
(integer? "#<primitive-procedure integer?>")
(interaction-environment "#<primitive-procedure interaction-environment>")
(internal-time-units-per-second "")
(iota "#<procedure iota (n)>")
(ipow-by-squaring "#<procedure ipow-by-squaring (x k acc proc)>")
(isatty? "#<primitive-procedure isatty?>")
(issue-deprecation-warning "#<primitive-procedure issue-deprecation-warning>")
(join-thread "#<primitive-procedure join-thread>")
(keyword->symbol "#<procedure keyword->symbol (kw)>")
(keyword-dash-symbol "#<primitive-procedure keyword-dash-symbol>")
(keyword-like-symbol->keyword "#<procedure keyword-like-symbol->keyword (sym)>")
(keyword? "#<primitive-procedure keyword?>")
(kill "#<primitive-procedure kill>")
(kw-arg-ref "#<procedure kw-arg-ref (args kw)>")
(lambda "")
(last-pair "#<primitive-procedure last-pair>")
(last-stack-frame "#<primitive-procedure last-stack-frame>")
(lazy-catch "#<primitive-procedure lazy-catch>")
(lazy-handler-dispatch "#<procedure lazy-handler-dispatch (key . args)>")
(lcm "#<primitive-procedure lcm>")
(leaf-environment? "#<primitive-procedure leaf-environment?>")
(length "#<primitive-procedure length>")
(let "")
(let* "")
(letrec "")
(link "#<primitive-procedure link>")
(list "#<primitive-procedure list>")
(list->array "#<procedure list->array (ndim lst)>")
(list->string "#<primitive-procedure list->string>")
(list->symbol "#<procedure list->symbol args>")
(list->uniform-array "#<primitive-procedure list->uniform-array>")
(list->uniform-vector "#<procedure list->uniform-vector (prot lst)>")
(list->vector "#<primitive-procedure list->vector>")
(list->weak-vector "#<primitive-procedure list->weak-vector>")
(list-cdr-ref "#<primitive-procedure list-cdr-ref>")
(list-cdr-set! "#<primitive-procedure list-cdr-set!>")
(list-copy "#<primitive-procedure list-copy>")
(list-head "#<primitive-procedure list-head>")
(list-index "#<procedure list-index (l k)>")
(list-ref "#<primitive-procedure list-ref>")
(list-set! "#<primitive-procedure list-set!>")
(list-tail "#<primitive-procedure list-tail>")
(list? "#<primitive-procedure list?>")
(listen "#<primitive-procedure listen>")
(load "#<procedure load-module (filename)>")
(load-compiled "")
(load-emacs-interface "#<procedure load-emacs-interface ()>")
(load-extension "#<primitive-procedure load-extension>")
(load-from-path "#<procedure load-from-path (name)>")
(load-module "#<procedure load-module (filename)>")
(load-user-init "#<procedure load-user-init ()>")
(local-define "#<procedure local-define (names val)>")
(local-eval "#<primitive-procedure local-eval>")
(local-ref "#<procedure local-ref (names)>")
(local-remove "#<procedure local-remove (names)>")
(local-set! "#<procedure local-set! (names val)>")
(localtime "#<primitive-procedure localtime>")
(lock-mutex "#<primitive-procedure lock-mutex>")
(log "#<procedure log (z)>")
(log10 "#<procedure log10 (arg)>")
(logand "#<primitive-procedure logand>")
(logbit? "#<primitive-procedure logbit?>")
(logcount "#<primitive-procedure logcount>")
(logior "#<primitive-procedure logior>")
(lognot "#<primitive-procedure lognot>")
(logtest "#<primitive-procedure logtest>")
(logxor "#<primitive-procedure logxor>")
(lstat "#<primitive-procedure lstat>")
(macro-name "#<primitive-procedure macro-name>")
(macro-table "")
(macro-transformer "#<primitive-procedure macro-transformer>")
(macro-type "#<primitive-procedure macro-type>")
(macro? "#<primitive-procedure macro?>")
(macroexpand "#<procedure macroexpand (e)>")
(macroexpand-1 "#<procedure macroexpand-1 (e)>")
(magnitude "#<primitive-procedure magnitude>")
(major-version "#<primitive-procedure major-version>")
(make-arbiter "#<primitive-procedure make-arbiter>")
(make-array "#<procedure make-array (fill . args)>")
(make-autoload-interface "#<procedure make-autoload-interface (module name bindings)>")
(make-class-object "#<primitive-procedure make-class-object>")
(make-condition-variable "#<primitive-procedure make-condition-variable>")
(make-doubly-weak-hash-table "#<primitive-procedure make-doubly-weak-hash-table>")
(make-eval-environment "#<primitive-procedure make-eval-environment>")
(make-export-environment "#<primitive-procedure make-export-environment>")
(make-fluid "#<primitive-procedure make-fluid>")
(make-guardian "#<primitive-procedure make-guardian>")
(make-hash-table "#<procedure make-hash-table (k)>")
(make-hook "#<primitive-procedure make-hook>")
(make-import-environment "#<primitive-procedure make-import-environment>")
(make-keyword-from-dash-symbol "#<primitive-procedure make-keyword-from-dash-symbol>")
(make-leaf-environment "#<primitive-procedure make-leaf-environment>")
(make-list "#<procedure make-list (n . init)>")
(make-module "#<procedure make-module args>")
(make-modules-in "#<procedure make-modules-in (module name)>")
(make-mutex "#<primitive-procedure make-mutex>")
(make-object-property "#<procedure make-object-property ()>")
(make-polar "#<primitive-procedure make-polar>")
(make-procedure-with-setter "#<primitive-procedure make-procedure-with-setter>")
(make-record-type "#<procedure make-record-type (type-name fields . opt)>")
(make-rectangular "#<primitive-procedure make-rectangular>")
(make-regexp "#<primitive-procedure make-regexp>")
(make-root-module "#<procedure make-root-module ()>")
(make-scm-module "#<procedure make-scm-module ()>")
(make-shared-array "#<primitive-procedure make-shared-array>")
(make-soft-port "#<primitive-procedure make-soft-port>")
(make-stack "#<primitive-procedure make-stack>")
(make-string "#<primitive-procedure make-string>")
(make-struct "#<primitive-procedure make-struct>")
(make-struct-layout "#<primitive-procedure make-struct-layout>")
(make-subclass-object "#<primitive-procedure make-subclass-object>")
(make-symbol "#<primitive-procedure make-symbol>")
(make-undefined-variable "#<primitive-procedure make-undefined-variable>")
(make-uniform-array "#<procedure make-uniform-array (prot . args)>")
(make-uniform-vector "#<primitive-procedure dimensions->uniform-array>")
(make-variable "#<primitive-procedure make-variable>")
(make-vector "#<primitive-procedure make-vector>")
(make-vtable-vtable "#<primitive-procedure make-vtable-vtable>")
(make-weak-key-hash-table "#<primitive-procedure make-weak-key-hash-table>")
(make-weak-value-hash-table "#<primitive-procedure make-weak-value-hash-table>")
(make-weak-vector "#<primitive-procedure make-weak-vector>")
(map "#<primitive-procedure map>")
(map-in-order "#<primitive-procedure map-in-order>")
(mask-signals "#<primitive-procedure mask-signals>")
(max "#<primitive-procedure max>")
(member "#<primitive-procedure member>")
(memoized-environment "#<primitive-procedure memoized-environment>")
(memoized? "#<primitive-procedure memoized?>")
(memq "#<primitive-procedure memq>")
(memv "#<primitive-procedure memv>")
(merge "#<primitive-procedure merge>")
(merge! "#<primitive-procedure merge!>")
(micro-version "#<primitive-procedure micro-version>")
(min "#<primitive-procedure min>")
(minor-version "#<primitive-procedure minor-version>")
(mkdir "#<primitive-procedure mkdir>")
(mknod "#<primitive-procedure mknod>")
(mkstemp! "#<primitive-procedure mkstemp!>")
(mktime "#<primitive-procedure mktime>")
(module-add! "#<procedure module-add! (m v var)>")
(module-binder "#<procedure module-binder (obj)>")
(module-bound? "#<procedure module-bound? (m v)>")
(module-clear! "#<procedure module-clear! (m)>")
(module-constructor "#<procedure module-constructor (obarray uses binder eval-closure transformer name kind observers weak-observers observer-id)>")
(module-define! "#<procedure module-define! (module name value)>")
(module-defined? "#<procedure module-defined? (module name)>")
(module-ensure-local-variable! "#<procedure module-ensure-local-variable! (module symbol)>")
(module-eval-closure "#<procedure module-eval-closure (obj)>")
(module-export! "#<procedure module-export! (m names)>")
(module-for-each "#<procedure module-for-each (proc module)>")
(module-kind "#<procedure module-kind (obj)>")
(module-local-variable "#<procedure module-local-variable (m v)>")
(module-locally-bound? "#<procedure module-locally-bound? (m v)>")
(module-make-local-var! "#<procedure module-make-local-var! (m v)>")
(module-map "#<procedure module-map (proc module)>")
(module-modified "#<procedure module-modified (m)>")
(module-name "#<procedure module-name (obj)>")
(module-obarray "#<procedure module-obarray (obj)>")
(module-obarray-get-handle "#<procedure module-obarray-get-handle (ob key)>")
(module-obarray-ref "#<procedure module-obarray-ref (ob key)>")
(module-obarray-remove! "#<procedure module-obarray-remove! (ob key)>")
(module-obarray-set! "#<procedure module-obarray-set! (ob key val)>")
(module-observe "#<procedure module-observe (module proc)>")
(module-observe-weak "#<procedure module-observe-weak (module proc)>")
(module-observer-id "#<procedure module-observer-id (obj)>")
(module-observers "#<procedure module-observers (obj)>")
(module-public-interface "#<procedure module-public-interface (m)>")
(module-re-export! "#<procedure module-re-export! (m names)>")
(module-ref "#<procedure module-ref (module name . rest)>")
(module-remove! "#<procedure module-remove! (m v)>")
(module-search "#<procedure module-search (fn m v)>")
(module-set! "#<procedure module-set! (module name value)>")
(module-symbol-binding "#<procedure module-symbol-binding (m v . opt-val)>")
(module-symbol-interned? "#<procedure module-symbol-interned? (m v)>")
(module-symbol-local-binding "#<procedure module-symbol-local-binding (m v . opt-val)>")
(module-symbol-locally-interned? "#<procedure module-symbol-locally-interned? (m v)>")
(module-transformer "#<procedure module-transformer (obj)>")
(module-type "")
(module-unobserve "#<procedure module-unobserve (token)>")
(module-use! "#<procedure module-use! (module interface)>")
(module-uses "#<procedure module-uses (obj)>")
(module-variable "#<procedure module-variable (m v)>")
(module-weak-observers "#<procedure module-weak-observers (obj)>")
(module? "#<procedure module? (obj)>")
(modulo "#<primitive-procedure modulo>")
(most-negative-fixnum "")
(most-positive-fixnum "")
(move->fdes "#<procedure move->fdes (fd/port fd)>")
(named-module-use! "#<procedure named-module-use! (user usee)>")
(negative? "#<primitive-procedure negative?>")
(nested-define! "#<procedure nested-define! (root names val)>")
(nested-ref "#<procedure nested-ref (root names)>")
(nested-remove! "#<procedure nested-remove! (root names)>")
(nested-set! "#<procedure nested-set! (root names val)>")
(netent:addrtype "#<procedure netent:addrtype (obj)>")
(netent:aliases "#<procedure netent:aliases (obj)>")
(netent:name "#<procedure netent:name (obj)>")
(netent:net "#<procedure netent:net (obj)>")
(newline "#<primitive-procedure newline>")
(nice "#<primitive-procedure nice>")
(nil-cond "")
(noop "#<primitive-procedure noop>")
(not "#<primitive-procedure not>")
(ntohl "#<primitive-procedure ntohl>")
(ntohs "#<primitive-procedure ntohs>")
(null? "#<primitive-procedure null?>")
(number->string "#<primitive-procedure number->string>")
(number? "#<primitive-procedure number?>")
(object->string "#<primitive-procedure object->string>")
(object-address "#<primitive-procedure object-address>")
(object-properties "#<primitive-procedure object-properties>")
(object-property "#<primitive-procedure object-property>")
(odd? "#<primitive-procedure odd?>")
(open "#<primitive-procedure open>")
(open-fdes "#<primitive-procedure open-fdes>")
(open-file "#<primitive-procedure open-file>")
(open-input-file "#<procedure open-input-file (str)>")
(open-input-string "#<primitive-procedure open-input-string>")
(open-io-file "#<procedure open-io-file (str)>")
(open-output-file "#<procedure open-output-file (str)>")
(open-output-string "#<primitive-procedure open-output-string>")
(opendir "#<primitive-procedure opendir>")
(operator? "#<primitive-procedure operator?>")
(or "")
(or-map "#<procedure or-map (f lst)>")
(output-port? "#<primitive-procedure output-port?>")
(pair? "#<primitive-procedure pair?>")
(parse-path "#<primitive-procedure parse-path>")
(passwd:dir "#<procedure passwd:dir (obj)>")
(passwd:gecos "#<procedure passwd:gecos (obj)>")
(passwd:gid "#<procedure passwd:gid (obj)>")
(passwd:name "#<procedure passwd:name (obj)>")
(passwd:passwd "#<procedure passwd:passwd (obj)>")
(passwd:shell "#<procedure passwd:shell (obj)>")
(passwd:uid "#<procedure passwd:uid (obj)>")
(pause "#<primitive-procedure pause>")
(peek "#<procedure peek stuff>")
(peek-char "#<primitive-procedure peek-char>")
(pipe "#<primitive-procedure pipe>")
(pk "#<procedure peek stuff>")
(port->fdes "#<procedure port->fdes (port)>")
(port-closed? "#<primitive-procedure port-closed?>")
(port-column "#<primitive-procedure port-column>")
(port-filename "#<primitive-procedure port-filename>")
(port-for-each "#<primitive-procedure port-for-each>")
(port-line "#<primitive-procedure port-line>")
(port-mode "#<primitive-procedure port-mode>")
(port-revealed "#<primitive-procedure port-revealed>")
(port-with-print-state "#<primitive-procedure port-with-print-state>")
(port? "#<primitive-procedure port?>")
(positive? "#<primitive-procedure positive?>")
(primitive-eval "#<primitive-procedure primitive-eval>")
(primitive-exit "#<primitive-procedure primitive-exit>")
(primitive-fork "#<primitive-procedure primitive-fork>")
(primitive-load "#<primitive-procedure primitive-load>")
(primitive-load-path "#<primitive-procedure primitive-load-path>")
(primitive-macro? "#<procedure primitive-macro? (m)>")
(primitive-make-property "#<primitive-procedure primitive-make-property>")
(primitive-move->fdes "#<primitive-procedure primitive-move->fdes>")
(primitive-property-del! "#<primitive-procedure primitive-property-del!>")
(primitive-property-ref "#<primitive-procedure primitive-property-ref>")
(primitive-property-set! "#<primitive-procedure primitive-property-set!>")
(print-disable "#<procedure print-disable flags>")
(print-enable "#<procedure print-enable flags>")
(print-options "#<procedure print-options args>")
(print-options-interface "#<primitive-procedure print-options-interface>")
(print-set! "")
(procedure "#<primitive-procedure procedure>")
(procedure->macro "#<primitive-procedure procedure->macro>")
(procedure->memoizing-macro "#<primitive-procedure procedure->memoizing-macro>")
(procedure->syntax "#<primitive-procedure procedure->syntax>")
(procedure-documentation "#<primitive-procedure procedure-documentation>")
(procedure-environment "#<primitive-procedure procedure-environment>")
(procedure-name "#<primitive-procedure procedure-name>")
(procedure-properties "#<primitive-procedure procedure-properties>")
(procedure-property "#<primitive-procedure procedure-property>")
(procedure-source "#<primitive-procedure procedure-source>")
(procedure-with-setter? "#<primitive-procedure procedure-with-setter?>")
(procedure? "#<primitive-procedure procedure?>")
(process-define-module "#<procedure process-define-module (args)>")
(process-use-modules "#<procedure process-use-modules (module-interface-args)>")
(program-arguments "#<primitive-procedure program-arguments>")
(promise? "#<primitive-procedure promise?>")
(protoent:aliases "#<procedure protoent:aliases (obj)>")
(protoent:name "#<procedure protoent:name (obj)>")
(protoent:proto "#<procedure protoent:proto (obj)>")
(provide "#<procedure provide (sym)>")
(provided? "#<procedure provided? (feature)>")
(purify-module! "#<procedure purify-module! (module)>")
(putenv "#<primitive-procedure putenv>")
(quasiquote "")
(quit "#<procedure quit args>")
(quote "")
(quotient "#<primitive-procedure quotient>")
(raise "#<primitive-procedure raise>")
(random "#<primitive-procedure random>")
(random:exp "#<primitive-procedure random:exp>")
(random:hollow-sphere! "#<primitive-procedure random:hollow-sphere!>")
(random:normal "#<primitive-procedure random:normal>")
(random:normal-vector! "#<primitive-procedure random:normal-vector!>")
(random:solid-sphere! "#<primitive-procedure random:solid-sphere!>")
(random:uniform "#<primitive-procedure random:uniform>")
(rational? "#<primitive-procedure rational?>")
(re-export "")
(re-export-syntax "")
(read "#<primitive-procedure read>")
(read-char "#<primitive-procedure read-char>")
(read-disable "#<procedure read-disable flags>")
(read-enable "#<procedure read-enable flags>")
(read-eval? "")
(read-hash-extend "#<primitive-procedure read-hash-extend>")
(read-hash-procedures "")
(read-options "#<procedure read-options args>")
(read-options-interface "#<primitive-procedure read-options-interface>")
(read-set! "")
(read:array "#<procedure read:array (digit port)>")
(read:uniform-vector "#<procedure read:uniform-vector (proto port)>")
(readdir "#<primitive-procedure readdir>")
(readlink "#<primitive-procedure readlink>")
(real-part "#<primitive-procedure real-part>")
(real? "#<primitive-procedure real?>")
(record-accessor "#<procedure record-accessor (rtd field-name)>")
(record-constructor "#<procedure record-constructor (rtd . opt)>")
(record-modifier "#<procedure record-modifier (rtd field-name)>")
(record-predicate "#<procedure record-predicate (rtd)>")
(record-type-descriptor "#<procedure record-type-descriptor (obj)>")
(record-type-fields "#<procedure record-type-fields (obj)>")
(record-type-name "#<procedure record-type-name (obj)>")
(record-type-vtable "")
(record-type? "#<procedure record-type? (obj)>")
(record? "#<procedure record? (obj)>")
(recv! "#<primitive-procedure recv!>")
(recvfrom! "#<primitive-procedure recvfrom!>")
(redirect-port "#<primitive-procedure redirect-port>")
(regexp-exec "#<primitive-procedure regexp-exec>")
(regexp/basic "")
(regexp/extended "")
(regexp/icase "")
(regexp/newline "")
(regexp/notbol "")
(regexp/noteol "")
(regexp? "#<primitive-procedure regexp?>")
(release-arbiter "#<primitive-procedure release-arbiter>")
(release-port-handle "#<procedure release-port-handle (port)>")
(remainder "#<primitive-procedure remainder>")
(remove-hook! "#<primitive-procedure remove-hook!>")
(rename-file "#<primitive-procedure rename-file>")
(repl "#<procedure repl (read evaler print)>")
(repl-reader "#<procedure repl-reader (prompt)>")
(reset-hook! "#<primitive-procedure reset-hook!>")
(resolve-interface "#<procedure resolve-interface (name . args)>")
(resolve-module "#<procedure resolve-module (name . maybe-autoload)>")
(restore-signals "#<primitive-procedure restore-signals>")
(restricted-vector-sort! "#<primitive-procedure restricted-vector-sort!>")
(reverse "#<primitive-procedure reverse>")
(reverse! "#<primitive-procedure reverse!>")
(rewinddir "#<primitive-procedure rewinddir>")
(rmdir "#<primitive-procedure rmdir>")
(round "#<primitive-procedure round>")
(run-asyncs "#<primitive-procedure run-asyncs>")
(run-hook "#<primitive-procedure run-hook>")
(save-module-excursion "#<procedure save-module-excursion (thunk)>")
(save-stack "#<procedure save-stack narrowing>")
(scheme-file-suffix "#<procedure scheme-file-suffix ()>")
(scm-error "#<primitive-procedure scm-error>")
(scm-repl-print-unspecified "")
(scm-repl-prompt "")
(scm-repl-silent "")
(scm-repl-verbose "")
(scm-style-repl "#<procedure scm-style-repl ()>")
(search-path "#<primitive-procedure search-path>")
(seed->random-state "#<primitive-procedure seed->random-state>")
(seek "#<primitive-procedure seek>")
(select "#<primitive-procedure select>")
(send "#<primitive-procedure send>")
(sendto "#<primitive-procedure sendto>")
(servent:aliases "#<procedure servent:aliases (obj)>")
(servent:name "#<procedure servent:name (obj)>")
(servent:port "#<procedure servent:port (obj)>")
(servent:proto "#<procedure servent:proto (obj)>")
(set! "")
(set-autoloaded! "#<procedure set-autoloaded! (p m done?)>")
(set-batch-mode?! "#<procedure set-batch-mode?! (arg)>")
(set-car! "#<primitive-procedure set-car!>")
(set-cdr! "#<primitive-procedure set-cdr!>")
(set-current-error-port "#<primitive-procedure set-current-error-port>")
(set-current-input-port "#<primitive-procedure set-current-input-port>")
(set-current-module "#<primitive-procedure set-current-module>")
(set-current-output-port "#<primitive-procedure set-current-output-port>")
(set-defmacro-transformer! "#<procedure set-defmacro-transformer! (m t)>")
(set-module-binder! "#<procedure set-module-binder! (obj val)>")
(set-module-eval-closure! "#<procedure set-module-eval-closure! (module closure)>")
(set-module-kind! "#<procedure set-module-kind! (obj val)>")
(set-module-name! "#<procedure set-module-name! (obj val)>")
(set-module-obarray! "#<procedure set-module-obarray! (obj val)>")
(set-module-observer-id! "#<procedure set-module-observer-id! (obj val)>")
(set-module-observers! "#<procedure set-module-observers! (obj val)>")
(set-module-public-interface! "#<procedure set-module-public-interface! (m i)>")
(set-module-transformer! "#<procedure set-module-transformer! (obj val)>")
(set-module-uses! "#<procedure set-module-uses! (obj val)>")
(set-object-procedure! "#<primitive-procedure set-object-procedure!>")
(set-object-properties! "#<primitive-procedure set-object-properties!>")
(set-object-property! "#<primitive-procedure set-object-property!>")
(set-port-column! "#<primitive-procedure set-port-column!>")
(set-port-filename! "#<primitive-procedure set-port-filename!>")
(set-port-line! "#<primitive-procedure set-port-line!>")
(set-port-revealed! "#<primitive-procedure set-port-revealed!>")
(set-procedure-properties! "#<primitive-procedure set-procedure-properties!>")
(set-procedure-property! "#<primitive-procedure set-procedure-property!>")
(set-repl-prompt! "#<procedure set-repl-prompt! (v)>")
(set-source-properties! "#<primitive-procedure set-source-properties!>")
(set-source-property! "#<primitive-procedure set-source-property!>")
(set-struct-vtable-name! "#<primitive-procedure set-struct-vtable-name!>")
(set-symbol-property! "#<procedure set-symbol-property! (sym prop val)>")
(set-system-module! "#<procedure set-system-module! (m s)>")
(set-tm:gmtoff "#<procedure set-tm:gmtoff (obj val)>")
(set-tm:hour "#<procedure set-tm:hour (obj val)>")
(set-tm:isdst "#<procedure set-tm:isdst (obj val)>")
(set-tm:mday "#<procedure set-tm:mday (obj val)>")
(set-tm:min "#<procedure set-tm:min (obj val)>")
(set-tm:mon "#<procedure set-tm:mon (obj val)>")
(set-tm:sec "#<procedure set-tm:sec (obj val)>")
(set-tm:wday "#<procedure set-tm:wday (obj val)>")
(set-tm:yday "#<procedure set-tm:yday (obj val)>")
(set-tm:year "#<procedure set-tm:year (obj val)>")
(set-tm:zone "#<procedure set-tm:zone (obj val)>")
(setegid "#<primitive-procedure setegid>")
(setenv "#<procedure setenv (name value)>")
(seteuid "#<primitive-procedure seteuid>")
(setgid "#<primitive-procedure setgid>")
(setgr "#<primitive-procedure setgr>")
(setgrent "#<procedure setgrent ()>")
(sethost "#<primitive-procedure sethost>")
(sethostent "#<procedure sethostent stayopen>")
(sethostname "#<primitive-procedure sethostname>")
(setitimer "#<primitive-procedure setitimer>")
(setlocale "#<primitive-procedure setlocale>")
(setnet "#<primitive-procedure setnet>")
(setnetent "#<procedure setnetent stayopen>")
(setpgid "#<primitive-procedure setpgid>")
(setpriority "#<primitive-procedure setpriority>")
(setproto "#<primitive-procedure setproto>")
(setprotoent "#<procedure setprotoent stayopen>")
(setpw "#<primitive-procedure setpw>")
(setpwent "#<procedure setpwent ()>")
(setserv "#<primitive-procedure setserv>")
(setservent "#<procedure setservent stayopen>")
(setsid "#<primitive-procedure setsid>")
(setsockopt "#<primitive-procedure setsockopt>")
(setter "#<primitive-procedure setter>")
(setuid "#<primitive-procedure setuid>")
(setvbuf "#<primitive-procedure setvbuf>")
(shared-array-increments "#<primitive-procedure shared-array-increments>")
(shared-array-offset "#<primitive-procedure shared-array-offset>")
(shared-array-root "#<primitive-procedure shared-array-root>")
(shutdown "#<primitive-procedure shutdown>")
(sigaction "#<primitive-procedure sigaction>")
(signal-condition-variable "#<primitive-procedure signal-condition-variable>")
(signal-handlers "")
(simple-format "#<primitive-procedure simple-format>")
(sin "#<procedure sin (z)>")
(single-active-thread? "#<primitive-procedure single-active-thread?>")
(sinh "#<procedure sinh (z)>")
(sleep "#<primitive-procedure sleep>")
(sloppy-assoc "#<primitive-procedure sloppy-assoc>")
(sloppy-assq "#<primitive-procedure sloppy-assq>")
(sloppy-assv "#<primitive-procedure sloppy-assv>")
(sockaddr:addr "#<procedure sockaddr:addr (obj)>")
(sockaddr:fam "#<procedure sockaddr:fam (obj)>")
(sockaddr:path "#<procedure sockaddr:path (obj)>")
(sockaddr:port "#<procedure sockaddr:port (obj)>")
(socket "#<primitive-procedure socket>")
(socketpair "#<primitive-procedure socketpair>")
(sort "#<primitive-procedure sort>")
(sort! "#<primitive-procedure sort!>")
(sort-list "#<primitive-procedure sort-list>")
(sort-list! "#<primitive-procedure sort-list!>")
(sorted? "#<primitive-procedure sorted?>")
(source-properties "#<primitive-procedure source-properties>")
(source-property "#<primitive-procedure source-property>")
(source-whash "")
(sqrt "#<procedure sqrt (z)>")
(stable-sort "#<primitive-procedure stable-sort>")
(stable-sort! "#<primitive-procedure stable-sort!>")
(stack-id "#<primitive-procedure stack-id>")
(stack-length "#<primitive-procedure stack-length>")
(stack-ref "#<primitive-procedure stack-ref>")
(stack-saved? "")
(stack? "#<primitive-procedure stack?>")
(standard-eval-closure "#<primitive-procedure standard-eval-closure>")
(standard-interface-eval-closure "#<primitive-procedure standard-interface-eval-closure>")
(start-stack "")
(stat "#<primitive-procedure stat>")
(stat:atime "#<procedure stat:atime (f)>")
(stat:blksize "#<procedure stat:blksize (f)>")
(stat:blocks "#<procedure stat:blocks (f)>")
(stat:ctime "#<procedure stat:ctime (f)>")
(stat:dev "#<procedure stat:dev (f)>")
(stat:gid "#<procedure stat:gid (f)>")
(stat:ino "#<procedure stat:ino (f)>")
(stat:mode "#<procedure stat:mode (f)>")
(stat:mtime "#<procedure stat:mtime (f)>")
(stat:nlink "#<procedure stat:nlink (f)>")
(stat:perms "#<procedure stat:perms (f)>")
(stat:rdev "#<procedure stat:rdev (f)>")
(stat:size "#<procedure stat:size (f)>")
(stat:type "#<procedure stat:type (f)>")
(stat:uid "#<procedure stat:uid (f)>")
(status:exit-val "#<primitive-procedure status:exit-val>")
(status:stop-sig "#<primitive-procedure status:stop-sig>")
(status:term-sig "#<primitive-procedure status:term-sig>")
(strerror "#<primitive-procedure strerror>")
(strftime "#<primitive-procedure strftime>")
(string "#<primitive-procedure string>")
(string->list "#<primitive-procedure string->list>")
(string->number "#<primitive-procedure string->number>")
(string->symbol "#<primitive-procedure string->symbol>")
(string-append "#<primitive-procedure string-append>")
(string-capitalize "#<primitive-procedure string-capitalize>")
(string-capitalize! "#<primitive-procedure string-capitalize!>")
(string-ci->symbol "#<primitive-procedure string-ci->symbol>")
(string-ci<=? "#<primitive-procedure string-ci<=?>")
(string-ci<? "#<primitive-procedure string-ci<?>")
(string-ci=? "#<primitive-procedure string-ci=?>")
(string-ci>=? "#<primitive-procedure string-ci>=?>")
(string-ci>? "#<primitive-procedure string-ci>?>")
(string-copy "#<primitive-procedure string-copy>")
(string-downcase "#<primitive-procedure string-downcase>")
(string-downcase! "#<primitive-procedure string-downcase!>")
(string-fill! "#<primitive-procedure string-fill!>")
(string-index "#<primitive-procedure string-index>")
(string-length "#<primitive-procedure string-length>")
(string-null? "#<primitive-procedure string-null?>")
(string-ref "#<primitive-procedure string-ref>")
(string-rindex "#<primitive-procedure string-rindex>")
(string-set! "#<primitive-procedure string-set!>")
(string-split "#<primitive-procedure string-split>")
(string-upcase "#<primitive-procedure string-upcase>")
(string-upcase! "#<primitive-procedure string-upcase!>")
(string<=? "#<primitive-procedure string<=?>")
(string<? "#<primitive-procedure string<?>")
(string=? "#<primitive-procedure string=?>")
(string>=? "#<primitive-procedure string>=?>")
(string>? "#<primitive-procedure string>?>")
(string? "#<primitive-procedure string?>")
(strptime "#<primitive-procedure strptime>")
(struct-layout "#<procedure struct-layout (s)>")
(struct-ref "#<primitive-procedure struct-ref>")
(struct-set! "#<primitive-procedure struct-set!>")
(struct-vtable "#<primitive-procedure struct-vtable>")
(struct-vtable-name "#<primitive-procedure struct-vtable-name>")
(struct-vtable-tag "#<primitive-procedure struct-vtable-tag>")
(struct-vtable? "#<primitive-procedure struct-vtable?>")
(struct? "#<primitive-procedure struct?>")
(substring "#<primitive-procedure substring>")
(substring-fill! "#<primitive-procedure substring-fill!>")
(substring-move! "#<primitive-procedure substring-move!>")
(symbol "#<procedure symbol args>")
(symbol->keyword "#<procedure symbol->keyword (symbol)>")
(symbol->string "#<primitive-procedure symbol->string>")
(symbol-append "#<procedure symbol-append args>")
(symbol-fref "#<primitive-procedure symbol-fref>")
(symbol-fset! "#<primitive-procedure symbol-fset!>")
(symbol-hash "#<primitive-procedure symbol-hash>")
(symbol-interned? "#<primitive-procedure symbol-interned?>")
(symbol-pref "#<primitive-procedure symbol-pref>")
(symbol-prefix-proc "#<procedure symbol-prefix-proc (prefix)>")
(symbol-property "#<procedure symbol-property (sym prop)>")
(symbol-property-remove! "#<procedure symbol-property-remove! (sym prop)>")
(symbol-pset! "#<primitive-procedure symbol-pset!>")
(symbol? "#<primitive-procedure symbol?>")
(symlink "#<primitive-procedure symlink>")
(sync "#<primitive-procedure sync>")
(system "#<primitive-procedure system>")
(system-async "#<primitive-procedure system-async>")
(system-async-mark "#<primitive-procedure system-async-mark>")
(system-error-errno "#<procedure system-error-errno (args)>")
(tan "#<procedure tan (z)>")
(tanh "#<procedure tanh (z)>")
(tcgetpgrp "#<primitive-procedure tcgetpgrp>")
(tcsetpgrp "#<primitive-procedure tcsetpgrp>")
(the-environment "")
(the-eof-object "")
(the-last-stack "")
(the-root-environment "")
(the-root-module "")
(the-scm-module "")
(throw "#<primitive-procedure throw>")
(thunk? "#<primitive-procedure thunk?>")
(times "#<primitive-procedure times>")
(tm:gmtoff "#<procedure tm:gmtoff (obj)>")
(tm:hour "#<procedure tm:hour (obj)>")
(tm:isdst "#<procedure tm:isdst (obj)>")
(tm:mday "#<procedure tm:mday (obj)>")
(tm:min "#<procedure tm:min (obj)>")
(tm:mon "#<procedure tm:mon (obj)>")
(tm:sec "#<procedure tm:sec (obj)>")
(tm:wday "#<procedure tm:wday (obj)>")
(tm:yday "#<procedure tm:yday (obj)>")
(tm:year "#<procedure tm:year (obj)>")
(tm:zone "#<procedure tm:zone (obj)>")
(tmpnam "#<primitive-procedure tmpnam>")
(tms:clock "#<procedure tms:clock (obj)>")
(tms:cstime "#<procedure tms:cstime (obj)>")
(tms:cutime "#<procedure tms:cutime (obj)>")
(tms:stime "#<procedure tms:stime (obj)>")
(tms:utime "#<procedure tms:utime (obj)>")
(top-repl "#<procedure top-repl ()>")
(transform-usage-lambda "#<procedure transform-usage-lambda (cases)>")
(transpose-array "#<primitive-procedure transpose-array>")
(trap-disable "#<procedure trap-disable flags>")
(trap-enable "#<procedure trap-enable flags>")
(trap-set! "")
(traps "#<procedure traps args>")
(truncate "#<primitive-procedure truncate>")
(truncate-file "#<primitive-procedure truncate-file>")
(try-arbiter "#<primitive-procedure try-arbiter>")
(try-load-module "#<procedure try-load-module (name)>")
(try-module-autoload "#<procedure try-module-autoload (module-name)>")
(ttyname "#<primitive-procedure ttyname>")
(turn-on-debugging "#<procedure turn-on-debugging ()>")
(tzset "#<primitive-procedure tzset>")
(umask "#<primitive-procedure umask>")
(uname "#<primitive-procedure uname>")
(undefine "")
(uniform-array-read! "#<primitive-procedure uniform-array-read!>")
(uniform-array-set1! "#<primitive-procedure uniform-array-set1!>")
(uniform-array-write "#<primitive-procedure uniform-array-write>")
(uniform-vector-fill! "#<primitive-procedure array-fill!>")
(uniform-vector-length "#<primitive-procedure uniform-vector-length>")
(uniform-vector-read! "#<primitive-procedure uniform-array-read!>")
(uniform-vector-ref "#<primitive-procedure uniform-vector-ref>")
(uniform-vector-set! "#<procedure uniform-vector-set! (u i o)>")
(uniform-vector-write "#<primitive-procedure uniform-array-write>")
(uniform-vector? "#<primitive-procedure array?>")
(unlock-mutex "#<primitive-procedure unlock-mutex>")
(unmask-signals "#<primitive-procedure unmask-signals>")
(unmemoize "#<primitive-procedure unmemoize>")
(unread-char "#<primitive-procedure unread-char>")
(unread-string "#<primitive-procedure unread-string>")
(unspecified? "#<procedure unspecified? (v)>")
(use-emacs-interface "")
(use-modules "")
(use-srfis "#<procedure use-srfis (srfis)>")
(use-syntax "")
(using-readline? "#<procedure-with-setter>")
(usleep "#<primitive-procedure usleep>")
(utime "#<primitive-procedure utime>")
(utsname:machine "#<procedure utsname:machine (obj)>")
(utsname:nodename "#<procedure utsname:nodename (obj)>")
(utsname:release "#<procedure utsname:release (obj)>")
(utsname:sysname "#<procedure utsname:sysname (obj)>")
(utsname:version "#<procedure utsname:version (obj)>")
(valid-object-procedure? "#<primitive-procedure valid-object-procedure?>")
(values "#<primitive-procedure values>")
(variable-bound? "#<primitive-procedure variable-bound?>")
(variable-ref "#<primitive-procedure variable-ref>")
(variable-set! "#<primitive-procedure variable-set!>")
(variable? "#<primitive-procedure variable?>")
(vector "#<primitive-procedure vector>")
(vector->list "#<primitive-procedure vector->list>")
(vector-fill! "#<primitive-procedure vector-fill!>")
(vector-length "#<primitive-procedure vector-length>")
(vector-move-left! "#<primitive-procedure vector-move-left!>")
(vector-move-right! "#<primitive-procedure vector-move-right!>")
(vector-ref "#<primitive-procedure vector-ref>")
(vector-set! "#<primitive-procedure vector-set!>")
(vector? "#<primitive-procedure vector?>")
(version "#<primitive-procedure version>")
(vtable-index-layout "")
(vtable-index-printer "")
(vtable-index-vtable "")
(vtable-offset-user "")
(wait-condition-variable "#<primitive-procedure wait-condition-variable>")
(waitpid "#<primitive-procedure waitpid>")
(warn "#<procedure warn stuff>")
(weak-key-hash-table? "#<primitive-procedure weak-key-hash-table?>")
(weak-value-hash-table? "#<primitive-procedure weak-value-hash-table?>")
(weak-vector "#<primitive-procedure weak-vector>")
(weak-vector? "#<primitive-procedure weak-vector?>")
(while "")
(with-error-to-file "#<procedure with-error-to-file (file thunk)>")
(with-error-to-port "#<procedure with-error-to-port (port thunk)>")
(with-error-to-string "#<procedure with-error-to-string (thunk)>")
(with-fluids "")
(with-fluids* "#<primitive-procedure with-fluids*>")
(with-input-from-file "#<procedure with-input-from-file (file thunk)>")
(with-input-from-port "#<procedure with-input-from-port (port thunk)>")
(with-input-from-string "#<procedure with-input-from-string (string thunk)>")
(with-output-to-file "#<procedure with-output-to-file (file thunk)>")
(with-output-to-port "#<procedure with-output-to-port (port thunk)>")
(with-output-to-string "#<procedure with-output-to-string (thunk)>")
(with-traps "#<primitive-procedure with-traps>")
(write "#<primitive-procedure write>")
(write-char "#<primitive-procedure write-char>")
(xformer-table "")
(yield "#<primitive-procedure yield>")
(zero? "#<primitive-procedure zero?>")
) ;; end of scheme
(C
(collisionp B)
(coop_abort T)
(coop_condition_variable_destroy T)
(coop_condition_variable_init T)
(coop_condition_variable_signal T)
(coop_condition_variable_timed_wait_mutex T)
(coop_condition_variable_wait_mutex T)
(coop_create T)
(coop_getspecific T)
(coop_global_allq B)
(coop_global_curr B)
(coop_global_runq B)
(coop_global_sleepq B)
(coop_init T)
(coop_join T)
(coop_key_create T)
(coop_key_delete T)
(coop_mutex_destroy T)
(coop_mutex_init T)
(coop_mutex_lock T)
(coop_mutex_trylock T)
(coop_mutex_unlock T)
(coop_new_condition_variable_init T)
(coop_new_mutex_init T)
(coop_next_runnable_thread T)
(coop_qget T)
(coop_qput T)
(coop_setspecific T)
(coop_sleephelp T)
(coop_start T)
(coop_timeout_qinsert T)
(coop_tmp_queue B)
(coop_wait_for_runnable_thread T)
(coop_wait_for_runnable_thread_now T)
(coop_yield T)
(gdb_binding T)
(gdb_eval T)
(gdb_language D)
(gdb_maybe_valid_type_p T)
(gdb_options D)
(gdb_output B)
(gdb_output_length B)
(gdb_print T)
(gdb_read T)
(gdb_result B)
(gexceptfds B)
(gh_append T)
(gh_append2 T)
(gh_append3 T)
(gh_append4 T)
(gh_apply T)
(gh_bool2scm T)
(gh_boolean_p T)
(gh_caaar T)
(gh_caadr T)
(gh_caar T)
(gh_cadar T)
(gh_caddr T)
(gh_cadr T)
(gh_call0 T)
(gh_call1 T)
(gh_call2 T)
(gh_call3 T)
(gh_car T)
(gh_catch T)
(gh_cdaar T)
(gh_cdadr T)
(gh_cdar T)
(gh_cddar T)
(gh_cdddr T)
(gh_cddr T)
(gh_cdr T)
(gh_char2scm T)
(gh_char_p T)
(gh_chars2byvect T)
(gh_cons T)
(gh_define T)
(gh_display T)
(gh_double2scm T)
(gh_doubles2dvect T)
(gh_doubles2scm T)
(gh_enter T)
(gh_eq_p T)
(gh_equal_p T)
(gh_eqv_p T)
(gh_eval_file T)
(gh_eval_file_with_catch T)
(gh_eval_file_with_standard_handler T)
(gh_eval_str T)
(gh_eval_str_with_catch T)
(gh_eval_str_with_stack_saving_handler T)
(gh_eval_str_with_standard_handler T)
(gh_exact_p T)
(gh_floats2fvect T)
(gh_get_substr T)
(gh_inexact_p T)
(gh_int2scm T)
(gh_ints2scm T)
(gh_length T)
(gh_list_p T)
(gh_long2scm T)
(gh_longs2ivect T)
(gh_lookup T)
(gh_make_vector T)
(gh_module_lookup T)
(gh_new_procedure T)
(gh_new_procedure0_0 T)
(gh_new_procedure0_1 T)
(gh_new_procedure0_2 T)
(gh_new_procedure1_0 T)
(gh_new_procedure1_1 T)
(gh_new_procedure1_2 T)
(gh_new_procedure2_0 T)
(gh_new_procedure2_1 T)
(gh_new_procedure2_2 T)
(gh_new_procedure3_0 T)
(gh_new_procedure4_0 T)
(gh_new_procedure5_0 T)
(gh_newline T)
(gh_null_p T)
(gh_number_p T)
(gh_pair_p T)
(gh_procedure_p T)
(gh_repl T)
(gh_scm2bool T)
(gh_scm2char T)
(gh_scm2chars T)
(gh_scm2double T)
(gh_scm2doubles T)
(gh_scm2floats T)
(gh_scm2int T)
(gh_scm2long T)
(gh_scm2longs T)
(gh_scm2newstr T)
(gh_scm2shorts T)
(gh_scm2ulong T)
(gh_set_car_x T)
(gh_set_cdr_x T)
(gh_set_substr T)
(gh_shorts2svect T)
(gh_standard_handler T)
(gh_str02scm T)
(gh_str2scm T)
(gh_string_equal_p T)
(gh_string_p T)
(gh_symbol2newstr T)
(gh_symbol2scm T)
(gh_symbol_p T)
(gh_ulong2scm T)
(gh_ulongs2uvect T)
(gh_uniform_vector_length T)
(gh_uniform_vector_ref T)
(gh_vector_length T)
(gh_vector_p T)
(gh_vector_ref T)
(gh_vector_set_x T)
(gh_write T)
(gnfds B)
(greadfds B)
(gwritefds B)
(rexceptfds B)
(rreadfds B)
(rwritefds B)
(scm_I_am_dead B)
(scm_abs T)
(scm_accept T)
(scm_access T)
(scm_accessor_method_slot_definition T)
(scm_acons T)
(scm_acosh T)
(scm_add_feature T)
(scm_add_hook_x T)
(scm_add_method T)
(scm_add_slot T)
(scm_add_to_port_table T)
(scm_addbig T)
(scm_after_gc_c_hook B)
(scm_after_gc_hook B)
(scm_after_sweep_c_hook B)
(scm_aind T)
(scm_alarm T)
(scm_alloc_struct T)
(scm_allocate_string T)
(scm_angle T)
(scm_append T)
(scm_append_x T)
(scm_apply T)
(scm_apply_0 T)
(scm_apply_1 T)
(scm_apply_2 T)
(scm_apply_3 T)
(scm_apply_generic T)
(scm_apply_with_dynamic_root T)
(scm_arg_type_key B)
(scm_args_number_key B)
(scm_array_contents T)
(scm_array_copy_x T)
(scm_array_dimensions T)
(scm_array_equal_p T)
(scm_array_fill_int T)
(scm_array_fill_x T)
(scm_array_for_each T)
(scm_array_identity T)
(scm_array_in_bounds_p T)
(scm_array_index_map_x T)
(scm_array_map_x T)
(scm_array_p T)
(scm_array_prototype T)
(scm_array_rank T)
(scm_array_set_x T)
(scm_array_to_list T)
(scm_ash T)
(scm_asinh T)
(scm_assoc T)
(scm_assoc_ref T)
(scm_assoc_remove_x T)
(scm_assoc_set_x T)
(scm_assq T)
(scm_assq_ref T)
(scm_assq_remove_x T)
(scm_assq_set_x T)
(scm_assv T)
(scm_assv_ref T)
(scm_assv_remove_x T)
(scm_assv_set_x T)
(scm_async T)
(scm_async_click T)
(scm_async_mark T)
(scm_asyncs_pending_p D)
(scm_atanh T)
(scm_backtrace T)
(scm_badargsp T)
(scm_basename T)
(scm_basic_basic_make_class T)
(scm_basic_make_class T)
(scm_before_gc_c_hook B)
(scm_before_mark_c_hook B)
(scm_before_sweep_c_hook B)
(scm_big_and T)
(scm_big_ior T)
(scm_big_test T)
(scm_big_xor T)
(scm_bigcomp T)
(scm_bigequal T)
(scm_bigprint T)
(scm_bind T)
(scm_bit_count T)
(scm_bit_count_star T)
(scm_bit_extract T)
(scm_bit_invert_x T)
(scm_bit_position T)
(scm_bit_set_star_x T)
(scm_block_gc D)
(scm_body_thunk T)
(scm_boolean_p T)
(scm_boot_guile T)
(scm_boot_guile_1_live D)
(scm_c_call_with_current_module T)
(scm_c_chars2byvect T)
(scm_c_chars2scm T)
(scm_c_default_rstate T)
(scm_c_define T)
(scm_c_define_gsubr T)
(scm_c_define_gsubr_with_generic T)
(scm_c_define_module T)
(scm_c_define_subr T)
(scm_c_define_subr_with_generic T)
(scm_c_doubles2dvect T)
(scm_c_doubles2scm T)
(scm_c_environment_cell T)
(scm_c_environment_fold T)
(scm_c_environment_observe T)
(scm_c_environment_ref T)
(scm_c_eval_string T)
(scm_c_exp1 T)
(scm_c_export T)
(scm_c_floats2fvect T)
(scm_c_floats2scm T)
(scm_c_get_internal_run_time T)
(scm_c_hook_add T)
(scm_c_hook_init T)
(scm_c_hook_remove T)
(scm_c_hook_run T)
(scm_c_ints2ivect T)
(scm_c_ints2scm T)
(scm_c_issue_deprecation_warning T)
(scm_c_issue_deprecation_warning_fmt T)
(scm_c_load_extension T)
(scm_c_longs2ivect T)
(scm_c_longs2scm T)
(scm_c_lookup T)
(scm_c_make_gsubr T)
(scm_c_make_gsubr_with_generic T)
(scm_c_make_hash_table T)
(scm_c_make_keyword T)
(scm_c_make_rstate T)
(scm_c_make_subr T)
(scm_c_make_subr_with_generic T)
(scm_c_make_vector T)
(scm_c_memq T)
(scm_c_module_define T)
(scm_c_module_lookup T)
(scm_c_normal01 T)
(scm_c_primitive_load T)
(scm_c_primitive_load_path T)
(scm_c_random T)
(scm_c_random_bignum T)
(scm_c_read T)
(scm_c_read_string T)
(scm_c_register_extension T)
(scm_c_resolve_module T)
(scm_c_run_hook T)
(scm_c_scm2chars T)
(scm_c_scm2doubles T)
(scm_c_scm2floats T)
(scm_c_scm2ints T)
(scm_c_scm2longs T)
(scm_c_scm2shorts T)
(scm_c_shorts2scm T)
(scm_c_shorts2svect T)
(scm_c_string2str T)
(scm_c_substring2str T)
(scm_c_symbol2str T)
(scm_c_uints2uvect T)
(scm_c_ulongs2uvect T)
(scm_c_uniform01 T)
(scm_c_use_module T)
(scm_c_with_fluid T)
(scm_c_with_fluids T)
(scm_c_write T)
(scm_call_0 T)
(scm_call_1 T)
(scm_call_2 T)
(scm_call_3 T)
(scm_call_4 T)
(scm_call_generic_0 T)
(scm_call_generic_1 T)
(scm_call_generic_2 T)
(scm_call_generic_3 T)
(scm_call_with_dynamic_root T)
(scm_call_with_input_string T)
(scm_call_with_new_thread T)
(scm_call_with_output_string T)
(scm_casei_streq T)
(scm_catch T)
(scm_cellp T)
(scm_cells_allocated D)
(scm_ceval T)
(scm_ceval_ptr B)
(scm_change_object_class T)
(scm_char_alphabetic_p T)
(scm_char_ci_eq_p T)
(scm_char_ci_geq_p T)
(scm_char_ci_gr_p T)
(scm_char_ci_leq_p T)
(scm_char_ci_less_p T)
(scm_char_downcase T)
(scm_char_eq_p T)
(scm_char_geq_p T)
(scm_char_gr_p T)
(scm_char_is_both_p T)
(scm_char_leq_p T)
(scm_char_less_p T)
(scm_char_lower_case_p T)
(scm_char_numeric_p T)
(scm_char_p T)
(scm_char_ready_p T)
(scm_char_to_integer T)
(scm_char_upcase T)
(scm_char_upper_case_p T)
(scm_char_whitespace_p T)
(scm_charnames D)
(scm_charnums R)
(scm_chdir T)
(scm_check_apply_p B)
(scm_check_entry_p B)
(scm_check_exit_p B)
(scm_chmod T)
(scm_chown T)
(scm_chroot T)
(scm_class_accessor B)
(scm_class_boolean B)
(scm_class_char B)
(scm_class_class B)
(scm_class_complex B)
(scm_class_direct_methods T)
(scm_class_direct_slots T)
(scm_class_direct_subclasses T)
(scm_class_direct_supers T)
(scm_class_double B)
(scm_class_entity B)
(scm_class_entity_class B)
(scm_class_entity_with_setter B)
(scm_class_environment T)
(scm_class_float B)
(scm_class_foreign_class B)
(scm_class_foreign_object B)
(scm_class_foreign_slot B)
(scm_class_generic B)
(scm_class_generic_with_setter B)
(scm_class_input_output_port B)
(scm_class_input_port B)
(scm_class_int B)
(scm_class_integer B)
(scm_class_keyword B)
(scm_class_list B)
(scm_class_method B)
(scm_class_name T)
(scm_class_null B)
(scm_class_number B)
(scm_class_object B)
(scm_class_of T)
(scm_class_opaque B)
(scm_class_operator_class B)
(scm_class_operator_with_setter_class B)
(scm_class_output_port B)
(scm_class_pair B)
(scm_class_port B)
(scm_class_precedence_list T)
(scm_class_primitive_generic B)
(scm_class_procedure B)
(scm_class_procedure_class B)
(scm_class_procedure_with_setter B)
(scm_class_protected B)
(scm_class_protected_opaque B)
(scm_class_protected_read_only B)
(scm_class_read_only B)
(scm_class_real B)
(scm_class_scm B)
(scm_class_self B)
(scm_class_simple_method B)
(scm_class_slots T)
(scm_class_string B)
(scm_class_symbol B)
(scm_class_top B)
(scm_class_unknown B)
(scm_class_vector B)
(scm_close T)
(scm_close_fdes T)
(scm_close_input_port T)
(scm_close_output_port T)
(scm_close_port T)
(scm_closedir T)
(scm_closure T)
(scm_closure_p T)
(scm_compile_shell_switches T)
(scm_complex_equalp T)
(scm_components B)
(scm_compute_applicable_methods T)
(scm_connect T)
(scm_cons T)
(scm_cons2 T)
(scm_cons_source T)
(scm_cons_star T)
(scm_copy_big_dec T)
(scm_copy_file T)
(scm_copy_fluids T)
(scm_copy_random_state T)
(scm_copy_smaller T)
(scm_copy_tree T)
(scm_count_argv T)
(scm_critical_section_mutex B)
(scm_crypt T)
(scm_ctermid T)
(scm_current_error_port T)
(scm_current_input_port T)
(scm_current_load_port T)
(scm_current_module T)
(scm_current_module_lookup_closure T)
(scm_current_module_transformer T)
(scm_current_output_port T)
(scm_current_time T)
(scm_cuserid T)
(scm_cvref T)
(scm_dapply T)
(scm_dblprec B)
(scm_debug_eframe_size B)
(scm_debug_mode B)
(scm_debug_object_p T)
(scm_debug_options T)
(scm_debug_opts D)
(scm_default_init_heap_size_1 D)
(scm_default_init_heap_size_2 D)
(scm_default_max_segment_size D)
(scm_default_min_yield_1 D)
(scm_default_min_yield_2 D)
(scm_define T)
(scm_definedp T)
(scm_delete T)
(scm_delete1_x T)
(scm_delete_file T)
(scm_delete_x T)
(scm_delq T)
(scm_delq1_x T)
(scm_delq_x T)
(scm_delv T)
(scm_delv1_x T)
(scm_delv_x T)
(scm_deprecated_newcell T)
(scm_deprecated_newcell2 T)
(scm_destroy_guardian_x T)
(scm_deval T)
(scm_difference T)
(scm_dimensions_to_uniform_array T)
(scm_directory_stream_p T)
(scm_dirname T)
(scm_display T)
(scm_display_application T)
(scm_display_backtrace T)
(scm_display_error T)
(scm_display_error_message T)
(scm_divbigdig T)
(scm_divide T)
(scm_done_free T)
(scm_done_malloc T)
(scm_dot_string B)
(scm_double2num T)
(scm_doubly_weak_hash_table_p T)
(scm_dowinds T)
(scm_downcase T)
(scm_drain_input T)
(scm_dup2 T)
(scm_dup_to_fdes T)
(scm_dynamic_args_call T)
(scm_dynamic_call T)
(scm_dynamic_func T)
(scm_dynamic_link T)
(scm_dynamic_object_p T)
(scm_dynamic_root T)
(scm_dynamic_unlink T)
(scm_dynamic_wind T)
(scm_enable_primitive_generic_x T)
(scm_enclose_array T)
(scm_end_input T)
(scm_ensure_accessor T)
(scm_entity_p T)
(scm_env_module T)
(scm_env_top_level T)
(scm_environ T)
(scm_environment_bound_p T)
(scm_environment_cell T)
(scm_environment_define T)
(scm_environment_fold T)
(scm_environment_observe T)
(scm_environment_observe_weak T)
(scm_environment_p T)
(scm_environment_ref T)
(scm_environment_set_x T)
(scm_environment_undefine T)
(scm_environment_unobserve T)
(scm_environments_prehistory T)
(scm_eof_object_p T)
(scm_eq_p T)
(scm_equal_p T)
(scm_eqv_p T)
(scm_error T)
(scm_error_environment_immutable_binding T)
(scm_error_environment_immutable_location T)
(scm_error_environment_unbound T)
(scm_error_num_args_subr T)
(scm_error_revive_threads T)
(scm_error_scm T)
(scm_eval T)
(scm_eval_args T)
(scm_eval_body T)
(scm_eval_car T)
(scm_eval_closure_lookup T)
(scm_eval_environment_imported T)
(scm_eval_environment_local T)
(scm_eval_environment_p T)
(scm_eval_environment_set_imported_x T)
(scm_eval_environment_set_local_x T)
(scm_eval_options_interface T)
(scm_eval_opts D)
(scm_eval_stack B)
(scm_eval_string T)
(scm_eval_x T)
(scm_evaluator_trap_table D)
(scm_evaluator_traps T)
(scm_even_p T)
(scm_evict_ports T)
(scm_exact_p T)
(scm_exact_to_inexact T)
(scm_execl T)
(scm_execle T)
(scm_execlp T)
(scm_exit_status T)
(scm_expmem D)
(scm_export_environment_p T)
(scm_export_environment_private T)
(scm_export_environment_set_private_x T)
(scm_export_environment_set_signature_x T)
(scm_export_environment_signature T)
(scm_f_apply B)
(scm_f_gsubr_apply B)
(scm_fcntl T)
(scm_fdes_to_port T)
(scm_fdes_to_ports T)
(scm_fdopen T)
(scm_file_port_p T)
(scm_fileno T)
(scm_fill_input T)
(scm_find_executable T)
(scm_find_method T)
(scm_finish_srcprop T)
(scm_float2num T)
(scm_flock T)
(scm_fluid_p T)
(scm_fluid_ref T)
(scm_fluid_set_x T)
(scm_flush T)
(scm_flush_all_ports T)
(scm_flush_ws T)
(scm_for_each T)
(scm_force T)
(scm_force_output T)
(scm_fork T)
(scm_frame_arguments T)
(scm_frame_evaluating_args_p T)
(scm_frame_next T)
(scm_frame_number T)
(scm_frame_overflow_p T)
(scm_frame_p T)
(scm_frame_previous T)
(scm_frame_procedure T)
(scm_frame_procedure_p T)
(scm_frame_real_p T)
(scm_frame_source T)
(scm_free0 T)
(scm_free_print_state T)
(scm_free_subr_entry T)
(scm_freelist D)
(scm_freelist2 D)
(scm_fsync T)
(scm_ftell T)
(scm_gc T)
(scm_gc_cells_collected B)
(scm_gc_cells_marked_acc D)
(scm_gc_cells_swept D)
(scm_gc_cells_swept_acc D)
(scm_gc_for_newcell T)
(scm_gc_free T)
(scm_gc_heap_lock D)
(scm_gc_malloc T)
(scm_gc_malloc_collected B)
(scm_gc_mark T)
(scm_gc_mark_dependencies T)
(scm_gc_mark_time_taken D)
(scm_gc_ports_collected B)
(scm_gc_protect_object T)
(scm_gc_realloc T)
(scm_gc_register_collectable_memory T)
(scm_gc_register_root T)
(scm_gc_register_roots T)
(scm_gc_running_p D)
(scm_gc_stats T)
(scm_gc_strdup T)
(scm_gc_strndup T)
(scm_gc_sweep T)
(scm_gc_sweep_time_taken D)
(scm_gc_time_taken D)
(scm_gc_times D)
(scm_gc_unprotect_object T)
(scm_gc_unregister_collectable_memory T)
(scm_gc_unregister_root T)
(scm_gc_unregister_roots T)
(scm_gc_yield B)
(scm_gcd T)
(scm_generic_capability_p T)
(scm_generic_function_methods T)
(scm_generic_function_name T)
(scm_gensym T)
(scm_geq_p T)
(scm_get_internal_real_time T)
(scm_get_internal_run_time T)
(scm_get_keyword T)
(scm_get_meta_args T)
(scm_get_one_zombie T)
(scm_get_output_string T)
(scm_get_pre_modules_obarray T)
(scm_get_print_state T)
(scm_get_stack_base T)
(scm_getc T)
(scm_getcwd T)
(scm_getegid T)
(scm_getenv T)
(scm_geteuid T)
(scm_getgid T)
(scm_getgrgid T)
(scm_getgroups T)
(scm_gethost T)
(scm_gethostname T)
(scm_getitimer T)
(scm_getlogin T)
(scm_getnet T)
(scm_getpass T)
(scm_getpeername T)
(scm_getpgrp T)
(scm_getpid T)
(scm_getppid T)
(scm_getpriority T)
(scm_getproto T)
(scm_getpwuid T)
(scm_getserv T)
(scm_getsockname T)
(scm_getsockopt T)
(scm_gettimeofday T)
(scm_getuid T)
(scm_gmtime T)
(scm_gr_p T)
(scm_grow_tok_buf T)
(scm_gsubr_apply T)
(scm_guard T)
(scm_guardian_destroyed_p T)
(scm_guardian_greedy_p T)
(scm_handle_by_message T)
(scm_handle_by_message_noexit T)
(scm_handle_by_proc T)
(scm_handle_by_proc_catching_all T)
(scm_handle_by_throw T)
(scm_hash T)
(scm_hash_create_handle_x T)
(scm_hash_fn_create_handle_x T)
(scm_hash_fn_get_handle T)
(scm_hash_fn_ref T)
(scm_hash_fn_remove_x T)
(scm_hash_fn_set_x T)
(scm_hash_fold T)
(scm_hash_get_handle T)
(scm_hash_ref T)
(scm_hash_remove_x T)
(scm_hash_set_x T)
(scm_hasher T)
(scm_hashq T)
(scm_hashq_create_handle_x T)
(scm_hashq_get_handle T)
(scm_hashq_ref T)
(scm_hashq_remove_x T)
(scm_hashq_set_x T)
(scm_hashv T)
(scm_hashv_create_handle_x T)
(scm_hashv_get_handle T)
(scm_hashv_ref T)
(scm_hashv_remove_x T)
(scm_hashv_set_x T)
(scm_hashx_create_handle_x T)
(scm_hashx_get_handle T)
(scm_hashx_ref T)
(scm_hashx_remove_x T)
(scm_hashx_set_x T)
(scm_heap_org B)
(scm_heap_table D)
(scm_hook_empty_p T)
(scm_hook_p T)
(scm_hook_to_list T)
(scm_htonl T)
(scm_htons T)
(scm_i_adjbig T)
(scm_i_big2dbl T)
(scm_i_big2inum T)
(scm_i_copy_rstate T)
(scm_i_copybig T)
(scm_i_dbl2big T)
(scm_i_display_error T)
(scm_i_dummy B)
(scm_i_eval T)
(scm_i_eval_x T)
(scm_i_get_keyword T)
(scm_i_init_rstate T)
(scm_i_int2big T)
(scm_i_long2big T)
(scm_i_long_long2big T)
(scm_i_make_class_object T)
(scm_i_mem2number T)
(scm_i_mkbig T)
(scm_i_normbig T)
(scm_i_procedure_arity T)
(scm_i_ptrdiff2big T)
(scm_i_short2big T)
(scm_i_size2big T)
(scm_i_uint2big T)
(scm_i_ulong2big T)
(scm_i_ulong_long2big T)
(scm_i_uniform32 T)
(scm_i_ushort2big T)
(scm_i_variable_print T)
(scm_ice_9_already_loaded D)
(scm_igc T)
(scm_ihash T)
(scm_ihashq T)
(scm_ihashv T)
(scm_iint2str T)
(scm_ilength T)
(scm_ilookup T)
(scm_imag_part T)
(scm_import_environment_imports T)
(scm_import_environment_p T)
(scm_import_environment_set_imports_x T)
(scm_include_deprecated_features T)
(scm_inet_aton T)
(scm_inet_makeaddr T)
(scm_inet_netof T)
(scm_inet_ntoa T)
(scm_inet_ntop T)
(scm_inet_pton T)
(scm_inexact_p T)
(scm_inexact_to_exact T)
(scm_init_alist T)
(scm_init_arbiters T)
(scm_init_async T)
(scm_init_backtrace T)
(scm_init_boolean T)
(scm_init_chars T)
(scm_init_continuations T)
(scm_init_debug T)
(scm_init_deprecation T)
(scm_init_dynamic_linking T)
(scm_init_dynwind T)
(scm_init_environments T)
(scm_init_eq T)
(scm_init_error T)
(scm_init_eval T)
(scm_init_evalext T)
(scm_init_extensions T)
(scm_init_feature T)
(scm_init_filesys T)
(scm_init_fluids T)
(scm_init_fports T)
(scm_init_gc T)
(scm_init_gdbint T)
(scm_init_goops T)
(scm_init_goops_builtins T)
(scm_init_gsubr T)
(scm_init_guardians T)
(scm_init_guile T)
(scm_init_hash T)
(scm_init_hashtab T)
(scm_init_hooks T)
(scm_init_ioext T)
(scm_init_iselect T)
(scm_init_keywords T)
(scm_init_lang T)
(scm_init_list T)
(scm_init_load T)
(scm_init_load_path T)
(scm_init_macros T)
(scm_init_mallocs T)
(scm_init_modules T)
(scm_init_net_db T)
(scm_init_numbers T)
(scm_init_objects T)
(scm_init_objprop T)
(scm_init_options T)
(scm_init_opts T)
(scm_init_pairs T)
(scm_init_ports T)
(scm_init_posix T)
(scm_init_print T)
(scm_init_procprop T)
(scm_init_procs T)
(scm_init_properties T)
(scm_init_ramap T)
(scm_init_random T)
(scm_init_rdelim T)
(scm_init_rdelim_builtins T)
(scm_init_read T)
(scm_init_regex_posix T)
(scm_init_root T)
(scm_init_rw T)
(scm_init_rw_builtins T)
(scm_init_scmsigs T)
(scm_init_script T)
(scm_init_simpos T)
(scm_init_socket T)
(scm_init_sort T)
(scm_init_srcprop T)
(scm_init_stackchk T)
(scm_init_stacks T)
(scm_init_stime T)
(scm_init_storage T)
(scm_init_strings T)
(scm_init_strop T)
(scm_init_strorder T)
(scm_init_strports T)
(scm_init_struct T)
(scm_init_subr_table T)
(scm_init_symbols T)
(scm_init_threads T)
(scm_init_throw T)
(scm_init_unif T)
(scm_init_values T)
(scm_init_variable T)
(scm_init_vectors T)
(scm_init_version T)
(scm_init_vports T)
(scm_init_weaks T)
(scm_initialized_p D)
(scm_input_port_p T)
(scm_instance_p T)
(scm_int2num T)
(scm_integer_expt T)
(scm_integer_length T)
(scm_integer_p T)
(scm_integer_to_char T)
(scm_interaction_environment T)
(scm_internal_catch T)
(scm_internal_cwdr T)
(scm_internal_dynamic_wind T)
(scm_internal_hash_fold T)
(scm_internal_lazy_catch T)
(scm_internal_parse_path T)
(scm_internal_select T)
(scm_internal_stack_catch T)
(scm_intprint T)
(scm_ints_disabled D)
(scm_iprin1 T)
(scm_iprlist T)
(scm_ipruk T)
(scm_isatty_p T)
(scm_issue_deprecation_warning T)
(scm_istr2bve T)
(scm_isymnames D)
(scm_ithrow T)
(scm_join_thread T)
(scm_keyword_dash_symbol T)
(scm_keyword_p T)
(scm_kill T)
(scm_last_pair T)
(scm_last_stack_frame T)
(scm_lazy_catch T)
(scm_lcm T)
(scm_leaf_environment_p T)
(scm_length T)
(scm_leq_p T)
(scm_less_p T)
(scm_lfwrite T)
(scm_link T)
(scm_list T)
(scm_list_1 T)
(scm_list_2 T)
(scm_list_3 T)
(scm_list_4 T)
(scm_list_5 T)
(scm_list_cdr_set_x T)
(scm_list_copy T)
(scm_list_head T)
(scm_list_n T)
(scm_list_p T)
(scm_list_ref T)
(scm_list_set_x T)
(scm_list_tail T)
(scm_list_to_uniform_array T)
(scm_listen T)
(scm_listofnullstr B)
(scm_lnaof T)
(scm_load_extension T)
(scm_load_goops T)
(scm_load_startup_files T)
(scm_local_eval T)
(scm_localtime T)
(scm_lock_mutex T)
(scm_logand T)
(scm_logbit_p T)
(scm_logcount T)
(scm_logior T)
(scm_lognot T)
(scm_logtest T)
(scm_logxor T)
(scm_long2num T)
(scm_long_long2num T)
(scm_lookup T)
(scm_lookup_closure_module T)
(scm_lookupcar T)
(scm_lreadparen T)
(scm_lreadr T)
(scm_lreadrecparen T)
(scm_lstat T)
(scm_m_and T)
(scm_m_apply T)
(scm_m_at_call_with_values T)
(scm_m_atbind T)
(scm_m_atdispatch T)
(scm_m_atfop T)
(scm_m_atslot_ref T)
(scm_m_atslot_set_x T)
(scm_m_begin T)
(scm_m_case T)
(scm_m_cond T)
(scm_m_cont T)
(scm_m_define T)
(scm_m_delay T)
(scm_m_do T)
(scm_m_expand_body T)
(scm_m_generalized_set_x T)
(scm_m_if T)
(scm_m_lambda T)
(scm_m_let T)
(scm_m_letrec T)
(scm_m_letstar T)
(scm_m_nil_cond T)
(scm_m_or T)
(scm_m_quasiquote T)
(scm_m_quote T)
(scm_m_set_x T)
(scm_m_undefine T)
(scm_macro_name T)
(scm_macro_p T)
(scm_macro_transformer T)
(scm_macro_type T)
(scm_macroexp T)
(scm_magnitude T)
(scm_major_version T)
(scm_makacro T)
(scm_makcclo T)
(scm_make T)
(scm_make_arbiter T)
(scm_make_class T)
(scm_make_class_object T)
(scm_make_complex T)
(scm_make_condition_variable T)
(scm_make_continuation T)
(scm_make_debugobj T)
(scm_make_doubly_weak_hash_table T)
(scm_make_environment T)
(scm_make_eval_environment T)
(scm_make_export_environment T)
(scm_make_extended_class T)
(scm_make_fluid T)
(scm_make_foreign_object T)
(scm_make_guardian T)
(scm_make_hook T)
(scm_make_import_environment T)
(scm_make_initial_fluids T)
(scm_make_keyword_from_dash_symbol T)
(scm_make_leaf_environment T)
(scm_make_memoized T)
(scm_make_method_cache T)
(scm_make_mutex T)
(scm_make_polar T)
(scm_make_port_classes T)
(scm_make_port_type T)
(scm_make_print_state T)
(scm_make_procedure_with_setter T)
(scm_make_ra T)
(scm_make_real T)
(scm_make_rectangular T)
(scm_make_regexp T)
(scm_make_root T)
(scm_make_shared_array T)
(scm_make_smob T)
(scm_make_smob_type T)
(scm_make_soft_port T)
(scm_make_srcprops T)
(scm_make_stack T)
(scm_make_string T)
(scm_make_struct T)
(scm_make_struct_layout T)
(scm_make_subclass_object T)
(scm_make_symbol T)
(scm_make_synt T)
(scm_make_undefined_variable T)
(scm_make_uve T)
(scm_make_variable T)
(scm_make_vector T)
(scm_make_vtable_vtable T)
(scm_make_weak_key_hash_table T)
(scm_make_weak_value_hash_table T)
(scm_make_weak_vector T)
(scm_makfrom0str T)
(scm_makfrom0str_opt T)
(scm_makfromstrs T)
(scm_makmacro T)
(scm_makmmacro T)
(scm_makprom T)
(scm_malloc T)
(scm_malloc_obj T)
(scm_mallocated D)
(scm_map T)
(scm_mark0 T)
(scm_mark_locations T)
(scm_mark_subr_table T)
(scm_markcdr T)
(scm_markstream T)
(scm_mask_ints D)
(scm_mask_signals T)
(scm_masktab B)
(scm_master_freelist D)
(scm_master_freelist2 D)
(scm_max T)
(scm_max_segment_size B)
(scm_mcache_compute_cmethod T)
(scm_mcache_lookup_cmethod T)
(scm_mem2string T)
(scm_mem2symbol T)
(scm_mem2uninterned_symbol T)
(scm_member T)
(scm_memoize_method T)
(scm_memoized_environment T)
(scm_memoized_p T)
(scm_memory_alloc_key B)
(scm_memory_error T)
(scm_memq T)
(scm_memv T)
(scm_merge T)
(scm_merge_x T)
(scm_metaclass_operator B)
(scm_metaclass_standard B)
(scm_method_generic_function T)
(scm_method_procedure T)
(scm_method_specializers T)
(scm_micro_version T)
(scm_min T)
(scm_minor_version T)
(scm_misc_error T)
(scm_misc_error_key B)
(scm_mkdir T)
(scm_mknod T)
(scm_mkstemp T)
(scm_mkstrport T)
(scm_mktime T)
(scm_mode_bits T)
(scm_module_define T)
(scm_module_goops B)
(scm_module_lookup T)
(scm_module_lookup_closure T)
(scm_module_reverse_lookup T)
(scm_module_system_booted_p D)
(scm_module_tag B)
(scm_module_transformer T)
(scm_modules_prehistory T)
(scm_modulo T)
(scm_mtrigger B)
(scm_mulbig T)
(scm_must_free T)
(scm_must_malloc T)
(scm_must_realloc T)
(scm_must_strdup T)
(scm_must_strndup T)
(scm_n_charnames D)
(scm_n_heap_segs D)
(scm_nconc2last T)
(scm_negative_p T)
(scm_newline T)
(scm_nice T)
(scm_no_applicable_method B)
(scm_noop T)
(scm_not T)
(scm_ntohl T)
(scm_ntohs T)
(scm_null_p T)
(scm_num2dbl T)
(scm_num2double T)
(scm_num2float T)
(scm_num2int T)
(scm_num2long T)
(scm_num2long_long T)
(scm_num2ptrdiff T)
(scm_num2short T)
(scm_num2size T)
(scm_num2uint T)
(scm_num2ulong T)
(scm_num2ulong_long T)
(scm_num2ushort T)
(scm_num_eq_p T)
(scm_num_overflow T)
(scm_num_overflow_key B)
(scm_number_p T)
(scm_number_to_string T)
(scm_numptob B)
(scm_numsmob B)
(scm_object_address T)
(scm_object_properties T)
(scm_object_property T)
(scm_object_to_string T)
(scm_odd_p T)
(scm_open T)
(scm_open_fdes T)
(scm_open_file T)
(scm_open_input_string T)
(scm_open_output_string T)
(scm_opendir T)
(scm_operator_p T)
(scm_options T)
(scm_out_of_range T)
(scm_out_of_range_key B)
(scm_out_of_range_pos T)
(scm_output_port_p T)
(scm_pair_p T)
(scm_parse_path T)
(scm_pause T)
(scm_peek_char T)
(scm_permanent_object T)
(scm_pipe T)
(scm_port_class D)
(scm_port_closed_p T)
(scm_port_column T)
(scm_port_filename T)
(scm_port_for_each T)
(scm_port_line T)
(scm_port_mode T)
(scm_port_non_buffer T)
(scm_port_p T)
(scm_port_print T)
(scm_port_revealed T)
(scm_port_table B)
(scm_port_table_room D)
(scm_port_table_size D)
(scm_port_with_print_state T)
(scm_ports_prehistory T)
(scm_positive_p T)
(scm_pre_modules_obarray B)
(scm_primitive_eval T)
(scm_primitive_eval_x T)
(scm_primitive_exit T)
(scm_primitive_generic_generic T)
(scm_primitive_load T)
(scm_primitive_load_path T)
(scm_primitive_make_property T)
(scm_primitive_move_to_fdes T)
(scm_primitive_property_del_x T)
(scm_primitive_property_ref T)
(scm_primitive_property_set_x T)
(scm_prin1 T)
(scm_print_carefully_p B)
(scm_print_complex T)
(scm_print_options T)
(scm_print_opts D)
(scm_print_port_mode T)
(scm_print_real T)
(scm_print_state_vtable D)
(scm_print_struct T)
(scm_print_symbol_name T)
(scm_printer_apply T)
(scm_procedure T)
(scm_procedure_documentation T)
(scm_procedure_environment T)
(scm_procedure_name T)
(scm_procedure_p T)
(scm_procedure_properties T)
(scm_procedure_property T)
(scm_procedure_source T)
(scm_procedure_with_setter_p T)
(scm_product T)
(scm_program_arguments T)
(scm_promise_p T)
(scm_pseudolong T)
(scm_ptobs B)
(scm_ptrdiff2num T)
(scm_putc T)
(scm_putenv T)
(scm_puts T)
(scm_quotient T)
(scm_ra2contig T)
(scm_ra_difference T)
(scm_ra_divide T)
(scm_ra_eqp T)
(scm_ra_greqp T)
(scm_ra_grp T)
(scm_ra_leqp T)
(scm_ra_lessp T)
(scm_ra_matchp T)
(scm_ra_product T)
(scm_ra_set_contp T)
(scm_ra_sum T)
(scm_raequal T)
(scm_raise T)
(scm_ramapc T)
(scm_random T)
(scm_random_exp T)
(scm_random_hollow_sphere_x T)
(scm_random_normal T)
(scm_random_normal_vector_x T)
(scm_random_solid_sphere_x T)
(scm_random_uniform T)
(scm_raprin1 T)
(scm_read T)
(scm_read_char T)
(scm_read_delimited_x T)
(scm_read_hash_extend T)
(scm_read_line T)
(scm_read_options T)
(scm_read_opts D)
(scm_read_string_x_partial T)
(scm_read_token T)
(scm_readdir T)
(scm_readlink T)
(scm_real_equalp T)
(scm_real_p T)
(scm_real_part T)
(scm_realloc T)
(scm_recv T)
(scm_recvfrom T)
(scm_redirect_port T)
(scm_regexp_exec T)
(scm_regexp_p T)
(scm_release_arbiter T)
(scm_remainder T)
(scm_remember_upto_here T)
(scm_remember_upto_here_1 T)
(scm_remember_upto_here_2 T)
(scm_remove_from_port_table T)
(scm_remove_hook_x T)
(scm_rename T)
(scm_report_stack_overflow T)
(scm_reset_hook_x T)
(scm_resolve_module T)
(scm_restore_signals T)
(scm_restricted_vector_sort_x T)
(scm_return_first T)
(scm_return_first_int T)
(scm_revealed_count T)
(scm_reverse T)
(scm_reverse_lookup T)
(scm_reverse_x T)
(scm_rewinddir T)
(scm_rmdir T)
(scm_round T)
(scm_run_asyncs T)
(scm_run_hook T)
(scm_s_bindings R)
(scm_s_body R)
(scm_s_clauses R)
(scm_s_duplicate_bindings R)
(scm_s_duplicate_formals R)
(scm_s_expression R)
(scm_s_formals R)
(scm_s_set_x R)
(scm_s_slot_set_x D)
(scm_s_test R)
(scm_s_variable R)
(scm_search_path T)
(scm_seed_to_random_state T)
(scm_seek T)
(scm_select T)
(scm_send T)
(scm_sendto T)
(scm_set_car_x T)
(scm_set_cdr_x T)
(scm_set_current_error_port T)
(scm_set_current_input_port T)
(scm_set_current_module T)
(scm_set_current_output_port T)
(scm_set_object_procedure_x T)
(scm_set_object_properties_x T)
(scm_set_object_property_x T)
(scm_set_port_close T)
(scm_set_port_column_x T)
(scm_set_port_end_input T)
(scm_set_port_equalp T)
(scm_set_port_filename_x T)
(scm_set_port_flush T)
(scm_set_port_free T)
(scm_set_port_input_waiting T)
(scm_set_port_line_x T)
(scm_set_port_mark T)
(scm_set_port_print T)
(scm_set_port_revealed_x T)
(scm_set_port_seek T)
(scm_set_port_truncate T)
(scm_set_procedure_properties_x T)
(scm_set_procedure_property_x T)
(scm_set_program_arguments T)
(scm_set_smob_apply T)
(scm_set_smob_equalp T)
(scm_set_smob_free T)
(scm_set_smob_mark T)
(scm_set_smob_print T)
(scm_set_source_properties_x T)
(scm_set_source_property_x T)
(scm_set_struct_vtable_name_x T)
(scm_setegid T)
(scm_seteuid T)
(scm_setgid T)
(scm_setgrent T)
(scm_sethost T)
(scm_sethostname T)
(scm_setitimer T)
(scm_setlocale T)
(scm_setnet T)
(scm_setpgid T)
(scm_setpriority T)
(scm_setproto T)
(scm_setpwent T)
(scm_setserv T)
(scm_setsid T)
(scm_setsockopt T)
(scm_setter T)
(scm_setuid T)
(scm_setvbuf T)
(scm_shap2ra T)
(scm_shared_array_increments T)
(scm_shared_array_offset T)
(scm_shared_array_root T)
(scm_shell T)
(scm_shell_usage T)
(scm_short2num T)
(scm_shutdown T)
(scm_sigaction T)
(scm_signal_condition_variable T)
(scm_simple_format T)
(scm_single_thread_p T)
(scm_size2num T)
(scm_sleep T)
(scm_sloppy_assoc T)
(scm_sloppy_assq T)
(scm_sloppy_assv T)
(scm_slot_bound_p T)
(scm_slot_bound_using_class_p T)
(scm_slot_exists_using_class_p T)
(scm_slot_ref T)
(scm_slot_ref_using_class T)
(scm_slot_set_using_class_x T)
(scm_slot_set_x T)
(scm_slots_exists_p T)
(scm_smob_class D)
(scm_smob_free T)
(scm_smob_prehistory T)
(scm_smob_print T)
(scm_smobs B)
(scm_socket T)
(scm_socketpair T)
(scm_sort T)
(scm_sort_list T)
(scm_sort_list_x T)
(scm_sort_x T)
(scm_sorted_p T)
(scm_source_properties T)
(scm_source_property T)
(scm_spawn_thread T)
(scm_srcprops_to_plist T)
(scm_stable_sort T)
(scm_stable_sort_x T)
(scm_stack_checking_enabled_p B)
(scm_stack_id T)
(scm_stack_length T)
(scm_stack_p T)
(scm_stack_ref T)
(scm_stack_report T)
(scm_stack_size T)
(scm_stack_type B)
(scm_standard_eval_closure T)
(scm_standard_interface_eval_closure T)
(scm_start_stack T)
(scm_stat T)
(scm_status_exit_val T)
(scm_status_stop_sig T)
(scm_status_term_sig T)
(scm_str2string T)
(scm_str2symbol T)
(scm_strdup T)
(scm_strerror T)
(scm_strftime T)
(scm_string T)
(scm_string_append T)
(scm_string_capitalize T)
(scm_string_capitalize_x T)
(scm_string_ci_equal_p T)
(scm_string_ci_geq_p T)
(scm_string_ci_gr_p T)
(scm_string_ci_leq_p T)
(scm_string_ci_less_p T)
(scm_string_ci_to_symbol T)
(scm_string_copy T)
(scm_string_downcase T)
(scm_string_downcase_x T)
(scm_string_equal_p T)
(scm_string_fill_x T)
(scm_string_geq_p T)
(scm_string_gr_p T)
(scm_string_hash T)
(scm_string_index T)
(scm_string_length T)
(scm_string_leq_p T)
(scm_string_less_p T)
(scm_string_null_p T)
(scm_string_p T)
(scm_string_ref T)
(scm_string_rindex T)
(scm_string_set_x T)
(scm_string_split T)
(scm_string_to_list T)
(scm_string_to_number T)
(scm_string_to_symbol T)
(scm_string_upcase T)
(scm_string_upcase_x T)
(scm_strndup T)
(scm_strport_to_string T)
(scm_strptime T)
(scm_struct_create_handle T)
(scm_struct_free_0 T)
(scm_struct_free_entity T)
(scm_struct_free_light T)
(scm_struct_free_standard T)
(scm_struct_ihashq T)
(scm_struct_p T)
(scm_struct_prehistory T)
(scm_struct_ref T)
(scm_struct_set_x T)
(scm_struct_table B)
(scm_struct_vtable T)
(scm_struct_vtable_name T)
(scm_struct_vtable_p T)
(scm_struct_vtable_tag T)
(scm_structs_to_free B)
(scm_subr_p T)
(scm_subr_table B)
(scm_subr_table_room D)
(scm_subr_table_size D)
(scm_substring T)
(scm_substring_fill_x T)
(scm_substring_move_x T)
(scm_sum T)
(scm_swap_bindings T)
(scm_swap_fluids T)
(scm_swap_fluids_reverse T)
(scm_switch_counter D)
(scm_sym2var T)
(scm_sym_and B)
(scm_sym_apply B)
(scm_sym_apply_frame B)
(scm_sym_arity B)
(scm_sym_arrow B)
(scm_sym_at_call_with_values B)
(scm_sym_atapply B)
(scm_sym_atcall_cc B)
(scm_sym_begin B)
(scm_sym_breakpoint B)
(scm_sym_case B)
(scm_sym_column B)
(scm_sym_cond B)
(scm_sym_copy B)
(scm_sym_define B)
(scm_sym_delay B)
(scm_sym_do B)
(scm_sym_dot B)
(scm_sym_else B)
(scm_sym_enter_frame B)
(scm_sym_exit_frame B)
(scm_sym_filename B)
(scm_sym_if B)
(scm_sym_lambda B)
(scm_sym_let B)
(scm_sym_letrec B)
(scm_sym_letstar B)
(scm_sym_line B)
(scm_sym_name B)
(scm_sym_or B)
(scm_sym_quasiquote B)
(scm_sym_quote B)
(scm_sym_set_x B)
(scm_sym_system_procedure B)
(scm_sym_trace B)
(scm_sym_unquote B)
(scm_sym_uq_splicing B)
(scm_symbol_fref T)
(scm_symbol_fset_x T)
(scm_symbol_hash T)
(scm_symbol_interned_p T)
(scm_symbol_p T)
(scm_symbol_pref T)
(scm_symbol_pset_x T)
(scm_symbol_to_string T)
(scm_symbols_prehistory T)
(scm_symlink T)
(scm_sync T)
(scm_sys_allocate_instance T)
(scm_sys_atan2 T)
(scm_sys_compute_applicable_methods T)
(scm_sys_compute_slots T)
(scm_sys_expt T)
(scm_sys_fast_slot_ref T)
(scm_sys_fast_slot_set_x T)
(scm_sys_inherit_magic_x T)
(scm_sys_initialize_object T)
(scm_sys_invalidate_class T)
(scm_sys_invalidate_method_cache_x T)
(scm_sys_library_dir T)
(scm_sys_make_void_port T)
(scm_sys_method_more_specific_p T)
(scm_sys_modify_class T)
(scm_sys_modify_instance T)
(scm_sys_package_data_dir T)
(scm_sys_prep_layout_x T)
(scm_sys_protects B)
(scm_sys_search_load_path T)
(scm_sys_set_object_setter_x T)
(scm_sys_site_dir T)
(scm_sys_tag_body T)
(scm_syserror T)
(scm_syserror_msg T)
(scm_system T)
(scm_system_async T)
(scm_system_async_mark T)
(scm_system_async_mark_from_signal_handler T)
(scm_system_environment B)
(scm_system_error_key B)
(scm_system_module_env_p T)
(scm_tables_prehistory T)
(scm_take0str T)
(scm_take_from_input_buffers T)
(scm_take_str T)
(scm_tc16_allocated B)
(scm_tc16_array B)
(scm_tc16_condvar B)
(scm_tc16_continuation B)
(scm_tc16_debugobj B)
(scm_tc16_dir B)
(scm_tc16_dynamic_obj B)
(scm_tc16_environment B)
(scm_tc16_eval_closure B)
(scm_tc16_fluid B)
(scm_tc16_fport B)
(scm_tc16_hook B)
(scm_tc16_keyword B)
(scm_tc16_macro B)
(scm_tc16_malloc B)
(scm_tc16_memoized B)
(scm_tc16_mutex B)
(scm_tc16_observer B)
(scm_tc16_port_with_ps B)
(scm_tc16_promise B)
(scm_tc16_regex B)
(scm_tc16_root B)
(scm_tc16_rstate B)
(scm_tc16_srcprops B)
(scm_tc16_strport B)
(scm_tc16_thread B)
(scm_tc16_void_port D)
(scm_tcgetpgrp T)
(scm_tcsetpgrp T)
(scm_the_last_stack_fluid_var B)
(scm_the_rng B)
(scm_thread_count D)
(scm_thread_sleep T)
(scm_thread_usleep T)
(scm_threads_init T)
(scm_threads_mark_stacks T)
(scm_throw T)
(scm_thunk_p T)
(scm_times T)
(scm_tmpnam T)
(scm_top_level_env T)
(scm_transpose_array T)
(scm_truncate T)
(scm_truncate_file T)
(scm_try_arbiter T)
(scm_ttyname T)
(scm_type_eval_environment D)
(scm_type_export_environment D)
(scm_type_import_environment D)
(scm_type_leaf_environment D)
(scm_tzset T)
(scm_uint2num T)
(scm_ulong2num T)
(scm_ulong_long2num T)
(scm_umask T)
(scm_uname T)
(scm_ungetc T)
(scm_ungets T)
(scm_uniform_array_read_x T)
(scm_uniform_array_write T)
(scm_uniform_element_size T)
(scm_uniform_vector_length T)
(scm_uniform_vector_ref T)
(scm_unlock_mutex T)
(scm_unmask_signals T)
(scm_unmemocar T)
(scm_unmemocopy T)
(scm_unmemoize T)
(scm_unread_char T)
(scm_unread_string T)
(scm_upcase T)
(scm_usage_name D)
(scm_ushort2num T)
(scm_usleep T)
(scm_utime T)
(scm_valid_object_procedure_p T)
(scm_valid_oport_value_p T)
(scm_values T)
(scm_values_vtable B)
(scm_var_random_state B)
(scm_variable_bound_p T)
(scm_variable_p T)
(scm_variable_ref T)
(scm_variable_set_x T)
(scm_vector T)
(scm_vector_equal_p T)
(scm_vector_fill_x T)
(scm_vector_length T)
(scm_vector_move_left_x T)
(scm_vector_move_right_x T)
(scm_vector_p T)
(scm_vector_ref T)
(scm_vector_set_x T)
(scm_vector_to_list T)
(scm_version T)
(scm_void_port T)
(scm_wait_condition_variable T)
(scm_waitpid T)
(scm_weak_key_hash_table_p T)
(scm_weak_value_hash_table_p T)
(scm_weak_vector T)
(scm_weak_vector_p T)
(scm_weak_vectors B)
(scm_weaks_prehistory T)
(scm_with_fluids T)
(scm_with_traps T)
(scm_wrap_component T)
(scm_wrap_object T)
(scm_write T)
(scm_write_char T)
(scm_write_line T)
(scm_write_string_partial T)
(scm_wrong_num_args T)
(scm_wrong_type_arg T)
(scm_wrong_type_arg_msg T)
(scm_yield T)
(scm_your_base D)
(scm_zero_p T)
(terminating B)
) ;; end of C
) ;; eof
