2000-09-22  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* strings.h (SCM_STRING_CHARS):  Added, should be used instead of
	SCM_CHARS whenever the argument is known to be a string.

	(SCM_SLOPPY_STRINGP):  Deprecated.

	* symbols.h (SCM_SYMBOL_CHARS):  Added, should be used instead of
	SCM_CHARS whenever the argument is known to be a symbol.

2000-09-22  Neil Jerram  <neil@ossau.uklinux.net>

	* struct.c (scm_make_struct): Fix texinfo warning in docstring by
	using @pxref rather than @xref.

	* root.c (scm_call_with_dynamic_root): Fix texinfo warning in
	docstring by using @code for (thunk) rather than @var.

2000-09-20  Marius Vollmer  <mvo@zagadka.ping.de>

	* numbers.c (scm_istr2flo): Throw an `out of range' error when
	exponent is too large instead of returning `#f'.  The rationale is
	that in this case the string represents a valid number but we
	can't deal with it.

2000-09-20  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* symbols.c (scm_intern_obarray_soft,
	scm_sysintern0_no_module_lookup):  Make sure that symbol
	properties initially form an empty list.  Thanks to Keisuke
	Nishida for pointing this out.

2000-09-19  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* throw.c (scm_handle_by_message):  Added a FIXME comment.

	(scm_ithrow):  Removed some redundant tests.  When compiling on
	gcc, always add the GCSE bug workaround.

2000-09-14  Gary Houston  <ghouston@arglist.com>

	* print.c (scm_iprin1): write the ascii delete character as #\del
	instead of '#\', so it can be read back.  like in SCM.

2000-09-12  Mikael Djurfeldt  <mdj@linnaeus.mit.edu>

	* symbols.c (duplicate_string): Don't try to copy the byte after
	the string.  This might not be `\0' and might even not be
	allocated memory.

2000-09-12  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* symbols.c (scm_symbol_p):  Eliminate redundant SCM_IMP test.

2000-09-12  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	This patch unifies the formerly distinct ssymbol and msymbol types
	to a common symbol type scm_tc7_symbol.  The representation of the
	new symbol type uses a double cell with the following layout:
	<type/length, chars, raw_hash, prop-pair>, where the car of
	prop-pair holds the symbol's function property and the cdr of
	prop-pair holds the symbol's other properties.  In the long run,
	these properties will be removed.  Then, the generic property
	functions will be uses.

	* eval.c (SCM_CEVAL), objects.c (scm_class_of), print.c
	(scm_iprin1), tag.c (scm_tag):  Use scm_tc7_symbol instead of
	scm_tc7_ssymbol, scm_tc7_msymbol or scm_tcs_symbols.

	* gc.c (scm_gc_mark):  Mark the symbols property pair.

	(scm_gc_sweep):  There are no symbol slots any more.

	* hash.c (scm_hasher):  Instead of re-calculating the hash value
	of a symbol, use the raw_hash value stored in the symbol itself.

	* properties.h:  Fix typo.

	* strings.[ch] (scm_makstr, scm_makfromstr):  The slot parameter
	is not used any more.

	* symbols.[ch] (scm_strhash):  Deprecated, replaced by a macro.

	(scm_intern_obarray_soft):  Made softness parameter unsigned.

	(scm_string_hash):  New function with the same functionality as
	scm_strhash had before, except that the hash value is not adjusted
	to a hash table size.  Instead, the 'raw' hash value is returned.

	* symbols.c (duplicate_string):  New static convenience function.

	(scm_sym2vcell, scm_sym2ovcell_soft, scm_intern_obarray_soft):
	Renamed local variable from scm_hash to hash.

	(scm_intern_obarray_soft):  Don't check for a negative softness
	any more.  When generating symbol cells, use the new layout and
	store the raw hash value in the symbol's cell.

	(scm_symbol_to_string):  Removed unnecessary cast.

	(scm_intern_symbol, scm_unintern_symbol):  Use scm_string_hash to
	determine the hash values.

	(msymbolize):  Removed.

	(scm_symbol_fref, scm_symbol_pref, scm_symbol_fset_x,
	scm_symbol_pset_x, scm_symbol_hash):  No need to distinguish
	between different symbol types any more.

	(scm_symbol_hash):  Comment fixed.

	* symbols.h:  Comment about the distinction between ssymbols and
	msymbols removed.

	(SCM_SYMBOLP, SCM_ROSTRINGP):  No need to distinguish between
	different symbol types any more. 

	(SCM_PROP_SLOTS, SCM_SET_PROP_SLOTS):  Added.

	(SCM_SYMBOL_FUNC, SCM_SET_SYMBOL_FUNC, SCM_SYMBOL_PROPS,
	SCM_SET_SYMBOL_PROPS, SCM_SYMBOL_HASH, SCM_SET_SYMBOL_HASH):  Use
	the new symbol cell layout.

	* tags.h (scm_tc7_ssymbol, scm_tc7_msymbol, scm_tcs_symbols):
	Deprecated.

2000-09-12  Mikael Djurfeldt  <mdj@linnaeus.mit.edu>

	* symbols.h (scm_gentemp): Declared.

	* symbols.c (scm_gensym): Reimplemented.  Now only takes one
	optional argument which should be a *string*.
	(scm_gentemp): Reimplemented and moved from boot-9.scm.

2000-09-10  Keisuke Nishida  <kxn30@po.cwru.edu>

	* modules.c: Use applicable smobs for eval closures instead of
	compiled closures.  Include "libguile/smob.h".
	(f_eval_closure): Removed.
	(scm_eval_closure_tag): New variable.
	(scm_eval_closure_lookup): Renamed from eval_closure.
	This function now takes a smob instead of a compiled closure.
	(scm_standard_eval_closure): Create a smob instead of a compiled
	closure.
	(scm_init_modules): Initialize the eval closure type as a smob.
	* modules.h (SCM_EVAL_CLOSURE_P): New macro.
	(scm_eval_closure_tag, scm_eval_closure_lookup): Declare.
	* symbols.c: Include "libguile/smob.h".
	(scm_sym2vcell): Call scm_eval_closure_lookup directly if THUNK
	is an eval closure.

2000-09-10  Mikael Djurfeldt  <mdj@linnaeus.mit.edu>

	* Makefile.am (.x.doc): Bugfix: Added $(srcdir) to path in order
	to allow for builds in separate tree.

	* symbols.c (scm_gensym): Bugfixed my previous bugfix.  (Thanks to
	Dale P. Smith.)

2000-09-10  Keisuke Nishida  <kxn30@po.cwru.edu>

	* eval.c (SCM_APPLY): Fixed bugs in the applicable-smob calls.

2000-09-07  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* environments.c (obarray_enter, obarray_retrieve,
	obarray_remove):  Make sure the hash value is a valid obarray
	index.

	(obarray_enter, obarray_remove):  Documentation improved.

	(obarray_replace):  Added.

	(leaf_environment_define, leaf_environment_undefine):  Cleaned up
	and optimized.

2000-09-05  Mikael Djurfeldt  <mdj@linnaeus.mit.edu>

	* symbols.c (scm_gensym): Check that argument is a symbol, not a
	string.  (Thanks to Ralf Mattes.)

2000-09-05  Marius Vollmer  <mvo@zagadka.ping.de>

	* init.c: Include "libguile/properties.h".

	* gh_data.c (gh_scm2char): Validate that argument is a character.

2000-08-25  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* environments.h (SCM_IMPORT_ENVIRONMENT_P,
	SCM_EXPORT_ENVIRONMENT_P):  Before fetching the environment
	functions, make sure that we really got an environment.

2000-09-03  Mikael Djurfeldt  <mdj@linnaeus.mit.edu>

	* validate.h (SCM_VALIDATE_NUMBER_DEF_COPY): New macro.

2000-09-03  Marius Vollmer  <mvo@zagadka.ping.de>

	* Makefile.am (.x.doc): Pretend to create .doc files from .x files
	and give explicit dependencies for .x files that depend on
	generated files.  This allows parallel builds.  Thanks to Matthias
	Koeppe!

2000-08-27  Marius Vollmer  <mvo@zagadka.ping.de>

	* Makefile.am: Added gc_os_dep.c, properties.c, properties.x,
	properties.h and properties.doc in the suitable places.

	* init.h (scm_init_guile): New prototype. 
	
	* init.c (scm_init_guile, scm_init_guile_1): New interface for
	initializing Guile that does return to the caller.
	(scm_boot_guile_1): Use scm_init_guile_1 to initialize Guile.
	Do not establish a catch-all, this is no longer needed.

	* root.h (scm_properties_whash): New `sys_protect', used in
	properties.c.

	* throw.c (scm_ithrow): Perform catch-all handling here when no
	suitable handler has been found.  That way, we don't have to rely
	on the user establishing a catch-all, which might be difficult for
	him if he is using scm_init_guile instead of scm_boot_guile.
	
2000-09-03  Neil Jerram  <neil@ossau.uklinux.net>

	* vectors.c (scm_vector): Docstring: add @deffnx line for
	list->vector.

	* unif.c (scm_uniform_vector_ref): Docstring: add @deffnx line for
	array-ref.
	(scm_array_set_x): Docstring: add @deffnx line for
	uniform-array-set!.

	* symbols.c (scm_symbol_to_string): Docstring: complete an
	incomplete Texinfo reference to a node in r4rs.texi.
	(scm_symbol_to_string): Escape double quotes correctly within
	docstring.

	* struct.c (scm_make_struct, scm_make_vtable_vtable): Docstring
	fixes: `@dots' changed to `@dots{}'.

	* strop.c (scm_substring_move_x): Docstring: add @deffnx lines for
	substring-move-left! and substring-move-right!.

	* strings.c (scm_string): Docstring: add @deffnx line for
	list->string.

	* stime.c (scm_strptime): Fix spelling mistake in docstring.
	(scm_current_time): Docstring fix: insert missing newline.
	
	* socket.c (scm_recvfrom): Docstring format fix: missing newline
	inserted.

	* ramap.c (scm_array_copy_x): Docstring: add @deffnx line for
	array-copy-in-order!.
	(scm_array_map_x): Docstring: add @deffnx line for
	array-map-in-order!.

	* posix.c (scm_mknod): Docstring format fix: missing newlines
	inserted.
	
	* modules.c (scm_interaction_environment):  Docstring fix: add
	newlines.

	* eval.c (scm_cons_source): Added newly written docstring.

2000-09-03  Michael Livshin  <mlivshin@bigfoot.com>

	the following changes let Guile get rid of the `allocated' cell
	state.

	* smob.c (scm_smob_prehistory): don't init the "allocated" smob
	type.

	* tags.h (scm_tc16_allocated): removed.

	* gc.h: removed now-obsolete comments about the `allocated' cell
	state.
	(SCM_NEWCELL): don't change cell type to `allocated'.
	(SCM_NEWCELL2): ditto.

	* gc.c (scm_mark_locations): mark freecells too, and don't worry
	about any possible false positives.
	(scm_debug_newcell): don't change cell type to `allocated'.
	(scm_debug_newcell2): ditto.
	(scm_gc_for_newcell): ditto.
	(scm_gc_mark): remove the tc16_allocated case.

2000-08-26  Mikael Djurfeldt  <mdj@linnaeus.mit.edu>

	* gdbint.c (gdb_print): Removed superfluous macro definition.

	* objects.c (scm_init_objects), print.c (scm_init_print), struct.c
	(scm_init_struct): First arg to scm_make_vtable_vtable should be a
	string, not a symbol.  (`make-vtable-vtable' needs to append this
	string to another string and then pass it through
	`make-struct-layout'.)

	* stacks.c (scm_init_stacks): Pass a string, not a layout object,
	to scm_make_vtable_vtable.  (Thanks to Dale P. Smith.)
	
	* struct.c (scm_make_struct_layout): Removed reference to
	"read-only string" in comment; Check that argument is a string.
	(scm_make_vtable_vtable): Check that argument is a string.

	* environments.c (scm_init_environments): All internal includes in
	libguile must use the prefix "libguile/" in path names since inly
	the top-level source directory is on the include list.  (That, in
	turn, is because we want to distinguish between system header
	files and hedares files internal to libguile.)

	* strings.c (scm_make_shared_substring, scm_read_only_string_p):
	Deprecated.
	(scm_string_length, scm_string_ref, scm_substring,
	scm_string_append): Don't accept symbols as arguments (R5RS).

2000-08-25  Neil Jerram  <neil@ossau.uklinux.net>

	* ports.c (scm_set_port_column_x): Fix docstring so that it
	mentions set-port-line! rather than set-port-column! twice.

	* guardians.c (scm_make_guardian): Remove spurious . from doc string.

2000-08-25  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* Makefile.am:  Added all necessary environments.* files.

	* init.c:  Include environments.h.

	(scm_boot_guile_1):  Initialize the environments.

	* environments.[ch]:  Added.  Most of the credit for these files
	goes to Jost Boekemeier.

2000-08-25  Mikael Djurfeldt  <mdj@linnaeus.mit.edu>

	* procprop.c: #include "libguile/smob.h"; handle applicable smobs.

2000-08-24  Keisuke Nishida  <kxn30@po.cwru.edu>

	* smob.h (scm_smob_descriptor): Added `apply' and `gsubr_type'.
	* smob.c (scm_make_smob_type): Initialize `apply' and `gsubr_type'.
	(scm_set_smob_apply): New function.
	(scm_smob_apply_0, scm_smob_apply_1, scm_smob_apply_2,
	scm_smob_apply_3): New functions.
	* eval.c (SCM_CEVAL, SCM_APPLY): Added dispatch for applicable smobs.
	* procs.c (scm_procedure_p): Check applicable smobs.

2000-08-24  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* Makefile.am (BUILT_SOURCES): Experimentally added scmconfig.h
	also here.  (This is supposed to make sure that scmconfig.h is
	built before all sources in order to prevent that everything has
	to be rebuilt again.  Hope it works---I'm just guessing. :)

	* fluids.c (scm_fluid_set_x): Return SCM_UNSPECIFIED.

2000-08-23  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* gc.c (scm_gc_mark): Don't use GUILE_DEBUG flag to compile in
	extra tests.  (GUILE_DEBUG is only supposed to make extra
	debugging functions available.)

2000-08-21  Michael Livshin  <mlivshin@bigfoot.com>

	* gc.h (SCM_GC_CARD_N_CELLS): change to be a nice non-confusing
	constant.

2000-08-19  Michael Livshin  <mlivshin@bigfoot.com>

	* gc.c (scm_gc_sweep): added a `continue' statement that have
 	fallen through the cracks in the merge.  thanks to Shuji Narazaki!

	* gc.h: removed some stuff that broke compilation for people and
 	wasn't actually needed anyway.

2000-08-18  Neil Jerram  <neil@ossau.uklinux.net>

	* filesys.c (scm_fcntl): Docstring fix - missing newlines inserted.

	* net_db.c (scm_gethost, scm_getnet, scm_getproto, scm_sethost,
	scm_setnet, setproto, setserv): Argument names changed to match
	doc string.

	* feature.c (scm_program_arguments): New docstring.

	* simpos.c (scm_getenv): Reflow docstring.

	* eq.c (scm_eq_p, scm_eqv_p, scm_equal_p): Add texinfo markup to
	docstrings.

	* chars.c (scm_char*): Docstring fixes - texinfo markup.

2000-08-18  Neil Jerram  <neil@ossau.uklinux.net>

	* boolean.c (scm_not, scm_boolean_p): Docstring fixes - add
	texinfo markup and remove trailing newlines.

2000-08-17  Michael Livshin  <mlivshin@bigfoot.com>

	this changes the Guile GC to use cards (aka "chunklets").
	(most of the ideas and some of the code are by Greg Harvey, though
	the code is probably unrecognizable now.  the original chunklet
	proposal, way back, is by Dale Jordan).

	* tags.h: (SCM_GCTYPE16, SCM_GCCDR, SCM_GC[8]MARKP,
	SCM_SETGC[8]MARK, SCM_CLRGC[8]MARK): moved from here into gc.h.
	some (most) of these are probably going to be deprecated.

	* gc.h (SCM_MARKEDP): simplified, there are no different mark bit
	locations anymore.
	(SCM_GC_CARD_*, SCM_C_BVEC_*): lots of new macros to deal with
	cards and bvecs (bit-vectors).

	* gc.c: (scm_default_init_heap_size_*): defined to take cards into
 	account, but keeping more or less the same values as previously.
  	added some simple helper macros.
	(CLUSTER_SIZE_IN_BYTES, ALIGNMENT_SLACK): defined to take cards
 	into account.
	(BVEC_*, scm_mark_space_t, current_mark_space, mark_space_ptr,
 	current_mark_space_offset, mark_space_head, get_bvec,
	clear_mark_space): new functions and supporting variables, types
	and macros that implement mark space management.
	(scm_igc): clear the mark space (all of it) before beginning the
	mark phase.
	(scm_gc_mark): changed the tests for rogue cells, much simplified
	throughout (no different mark bit locations to worry about now).
	(scm_mark_locations): don't consider card header cells.
	(scm_cellp): ditto.
	(scm_gc_sweep): simplified.
	(init_heap_seg): changed to take cards into account.

2000-08-16  Michael Livshin  <mlivshin@bigfoot.com>

	* stime.c (scm_c_get_internal_run_time): new function, same as
 	scm_get_internal_run_time but returns a long.  it's used by the GC
 	for timekeeping, since with scm_get_internal_run_time there is a
 	(extremely theoretical) possibility of consing.
	(scm_get_internal_run_time): redefined in terms of
 	scm_c_get_internal_run_time.

	* stime.h: added prototype for scm_c_get_internal_run_time.

	* gc.c (scm_gc_stats): add more obscure stats, such as: mark time,
 	sweep time, total marked cells, total swept cells, and number of
 	times GC was invoked.
	(gc_start_stats): renamed from scm_gc_start, made static, taught
 	to init the new stats.
	(gc_end_stats): renamed from scm_gc_end, made static, taught to
 	calculate the new stats.
	(scm_igc): don't call gc_start_stats unless we are sure that we
 	are indeed going to collect.  also, added some timekeeping between
 	the mark and sweep phases.
	(scm_gc_sweep): count number of cells we sweep as we go.

	* gc.h: removed prototypes for scm_gc_{start,end}.

2000-08-13  Mikael Djurfeldt  <mdj@linnaeus.mit.edu>

	* alist.c (scm_assq, scm_assv, scm_assoc): Report argument type
	error for the alist rather than the sublist where the type
	mismatch is discovered.

2000-08-13  Neil Jerram  <neil@ossau.uklinux.net>

	* root.c (s_scm_call_with_dynamic_root): Docstring fix - rogue
	newline.

2000-08-12  Neil Jerram  <neil@ossau.uklinux.net>

	* numbers.c (scm_ash): Docstring fix - missing newlines.

	* ports.c (scm_port_filename): Docstring fix - missing newline.

	* strports.c (scm_eval_string): Docstring fix - missing newline.

	* vports.c (s_scm_make_soft_port): Docstring updated so that
	example is correct.

	* strop.c: Docstring fixes - quotation marks and backslashes
	needed quoting.

	* numbers.c (s_scm_logand): Docstring fix - "@end lisp" inserted.

2000-08-11  Neil Jerram  <neil@ossau.uklinux.net>

	* macros.c: Remove surplus newlines from end of docstrings.

	* list.c (scm_list_tail): Add @deffnx line to docstring for
	list-cdr-ref.

	* keywords.c: Docstring improvements in conjunction with new
	reference manual doc on keywords.

	* error.c (scm_error_scm): Fix texinfo syntax error in
	docstring.  (@code(~S) should be @code{~S}.)

	* dynl.c: Remove surplus newlines from end of docstrings.

2000-08-11  Mikael Djurfeldt  <mdj@linnaeus.mit.edu>

	* eval.c (scm_eval): Backward incompatible change: Now takes an
	environment specifier as second arg.  `eval' hereby becomes R5RS
	compatible.
	(scm_i_eval_x, scm_i_eval): New functions (replace
	scm_eval_3).
	(scm_eval2, scm_eval_3): Deprecated.
	(scm_top_level_lookup_closure_var): Deprecated.

	* eval.h: #include "struct.h".

	* evalext.c (scm_definedp): Have to work before module system is
	booted.

	* modules.h (SCM_MODULEP, SCM_VALIDATE_MODULE,
	SCM_MODULE_OBARRAY, SCM_MODULE_USES, SCM_MODULE_BINDER,
	SCM_MODULE_EVAL_CLOSURE): New macros.
	(scm_module_index_obarray, scm_module_index_uses,
	scm_module_index_binder, scm_module_index_eval_closure): New
	constants; #include "validate.h".

	* modules.c (scm_module_tag, scm_module_system_booted_p): New
	globals.
	(scm_post_boot_init_modules): Initialize scm_module_tag.
	(scm_interaction_environment): New primitive.

	* symbols.c (scm_can_use_top_level_lookup_closure_var): Removed.
	#include "modules.h".

	* strports.c (scm_eval_string): Evaluate in
	scm_interaction_environment ().

	* script.c (scm_shell): Pass scm_the_root_module () as second arg
	to new scm_eval_x.

	* load.c (load): Use `scm_selected_module' to compute second arg
	to new scm_i_eval_x; Don't call it if module system hasn't booted.
	(scm_read_and_eval_x): Deprecated.
	#include "modules.h".

	* debug.c (scm_local_eval): Use scm_i_eval and scm_i_eval_x.
	(scm_start_stack): Use scm_i_eval.

	* strports.c: #include "modules.h".

	* print.c (scm_simple_format): Be case-insensitive for ~A and ~S
	directives.

2000-08-09  Mikael Djurfeldt  <mdj@linnaeus.mit.edu>

	The following changes are intended to ensure that struct instances
	are freed before their vtables.  It's optimized for the most
	common case, which is freeing of struct instances.

	* gc.c (scm_gc_mark, scm_gc_sweep): Remove vcell = 1 magic.
	(scm_structs_to_free): New variable.
	(scm_gc_sweep): Hook up structs to free on the scm_structs_to_free
	chain.

	* struct.h (SCM_STRUCT_GC_CHAIN, SCM_SET_STRUCT_GC_CHAIN): New
	macros.
	(scm_structs_to_free, scm_struct_prehistory): Declare.

	* struct.c (scm_make_struct, scm_make_vtable_vtable): Structs
	handles are now double cells; Initialize SCM_STRUCT_GC_CHAIN to
	0.
	(scm_struct_gc_init, scm_free_structs): New GC C hooks.
	(scm_struct_prehistory): Install them.

	* init.c (scm_boot_guile_1): Call scm_struct_prehistory.

2000-08-06  Marius Vollmer  <mvo@zagadka.ping.de>

	* read.c (scm_flush_ws): Include filename in error message when it
	is not `#f'.

2000-08-05  Marius Vollmer  <mvo@zagadka.ping.de>

	* iselect.c: Include <unistd.h>.  Thanks to Bertrand Petit!

2000-08-02  Mikael Djurfeldt  <mdj@linnaeus.mit.edu>

	* struct.c (scm_make_struct_layout, scm_make_struct,
	scm_make_vtable_vtable): Updated documentation.

	* print.c (scm_simple_format): Bugfix: Coerce port before using
	it.

2000-07-31  Gary Houston  <ghouston@arglist.com>

	* net_db.c: declare h_errno only if HAVE_H_ERRNO is not defined
	(thanks to Richard Kim for the bug report).

2000-07-30  Marius Vollmer  <mvo@zagadka.ping.de>

	* alist.c (scm_assq_remove_x, scm_assv_remove_x,
	scm_assoc_remove_x): Use scm_delq1_x instead of scm_delq_x, since
	using the latter is pointless.

2000-07-26  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* gc.c (scm_gc_sweep):  Renamed local variable from 'free' to
	'free_struct_data' to avoid confusion with stdlib's 'free'.

2000-07-26  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* vectors.c (scm_make_vector):  Fix the initialization order of
	the vector such that the type cell is initialized last.

2000-07-26  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* struct.[ch] (scm_struct_init):  Made static.  Fixed not to rely
	on the struct cell to be fully initialized.

	* struct.c (scm_make_struct, scm_make_vtable_vtable):  Fix the
	initialization order of the struct such that the type cell is
	initialized last.

2000-07-25  Marius Vollmer  <mvo@zagadka.ping.de>

	* alist.c (scm_assq_remove_x, scm_assv_remove_x,
	scm_assoc_remove_x): Remove only the first cell with a matching
	key, not all.

2000-07-24  Marius Vollmer  <mvo@zagadka.ping.de>

	* stime.c (scm_strftime): Recognize a return value of zero from
	strftime as buffer overflow and take care to detect a valid zero
	length result regardless.  Thanks to David Barts!

2000-07-23  Marius Vollmer  <mvo@zagadka.ping.de>

	* alist.c (scm_assq_remove_x, scm_assv_remove_x,
	scm_assoc_remove_x): Remove all cells whose key is eq, eqv, or
	equal (respectively) to the argument key, not all cells that are
	eq, eqv, or equal to the first cell with the argument key.  Thanks
	to Neil Jerram!

2000-07-18  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* gc.h (SCM_FREE_CELL_CDR, SCM_SET_FREE_CELL_CDR), hooks.c
	(make_hook), modules.c (OBARRAY, USES, BINDER):  Pack and unpack
	SCM values appropriately.

	* modules.c (scm_standard_eval_closure):  Don't pass an inum to
	scm_makcclo, but rather a long value.

2000-07-18  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	read.c (scm_lreadrecparen), srcprop.c (scm_set_source_property_x):
	SCM_SETCDR and SCM_WHASHSET macros don't deliver a return value.
	Thanks to Han-Wen Nienhuys for the bug report.

2000-07-18  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* root.[ch] (scm_call_catching_errors):  Deprecated.

	* root.c (scm_init_root):  Initialize the root smob type using the
	standard initialization functions.

2000-07-17  Marius Vollmer  <mvo@zagadka.ping.de>

	* eval.c (unmemocopy): Don't rely on V being a list of at least
	one element.  Thanks to Bill Schottstaedt!

2000-07-15  Michael Livshin  <mlivshin@bigfoot.com>

	* gc.c (scm_done_free): new.
	expanded comments about scm_done_malloc.

	* gc.h: added prototype for scm_done_free

2000-07-13  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* gc.h (scm_take_stdin):  Removed.

	* gc.h (SCM_VALIDATE_CELL):  Delegate cell checks to function
	scm_assert_cell_valid to allow extensions to the checking
	functionality without need to recompile everything.

	* gc.[ch] (scm_assert_cell_valid, scm_set_debug_cell_accesses_x):
	Added as conditionally compiled functions for the case that
	SCM_DEBUG_CELL_ACCESSES is enabled.

	* gc.c (debug_cells_p):  Added to indicate whether compile-time
	included cell access debugging is run-time enabled.

	* gc.[ch] (scm_gc_running_p):  Added to indicate that scm_igc is
	being executed.  Intended to be used instead of scm_gc_heap_lock
	at most places.

	* error.c (scm_error), gdbint.c (SCM_GC_P):  Use scm_gc_running_p
	instead of scm_gc_heap_lock.

	* gc.c (scm_igc):  Set scm_gc_running_p to true while running.

	* gc.c (scm_mark_locations):  Don't mark free cells.

	* weaks.c (scm_scan_weak_vectors):  Use SCM_FREE_CELL_P instead of
	SCM_FREEP.

2000-07-13  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* gc.c (scm_mark_locations):  Minimized some variable scopes and
	simplified the code a bit.

2000-07-10  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* gc.h (SCM_SET_FREE_CELL_TYPE, SCM_SET_FREE_CELL_CDR,
	SCM_FREE_CELL_P, SCM_FREE_CELL_CDR):  Added since free cells
	should not be accessed via SCM_C[AD]R.  Further, using dedicated
	macros to access free cells allows all other cell accessing macros
	to treat acesses to free cells as errors, thus enabling better
	error checks for cell accesses.  SCM_FREE_CELL_P is supposed to
	replace SCM_FREEP some time.

	* gc.h (SCM_NEWCELL, SCM_NEWCELL2), gc.c (map_free_list,
	free_list_length, scm_check_freelist, scm_debug_newcell,
	scm_debug_newcell2, freelist_length, scm_gc_for_newcell,
	scm_gc_mark, scm_gc_sweep, init_heap_seg):  Only use the dedicated
	cell accessors when accessing free cells.

2000-07-10  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* gc.h (SCM_CELL_WORD, SCM_CELL_OBJECT):  Treat the referenced
	object as const in order to make the compiler warn about code like
	SCM_CELL_WORD (x, n) = y.  Instead, SCM_SET_CELL_WORD (x, n, y)
	should be used.

	(SCM_CELL_WORD_LOC, SCM_CARLOC, SCM_CDRLOC):  Return the address
	as an address to a non-const object, since these macros are used
	to allow direct write access to objects.

2000-07-07  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* hashtab.c (scm_hash_fn_create_handle_x):  Signal an error if the
	given hash table has no slots.

2000-07-06  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* gc.c (policy_on_error):  Added in order to allow alloc_some_heap
	to react to malloc failures in a context dependent way.

	(scm_check_freelist):  No need to flush streams before abort().

	(scm_gc_for_newcell):  Try to allocate new memory in three phases:
	grow heap if preferred, if still no memory available collect
	garbage, if still no memory available grow heap.

	(heap_segment_table_size):  Added to always reflect the actual
	size of the heap segment table, because scm_n_heap_segs may differ
	from the heap segment table size.

	(alloc_some_heap):  In case of malloc failure, react according to
	the new policy_on_error parameter (either return to caller or
	abort immediately).  Further, keep heap_segment_table_size up to
	date.

	(scm_init_storage):  Initialize heap_segment_table_size.

2000-07-06  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* gh.h:  Don't include <stdio.h>.  Thanks to Han-Wen Nienhuys for
	the hint.

2000-06-30  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* __scm.h (SCM_OUTOFRANGE, SCM_NALLOC, SCM_HUP_SIGNAL,
	SCM_INT_SIGNAL, SCM_FPE_SIGNAL, SCM_BUS_SIGNAL, SCM_SEGV_SIGNAL,
	SCM_ALRM_SIGNAL, SCM_GC_SIGNAL, SCM_TICK_SIGNAL, SCM_SIG_ORD,
	SCM_ORD_SIG, SCM_NUM_SIGS):  Re-introduce these as deprecated
	symbols.

	* error.c (scm_wta):  Re-introduce dispatching for SCM_OUTOFRANGE
	and SCM_NALLOC, but as a deprecated feature.

2000-06-30  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* debug.c: Added #include fluids.h.

	* numbers.c (scm_gr_p, scm_leq_p, scm_geq_p): Turned into
	primitive generics.  (Thanks to Nicolas Neuss.)

2000-06-30  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* gc.c (alloc_some_heap):  Use scm_memory_error to indicate a
	failed attempt to get additional memory from the system.

	(scm_gc_for_newcell):  Changed the control structure to make the
	behaviour explicit for the case that gc is not able to free any
	cells.

2000-06-30  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* __scm.h (SCM_OUTOFRANGE):  Removed.

	* error.c (scm_wta):  Removed sick dispatch code for range
	errors.  (More sick dispatches still to be removed.)

	* hashtab.c (scm_hash_fn_get_handle, scm_hash_fn_create_handle_x,
	scm_hash_fn_remove_x):  Eliminate redundant test for if unsigned
	value is non-negative.  Use scm_out_of_range to signal range
	errors.

	* hooks.c (make_hook), unif.c (scm_aind):  Use scm_out_of_range to
	signal range errors.

	* list.c (scm_list_ref, scm_list_set_x, scm_list_cdr_set_x):  Fix
	error reporting (now uses original input parameter to report wrong
	type argument errors).  Use SCM_OUT_OF_RANGE to report range
	errors and SCM_WRONG_TYPE_ARG to report type errors.

	* strings.c (scm_substring):  Make range checks for negative
	values explicit (former behaviour relied on an implicit
	conversion from signed to unsigned).  Don't use SCM_ASSERT for
	range checks.

	* unif.c (scm_aind, scm_transpose_array, scm_bit_set_star_x,
	scm_bit_count_star):  Use scm_out_of_range to signal range
	errors.

	* unif.c (scm_transpose_array, scm_bit_position), vectors.c
	(scm_vector_ref, scm_vector_set_x, scm_vector_move_left_x,
	scm_vector_move_right_x):  Use SCM_ASSERT_RANGE to check ranges.

2000-06-30  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* validate.h (SCM_VALIDATE_INUM_MIN_COPY,
	SCM_VALIDATE_INUM_MIN_DEF_COPY, SCM_VALIDATE_INUM_RANGE_COPY):
	Perform all range checks based on the input value.  The former way
	of using the value that is assigned to the target variable fails
	if the assignment to the target variable itself can change the
	value because of type conversion.

	(SCM_ASSERT_RANGE):  Use scm_out_of_range to signal range errors.

2000-06-30  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* gc.c (scm_gc_for_newcell): Behave gracefully also if scm_igc
	doesn't yield any new cells.  In theory this could happen if all
	cells allocated with NEWCELL are either in use or conservatively
	marked and all cluster spine cells are conservatively marked.
	(Thanks to Dirk.)

2000-06-29  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* __scm.h (SCM_NALLOC):  Removed.

	* error.c (scm_wta):  Removed sick dispatch code for memory
	errors.  (More sick dispatches still to be removed.)

	* numbers.c (scm_mkbig, scm_adjbig), ports.c (scm_make_port_type),
	random.c (scm_i_copy_rstate, scm_c_make_rstate), smob.c
	(scm_make_smob_type), srcprop.c (scm_make_srcprops), vectors.c
	(scm_vector_set_length_x):  Now using scm_memory_error to signal
	memory errors.

2000-06-29  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* __scm.h:  Removed some commented code and fixed some comments.

	(SCM_HUP_SIGNAL, SCM_INT_SIGNAL, SCM_FPE_SIGNAL, SCM_BUS_SIGNAL,
	SCM_SEGV_SIGNAL, SCM_ALRM_SIGNAL, SCM_GC_SIGNAL, SCM_TICK_SIGNAL,
	SCM_SIG_ORD, SCM_ORD_SIG, SCM_NUM_SIGS):  Removed.

	* async.c:  Removed some commented code.

2000-06-29  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* gc.c (scm_gc_mark, scm_gc_sweep, scm_must_malloc,
	scm_must_realloc, scm_must_free, alloc_some_heap):  Use the
	appropriate error signalling function.

2000-06-29  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* root.h (scm_first_type):  Removed.

2000-06-29  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* gc.c (MIN_GC_YIELD):  Removed.

2000-06-28  Michael Livshin  <mlivshin@bigfoot.com>

	* gc.c (scm_gc_for_newcell): don't try to do GC if it's blocked,
	allocate instead.

2000-06-28  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* async.c (scm_gc_async, scm_gc_vcell, scm_sys_gc_async_thunk):
	Moved to gc.c.

	(scm_init_async):  Moved initialization for scm_gc_async and
	scm_gc_vcell to gc.c.  Moved initialization of scm_asyncs here
	from gc.c.

	* async.h (scm_gc_async):  Not globally visible any more.

	* gc.c (scm_gc_stats):  Made callable even from within regions
	where gc is blocked.

	(scm_gc_end):  Eliminate the hardcoding of the marking of the
	scm_gc_async from the gc core.

	(scm_init_storage):  Don't initialize the scm_asyncs list here.
	This is now done in asyncs.c.

	(scm_gc_vcell):  Moved here from async.c.

	(gc_async):  Renamed from scm_gc_async, moved here from async.c
	and made static.

	(gc_async_thunk):  Renamed from scm_sys_gc_async_thunk and moved
	here from async.c.

	(mark_gc_async):  New hook function for scm_after_gc_c_hook.

	(scm_init_gc):  Added initialization of scm_gc_vcell and
	gc_async.  Further, add mark_gc_async to scm_after_gc_c_hook.

	* init.c (scm_boot_guile_1):  scm_init_gc requires asyncs to be
	initialized.

2000-06-28  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* gc.c (scm_igc):  Removed commented code that once was intended
	to unprotect struct types with no instances.

	* root.h (scm_type_obj_list):  Removed.

2000-06-27  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* async.c (scm_init_async):  Switch to standard way of smob
	initialization.

2000-06-21  Michael Livshin  <mlivshin@bigfoot.com>

	* guile-doc-snarf.in: use cut instead of sed, that's much much
	faster.  also, don't call basename more than needed.  and, to gain
	a couple of microseconds more, don't call cat needlessly.  (thanks
	to Brad Knotwell).

2000-06-21  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* guile-snarf.awk.in, guile-snarf.in, snarf.h:  Rename SCM__I to
	SCM_SNARF_INIT_START, SCM__D to SCM_SNARF_DOC_START, SCM__S to
	SCM_SNARF_DOCSTRING_START and SCM__E to SCM_SNARF_DOCSTRING_END.

2000-06-21  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* eval.c, eval.h (scm_top_level_lookup_closure_var): Added.
	#include "libguile/fluids.h".

	* eval.h (SCM_TOP_LEVEL_LOOKUP_CLOSURE): New macro which replaces
	SCM_CDR (scm_top_level_lookup_closure_var) everywhere.

	* root.h (scm_top_level_lookup_closure_var,
	scm_system_transformer): Removed.  (It's no sense in having the
	*variable* be a "fluid".)

	* root.c (mark_root): Removed marking of
	s->top_level_lookup_closure_var and s->system_transformer.

	* modules.c (scm_selected_module): the_module is now a fluid.

2000-06-20  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* gc.h, tags.h: Be kind to compilers which must see hash signs in
	column 0.  (Thanks to Ian Grant.)

	* numbers.h: Put #ifdef HAVE_LONG_LONGS around declarations using
	the long_long type.  (Thanks to Bernard Urban.)

2000-06-20  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* gc.c, gc.h (scm_default_init_heap_size_1,
	scm_default_min_yield_1, scm_default_init_heap_size_2,
	scm_default_min_yield_2, scm_default_max_segment_size): New global
	variables.  Can be customized by the application before booting
	Guile.  (We might want to be able to control these parameters
	dynamically through the "options interface" in the future, but
	note that that is additional functionality.  Here we're giving
	default values which the environment variables can override.)

	* list.c (scm_cons_star): Updated comment.

	* smob.h: Changed comments for scm_make_smob_type and
	scm_make_smob_type_mfpe, warning that the latter might be
	deprecated in a future release.

2000-06-19  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* list.[ch] (scm_cons_star/cons*):  Renamed from
	scm_list_star/list*.

	* list.[ch] (scm_list_star/list*):  Provided as a deprecated alias
	for scm_cons_star/cons*.

	* gc.c (scm_protect_object):  Updated comment.

	* numbers.h (SCM_NEWREAL, SCM_NEWCOMPLEX):  Removed.

	* tags.h (SCM_UNPACK_CAR, SCM_NDOUBLE_CELLP):  Removed.

2000-06-19  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* init.c, init.h (scm_initialized_p): Renamed from `initialized'
	and made global.

	* gdbint.c (gdb_print): Print warning instead of calling scm_write
	if Guile isn't yet initialized.

	* print.c (scm_current_pstate, scm_make_print_state): Simplified
	tests, using the assumption that Guile has been initialized.

Sun Jun 18 14:45:21 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* print.c (s_scm_current_pstate): Do not segfault when the
	print_state_pool is unitialized in `current-pstate', and better
	verify its state before altering it in scm_make_print_state().

2000-06-18  Michael Livshin  <mlivshin@bigfoot.com>

	* scmsigs.c (s_scm_sigaction): guard the SIGIOT case with an
 	#ifdef -- it's missing on at least one platform.  (thanks to
 	Jan Nieuwenhuizen).

2000-06-16  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* list.c (list*):  Added documentation from common-list.scm.

2000-06-15  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* gc.c (scm_unprotect_object):  The reference count is guaranteed
	to be a positive number.

2000-06-15  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* eval.c: Updated comment above scm_map.

2000-06-14  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* gc.c (scm_protect_object): Avoid looking up the object handle
	twice.
	(scm_unprotect_object): Abort if scm_unprotect_object is called on
	an unprotected object.

2000-06-14  Michael Livshin  <mlivshin@bigfoot.com>

	* gc.c (scm_unprotect_object): fix a nasty typo bug (thanks to
 	Dirk Herrmann).

2000-06-14  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* socket.c (scm_getsockopt): Changed type for `optlen' from int to
	size_t.
	(scm_accept, scm_getsockname, scm_getpeername, scm_recvfrom):
	Ditto for `tmp_size'.
	(scm_addr_buffer_size): Changed type from int to size_t.

	* random.c: #include <string.h>.  (Needed by memcpy.)

	* guile-snarf.awk.in: Replace the dot_doc_file arg with "-",
	indicating stdin, instead of "" and don't reset ARGC.  This is a
	workaround for `nawk' in AIX 4.3 on RS6000 but, as far as I know,
	it is correct, and perhaps even better.

2000-06-14  Gary Houston  <ghouston@arglist.com>

	* scmsigs.c (scm_init_scmsigs): if HAVE_SIGINTERRUPT is not
	defined, add SA_RESTART to the sigaction flags correctly
	(thanks to Dale P. Smith).

2000-06-13  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* strings.c: #include <string.h>. (Thanks to Bill Schottstaedt.)

	* net_db.c (scm_resolv_error): Only use macro NETDB_INTERNAL if
	defined. It isn't on sgi irix 5.3.  (Thanks to Bill Schottstaedt.)

	* Makefile.am (.c.doc): Pipe output (the .x contents) to /dev/null.

2000-06-13  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* fports.c (scm_setvbuf): Use `free' instead of `scm_must_free'
	since read and write buffers are allocated by `malloc'.

	* Makefile.am: Removed old test code.

	* gh_test_c.c, gh_test_repl.c: Removed.

2000-06-12  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* iselect.c (SCM_NLONGBITS): Add workaround for the Sun 4.2
	compiler.

	* inet_aton.c (inet_aton): Cast init value for `cp'.

	* ramap.c (s_scm_array_fill_x): Cast `ve' properly in case
	`scm_tc7_uvect'.

	* symbols.c (scm_intern_obarray_soft,
	scm_sysintern0_no_module_lookup): Cast `name' to unsigned char ptr
	in calls to scm_strhash.

	* strports.c (st_resize_port): Substituted SCM_UCHARS for
	SCM_CHARS.
	(st_write): Cast argument to strncpy to char ptr.
	(scm_mkstrport): Substituted SCM_ROUCHARS for SCM_ROCHARS.
	(scm_strport_to_string): Cast argument to scm_makfromstr to char
	ptr.

	* ports.c (scm_ungetc): Cast value to unsigned char ptr before
	storing in putback_buf.
	(scm_unread_string): Substituted SCM_ROCHARS for SCM_ROUCHARS.

	* ioext.c (s_scm_read_line): Cast result of call to
	scm_do_read_line to unsigned char ptr.

	* gdbint.c (SEND_STRING): Cast argument to char pointer.

	* fports.c (fport_flush): Declare `ptr' as unsigned char (was
	char).

	* Makefile.am (DOT_DOC_FILES): List doc-files explicitly.  (We
	shouldn't use Make rules which aren't supported by most Make
	programs.)
	(OMIT_DEPENDENCIES): Defined to "libguile.h ltdl.h".  (We don't
	want these dependencies recorded, since they would get bogus
	relative paths; libguile.h is only used in gh.h and guile.c.)
	(EXTRA_DOT_X_FILES, EXTRA_DOT_DOC_FILES): New variables.
	(guile-procedures.txt): Depend on EXTRA_DOT_DOC_FILES.
	(modinclude_HEADERS): Removed kw.h.

	* guile-snarf.in: Change regexp "^SCM__I" --> "^ *SCM__I".
	(The preprocessor might insert spaces before the identifier.)

	* snarf.h (SCM_SNARF_HERE, SCM_SNARF_INIT, SCM_SNARF_DOCS):
	Renamed from SCM_HERE, SCM_INIT, SCM_DOCS.

	* smob.h (scm_smobfuns): Removed deprecated type.

	* smob.c, smob.h (scm_newsmob): Removed deprecated function.
	(Replaced by `scm_make_smob_type'.)

	* keywords.c (scm_tc16_kw): Removed deprecated type.
	(Replaced by scm_tc16_keyword.)

	* kw.h: Removed deprecated header file.

	* evalext.c (serial-map): Removed deprected alias for scm_map.
	(Has been replaced by `map-in-order'.)

	* ramap.c (serial-array-copy!, serial-array-map!): Removed
	depracted aliases.  (Replaced by `array-copy-in-order!' and
	`array-map-in-order'.)

2000-06-11  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* gc.h (SCM_VALIDATE_CELL): Rewritten.
	(SCM_CELL_WORD, SCM_CELL_OBJECT, SCM_SET_CELL_WORD,
	SCM_SET_CELL_OBJECT): Use new version of SCM_VALIDATE_CELL.
	(Thanks to Han-Wen Nienhuys.)

2000-06-10  Michael Livshin  <mlivshin@bigfoot.com>

	* guile-doc-snarf.in: don't pipe the CPP output right into sed --
 	write it to the temp file first and check the CPP return code.
	(I introduced this bug earlier, and this probably caused people
 	with non-GNU C preprocessors to get empty *.x files and not to
 	have the build fail right away...).

	* scmsigs.c (s_scm_sigaction): guard the SIGSYS case with an ifdef
 	-- at least my libc5-based Linux system doesn't define SIGSYS.

2000-06-08  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* snarf.h, guile-snarf.awk.in, guile-snarf.in: Replaced snarf
	markers with identifiers (SCM__I, SCM__D, SCM__S, SCM__E).
	(Thanks to Bernard Urban.)

2000-06-06  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* modules.c (scm_system_module_env_p): Fixed detection of system
	modules.

2000-06-06  Marius Vollmer  <mvo@zagadka.ping.de>

	* scmsigs.c (scm_sigaction): Silently ignore setting handlers for
	`program error signals' because they can't currently be handled by
	Scheme code.

2000-06-05  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* procs.h (SCM_SET_SUBRF):  Added.

	* procs.c (scm_make_subr_opt):  Don't assign to SCM_SUBRF, use
	SCM_SET_SUBRF instead.  Thanks to Bernard Urban for the bug
	report.

2000-06-05  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* gc.h (SCM_CARLOC, SCM_CDRLOC):  Don't take the address of a SCM
	value.

	* sort.c (scm_sorted_p, scm_merge, scm_merge_list_x,
	scm_merge_list_step):  Don't take the address of SCM_CAR.  Use
	SCM_CARLOC instead.  Thanks to Bernard Urban for the bug report.

2000-06-05  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* boolean.h (SCM_TRUE_P):  Removed, as people might use it as a
	replacement for !SCM_FALSEP.

	* backtrace.c (display_error_body), boolean.h (SCM_BOOLP), gc.c
	(scm_unhash_name), gh_data.c (gh_module_lookup), load.c
	(scm_primitive_load), print.c (scm_simple_format), procs.c
	(scm_procedure_documentation), procs.h (SCM_TOP_LEVEL), ramap.c
	(scm_array_fill_int), scmsigs.c (scm_sigaction), stacks.c
	(narrow_stack, scm_make_stack, scm_stack_id), symbols.c
	(scm_string_to_obarray_symbol), throw.c (scm_catch,
	scm_lazy_catch, scm_ithrow), unif.c (scm_make_uve, scm_array_p,
	scm_array_set_x, scm_bit_set_star_x, scm_bit_count_star),
	validate.h (SCM_VALIDATE_BOOL_COPY, SCM_VALIDATE_PROC):  Replace
	uses of SCM_TRUE_P (x) with SCM_EQ_P (x, SCM_BOOL_T).

2000-06-04  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* eval.c (scm_badformalsp): New static function.
	(SCM_CEVAL): Check arguments for procedure-with-setter closures.
	(Thanks to Keisuke Nishida.)

	The major reason for Guile's slow loading speed has been the fact
	that a chain of Scheme level procedures has been evaluated for
	every top-level symbol lookup during the first pass through the
	code.

	The following is a kludge which I suggested four years ago, and
	which I've repeatedly suggested since.  Personally, I've never
	been bothered by Guile's slow loading speed, so I thought I would
	let someone else do it...

	But since the new environments will be included first in
	Guile-1.5, I thought it would make people happy to get the kludge
	into 1.4.

	* modules.c: Added #include "libguile/vectors.h";
	Added #include "libguile/hashtab.h";
	Added #include "libguile/struct.h";
	Added #include "libguile/variable.h";
	Capture Scheme level `module-make-local-var!' to be used in the
	standard eval closure.
	(scm_standard_eval_closure): New primitive.

	* modules.h (scm_standard_eval_closure): Declare.

	* eval.c (scm_lookupcar): Test for !SCM_CONSP (SCM_CAR (env))
	instead of SCM_TRUE (scm_procedurep (SCM_CAR (env))).

	* symbols.c (scm_sym2vcell): Bypass dispatch in the evaluator for
	standard eval closures.

	* variable.c: Code layout fixes.

2000-06-03  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* Makefile.am: Added LIBS line to libpath which accidentally
	disappeared in the change of 2000-06-01.
	(Thanks to Dale	P. Smith.)

2000-06-03  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* scmsigs.c (scm_segfault): Removed.  (Was probably added by
	mistake since it is not mentioned in ChangeLog.)

	* gc.h (SCM_VALIDATE_CELL): Cast result to (void) in order to
	avoid compiler warnings in gcc.  (Does this work for other
	compilers?)

2000-06-03  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* gc.h (SCM_VALIDATE_CELL): Don't "use" the value returned by
	abort ().
	(SCM_CARLOC, SCM_CDRLOC): Define directly instead of using
	SCM_CELL_OBJECT_0 and SCM_CELL_OBJECT_1.  It's not correct to take
	the address of these expressions since they use SCM_VALIDATE_CELL.
	(Thanks to Bernard Urban.)

	* dynl.c: Changed #include <ltdl.h> --> #include
	"libltdl/ltdl.h".  (Thanks to Bill Schottstaedt.)

2000-06-01  Craig Brozefsky  <craig@red-bean.com>

	* Makefile.am: libguile_la_LDFLAGS gets -version-info args
	from GUILE-VERSION definition of LIBGUILE version.  Added to
	libpath.h definitions for guileversion and libguileversion which
	both get their values from GUILE-VERSION definition.

2000-05-30  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* numbers.h (SCM_BIGP):  Don't use SCM_SMOB_PREDICATE in header
	file:  Code using numbers should not be required to include
	smob.h.

2000-05-30  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* coop-threads.c.cygnus, coop-threads.h.cygnus, fsu-pthreads.h,
	mit-pthreads.c, mit-pthreads.h:  Deleted.

	* Makefile.am (EXTRA_DIST), scmsigs.c, threads.[ch]:  Drop
	references to deleted files and fsu/mit thread support in
	general.

2000-05-29  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* hooks.c (symbol_name, scm_create_hook):  Restored the original
	behaviour of scm_create_hook.  Changing it was bad as Carl
	R. Witty has pointed out.

	* gc.c (scm_init_gc):  We can still rely on scm_create_hook to
	protect the object.

2000-05-26  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* gc.c (scm_init_gc):  Protect scm_after_gc_hook, since this will
	soon not be done by scm_create_hook any longer.

	* hooks.c (make_hook, print_hook, scm_create_hook,
	scm_make_hook_with_name, scm_make_hook), hooks.h (SCM_HOOK_NAME,
	SCM_HOOK_PROCEDURES, SCM_SET_HOOK_PROCEDURES,
	scm_make_hook_with_name), init.c (scm_boot_guile_1):  Hooks no
	longer have names.  As an intermediate solution, the name
	predicate is emulated via object properties, but use of this
	feature is deprecated.

	* hooks.h (scm_free_hook):  Removed, as it is never defined.

2000-05-25  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* numbers.[ch] (SCM_POSFIXABLE, SCM_NEGFIXABLE, SCM_FIXABLE):
	Un-deprecated since otherwise user code can't determine whether a
	number fits into an inum any longer.  The names should be changed
	some time, though.

	* numbers.c (scm_big2inum):  Eliminated use of SCM_UNEGFIXABLE.

	* tags.h (SCM_UNPACK_CAR):  Deprecated.

2000-05-25  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* filesys.h (SCM_OPDIRP), fluids.h (SCM_FLUIDP, SCM_FLUID_NUM),
	fports.h (SCM_OPFPORTP, SCM_OPINFPORTP, SCM_OPOUTFPORTP), hooks.h
	(SCM_HOOK_ARITY), keywords.h (SCM_KEYWORDP, SCM_KEYWORDSYM),
	numbers.h (SCM_NUMP, SCM_BIGSIGN, SCM_BDIGITS, SCM_NUMDIGS):
	Replace SCM_UNPACK_CAR appropriately.  Don't access cells via
	SCM_{SET}?C[AD]R unless they are known to be cons cells.

	* gc.c (scm_heap_seg_data_t, scm_mark_locations, scm_cellp,
	init_heap_seg):  Remove unused struct member variable 'valid'.

2000-05-24  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* fports.c (fport_write), ports.c (scm_markstream, scm_port_mode,
	scm_print_port_mode), ports.h (SCM_OPPORTP, SCM_OPINPORTP,
	SCM_OPOUTPORTP, SCM_INPUT_PORT_P, SCM_OUTPUT_PORT_P, SCM_OPENP),
	procs.h (SCM_CLOSCAR), unif.h (SCM_ARRAY_NDIM, SCM_ARRAY_CONTP),
	variable.h (SCM_VARIABLEP):  Replace SCM_UNPACK_CAR
	appropriately.

2000-05-23  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* gc.c (free_list_length), hash.c (scm_hasher), macros.c
	(scm_macro_type), objects.c (scm_class_of), options.c
	(scm_options), print.c (scm_iprin1), strports.c (st_seek), throw.c
	(SCM_LAZY_CATCH_P):  Replace SCM_UNPACK_CAR appropriately.

2000-05-23  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* eval.c (scm_macroexp, SCM_CEVAL, scm_force), tags.h:  Replace
	SCM_UNPACK_CAR with SCM_CELL_TYPE or SCM_CELL_WORD_0.

	* eval.c (scm_force):  Add documentation.

	* eval.c (scm_force, scm_cons_source):  Don't access cells via
	SCM_{SET}?C[AD]R unless they are known to be cons cells.

2000-05-23  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* strings.h (SCM_NSTRINGP, SCM_NRWSTRINGP), tags.h
	(SCM_NDOUBLE_CELLP), vectors.h (SCM_NVECTORP):  Deprecated.

	* gc.c (scm_igc), gc.h (SCM_PTR_MASK, SCM_PTR_LT):  Removed #ifdef
	nosve #endif conditionally compiled code.

2000-05-23  Michael Livshin  <mlivshin@bigfoot.com>

	* gc.c (scm_heap_seg_data_t): fixed comment for the `span' member.

2000-05-22  Michael Livshin  <mlivshin@bigfoot.com>

	* guile-doc-snarf.in: put the preprocessed file through sed to
	trim all lines to 1024 chars.  I hope it doesn't break anybody's
	sed.  we'll see.  (note: this is lossy trimming, i.e. the spill
	isn't wrapped around but actually chopped off.  this seemed to me
	safe because the current snarfer doesn't understand multi-line
	cookies anyway.  in the long term, it would be nice not to depend
	on AWK for anything.)

	* gc.h (SCM_[SET_]CELL_{WORD,OBJECT}, SCM_VALIDATE_CELL): reverted
	the previous change to this macros, after deciding to torture the
	snarfer instead.

2000-05-21  Michael Livshin  <mlivshin@bigfoot.com>

	* gc.h (SCM_[SET_]CELL_{WORD,OBJECT}, SCM_VALIDATE_CELL): brought
 	the yucky, ugly and nasty conditional compilation back.  sorry,
 	but it was either that or requiring GAWK to build Guile.
	(lots of places): removed the code that implemented the old GC
 	scheme.

	* init.c (scm_boot_guile_1): removed the code conditioned on
 	!GUILE_NEW_GC_SCHEME.

	* __scm.h: (GUILE_NEW_GC_SCHEME): removed.

	* gc.c (scm_protect_object, scm_unprotect_object): change the
 	implementation to more efficient (at least in the time complexity
 	sense).  the calls should now also be thread-safe -- I suspect
 	that people expect them to be.  (thanks to Han-Wen Nienhuys)
	(lots of places): removed the code that implemented the old GC
 	scheme.

	* hashtab.c (scm_hash_fn_create_handle_x): add missing
	SCM_REALLOW_INTS before return.  I really wonder about the
	possible interactions between hashtables, threads & GC.  it
	doesn't look healthy at all.

2000-05-20  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* unif.c (scm_bit_count):  Fixed the parameter checks.  Thanks to
	Dale P. Smith.

2000-05-19  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* __scm.h (SCM_DEBUG_CELL_ACCESSES), gc.h (SCM_):  Added as a new
	debug option to verify all accesses to cells actually access
	objects on the heap.

	* gc.h (SCM_VALIDATE_CELL):  Added.  Only performs validation if
	SCM_DEBUG_CELL_ACCESSES is set to 1.

	(SCM_CELL_WORD, SCM_CELL_OBJECT, SCM_SET_CELL_WORD,
	SCM_SET_CELL_OBJECT):  Use SCM_VALIDATE_CELL to check every cell
	that is accessed.

2000-05-19  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* gh_data.c (gh_scm2chars, gh_scm2shorts, gh_scm2longs,
	gh_scm2floats, gh_scm2doubles):  Change !SCM_NIMP to SCM_IMP.

	* gc.c (scm_cellp):  Fixed and simplified.

	* throw.c (JBJMPBUF, SETJBJMPBUF, SCM_JBDFRAME, SCM_SETJBDFRAME,
	make_jmpbuf, scm_init_throw):  Now using double cells to represent
	jump buffers when using debug extensions.

	(freejb):  Removed.

2000-05-18  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* gh.h gh_data.c gh_funcs.c (gh_new_procedure*, gh_chars2byvect,
	gh_shorts2svect, gh_longs2ivect, gh_ulongs2uvect, gh_floats2fvect,
	gh_doubles2dvect, gh_doubles2scm, gh_define, gh_lookup,
	gh_module_lookup):  Accept const pointers as parameters.

	* gh.h gh_data.c (gh_int2scmb):  Deprecated.

2000-05-18  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* __scm.h (SCM_DEBUG_REST_ARGUMENT):  Renamed from
	SCM_DEBUG_REST_ARGUMENTS in order to clarify that we don't test
	the actual arguments in the list, but rather the rest argument as
	a list of arguments.

	* validate.h (SCM_VALIDATE_REST_ARGUMENT):  Added.

	* async.c (scm_noop), eval.c (scm_map, scm_for_each), list.c
	(scm_list_star, scm_append, scm_append_x), ports.c
	(scm_close_all_ports_except), ramap.c (scm_array_map_x,
	scm_array_for_each), regex-posix.c (scm_make_regexp), stacks.c
	(scm_make_stack), strings.c (scm_string_append), struct.c
	(scm_make_struct, scm_make_vtable_vtable):  Validate rest arguments.

	* dynl.c (DYNL_GLOBAL, sysdep_dynl_link, kw_global, sym_global,
	scm_dynamic_link, scm_init_dynamic_linking), dynl.h
	(scm_dynamic_link):  Removed possibility to pass flags to
	scm_dynamic_link, as it had no effect anyway.

	* filesys.c (scm_fcntl):  Made single optional rest argument into
	a standard optional argument.

	* hooks.c (scm_run_hook):  A list of rest arguments is never
	SCM_UNBNDP.

	* list.c (scm_append, scm_append_x), stacks.c (scm_make_stack),
	strings.c (scm_string_append):	Don't perform half-hearted checks
	to see whether the rest argument forms a proper list any more, use
	SCM_VALIDATE_REST_ARGUMENTS instead.

	* ports.c (scm_close_all_ports_except):  Accept empty list of rest
	arguments.

	* posix.c (scm_convert_exec_args), print.c (scm_simple_format):
	Simplify verification of rest argument.

	* stacks.c (scm_make_stack), stacks.h (scm_make_stack), throw.c
	(ss_handler, handler_message):  Make first mandatory rest argument
	of scm_make_stack into a standard mandatory argument.

	* unif.c (scm_transpose_array, scm_enclose_array,
	scm_array_in_bounds_p), unif.h (scm_transpose_array,
	scm_enclose_array, scm_array_in_bounds_p):  Make first mandatory
	rest argument into a standard mandatory argument.

2000-05-17  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* __scm.h:  Added SCM_DEBUG as default debug option. (Thanks to
	Keisuke Nishida for the suggestion.)  Added debug option
	SCM_DEBUG_REST_ARGUMENTS.

	* eval.c (scm_map, scm_for_each):  Make sure all lists have the
	same length.  Also, removed redundant parameter checks.

2000-05-16  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* Makefile.am:  Let 'make clean' remove *.x and *.doc files.

	* __scm.h:  Improved explanation of giving options to make.

	* __scm.h (SCM_DEBUG_TYPING_STRICTNESS), tags.h
	(SCM_STRICT_TYPING, SCM_DEBUG_TYPING_STRICTNESS):  Renamed
	SCM_STRICT_TYPING to SCM_DEBUG_TYPING_STRICTNESS and moved the
	corresponding declaration and comment to __scm.h.

	* _scm.h (errno), gc.h (SCM_CELLPTR, SCM_PTR_LT), numbers.c
	(scm_remainder, scm_modulo), numbers.h (SCM_SRS, SCM_MAKINUM,
	SCM_INUM):  Removed conditionally compiled code for Turbo C.

	* gdbint.c (gdb_maybe_valid_type_p):  Eliminated call to scm_tag.
	That check can be assumed to be redundant except for very rare
	conditions that actually indicate broken heap data.

2000-05-16  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* numbers.c (scm_logcount, scm_integer_length):  Reordered
	dispatch sequence.

2000-05-15  Gary Houston  <ghouston@arglist.com>

        * stime.c (scm_strftime): don't reset TZ if zone is an empty
	string.  append a "0" to the zone for TZ.

2000-05-15  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* numbers.c (scm_logbit_p, scm_bit_extract):  Reordered dispatch
	sequence.

	(scm_bit_extract):  Fixed handling of bignums.

2000-05-15  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* async.c (scm_sys_gc_async_thunk), chars.h (SCM_ICHRP, SCM_ICHR,
	SCM_MAKICHR), continuations.h (SCM_SETJMPBUF), error.c
	(scm_sysmissing), error.h (scm_sysmissing), evalext.c
	('serial-map), ioext.c (scm_fseek), ioext.h (scm_fseek),
	keywords.c (scm_tc16_kw, scm_init_keywords), ports.h (SCM_CRDY,
	SCM_INPORTP, SCM_OUTPORTP), ramap.c ('serial-array-copy!,
	'serial-array-map!), smob.c (scm_newsmob), smob.h (scm_smobfuns,
	scm_newsmob), tag.c (scm_tag), tag.h (scm_tag), tags.h
	(scm_tc16_flo, scm_tc_flo, scm_tc_dblr, scm_tc_dblc):  Wrapped
	deprecated code between #if (SCM_DEBUG_DEPRECATED == 0) #endif.

	* fports.c (scm_fport_buffer_add), ports.c (scm_input_port_p,
	scm_output_port_p), print.c (scm_get_print_state), validate.h
	(SCM_VALIDATE_CHAR):  Replace use of deprecated macros
	SCM_INPORTP, SCM_OUTPORTP, SCM_ICHRP by SCM_INPUT_PORT_P,
	SCM_OUTPUT_PORT_P, SCM_CHARP, respectively.

2000-05-14  Gary Houston  <ghouston@arglist.com>

	* stime.c (scm_strftime): if HAVE_TM_ZONE is not defined, hack the
	TZ environment variable so that the %Z format returns the zone
	from the input vector instead of the system default.

	from Keisuke Nishida:
	* fports.c (scm_setvbuf): minor docstring fix.
	* ports.h (scm_generic_fgets): obsolete prototype deleted.

2000-05-11  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* __scm.h:  Added new section for debugging options.

	(SCM_DEBUG_DEPRECATED):  If 1, no deprecated code is included to
	help developers to get rid of references to deprecated code.

	* numbers.[ch] (SCM_POSFIXABLE, SCM_NEGFIXABLE, SCM_UNEGFIXABLE,
	SCM_FIXABLE, SCM_FLOBUFLEN):  These macros are no longer provided
	as part of the interface and are marked as deprecated in the
	header file.

	* numbers.c (scm_make_real, scm_make_complex):  Inlined the
	corresponding macros SCM_NEWREAL and SCM_NEWCOMPLEX,
	respectively.

	* numbers.h (SCM_NEWREAL, SCM_NEWCOMPLEX, SCM_INEXP, SCM_CPLXP,
	SCM_REAL, SCM_IMAG, SCM_REALPART, scm_makdbl, SCM_SINGP,
	SCM_NO_BIGDIG, SCM_NUM2DBL, scm_dblproc):  Deprecated.

2000-05-10  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* gc.h (scm_cell, SCM_CELL_WORD, SCM_CELL_OBJECT,
	SCM_SET_CELL_WORD, SCM_SET_CELL_OBJECT):  Scheme cells now consist
	of two scm_bits_t values instead of two SCM values, because it is
	legal for cell entries to hold values that are not scheme objects.

	(SCM_SETAND_CAR, SCM_SETAND_CDR, SCM_SETOR_CAR, SCM_SETOR_CDR):
	Use SCM_SETC[AD]R to modify contents of pairs.

2000-05-10  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* numbers.c (IS_INF, isfinite):  Added FIXME comment.

	(scm_abs, scm_magnitude):  Make these two independent of each
	other.  scm_abs now reports an error if given a complex argument.

	(scm_istr2flo, scm_integer_p).  Use SCM_REAL_VALUE instead of
	SCM_REALPART if the object is known to be real.

	(scm_init_numbers):  No need to use SCM_NEWREAL macro for speed
	here.

	* numbers.h (SCM_SINGP):  Set to 0 instead of SCM_BOOL_F.

2000-05-10  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* eq.c (scm_eqv_p):  Separate handling of real and complex
	values.  Remove #ifdef SCM_BIGDIG #endif test.

	* eval.c (SCM_CEVAL, SCM_APPLY), gh_data.c (gh_scm2floats,
	gh_scm2doubles), hash.c (scm_hasher), ramap.c (scm_array_fill_int,
	ramap_rp, scm_array_map_x), random.c (vector_scale,
	vector_sum_squares), unif.c (scm_make_uve, scm_array_p,
	scm_array_set_x):  Use SCM_REAL_VALUE instead of SCM_REALPART if
	the object is known to be real.  Use SCM_COMPLEXP instead of
	deprecated SCM_CPLXP.  Use SCM_INEXACTP instead of deprecated
	SCM_INEXP.

2000-05-10  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* numbers.c:  No need to include unif.h.

	(IS_INF):  Returned to old test for now:  x == x + 1 will not work
	for large numbers due to rounding errors.
	Thanks to Kalle Olavi Niemitalo.

2000-05-09  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* numbers.c (scm_divbigdig):  Removed outdated comment.

	(scm_number_to_string, scm_string_to_number, scm_number_p,
	scm_real_p, scm_integer_p, scm_inexact_p, scm_gr_p, scm_leq_p,
	scm_geq_p, scm_make_rectangular, scm_make_polar,
	scm_inexact_to_exact):  Added comments.

	(add1, scm_init_numbers):  Removed add1.

2000-05-09  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* numbers.c (IS_INF):  The new test is x == x + 1.  The old test
	x == x/2 did not work for zero values.  Thanks to Han-Wen Nienhuys
	and Ivan Toshkov.

	(scm_number_to_string, scm_sum, scm_difference, scm_two_doubles,
	scm_num2long, scm_num2long_long, scm_num2ulong):  Reordered
	dispatch sequence.

2000-05-09  Marius Vollmer  <mvo@zagadka.ping.de>

	* scmsigs.c (take_signal): Execute SCM_ASYNC_TICK for SIGSEGV,
	SIGILL and SIGBUS signals.  These signals are not continuable and
	must be handled for real right away.

2000-05-08  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* numbers.c (scm_zero_p, scm_positive_p, scm_negative_p,
	scm_real_part, scm_imag_part, scm_magnitude,
	scm_inexact_to_exact):  Reordered dispatch sequence.

2000-05-08  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* feature.c:  No need to include "libguile/smob.h"

	(scm_loc_features, features, scm_add_feature, scm_init_feature):
	Removed variable 'scm_loc_features' as a pointer to the SCM value
	holding the features list.  Using variable 'features' instead,
	which holds the interned pair.  Thus, SCM_SETCDR can be used
	instead of pointer trickery.

2000-05-08  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* alist.c (scm_acons):  Use SCM{_SET}?_CELL_OBJECT as long as a
	cell is not known to be a valid pair.

2000-05-08  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* eval.c (ASRTSYNTAX, scm_m_body, scm_m_letrec1):  Removed
	ASRTSYNTAX.  Using SCM_ASSYNT instead.

	(scm_m_body):  Don't create a redundant cons cell.

	(scm_m_do):  Removed redundant test 'bodycheck'.

	(bodycheck):  Removed.

	* stacks.c (stack_depth, read_frame, read_frames):  Removed
	redundant calculation of size, minimized some variable scopes.

2000-05-05  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* pairs.c (scm_cons, scm_cons2):  Use SCM{_SET}?_CELL_OBJECT as
	long as a cell is not known to be a valid pair.

	(scm_pair_p):  Eliminated redundant SCM_IMP test.

2000-05-05  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* eval.c (scm_m_body, scm_macroexp, unmemocopy, scm_eval_args,
	scm_deval_args):  Eliminated redundant SCM_IMP tests.

	* hashtab.c (scm_ihashx, scm_sloppy_assx, scm_delx_x), weaks.c
	(scm_make_weak_key_hash_table, scm_make_weak_value_hash_table,
	scm_make_doubly_weak_hash_table):  Fixed critical sections.
	Thanks to Keisuke Nishida.

2000-05-05  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* numbers.c (scm_logand, scm_logior, scm_logxor, scm_logtest):
	Fixed some goto-related initialization bugs (introduced by me).

2000-05-04  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* numbers.h (SCM_INUM0):  Uses SCM_MAKINUM instead of SCM_PACK.

	* dynl.c (dynl_obj, DYNL_OBJ, get_dynl_obj):  Removed.

	(DYNL_FILENAME, DYNL_HANDLE):  Use SCM_CELL... macros instead of
	pointer trickery.

	(SET_DYNL_HANDLE):  Added.

	(scm_dynamic_object_p):  Simplified.

	(scm_dynamic_unlink, scm_dynamic_func):  Changed comment.  Deliver
	better error message when accessing unlinked dynamic objects.
	Eliminated call to get_dynl_obj.

2000-05-03  Marius Vollmer  <mvo@zagadka.ping.de>

	* scmsigs.c (orig_handlers) [!HAVE_SIGACTION]: Fix declaration to
	be an array of function pointers instead of being a pointer to an
	array returning function.  Thanks to Kalle Olavi Niemitalo!

2000-05-03  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* numbers.c (scm_divbigbig, scm_divbigint), numbers.h
	(scm_divbigbig, scm_divbigint):  Don't return zero any more to
	indicate that a division has a remainder, return SCM_UNDEFINED
	instead.  It is improbable that anyone actually used these
	functions outside of numbers.c.  For this reason and due to the
	change in behaviour the functions are static now.  Thus, if
	surprisingly there are users of	these functions they will at least
	get alarmed.

	* numbers.c:  Removed #ifdef SCM_BIGDIG #endif in those functions,
	that already have a clean dispatch order.  Note: SCM_BIGDIG is
	always defined.

	* numbers.c (scm_inexact_p):  Simplified.

	* numbers.c (scm_num_eq_p, scm_less_p, scm_max, scm_min,
	scm_product, scm_num2dbl, scm_angle):  Reordered dispatch
	sequence, thereby fixing some comparisons of SCM values with
	integer constants.

	* numbers.c (scm_divide):  Division by zero of inums leads to an
	error now.  (Formerly, an infinite number was returned.)

	Respect the fact, that scm_divbigbig does now return SCM_UNDEFINED
	if a division has a remainder.

2000-05-02  Gary Houston  <ghouston@arglist.com>

	* Makefile.am (INCLUDES): add ${INCLTDL} (thanks to Tim Mooney).

2000-05-02  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* numbers.c (scm_logtest, scm_division):  Reordered dispatch
	sequence, thereby fixing some comparisons of SCM values with
	integer constants.

	* numbers.h (scm_makdbl):  Mark as deprecated at the point of
	declaration.

	* eval.c (SCM_CEVAL, SCM_APPLY), gh_data.c (gh_double2scm,
	gh_doubles2scm), numbers.c (scm_istr2flo, scm_max, scm_min,
	scm_sum, scm_difference, scm_product, scm_divide, scm_sys_expt,
	scm_sys_atan2, scm_make_rectangular, scm_make_polar,
	scm_real_part, scm_imag_part, scm_magnitude, scm_angle,
	scm_long2num, scm_long_long2num, scm_ulong2num), ramap.c
	(ramap_rp, scm_array_map_x), random.c (scm_random,
	scm_random_uniform, scm_random_normal_vector_x, scm_random_exp),
	struct.c (scm_struct_ref), unif.c (scm_array_to_list):  Replace
	call to scm_makdbl with a call to scm_make_real or
	scm_make_complex, depending on whether the imaginary part is known
	to be zero.

2000-05-01  Gary Houston  <ghouston@arglist.com>

	* scmsigs.c: fix the definition of orig_handlers for the case
	that HAVE_SIGACTION is not defined (thanks to
	Kalle Olavi Niemitalo).

	* Makefile.am: remove include_HEADERS (was libguile.h)
	libguile.h: moved to top level directory.

2000-04-28  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* numbers.c (SCM_SWAP):  Moved to the top of the file to allow for
	a wider use.

	* numbers.c (scm_modulo, scm_gcd, scm_lcm, scm_logand, scm_logior,
	scm_logxor):  Reordered dispatch sequence, thereby fixing some
	comparisons of SCM values with integer constants.

	* number.c (scm_logtest):  Removed some redundant SCM_{N}?IMP
	tests.

2000-04-28  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* numbers.c (scm_quotient, scm_remainder):  Removed code that was
	conditionally compiled based on BADIVSGNS.  BADIVSGNS does not
	occur anywhere else throughout guile.

	* numbers.c (scm_quotient):  Fixed parameter number in error
	message.

	* numbers.c (scm_remainder):  Reordered dispatch sequence.

2000-04-25  Gary Houston  <ghouston@arglist.com>

	* posix.c (scm_execlp): docstring fix (thanks to Martin
	Grabmueller).

2000-04-25  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* eval.c (undef_object):  Made into a local static variable
	(suggested by Jost Boekemeier).

2000-04-25  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* pairs.c (cxrs, scm_init_pairs):  Simplify initialization of
	c[ad]+r functions.

	* procs.c (scm_init_iprocs), procs.h (scm_subr, scm_iproc,
	scm_dsubr, scm_init_iprocs):  Removed.

	* procs.h (SCM_SUBRF, SCM_DSUBRF):  Access the cell words
	directly instead of casting a cell to a C struct.

2000-04-22  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	Better modularization of GC extensions through new C level GC
	hooks:

	* weaks.c (scm_weaks_prehistory): New function: Add
	scm_weak_vector_gc_init to scm_before_mark_c_hook; Add
	scm_mark_weak_vector_spines to scm_before_sweep_c_hook.
	(scm_scan_weak_vectors): New function; added to
	scm_after_sweep_c_hook.

	* weaks.h (scm_weak_vectors, scm_weaks_prehistory): Added
	declarations.

	* guardians.h (scm_guardian_gc_init, scm_guardian_zombify): Are
	now static.

	* guardians.c (scm_guardian_gc_init): Turned into a hook function
	and added to scm_before_mark_c_hook.
	(scm_guardian_zombify): Turned into a hook function and added to
	scm_before_sweep_c_hook.

	* async.c (scm_sys_gc_async_thunk): Run after-gc-hook.
	Added #include "libguile/gc.h".

	* gc.h: Added #include "libguile/hooks.h".

	* gc.c: Removed #include "libguile/guardians.h".
	(scm_before_gc_c_hook, scm_before_mark_c_hook,
	scm_before_sweep_c_hook, scm_after_sweep_c_hook,
	scm_after_gc_c_hook): New C level hooks.
	(scm_after_gc_hook): New Scheme level hook.
	(scm_gc_sweep): Moved scanning of weak vectors to weaks.c.
	(scm_igc): Moved initialization of scm_weak_vectors and the call
	to scm_guardian_gc_init to respective module.
	(scm_mark_weak_vector_spines): Moved to weaks.c;
	Call to scm_guardian_zombify moved to guardians.c;
	Run scm_before_gc_c_hook, scm_before_sweep_c_hook,
	scm_after_gc_c_hook at appropriate places.
	(scm_init_gc): Initialize scm_after_gc_hook.

	* hooks.c, hooks.h (scm_make_hook_with_name): Removed deprecated
	function.

	* init.c (scm_boot_guile_1): Added `scm_init_hooks'.

	* Makefile.am: Added hooks.c, hooks.h, hooks.x.

	* feature.c, feature.h: Broke out hook code into separate files.

	* hooks.c, hooks.h: New files.

	* *.*: Change includes so that they always use the "prefixes"
	libguile/, qt/, guile-readline/, or libltdl/.
	(Thanks to Tim Mooney.)

	* Makefile.am (INCLUDES): Removed THREAD_CPPFLAGS and INCLTDL.
	(DEFS): Added.  automake adds -I options to DEFS, and we don't
	want that.
	Removed all -I options except for the root source directory and
	the root build directory.

	* numbers.c (scm_odd_p, scm_even_p): Use SCM_WRONG_TYPE_ARG
	instead of SCM_ASSERT (0, ...).  (Some compilers will complain
	about control reaching end of function otherwise, and, besides,
	the new code is not less clear.)

	* gc.c (scm_must_malloc, scm_must_realloc, scm_must_free): Added
	calls to malloc debugging functions.

	* init.c (scm_boot_guile_1): Added calls to debug-malloc init
	functions.

	* Makefile.am: Added debug-malloc.c, debug-malloc.h,
	debug-malloc.x.

	* debug-malloc.c, debug-malloc.h: New files.

2000-04-20  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* numbers.c (scm_exact_p, scm_odd_p, scm_even_p):  Added
	documentation strings.

	* numbers.c (scm_exact_p, scm_odd_p, scm_even_p, scm_abs,
	scm_quotient):  Reordered dispatch sequence to first handle
	immediates, second handle bignums and finally handle generic
	functions respectively signal wrong type arguments.  Hopefully
	this will allow for easier separation when goops is integrated.

2000-04-19  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* gc.c (which_seg):  Use SCM2PTR to convert a non immediate SCM
	variable into a pointer to a heap cell.

	* gc.c (scm_mark_locations, scm_cellp, init_heap_seg,
	scm_unhash_name):  Remove redundant cast to SCM_CELLPTR.

2000-04-19  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* print.c (scm_iprin1):  Don't assign zero to SCM values, use
	SCM_UNDEFINED instead.

	* weaks.c (scm_make_weak_vector):  Fix assignment of zero to a
	vector element.  (Still to be improved)

2000-04-19  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* eval.c (undef_cell):  Removed, replaced by:

	(undef_object):  Added to replace undef_cell.

	(scm_lookupcar, scm_lookupcar1):  Use undef_object.

	* eval.c (scm_lookupcar, scm_lookupcar1, scm_m_atfop,
	scm_m_atbind, CHECK_EQVISH, SCM_CEVAL), procs.h (SCM_SETCODE):
	Don't perform arithmetic operations with SCM values.

	* eval.c (scm_lookupcar, scm_lookupcar1, scm_m_atfop,
	scm_m_atbind, scm_eval_args, scm_deval_args, SCM_CEVAL):  Use
	symbolic names for the tc3 type codes.

	* eval.c (scm_m_define, SCM_CEVAL, SCM_APPLY):  Remove redundant
	cast to SCM.

	* eval.c (scm_eval_args, scm_deval_args, SCM_CEVAL):  Made the
	access of the struct vcell element explicit.

2000-04-19  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* struct.c (scm_struct_free_light, scm_struct_free_standard,
	scm_struct_free_entity): Use `scm_must_free' instead of	`free'.

	* procs.c (scm_make_subr_opt): Tell scm_must_realloc that we're
	realloc:ing scm_subr_table ("what" instead of "who").

	* numbers.c (scm_adjbig): Ditto.

Tue Apr 18 08:22:41 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* validate.h: Do not cast to (unsigned) in SCM_VALIDATE_INUM_RANGE
	when testing high-end of the range.  Mikael Djurfeldt noticed this
	anomaly -- thanks Mikael!

2000-04-18  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* unif.c (l2ra):  Don't eliminate the call to scm_array_set_x
	itself, as was done in the previous 'patch'.  (Thanks to Radey
	Shouman)

2000-04-18  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* options.c (scm_options), read.c (recsexpr):  Remove redundant
	SCM_IMP test.

	* print.c (scm_iprin1):  Made the access of the struct vcell
	element explicit.

	* print.h (SCM_PRINT_CLOSURE):  Added call to SCM_PACK.

	* ramap.c (scm_ra_eqp, ra_compare), unif.c
	(scm_uniform_vector_ref, scm_cvref, rapr1):  Separated accesses to
	unsigned long and signed long arrays and clarified the way the
	access is performed.

	* ramap.c (scm_array_map_x, raeql), read.c (scm_lreadr), stacks.c
	(narrow_stack), unif.c (scm_cvref, scm_uniform_array_read_x,
	scm_raprin1):  Use SCM_EQ_P to compare SCM values.

	* strings.c (scm_makstr):  Treat the msymbol slots as a field of
	scm_bits_t values.

	* struct.h (SCM_SET_VTABLE_DESTRUCTOR):  Treat the struct data as
	a field of scm_bits_t values.

	* unif.c (l2ra):  Don't test result of scm_array_set_x against
	zero:  It is always SCM_UNSPECIFIED.

2000-04-18  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* script.c (scm_compile_shell_switches): Also enable
	record-positions when given the --debug option.  (Thanks to Diego
	Dainese.)

2000-04-18  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* print.c (ENTER_NESTED_DATA, print_circref, scm_iprlist):
	Compare SCM's with SCM_EQ_P.

	* print.c (scm_make_print_state), srcprop.c
	(scm_source_properties):  Use valid scheme object to initialize
	SCM variable.

	* print.c (scm_iprin1):  Remove redundant calls to SCM_UNPACK.

2000-04-17  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* struct.c (scm_alloc_struct, scm_struct_free_0,
	scm_struct_free_light, scm_struct_free_standard,
	scm_struct_free_entity, scm_make_struct, scm_make_vtable_vtable),
	struct.h (scm_struct_free_t, scm_alloc_struct, scm_struct_free_0,
	scm_struct_free_light, scm_struct_free_standard,
	scm_struct_free_entity):  Struct data regions (and thus also
	vtable data regions) are now C arrays of scm_bits_t elements.

	* gc.c (scm_gc_mark, scm_gc_sweep, scm_unhash_name):  Made the
	mixup of glocs and structs explicit.

	* gc.c (scm_unprotect_object):  Compare SCM's with SCM_EQ_P.

2000-04-17  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* eval.c (scm_unmemocar):  Use macros to test for gloc cell.
	Minimize scope of variable 'ir'.

	* eval.h (SCM_IFRAME, SCM_IDIST), weaks.h (SCM_IS_WHVEC_ANY):
	Added missing call to SCM_UNPACK.

2000-04-17  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* validate.h (SCM_VALIDATE_INUM_RANGE_COPY,
	SCM_VALIDATE_NUMBER_COPY): New macros.

2000-04-16  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* script.c (scm_compile_shell_switches): Added --debug option.

2000-04-16  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* vectors.c (scm_vector_set_x): Return SCM_UNSPECIFIED (as
	specified by R5RS).

2000-04-15  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* ports.h (SCM_INPUT_PORT_P, SCM_OUTPUT_PORT_P): New macros.
	(SCM_INPORTP, SCM_OUTPORTP): Marked as deprecated.

	* validate.h (SCM_VALIDATE_INPUT_PORT, SCM_VALIDATE_OUTPUT_PORT):
	New macros.
	Cleanup of code layout.

	* ports.c, ports.h (close-input-port, close-output-port): New R5RS
	procedures.

2000-04-13  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* continuations.c (scm_make_cont, scm_dynthrow):  Completely
	separated implementations for defined (CHEAP_CONTINUATIONS) and
	!defined (CHEAP_CONTINUATIONS).  Also, now using memcpy for stack
	copying.

	* continuations.c (grow_stack):  Renamed from grow_throw.

	* continuations.c (copy_stack_and_call):  New static function.

	* continuations.c (scm_dynthrow):  Simplified and made static.

	* continuations.h (scm_dynthrow):  Made static.

2000-04-13  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* unif.c, unif.h (shared-array-root, shared-array-offset,
	shared-array-increments): New primitives.

2000-04-12  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* gc.c (scm_gc_sweep):  Simplify the computation of freed memory
	size for msymbols.

	* symbols.h (SCM_SLOTS, SCM_SYMBOL_FUNC, SCM_SYMBOL_PROPS,
	SCM_SYMBOL_HASH):  The msymbol slots are now a field of scm_bits_t
	values.

	* symbols.h (SCM_SET_SYMBOL_FUNC, SCM_SET_SYMBOL_PROPS):  New
	macros.

	symbols.c (scm_intern_obarray_soft, msymbolize, scm_symbol_fset_x,
	scm_symbol_pset_x):  Use them.

	* symbols.c (scm_symbol_hash):  Unpack to access SCM raw data.

2000-04-12  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* ports.c (scm_port_print):  The port data is read as raw data.

	* ports.h (SCM_TC2PTOBNUM, SCM_PTOBNUM):  Fix SCM/scm_bits_t
	mismatch.

2000-04-11  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* eval.c (SCM_CEVAL), objects.c (scm_mcache_lookup_cmethod,
	scm_make_subclass_object), objects.h (SCM_CLASS_FLAGS,
	SCM_ENTITY_PROCEDURE, SCM_ENTITY_SETTER), struct.c
	(scm_struct_init, scm_struct_vtable_p, scm_make_struct,
	scm_struct_ref, scm_struct_set_x), struct.h (SCM_STRUCT_DATA):
	The struct data is now an array of scm_bits_t variables.

	* objects.h (SCM_SET_ENTITY_PROCEDURE):  New macro.

	objects.c (scm_set_object_procedure_x):  Use it.

	* struct.c (scm_struct_init):  Unused variable 'data' removed.

	(scm_struct_vtable_p):  Redundant SCM_IMP tests removed.

2000-04-11  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* objects.h (SCM_OBJ_CLASS_FLAGS, SCM_OBJ_CLASS_REDEF), struct.h
	(SCM_STRUCT_VTABLE_DATA, SCM_STRUCT_LAYOUT, SCM_STRUCT_VTABLE,
	SCM_STRUCT_PRINTER):  The struct vtable data is now an array of
	scm_bits_t variables.

	* struct.h (SCM_SET_STRUCT_LAYOUT):  New macro.

	struct.c (scm_make_vtable_vtable):  Use it.

2000-04-11  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* symbols.c (scm_sym2vcell, scm_sym2ovcell_soft, scm_sym2ovcell,
	scm_intern_obarray_soft, scm_sysintern0,
	scm_string_to_obarray_symbol, scm_intern_symbol,
	scm_unintern_symbol, scm_symbol_binding, scm_symbol_interned_p,
	scm_symbol_bound_p, scm_symbol_set_x):  Don't use C operators to
	compare SCM values.

2000-04-11  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* numbers.c (scm_quotient, scm_modulo):  Reordered to handle the
	case of immediate numbers parameters first.  Also, only use
	decoded numbers for numerical comparison.

2000-04-10  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* objects.h: Don't redeclare scm_call_generic_0 and
	scm_apply_generic.  (Thanks to Tal Tversky.)

2000-04-10  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* hash.c (scm_hasher):  Use symbolic names for the tc3 constants.
	Unpack SCM value to use it as a switch parameter.  Don't cast SCM
	values to int values.

2000-04-10  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* coop.c (mother): Handled EINTR (the wait has been interrupted by
	a signal).

2000-04-07  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* __scm.h (SCM_WTA_DISPATCH_[012n]):  To test whether a SCM value
	contains a raw zero value it has to be unpacked.

	* debug.c (with_traps_inner, scm_with_traps):  Passing SCM values
	via void * requires unpacking / packing.

	* stacks.h (SCM_STACKP):  Remove unnecessary SCM_NIMP test and use
	SCM_EQ_P to compare SCM values.

	* stacks.h (SCM_FRAME_VOID_P, SCM_FRAME_REAL_P, SCM_FRAME_PROC_P,
	SCM_FRAME_EVAL_ARGS_P, SCM_FRAME_OVERFLOW_P):  Remove unnecessary
	call to SCM_UNPACK.

	* tags.h (SCM_NECONSP):  Define in terms of SCM_ECONSP

	* tags.h (SCM_ECONSP):  Clarify the test for glocs.  This is still
	quite ugly.

2000-04-05  Michael Livshin  <mlivshin@bigfoot.com>

	* async.[ch]: unexpose low-level async access macros (thanks to
 	Dirk Herrmann).

	* validate.h: move async validation macros to async.c (nobody else
 	needs them anyway), and rename them.

2000-04-04  Michael Livshin  <mlivshin@bigfoot.com>

	* async.h: kill the scm_async_t struct.  having a heap cell
 	pretending to be a C struct is not helthy, and is not needed here
 	anyway, as asyncs happily fit in one heap cell.

	* async.c: reflect the fact that asyncs are now represented by
 	single heap cell each.

2000-04-04  Gary Houston  <ghouston@arglist.com>

	* error.c (scm_syserror): save errno before doing anything else,
	since it's used in two expressions and may get mutated (thanks to
	Dirk Herrmann).

2000-04-04  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* debug.c (scm_procedure_source, scm_procedure_environment),
	gsubr.c (scm_make_gsubr_with_generic, scm_gsubr_apply), procs.c
	(scm_procedure, scm_setter):  Return valid scheme value as dummy.

	* filesys.c (scm_readdir, scm_rewinddir, scm_closedir,
	scm_dir_print, scm_dir_free), numbers.h (SCM_COMPLEX_REAL,
	SCM_COMPLEX_IMAG), regex-posix.h (SCM_RGX), throw.c (JBJMPBUF,
	SETJBJMPBUF, JBJMPBUF, SETJBJMPBUF, freejb, print_lazy_catch,
	scm_ithrow), unif.c (scm_uniform_vector_ref, scm_cvref,
	scm_array_set_x, rapr1), unif.h (SCM_ARRAY_V, SCM_ARRAY_BASE),
	vectors.h (SCM_VELTS, SCM_VELTS_AS_STACKITEMS, SCM_SETVELTS):  Use
	SCM_{SET_}?CELL_WORD* to access cell entries with raw data.

	* filesys.c (scm_closedir), numbers.c (scm_addbig), numbers.h
	(SCM_SETNUMDIGS), throw.c (JBACTIVE, SCM_JBDFRAME,
	SCM_SETJBDFRAME): Read and modify data bits in cell entry #0 using
	SCM_{SET_}?CELL_WORD_0.

	* filesys.c (fill_select_type, retrieve_select_type, scm_select),
	numbers.c (scm_gcd, scm_lcm, scm_integer_expt, scm_zero_p,
	scm_product, scm_divide), posix.c (scm_getgrgid), ramap.c
	(scm_array_fill_int, racp), throw.c (scm_catch, scm_lazy_catch,
	scm_ithrow), unif.c (scm_make_uve, scm_array_p,
	scm_transpose_array, scm_array_set_x, scm_bit_set_star_x,
	scm_bit_count_star, l2ra), variable.c (prin_var,
	scm_make_variable, scm_make_undefined_variable,
	scm_builtin_variable), vectors.c (scm_vector_set_length_x),
	vports.c (sf_flush, sf_close):  Don't use C operators to compare
	SCM values.

	* numbers.c (scm_odd_p, scm_even_p), variable.c (prin_var):  Must
	unpack SCM values to access their raw contents.

	* numbers.c (big2str):  Eliminate unnecessary casts to SCM.

	* numbers.h (SCM_NEWREAL), regex-posix.h (SCM_RGXP), vports.c
	(scm_make_soft_port):  Use SCM_{SET_}?CELL_TYPE to access the cell
	type information.

	* throw.c (printjb):  Eliminated unnecessary unpack.

	* variable.c (make_vcell_variable):  Smob data is of type
	scm_bits_t.

2000-04-04  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* print.c: Removed promise to rewrite printer code before next
	release.  :)

2000-04-03  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* iselect.c (add_fd_sets): Insert empty statement after label.
	(Thanks to Tim Mooney.)

2000-04-03  Michael Livshin  <mlivshin@bigfoot.com>

	* guardians.c (scm_guardian_zombify): mark all zombies in a
 	separate loop after processing all the currently known live
 	guardians, so as to not introduce order dependencies (thanks to
 	Gary Houston).  note that the order problems are still there if
	some guardians are themselves zombies, but that's a sick case that
	I'm not going to worry about.
	also, make another outer loop to process zombified
 	guardians (which are uncovered while marking zombies).

2000-04-03  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* evalext.c (scm_definedp, scm_m_undefine), gc.c
	(scm_mark_weak_vector_spines, scm_gc_sweep), hashtab.c
	(scm_hashq_ref, scm_hashv_ref, scm_hash_ref, scm_hashx_ref),
	keywords.c (scm_make_keyword_from_dash_symbol), lang.c
	(scm_nil_eq), lang.h (SCM_NILP, SCM_NIL2EOL), load.c
	(scm_primitive_load), modules.c (scm_module_full_name), objects.c
	(scm_class_of, scm_mcache_lookup_cmethod, scm_make_class_object),
	ports.c (scm_close_all_ports_except), ports.h (SCM_EOF_OBJECT_P),
	print.c (scm_iprin1, scm_prin1, scm_iprlist, scm_simple_format),
	print.h (SCM_PRINT_STATE_P), procprop.c (scm_i_procedure_arity,
	scm_stand_in_scm_proc, scm_procedure_property,
	scm_set_procedure_property_x), procs.c
	(scm_procedure_documentation), read.c (scm_lreadr, scm_lreadparen,
	scm_lreadrecparen, scm_read_hash_extend), script.c
	(scm_compile_shell_switches), srcprop.c (scm_source_property,
	scm_set_source_property_x), srcprop.h (SCM_WHASHFOUNDP), stacks.c
	(read_frame, NEXT_FRAME, read_frames, narrow_stack,
	scm_make_stack, scm_stack_id), strop.c (scm_i_index,
	scm_string_index, scm_string_rindex), struct.c (scm_struct_init),
	validate.h (SCM_VALIDATE_BOOL_COPY, SCM_VALIDATE_INUM_DEF,
	SCM_VALIDATE_INUM_DEF_COPY, SCM_VALIDATE_PROC,
	SCM_VALIDATE_ARRAY):  Don't use C operators to compare SCM values.

	* feature.c (make_hook), keywords.c
	(scm_make_keyword_from_dash_symbol), macros.c (scm_makacro,
	scm_makmacro, scm_makmmacro), print.c (scm_iprin1,
	scm_printer_apply, scm_port_with_print_state):  Smob data is of type
	scm_bits_t.

	* feature.c (print_hook), gc.c (scm_object_address), hash.c
	(scm_ihashq, scm_ihashv), print.c (scm_iprin1, scm_ipruk), smob.c
	(freeprint), struct.c (scm_print_struct):  Must unpack
	SCM values to access their raw contents.

	* fluids.c (apply_thunk, scm_with_fluids), hashtab.c (fold_proc,
	scm_hash_fold), load.c (load, scm_primitive_load):  Passing SCM
	values via void * requires unpacking / packing.

	* fports.c (scm_fport_buffer_add, scm_setvbuf), procs.h
	(SCM_SUBRNUM, SCM_SET_SUBRNUM), srcprop.h (SRCPROPBRK, SRCBRKP):
	Read and modify data bits in cell entry #0 using
	SCM_{SET_}?CELL_WORD_0.

	* fports.c (scm_fdes_to_port), gc.c (scm_gc_for_newcell,
	scm_gc_sweep, init_heap_seg), init.c (start_stack), ports.c
	(scm_void_port), procs.c (scm_make_subr_opt,
	scm_make_procedure_with_setter), root.c (scm_internal_cwdr),
	smob.c (scm_make_smob), strports.c (scm_mkstrport):  Use
	SCM_SET_CELL_TYPE to write the cell type information.

	* gc.c (scm_gc_mark):  Use SCM_CELL_OBJECT* to access SCM values
	from cells that are no scheme pairs.

	* gc.c (scm_gc_sweep), mallocs.c (prinmalloc), mallocs.h
	(SCM_MALLOCDATA, SCM_SETMALLOCDATA), print.c (scm_ipruk), random.h
	(SCM_RSTATE), root.h (SCM_ROOT_STATE), smob.c (scm_smob_free),
	srcprop.c (freesrcprops), srcprop.h (SRCPROPPOS, SRCPROPFNAME,
	SRCPROPCOPY, SRCPROPPLIST), struct.c (scm_make_struct,
	scm_make_vtable_vtable):  Use SCM_{SET_}?CELL_WORD* to access cell
	entries with raw data.

	* gc.c (scm_init_storage), sort.c (applyless), strop.c
	(scm_string_to_list):  Eliminate unnecessary casts to SCM.

	* mallocs.c (scm_malloc_obj):  Store result of malloc as raw
	data.

	* ports.c (scm_close_all_ports_except):  Duplicate documentation
	text removed.

	* print.c (scm_iprin1):  Use SCM_ITAG3.

	* procs.h (SCM_SET_SUBRNUM):  Fix shift direction.

	* snarf.h (SCM_GPROC, SCM_GPROC1, SCM_SYMBOL, SCM_GLOBAL_SYMBOL,
	SCM_KEYWORD, SCM_GLOBAL_KEYWORD, SCM_VCELL, SCM_GLOBAL_VCELL,
	SCM_VCELL_INIT, SCM_GLOBAL_VCELL_INIT):  Don't initialize globals
	and static variables at their point of declaration, but rather in
	the init function.

	* tags.h (SCM_PACK):  Automatically cast to scm_bits_t.

2000-04-02  Gary Houston  <ghouston@arglist.com>

	* guardians.c (TCONC_IN, scm_make_guardian): set the CDR of the
	empty tconc pair to SCM_EOL instead of SCM_BOOL_F, avoiding the
	use of an improper list (which breaks g_print.  g_print isn't
	used).
	guardians.c: Added more comments and modified the make-guardian
	docstring.  Reordered a few procedures.

2000-04-01  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* eval.c (scm_lookupcar1, scm_lookupcar, scm_m_case, scm_m_cond,
	scm_m_lambda, iqq, scm_m_define, scm_m_expand_body, unmemocopy,
	SCM_CEVAL), procs.h (SCM_TOP_LEVEL):  Don't use C operators to
	compare SCM values.

	(scm_makprom):  Smob data is of type scm_bits_t.

2000-03-31  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* backtrace.c (display_error_body), debug.c (scm_procedure_source,
	scm_reverse_lookup), dynl.c (scm_dynamic_link):  Don't use C
	operators to compare SCM values.

	* debug.c (scm_make_debugobj), debug.h (SCM_DEBUGOBJ_FRAME,
	SCM_SET_DEBUGOBJ_FRAME):  Update SCM_{SET_}?DEBUGOBJ_FRAME to
	access raw cell data with SCM_{SET_}?CELL_WORD_1.

	* debug.c (scm_make_debugobj):  Don't use SCM_SETCAR to set types.

	* debug.c (scm_make_memoized), dynl.c (scm_dynamic_link):  Smob
	data is of type scm_bits_t.

2000-03-31  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* gdbint.c (gdb_maybe_valid_type_p), guardians.c (TCONC_EMPTYP,
	scm_guardian_zombify):  Use SCM_EQ_P to compare SCM values.

	* guardians.c (GUARDIAN):  Use SCM_CELL_WORD_1 for raw data.

2000-03-31  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* ports.h (scm_port):  Change type of stream member to scm_bits_t.

	* gdbint.c (unmark_port, remark_port), ports.c (scm_markstream),
	strports.c (st_resize_port, scm_mkstrport), vports (sf_flush,
	sf_write, sf_fill_input, sf_close, scm_make_soft_port):  Since
	streams are now of type scm_bits_t, SCM streams have to be
	unpacked/packed.

	* ports.h (SCM_SETPTAB_ENTRY, SCM_SETSTREAM):  Cast input to
	scm_bits_t.

2000-03-31  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* coop-defs.h (struct coop_t): Added `sto'-field again because of
	binary compatibility---let's remove it next time we alter some
	major structure.

	* coop.c (coop_quitting_p, coop_cond_create, coop_mutex_create,
	coop_mother, coop_child): New variables.
	(mother): New function.
	(coop_create): New thread spawning mechanism which uses a "mother
	thread".  The "dummy" pthreads aren't healthy enough to give birth
	to new threads since Linux threads thinks they are asleep.

	* coop-defs.h (struct coop_t): Removed dummy_mutex.

	* coop-defs.h, coop-threads.c (struct coop_t): Eliminate
	`sto'-field when GUILE_PTHREAD_COMPAT is enabled.

2000-03-30  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* arbiters.c (scm_make_arbiter), async.c (scm_async), dynwind.c
	(scm_internal_dynamic_wind):  Smob data is always of type
	scm_bits_t.

	* arbiters.c (SCM_ARB_LOCKED, SCM_LOCK_ARB, SCM_UNLOCK_ARB):
	Access the locking information in cell entry 0 with
	SCM_{SET_}?CELL_WORD_0 instead of SCM_*CAR.

	* async.c (scm_run_asyncs):  Use SCM_NULLP to test for the empty
	list.

	* dynwind.c (scm_dowinds):  Use SCM_EQ_P to compare SCM values.

	* ports.h (SCM_PTAB_ENTRY, SCM_SETPTAB_ENTRY):  Access the ptab
	entry data using SCM_{SET_}?CELL_WORD_1 instead of SCM_{SET}?CDR.

2000-03-29  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* alist.c (scm_sloppy_assq, scm_assq), eq.c (scm_eq_p, scm_eqv_p,
	scm_equal_p), list.c (scm_ilength, scm_last_pair, scm_reverse,
	scm_sloppy_memq, scm_delq_x, scm_delq1_x), tags.h (SCM_UNBNDP):
	Don't use C operators == and != to compare SCM values, use
	SCM_EQ_P instead.

	* boolean.c (scm_boolean_p):  Use SCM_BOOLP to determine whether a
	SCM value is equal to #t or #f.

	* eq.c (scm_eqv_p, scm_equal_p):  Don't use SCM_CAR to access the
	cell type entry of non immediate objects of unknown type.  Use
	SCM_CELL_TYPE instead.

	* gh_data.c (gh_scm2bool, gh_module_lookup), list.c
	(scm_sloppy_memv, scm_sloppy_member, scm_delv_x, scm_delete_x,
	scm_delv1_x, scm_delete1_x), scmsigs.c (scm_sigaction):  Use
	SCM_FALSEP and SCM_TRUE_P to compare SCM values against #f and
	#t.

	* list.c (scm_listify):  Use SCM_UNBNDP to test for an unbound
	scheme value.

2000-03-29  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* coop-threads.c (scm_call_with_new_thread, scm_spawn_thread,
	scm_make_mutex, scm_make_condition_variable): Cast data to
	scm_bits_t in SCM_SET_CELL_WORD and SCM_NEWSMOB macros.

	* coop.c (coop_create): Set `specific' field, not `data' to NULL.

2000-03-29  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* smob.h (SCM_NEWSMOB, SCM_NEWSMOB2, SCM_NEWSMOB3, SCM_SMOB_DATA,
	SCM_SET_SMOB_DATA, SCM_TC2SMOBNUM, SCM_SMOBNUM):  To access smob
	data, use SCM_{SET_}?CELL_TYPE or SCM_{SET_}?WORD_[1-3].

	Note that this implies that smob data has always to be passed as
	values of type scm_bits_t.

2000-03-29  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* threads.c (scm_init_threads): Pass 0 size to scm_make_smob_type
	for scm_tc16_thread.  As the current COOP threads are written, GC
	is not supposed to manage storage for threads.

	* error.c (scm_error): Don't try to throw an error if
	scm_gc_heap_lock is true.

	* coop.c (coop_finish): New function.  Called at exit.
	(coop_aborthelp): Free thread structures when threads die.
	Finished LinuxThreads compatibility support => COOP threads now
	mesh with LinuxThreads.

	* coop-threads.c (scm_call_with_new_thread, scm_spawn_thread):
	Changed SETCDR --> SET_CELL_WORD_1.

	* coop-threads.c (scheme_launch_thread): Set word 1 of handle to 0
	when thread dies.

2000-03-29  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* boolean.h (SCM_TRUE_P):  New macro.

	* boolean.h (SCM_FALSEP, SCM_NFALSEP, SCM_BOOLP), pairs.h
	(SCM_NULLP, SCM_NNULLP):  Use SCM_EQ_P to compare SCM values.

2000-03-28  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* continuations.h (SCM_CONTREGS, SCM_SET_CONTREGS):  New macros to
	access continuation data.

	(SCM_SETJMPBUF):  Deprecated.  Use SCM_SET_CONTREGS instead.

	(SCM_JMPBUF, SCM_DYNENV, SCM_THROW_VALUE, SCM_BASE, SCM_SEQ,
	SCM_DFRAME):  Use SCM_CONTREGS instead of SCM_CHARS to access
	continuation data.

	* continuations.c (scm_make_cont), init.c (start_stack),
	root.c (scm_internal_cwdr):  Use SCM_SET_CONTREGS instead of
	SCM_SETJMPBUF.

2000-03-28  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* symbols.h (SCM_LENGTH, SCM_SETLENGTH):  Access the length field
	of strings and symbols by using SCM_{SET_}?CELL_WORD_0.

	(SCM_CHARS, SCM_UCHARS, SCM_SETCHARS):  Use SCM_{SET_}?CELL_WORD_1
	to access the char * field of strings and symbols.

2000-03-27  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* gc.h (SCM_NEWCELL, SCM_NEWCELL2):  Use SCM_SET_CELL_TYPE to set
	the type entry of a new cell.  Added a comment about things to
	remember when updating the list of free cells.

	(SCM_FREEP, SCM_MARKEDP):  Use SCM_CELL_TYPE to access the type
	entry of a cell.

2000-03-27  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* pairs.h (SCM_CAR, SCM_CDR, SCM_SETCAR, SCM_SETCDR):  Use
	SCM_CELL_OBJECT and SCM_SET_CELL_OBJECT.  This change implies that
	with strict type checking enabled these macros will only work if
	given valid SCM parameters.

	(SCM_GCCDR):  Moved to tags.h.

	* tags.h (SCM_GCCDR):  Moved here from pairs.h.

2000-03-26  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* tags.h (SCM2PTR, PTR2SCM):  Moved to gc.h.

	* pairs.h (scm_cell, SCM_CELLPTR, SCM_CELL_WORD*, SCM_CELL_OBJECT*,
	SCM_SET_CELL_WORD*, SCM_SET_CELL_OBJECT*, SCM_CELL_TYPE,
	SCM_SET_CELL_TYPE, SCM_PTR_LT, SCM_PTR_MASK, SCM_PTR_GT,
	SCM_PTR_LE, SCM_PTR_GE, SCM_CELL_WORD_LOC, SCM_NEWCELL,
	SCM_NEWCELL2): 	Moved to gc.h.

	(SCM_CARLOC, SCM_CDRLOC, SCM_SETAND_CAR, SCM_SETAND_CDR,
	SCM_SETOR_CAR, SCM_SETOR_CDR):  Moved to gc.h.  These names should
	be changed, though, since the macros are not only pair related.

	(SCMPTR):  Deleted.

	* gc.h (SCM2PTR, PTR2SCM, scm_cell, SCM_CELLPTR, SCM_CELL_WORD*,
	SCM_CELL_OBJECT*, SCM_SET_CELL_WORD*, SCM_SET_CELL_OBJECT*,
	SCM_CELL_TYPE, SCM_SET_CELL_TYPE, SCM_PTR_LT, SCM_PTR_MASK,
	SCM_PTR_GT, SCM_PTR_LE, SCM_PTR_GE, SCM_CELL_WORD_LOC,
	SCM_NEWCELL, SCM_NEWCELL2, SCM_CARLOC, SCM_CDRLOC, SCM_SETAND_CAR,
	SCM_SETAND_CDR, SCM_SETOR_CAR, SCM_SETOR_CDR):  Moved here from
	tags.h and pairs.h.

2000-03-25  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* tags.h (SCM_STRICT_TYPING):  New macro that, if defined,
	activates strict compile time type checking for variables of
	type SCM.
	(SCM, SCM_PACK, SCM_UNPACK):  Define according to whether
	SCM_STRICT_TYPING or SCM_VOIDP_TEST are defined.
	(SCM_EQ_P):  Defined as a macro equivalent for eq?.

2000-03-25  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* tags.h (SCM_POINTERS_MUNGED):  Removed.

	* gc.c (scm_gc_sweep, init_heap_seg):  Removed use of
	SCM_POINTERS_MUNGED, thus fixing some illegal casts to SCM.

2000-03-24  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* pairs.h (SCM_CELL_OBJECT, SCM_CELL_OBJECT_[0-3],
	SCM_SET_CELL_OBJECT, SCM_SET_CELL_OBJECT_[0-3], SCM_CELL_TYPE,
	SCM_SET_CELL_TYPE):  Added a set of low level macros for accessing
	cell entries.
	(SCM_CELL_WORD_[0-3]): Renamed from the SCM_CELL_WORD[0-3].

	* procs.h, procs.c:  Instead of SCM_{SET_}?CELL_WORD[12], use the
	newly introduced SCM_{SET_}?CELL_OBJECT_[12] macros.

2000-03-23  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* tags.h: Disabled definition of SCM_VOIDP_TEST.

	Defining SCM as void * introduces problems which haven't been
	handled yet.  Developers who work with these issues can enable it
	in their working copies.

	Disabling this definition exposes a set of newly introduced and
	older misuses of types which causes warning messages during
	compilation.  We'll fix this successively.

	* gc.c (scm_mark_locations): Changed * (SCM **) X --> * (SCM *) X
	in order to obtain a value of type SCM.
	(scm_cellp): Updated with new changes to scm_mark_locations.

	* continuations.h (SCM_SETJMPBUF): Cast second arg into SCM.

	* continuations.c (scm_make_cont): Removed cast of size_t into
	long.

	* symbols.h (SCM_SETCHARS): Cast second arg into SCM.

2000-03-22  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* numbers.h (SCM_SETNUMDIGS):  Use SCM_BIGSIZEFIELD macro for
	shifting, not constant.  Thanks to Dale P. Smith.

	* numbers.c (scm_sum, scm_difference):  Don't test a SCM value
	for being less than zero.  Decode it to a C value first.  Again,
	thank you Dale.

2000-03-22  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* numbers.h, ramap.c, struct.h, vectors.h:  Don't use SCM2PTR for
	non scheme values.  If raw data is stored in SCM variables, it has
	to be accessed using SCM_UNPACK until a better solution is found.

2000-03-22  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* tags.h (SCM_ECONSP, SCM_NECONSP): More corrections of
	pointer-arithmetic induced by the SCM_PACK/UNPACK change.

	* print.c (scm_iprin1): SCM_PACK/UNPACK corrections.

	* gc.c (scm_gc_sweep): SCM_PACK/UNPACK corrections.

	* eval.c (SCM_CEVAL, scm_unmemocar): SCM_PACK/UNPACK corrections.

	* dynwind.c (scm_swap_bindings): SCM_PACK/UNPACK corrections.

	* async.c, __scm.h: Removed lots of the old async click logic.  It
	is possible to reinsert it by defining GUILE_OLD_ASYNC_CLICK in
	__scm.h.  Let's try this out and dump the old code after the
	threads reorganization.
	(set-tick-rate, set-switch-rate): Conditionally removed.

2000-03-21  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* gc.c (scm_gc_mark): Bugfix 1: The recent SCM_PACK/UNPACK change
	made SCM values into pointers.  This turned an arithmetic
	computation of the address of the vcell into a pointer-arithmetic
	one, thereby screwing up marking of structs.
	Bugfix 2: Removed incompletely introduced loop variable `j' used
	when protecting the tail array of a struct.

2000-03-21  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* struct.h (SCM_STRUCT_DATA):  Don't cast SCM values to pointers.

2000-03-21  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* symbols.h, symbols.c (scm_strhash):  Declare the string
	parameter as constant, since it is not modified.

	* symbols.c (scm_intern_obarray_soft,
	scm_sysintern0_no_module_lookup):  Can now pass constant strings
	to scm_strhash without need for casting.

2000-03-21  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* vectors.h (SCM_VELTS, SCM_VELTS_AS_STACKITEMS):  Don't cast SCM
	values to pointers.  Use SCM2PTR instead.

2000-03-21  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* async.c (scm_set_tick_rate, scm_set_switch_rate):  Don't unpack
	results of SCM_INUM.

2000-03-21  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* init.c (scm_boot_guile_1): Renamed GUILE_GC_TRIGGER_1 -->
	GUILE_MIN_YIELD_1, GUILE_GC_TRIGGER_2 --> GUILE_MIN_YIELD_2.
	GUILE_MIN_YIELD_X now take *positive* fractions of heap size.

	* gc.c, gc.h (SCM_MIN_YIELD_1, SCM_MIN_YIELD_2,
	min_yield_fraction, min_yield, adjust_min_yield): Renamed from
	SCM_GC_TRIGGER_1, SCM_GC_TRIGGER_2, gc_trigger_fraction,
	gc_trigger, adjust_gc_trigger.

	* gc.c (alloc_some_heap): Further improvement of minimal heap size
	prediction.
	(SCM_MAX): New macro.
	(scm_freelist_t): New field: collected_1. Previous amount of
	collected cells.
	(gc_sweep_freelist_finish): Trigger based on two last values of
	freelist->collected to avoid unnecessary allocation due to
	temporary peaks.
	(SCM_INIT_HEAP_SIZE_1, SCM_GC_TRIGGER_1, SCM_GC_TRIGGER_2):
	Adjusted to 45000 cells, 40% and 40%.  Gives quick startup
	without extra heap allocation.

2000-03-20  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* numbers.h (SCM_MAKINUM):  The parameter to SCM_MAKINUM should
	already be a C value.  No need to unpack it.

	* numbers.c (scm_long_long2num):  Cast the parameter to scm_bits_t
	if we know it fits into an inum.

	* ramap.c (ramap_rp):  An scm_tc7_[ui]vect object does point to a
	field of long values.  In contrast, SCM_VELTS accesses a field of
	SCM values.

2000-03-20  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* gc.c (scm_gc_stats): Inserted explanation of local_scm_mtrigger
	etc.
	(scm_gc_yield_1): New variable: Holds previous yield.  Used to
	make better judgements.
	(gc_sweep_freelist_finish): Inserted explanation of use of
	gc_trigger.

	* print.h, stacks.h, options.c, options.h: Changed C++
	commentaries to C.

2000-03-20  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* tags.h (SCM2PTR, PTR2SCM):  Use SCM_PACK / SCM_UNPACK correctly.

	* numbers.h (SCM_INUMP, SCM_MAKINUM, SCM_INUM0, SCM_COMPLEX_REAL,
	SCM_COMPLEX_IMAG, SCM_NUMP, SCM_BDIGITS):  Use SCM_PACK /
	SCM_UNPACK / SCM2PTR correctly.

2000-03-20  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* gc.c (adjust_gc_trigger): Improved documentation.
	(alloc_some_heap): Since gc_trigger is used against
	freelist->collected, this is the value which should be used to
	predict minimum growth.

2000-03-20  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* eval.h:  Fix mixup of packed/unpacked SCM values.  (Thanks
	Thien-Thi Nguyen for the patch.)

2000-03-20  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* numbers.c (scm_ash):  Fixed typing problems with the second
	parameter and added some documentation.  (Thanks Thien-Thi Nguyen
	for indicating the problem.)

2000-03-19  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* gc.c, gc.h (scm_gc_yield): New variable.
	(adjust_gc_trigger): Use scm_gc_yield.
	(alloc_some_heap): Use scm_gc_yield instead of
	scm_gc_cells_collected.

	* coop-threads.c: Addd #include "root.h", #include "strings.h".

	* debug.c: Added #include "root.h".  (Thanks to Thien-Thi Nguyen.)

	* gc.c (scm_gc_for_newcell, adjust_gc_trigger): Improved GC
	trigger adjustmeant: Take yield (freed cells) for all freelists
	into account.
	(SCM_INIT_HEAP_SIZE_1, SCM_GC_TRIGGER_1, SCM_GC_TRIGGER_2): Tuned
	to 50000 cell heap with 45% trigger.
	(scm_gc_cells_collected): Reintroduced.
	(SCM_HEAP_SIZE): New macro.
	(scm_gc_sweep): Reintroduced correct computation of
	scm_cells_allocated.
	(scm_freelist_t): Corrected commentary for field `cluster_size':
	Clustersize counts objects, not cells;  New member
	`clusters_allocated'.

2000-03-19  Michael Livshin  <mlivshin@bigfoot.com>

	* *.[hc]: add Emacs magic at the end of file, to ensure GNU
 	indentation style.

2000-03-19  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* threads.h: Added #include "libguile/throw.h".  (Thanks to
	Thien-Thi Nguyen.)

2000-03-18  Michael Livshin  <mlivshin@bigfoot.com>

	* tags.h: (SCM_DOUBLE_CELLP, SCM_NDOUBLE_CELLP): new macros (bad
	names, anyone got any better ones?)

	* gc.h: (typedef struct scm_freelist_t) remove from here.

	* gc.c: (CELL_UP, CELL_DN) made these macros take additional
 	parameter (the span).
	(CLUSTER_SIZE_IN_BYTES, ALIGNMENT_SLACK) new macros.
	(typedef struct scm_freelist_t) moved here from gc.h, it had no
 	business being externally visible.
	(typedef struct scm_heap_seg_data_t) renamed from
 	scm_heap_seg_data, to be style-compliant.
	(scm_mark_locations) if the possible pointer points to a
 	double-cell, check that it's properly aligned.
	(init_heap_seg) align double-cells properly, work with the
 	assumption that the segment size divides cleanly by cluster size.
	(round_to_cluster_size) new function.
	(alloc_some_heap, make_initial_segment) use round_to_cluster_size
 	to satisfy the new init_heap_seg invariant.

2000-03-18  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* _scm.h:  Don't include async.h everywhere...

	* eq.c eval.c iselect.c: ... only include it here.

2000-03-18  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* _scm.h:  Don't include root.h everywhere...

	* async.c continuations.c eq.c eval.c evalext.c feature.c gc.c
	gdbint.c gsubr.c ioext.c keywords.c lang.c load.c macros.c
	numbers.c objprop.c ports.c print.c procprop.c ramap.c read.c
	srcprop.c stackchk.c stacks.c strports.c symbols.c unif.c
	variable.c vectors.c vports.c: ... only include it here.

2000-03-17  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* _scm.h:  Don't include strings.h everywhere...

	* backtrace.c dynl.c error.c feature.c filesys.c fports.c gc.c
	gdbint.c ioext.c load.c net_db.c numbers.c objects.c options.c
	ports.c posix.c print.c procs.c random.c read.c regex-posix.c
	simpos.c socket.c stacks.c stime.c strop.c strports.c struct.c
	symbols.c unif.c vectors.c version.c vports.c: ... only include it
	here.

2000-03-17  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* _scm.h:  Don't include ports.h everywhere...

	* arbiters.c backtrace.c debug.c dynl.c dynwind.c eval.c feature.c
	fluids.c gc.c gdbint.c guardians.c hash.c keywords.c mallocs.c
	numbers.c objects.c print.c read.c root.c smob.c srcprop.c
	stackchk.c strports.c struct.c throw.c variable.c:  ... only
	include it here.

2000-03-17  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* _scm.h:  Don't include vectors.h everywhere...

	* eq.c eval.c filesys.c gc.c gsubr.c guardians.c hash.c hashtab.c
	keywords.c net_db.c numbers.c objects.c posix.c print.c procprop.c
	procs.c ramap.c random.c read.c scmsigs.c socket.c sort.c stime.c
	strports.c symbols.c unif.c vports.c weaks.c:  ... only include it
	here.

2000-03-17  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* genio.h:  removed.  (Only content was '/* delete me */'.)

	* Makefile.am arbiters.c backtrace.c debug.c dynl.c dynwind.c
	error.c filesys.c fluids.c gc.c gsubr.c guardians.c keywords.c
	libguile.h mallocs.c numbers.c print.c random.c read.c root.c
	srcprop.c stackchk.c struct.c threads.c throw.c variable.c:
	Removed reference to genio.h

2000-03-17  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* gc.c, gc.h: Cleanup of the change of 2000-03-15.
	Cluster sizes are now independent of GC trigger values.
	GUILE_GC_TRIGGER_n can now specify a relative trigger value:
	A negative integer gives fraction of total heap size in percent.
	(SCM_GC_TRIGGER_1, SCM_GC_TRIGGER_2): Default values set to -40.

	* init.c (scm_boot_guile_1): Introduced new variable
	GUILE_MAX_SEGMENT_SIZE; New environment variable names:
	GUILE_INIT_SEGMENT_SIZE_1, GUILE_GC_TRIGGER_1,
	GUILE_INIT_SEGMENT_SIZE_2, GUILE_GC_TRIGGER_2

2000-03-16  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* __scm.h (GC_FREE_SEGMENTS): Disable this until we have made
	freeing of segment work with the new GC scheme.  (Thanks to
	Michael Livshin.)  Oops, also happened to make GUILE_NEW_GC_SCHEME
	the default, but I'll let this change stay in CVS Guile since this
	code is not expected to contain serious bugs.

2000-03-16  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* gc.c, gc.h (scm_map_free_list): Define also if GUILE_DEBUG is
	defined.
	(scm_free_list_length): New procedure (GUILE_DEBUG).
	Fixed a small but serious bug introduced by the previous change.

	* gc.c (scm_gc_sweep): Moved variable n_objects to inner sweep
	loop and declare as register.

	* gc.c (scm_gc_sweep): Sigh... forgot to clear private freelists
	after GC.

Wed Mar 15 08:27:04 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* fluids.c: Docstring patch from Keisuke Nishida.  Some
	reindentation, too, and a couple formals renamed.  Should
	fluid-set! return UNSPECIFIED instead of a value?

Wed Mar 15 08:24:58 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* Makefile.am: Separate out DOT_X_FILES and DOT_DOC_FILES, and
	generate the latter from the concrete listing of the former.  Then
	make guile-procedures.txt depend on DOT_DOC_FILES instead of
	*.doc, so that rebuilding it works.

Wed Mar 15 08:12:14 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* libguile.h: Include libguile/validate.h.  Thanks Keisuke Nishida!

	* guile-snarf.awk.in: Replace docstring line-ending \n" and \n\n"
	with nothing and \n, respectively. Thanks Keisuke Nishida for
	noticing this problem.

2000-03-15  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* __scm.h (GUILE_NEW_GC_SCHEME): Define this if you want to test a
	new way of allocating heap.  It makes Guile fast, but still
	contains bugs.

	* gc.c, gc.h, pairs.h, init.c: Implementation of a new way of
	allocating heap.  The basic idea is to trigger GC every Nth
	allocated cell and grow heap when free list runs out.  The scheme
	has been extended so that GC isn't triggered until all remaining
	cells are used.  The implementation is also prepared for
	development in the direction of POSIX threads.

	* gc.c (SCM_EXPHEAP): In order to grow by a factor of 1.5,
	SCM_EXPHEAP should return half of the heap size.

2000-03-14  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	The following change to init.c is only enabled if Guile was
	configured with --enable-guile-debug.

	* init.c (scm_i_getenv_int): New function.
	(scm_boot_guile_1): Use the environment variables
	GUILE_INIT_HEAP_SIZE, GUILE_INIT_HEAP_SIZE2 to select heap size if
	they exist.  (This may be replaced by a Scheme level mechanism in
	the future.)

	* objprop.c (s_scm_set_object_property_x): Use scm_assq instead of
	scm_assoc.  (Thanks to Keisuke Nishida.)

2000-03-14  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* eval.c, lang.c, lang.h (scm_lisp_nil, scm_lisp_t): Renamed from
	scm_nil, scm_t.  (Thanks to Keisuke Nishida.)

2000-03-14  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* init.c (scm_boot_guile_1): Use same initial segment size for
	1-word and 2-word segments.  Having the smaller size causes Guile
	to GC too often.  Obviously something needs to be done to allow
	for a smaller 2-word segment without this to happen.  (The amount
	of heap for each type should be automatically adapted to the
	application somehow.)

	[Almost all of these changes should be documented in the NEWS
	file.]

	* gc.h (scm_freelist_t): New type.

	* pairs.h (SCM_NEWCELL, SCM_NEWCELL2): Use new style freelists.

	* gc.c (SCM_INIT_HEAP_SIZE): Changed from 32768 --> 40000 so that
	all of Guile basics fits into one segment and there suitable room
	for work.
	(SCM_EXPHEAP): Now takes an argument.  Grow by a factor of 1.5
	instead of 2.
	(scm_freelist, scm_freelist2): Now of type scm_freelist_t.
	Freelists now contains information about object span, cells
	collected and amount of cells in heap segments belonging to the
	list.
	(scm_heap_size, scm_gc_cells_collected): Removed.

	* init.c (scm_boot_guile_1): Make 2-word segment 8K (512 cells).

	* Makefile.am (libguile_la_LDFLAGS): Bumped library version
	number.

	* __scm.h eq.c, eval.c, gc.c, gc.h, gh_data, hash.c, numbers.c,
	numbers.h, objects.c, ramap.c, random.c, unif.c, unif.h: Extensive
	rewrite of handling of real and complex numbers.
	(SCM_FLOATS, SCM_SINGLES): These #ifdef conditionals have been
	removed along with the support for floats.  (Float vectors are
	still supported.)

	* tags.h (scm_tcs_bignums): Removed.
	(scm_tc16_bigpos, scm_tc16_bigneg): Replaced by scm_tc16_big.
	Use SCM_BIGSIGN(x) to test for sign!
	(scm_tc16_big): The new bignum type.
	(SCM_REAL_PART, SCM_IMAG_PART): Removed.

	* numbers.h (SCM_BIGSIGN): Sign moved to bit 16.
	(scm_makdbl): Deprecated.
	(SCM_NEWREAL, SCM_NEWCOMPLEX): New macros.
	(SCM_SINGP): Deprecated.
	(SCM_FLO): Removed.
	(SCM_INEXP, SCM_CPLXP): Deprecated.
	(SCM_INEXACTP, SCM_COMPLEXP): New macros.
	(SCM_COMPLEX_REAL, SCM_COMPLEX_IMAG): Renamed from
	SCM_REAL, SCM_IMAG (and now only valid for complex numbers).
	(SCM_REAL, SCM_IMAG): New, *deprecated*, selectors which work both
	for doubles and complex numbers.
	(SCM_REAL_VALUE): New selector for doubles.
	(scm_double_t, scm_complex_t): New types.
	(scm_dbl): Removed.

	* numbers.c (scm_floprint, scm_floequal): Removed.
	(scm_print_real, scm_print_complex, scm_real_equalp,
	scm_complex_equalp): New functions.

	* unif.c (scm_makflo): Removed.

	* smob.h (SCM_SMOB_PREDICATE): New macro.
	(SCM_NEWSMOB2, SCM_RETURN_NEWSMOB2, SCM_NEWSMOB3,
	SCM_RETURN_NEWSMOB3): New macros.

1999-11-21  Michael Livshin  <mlivshin@bigfoot.com>

	The following changes implement primitive support for double cells
	(i.e. four-word cells) and change the representation of some
	things to multi-cells instead of cons+malloc.  (Applied and
	modified by mdj.)

	* pairs.h (SCM_NEWCELL2): double-cell variants of SCM_NEWCELL.
	(SCM_CELL_WORD, SCM_CELL_WORDLOC, SCM_SET_CELL_WORD): primitive
	multi-cell access macros (used by the ones below).
	(SCM_CELL_WORD[0-3], SCM_SET_CELL_WORD[0-3]): multi-cell access
 	macros.

	* gc.c (scm_freelist2): multi-cell freelists.
	(inner_map_free_list): map_free_list, parameterized on ncells.
  	"nn cells in segment mm" was misleading for ncells > 1; changed to
 	"objects".  still print cells too, though.
	(scm_map_free_list): rewritten using inner_map_free_list.
	(scm_check_freelist): get freelist as parameter, since now we have
 	more than one.
	(scm_debug_newcell2): multi-cell variants of
 	scm_debug_newcell.
	(scm_gc_for_newcell): take ncells and freelist pointer as
 	parameters.
	(scm_gc_mark): add case for tc7_pws (procedures with setters are
 	now double cells).
	(scm_gc_sweep): don't free the float data, since it's not malloced
 	anymore.
	(init_heap_seg): didn't understand what n_new_objects stood for,
 	so changed to n_new_cells.
	(make_initial_segment): new function, makes an initial segment
 	according to given ncells.
	(scm_init_storage): call make_initial_segment, for ncells={1,2,3}.

	* numbers.c (scm_makdbl): no malloc'ing needed, so the
 	{DEFER,ALLOW}_INTS thing removed.

	* numbers.h (struct scm_dbl): changed to represent a double cell,
 	with the number in the second half.

	* dynwind.c: changed the wind-guards representation to double
 	cell.

	* procs.c, procs.h: changed the procedure-with-setter representation
	to double cell.

	* async.c, async.h: made async representation a double cell.

	* dynl.c: made dynamic_obj representation a double cell.

2000-03-13  Gary Houston  <ghouston@arglist.com>

	* ports.c (flush_void_port): renamed to flush_port_default.
	(end_input_void_port): renamed to end_input_default.

	* init.c (scm_standard_stream_to_port): create a void port instead
	of opening /dev/null if the standard file descriptors are bad.
	advantages: no portability problems, doesn't waste a file descriptor,
	simplifies the code (thanks to Marius for the idea).

	* vports.c (s_scm_make_soft_port): call scm_port_non_buffer.

	* void ports: make reading from a void port give EOF instead of
	segv:
	* ports.c (s_scm_sys_make_void_port): modified docstring.
	(fill_input_void_port): new proc.
	(scm_init_ports): set up fill_input_void_port.
	* ports.c (scm_port_non_buffer): new proc.
	(scm_void_port): call scm_port_non_buffer.

	* fports.c (scm_setvbuf): docstring: remove the fcntl documentation
	which was incorrectly appended.

2000-03-13  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* guile-doc-snarf.in: Don't use absolute path for `sed'.  (Note
	that we can't use autoconf for this.  Autoconf itself relies on
	the existence of `sed' somewhere on your path.)  (Thanks to Dirk
	Herrman.)

2000-03-13  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* Makefile.am (libguile_la_SOURCES): Moved iselect.c here from
	EXTRA_libguile_la_SOURCES.

	* iselect.h: Always declare scm_internal_select.

	* iselect.c (scm_internal_select): Added SCM_ASYNC_TICK at the
	end.  Also let scm_internal_select be a real function also when
	not using threads.

	* __scm.h (SCM_TICK): Oops! Forgot to put SCM_ASYNC_TICK here...

2000-03-13  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* __scm.h (SCM_ALLOW_INTS, SCM_REALLOW_INTS): Removed call to
	SCM_ASYNC_TICK.  (This is a preparation for POSIX threads support,
	and kind of an experiment: Will this cause problems?)

Sun Mar 12 13:26:30 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* Makefile.am: Added *.doc to DISTCLEANFILES.

2000-03-12  Gary Houston  <ghouston@arglist.com>

	* fports.c (scm_fdes_to_port): call fcntl F_GETFL to test that
	the fdes is valid before doing anything else.  check that
	the file descriptor supports the modes required.
	(scm_fport_buffer_add): don't throw an error if fstat doesn't
	work: just use the default buffer size.

	* throw.c: change an outdated comment about scm_internal_catch
	BODY: it doesn't take a jumpbuf arg.

	* init.c (scm_standard_stream_to_port): install a handler in case
	scm_fdes_to_port throws an error.  don't check here whether the
	file descriptor is valid, since scm_fdes_to_port will do that.
	set the revealed count depending on whether the port got the
	standard file descriptor.
	(stream_body_data): new type.
	(stream_body, stream_handler): new procs.

2000-03-12  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* stacks.c, stacks.h, struct.c, tags.h, unif.c (scm_bits_t):
	Renamed from SCMWORD.

	* tags.h (SCM_NCELLP): Removed (SCMWORD).

	* arbiters.c (SCM_ARB_LOCKED): Use SCM_UNPACK_CAR.

	* async.c, boolean.h, debug.c, dynl.c, dynwind.c, eval.c, eval.h,
	  feature.h, filesys.h, fluids.h, fports.c, fports.h, gc.c, gc.h,
	  hash.c, keywords.h, macros.c, numbers.c, numbers.h, objects.c,
	  objects.h, options.c, pairs.h, ports.c, ports.h, print.c,
	  procs.h, ramap.c, read.c, smob.c, smob.h, srcprop.h, stacks.c,
	  stacks.h, strports.c, struct.c, struct.h, tag.c, tags.h,
	  throw.c, unif.c, unif.h, variable.h, vectors.h, weaks.c,
	  weaks.h (SCM_PACK, SCM_UNPACK, SCM_UNPACK_CAR): Renamed from
	  SCM_ASSCM, SCM_ASWORD, SCM_CARW).

	* numbers.h (SCM_SRS, SCM_INUM): Corrected SCM_ASSCM/ASWORD fixes.

	* alist.c, eval.c, net_db.c, posix.c, print.c, snarf.h, struct.c,
	tags.h: Fixed copyright notices.

	* struct.c, coop-threads.c: SCM_ASSCM/ASWORD fixes.

2000-03-12  Marius Vollmer  <mvo@zagadka.ping.de>

	* init.c (scm_standard_stream_to_port): Check whether the file
	descriptor is valid and substitute "/dev/null" when not.

2000-03-12  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* coop-defs.h (struct timespec): Conditionally defined.

	* coop.c (coop_condition_variable_timed_wait_mutex): Use ETIMEDOUT
	instead of ETIME.

	* readline.c (match_paren): Bugfix: First arg to select is not
	number of descriptors but the number of the highest descriptor +
	1.

	This is a preliminary attempt at a cleanup of the threads support
	code.  It moves things to better places, makes arguments more
	consistent with the POSIX API (which is used in GNOME's glib), and
	adds new functionality.

	* readline.c (scm_init_readline): Added new arg to scm_init_mutex.

	* coop-defs.h (scm_mutex_trylock): New macro: alias for
	coop_mutex_trylock.
	(scm_cond_init): Changed definition to
	coop_new_condition_variable_init.

	* coop.c: #include <errno.h>
	(coop_timeout_qinsert): Moved here from iselect.c
	(coop_new_mutex_init, coop_new_condition_variable_init): New
	functions.  The strange names are temporary.  Use scm_mutex_init
	and scm_cond_init instead.
	(coop_mutex_trylock): New function.  Uses errno.h:EBUSY.  errno.h
	is ANSI C, but should we check for individual error codes in
	configure.in?
	(coop_condition_variable_timed_wait_mutex): New function.
	(coop_key_create, coop_setspecific, coop_getspecific,
	coop_key_delete): New functions.

	* iselect.c (coop_timout_qinsert): Moved to coop.c

2000-03-11  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* pairs.h (SCM_SETAND_CAR, SCM_SETAND_CDR, SCM_SETOR_CAR,
	SCM_SETOR_CDR): Corrected SCM_ASSCM/WORD fixes.

	* tags.h (SCM_VOIDP_TEST): Renamed from VOIDP_TEST.
	Layout cleanups.

	* objects.h (SCM_CLASS_FLAGS, SCM_OBJ_CLASS_FLAGS,
	SCM_SET_CLASS_INSTANCE_SIZE), struct.h (SCM_STRUCT_VTABLE_DATA),
	proc.h (SCM_CLOSCAR): SCM_ASSCM/WORD fixes.

	* eval.c (scm_lookupcar1): Inserted SCM_ASWORD in expressions
	dealing with ilocs.

2000-03-11  Dale P. Smith  <dpsm@en.com>, applied by Greg J. Badros, <gjb@cs.washington.edu>

        * numbers.c (scm_copy_big_dec, scm_copy_smaller, scm_big_ior,
        scm_big_xor, scm_big_and, scm_big_test): Added new lowlevel bignum
        logical functions from SCM.

        (logand, logior, logxor, logtest, logbit?): Extended scheme
        logical functions to use bignums from SCM.

        (lognot): Removed call to `SCM_VALIDATE_INUM' that prevented
        lognot from using bignums.

Thu Mar  9 11:33:25 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* vectors.h (SCM_VELTS_AS_STACKITEMS): Added this macro to help in
	eliminating some warnings.

	* unif.c, strports.c, print.c, options.c: Fix some warnings on
 	mis-use of SCM/long

	* gc.c, gc.h: Added scm_return_first_int(), and added comment re:
 	what the scm_return_first* functions do.

2000-03-09  Han-Wen Nienhuys  <hanwen@cs.uu.nl>, applied by Greg J. Badros, <gjb@cs.washington.edu>

       * libguile/*.[ch]: make a distinction between SCM as a generic
       name for a Scheme object (now a void*), and SCM as 32 bit word for
       storing tags and immediates (now a long int).  Introduced
       SCM_ASWORD and SCM_ASSCM for conversion. Fixed various dubious
       code in the process: arbiter.c (use macros), unif.c (scm_array_p),

Wed Mar  8 10:15:59 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* numbers.c:  Use SCM_VALIDATE_LONG_COPY, and longs, not ints, in
	various logXXX primitives.  Thanks Eric Moore!

Tue Mar  7 08:05:22 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* run-test, remaining-docs-needed:  Added these scripts.  The
	second one is only temporary until the docstring additions are
	complete.   run-test may best live on, but is here mostly for
	convenience and awareness for now.

	* hash.c: Docs, minor cleanup patch from Dirk Herrman.

Thu Mar  2 16:06:58 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* error.h, error.c: Added `scm_wrong_type_arg_msg' to support
 	displaying the expected type.  Use SCM_LISTn in a couple places
	instead of scm_cons-ing by hand.

	* __scm.h: Added SCM_ASSERT_TYPE macro.

	* validate.h, scm_validate.h: Added the former, as a renamed
	version of the latter with SCM_ASSERT_TYPE used in
	SCM_MAKE_VALIDATE (instead of just SCM_ASSERT)

	* Makefile.am: Rename scm_validate.h to validate.h.

	* *.c, *.h: Include validate.h, not scm_validate.h (old name's
	prefix was superfluous).

Thu Mar  2 15:33:12 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* hashtab.c: Improved documentation for lots of functions.  Added
	handwritten docs for `hash-fold'.

Thu Mar  2 15:13:25 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* list.c: Added hand-written docs for `del{q,v,ete}1!'.

Thu Mar  2 12:38:30 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* list.c: Moved append docs to append! Thanks Dirk Hermann.  Also,
	added append docs from R4RS.

	* strings.c: Docstring typo fix, + eliminate unneeded IMP tests.
	Thanks Dirk Hermann!

	* chars.h: Provide SCM_CHARP, SCM_CHAR, SCM_MAKE_CHAR and
	deprecate SCM_ICHRP, SCM_ICHR, SCM_MAKICHR.  Thanks Dirk Hermann!

	* *.h, *.c: Use SCM_CHARP, SCM_CHAR, SCM_MAKE_CHAR throughout.
	Drop use of SCM_P for function prototypes... assume an ANSI C
	compiler.  Thanks Dirk Hermann!

Sat Feb 19 12:20:12 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* ports.c: Made `set-port-column!' and `set-port-line!' each
	return SCM_UNSPECIFIED instead of a (not-scheme-object) integer
	that caused a seg fault.  Also fixed `set-port-column!'s
	docstring.  Thanks Han-Wen Nienhuys for finding the bug!

Sun Feb 13 19:11:42 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* arbiters.c, eq.c, gc.c, guardians.c, list.c, ports.c, print.c,
	regex-posix.c, scmsigs.c, stime.c, strings.c, variable.c, stime.c,
	strings.c, variable.c:  Added lots of documentation, cleaned up
	some existing documentation.  Occasionally changed formal params
	to match docs.  Also folded an #ifdef into the inners of a
	primitive instead of having two copies of the primitive
	(`get-internal-real-time', from stime.c)

Sun Feb 13 18:12:19 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* ports.c: Added docs for primitives missing them.  Written by
	hand.

Sun Feb 13 09:40:36 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* guile-doc-snarf.in: Use ${AWK} -f guile-func-name-check, not
	just execing guile-func-name-check.  Thanks Michael Livshin!

Thu Feb 10 11:43:23 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* guile-snarf.awk.in: Tweak to work with Sun/HP awk, removed some
	dead code.  Patch from Michael Livshin.

	* guile-doc-snarf.in: Tweak to work with Sun/HP sh.  Patch from
	Michael Livshin.

2000-02-09  Gary Houston  <ghouston@arglist.com>

	* init.c (scm_init_standard_ports): when stdout is a tty, make the
	current-output-port unbuffered by default.  this is less confusing
	for interactive use.  it was line-buffered because of a
	performance problem with unbuffered ports, but I think it will be
	OK now.

2000-02-08  Gary Houston  <ghouston@arglist.com>

	* __scm.h: don't define long_long or ulong_long if HAVE_LONG_LONGS
	is not defined.

	* stime.c (scm_localtime, scm_mktime): if neither HAVE_TM_ZONE nor
	HAVE_TZNAME are defined, use an empty string instead of giving two
	spurious compile-time errors.

Tue Feb  8 13:57:46 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* ports.c: Doc patches from Richard Kim.  Pasted from MIT Scheme.
	Thanks Richard!

Mon Feb  7 09:07:31 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* macros.c: Doc patches from Richard Kim.  Pasted from scm.texi.

Sun Feb  6 20:26:21 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* pairs.c: Doc patches from Richard Kim.  Pasted from MIT Scheme
	(which is GNU GPL'd).

2000-01-31  Gary Houston  <ghouston@arglist.com>

	* strings.h: don't use SCM_P.  don't include <string.h>.
	* error.c, gh_data.c, ports.c, script.c, strop.c: include <string.h>.

	* strings.c (scm_string_ref): make the 2nd argument compulsory.
	previously it defaulted to zero for no good reason that I can see.
	use a local variable for SCM_INUM (k).  replace
	SCM_VALIDATE_INUM_DEF with SCM_VALIDATE_INUM_COPY.

	(scm_makfromstr): cosmetic changes.

	(scm_string): Accept only chars in the list, not strings, for
	conformance to R5RS (particularly for list->string, which is
	supposed to be the inverse of string->list.)  remove
	SCM_DEFER_INTS/SCM_ALLOW_INTS, which is unnecessary since
	scm_makstr handles the cell allocation.  when reporting wrong-type
	arg, don't report the position as 1.

	* posix.c (scm_init_posix): intern PIPE_BUF if it's defined.

2000-01-29  Gary Houston  <ghouston@arglist.com>

	* posix.c (scm_pipe): rewrote the docstring.

	* filesys.c (scm_select, retrieve_select_type, get_element,
	fill_select_type, set_element): modified so that Scheme
	"select" tests port buffers for the ability to provide input
	or accept output.  Previously only the underlying file descriptors
	were checked.  Rewrote the docstring.

Thu Jan 27 10:14:25 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* vectors.c, symbols.c, strorder.c: Documentation cut and pasted
 	from Gregg Reynolds.  Thanks Gregg!

Thu Jan 27 09:59:38 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* strop.c (scm_i_index): Obfuscated commented-out SCM_DEFINE by
	adding "x" prefix to the line so that guile-func-name-check
	doesn't complain unnecessarily.

Wed Jan 26 17:33:52 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* throw.c: Factor out an #ifdef/#else/#endif choice more finely
	for maintainability.

	* strop.c: Documentation added by Gregg A. Reynolds.   Pasted in
	from qdocs, RnRs.

Wed Jan 26 10:02:11 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* tag.c:  Added doc for `tag', but mark as deprecated since Mikael
	suggests removing tag.c altogether (and using a new `class-of'
	instead).

	* strings.c:  Added documentation from Gregg A. Reynolds.  Edited
	a bit by me to use FOO instead of @var{foo} and to have the
	summary come before preconditions on input.  Also dropped trailing
	(rnrs) note.

	* gsubr.c: Do not use SCM_DEFINE for `gsubr-apply'. Register the
 	function with scm_make_subr_opt w/ last arg of 0 so it is not
 	visible at the Scheme level. Mikael says that this is the right
 	thing because the first arg to the proc is the guts of a compiled
 	closure and shouldn't be exposed to the Scheme level.

Tue Jan 25 17:15:47 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* sort.c: typo in comment fixed.

	* keywords.c: Added documentation.

	* guardians.c: Added documentation (could be better).

	* gc.c: Added docs for gc-set-debug-check-freelist.

	* eq.c: Added docs for eq?, eqv? equal? abridged from R4RS.

	* boolean.c: Added docs for `not', `boolean?' (by hand).

Tue Jan 25 13:28:56 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* random.c: Added documentation, from SLIB page:
	http://angela.ctrl-c.liu.se/~calle/scheme/slib_toc.html

Mon Jan 24 17:50:20 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* variable.c, version.c:  Added documentation, written by hand
	since I could not find anything already written that was
	relevant.

2000-01-23  Gary Houston  <ghouston@arglist.com>

	* filesys.c (scm_chown): omit port/fdes support if HAVE_FCHOWN is
	not defined (thanks to Richard Y. Kim).

Thu Jan 20 13:00:38 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* Makefile.in: Removed, this is auto-generated.

Thu Jan 20 11:33:47 2000  Dirk Hermann <dirk@ida.ing.tu-bs.de> --applied 01/20/00 gjb

	* list.c: Put some variable initialization code at the point of
	declaration; Added a comment for list*; Formatting changes.

	* load.c: use SCM_NNULLP to make sure the end of a list is not
	reached yet.

2000-01-18  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* backtrace.c (scm_display_error_message): Bugfix: Don't use
	result of scm_list_p as C boolean.
	(scm_display_error_message, scm_set_print_params_x): Use new
	validation macros. (Thanks to Dirk Herrmann.)

	* net_db.c (scm_resolv_error): Cast result from hstrerror.

	* strports.c (st_end_input): Inserted parenthesis to get operator
	grouping correct.

	* list.h (scm_init_list): Removed SCM_P around prototypes.

	* fports.c, list.c, numbers.c, ports.c, stime.c, symbols.c,
	filesys.c, posix.c: Converted docstrings to ANSI C format and
	escaped " occurring inside string literals.

Tue Jan 18 13:21:08 2000  Mikael Djurfeldt  <mdj@r11n07-s.pdc.kth.se>

	* posix.c (scm_mknod): Escape " occuring inside docstring.

2000-01-18  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* alist.c, chars.c, debug.c, dynl.c, dynwind.c, error.c, eval.c,
	   evalext.c, filesys.c, gc.c, hash.c, hashtab.c, ioext.c,
	   keywords.c, list.c, load.c, macros.c, net_db.c, numbers.c,
	   objprop.c, ports.c, posix.c, print.c, procprop.c, procs.c,
	   ramap.c, regex-posix.c, root.c, scmsigs.c, simpos.c, socket.c,
	   stacks.c, stime.c, strings.c, strop.c, strports.c, struct.c,
	   symbols.c, throw.c, unif.c, vectors.c, version.c, vports.c,
	   weaks.c: Converted docstrings to ANSI C format.

	* filesys.c (scm_chmod), simpos.c (scm_system), version
	(scm_version), vports (scm_make_soft_port): Escape " occuring
	inside docstring.

Mon Jan 17 11:41:22 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* scm_validate.h: Added SCM_VALIDATE_ULONG_COPY,
	SCM_VALIDATE_LONG_COPY

	* numbers.c: Use SCM_VALIDATE_ULONG_COPY, instead of
	SCM_VALIDATE_INUM_COPY to let bigger numbers be used.  Rename a
	couple of formal arguments (and fix their uses) to make arguments
	match the documentation.

2000-01-14    <mstachow@alum.mit.edu>

	* Makefile.am: Augment path when running guile-doc-snarf so
	guile-func-name-check is found.

Fri Jan 14 09:34:55 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* scm_validate.h (SCM_NUM2LONG_DEF): Fix this macro to just use
	def, not SCM_MAKINUM(def);  thanks Janis Bzerins!

Wed Jan 12 00:06:53 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* net_db.c (s_scm_inet_makeaddr): Use SCM_NUM2ULONG since that's
	the way guile-1.3.4 worked, but #if 0 out the version using
	SCM_VALIDATE_INUM_COPY for stricter testing.

Tue Jan 11 18:24:18 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* guile-doc-snarf.in: Use new $fullfilename for running
	guile-func-name-check, and put "$fullfilename" and "$filename" in
	quotes at uses to make sure re-splitting on whitespace does not
	occur (so filenames w/ embedded whitespace would work okay, though
	I sure hope we never have to deal with that! :-) ).  Thanks to
	Mikael for pointing out the source_dir != build_dir was broken.

Tue Jan 11 17:42:40 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* scm_validate.h: Added SCM_NUM2LONG_DEF macro.  Make
	SCM_OUT_OF_RANGE use SCM_MAKINUM, not scm_long2num.  Added
	SCM_COERCE_ROSTRING macro.  Added SCM_VALIDATE_NONEMPTYLIST
	macro.  Fix SCM_VALIDATE_STRINGORSUBSTR macro to not use SLOPPY
	variants.

	* ports.c (scm_port_closed_p): Validate that the arg is a PORT,
	then return whether it's an open port (was validating that it was
	an open port -- this was a bug I introduced back in December, but
	my careful reading of diffs caught it).

	* numbers.c: Recombine the two conditional-compilation paths for
	all the log* primitives -- they were split based on #ifndef
	scm_long2num;  factored out a SCM_LOGOP_RETURN macro, and fixed
	some bugs and inconsistencies in the two sets of implementations.
	(scm_lognot) Fixed *atrocious* re-use of a SCM as an integer!

	* ioext.c: Use SCM_ASSERT_RANGE in a couple places, and
	SCM_VALIDATE_INUM_COPY once where it should've been used.

	* fluids.c (scm_internal_with_fluids): Use
	SCM_VALIDATE_LIST_COPYLEN.

	* filesys.c: Use SCM_NUM2LONG instead of SCM_VALIDATE_INUM_COPY;
	this is questionable as it relaxes type safety, but other changes
	were useful and all SCM_NUM2LONG's should probably be
	revisited. Use SCM_OUT_OF_RANGE, SCM_WRONG_TYPE_ARG.

	* evalext.c: line-break change on 1 line.

	* eval.c (nconc2last): Takes a non-empty list as its first
	argument, not just a list.

	* dynl.c: Use new SCM_COERCE_ROSTRING macro.

Tue Jan 11 15:44:23 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* dynl.c, feature.c, filesys.c, fports.c, list.c, load.c,
 	net_db.c, sort.c, stacks.c, unif.c: Use SCM_WTA, SCM_MISC_ERROR
 	where possible.

	* symbols.c (scm_sysintern0): Fixed the function name in a
	scm_misc_error invocation.

	* print.c (scm_simple_format): Do not need SCM_COERCE_SUBSTR, and
	use scm_return_first to ward off latent GC bug that Mikael caught.

	* async.c: Use SCM_VALIDATE_ASYNC_COPY one place where it wasn't
	used before but should've been.

2000-01-12  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* snarf.h (SCM_PROC1): Replaced SCM (*) (...) with
	SCM_FUNC_CAST_ARBITRARY_ARGS.

Tue Jan 11 13:44:07 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* guile-func-name-check.in: Added this script to statically check
	#define FUNC_NAME, #undef FUNC_NAME in the source.

	* sort.c, posix.c: Fix #undef FUNC_NAME lines to not have trailing
	redundant comment, semicolon; caught by new guile-func-name-check
	script.

	* debug.c: Fix mistaken #define FUNC_NAME for scm_make_iloc.
	Caught by new guile-func-name-check-script.

	* Makefile.am: Added guile-func-name-check to bin_SCRIPTS

	* ramap.c: Fix #if 0'd out code to be syntactically acceptable to
	guile-func-name-check.

	* guile-doc-snarf.in: Run guile-func-name-check on the file before
	doing the snarf.

Tue Jan 11 11:31:10 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* fports.c, ports.c, ports.h, strports.c, vports.c: Make write
 	port function take const void*, not void*.

Tue Jan 11 11:18:07 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* scm_validate.h, chars.c, ports.c, print.c, read.c, strings.c,
 	strop.c: Use SCM_VALIDATE_ICHR, SCM_VALIDATE_ICHR_COPY instead of
 	SCM_VALIDATE_CHAR, SCM_VALIDATE_CHAR_COPY.  Change made for
 	consistency with the other macros dealing with immediate
 	characters.  (Similar to INT -> INUM change a week or so ago).

Tue Jan 11 10:41:46 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* dynl.c, error.c, eval.c, feature.c, filesys.c, fports.c, list.c, load.c,
 	net_db.c, read.c, socket.c: Update error messages to use ~A for
 	%s, ~S for %S to work with new `simple-format' format and be
 	standardized better.

	* print.h, print.c (scm_simple_format): Added `simple-format'
	primitive.  It's the old scm_display_error, with ARGS now a rest
	parameter, and the destination first instead of last (and a couple
	new capabilities inspired by `format' -- #t as destination means
	current-output-port, #f means return the formatted text as a
	string.

	* gh.h, gh_data.c, ports.h, ports.c: Added some missing const specifications.

	* backtrace.c (scm_display_error_message): Rewrote to use
	scm_simple_format() procedure.

	* __scm.h: Added commented-out #define of GUILE_DEBUG_FREELIST

2000-01-09  Marius Vollmer  <mvo@zagadka.ping.de>

 	Finally applied the libltdl patch from Thomas Tanner, with slight
	modifications.

	* DYNAMIC-LINKING: Removed because it is obsolete.
	* dynl.c: Use ANSI prototypes.
	(sysdep_dynl_link): Use lt_dlopenext instead of lt_dlopen.
	* scmconfig.h.in: Do not change, as it is automatically generated.

    1999-07-25  Thomas Tanner  <tanner@ffii.org>

	    * dynl-dl.c, dynl-dld.c, dynl-shl.c, dynl-vms.c: deleted
	    (obsolete)
	    * Makefile.am: likewise, add INCLTDL (libltdl headers) to
	    INCLUDES, set dlpreopened files in LDFLAGS, link libguile
	    against libltdl
	    * dynl.c: use libltdl if DYNAMIC_LINKING is enabled,
	    * guile.c: register preloaded modules
	    * scmconfig.h.in: remove obsolete symbols

2000-01-09  Gary Houston  <ghouston@arglist.com>

	* These changes should make it unnecessary to call tzset from
	Scheme after modifying the TZ environment variable, even if the
	system date facilities cache the value.
	* stime.c (setzone, scm_localtime): added comments.
	(tzset): don't define a noop tzset macro if HAVE_TZSET not defined.
	(setzone): don't call tzset.
	(restorezone): call tzset only if HAVE_TZSET is defined.
	(scm_tzset): don't define if HAVE_TZSET not defined.  Change the
	doc string to indicate that this procedure isn't likely to do
	anything useful.
	(scm_localtime, scm_strftime, scm_mktime): call tzset if
	LOCALTIME_CACHE is defined.

2000-01-09  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* posix.c (scm_sync): Return SCM_UNSPECIFIED.

2000-01-09  Gary Houston  <ghouston@arglist.com>

	* eval.c: define scm_unbound_variable_key ('unbound-variable).
	scm_lookupcar1: throw an error with key 'unbound-variable instead
	of 'misc-error when an unbound variable is encountered.

	* filesys.c (scm_mkdir, scm_rmdir, scm_getcwd, scm_select,
	scm_symlink, scm_readlink, scm_lstat),
	posix.c (scm_setpgid, scm_setsid, scm_ctermid, scm_tcgetpgrp,
	scm_tcsetpgrp, scm_uname, scm_setlocale, scm_mknod, scm_nice,
	scm_sync),
	simpos.c (scm_system),
	stime.c (scm_times, scm_strptime):
	move the HAVE_XXX feature tests out of the procedure bodies.
	don't use SCM_SYSMISSING.
	scm_validate.h (SCM_SYSMISSING): removed.
	error.h, error.c (scm_sysmissing): comment that this is deprecated.
	see ChangeLog entry for 1999-12-28.

Sat Jan  8 19:52:04 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* scm_validate.h (SCM_VALIDATE_BOOL_COPY): Fix typo.

Sat Jan  8 17:06:46 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* backtrace.c: Fix spelling typo in a comment.

	* snarf.h: Use new SCM_DOCS macro to encapsulate the non SCM_INIT
 	text.  Reformatted some of the expansions.

Fri Jan  7 15:50:46 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* scm_validate.h (SCM_OUT_OF_RANGE): Use scm_out_of_range_pos to
	report the position of the argument.

	* error.h, error.c (scm_out_of_range_pos):  Added this function to
	take extra "pos" argument, the position number of the errant
	argument.

	* debug.c: Use SCM_OUT_OF_RANGE instead of scm_out_of_range.

	* snarf.h: Use SCM_HERE and SCM_INIT as names, not SCM_NOTSNARF
	and SCM_SNARFING.  Also put the %%% in the SCM_INIT since Mikael
	prefers that and I'm reasonably indifferent.

Fri Jan  7 15:03:32 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* snarf.h: Factor out differences between C++ and non-C++ into
	SCM_FUNC_CAST_ARBITRARY_ARGS macro.  Modify all the snarf macro
	definitions to use SCM_NOTSNARF and SCM_SNARFING macros (like
	Mikael's macros, below, but changed names and SCM_SNARFING no
	longer expands to include %%% -- that must appear in the argument
	so that the token appears at the call-site as a reminder).

2000-01-07  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* snarf.h (SCM_INSITU, SCM_INIT): New snarf macros for use in user
	snarf macro definitions.

2000-01-06  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* chars.c (scm_integer_to_char): Use Greg's nice
	SCM_VALIDATE_INUM_RANGE macro for argument checking for closer
	adherence to R5RS.

Thu Jan  6 11:48:49 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* *.c, snarf.h: Replace GUILE_PROC1 with SCM_DEFINE1 throughout.

Thu Jan  6 11:22:53 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* Makefile.am (ETAGS_ARGS): Switch to SCM_DEFINE, SCM_DEFINE1
	instead of GUILE_PROC.

Thu Jan  6 11:21:49 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* alist.c: Do not report mismatch errors on some uses of `tmp' (do
	this by using SCM_ARG2 instead of `2' in the SCM_VALIDATE_CONS
	macro call.

Thu Jan  6 09:54:33 2000  Dirk Herrmann <dirk@ida.ing.tu-bs.de> --gjb applied

	* scm_validate.h: Remove some redundant NIMP tests.

	* alist.c: minimize scope of the tmp variables, and initialize
 	them when declared. The strange SCM_NIMP tests are replaced by
 	SCM_CONSP tests that more closely reflect the intended semantics.
  	However, we don't get a performance penalty here, because the
 	SCM_CONSP test was performed by the ALISTCELL test anyway.  * The
 	extremely ugly use of ASRTGO macros was removed: The calls to
 	ASRTGO were not encapsulated by "#ifndef SCM_RECKLESS", but got a
 	label parameter that only exists when SCM_RECKLESS is not defined.
  	This works, because ASRTGO itself is defined in a way that it only
 	makes use of the label parameter if SCM_RECKLESS is not defined
 	(shudder!).  Does guile make at all use of the possibility to
 	define SCM_RECKLESS?  * Codesize is likely to be reduced, since
 	instead of two calls to SCM_ASSERT performed by the ALISTCELL test
 	we now only get one test.

	* list.c: Use SCM_NNULLP, not SCM_NIMP as appropriate.  Also use
 	SCM_NULLP instead of SCM_IMP.  Drop use of "register" keyword on
 	some variables in `list?'.  Fix `reverse' and `reverse!'
 	primitives to handle improper lists better.

Wed Jan  5 11:24:53 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* *.[ch]: Whitespace changes -- added space after SCM_VALIDATE_*
 	macros and SCM_DEFINE macros to match GNU coding standards.

Wed Jan  5 11:04:24 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* *.[ch]: Replace GUILE_PROC w/ SCM_DEFINE.

Wed Jan  5 10:59:06 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* *.[ch]:  Replace SCM_VALIDATE_INT w/ SCM_VALIDATE_INUM for
	better consistency with the names of other SCM_VALIDATE_ macros
	and better conformance to guile naming policy.

Wed Jan  5 10:50:39 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* ports.c (s_scm_close_all_ports_except): Use SCM_ARG1 in a
	SCM_VALIDATE instead of 1 to avoid a check on the argument (since
	it's not the actual name of the formal).

	* guile-snarf.awk.in: Do argument/number mismatch checking and
	print warnings in an Emacs compile-mode parseable format.

	* struct.c: Use SCM_ASSERT_RANGE instead of SCM_ASSERT w/
	SCM_OUTOFRANGE as 3rd argument.

	* random.c: Fix argument/number mismatch (that I introduced :-( ).

	* __scm.h: Do not #define SCM_ARG* when snarfing;
	lets us distinguish between 1 and SCM_ARG1 when snarfing as only
	the former (using the number) requires the argument to match the
	formal in the current argument snarfing check.

	* snarf.h: Give new definition of SCM_ASSERT when in
	snarfing mode to output a lexically-identifiable sequence that the
	guile-snarf.awk script uses to verify argument/position matching.

	* ramap.c: Remove extraneous #undef FUNC_NAME.

Wed Jan  5 08:36:38 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* guile-doc-snarf.awk.in: Removed -- guile-snarf.awk.in is the
	current version of the same functionality; it writes the .x output
	to stdout instead of directly into the file.

Wed Jan  5 08:15:04 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* unif.c, symbols.c, strings.c, stacks.c, random.c, print.c,
	posix.c:  Eliminated a bunch of SCM_NIMP(..)s that are now
	redundant with the safer macros.  Patch from Dirk Hermann applied
	by hand. Thanks Dirk!

	* scm_validate.h: Added SCM_VALIDATE_VECTOR_OR_DVECTOR for some
	uses in random.c.

	* ramap.c: whitespace change.

Tue Jan  4 14:21:35 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* options.c, objects.c, keywords.c, gc.c: Some redundant SCM_NIMP
 	removals from Dirk Hermann.

	* alist.c: Rename formals to match the parameter names in the
	documentation, updates to documentation.  Thanks Dirk Hermann!

2000-01-04  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* eval.c (SCM_CEVAL): Reverse order of
	scm_stack_checking_enabled_p and SCM_STACK_OVERFLOW_P
	(Thanks to Brad Knotwell.)

Mon Jan  3 08:30:02 2000  Greg Harvey  <Greg.Harvey@thezone.net> (applied --01/03/00 gjb)

	* gc.c (scm_debug_newcell): Added SCM_SETCAR of the newly
	allocated cell.

	* pairs.h: Added a comment about the need for the SCM_SETCAR in
	SCM_NEWCELL macro.

Mon Jan  3 08:25:19 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* dynl-vms.c, debug.c, coop-threads.c, backtrace.c, eval.c: More
 	SCM_NIMP tests that were redundant are now eliminated.  Patches
 	from Dirk Hermann applied by hand.

The ChangeLog continues in the file: "ChangeLog-1996-1999"
