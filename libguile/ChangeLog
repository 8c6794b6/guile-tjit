2000-04-17  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* eval.c (scm_unmemocar):  Use macros to test for gloc cell.
	Minimize scope of variable 'ir'.

	* eval.h (SCM_IFRAME, SCM_IDIST), weaks.h (SCM_IS_WHVEC_ANY):
	Added missing call to SCM_UNPACK.

2000-04-17  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* validate.h (SCM_VALIDATE_INUM_RANGE_COPY,
	SCM_VALIDATE_NUMBER_COPY): New macros.

2000-04-16  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* script.c (scm_compile_shell_switches): Added --debug option.

2000-04-16  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* vectors.c (scm_vector_set_x): Return SCM_UNSPECIFIED (as
	specified by R5RS).

2000-04-15  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* ports.h (SCM_INPUT_PORT_P, SCM_OUTPUT_PORT_P): New macros.
	(SCM_INPORTP, SCM_OUTPORTP): Marked as deprecated.

	* validate.h (SCM_VALIDATE_INPUT_PORT, SCM_VALIDATE_OUTPUT_PORT):
	New macros.
	Cleanup of code layout.

	* ports.c, ports.h (close-input-port, close-output-port): New R5RS
	procedures.

2000-04-13  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* continuations.c (scm_make_cont, scm_dynthrow):  Completely
	separated implementations for defined (CHEAP_CONTINUATIONS) and
	!defined (CHEAP_CONTINUATIONS).  Also, now using memcpy for stack
	copying.

	* continuations.c (grow_stack):  Renamed from grow_throw.

	* continuations.c (copy_stack_and_call):  New static function.

	* continuations.c (scm_dynthrow):  Simplified and made static.

	* continuations.h (scm_dynthrow):  Made static.

2000-04-13  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* unif.c, unif.h (shared-array-root, shared-array-offset,
	shared-array-increments): New primitives.

2000-04-12  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* gc.c (scm_gc_sweep):  Simplify the computation of freed memory
	size for msymbols.

	* symbols.h (SCM_SLOTS, SCM_SYMBOL_FUNC, SCM_SYMBOL_PROPS,
	SCM_SYMBOL_HASH):  The msymbol slots are now a field of scm_bits_t
	values.

	* symbols.h (SCM_SET_SYMBOL_FUNC, SCM_SET_SYMBOL_PROPS):  New
	macros.

	symbols.c (scm_intern_obarray_soft, msymbolize, scm_symbol_fset_x,
	scm_symbol_pset_x):  Use them.

	* symbols.c (scm_symbol_hash):  Unpack to access SCM raw data. 

2000-04-12  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* ports.c (scm_port_print):  The port data is read as raw data.

	* ports.h (SCM_TC2PTOBNUM, SCM_PTOBNUM):  Fix SCM/scm_bits_t
	mismatch.

2000-04-11  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* eval.c (SCM_CEVAL), objects.c (scm_mcache_lookup_cmethod,
	scm_make_subclass_object), objects.h (SCM_CLASS_FLAGS,
	SCM_ENTITY_PROCEDURE, SCM_ENTITY_SETTER), struct.c
	(scm_struct_init, scm_struct_vtable_p, scm_make_struct,
	scm_struct_ref, scm_struct_set_x), struct.h (SCM_STRUCT_DATA):
	The struct data is now an array of scm_bits_t variables.

	* objects.h (SCM_SET_ENTITY_PROCEDURE):  New macro.

	objects.c (scm_set_object_procedure_x):  Use it.

	* struct.c (scm_struct_init):  Unused variable 'data' removed.

	(scm_struct_vtable_p):  Redundant SCM_IMP tests removed.

2000-04-11  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* objects.h (SCM_OBJ_CLASS_FLAGS, SCM_OBJ_CLASS_REDEF), struct.h
	(SCM_STRUCT_VTABLE_DATA, SCM_STRUCT_LAYOUT, SCM_STRUCT_VTABLE,
	SCM_STRUCT_PRINTER):  The struct vtable data is now an array of
	scm_bits_t variables.

	* struct.h (SCM_SET_STRUCT_LAYOUT):  New macro.

	struct.c (scm_make_vtable_vtable):  Use it.

2000-04-11  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* symbols.c (scm_sym2vcell, scm_sym2ovcell_soft, scm_sym2ovcell,
	scm_intern_obarray_soft, scm_sysintern0,
	scm_string_to_obarray_symbol, scm_intern_symbol,
	scm_unintern_symbol, scm_symbol_binding, scm_symbol_interned_p,
	scm_symbol_bound_p, scm_symbol_set_x):  Don't use C operators to
	compare SCM values.

2000-04-11  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* numbers.c (scm_quotient, scm_modulo):  Reordered to handle the
	case of immediate numbers parameters first.  Also, only use
	decoded numbers for numerical comparison.
	
2000-04-10  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* objects.h: Don't redeclare scm_call_generic_0 and
	scm_apply_generic.  (Thanks to Tal Tversky.)

2000-04-10  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* hash.c (scm_hasher):  Use symbolic names for the tc3 constants.
	Unpack SCM value to use it as a switch parameter.  Don't cast SCM
	values to int values.

2000-04-10  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* coop.c (mother): Handled EINTR (the wait has been interrupted by
	a signal).

2000-04-07  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* __scm.h (SCM_WTA_DISPATCH_[012n]):  To test whether a SCM value
	contains a raw zero value it has to be unpacked.

	* debug.c (with_traps_inner, scm_with_traps):  Passing SCM values
	via void * requires unpacking / packing.

	* stacks.h (SCM_STACKP):  Remove unnecessary SCM_NIMP test and use
	SCM_EQ_P to compare SCM values.

	* stacks.h (SCM_FRAME_VOID_P, SCM_FRAME_REAL_P, SCM_FRAME_PROC_P,
	SCM_FRAME_EVAL_ARGS_P, SCM_FRAME_OVERFLOW_P):  Remove unnecessary
	call to SCM_UNPACK.

	* tags.h (SCM_NECONSP):  Define in terms of SCM_ECONSP

	* tags.h (SCM_ECONSP):  Clarify the test for glocs.  This is still
	quite ugly.

2000-04-05  Michael Livshin  <mlivshin@bigfoot.com>

	* async.[ch]: unexpose low-level async access macros (thanks to
 	Dirk Herrmann).

	* validate.h: move async validation macros to async.c (nobody else
 	needs them anyway), and rename them.

2000-04-04  Michael Livshin  <mlivshin@bigfoot.com>

	* async.h: kill the scm_async_t struct.  having a heap cell
 	pretending to be a C struct is not helthy, and is not needed here
 	anyway, as asyncs happily fit in one heap cell.

	* async.c: reflect the fact that asyncs are now represented by
 	single heap cell each.

2000-04-04  Gary Houston  <ghouston@arglist.com>

	* error.c (scm_syserror): save errno before doing anything else,
	since it's used in two expressions and may get mutated (thanks to
	Dirk Herrmann).

2000-04-04  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* debug.c (scm_procedure_source, scm_procedure_environment),
	gsubr.c (scm_make_gsubr_with_generic, scm_gsubr_apply), procs.c
	(scm_procedure, scm_setter):  Return valid scheme value as dummy.

	* filesys.c (scm_readdir, scm_rewinddir, scm_closedir,
	scm_dir_print, scm_dir_free), numbers.h (SCM_COMPLEX_REAL,
	SCM_COMPLEX_IMAG), regex-posix.h (SCM_RGX), throw.c (JBJMPBUF,
	SETJBJMPBUF, JBJMPBUF, SETJBJMPBUF, freejb, print_lazy_catch,
	scm_ithrow), unif.c (scm_uniform_vector_ref, scm_cvref,
	scm_array_set_x, rapr1), unif.h (SCM_ARRAY_V, SCM_ARRAY_BASE),
	vectors.h (SCM_VELTS, SCM_VELTS_AS_STACKITEMS, SCM_SETVELTS):  Use
	SCM_{SET_}?CELL_WORD* to access cell entries with raw data.

	* filesys.c (scm_closedir), numbers.c (scm_addbig), numbers.h
	(SCM_SETNUMDIGS), throw.c (JBACTIVE, SCM_JBDFRAME,
	SCM_SETJBDFRAME): Read and modify data bits in cell entry #0 using
	SCM_{SET_}?CELL_WORD_0.

	* filesys.c (fill_select_type, retrieve_select_type, scm_select),
	numbers.c (scm_gcd, scm_lcm, scm_integer_expt, scm_zero_p,
	scm_product, scm_divide), posix.c (scm_getgrgid), ramap.c
	(scm_array_fill_int, racp), throw.c (scm_catch, scm_lazy_catch,
	scm_ithrow), unif.c (scm_make_uve, scm_array_p,
	scm_transpose_array, scm_array_set_x, scm_bit_set_star_x,
	scm_bit_count_star, l2ra), variable.c (prin_var,
	scm_make_variable, scm_make_undefined_variable,
	scm_builtin_variable), vectors.c (scm_vector_set_length_x),
	vports.c (sf_flush, sf_close):  Don't use C operators to compare
	SCM values.

	* numbers.c (scm_odd_p, scm_even_p), variable.c (prin_var):  Must
	unpack SCM values to access their raw contents.

	* numbers.c (big2str):  Eliminate unnecessary casts to SCM.

	* numbers.h (SCM_NEWREAL), regex-posix.h (SCM_RGXP), vports.c
	(scm_make_soft_port):  Use SCM_{SET_}?CELL_TYPE to access the cell
	type information.

	* throw.c (printjb):  Eliminated unnecessary unpack.

	* variable.c (make_vcell_variable):  Smob data is of type
	scm_bits_t.

2000-04-04  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* print.c: Removed promise to rewrite printer code before next
	release.  :)

2000-04-03  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* iselect.c (add_fd_sets): Insert empty statement after label.
	(Thanks to Tim Mooney.)

2000-04-03  Michael Livshin  <mlivshin@bigfoot.com>

	* guardians.c (scm_guardian_zombify): mark all zombies in a
 	separate loop after processing all the currently known live
 	guardians, so as to not introduce order dependencies (thanks to
 	Gary Houston).  note that the order problems are still there if
	some guardians are themselves zombies, but that's a sick case that
	I'm not going to worry about.
	also, make another outer loop to process zombified
 	guardians (which are uncovered while marking zombies).

2000-04-03  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* evalext.c (scm_definedp, scm_m_undefine), gc.c
	(scm_mark_weak_vector_spines, scm_gc_sweep), hashtab.c
	(scm_hashq_ref, scm_hashv_ref, scm_hash_ref, scm_hashx_ref),
	keywords.c (scm_make_keyword_from_dash_symbol), lang.c
	(scm_nil_eq), lang.h (SCM_NILP, SCM_NIL2EOL), load.c
	(scm_primitive_load), modules.c (scm_module_full_name), objects.c
	(scm_class_of, scm_mcache_lookup_cmethod, scm_make_class_object),
	ports.c (scm_close_all_ports_except), ports.h (SCM_EOF_OBJECT_P),
	print.c (scm_iprin1, scm_prin1, scm_iprlist, scm_simple_format),
	print.h (SCM_PRINT_STATE_P), procprop.c (scm_i_procedure_arity,
	scm_stand_in_scm_proc, scm_procedure_property,
	scm_set_procedure_property_x), procs.c
	(scm_procedure_documentation), read.c (scm_lreadr, scm_lreadparen,
	scm_lreadrecparen, scm_read_hash_extend), script.c
	(scm_compile_shell_switches), srcprop.c (scm_source_property,
	scm_set_source_property_x), srcprop.h (SCM_WHASHFOUNDP), stacks.c
	(read_frame, NEXT_FRAME, read_frames, narrow_stack,
	scm_make_stack, scm_stack_id), strop.c (scm_i_index,
	scm_string_index, scm_string_rindex), struct.c (scm_struct_init),
	validate.h (SCM_VALIDATE_BOOL_COPY, SCM_VALIDATE_INUM_DEF,
	SCM_VALIDATE_INUM_DEF_COPY, SCM_VALIDATE_PROC,
	SCM_VALIDATE_ARRAY):  Don't use C operators to compare SCM values.

	* feature.c (make_hook), keywords.c
	(scm_make_keyword_from_dash_symbol), macros.c (scm_makacro,
	scm_makmacro, scm_makmmacro), print.c (scm_iprin1,
	scm_printer_apply, scm_port_with_print_state):  Smob data is of type
	scm_bits_t.

	* feature.c (print_hook), gc.c (scm_object_address), hash.c
	(scm_ihashq, scm_ihashv), print.c (scm_iprin1, scm_ipruk), smob.c
	(freeprint), struct.c (scm_print_struct):  Must unpack
	SCM values to access their raw contents.

	* fluids.c (apply_thunk, scm_with_fluids), hashtab.c (fold_proc,
	scm_hash_fold), load.c (load, scm_primitive_load):  Passing SCM
	values via void * requires unpacking / packing.

	* fports.c (scm_fport_buffer_add, scm_setvbuf), procs.h
	(SCM_SUBRNUM, SCM_SET_SUBRNUM), srcprop.h (SRCPROPBRK, SRCBRKP):
	Read and modify data bits in cell entry #0 using
	SCM_{SET_}?CELL_WORD_0.

	* fports.c (scm_fdes_to_port), gc.c (scm_gc_for_newcell,
	scm_gc_sweep, init_heap_seg), init.c (start_stack), ports.c
	(scm_void_port), procs.c (scm_make_subr_opt,
	scm_make_procedure_with_setter), root.c (scm_internal_cwdr),
	smob.c (scm_make_smob), strports.c (scm_mkstrport):  Use
	SCM_SET_CELL_TYPE to write the cell type information.

	* gc.c (scm_gc_mark):  Use SCM_CELL_OBJECT* to access SCM values
	from cells that are no scheme pairs.

	* gc.c (scm_gc_sweep), mallocs.c (prinmalloc), mallocs.h
	(SCM_MALLOCDATA, SCM_SETMALLOCDATA), print.c (scm_ipruk), random.h
	(SCM_RSTATE), root.h (SCM_ROOT_STATE), smob.c (scm_smob_free),
	srcprop.c (freesrcprops), srcprop.h (SRCPROPPOS, SRCPROPFNAME,
	SRCPROPCOPY, SRCPROPPLIST), struct.c (scm_make_struct,
	scm_make_vtable_vtable):  Use SCM_{SET_}?CELL_WORD* to access cell
	entries with raw data.

	* gc.c (scm_init_storage), sort.c (applyless), strop.c
	(scm_string_to_list):  Eliminate unnecessary casts to SCM.

	* mallocs.c (scm_malloc_obj):  Store result of malloc as raw
	data.

	* ports.c (scm_close_all_ports_except):  Duplicate documentation
	text removed.

	* print.c (scm_iprin1):  Use SCM_ITAG3.

	* procs.h (SCM_SET_SUBRNUM):  Fix shift direction.

	* snarf.h (SCM_GPROC, SCM_GPROC1, SCM_SYMBOL, SCM_GLOBAL_SYMBOL,
	SCM_KEYWORD, SCM_GLOBAL_KEYWORD, SCM_VCELL, SCM_GLOBAL_VCELL,
	SCM_VCELL_INIT, SCM_GLOBAL_VCELL_INIT):  Don't initialize globals
	and static variables at their point of declaration, but rather in
	the init function.

	* tags.h (SCM_PACK):  Automatically cast to scm_bits_t.

2000-04-02  Gary Houston  <ghouston@arglist.com>

	* guardians.c (TCONC_IN, scm_make_guardian): set the CDR of the
	empty tconc pair to SCM_EOL instead of SCM_BOOL_F, avoiding the
	use of an improper list (which breaks g_print.  g_print isn't
	used).
	guardians.c: Added more comments and modified the make-guardian
	docstring.  Reordered a few procedures.

2000-04-01  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* eval.c (scm_lookupcar1, scm_lookupcar, scm_m_case, scm_m_cond,
	scm_m_lambda, iqq, scm_m_define, scm_m_expand_body, unmemocopy,
	SCM_CEVAL), procs.h (SCM_TOP_LEVEL):  Don't use C operators to
	compare SCM values.

	(scm_makprom):  Smob data is of type scm_bits_t.

2000-03-31  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* backtrace.c (display_error_body), debug.c (scm_procedure_source,
	scm_reverse_lookup), dynl.c (scm_dynamic_link):  Don't use C
	operators to compare SCM values.

	* debug.c (scm_make_debugobj), debug.h (SCM_DEBUGOBJ_FRAME,
	SCM_SET_DEBUGOBJ_FRAME):  Update SCM_{SET_}?DEBUGOBJ_FRAME to
	access raw cell data with SCM_{SET_}?CELL_WORD_1.

	* debug.c (scm_make_debugobj):  Don't use SCM_SETCAR to set types.

	* debug.c (scm_make_memoized), dynl.c (scm_dynamic_link):  Smob
	data is of type scm_bits_t.

2000-03-31  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* gdbint.c (gdb_maybe_valid_type_p), guardians.c (TCONC_EMPTYP,
	scm_guardian_zombify):  Use SCM_EQ_P to compare SCM values.

	* guardians.c (GUARDIAN):  Use SCM_CELL_WORD_1 for raw data.

2000-03-31  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* ports.h (scm_port):  Change type of stream member to scm_bits_t.

	* gdbint.c (unmark_port, remark_port), ports.c (scm_markstream),
	strports.c (st_resize_port, scm_mkstrport), vports (sf_flush,
	sf_write, sf_fill_input, sf_close, scm_make_soft_port):  Since
	streams are now of type scm_bits_t, SCM streams have to be
	unpacked/packed.

	* ports.h (SCM_SETPTAB_ENTRY, SCM_SETSTREAM):  Cast input to
	scm_bits_t.

2000-03-31  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* coop-defs.h (struct coop_t): Added `sto'-field again because of
	binary compatibility---let's remove it next time we alter some
	major structure.

	* coop.c (coop_quitting_p, coop_cond_create, coop_mutex_create,
	coop_mother, coop_child): New variables.
	(mother): New function.
	(coop_create): New thread spawning mechanism which uses a "mother
	thread".  The "dummy" pthreads aren't healthy enough to give birth
	to new threads since Linux threads thinks they are asleep.

	* coop-defs.h (struct coop_t): Removed dummy_mutex.

	* coop-defs.h, coop-threads.c (struct coop_t): Eliminate
	`sto'-field when GUILE_PTHREAD_COMPAT is enabled.

2000-03-30  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* arbiters.c (scm_make_arbiter), async.c (scm_async), dynwind.c
	(scm_internal_dynamic_wind):  Smob data is always of type
	scm_bits_t.

	* arbiters.c (SCM_ARB_LOCKED, SCM_LOCK_ARB, SCM_UNLOCK_ARB):
	Access the locking information in cell entry 0 with
	SCM_{SET_}?CELL_WORD_0 instead of SCM_*CAR.

	* async.c (scm_run_asyncs):  Use SCM_NULLP to test for the empty
	list.

	* dynwind.c (scm_dowinds):  Use SCM_EQ_P to compare SCM values.

	* ports.h (SCM_PTAB_ENTRY, SCM_SETPTAB_ENTRY):  Access the ptab
	entry data using SCM_{SET_}?CELL_WORD_1 instead of SCM_{SET}?CDR.

2000-03-29  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* alist.c (scm_sloppy_assq, scm_assq), eq.c (scm_eq_p, scm_eqv_p,
	scm_equal_p), list.c (scm_ilength, scm_last_pair, scm_reverse,
	scm_sloppy_memq, scm_delq_x, scm_delq1_x), tags.h (SCM_UNBNDP):
	Don't use C operators == and != to compare SCM values, use
	SCM_EQ_P instead.

	* boolean.c (scm_boolean_p):  Use SCM_BOOLP to determine whether a
	SCM value is equal to #t or #f.

	* eq.c (scm_eqv_p, scm_equal_p):  Don't use SCM_CAR to access the
	cell type entry of non immediate objects of unknown type.  Use
	SCM_CELL_TYPE instead.

	* gh_data.c (gh_scm2bool, gh_module_lookup), list.c
	(scm_sloppy_memv, scm_sloppy_member, scm_delv_x, scm_delete_x,
	scm_delv1_x, scm_delete1_x), scmsigs.c (scm_sigaction):  Use
	SCM_FALSEP and SCM_TRUE_P to compare SCM values against #f and
	#t.

	* list.c (scm_listify):  Use SCM_UNBNDP to test for an unbound
	scheme value.

2000-03-29  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* coop-threads.c (scm_call_with_new_thread, scm_spawn_thread,
	scm_make_mutex, scm_make_condition_variable): Cast data to
	scm_bits_t in SCM_SET_CELL_WORD and SCM_NEWSMOB macros.

	* coop.c (coop_create): Set `specific' field, not `data' to NULL.

2000-03-29  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* smob.h (SCM_NEWSMOB, SCM_NEWSMOB2, SCM_NEWSMOB3, SCM_SMOB_DATA,
	SCM_SET_SMOB_DATA, SCM_TC2SMOBNUM, SCM_SMOBNUM):  To access smob
	data, use SCM_{SET_}?CELL_TYPE or SCM_{SET_}?WORD_[1-3].

	Note that this implies that smob data has always to be passed as
	values of type scm_bits_t.

2000-03-29  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* threads.c (scm_init_threads): Pass 0 size to scm_make_smob_type
	for scm_tc16_thread.  As the current COOP threads are written, GC
	is not supposed to manage storage for threads.

	* error.c (scm_error): Don't try to throw an error if
	scm_gc_heap_lock is true.

	* coop.c (coop_finish): New function.  Called at exit.
	(coop_aborthelp): Free thread structures when threads die.
	Finished LinuxThreads compatibility support => COOP threads now
	mesh with LinuxThreads.

	* coop-threads.c (scm_call_with_new_thread, scm_spawn_thread):
	Changed SETCDR --> SET_CELL_WORD_1.

	* coop-threads.c (scheme_launch_thread): Set word 1 of handle to 0
	when thread dies.

2000-03-29  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* boolean.h (SCM_TRUE_P):  New macro.

	* boolean.h (SCM_FALSEP, SCM_NFALSEP, SCM_BOOLP), pairs.h
	(SCM_NULLP, SCM_NNULLP):  Use SCM_EQ_P to compare SCM values.

2000-03-28  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* continuations.h (SCM_CONTREGS, SCM_SET_CONTREGS):  New macros to
	access continuation data.

	(SCM_SETJMPBUF):  Deprecated.  Use SCM_SET_CONTREGS instead.

	(SCM_JMPBUF, SCM_DYNENV, SCM_THROW_VALUE, SCM_BASE, SCM_SEQ,
	SCM_DFRAME):  Use SCM_CONTREGS instead of SCM_CHARS to access
	continuation data.

	* continuations.c (scm_make_cont), init.c (start_stack),
	root.c (scm_internal_cwdr):  Use SCM_SET_CONTREGS instead of
	SCM_SETJMPBUF.

2000-03-28  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* symbols.h (SCM_LENGTH, SCM_SETLENGTH):  Access the length field
	of strings and symbols by using SCM_{SET_}?CELL_WORD_0.

	(SCM_CHARS, SCM_UCHARS, SCM_SETCHARS):  Use SCM_{SET_}?CELL_WORD_1
	to access the char * field of strings and symbols.

2000-03-27  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* gc.h (SCM_NEWCELL, SCM_NEWCELL2):  Use SCM_SET_CELL_TYPE to set
	the type entry of a new cell.  Added a comment about things to
	remember when updating the list of free cells.

	(SCM_FREEP, SCM_MARKEDP):  Use SCM_CELL_TYPE to access the type
	entry of a cell.

2000-03-27  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* pairs.h (SCM_CAR, SCM_CDR, SCM_SETCAR, SCM_SETCDR):  Use
	SCM_CELL_OBJECT and SCM_SET_CELL_OBJECT.  This change implies that
	with strict type checking enabled these macros will only work if
	given valid SCM parameters.

	(SCM_GCCDR):  Moved to tags.h.

	* tags.h (SCM_GCCDR):  Moved here from pairs.h.

2000-03-26  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* tags.h (SCM2PTR, PTR2SCM):  Moved to gc.h.

	* pairs.h (scm_cell, SCM_CELLPTR, SCM_CELL_WORD*, SCM_CELL_OBJECT*,
	SCM_SET_CELL_WORD*, SCM_SET_CELL_OBJECT*, SCM_CELL_TYPE,
	SCM_SET_CELL_TYPE, SCM_PTR_LT, SCM_PTR_MASK, SCM_PTR_GT,
	SCM_PTR_LE, SCM_PTR_GE, SCM_CELL_WORD_LOC, SCM_NEWCELL,
	SCM_NEWCELL2): 	Moved to gc.h.

	(SCM_CARLOC, SCM_CDRLOC, SCM_SETAND_CAR, SCM_SETAND_CDR,
	SCM_SETOR_CAR, SCM_SETOR_CDR):  Moved to gc.h.  These names should
	be changed, though, since the macros are not only pair related.

	(SCMPTR):  Deleted.

	* gc.h (SCM2PTR, PTR2SCM, scm_cell, SCM_CELLPTR, SCM_CELL_WORD*,
	SCM_CELL_OBJECT*, SCM_SET_CELL_WORD*, SCM_SET_CELL_OBJECT*,
	SCM_CELL_TYPE, SCM_SET_CELL_TYPE, SCM_PTR_LT, SCM_PTR_MASK,
	SCM_PTR_GT, SCM_PTR_LE, SCM_PTR_GE, SCM_CELL_WORD_LOC,
	SCM_NEWCELL, SCM_NEWCELL2, SCM_CARLOC, SCM_CDRLOC, SCM_SETAND_CAR,
	SCM_SETAND_CDR, SCM_SETOR_CAR, SCM_SETOR_CDR):  Moved here from
	tags.h and pairs.h.

2000-03-25  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* tags.h (SCM_STRICT_TYPING):  New macro that, if defined,
	activates strict compile time type checking for variables of
	type SCM.
	(SCM, SCM_PACK, SCM_UNPACK):  Define according to whether
	SCM_STRICT_TYPING or SCM_VOIDP_TEST are defined.
	(SCM_EQ_P):  Defined as a macro equivalent for eq?.

2000-03-25  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* tags.h (SCM_POINTERS_MUNGED):  Removed.

	* gc.c (scm_gc_sweep, init_heap_seg):  Removed use of
	SCM_POINTERS_MUNGED, thus fixing some illegal casts to SCM.

2000-03-24  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* pairs.h (SCM_CELL_OBJECT, SCM_CELL_OBJECT_[0-3],
	SCM_SET_CELL_OBJECT, SCM_SET_CELL_OBJECT_[0-3], SCM_CELL_TYPE,
	SCM_SET_CELL_TYPE):  Added a set of low level macros for accessing
	cell entries.
	(SCM_CELL_WORD_[0-3]): Renamed from the SCM_CELL_WORD[0-3].

	* procs.h, procs.c:  Instead of SCM_{SET_}?CELL_WORD[12], use the
	newly introduced SCM_{SET_}?CELL_OBJECT_[12] macros.

2000-03-23  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* tags.h: Disabled definition of SCM_VOIDP_TEST.

	Defining SCM as void * introduces problems which haven't been
	handled yet.  Developers who work with these issues can enable it
	in their working copies.

	Disabling this definition exposes a set of newly introduced and
	older misuses of types which causes warning messages during
	compilation.  We'll fix this successively.

	* gc.c (scm_mark_locations): Changed * (SCM **) X --> * (SCM *) X
	in order to obtain a value of type SCM.
	(scm_cellp): Updated with new changes to scm_mark_locations.

	* continuations.h (SCM_SETJMPBUF): Cast second arg into SCM.

	* continuations.c (scm_make_cont): Removed cast of size_t into
	long.

	* symbols.h (SCM_SETCHARS): Cast second arg into SCM.

2000-03-22  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* numbers.h (SCM_SETNUMDIGS):  Use SCM_BIGSIZEFIELD macro for
	shifting, not constant.  Thanks to Dale P. Smith.

	* numbers.c (scm_sum, scm_difference):  Don't test a SCM value
	for being less than zero.  Decode it to a C value first.  Again,
	thank you Dale.

2000-03-22  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* numbers.h, ramap.c, struct.h, vectors.h:  Don't use SCM2PTR for
	non scheme values.  If raw data is stored in SCM variables, it has
	to be accessed using SCM_UNPACK until a better solution is found.

2000-03-22  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* tags.h (SCM_ECONSP, SCM_NECONSP): More corrections of
	pointer-arithmetic induced by the SCM_PACK/UNPACK change.

	* print.c (scm_iprin1): SCM_PACK/UNPACK corrections.

	* gc.c (scm_gc_sweep): SCM_PACK/UNPACK corrections.

	* eval.c (SCM_CEVAL, scm_unmemocar): SCM_PACK/UNPACK corrections.

	* dynwind.c (scm_swap_bindings): SCM_PACK/UNPACK corrections.

	* async.c, __scm.h: Removed lots of the old async click logic.  It
	is possible to reinsert it by defining GUILE_OLD_ASYNC_CLICK in
	__scm.h.  Let's try this out and dump the old code after the
	threads reorganization.
	(set-tick-rate, set-switch-rate): Conditionally removed.

2000-03-21  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* gc.c (scm_gc_mark): Bugfix 1: The recent SCM_PACK/UNPACK change
	made SCM values into pointers.  This turned an arithmetic
	computation of the address of the vcell into a pointer-arithmetic
	one, thereby screwing up marking of structs.
	Bugfix 2: Removed incompletely introduced loop variable `j' used
	when protecting the tail array of a struct.

2000-03-21  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* struct.h (SCM_STRUCT_DATA):  Don't cast SCM values to pointers.

2000-03-21  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* symbols.h, symbols.c (scm_strhash):  Declare the string
	parameter as constant, since it is not modified.

	* symbols.c (scm_intern_obarray_soft,
	scm_sysintern0_no_module_lookup):  Can now pass constant strings
	to scm_strhash without need for casting.

2000-03-21  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* vectors.h (SCM_VELTS, SCM_VELTS_AS_STACKITEMS):  Don't cast SCM
	values to pointers.  Use SCM2PTR instead.

2000-03-21  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* async.c (scm_set_tick_rate, scm_set_switch_rate):  Don't unpack
	results of SCM_INUM.

2000-03-21  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* init.c (scm_boot_guile_1): Renamed GUILE_GC_TRIGGER_1 -->
	GUILE_MIN_YIELD_1, GUILE_GC_TRIGGER_2 --> GUILE_MIN_YIELD_2.
	GUILE_MIN_YIELD_X now take *positive* fractions of heap size.

	* gc.c, gc.h (SCM_MIN_YIELD_1, SCM_MIN_YIELD_2,
	min_yield_fraction, min_yield, adjust_min_yield): Renamed from
	SCM_GC_TRIGGER_1, SCM_GC_TRIGGER_2, gc_trigger_fraction,
	gc_trigger, adjust_gc_trigger.

	* gc.c (alloc_some_heap): Further improvement of minimal heap size
	prediction.
	(SCM_MAX): New macro.
	(scm_freelist_t): New field: collected_1. Previous amount of
	collected cells.
	(gc_sweep_freelist_finish): Trigger based on two last values of
	freelist->collected to avoid unnecessary allocation due to
	temporary peaks.
	(SCM_INIT_HEAP_SIZE_1, SCM_GC_TRIGGER_1, SCM_GC_TRIGGER_2):
	Adjusted to 45000 cells, 40% and 40%.  Gives quick startup
	without extra heap allocation.

2000-03-20  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* numbers.h (SCM_MAKINUM):  The parameter to SCM_MAKINUM should
	already be a C value.  No need to unpack it.

	* numbers.c (scm_long_long2num):  Cast the parameter to scm_bits_t
	if we know it fits into an inum.

	* ramap.c (ramap_rp):  An scm_tc7_[ui]vect object does point to a
	field of long values.  In contrast, SCM_VELTS accesses a field of
	SCM values.

2000-03-20  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* gc.c (scm_gc_stats): Inserted explanation of local_scm_mtrigger
	etc.
	(scm_gc_yield_1): New variable: Holds previous yield.  Used to
	make better judgements.
	(gc_sweep_freelist_finish): Inserted explanation of use of
	gc_trigger.

	* print.h, stacks.h, options.c, options.h: Changed C++
	commentaries to C.

2000-03-20  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* tags.h (SCM2PTR, PTR2SCM):  Use SCM_PACK / SCM_UNPACK correctly.

	* numbers.h (SCM_INUMP, SCM_MAKINUM, SCM_INUM0, SCM_COMPLEX_REAL,
	SCM_COMPLEX_IMAG, SCM_NUMP, SCM_BDIGITS):  Use SCM_PACK /
	SCM_UNPACK / SCM2PTR correctly.

2000-03-20  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* gc.c (adjust_gc_trigger): Improved documentation.
	(alloc_some_heap): Since gc_trigger is used against
	freelist->collected, this is the value which should be used to
	predict minimum growth.

2000-03-20  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* eval.h:  Fix mixup of packed/unpacked SCM values.  (Thanks
	Thien-Thi Nguyen for the patch.)

2000-03-20  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* numbers.c (scm_ash):  Fixed typing problems with the second
	parameter and added some documentation.  (Thanks Thien-Thi Nguyen
	for indicating the problem.)

2000-03-19  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* gc.c, gc.h (scm_gc_yield): New variable.
	(adjust_gc_trigger): Use scm_gc_yield.
	(alloc_some_heap): Use scm_gc_yield instead of
	scm_gc_cells_collected.

	* coop-threads.c: Addd #include "root.h", #include "strings.h".

	* debug.c: Added #include "root.h".  (Thanks to Thien-Thi Nguyen.)

	* gc.c (scm_gc_for_newcell, adjust_gc_trigger): Improved GC
	trigger adjustmeant: Take yield (freed cells) for all freelists
	into account.
	(SCM_INIT_HEAP_SIZE_1, SCM_GC_TRIGGER_1, SCM_GC_TRIGGER_2): Tuned
	to 50000 cell heap with 45% trigger.
	(scm_gc_cells_collected): Reintroduced.
	(SCM_HEAP_SIZE): New macro.
	(scm_gc_sweep): Reintroduced correct computation of
	scm_cells_allocated.
	(scm_freelist_t): Corrected commentary for field `cluster_size':
	Clustersize counts objects, not cells;  New member
	`clusters_allocated'.

2000-03-19  Michael Livshin  <mlivshin@bigfoot.com>

	* *.[hc]: add Emacs magic at the end of file, to ensure GNU
 	indentation style.

2000-03-19  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* threads.h: Added #include "libguile/throw.h".  (Thanks to
	Thien-Thi Nguyen.)

2000-03-18  Michael Livshin  <mlivshin@bigfoot.com>

	* tags.h: (SCM_DOUBLE_CELLP, SCM_NDOUBLE_CELLP): new macros (bad
	names, anyone got any better ones?)

	* gc.h: (typedef struct scm_freelist_t) remove from here.

	* gc.c: (CELL_UP, CELL_DN) made these macros take additional
 	parameter (the span).
	(CLUSTER_SIZE_IN_BYTES, ALIGNMENT_SLACK) new macros.
	(typedef struct scm_freelist_t) moved here from gc.h, it had no
 	business being externally visible.
	(typedef struct scm_heap_seg_data_t) renamed from
 	scm_heap_seg_data, to be style-compliant.
	(scm_mark_locations) if the possible pointer points to a
 	double-cell, check that it's properly aligned.
	(init_heap_seg) align double-cells properly, work with the
 	assumption that the segment size divides cleanly by cluster size.
	(round_to_cluster_size) new function.
	(alloc_some_heap, make_initial_segment) use round_to_cluster_size
 	to satisfy the new init_heap_seg invariant.

2000-03-18  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* _scm.h:  Don't include async.h everywhere...

	* eq.c eval.c iselect.c: ... only include it here.

2000-03-18  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* _scm.h:  Don't include root.h everywhere...

	* async.c continuations.c eq.c eval.c evalext.c feature.c gc.c
	gdbint.c gsubr.c ioext.c keywords.c lang.c load.c macros.c
	numbers.c objprop.c ports.c print.c procprop.c ramap.c read.c
	srcprop.c stackchk.c stacks.c strports.c symbols.c unif.c
	variable.c vectors.c vports.c: ... only include it here.

2000-03-17  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* _scm.h:  Don't include strings.h everywhere...

	* backtrace.c dynl.c error.c feature.c filesys.c fports.c gc.c
	gdbint.c ioext.c load.c net_db.c numbers.c objects.c options.c
	ports.c posix.c print.c procs.c random.c read.c regex-posix.c
	simpos.c socket.c stacks.c stime.c strop.c strports.c struct.c
	symbols.c unif.c vectors.c version.c vports.c: ... only include it
	here.

2000-03-17  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* _scm.h:  Don't include ports.h everywhere...

	* arbiters.c backtrace.c debug.c dynl.c dynwind.c eval.c feature.c
	fluids.c gc.c gdbint.c guardians.c hash.c keywords.c mallocs.c
	numbers.c objects.c print.c read.c root.c smob.c srcprop.c
	stackchk.c strports.c struct.c throw.c variable.c:  ... only
	include it here.

2000-03-17  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* _scm.h:  Don't include vectors.h everywhere...

	* eq.c eval.c filesys.c gc.c gsubr.c guardians.c hash.c hashtab.c
	keywords.c net_db.c numbers.c objects.c posix.c print.c procprop.c
	procs.c ramap.c random.c read.c scmsigs.c socket.c sort.c stime.c
	strports.c symbols.c unif.c vports.c weaks.c:  ... only include it
	here.

2000-03-17  Dirk Herrmann  <D.Herrmann@tu-bs.de>

	* genio.h:  removed.  (Only content was '/* delete me */'.)

	* Makefile.am arbiters.c backtrace.c debug.c dynl.c dynwind.c
	error.c filesys.c fluids.c gc.c gsubr.c guardians.c keywords.c
	libguile.h mallocs.c numbers.c print.c random.c read.c root.c
	srcprop.c stackchk.c struct.c threads.c throw.c variable.c:
	Removed reference to genio.h

2000-03-17  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* gc.c, gc.h: Cleanup of the change of 2000-03-15.
	Cluster sizes are now independent of GC trigger values.
	GUILE_GC_TRIGGER_n can now specify a relative trigger value:
	A negative integer gives fraction of total heap size in percent.
	(SCM_GC_TRIGGER_1, SCM_GC_TRIGGER_2): Default values set to -40.

	* init.c (scm_boot_guile_1): Introduced new variable
	GUILE_MAX_SEGMENT_SIZE; New environment variable names:
	GUILE_INIT_SEGMENT_SIZE_1, GUILE_GC_TRIGGER_1,
	GUILE_INIT_SEGMENT_SIZE_2, GUILE_GC_TRIGGER_2

2000-03-16  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* __scm.h (GC_FREE_SEGMENTS): Disable this until we have made
	freeing of segment work with the new GC scheme.  (Thanks to
	Michael Livshin.)  Oops, also happened to make GUILE_NEW_GC_SCHEME
	the default, but I'll let this change stay in CVS Guile since this
	code is not expected to contain serious bugs.

2000-03-16  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* gc.c, gc.h (scm_map_free_list): Define also if GUILE_DEBUG is
	defined.
	(scm_free_list_length): New procedure (GUILE_DEBUG).
	Fixed a small but serious bug introduced by the previous change.

	* gc.c (scm_gc_sweep): Moved variable n_objects to inner sweep
	loop and declare as register.

	* gc.c (scm_gc_sweep): Sigh... forgot to clear private freelists
	after GC.

Wed Mar 15 08:27:04 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* fluids.c: Docstring patch from Keisuke Nishida.  Some
	reindentation, too, and a couple formals renamed.  Should
	fluid-set! return UNSPECIFIED instead of a value?

Wed Mar 15 08:24:58 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* Makefile.am: Separate out DOT_X_FILES and DOT_DOC_FILES, and
	generate the latter from the concrete listing of the former.  Then
	make guile-procedures.txt depend on DOT_DOC_FILES instead of
	*.doc, so that rebuilding it works.

Wed Mar 15 08:12:14 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* libguile.h: Include libguile/validate.h.  Thanks Keisuke Nishida!

	* guile-snarf.awk.in: Replace docstring line-ending \n" and \n\n"
	with nothing and \n, respectively. Thanks Keisuke Nishida for
	noticing this problem.

2000-03-15  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* __scm.h (GUILE_NEW_GC_SCHEME): Define this if you want to test a
	new way of allocating heap.  It makes Guile fast, but still
	contains bugs.

	* gc.c, gc.h, pairs.h, init.c: Implementation of a new way of
	allocating heap.  The basic idea is to trigger GC every Nth
	allocated cell and grow heap when free list runs out.  The scheme
	has been extended so that GC isn't triggered until all remaining
	cells are used.  The implementation is also prepared for
	development in the direction of POSIX threads.

	* gc.c (SCM_EXPHEAP): In order to grow by a factor of 1.5,
	SCM_EXPHEAP should return half of the heap size.

2000-03-14  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	The following change to init.c is only enabled if Guile was
	configured with --enable-guile-debug.

	* init.c (scm_i_getenv_int): New function.
	(scm_boot_guile_1): Use the environment variables
	GUILE_INIT_HEAP_SIZE, GUILE_INIT_HEAP_SIZE2 to select heap size if
	they exist.  (This may be replaced by a Scheme level mechanism in
	the future.)

	* objprop.c (s_scm_set_object_property_x): Use scm_assq instead of
	scm_assoc.  (Thanks to Keisuke Nishida.)

2000-03-14  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* eval.c, lang.c, lang.h (scm_lisp_nil, scm_lisp_t): Renamed from
	scm_nil, scm_t.  (Thanks to Keisuke Nishida.)

2000-03-14  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* init.c (scm_boot_guile_1): Use same initial segment size for
	1-word and 2-word segments.  Having the smaller size causes Guile
	to GC too often.  Obviously something needs to be done to allow
	for a smaller 2-word segment without this to happen.  (The amount
	of heap for each type should be automatically adapted to the
	application somehow.)

	[Almost all of these changes should be documented in the NEWS
	file.]

	* gc.h (scm_freelist_t): New type.

	* pairs.h (SCM_NEWCELL, SCM_NEWCELL2): Use new style freelists.

	* gc.c (SCM_INIT_HEAP_SIZE): Changed from 32768 --> 40000 so that
	all of Guile basics fits into one segment and there suitable room
	for work.
	(SCM_EXPHEAP): Now takes an argument.  Grow by a factor of 1.5
	instead of 2.
	(scm_freelist, scm_freelist2): Now of type scm_freelist_t.
	Freelists now contains information about object span, cells
	collected and amount of cells in heap segments belonging to the
	list.
	(scm_heap_size, scm_gc_cells_collected): Removed.

	* init.c (scm_boot_guile_1): Make 2-word segment 8K (512 cells).

	* Makefile.am (libguile_la_LDFLAGS): Bumped library version
	number.

	* __scm.h eq.c, eval.c, gc.c, gc.h, gh_data, hash.c, numbers.c,
	numbers.h, objects.c, ramap.c, random.c, unif.c, unif.h: Extensive
	rewrite of handling of real and complex numbers.
	(SCM_FLOATS, SCM_SINGLES): These #ifdef conditionals have been
	removed along with the support for floats.  (Float vectors are
	still supported.)

	* tags.h (scm_tcs_bignums): Removed.
	(scm_tc16_bigpos, scm_tc16_bigneg): Replaced by scm_tc16_big.
	Use SCM_BIGSIGN(x) to test for sign!
	(scm_tc16_big): The new bignum type.
	(SCM_REAL_PART, SCM_IMAG_PART): Removed.

	* numbers.h (SCM_BIGSIGN): Sign moved to bit 16.
	(scm_makdbl): Deprecated.
	(SCM_NEWREAL, SCM_NEWCOMPLEX): New macros.
	(SCM_SINGP): Deprecated.
	(SCM_FLO): Removed.
	(SCM_INEXP, SCM_CPLXP): Deprecated.
	(SCM_INEXACTP, SCM_COMPLEXP): New macros.
	(SCM_COMPLEX_REAL, SCM_COMPLEX_IMAG): Renamed from
	SCM_REAL, SCM_IMAG (and now only valid for complex numbers).
	(SCM_REAL, SCM_IMAG): New, *deprecated*, selectors which work both
	for doubles and complex numbers.
	(SCM_REAL_VALUE): New selector for doubles.
	(scm_double_t, scm_complex_t): New types.
	(scm_dbl): Removed.

	* numbers.c (scm_floprint, scm_floequal): Removed.
	(scm_print_real, scm_print_complex, scm_real_equalp,
	scm_complex_equalp): New functions.

	* unif.c (scm_makflo): Removed.

	* smob.h (SCM_SMOB_PREDICATE): New macro.
	(SCM_NEWSMOB2, SCM_RETURN_NEWSMOB2, SCM_NEWSMOB3,
	SCM_RETURN_NEWSMOB3): New macros.

1999-11-21  Michael Livshin  <mlivshin@bigfoot.com>

	The following changes implement primitive support for double cells
	(i.e. four-word cells) and change the representation of some
	things to multi-cells instead of cons+malloc.  (Applied and
	modified by mdj.)

	* pairs.h (SCM_NEWCELL2): double-cell variants of SCM_NEWCELL.
	(SCM_CELL_WORD, SCM_CELL_WORDLOC, SCM_SET_CELL_WORD): primitive
	multi-cell access macros (used by the ones below).
	(SCM_CELL_WORD[0-3], SCM_SET_CELL_WORD[0-3]): multi-cell access
 	macros.

	* gc.c (scm_freelist2): multi-cell freelists.
	(inner_map_free_list): map_free_list, parameterized on ncells.
  	"nn cells in segment mm" was misleading for ncells > 1; changed to
 	"objects".  still print cells too, though.
	(scm_map_free_list): rewritten using inner_map_free_list.
	(scm_check_freelist): get freelist as parameter, since now we have
 	more than one.
	(scm_debug_newcell2): multi-cell variants of
 	scm_debug_newcell.
	(scm_gc_for_newcell): take ncells and freelist pointer as
 	parameters.
	(scm_gc_mark): add case for tc7_pws (procedures with setters are
 	now double cells).
	(scm_gc_sweep): don't free the float data, since it's not malloced
 	anymore.
	(init_heap_seg): didn't understand what n_new_objects stood for,
 	so changed to n_new_cells.
	(make_initial_segment): new function, makes an initial segment
 	according to given ncells.
	(scm_init_storage): call make_initial_segment, for ncells={1,2,3}.

	* numbers.c (scm_makdbl): no malloc'ing needed, so the
 	{DEFER,ALLOW}_INTS thing removed.

	* numbers.h (struct scm_dbl): changed to represent a double cell,
 	with the number in the second half.

	* dynwind.c: changed the wind-guards representation to double
 	cell.

	* procs.c, procs.h: changed the procedure-with-setter representation
	to double cell.

	* async.c, async.h: made async representation a double cell.

	* dynl.c: made dynamic_obj representation a double cell.

2000-03-13  Gary Houston  <ghouston@arglist.com>

	* ports.c (flush_void_port): renamed to flush_port_default.
	(end_input_void_port): renamed to end_input_default.

	* init.c (scm_standard_stream_to_port): create a void port instead
	of opening /dev/null if the standard file descriptors are bad.
	advantages: no portability problems, doesn't waste a file descriptor,
	simplifies the code (thanks to Marius for the idea).

	* vports.c (s_scm_make_soft_port): call scm_port_non_buffer.

	* void ports: make reading from a void port give EOF instead of
	segv:
	* ports.c (s_scm_sys_make_void_port): modified docstring.
	(fill_input_void_port): new proc.
	(scm_init_ports): set up fill_input_void_port.
	* ports.c (scm_port_non_buffer): new proc.
	(scm_void_port): call scm_port_non_buffer.

	* fports.c (scm_setvbuf): docstring: remove the fcntl documentation
	which was incorrectly appended.

2000-03-13  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* guile-doc-snarf.in: Don't use absolute path for `sed'.  (Note
	that we can't use autoconf for this.  Autoconf itself relies on
	the existence of `sed' somewhere on your path.)  (Thanks to Dirk
	Herrman.)

2000-03-13  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* Makefile.am (libguile_la_SOURCES): Moved iselect.c here from
	EXTRA_libguile_la_SOURCES.

	* iselect.h: Always declare scm_internal_select.

	* iselect.c (scm_internal_select): Added SCM_ASYNC_TICK at the
	end.  Also let scm_internal_select be a real function also when
	not using threads.

	* __scm.h (SCM_TICK): Oops! Forgot to put SCM_ASYNC_TICK here...

2000-03-13  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* __scm.h (SCM_ALLOW_INTS, SCM_REALLOW_INTS): Removed call to
	SCM_ASYNC_TICK.  (This is a preparation for POSIX threads support,
	and kind of an experiment: Will this cause problems?)

Sun Mar 12 13:26:30 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* Makefile.am: Added *.doc to DISTCLEANFILES.

2000-03-12  Gary Houston  <ghouston@arglist.com>

	* fports.c (scm_fdes_to_port): call fcntl F_GETFL to test that
	the fdes is valid before doing anything else.  check that
	the file descriptor supports the modes required.
	(scm_fport_buffer_add): don't throw an error if fstat doesn't
	work: just use the default buffer size.

	* throw.c: change an outdated comment about scm_internal_catch
	BODY: it doesn't take a jumpbuf arg.

	* init.c (scm_standard_stream_to_port): install a handler in case
	scm_fdes_to_port throws an error.  don't check here whether the
	file descriptor is valid, since scm_fdes_to_port will do that.
	set the revealed count depending on whether the port got the
	standard file descriptor.
	(stream_body_data): new type.
	(stream_body, stream_handler): new procs.

2000-03-12  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* stacks.c, stacks.h, struct.c, tags.h, unif.c (scm_bits_t):
	Renamed from SCMWORD.

	* tags.h (SCM_NCELLP): Removed (SCMWORD).

	* arbiters.c (SCM_ARB_LOCKED): Use SCM_UNPACK_CAR.

	* async.c, boolean.h, debug.c, dynl.c, dynwind.c, eval.c, eval.h,
	  feature.h, filesys.h, fluids.h, fports.c, fports.h, gc.c, gc.h,
	  hash.c, keywords.h, macros.c, numbers.c, numbers.h, objects.c,
	  objects.h, options.c, pairs.h, ports.c, ports.h, print.c,
	  procs.h, ramap.c, read.c, smob.c, smob.h, srcprop.h, stacks.c,
	  stacks.h, strports.c, struct.c, struct.h, tag.c, tags.h,
	  throw.c, unif.c, unif.h, variable.h, vectors.h, weaks.c,
	  weaks.h (SCM_PACK, SCM_UNPACK, SCM_UNPACK_CAR): Renamed from
	  SCM_ASSCM, SCM_ASWORD, SCM_CARW).

	* numbers.h (SCM_SRS, SCM_INUM): Corrected SCM_ASSCM/ASWORD fixes.

	* alist.c, eval.c, net_db.c, posix.c, print.c, snarf.h, struct.c,
	tags.h: Fixed copyright notices.

	* struct.c, coop-threads.c: SCM_ASSCM/ASWORD fixes.

2000-03-12  Marius Vollmer  <mvo@zagadka.ping.de>

	* init.c (scm_standard_stream_to_port): Check whether the file
	descriptor is valid and substitute "/dev/null" when not.

2000-03-12  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* coop-defs.h (struct timespec): Conditionally defined.

	* coop.c (coop_condition_variable_timed_wait_mutex): Use ETIMEDOUT
	instead of ETIME.

	* readline.c (match_paren): Bugfix: First arg to select is not
	number of descriptors but the number of the highest descriptor +
	1.

	This is a preliminary attempt at a cleanup of the threads support
	code.  It moves things to better places, makes arguments more
	consistent with the POSIX API (which is used in GNOME's glib), and
	adds new functionality.

	* readline.c (scm_init_readline): Added new arg to scm_init_mutex.

	* coop-defs.h (scm_mutex_trylock): New macro: alias for
	coop_mutex_trylock.
	(scm_cond_init): Changed definition to
	coop_new_condition_variable_init.

	* coop.c: #include <errno.h>
	(coop_timeout_qinsert): Moved here from iselect.c
	(coop_new_mutex_init, coop_new_condition_variable_init): New
	functions.  The strange names are temporary.  Use scm_mutex_init
	and scm_cond_init instead.
	(coop_mutex_trylock): New function.  Uses errno.h:EBUSY.  errno.h
	is ANSI C, but should we check for individual error codes in
	configure.in?
	(coop_condition_variable_timed_wait_mutex): New function.
	(coop_key_create, coop_setspecific, coop_getspecific,
	coop_key_delete): New functions.

	* iselect.c (coop_timout_qinsert): Moved to coop.c

2000-03-11  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* pairs.h (SCM_SETAND_CAR, SCM_SETAND_CDR, SCM_SETOR_CAR,
	SCM_SETOR_CDR): Corrected SCM_ASSCM/WORD fixes.

	* tags.h (SCM_VOIDP_TEST): Renamed from VOIDP_TEST.
	Layout cleanups.

	* objects.h (SCM_CLASS_FLAGS, SCM_OBJ_CLASS_FLAGS,
	SCM_SET_CLASS_INSTANCE_SIZE), struct.h (SCM_STRUCT_VTABLE_DATA),
	proc.h (SCM_CLOSCAR): SCM_ASSCM/WORD fixes.

	* eval.c (scm_lookupcar1): Inserted SCM_ASWORD in expressions
	dealing with ilocs.

2000-03-11  Dale P. Smith  <dpsm@en.com>, applied by Greg J. Badros, <gjb@cs.washington.edu>

        * numbers.c (scm_copy_big_dec, scm_copy_smaller, scm_big_ior,
        scm_big_xor, scm_big_and, scm_big_test): Added new lowlevel bignum
        logical functions from SCM.

        (logand, logior, logxor, logtest, logbit?): Extended scheme
        logical functions to use bignums from SCM.

        (lognot): Removed call to `SCM_VALIDATE_INUM' that prevented
        lognot from using bignums.

Thu Mar  9 11:33:25 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* vectors.h (SCM_VELTS_AS_STACKITEMS): Added this macro to help in
	eliminating some warnings.

	* unif.c, strports.c, print.c, options.c: Fix some warnings on
 	mis-use of SCM/long

	* gc.c, gc.h: Added scm_return_first_int(), and added comment re:
 	what the scm_return_first* functions do.

2000-03-09  Han-Wen Nienhuys  <hanwen@cs.uu.nl>, applied by Greg J. Badros, <gjb@cs.washington.edu>

       * libguile/*.[ch]: make a distinction between SCM as a generic
       name for a Scheme object (now a void*), and SCM as 32 bit word for
       storing tags and immediates (now a long int).  Introduced
       SCM_ASWORD and SCM_ASSCM for conversion. Fixed various dubious
       code in the process: arbiter.c (use macros), unif.c (scm_array_p),

Wed Mar  8 10:15:59 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* numbers.c:  Use SCM_VALIDATE_LONG_COPY, and longs, not ints, in
	various logXXX primitives.  Thanks Eric Moore!

Tue Mar  7 08:05:22 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* run-test, remaining-docs-needed:  Added these scripts.  The
	second one is only temporary until the docstring additions are
	complete.   run-test may best live on, but is here mostly for
	convenience and awareness for now.

	* hash.c: Docs, minor cleanup patch from Dirk Herrman.

Thu Mar  2 16:06:58 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* error.h, error.c: Added `scm_wrong_type_arg_msg' to support
 	displaying the expected type.  Use SCM_LISTn in a couple places
	instead of scm_cons-ing by hand.

	* __scm.h: Added SCM_ASSERT_TYPE macro.

	* validate.h, scm_validate.h: Added the former, as a renamed
	version of the latter with SCM_ASSERT_TYPE used in
	SCM_MAKE_VALIDATE (instead of just SCM_ASSERT)

	* Makefile.am: Rename scm_validate.h to validate.h.

	* *.c, *.h: Include validate.h, not scm_validate.h (old name's
	prefix was superfluous).

Thu Mar  2 15:33:12 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* hashtab.c: Improved documentation for lots of functions.  Added
	handwritten docs for `hash-fold'.

Thu Mar  2 15:13:25 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* list.c: Added hand-written docs for `del{q,v,ete}1!'.

Thu Mar  2 12:38:30 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* list.c: Moved append docs to append! Thanks Dirk Hermann.  Also,
	added append docs from R4RS.

	* strings.c: Docstring typo fix, + eliminate unneeded IMP tests.
	Thanks Dirk Hermann!

	* chars.h: Provide SCM_CHARP, SCM_CHAR, SCM_MAKE_CHAR and
	deprecate SCM_ICHRP, SCM_ICHR, SCM_MAKICHR.  Thanks Dirk Hermann!

	* *.h, *.c: Use SCM_CHARP, SCM_CHAR, SCM_MAKE_CHAR throughout.
	Drop use of SCM_P for function prototypes... assume an ANSI C
	compiler.  Thanks Dirk Hermann!

Sat Feb 19 12:20:12 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* ports.c: Made `set-port-column!' and `set-port-line!' each
	return SCM_UNSPECIFIED instead of a (not-scheme-object) integer
	that caused a seg fault.  Also fixed `set-port-column!'s
	docstring.  Thanks Han-Wen Nienhuys for finding the bug!

Sun Feb 13 19:11:42 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* arbiters.c, eq.c, gc.c, guardians.c, list.c, ports.c, print.c,
	regex-posix.c, scmsigs.c, stime.c, strings.c, variable.c, stime.c,
	strings.c, variable.c:  Added lots of documentation, cleaned up
	some existing documentation.  Occasionally changed formal params
	to match docs.  Also folded an #ifdef into the inners of a
	primitive instead of having two copies of the primitive
	(`get-internal-real-time', from stime.c)

Sun Feb 13 18:12:19 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* ports.c: Added docs for primitives missing them.  Written by
	hand.

Sun Feb 13 09:40:36 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* guile-doc-snarf.in: Use ${AWK} -f guile-func-name-check, not
	just execing guile-func-name-check.  Thanks Michael Livshin!

Thu Feb 10 11:43:23 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* guile-snarf.awk.in: Tweak to work with Sun/HP awk, removed some
	dead code.  Patch from Michael Livshin.

	* guile-doc-snarf.in: Tweak to work with Sun/HP sh.  Patch from
	Michael Livshin.

2000-02-09  Gary Houston  <ghouston@arglist.com>

	* init.c (scm_init_standard_ports): when stdout is a tty, make the
	current-output-port unbuffered by default.  this is less confusing
	for interactive use.  it was line-buffered because of a
	performance problem with unbuffered ports, but I think it will be
	OK now.

2000-02-08  Gary Houston  <ghouston@arglist.com>

	* __scm.h: don't define long_long or ulong_long if HAVE_LONG_LONGS
	is not defined.

	* stime.c (scm_localtime, scm_mktime): if neither HAVE_TM_ZONE nor
	HAVE_TZNAME are defined, use an empty string instead of giving two
	spurious compile-time errors.

Tue Feb  8 13:57:46 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* ports.c: Doc patches from Richard Kim.  Pasted from MIT Scheme.
	Thanks Richard!

Mon Feb  7 09:07:31 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* macros.c: Doc patches from Richard Kim.  Pasted from scm.texi.

Sun Feb  6 20:26:21 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* pairs.c: Doc patches from Richard Kim.  Pasted from MIT Scheme
	(which is GNU GPL'd).

2000-01-31  Gary Houston  <ghouston@arglist.com>

	* strings.h: don't use SCM_P.  don't include <string.h>.
	* error.c, gh_data.c, ports.c, script.c, strop.c: include <string.h>.

	* strings.c (scm_string_ref): make the 2nd argument compulsory.
	previously it defaulted to zero for no good reason that I can see.
	use a local variable for SCM_INUM (k).  replace
	SCM_VALIDATE_INUM_DEF with SCM_VALIDATE_INUM_COPY.

	(scm_makfromstr): cosmetic changes.

	(scm_string): Accept only chars in the list, not strings, for
	conformance to R5RS (particularly for list->string, which is
	supposed to be the inverse of string->list.)  remove
	SCM_DEFER_INTS/SCM_ALLOW_INTS, which is unnecessary since
	scm_makstr handles the cell allocation.  when reporting wrong-type
	arg, don't report the position as 1.

	* posix.c (scm_init_posix): intern PIPE_BUF if it's defined.

2000-01-29  Gary Houston  <ghouston@arglist.com>

	* posix.c (scm_pipe): rewrote the docstring.

	* filesys.c (scm_select, retrieve_select_type, get_element,
	fill_select_type, set_element): modified so that Scheme
	"select" tests port buffers for the ability to provide input
	or accept output.  Previously only the underlying file descriptors
	were checked.  Rewrote the docstring.

Thu Jan 27 10:14:25 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* vectors.c, symbols.c, strorder.c: Documentation cut and pasted
 	from Gregg Reynolds.  Thanks Gregg!

Thu Jan 27 09:59:38 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* strop.c (scm_i_index): Obfuscated commented-out SCM_DEFINE by
	adding "x" prefix to the line so that guile-func-name-check
	doesn't complain unnecessarily.

Wed Jan 26 17:33:52 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* throw.c: Factor out an #ifdef/#else/#endif choice more finely
	for maintainability.

	* strop.c: Documentation added by Gregg A. Reynolds.   Pasted in
	from qdocs, RnRs.

Wed Jan 26 10:02:11 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* tag.c:  Added doc for `tag', but mark as deprecated since Mikael
	suggests removing tag.c altogether (and using a new `class-of'
	instead).

	* strings.c:  Added documentation from Gregg A. Reynolds.  Edited
	a bit by me to use FOO instead of @var{foo} and to have the
	summary come before preconditions on input.  Also dropped trailing
	(rnrs) note.

	* gsubr.c: Do not use SCM_DEFINE for `gsubr-apply'. Register the
 	function with scm_make_subr_opt w/ last arg of 0 so it is not
 	visible at the Scheme level. Mikael says that this is the right
 	thing because the first arg to the proc is the guts of a compiled
 	closure and shouldn't be exposed to the Scheme level.

Tue Jan 25 17:15:47 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* sort.c: typo in comment fixed.

	* keywords.c: Added documentation.

	* guardians.c: Added documentation (could be better).

	* gc.c: Added docs for gc-set-debug-check-freelist.

	* eq.c: Added docs for eq?, eqv? equal? abridged from R4RS.

	* boolean.c: Added docs for `not', `boolean?' (by hand).

Tue Jan 25 13:28:56 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* random.c: Added documentation, from SLIB page:
	http://angela.ctrl-c.liu.se/~calle/scheme/slib_toc.html

Mon Jan 24 17:50:20 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* variable.c, version.c:  Added documentation, written by hand
	since I could not find anything already written that was
	relevant.

2000-01-23  Gary Houston  <ghouston@arglist.com>

	* filesys.c (scm_chown): omit port/fdes support if HAVE_FCHOWN is
	not defined (thanks to Richard Y. Kim).

Thu Jan 20 13:00:38 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* Makefile.in: Removed, this is auto-generated.

Thu Jan 20 11:33:47 2000  Dirk Hermann <dirk@ida.ing.tu-bs.de> --applied 01/20/00 gjb

	* list.c: Put some variable initialization code at the point of
	declaration; Added a comment for list*; Formatting changes.

	* load.c: use SCM_NNULLP to make sure the end of a list is not
	reached yet.

2000-01-18  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* backtrace.c (scm_display_error_message): Bugfix: Don't use
	result of scm_list_p as C boolean.
	(scm_display_error_message, scm_set_print_params_x): Use new
	validation macros. (Thanks to Dirk Herrmann.)

	* net_db.c (scm_resolv_error): Cast result from hstrerror.

	* strports.c (st_end_input): Inserted parenthesis to get operator
	grouping correct.

	* list.h (scm_init_list): Removed SCM_P around prototypes.

	* fports.c, list.c, numbers.c, ports.c, stime.c, symbols.c,
	filesys.c, posix.c: Converted docstrings to ANSI C format and
	escaped " occurring inside string literals.

Tue Jan 18 13:21:08 2000  Mikael Djurfeldt  <mdj@r11n07-s.pdc.kth.se>

	* posix.c (scm_mknod): Escape " occuring inside docstring.

2000-01-18  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* alist.c, chars.c, debug.c, dynl.c, dynwind.c, error.c, eval.c,
	   evalext.c, filesys.c, gc.c, hash.c, hashtab.c, ioext.c,
	   keywords.c, list.c, load.c, macros.c, net_db.c, numbers.c,
	   objprop.c, ports.c, posix.c, print.c, procprop.c, procs.c,
	   ramap.c, regex-posix.c, root.c, scmsigs.c, simpos.c, socket.c,
	   stacks.c, stime.c, strings.c, strop.c, strports.c, struct.c,
	   symbols.c, throw.c, unif.c, vectors.c, version.c, vports.c,
	   weaks.c: Converted docstrings to ANSI C format.

	* filesys.c (scm_chmod), simpos.c (scm_system), version
	(scm_version), vports (scm_make_soft_port): Escape " occuring
	inside docstring.

Mon Jan 17 11:41:22 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* scm_validate.h: Added SCM_VALIDATE_ULONG_COPY,
	SCM_VALIDATE_LONG_COPY

	* numbers.c: Use SCM_VALIDATE_ULONG_COPY, instead of
	SCM_VALIDATE_INUM_COPY to let bigger numbers be used.  Rename a
	couple of formal arguments (and fix their uses) to make arguments
	match the documentation.

2000-01-14    <mstachow@alum.mit.edu>

	* Makefile.am: Augment path when running guile-doc-snarf so
	guile-func-name-check is found.

Fri Jan 14 09:34:55 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* scm_validate.h (SCM_NUM2LONG_DEF): Fix this macro to just use
	def, not SCM_MAKINUM(def);  thanks Janis Bzerins!

Wed Jan 12 00:06:53 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* net_db.c (s_scm_inet_makeaddr): Use SCM_NUM2ULONG since that's
	the way guile-1.3.4 worked, but #if 0 out the version using
	SCM_VALIDATE_INUM_COPY for stricter testing.

Tue Jan 11 18:24:18 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* guile-doc-snarf.in: Use new $fullfilename for running
	guile-func-name-check, and put "$fullfilename" and "$filename" in
	quotes at uses to make sure re-splitting on whitespace does not
	occur (so filenames w/ embedded whitespace would work okay, though
	I sure hope we never have to deal with that! :-) ).  Thanks to
	Mikael for pointing out the source_dir != build_dir was broken.

Tue Jan 11 17:42:40 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* scm_validate.h: Added SCM_NUM2LONG_DEF macro.  Make
	SCM_OUT_OF_RANGE use SCM_MAKINUM, not scm_long2num.  Added
	SCM_COERCE_ROSTRING macro.  Added SCM_VALIDATE_NONEMPTYLIST
	macro.  Fix SCM_VALIDATE_STRINGORSUBSTR macro to not use SLOPPY
	variants.

	* ports.c (scm_port_closed_p): Validate that the arg is a PORT,
	then return whether it's an open port (was validating that it was
	an open port -- this was a bug I introduced back in December, but
	my careful reading of diffs caught it).

	* numbers.c: Recombine the two conditional-compilation paths for
	all the log* primitives -- they were split based on #ifndef
	scm_long2num;  factored out a SCM_LOGOP_RETURN macro, and fixed
	some bugs and inconsistencies in the two sets of implementations.
	(scm_lognot) Fixed *atrocious* re-use of a SCM as an integer!

	* ioext.c: Use SCM_ASSERT_RANGE in a couple places, and
	SCM_VALIDATE_INUM_COPY once where it should've been used.

	* fluids.c (scm_internal_with_fluids): Use
	SCM_VALIDATE_LIST_COPYLEN.

	* filesys.c: Use SCM_NUM2LONG instead of SCM_VALIDATE_INUM_COPY;
	this is questionable as it relaxes type safety, but other changes
	were useful and all SCM_NUM2LONG's should probably be
	revisited. Use SCM_OUT_OF_RANGE, SCM_WRONG_TYPE_ARG.

	* evalext.c: line-break change on 1 line.

	* eval.c (nconc2last): Takes a non-empty list as its first
	argument, not just a list.

	* dynl.c: Use new SCM_COERCE_ROSTRING macro.

Tue Jan 11 15:44:23 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* dynl.c, feature.c, filesys.c, fports.c, list.c, load.c,
 	net_db.c, sort.c, stacks.c, unif.c: Use SCM_WTA, SCM_MISC_ERROR
 	where possible.

	* symbols.c (scm_sysintern0): Fixed the function name in a
	scm_misc_error invocation.

	* print.c (scm_simple_format): Do not need SCM_COERCE_SUBSTR, and
	use scm_return_first to ward off latent GC bug that Mikael caught.

	* async.c: Use SCM_VALIDATE_ASYNC_COPY one place where it wasn't
	used before but should've been.

2000-01-12  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* snarf.h (SCM_PROC1): Replaced SCM (*) (...) with
	SCM_FUNC_CAST_ARBITRARY_ARGS.

Tue Jan 11 13:44:07 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* guile-func-name-check.in: Added this script to statically check
	#define FUNC_NAME, #undef FUNC_NAME in the source.

	* sort.c, posix.c: Fix #undef FUNC_NAME lines to not have trailing
	redundant comment, semicolon; caught by new guile-func-name-check
	script.

	* debug.c: Fix mistaken #define FUNC_NAME for scm_make_iloc.
	Caught by new guile-func-name-check-script.

	* Makefile.am: Added guile-func-name-check to bin_SCRIPTS

	* ramap.c: Fix #if 0'd out code to be syntactically acceptable to
	guile-func-name-check.

	* guile-doc-snarf.in: Run guile-func-name-check on the file before
	doing the snarf.

Tue Jan 11 11:31:10 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* fports.c, ports.c, ports.h, strports.c, vports.c: Make write
 	port function take const void*, not void*.

Tue Jan 11 11:18:07 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* scm_validate.h, chars.c, ports.c, print.c, read.c, strings.c,
 	strop.c: Use SCM_VALIDATE_ICHR, SCM_VALIDATE_ICHR_COPY instead of
 	SCM_VALIDATE_CHAR, SCM_VALIDATE_CHAR_COPY.  Change made for
 	consistency with the other macros dealing with immediate
 	characters.  (Similar to INT -> INUM change a week or so ago).

Tue Jan 11 10:41:46 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* dynl.c, error.c, eval.c, feature.c, filesys.c, fports.c, list.c, load.c,
 	net_db.c, read.c, socket.c: Update error messages to use ~A for
 	%s, ~S for %S to work with new `simple-format' format and be
 	standardized better.

	* print.h, print.c (scm_simple_format): Added `simple-format'
	primitive.  It's the old scm_display_error, with ARGS now a rest
	parameter, and the destination first instead of last (and a couple
	new capabilities inspired by `format' -- #t as destination means
	current-output-port, #f means return the formatted text as a
	string.

	* gh.h, gh_data.c, ports.h, ports.c: Added some missing const specifications.

	* backtrace.c (scm_display_error_message): Rewrote to use
	scm_simple_format() procedure.

	* __scm.h: Added commented-out #define of GUILE_DEBUG_FREELIST

2000-01-09  Marius Vollmer  <mvo@zagadka.ping.de>

 	Finally applied the libltdl patch from Thomas Tanner, with slight
	modifications.

	* DYNAMIC-LINKING: Removed because it is obsolete.
	* dynl.c: Use ANSI prototypes.
	(sysdep_dynl_link): Use lt_dlopenext instead of lt_dlopen.
	* scmconfig.h.in: Do not change, as it is automatically generated.

    1999-07-25  Thomas Tanner  <tanner@ffii.org>

	    * dynl-dl.c, dynl-dld.c, dynl-shl.c, dynl-vms.c: deleted
	    (obsolete)
	    * Makefile.am: likewise, add INCLTDL (libltdl headers) to
	    INCLUDES, set dlpreopened files in LDFLAGS, link libguile
	    against libltdl
	    * dynl.c: use libltdl if DYNAMIC_LINKING is enabled,
	    * guile.c: register preloaded modules
	    * scmconfig.h.in: remove obsolete symbols

2000-01-09  Gary Houston  <ghouston@arglist.com>

	* These changes should make it unnecessary to call tzset from
	Scheme after modifying the TZ environment variable, even if the
	system date facilities cache the value.
	* stime.c (setzone, scm_localtime): added comments.
	(tzset): don't define a noop tzset macro if HAVE_TZSET not defined.
	(setzone): don't call tzset.
	(restorezone): call tzset only if HAVE_TZSET is defined.
	(scm_tzset): don't define if HAVE_TZSET not defined.  Change the
	doc string to indicate that this procedure isn't likely to do
	anything useful.
	(scm_localtime, scm_strftime, scm_mktime): call tzset if
	LOCALTIME_CACHE is defined.

2000-01-09  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* posix.c (scm_sync): Return SCM_UNSPECIFIED.

2000-01-09  Gary Houston  <ghouston@arglist.com>

	* eval.c: define scm_unbound_variable_key ('unbound-variable).
	scm_lookupcar1: throw an error with key 'unbound-variable instead
	of 'misc-error when an unbound variable is encountered.

	* filesys.c (scm_mkdir, scm_rmdir, scm_getcwd, scm_select,
	scm_symlink, scm_readlink, scm_lstat),
	posix.c (scm_setpgid, scm_setsid, scm_ctermid, scm_tcgetpgrp,
	scm_tcsetpgrp, scm_uname, scm_setlocale, scm_mknod, scm_nice,
	scm_sync),
	simpos.c (scm_system),
	stime.c (scm_times, scm_strptime):
	move the HAVE_XXX feature tests out of the procedure bodies.
	don't use SCM_SYSMISSING.
	scm_validate.h (SCM_SYSMISSING): removed.
	error.h, error.c (scm_sysmissing): comment that this is deprecated.
	see ChangeLog entry for 1999-12-28.

Sat Jan  8 19:52:04 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* scm_validate.h (SCM_VALIDATE_BOOL_COPY): Fix typo.

Sat Jan  8 17:06:46 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* backtrace.c: Fix spelling typo in a comment.

	* snarf.h: Use new SCM_DOCS macro to encapsulate the non SCM_INIT
 	text.  Reformatted some of the expansions.

Fri Jan  7 15:50:46 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* scm_validate.h (SCM_OUT_OF_RANGE): Use scm_out_of_range_pos to
	report the position of the argument.

	* error.h, error.c (scm_out_of_range_pos):  Added this function to
	take extra "pos" argument, the position number of the errant
	argument.

	* debug.c: Use SCM_OUT_OF_RANGE instead of scm_out_of_range.

	* snarf.h: Use SCM_HERE and SCM_INIT as names, not SCM_NOTSNARF
	and SCM_SNARFING.  Also put the %%% in the SCM_INIT since Mikael
	prefers that and I'm reasonably indifferent.

Fri Jan  7 15:03:32 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* snarf.h: Factor out differences between C++ and non-C++ into
	SCM_FUNC_CAST_ARBITRARY_ARGS macro.  Modify all the snarf macro
	definitions to use SCM_NOTSNARF and SCM_SNARFING macros (like
	Mikael's macros, below, but changed names and SCM_SNARFING no
	longer expands to include %%% -- that must appear in the argument
	so that the token appears at the call-site as a reminder).

2000-01-07  Mikael Djurfeldt  <mdj@thalamus.nada.kth.se>

	* snarf.h (SCM_INSITU, SCM_INIT): New snarf macros for use in user
	snarf macro definitions.

2000-01-06  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* chars.c (scm_integer_to_char): Use Greg's nice
	SCM_VALIDATE_INUM_RANGE macro for argument checking for closer
	adherence to R5RS.

Thu Jan  6 11:48:49 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* *.c, snarf.h: Replace GUILE_PROC1 with SCM_DEFINE1 throughout.

Thu Jan  6 11:22:53 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* Makefile.am (ETAGS_ARGS): Switch to SCM_DEFINE, SCM_DEFINE1
	instead of GUILE_PROC.

Thu Jan  6 11:21:49 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* alist.c: Do not report mismatch errors on some uses of `tmp' (do
	this by using SCM_ARG2 instead of `2' in the SCM_VALIDATE_CONS
	macro call.

Thu Jan  6 09:54:33 2000  Dirk Herrmann <dirk@ida.ing.tu-bs.de> --gjb applied

	* scm_validate.h: Remove some redundant NIMP tests.

	* alist.c: minimize scope of the tmp variables, and initialize
 	them when declared. The strange SCM_NIMP tests are replaced by
 	SCM_CONSP tests that more closely reflect the intended semantics.
  	However, we don't get a performance penalty here, because the
 	SCM_CONSP test was performed by the ALISTCELL test anyway.  * The
 	extremely ugly use of ASRTGO macros was removed: The calls to
 	ASRTGO were not encapsulated by "#ifndef SCM_RECKLESS", but got a
 	label parameter that only exists when SCM_RECKLESS is not defined.
  	This works, because ASRTGO itself is defined in a way that it only
 	makes use of the label parameter if SCM_RECKLESS is not defined
 	(shudder!).  Does guile make at all use of the possibility to
 	define SCM_RECKLESS?  * Codesize is likely to be reduced, since
 	instead of two calls to SCM_ASSERT performed by the ALISTCELL test
 	we now only get one test.

	* list.c: Use SCM_NNULLP, not SCM_NIMP as appropriate.  Also use
 	SCM_NULLP instead of SCM_IMP.  Drop use of "register" keyword on
 	some variables in `list?'.  Fix `reverse' and `reverse!'
 	primitives to handle improper lists better.

Wed Jan  5 11:24:53 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* *.[ch]: Whitespace changes -- added space after SCM_VALIDATE_*
 	macros and SCM_DEFINE macros to match GNU coding standards.

Wed Jan  5 11:04:24 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* *.[ch]: Replace GUILE_PROC w/ SCM_DEFINE.

Wed Jan  5 10:59:06 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* *.[ch]:  Replace SCM_VALIDATE_INT w/ SCM_VALIDATE_INUM for
	better consistency with the names of other SCM_VALIDATE_ macros
	and better conformance to guile naming policy.

Wed Jan  5 10:50:39 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* ports.c (s_scm_close_all_ports_except): Use SCM_ARG1 in a
	SCM_VALIDATE instead of 1 to avoid a check on the argument (since
	it's not the actual name of the formal).

	* guile-snarf.awk.in: Do argument/number mismatch checking and
	print warnings in an Emacs compile-mode parseable format.

	* struct.c: Use SCM_ASSERT_RANGE instead of SCM_ASSERT w/
	SCM_OUTOFRANGE as 3rd argument.

	* random.c: Fix argument/number mismatch (that I introduced :-( ).

	* __scm.h: Do not #define SCM_ARG* when snarfing;
	lets us distinguish between 1 and SCM_ARG1 when snarfing as only
	the former (using the number) requires the argument to match the
	formal in the current argument snarfing check.

	* snarf.h: Give new definition of SCM_ASSERT when in
	snarfing mode to output a lexically-identifiable sequence that the
	guile-snarf.awk script uses to verify argument/position matching.

	* ramap.c: Remove extraneous #undef FUNC_NAME.

Wed Jan  5 08:36:38 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* guile-doc-snarf.awk.in: Removed -- guile-snarf.awk.in is the
	current version of the same functionality; it writes the .x output
	to stdout instead of directly into the file.

Wed Jan  5 08:15:04 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* unif.c, symbols.c, strings.c, stacks.c, random.c, print.c,
	posix.c:  Eliminated a bunch of SCM_NIMP(..)s that are now
	redundant with the safer macros.  Patch from Dirk Hermann applied
	by hand. Thanks Dirk!

	* scm_validate.h: Added SCM_VALIDATE_VECTOR_OR_DVECTOR for some
	uses in random.c.

	* ramap.c: whitespace change.

Tue Jan  4 14:21:35 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* options.c, objects.c, keywords.c, gc.c: Some redundant SCM_NIMP
 	removals from Dirk Hermann.

	* alist.c: Rename formals to match the parameter names in the
	documentation, updates to documentation.  Thanks Dirk Hermann!

2000-01-04  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* eval.c (SCM_CEVAL): Reverse order of
	scm_stack_checking_enabled_p and SCM_STACK_OVERFLOW_P
	(Thanks to Brad Knotwell.)

Mon Jan  3 08:30:02 2000  Greg Harvey  <Greg.Harvey@thezone.net> (applied --01/03/00 gjb)

	* gc.c (scm_debug_newcell): Added SCM_SETCAR of the newly
	allocated cell.

	* pairs.h: Added a comment about the need for the SCM_SETCAR in
	SCM_NEWCELL macro.

Mon Jan  3 08:25:19 2000  Greg J. Badros  <gjb@cs.washington.edu>

	* dynl-vms.c, debug.c, coop-threads.c, backtrace.c, eval.c: More
 	SCM_NIMP tests that were redundant are now eliminated.  Patches
 	from Dirk Hermann applied by hand.

The ChangeLog continues in the file: "ChangeLog-1996-1999"
