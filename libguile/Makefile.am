## Process this file with Automake to create Makefile.in

AUTOMAKE_OPTIONS = foreign

## Check for headers in $(srcdir)/.., so that #include
## <libguile/MUMBLE.h> will find MUMBLE.h in this dir when we're
## building.
INCLUDES = -I.. -I$(srcdir)/..

lib_LTLIBRARIES = libguile.la
libguile_la_SOURCES = alist.c append.c appinit.c arbiters.c async.c \
    boolean.c chars.c continuations.c dynl.c dynwind.c eq.c \
    error.c eval.c extchrs.c feature.c filesys.c fports.c gc.c \
    gdbint.c genio.c gsubr.c hash.c hashtab.c init.c ioext.c \
    kw.c list.c load.c mallocs.c markers.c mbstrings.c net_db.c \
    numbers.c objprop.c \
    options.c pairs.c ports.c posix.c print.c procprop.c procs.c ramap.c \
    read.c root.c scmsigs.c sequences.c simpos.c smob.c socket.c \
    stackchk.c stime.c strings.c strop.c strorder.c \
    strports.c struct.c symbols.c tag.c throw.c unif.c variable.c \
    vectors.c version.c vports.c weaks.c _scm.h
EXTRA_libguile_la_SOURCES = backtrace.c stacks.c debug.c srcprop.c \
    strerror.c inet_aton.c putenv.c
libguile_la_DEPENDENCIES = @LIBLOBJS@
libguile_la_LIBADD = @LIBLOBJS@
libguile_la_LDFLAGS = -version-info 0:0 -rpath $(libdir)

include_HEADERS = libguile.h

# These are headers visible as <libguile/mumble.h>.
modincludedir = $(includedir)/@module@
modinclude_HEADERS = __scm.h alist.h append.h arbiters.h async.h \
    backtrace.h boolean.h chars.h continuations.h debug.h dynl.h dynwind.h \
    eq.h error.h eval.h extchrs.h feature.h filesys.h fports.h gc.h \
    gdb_interface.h gdbint.h genio.h gsubr.h hash.h hashtab.h init.h \
    ioext.h kw.h list.h load.h mallocs.h markers.h mbstrings.h net_db.h \
    numbers.h objprop.h options.h pairs.h ports.h posix.h print.h \
    procprop.h procs.h ramap.h read.h root.h scmhob.h scmsigs.h \
    sequences.h simpos.h smob.h socket.h srcprop.h stackchk.h stacks.h \
    stime.h strings.h strop.h strorder.h strports.h struct.h symbols.h \
    tag.h tags.h throw.h unif.h variable.h vectors.h version.h vports.h \
    weaks.h snarf.h

## This file is generated at configure time.  That is why it is DATA
## and not a header -- headers are included in the distribution.
modinclude_DATA = scmconfig.h

bin_SCRIPTS = guile-snarf

EXTRA_DIST = gscm.c gscm.h ChangeLog-scm dynl-dl.c dynl-dld.c dynl-shl.c \
    dynl-vms.c DYNAMIC-LINKING PLUGIN/REQ PLUGIN/guile.config \
    PLUGIN/guile.libs.in cpp_signal.c cpp_errno.c cpp_err_symbols.in \
    cpp_sig_symbols.in cpp_cnvt.awk

## FIXME: shouldn't directly generate file; instead generate temp file
## and "mv".  Consider using timestamp file as well, to avoid
## unnecessary rebuilds.
libpath.h: Makefile
	echo '/* generated by Makefile */' > libpath.h
	echo '#define SCM_PKGDATA_DIR "$(pkgdatadir)"' >> libpath.h
	echo '#define SCM_LIBRARY_DIR "$(pkgdatadir)/$(VERSION)"' >> libpath.h
	echo '#define SCM_SITE_DIR "$(pkgdatadir)/site"' >> libpath.h

SUFFIXES = .x
.c.x:
	./guile-snarf $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CFLAGS) $< > $@

## Add -MG to make the .x magic work with auto-dep code.
MKDEP = gcc -M -MG $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CFLAGS)

cpp_err_symbols.c: cpp_err_symbols.in
	$(AWK) -f $(srcdir)/cpp_cnvt.awk < $(srcdir)/cpp_err_symbols.in > \
		cpp_err_symbols.c

cpp_sig_symbols.c: cpp_sig_symbols.in
	$(AWK) -f $(srcdir)/cpp_cnvt.awk < $(srcdir)/cpp_sig_symbols.in > \
		cpp_sig_symbols.c

## Create a new version of the cpp_sig_symbols.in file, including all SIGXXX
## macros defined on this platform.
check_signals:
	gcc -undef -dM -E $(srcdir)/cpp_signal.c | egrep ' SIG[A-Z]+' \
	  | cut -f2 -d' ' | sort > cpp_sig_symbols_here
	diff -u $(srcdir)/cpp_sig_symbols.in cpp_sig_symbols_here \
          | egrep '^\+S' \
	  | cut -c2- > cpp_sig_symbols_diff
	if test -s cpp_sig_symbols_diff ; then \
	  cat $(srcdir)/cpp_sig_symbols.in cpp_sig_symbols_diff \
	    | sort > cpp_sig_symbols_new ;\
	  echo "cpp_sig_symbols_new has the following additions:" ;\
	  cat cpp_sig_symbols_diff ;\
	else echo "No new symbols found."; \
	fi

## Likewise for cpp_err_symbols.in.
check_errnos:
	gcc -undef -dM -E $(srcdir)/cpp_errno.c | egrep ' E.+' \
	  | cut -f2 -d' ' | sort > cpp_err_symbols_here
	diff -u $(srcdir)/cpp_err_symbols.in cpp_err_symbols_here \
          | egrep '^\+E' \
	  | cut -c2- > cpp_err_symbols_diff
	if test -s cpp_err_symbols_diff ; then \
	  cat $(srcdir)/cpp_err_symbols.in cpp_err_symbols_diff \
	    | sort > cpp_err_symbols_new ;\
	  echo "cpp_err_symbols_new has the following additions:" ;\
	  cat cpp_err_symbols_diff ;\
	else echo "No new symbols found."; \
	fi

CLEANFILES=cpp_err_symbols_here cpp_err_symbols_diff cpp_err_symbols_new \
	cpp_sig_symbols_here cpp_sig_symbols_diff cpp_sig_symbols_new
