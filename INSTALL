Guile Installation Guide
Copyright (c) 1996, 1997, 1998, 1999, 2000 Free software Foundation, Inc.

   Permission is granted to anyone to make or distribute verbatim copies
   of this document as received, in any medium, provided that the
   copyright notice and permission notice are preserved,
   and that the distributor grants the recipient permission
   for further redistribution as permitted by this notice.

   Permission is granted to distribute modified versions
   of this document, or of portions of it,
   under the above conditions, provided also that they
   carry prominent notices stating who last changed them,
   and that any new or changed statements about the activities
   of the Free Software Foundation are approved by the Foundation.


Brief Installation Instructions ===========================================

To build Guile on unix, there are two basic steps:

	1. Type "./configure", to configure the package for your system.
	2. Type "make", to build the package.

Generic instructions for configuring and compiling GNU distributions
are included below.  (For instructions how to install SLIB, the scheme
procedure library, see below.)


Special Instructions For Some Systems =====================================

We would like Guile to build on all systems using the simple
instructions above, but it seems that a few systems still need special
treatment.  If you can send us fixes for these problems, we'd be
grateful.

SunOS 4.1: Guile's shared library support seems to be confused, but
    hey; shared libraries are confusing.  You may need to configure
    Guile with a command like:
	./configure --disable-shared
    For more information on `--disable-shared', see below, "Flags
    Accepted by Configure".

HP/UX: GCC 2.7.2 (and maybe other versions) have trouble creating
    shared libraries if they depend on any non-shared libraries.  GCC
    seems to have other problems as well.  To work around this, we
    suggest you configure Guile to use the system's C compiler:
	CC=cc ./configure

NetBSD: Perry Metzger says, "Guile will build under NetBSD only using
    gmake -- the native make will not work.  (gmake is in our package
    system, so this will not be a problem when we packagize 1.3.)"


Flags Accepted by Configure ===============================================

If you run the configure script with no arguments, it should examine
your system and set things up appropriately.  However, there are a few
switches specific to Guile you may find useful in some circumstances.

--enable-maintainer-mode --- If you have automake, autoconf, and
libtool installed on your system, this switch causes configure to
generate Makefiles which know how to automatically regenerate
configure scripts, makefiles, and headers, when they are out of date. 
The README file says which versions of those tools you will need.

--with-threads --- Build a Guile executable and library that supports
cooperative threading.  If you use this switch, Guile will also build
and install the QuickThreads non-preemptive threading library,
libqthreads, which you will need to link into your programs after
libguile.  When you use `guile-config', you will pick up all
neccessary linker flags automatically.

Cooperative threads are not yet thoroughly tested; once they are, they
will be enabled by default.  The interaction with blocking I/O is
pretty ad hoc at the moment.  In our experience, bugs in the thread
support do not affect you if you don't actually use threads.

--with-modules --- Guile can dynamically load `plugin modules' during
runtime, using facilities provided by libtool.  Not all platforms
support this, however.  On these platforms, you can statically link
the plugin modules into libguile when Guile itself is build.  XXX -
how does one specify the modules?

--disable-shared --- Do not build shared libraries.  Normally, Guile
will build shared libraries if your system supports them.  Guile
always builds static libraries.

--enable-debug-freelist --- Enable freelist debugging.

This enables a debugging version of SCM_NEWCELL(), and also registers
an extra primitive, the setter `gc-set-debug-check-freelist!'.

Configure with the --enable-debug-freelist option to enable
the gc-set-debug-check-freelist! primitive, and then use:

(gc-set-debug-check-freelist! #t)  # turn on checking of the freelist
(gc-set-debug-check-freelist! #f)  # turn off checking

Checking of the freelist forces a traversal of the freelist and
a garbage collection before each allocation of a cell.  This can
slow down the interpreter dramatically, so the setter should be used to
turn on this extra processing only when necessary.

--enable-debug-malloc --- Enable malloc debugging.

Include code for debugging of calls to scm_must_malloc/realloc/free.

Checks that

1. objects freed by scm_must_free has been mallocated by scm_must_malloc
2. objects reallocated by scm_must_realloc has been allocated by
   scm_must_malloc
3. reallocated objects are reallocated with the same what string

But, most importantly, it records the number of allocated objects of
each kind.  This is useful when searching for memory leaks.

A Guile compiled with this option provides the primitive
`malloc-stats' which returns an alist with pairs of kind and the
number of objects of that kind.

--enable-guile-debug --- Include internal debugging functions
--disable-arrays     --- omit array and uniform array support
--disable-posix      --- omit posix interfaces
--disable-networking --- omit networking interfaces
--disable-regex      --- omit regular expression interfaces


Using Guile Without Installing It =========================================

If you want to run Guile without installing it, set the environment
variable `GUILE_LOAD_PATH' to a colon-separated list of directories,
including the directory containing this INSTALL file.  If you used a
separate build directory, you'll need to include the build directory
in the path as well.

For example, suppose the Guile distribution unpacked into a directory
called `/home/jimb/guile-snap' (so the full name of this INSTALL file
would be `/home/jimb/guile-snap/INSTALL').  Then you might say, if
you're using Bash or any other Bourne shell variant,

  export GUILE_LOAD_PATH=/home/jimb/guile-snap

or if you're using CSH or one of its variants:

  setenv GUILE_LOAD_PATH /home/jimb/guile-snap


Installing SLIB ===========================================================

In order to use SLIB from Guile you basically only need to put the
`slib' directory _in_ one of the directories on Guile's load path.

The standard installation is:

  1. Obtain slib from http://www-swiss.ai.mit.edu/~jaffer/SLIB.html

  2. Put it in Guile's data directory, that is the directory printed when
     you type

       guile-config info pkgdatadir

     at the shell prompt.  This is normally `/usr/local/share/guile', so the
     directory will normally have full path `/usr/local/share/guile/slib'.

  3. Start guile as a user with write access to the data directory and type

       (use-modules (ice-9 slib))

     at the Guile prompt.  This will generate the slibcat catalog next to
     the slib directory.

SLIB's `require' is provided by the Guile module (ice-9 slib).

Example:

  (use-modules (ice-9 slib))
  (require 'primes)
  (prime? 7)


Generic Instructions for Building Auto-Configured Packages ================

To compile this package:

1.  Configure the package for your system.  In the directory that this
file is in, type `./configure'.  If you're using `csh' on an old
version of System V, you might need to type `sh configure' instead to
prevent `csh' from trying to execute `configure' itself.

The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation, and
creates the Makefile(s) (one in each subdirectory of the source
directory).  In some packages it creates a C header file containing
system-dependent definitions.  It also creates a file `config.status'
that you can run in the future to recreate the current configuration.
Running `configure' takes a minute or two.

To compile the package in a different directory from the one
containing the source code, you must use GNU make.  `cd' to the
directory where you want the object files and executables to go and
run `configure' with the option `--srcdir=DIR', where DIR is the
directory that contains the source code.  Using this option is
actually unnecessary if the source code is in the parent directory of
the one in which you are compiling; `configure' automatically checks
for the source code in `..' if it does not find it in the current
directory.

By default, `make install' will install the package's files in
/usr/local/bin, /usr/local/lib, /usr/local/man, etc.  You can specify
an installation prefix other than /usr/local by giving `configure' the
option `--prefix=PATH'.  Alternately, you can do so by changing the
`prefix' variable in the Makefile that `configure' creates (the
Makefile in the top-level directory, if the package contains
subdirectories).

You can specify separate installation prefixes for machine-specific
files and machine-independent files.  If you give `configure' the
option `--exec_prefix=PATH', the package will use PATH as the prefix
for installing programs and libraries.  Normally, all files are
installed using the same prefix.

`configure' ignores any other arguments that you give it.

If your system requires unusual options for compilation or linking
that `configure' doesn't know about, you can give `configure' initial
values for some variables by setting them in the environment.  In
Bourne-compatible shells, you can do that on the command line like
this:
	CC='gcc -traditional' DEFS=-D_POSIX_SOURCE ./configure

The `make' variables that you might want to override with environment
variables when running `configure' are:

(For these variables, any value given in the environment overrides the
value that `configure' would choose:)
CC		C compiler program.
		Default is `cc', or `gcc' if `gcc' is in your PATH.
INSTALL		Program to use to install files.
		Default is `install' if you have it, `cp' otherwise.
INCLUDEDIR	Directory for `configure' to search for include files.
		Default is /usr/include.

(For these variables, any value given in the environment is added to
the value that `configure' chooses:)
DEFS		Configuration options, in the form '-Dfoo -Dbar ...'
LIBS		Libraries to link with, in the form '-lfoo -lbar ...'

If you need to do unusual things to compile the package, we encourage
you to teach `configure' how to do them and mail the diffs to the
address given in the README so we can include them in the next
release.

2.  Type `make' to compile the package.

3.  Type `make install' to install programs, data files, and
documentation.

4.  You can remove the program binaries and object files from the
source directory by typing `make clean'.  To also remove the
Makefile(s), the header file containing system-dependent definitions
(if the package uses one), and `config.status' (all the files that
`configure' created), type `make distclean'.

The file `configure.in' is used as a template to create `configure' by
a program called `autoconf'.  You will only need it if you want to
regenerate `configure' using a newer version of `autoconf'.

