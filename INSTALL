Brief Installation Instructions ===========================================

To build Guile on unix, there are two basic steps:

	1. Type "./configure", to configure the package for your system.
	2. Type "make", to build the package.

Generic instructions for configuring and compiling GNU distributions
are included below.


Special Instructions For Some Systems =====================================

We would like Guile to build on all systems using the simple
instructions above, but it seems that a few systems still need special
treatment.  If you can send us fixes for these problems, we'd be
grateful.

SunOS 4.1: Guile's shared library support seems to be confused, but
    hey; shared libraries are confusing.  You may need to configure
    Guile with a command like:
	./configure --disable-shared
    For more information on `--disable-shared', see below, "Flags
    Accepted by Configure".

HP/UX: GCC 2.7.2 (and maybe other versions) have trouble creating
    shared libraries if they depend on any non-shared libraries.  GCC
    seems to have other problems as well.  To work around this, we
    suggest you configure Guile to use the system's C compiler:
	CC=cc ./configure

NetBSD: Perry Metzger says, "Guile will build under NetBSD only using
    gmake -- the native make will not work.  (gmake is in our package
    system, so this will not be a problem when we packagize 1.3.)"

What You Get ==============================================================

The `configure' script examines your system, and adapts Guile to
compile and run on it.

The `make' command builds several things:
- An executable file `guile/guile', which is an interactive shell for
  talking with the Guile Scheme interpreter.
- An object library `libguile/.libs/libguile.a', containing the Guile Scheme
  interpreter, ready to be linked into your programs.

To install Guile, type `make install'.  This installs the executable
and libraries mentioned above, as well as Guile's header files and
Scheme libraries.

Make also builds shared libraries, on systems that support them.
Because of the nature of shared libraries, before linking against
them, you should probably install them; `make install' takes care of
this.


Flags Accepted by Configure ===============================================

If you run the configure script with no arguments, it should examine
your system and set things up appropriately.  However, there are a few
switches specific to Guile you may find useful in some circumstances.

--enable-maintainer-mode --- If you have automake, autoconf, and
libtool installed on your system, this switch causes configure to
generate Makefiles which know how to automatically regenerate
configure scripts, makefiles, and headers, when they are out of date. 
The README file says which versions of those tools you will need.

--with-threads --- Build a Guile executable and library that supports
cooperative threading.  If you use this switch, Guile will also build
and install the QuickThreads non-preemptive threading library,
libqt.a, which you will need to link into your programs after
libguile.a.  That is, you should pass the switches -lguile -qt to your
linker.

Coop threads are not yet thoroughly tested; once they are, they will
be enabled by default.  The interaction with blocking I/O is pretty ad
hoc at the moment.  In our experience, bugs in the thread support do
not affect you if you don't actually use threads.

--with-readline --- include support for fancy line editing, based on
the GNU readline library.  This is enabled by default, so you must
specify --with-readline=no if you don't want it.

--enable-dynamic-linking --- Build a Guile executable and library
providing Scheme functions which can load a shared library and
initialize it, perhaps thereby adding new functions to Guile.  This
feature is enabled by default; you only need to use this option (as
`--enable-dynamic-linking=no') if you want to build a Guile which does
not support dynamic linking.

This option has no effect on systems that do not support shared
libraries.

--disable-shared --- Do not build shared libraries.  Normally, Guile
will build shared libraries if your system supports them.  Guile
always builds static libraries.


Using Guile Without Installing It =========================================

If you want to run Guile without installing it, set the environment
variable `GUILE_LOAD_PATH' to a colon-separated list of directories,
including the directory containing this INSTALL file.  If you used a
separate build directory, you'll need to include the build directory
in the path as well.

For example, suppose the Guile distribution unpacked into a directory
called `/home/jimb/guile-snap' (so the full name of this file would be
`/home/jimb/guile-snap/INSTALL').  Then you might say:

  export GUILE_LOAD_PATH=/home/jimb/guile-snap

if you're using Bash or any other Bourne shell variant, or

  setenv GUILE_LOAD_PATH /home/jimb/guile-snap

if you're using CSH or one of its variants.

If you built Guile in a separate directory from the source tree, then
you'll need to include your build directory in the GUILE_LOAD_PATH as
well.  For example, if you built in a subdirectory of the source tree
called `pentium', you might say:

  export GUILE_LOAD_PATH=/home/jimb/guile-snap:/home/jimb/guile-snap/pentium


Building a Statically Linked Guile ========================================

Sometimes it's useful to build a statically-linked version of the
Guile executable.  It's helpful in debugging, and for producing
stand-alone executables for distribution to machines you don't
control.

To do this, set the LDFLAGS environment variable to `-static' before
you configure, or before you run the `make' command to build the
executable.


Generic Instructions for Building Auto-Configured Packages ================

To compile this package:

1.  Configure the package for your system.  In the directory that this
file is in, type `./configure'.  If you're using `csh' on an old
version of System V, you might need to type `sh configure' instead to
prevent `csh' from trying to execute `configure' itself.

The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation, and
creates the Makefile(s) (one in each subdirectory of the source
directory).  In some packages it creates a C header file containing
system-dependent definitions.  It also creates a file `config.status'
that you can run in the future to recreate the current configuration.
Running `configure' takes a minute or two.

To compile the package in a different directory from the one
containing the source code, you must use GNU make.  `cd' to the
directory where you want the object files and executables to go and
run `configure' with the option `--srcdir=DIR', where DIR is the
directory that contains the source code.  Using this option is
actually unnecessary if the source code is in the parent directory of
the one in which you are compiling; `configure' automatically checks
for the source code in `..' if it does not find it in the current
directory.

By default, `make install' will install the package's files in
/usr/local/bin, /usr/local/lib, /usr/local/man, etc.  You can specify
an installation prefix other than /usr/local by giving `configure' the
option `--prefix=PATH'.  Alternately, you can do so by changing the
`prefix' variable in the Makefile that `configure' creates (the
Makefile in the top-level directory, if the package contains
subdirectories).

You can specify separate installation prefixes for machine-specific
files and machine-independent files.  If you give `configure' the
option `--exec_prefix=PATH', the package will use PATH as the prefix
for installing programs and libraries.  Normally, all files are
installed using the same prefix.

`configure' ignores any other arguments that you give it.

If your system requires unusual options for compilation or linking
that `configure' doesn't know about, you can give `configure' initial
values for some variables by setting them in the environment.  In
Bourne-compatible shells, you can do that on the command line like
this:
	CC='gcc -traditional' DEFS=-D_POSIX_SOURCE ./configure

The `make' variables that you might want to override with environment
variables when running `configure' are:

(For these variables, any value given in the environment overrides the
value that `configure' would choose:)
CC		C compiler program.
		Default is `cc', or `gcc' if `gcc' is in your PATH.
INSTALL		Program to use to install files.
		Default is `install' if you have it, `cp' otherwise.
INCLUDEDIR	Directory for `configure' to search for include files.
		Default is /usr/include.

(For these variables, any value given in the environment is added to
the value that `configure' chooses:)
DEFS		Configuration options, in the form '-Dfoo -Dbar ...'
LIBS		Libraries to link with, in the form '-lfoo -lbar ...'

If you need to do unusual things to compile the package, we encourage
you to teach `configure' how to do them and mail the diffs to the
address given in the README so we can include them in the next
release.

2.  Type `make' to compile the package.

3.  Type `make install' to install programs, data files, and
documentation.

4.  You can remove the program binaries and object files from the
source directory by typing `make clean'.  To also remove the
Makefile(s), the header file containing system-dependent definitions
(if the package uses one), and `config.status' (all the files that
`configure' created), type `make distclean'.

The file `configure.in' is used as a template to create `configure' by
a program called `autoconf'.  You will only need it if you want to
regenerate `configure' using a newer version of `autoconf'.
