(let () (begin (set! make-relative-filename (lambda _components_1 (let ((_construct_2 (unspecified))) (begin (set! _construct_2 (lambda (_l_3) (if (null? (let ((_x_4_7 _l_3)) (begin (_check! (pair? _x_4_7) 1 _x_4_7) (cdr:pair _x_4_7)))) _l_3 (cons (let ((_x_8_11 _l_3)) (begin (_check! (pair? _x_8_11) 0 _x_8_11) (car:pair _x_8_11))) (cons "/" (_construct_2 (let ((_x_12_15 _l_3)) (begin (_check! (pair? _x_12_15) 1 _x_12_15) (cdr:pair _x_12_15))))))))) (if (null? (let ((_x_16_19 _components_1)) (begin (_check! (pair? _x_16_19) 1 _x_16_19) (cdr:pair _x_16_19)))) (let ((_x_20_23 _components_1)) (begin (_check! (pair? _x_20_23) 0 _x_20_23) (car:pair _x_20_23))) (apply string-append (_construct_2 _components_1))))))) 'make-relative-filename))
(let () (begin (set! pathname-append (lambda _components_1 (let ((_construct_4 (unspecified))) (begin (set! _construct_4 (lambda (_l_5) (if (null? (let ((_x_7_10 _l_5)) (begin (_check! (pair? _x_7_10) 1 _x_7_10) (cdr:pair _x_7_10)))) _l_5 (if (string=? (let ((_x_12_15 _l_5)) (begin (_check! (pair? _x_12_15) 0 _x_12_15) (car:pair _x_12_15))) "") (_construct_4 (let ((_x_16_19 _l_5)) (begin (_check! (pair? _x_16_19) 1 _x_16_19) (cdr:pair _x_16_19)))) (if (char=? #\/ (string-ref (let ((_x_21_24 _l_5)) (begin (_check! (pair? _x_21_24) 0 _x_21_24) (car:pair _x_21_24))) (- (string-length (let ((_x_25_28 _l_5)) (begin (_check! (pair? _x_25_28) 0 _x_25_28) (car:pair _x_25_28)))) 1))) (cons (let ((_x_29_32 _l_5)) (begin (_check! (pair? _x_29_32) 0 _x_29_32) (car:pair _x_29_32))) (_construct_4 (let ((_x_33_36 _l_5)) (begin (_check! (pair? _x_33_36) 1 _x_33_36) (cdr:pair _x_33_36))))) (cons (let ((_x_38_41 _l_5)) (begin (_check! (pair? _x_38_41) 0 _x_38_41) (car:pair _x_38_41))) (cons "/" (_construct_4 (let ((_x_42_45 _l_5)) (begin (_check! (pair? _x_42_45) 1 _x_42_45) (cdr:pair _x_42_45))))))))))) (let ((_n_46 (if (null? (let ((_x_47_50 _components_1)) (begin (_check! (pair? _x_47_50) 1 _x_47_50) (cdr:pair _x_47_50)))) (let ((_x_51_54 _components_1)) (begin (_check! (pair? _x_51_54) 0 _x_51_54) (car:pair _x_51_54))) (apply string-append (_construct_4 _components_1))))) (if (not (char=? #\/ (string-ref _n_46 (- (string-length _n_46) 1)))) (string-append _n_46 "/") _n_46)))))) 'pathname-append))
(let () (begin (set! make-nbuild-parameter (lambda (_dir_1 _source?_1 _verbose?_1 _hostdir_1 _hostname_1) (let ((_make-nbuild-parameter_2 0)) (begin (set! _make-nbuild-parameter_2 (lambda (_dir_3 _source?_3 _verbose?_3 _hostdir_3 _hostname_3) (let ((_parameters_6 (_cons (_cons 'compiler (pathname-append _dir_3 "Compiler")) (_cons (_cons 'util (pathname-append _dir_3 "Util")) (_cons (_cons 'build (pathname-append _dir_3 "Rts" "Build")) (_cons (_cons 'source (pathname-append _dir_3 "Lib")) (_cons (_cons 'common-source (pathname-append _dir_3 "Lib" "Common")) (_cons (_cons 'repl-source (pathname-append _dir_3 "Repl")) (_cons (_cons 'interp-source (pathname-append _dir_3 "Eval")) (_cons (_cons 'machine-source (pathname-append _dir_3 "Lib" "Sparc")) (_cons (_cons 'common-asm (pathname-append _dir_3 "Asm" "Common")) (_cons (_cons 'sparc-asm (pathname-append _dir_3 "Asm" "Sparc")) (_cons '(target-machine _ sparc) (_cons '(endianness _ big) (_cons '(word-size _ 32) (_cons (_cons 'always-source? _source?_3) (_cons (_cons 'verbose-load? _verbose?_3) (_cons (_cons 'compatibility (pathname-append _dir_3 "Compat" _hostdir_3)) (_cons (_cons 'host-system _hostname_3) '()))))))))))))))))))) (lambda (_key_7) (let ((_probe_10 (assq _key_7 _parameters_6))) (if _probe_10 (let ((_x_11_14 _probe_10)) (begin (_check! (pair? _x_11_14) 1 _x_11_14) (cdr:pair _x_11_14))) #f)))))) (_make-nbuild-parameter_2 _dir_1 _source?_1 _verbose?_1 _hostdir_1 _hostname_1))))) 'make-nbuild-parameter))
(let () (begin (set! nbuild-parameter (make-nbuild-parameter "" #f #f "Larceny" "Larceny")) 'nbuild-parameter))
(let () (begin (set! aremq! (lambda (_key_1 _alist_1) (let ((_aremq!_2 0)) (begin (set! _aremq!_2 (lambda (_key_3 _alist_3) (if (null? _alist_3) _alist_3 (if (eq? _key_3 (let ((_x_7_10 (let ((_x_11_14 _alist_3)) (begin (_check! (pair? _x_11_14) 0 _x_11_14) (car:pair _x_11_14))))) (begin (_check! (pair? _x_7_10) 0 _x_7_10) (car:pair _x_7_10)))) (_aremq!_2 _key_3 (let ((_x_15_18 _alist_3)) (begin (_check! (pair? _x_15_18) 1 _x_15_18) (cdr:pair _x_15_18)))) (begin (set-cdr! _alist_3 (_aremq!_2 _key_3 (let ((_x_20_23 _alist_3)) (begin (_check! (pair? _x_20_23) 1 _x_20_23) (cdr:pair _x_20_23))))) _alist_3))))) (_aremq!_2 _key_1 _alist_1))))) 'aremq!))
(let () (begin (set! aremv! (lambda (_key_1 _alist_1) (let ((_aremv!_2 0)) (begin (set! _aremv!_2 (lambda (_key_3 _alist_3) (if (null? _alist_3) _alist_3 (if (eqv? _key_3 (let ((_x_8_11 (let ((_x_12_15 _alist_3)) (begin (_check! (pair? _x_12_15) 0 _x_12_15) (car:pair _x_12_15))))) (begin (_check! (pair? _x_8_11) 0 _x_8_11) (car:pair _x_8_11)))) (_aremv!_2 _key_3 (let ((_x_16_19 _alist_3)) (begin (_check! (pair? _x_16_19) 1 _x_16_19) (cdr:pair _x_16_19)))) (begin (set-cdr! _alist_3 (_aremv!_2 _key_3 (let ((_x_21_24 _alist_3)) (begin (_check! (pair? _x_21_24) 1 _x_21_24) (cdr:pair _x_21_24))))) _alist_3))))) (_aremv!_2 _key_1 _alist_1))))) 'aremv!))
(let () (begin (set! aremove! (lambda (_key_1 _alist_1) (let ((_aremove!_2 0)) (begin (set! _aremove!_2 (lambda (_key_3 _alist_3) (if (null? _alist_3) _alist_3 (if (equal? _key_3 (let ((_x_7_10 (let ((_x_11_14 _alist_3)) (begin (_check! (pair? _x_11_14) 0 _x_11_14) (car:pair _x_11_14))))) (begin (_check! (pair? _x_7_10) 0 _x_7_10) (car:pair _x_7_10)))) (_aremove!_2 _key_3 (let ((_x_15_18 _alist_3)) (begin (_check! (pair? _x_15_18) 1 _x_15_18) (cdr:pair _x_15_18)))) (begin (set-cdr! _alist_3 (_aremove!_2 _key_3 (let ((_x_20_23 _alist_3)) (begin (_check! (pair? _x_20_23) 1 _x_20_23) (cdr:pair _x_20_23))))) _alist_3))))) (_aremove!_2 _key_1 _alist_1))))) 'aremove!))
(let () (begin (set! filter (lambda (_select?_1 _list_1) (let ((_filter_2 0)) (begin (set! _filter_2 (lambda (_select?_3 _list_3) (if (null? _list_3) _list_3 (if (_select?_3 (let ((_x_6_9 _list_3)) (begin (_check! (pair? _x_6_9) 0 _x_6_9) (car:pair _x_6_9)))) (cons (let ((_x_10_13 _list_3)) (begin (_check! (pair? _x_10_13) 0 _x_10_13) (car:pair _x_10_13))) (_filter_2 _select?_3 (let ((_x_14_17 _list_3)) (begin (_check! (pair? _x_14_17) 1 _x_14_17) (cdr:pair _x_14_17))))) (_filter_2 _select?_3 (let ((_x_19_22 _list_3)) (begin (_check! (pair? _x_19_22) 1 _x_19_22) (cdr:pair _x_19_22)))))))) (_filter_2 _select?_1 _list_1))))) 'filter))
(let () (begin (set! find (lambda (_selected?_1 _list_1) (let ((_find_2 0)) (begin (set! _find_2 (lambda (_selected?_3 _list_3) (if (null? _list_3) #f (if (_selected?_3 (let ((_x_6_9 _list_3)) (begin (_check! (pair? _x_6_9) 0 _x_6_9) (car:pair _x_6_9)))) (let ((_x_10_13 _list_3)) (begin (_check! (pair? _x_10_13) 0 _x_10_13) (car:pair _x_10_13))) (_find_2 _selected?_3 (let ((_x_15_18 _list_3)) (begin (_check! (pair? _x_15_18) 1 _x_15_18) (cdr:pair _x_15_18)))))))) (_find_2 _selected?_1 _list_1))))) 'find))
(let () (begin (set! remove-duplicates (lambda (_list_1 _same?_1) (let ((_remove-duplicates_2 0)) (begin (set! _remove-duplicates_2 (lambda (_list_3 _same?_3) (let ((_member?_5 (unspecified))) (begin (set! _member?_5 (lambda (_x_6 _list_6) (if (null? _list_6) #f (if (_same?_3 _x_6 (let ((_x_9_12 _list_6)) (begin (_check! (pair? _x_9_12) 0 _x_9_12) (car:pair _x_9_12)))) #t (_member?_5 _x_6 (let ((_x_14_17 _list_6)) (begin (_check! (pair? _x_14_17) 1 _x_14_17) (cdr:pair _x_14_17)))))))) (if (null? _list_3) _list_3 (if (_member?_5 (let ((_x_19_22 _list_3)) (begin (_check! (pair? _x_19_22) 0 _x_19_22) (car:pair _x_19_22))) (let ((_x_23_26 _list_3)) (begin (_check! (pair? _x_23_26) 1 _x_23_26) (cdr:pair _x_23_26)))) (_remove-duplicates_2 (let ((_x_27_30 _list_3)) (begin (_check! (pair? _x_27_30) 1 _x_27_30) (cdr:pair _x_27_30))) _same?_3) (cons (let ((_x_32_35 _list_3)) (begin (_check! (pair? _x_32_35) 0 _x_32_35) (car:pair _x_32_35))) (_remove-duplicates_2 (let ((_x_36_39 _list_3)) (begin (_check! (pair? _x_36_39) 1 _x_36_39) (cdr:pair _x_36_39))) _same?_3)))))))) (_remove-duplicates_2 _list_1 _same?_1))))) 'remove-duplicates))
(let () (begin (set! least (lambda (_less?_1 _list_1) (let ((_least_2 0)) (begin (set! _least_2 (lambda (_less?_3 _list_3) (reduce (lambda (_a_4 _b_4) (if (_less?_3 _a_4 _b_4) _a_4 _b_4)) #f _list_3))) (_least_2 _less?_1 _list_1))))) 'least))
(let () (begin (set! greatest (lambda (_greater?_1 _list_1) (let ((_greatest_2 0)) (begin (set! _greatest_2 (lambda (_greater?_3 _list_3) (reduce (lambda (_a_4 _b_4) (if (_greater?_3 _a_4 _b_4) _a_4 _b_4)) #f _list_3))) (_greatest_2 _greater?_1 _list_1))))) 'greatest))
(let () (begin (set! mappend (lambda (_proc_1 _l_1) (let ((_mappend_2 0)) (begin (set! _mappend_2 (lambda (_proc_3 _l_3) (apply append (let () (let ((_loop_9_12_15 (unspecified))) (begin (set! _loop_9_12_15 (lambda (_y1_4_5_16 _results_4_8_16) (if (null? _y1_4_5_16) (reverse _results_4_8_16) (begin #t (_loop_9_12_15 (let ((_x_20_23 _y1_4_5_16)) (begin (_check! (pair? _x_20_23) 1 _x_20_23) (cdr:pair _x_20_23))) (cons (_proc_3 (let ((_x_24_27 _y1_4_5_16)) (begin (_check! (pair? _x_24_27) 0 _x_24_27) (car:pair _x_24_27)))) _results_4_8_16)))))) (_loop_9_12_15 _l_3 '()))))))) (_mappend_2 _proc_1 _l_1))))) 'mappend))
(let () (begin (set! make-list (lambda (_nelem_1 _ _rest_1) (let* ((_val_4 (if (null? _rest_1) #f (let ((_x_7_10 _rest_1)) (begin (_check! (pair? _x_7_10) 0 _x_7_10) (car:pair _x_7_10))))) (_loop_5 (unspecified))) (begin (set! _loop_5 (lambda (_n_6 _l_6) (if (zero? _n_6) _l_6 (_loop_5 (- _n_6 1) (cons _val_4 _l_6))))) (_loop_5 _nelem_1 '()))))) 'make-list))
(let () (begin (set! reduce (lambda (_proc_1 _initial_1 _l_1) (let ((_reduce_2 0)) (begin (set! _reduce_2 (lambda (_proc_3 _initial_3 _l_3) (let ((_loop_5 (unspecified))) (begin (set! _loop_5 (lambda (_val_6 _l_6) (if (null? _l_6) _val_6 (_loop_5 (_proc_3 _val_6 (let ((_x_7_10 _l_6)) (begin (_check! (pair? _x_7_10) 0 _x_7_10) (car:pair _x_7_10)))) (let ((_x_11_14 _l_6)) (begin (_check! (pair? _x_11_14) 1 _x_11_14) (cdr:pair _x_11_14))))))) (if (null? _l_3) _initial_3 (if (null? (let ((_x_16_19 _l_3)) (begin (_check! (pair? _x_16_19) 1 _x_16_19) (cdr:pair _x_16_19)))) (let ((_x_20_23 _l_3)) (begin (_check! (pair? _x_20_23) 0 _x_20_23) (car:pair _x_20_23))) (_loop_5 (let ((_x_25_28 _l_3)) (begin (_check! (pair? _x_25_28) 0 _x_25_28) (car:pair _x_25_28))) (let ((_x_29_32 _l_3)) (begin (_check! (pair? _x_29_32) 1 _x_29_32) (cdr:pair _x_29_32)))))))))) (_reduce_2 _proc_1 _initial_1 _l_1))))) 'reduce))
(let () (begin (set! reduce-right (lambda (_proc_1 _initial_1 _l_1) (let ((_reduce-right_2 0)) (begin (set! _reduce-right_2 (lambda (_proc_3 _initial_3 _l_3) (let ((_loop_5 (unspecified))) (begin (set! _loop_5 (lambda (_l_6) (if (null? (let ((_x_7_10 _l_6)) (begin (_check! (pair? _x_7_10) 1 _x_7_10) (cdr:pair _x_7_10)))) (let ((_x_11_14 _l_6)) (begin (_check! (pair? _x_11_14) 0 _x_11_14) (car:pair _x_11_14))) (_proc_3 (let ((_x_15_18 _l_6)) (begin (_check! (pair? _x_15_18) 0 _x_15_18) (car:pair _x_15_18))) (_loop_5 (let ((_x_19_22 _l_6)) (begin (_check! (pair? _x_19_22) 1 _x_19_22) (cdr:pair _x_19_22)))))))) (if (null? _l_3) _initial_3 (if (null? (let ((_x_24_27 _l_3)) (begin (_check! (pair? _x_24_27) 1 _x_24_27) (cdr:pair _x_24_27)))) (let ((_x_28_31 _l_3)) (begin (_check! (pair? _x_28_31) 0 _x_28_31) (car:pair _x_28_31))) (_loop_5 _l_3))))))) (_reduce-right_2 _proc_1 _initial_1 _l_1))))) 'reduce-right))
(let () (begin (set! fold-left (lambda (_proc_1 _initial_1 _l_1) (let ((_fold-left_2 0)) (begin (set! _fold-left_2 (lambda (_proc_3 _initial_3 _l_3) (if (null? _l_3) _initial_3 (_fold-left_2 _proc_3 (_proc_3 _initial_3 (let ((_x_4_7 _l_3)) (begin (_check! (pair? _x_4_7) 0 _x_4_7) (car:pair _x_4_7)))) (let ((_x_8_11 _l_3)) (begin (_check! (pair? _x_8_11) 1 _x_8_11) (cdr:pair _x_8_11))))))) (_fold-left_2 _proc_1 _initial_1 _l_1))))) 'fold-left))
(let () (begin (set! fold-right (lambda (_proc_1 _initial_1 _l_1) (let ((_fold-right_2 0)) (begin (set! _fold-right_2 (lambda (_proc_3 _initial_3 _l_3) (if (null? _l_3) _initial_3 (_proc_3 (let ((_x_4_7 _l_3)) (begin (_check! (pair? _x_4_7) 0 _x_4_7) (car:pair _x_4_7))) (_fold-right_2 _proc_3 _initial_3 (let ((_x_8_11 _l_3)) (begin (_check! (pair? _x_8_11) 1 _x_8_11) (cdr:pair _x_8_11)))))))) (_fold-right_2 _proc_1 _initial_1 _l_1))))) 'fold-right))
(let () (begin (set! iota (lambda (_n_1) (let ((_iota_2 0)) (begin (set! _iota_2 (lambda (_n_3) (let ((_n_6 (- _n_3 1)) (_r_6 '())) (let () (let ((_loop_9 (unspecified))) (begin (set! _loop_9 (lambda (_n_10 _r_10) (let ((_r_13 (cons _n_10 _r_10))) (if (= _n_10 0) _r_13 (_loop_9 (- _n_10 1) _r_13))))) (_loop_9 _n_6 _r_6))))))) (_iota_2 _n_1))))) 'iota))
(let () (begin (set! list-head (lambda (_l_1 _n_1) (let ((_list-head_2 0)) (begin (set! _list-head_2 (lambda (_l_3 _n_3) (if (zero? _n_3) '() (cons (let ((_x_4_7 _l_3)) (begin (_check! (pair? _x_4_7) 0 _x_4_7) (car:pair _x_4_7))) (_list-head_2 (let ((_x_8_11 _l_3)) (begin (_check! (pair? _x_8_11) 1 _x_8_11) (cdr:pair _x_8_11))) (- _n_3 1)))))) (_list-head_2 _l_1 _n_1))))) 'list-head))
(let () (begin (set! $$trace (lambda (_x_1) (let ((_$$trace_2 0)) (begin (set! _$$trace_2 (lambda (_x_3) #t)) (_$$trace_2 _x_1))))) '$$trace))
(let () (begin (set! host-system 'larceny) 'host-system))
(let () (begin (set! _check! (lambda (_flag_1 _exn_1 _ _args_1) (if (not _flag_1) (apply error "Runtime check exception: " _exn_1 _args_1) (unspecified)))) '_check!))
(let () (begin (set! compat:initialize (lambda _rest_1 (if (null? _rest_1) (let ((_dir_4 (nbuild-parameter 'compatibility))) (begin (compat:load (string-append _dir_4 "compat2_sch")) (compat:load (string-append _dir_4 "__/__/Auxlib/list_sch")) (compat:load (string-append _dir_4 "__/__/Auxlib/pp_sch")))) (unspecified)))) 'compat:initialize))
(let () (begin (set! with-optimization (lambda (_level_1 _thunk_1) (let ((_with-optimization_2 0)) (begin (set! _with-optimization_2 (lambda (_level_3 _thunk_3) (_thunk_3))) (_with-optimization_2 _level_1 _thunk_1))))) 'with-optimization))
(let () (begin (set! call-with-error-control (lambda (_thunk1_1 _thunk2_1) (let ((_call-with-error-control_2 0)) (begin (set! _call-with-error-control_2 (lambda (_thunk1_3 _thunk2_3) (let ((_eh_6 (error-handler))) (begin (error-handler (lambda _args_7 (begin (error-handler _eh_6) (_thunk2_3) (apply _eh_6 _args_7)))) (_thunk1_3) (error-handler _eh_6))))) (_call-with-error-control_2 _thunk1_1 _thunk2_1))))) 'call-with-error-control))
(let () (begin (set! larc-new-extension (lambda (_fn_1 _ext_1) (let ((_larc-new-extension_2 0)) (begin (set! _larc-new-extension_2 (lambda (_fn_3 _ext_3) (let* ((_l_6 (string-length _fn_3)) (_x_9 (let ((_i_15 (- _l_6 1))) (let () (let ((_loop_18 (unspecified))) (begin (set! _loop_18 (lambda (_i_19) (if (< _i_19 0) #f (if (char=? (string-ref _fn_3 _i_19) #\_) (+ _i_19 1) (_loop_18 (- _i_19 1)))))) (_loop_18 _i_15))))))) (let () (if (not _x_9) (string-append _fn_3 "_" _ext_3) (string-append (substring _fn_3 0 _x_9) _ext_3)))))) (_larc-new-extension_2 _fn_1 _ext_1))))) 'larc-new-extension))
(let () (begin (set! compat:load (lambda (_filename_1) (let ((_compat:load_2 0)) (begin (set! _compat:load_2 (lambda (_filename_3) (let ((_loadit_4 (unspecified))) (begin (set! _loadit_4 (lambda (_fn_5) (begin (if (nbuild-parameter 'verbose-load?) (format #t "~a~%" _fn_5) (unspecified)) (load _fn_5)))) (if (nbuild-parameter 'always-source?) (_loadit_4 _filename_3) (let ((_fn_8 (larc-new-extension _filename_3 "fasl"))) (if (if (file-exists? _fn_8) (compat:file-newer? _fn_8 _filename_3) #f) (_loadit_4 _fn_8) (_loadit_4 _filename_3)))))))) (_compat:load_2 _filename_1))))) 'compat:load))
(let () (begin (set! compat:file-newer? (lambda (_a_1 _b_1) (let ((_compat:file-newer?_2 0)) (begin (set! _compat:file-newer?_2 (lambda (_a_3 _b_3) (let* ((_ta_6 (file-modification-time _a_3)) (_tb_9 (file-modification-time _b_3)) (_limit_12 (let ((_v_42_45 _ta_6)) (begin (_check! (vector? _v_42_45) 42 _v_42_45) (vector-length:vec _v_42_45))))) (let () (let ((_i_18 0)) (let () (let ((_loop_21 (unspecified))) (begin (set! _loop_21 (lambda (_i_22) (if (= _i_22 _limit_12) #f (if (= (let ((_v_25_28 _ta_6) (_i_25_28 _i_22)) (begin (_check! (fixnum? _i_25_28) 40 _v_25_28 _i_25_28) (_check! (vector? _v_25_28) 40 _v_25_28 _i_25_28) (_check! (<:fix:fix _i_25_28 (vector-length:vec _v_25_28)) 40 _v_25_28 _i_25_28) (_check! (>=:fix:fix _i_25_28 0) 40 _v_25_28 _i_25_28) (vector-ref:trusted _v_25_28 _i_25_28))) (let ((_v_29_32 _tb_9) (_i_29_32 _i_22)) (begin (_check! (fixnum? _i_29_32) 40 _v_29_32 _i_29_32) (_check! (vector? _v_29_32) 40 _v_29_32 _i_29_32) (_check! (<:fix:fix _i_29_32 (vector-length:vec _v_29_32)) 40 _v_29_32 _i_29_32) (_check! (>=:fix:fix _i_29_32 0) 40 _v_29_32 _i_29_32) (vector-ref:trusted _v_29_32 _i_29_32)))) (_loop_21 (+ _i_22 1)) (> (let ((_v_34_37 _ta_6) (_i_34_37 _i_22)) (begin (_check! (fixnum? _i_34_37) 40 _v_34_37 _i_34_37) (_check! (vector? _v_34_37) 40 _v_34_37 _i_34_37) (_check! (<:fix:fix _i_34_37 (vector-length:vec _v_34_37)) 40 _v_34_37 _i_34_37) (_check! (>=:fix:fix _i_34_37 0) 40 _v_34_37 _i_34_37) (vector-ref:trusted _v_34_37 _i_34_37))) (let ((_v_38_41 _tb_9) (_i_38_41 _i_22)) (begin (_check! (fixnum? _i_38_41) 40 _v_38_41 _i_38_41) (_check! (vector? _v_38_41) 40 _v_38_41 _i_38_41) (_check! (<:fix:fix _i_38_41 (vector-length:vec _v_38_41)) 40 _v_38_41 _i_38_41) (_check! (>=:fix:fix _i_38_41 0) 40 _v_38_41 _i_38_41) (vector-ref:trusted _v_38_41 _i_38_41)))))))) (_loop_21 _i_18))))))))) (_compat:file-newer?_2 _a_1 _b_1))))) 'compat:file-newer?))
(let () (begin (set! host-system 'larceny) 'host-system))
(let () (begin (set! compat:sort (lambda (_list_1 _less?_1) (sort _list_1 _less?_1))) 'compat:sort))
(let () (begin (set! compat:char->integer char->integer) 'compat:char->integer))
(let () (begin (set! write-lop (lambda (_item_1 _port_1) (let ((_write-lop_2 0)) (begin (set! _write-lop_2 (lambda (_item_3 _port_3) (begin (lowlevel-write _item_3 _port_3) (newline _port_3) (newline _port_3)))) (_write-lop_2 _item_1 _port_1))))) 'write-lop))
(let () (begin (set! write-fasl-datum lowlevel-write) 'write-fasl-datum))
(let () (begin (set! misc->bytevector (lambda (_x_1) (let ((_misc->bytevector_2 0)) (begin (set! _misc->bytevector_2 (lambda (_x_3) (let ((_bv_6 (bytevector-like-copy _x_3))) (begin (typetag-set! _bv_6 $tag_bytevector-typetag) _bv_6)))) (_misc->bytevector_2 _x_1))))) 'misc->bytevector))
(let () (begin (set! string->bytevector misc->bytevector) 'string->bytevector))
(let () (begin (set! bignum->bytevector misc->bytevector) 'bignum->bytevector))
(let () (begin (set! flonum->bytevector (lambda (_x_1) (let ((_flonum->bytevector_2 0)) (begin (set! _flonum->bytevector_2 (lambda (_x_3) (clear-first-word (misc->bytevector _x_3)))) (_flonum->bytevector_2 _x_1))))) 'flonum->bytevector))
(let () (begin (set! compnum->bytevector (lambda (_x_1) (let ((_compnum->bytevector_2 0)) (begin (set! _compnum->bytevector_2 (lambda (_x_3) (clear-first-word (misc->bytevector _x_3)))) (_compnum->bytevector_2 _x_1))))) 'compnum->bytevector))
(let () (begin (set! clear-first-word (lambda (_bv_1) (let ((_clear-first-word_2 0)) (begin (set! _clear-first-word_2 (lambda (_bv_3) (begin (bytevector-like-set! _bv_3 0 0) (bytevector-like-set! _bv_3 1 0) (bytevector-like-set! _bv_3 2 0) (bytevector-like-set! _bv_3 3 0) _bv_3))) (_clear-first-word_2 _bv_1))))) 'clear-first-word))
(let () (begin (set! list->bytevector (lambda (_l_1) (let ((_list->bytevector_2 0)) (begin (set! _list->bytevector_2 (lambda (_l_3) (let ((_b_6 (make-bytevector (length _l_3)))) (let () (let ((_loop_7_10_13 (unspecified))) (begin (set! _loop_7_10_13 (lambda (_i_14 _l_14) (if (null? _l_14) _b_6 (begin (begin #t (bytevector-set! _b_6 _i_14 (let ((_x_17_20 _l_14)) (begin (_check! (pair? _x_17_20) 0 _x_17_20) (car:pair _x_17_20))))) (_loop_7_10_13 (+ _i_14 1) (let ((_x_21_24 _l_14)) (begin (_check! (pair? _x_21_24) 1 _x_21_24) (cdr:pair _x_21_24)))))))) (_loop_7_10_13 0 _l_3))))))) (_list->bytevector_2 _l_1))))) 'list->bytevector))
(let () (begin (set! bytevector-word-ref (let ((_two^8_3 (expt 2 8)) (_two^16_3 (expt 2 16)) (_two^24_3 (expt 2 24))) (lambda (_bv_4 _i_4) (+ (+ (+ (* (bytevector-ref _bv_4 _i_4) _two^24_3) (* (bytevector-ref _bv_4 (+ _i_4 1)) _two^16_3)) (* (bytevector-ref _bv_4 (+ _i_4 2)) _two^8_3)) (bytevector-ref _bv_4 (+ _i_4 3)))))) 'bytevector-word-ref))
(let () (begin (set! twobit-format (lambda (_fmt_1 _ _rest_1) (let ((_out_4 (open-output-string))) (begin (apply format _out_4 _fmt_1 _rest_1) (get-output-string _out_4))))) 'twobit-format))
(let () (begin (set! an-arbitrary-number (lambda () (let ((_an-arbitrary-number_2 0)) (begin (set! _an-arbitrary-number_2 (lambda () (begin (system "echo \\\"`date`\\\" > a-random-number") (let ((_x_6 (string-hash (call-with-input-file "a-random-number" read)))) (begin (delete-file "a-random-number") _x_6))))) (_an-arbitrary-number_2))))) 'an-arbitrary-number))
(let () (begin (set! cerror error) 'cerror))
(let () (begin (set! empty-set (lambda () (let ((_empty-set_2 0)) (begin (set! _empty-set_2 (lambda () '())) (_empty-set_2))))) 'empty-set))
(let () (begin (set! empty-set? (lambda (_x_1) (let ((_empty-set?_2 0)) (begin (set! _empty-set?_2 (lambda (_x_3) (null? _x_3))) (_empty-set?_2 _x_1))))) 'empty-set?))
(let () (begin (set! make-set (lambda (_x_1) (let ((_make-set_2 0)) (begin (set! _make-set_2 (lambda (_x_3) (let ((_loop_4 (unspecified))) (begin (set! _loop_4 (lambda (_x_5 _y_5) (if (null? _x_5) _y_5 (if (member (let ((_x_8_11 _x_5)) (begin (_check! (pair? _x_8_11) 0 _x_8_11) (car:pair _x_8_11))) _y_5) (_loop_4 (let ((_x_12_15 _x_5)) (begin (_check! (pair? _x_12_15) 1 _x_12_15) (cdr:pair _x_12_15))) _y_5) (_loop_4 (let ((_x_17_20 _x_5)) (begin (_check! (pair? _x_17_20) 1 _x_17_20) (cdr:pair _x_17_20))) (cons (let ((_x_21_24 _x_5)) (begin (_check! (pair? _x_21_24) 0 _x_21_24) (car:pair _x_21_24))) _y_5)))))) (_loop_4 _x_3 '()))))) (_make-set_2 _x_1))))) 'make-set))
(let () (begin (set! set-equal? (lambda (_x_1 _y_1) (let ((_set-equal?_2 0)) (begin (set! _set-equal?_2 (lambda (_x_3 _y_3) (if (subset? _x_3 _y_3) (subset? _y_3 _x_3) #f))) (_set-equal?_2 _x_1 _y_1))))) 'set-equal?))
(let () (begin (set! subset? (lambda (_x_1 _y_1) (let ((_subset?_2 0)) (begin (set! _subset?_2 (lambda (_x_3 _y_3) (every? (lambda (_x_4) (member _x_4 _y_3)) _x_3))) (_subset?_2 _x_1 _y_1))))) 'subset?))
(let () (begin (set! apply-union (undefined)) 'apply-union))
(let () (begin (set! union (let () (let ((_union2_3 (unspecified))) (begin (set! _union2_3 (lambda (_x_4 _y_4) (if (null? _x_4) _y_4 (if (member (let ((_x_7_10 _x_4)) (begin (_check! (pair? _x_7_10) 0 _x_7_10) (car:pair _x_7_10))) _y_4) (_union2_3 (let ((_x_11_14 _x_4)) (begin (_check! (pair? _x_11_14) 1 _x_11_14) (cdr:pair _x_11_14))) _y_4) (_union2_3 (let ((_x_16_19 _x_4)) (begin (_check! (pair? _x_16_19) 1 _x_16_19) (cdr:pair _x_16_19))) (cons (let ((_x_20_23 _x_4)) (begin (_check! (pair? _x_20_23) 0 _x_20_23) (car:pair _x_20_23))) _y_4)))))) (set! apply-union (lambda (_sets_24) (let () (let ((_loop_25_28_31 (unspecified))) (begin (set! _loop_25_28_31 (lambda (_sets_32 _result_32) (if (null? _sets_32) _result_32 (begin #t (_loop_25_28_31 (let ((_x_35_38 _sets_32)) (begin (_check! (pair? _x_35_38) 1 _x_35_38) (cdr:pair _x_35_38))) (_union2_3 (let ((_x_39_42 _sets_32)) (begin (_check! (pair? _x_39_42) 0 _x_39_42) (car:pair _x_39_42))) _result_32)))))) (_loop_25_28_31 _sets_24 '())))))) (lambda _args_43 (if (null? _args_43) '() (if (null? (let ((_x_46_49 _args_43)) (begin (_check! (pair? _x_46_49) 1 _x_46_49) (cdr:pair _x_46_49)))) (let ((_x_50_53 _args_43)) (begin (_check! (pair? _x_50_53) 0 _x_50_53) (car:pair _x_50_53))) (if (null? (let ((_x_56_59 (let ((_x_60_63 _args_43)) (begin (_check! (pair? _x_60_63) 1 _x_60_63) (cdr:pair _x_60_63))))) (begin (_check! (pair? _x_56_59) 1 _x_56_59) (cdr:pair _x_56_59)))) (_union2_3 (let ((_x_64_67 _args_43)) (begin (_check! (pair? _x_64_67) 0 _x_64_67) (car:pair _x_64_67))) (let ((_x_69_72 (let ((_x_73_76 _args_43)) (begin (_check! (pair? _x_73_76) 1 _x_73_76) (cdr:pair _x_73_76))))) (begin (_check! (pair? _x_69_72) 0 _x_69_72) (car:pair _x_69_72)))) (_union2_3 (_union2_3 (let ((_x_78_81 _args_43)) (begin (_check! (pair? _x_78_81) 0 _x_78_81) (car:pair _x_78_81))) (let ((_x_83_86 (let ((_x_87_90 _args_43)) (begin (_check! (pair? _x_87_90) 1 _x_87_90) (cdr:pair _x_87_90))))) (begin (_check! (pair? _x_83_86) 0 _x_83_86) (car:pair _x_83_86)))) (apply union (let ((_x_92_95 (let ((_x_96_99 _args_43)) (begin (_check! (pair? _x_96_99) 1 _x_96_99) (cdr:pair _x_96_99))))) (begin (_check! (pair? _x_92_95) 1 _x_92_95) (cdr:pair _x_92_95))))))))))))) 'union))
(let () (begin (set! intersection (let () (let ((_intersection2_3 (unspecified))) (begin (set! _intersection2_3 (lambda (_x_4 _y_4) (if (null? _x_4) '() (if (member (let ((_x_7_10 _x_4)) (begin (_check! (pair? _x_7_10) 0 _x_7_10) (car:pair _x_7_10))) _y_4) (cons (let ((_x_11_14 _x_4)) (begin (_check! (pair? _x_11_14) 0 _x_11_14) (car:pair _x_11_14))) (_intersection2_3 (let ((_x_15_18 _x_4)) (begin (_check! (pair? _x_15_18) 1 _x_15_18) (cdr:pair _x_15_18))) _y_4)) (_intersection2_3 (let ((_x_20_23 _x_4)) (begin (_check! (pair? _x_20_23) 1 _x_20_23) (cdr:pair _x_20_23))) _y_4))))) (lambda _args_24 (if (null? _args_24) '() (if (null? (let ((_x_27_30 _args_24)) (begin (_check! (pair? _x_27_30) 1 _x_27_30) (cdr:pair _x_27_30)))) (let ((_x_31_34 _args_24)) (begin (_check! (pair? _x_31_34) 0 _x_31_34) (car:pair _x_31_34))) (if (null? (let ((_x_37_40 (let ((_x_41_44 _args_24)) (begin (_check! (pair? _x_41_44) 1 _x_41_44) (cdr:pair _x_41_44))))) (begin (_check! (pair? _x_37_40) 1 _x_37_40) (cdr:pair _x_37_40)))) (_intersection2_3 (let ((_x_45_48 _args_24)) (begin (_check! (pair? _x_45_48) 0 _x_45_48) (car:pair _x_45_48))) (let ((_x_50_53 (let ((_x_54_57 _args_24)) (begin (_check! (pair? _x_54_57) 1 _x_54_57) (cdr:pair _x_54_57))))) (begin (_check! (pair? _x_50_53) 0 _x_50_53) (car:pair _x_50_53)))) (_intersection2_3 (_intersection2_3 (let ((_x_59_62 _args_24)) (begin (_check! (pair? _x_59_62) 0 _x_59_62) (car:pair _x_59_62))) (let ((_x_64_67 (let ((_x_68_71 _args_24)) (begin (_check! (pair? _x_68_71) 1 _x_68_71) (cdr:pair _x_68_71))))) (begin (_check! (pair? _x_64_67) 0 _x_64_67) (car:pair _x_64_67)))) (apply intersection (let ((_x_73_76 (let ((_x_77_80 _args_24)) (begin (_check! (pair? _x_77_80) 1 _x_77_80) (cdr:pair _x_77_80))))) (begin (_check! (pair? _x_73_76) 1 _x_73_76) (cdr:pair _x_73_76))))))))))))) 'intersection))
(let () (begin (set! difference (lambda (_x_1 _y_1) (let ((_difference_2 0)) (begin (set! _difference_2 (lambda (_x_3 _y_3) (if (null? _x_3) '() (if (member (let ((_x_6_9 _x_3)) (begin (_check! (pair? _x_6_9) 0 _x_6_9) (car:pair _x_6_9))) _y_3) (_difference_2 (let ((_x_10_13 _x_3)) (begin (_check! (pair? _x_10_13) 1 _x_10_13) (cdr:pair _x_10_13))) _y_3) (cons (let ((_x_15_18 _x_3)) (begin (_check! (pair? _x_15_18) 0 _x_15_18) (car:pair _x_15_18))) (_difference_2 (let ((_x_19_22 _x_3)) (begin (_check! (pair? _x_19_22) 1 _x_19_22) (cdr:pair _x_19_22))) _y_3)))))) (_difference_2 _x_1 _y_1))))) 'difference))
(let () (begin (set! object-hash (lambda (_x_1) 0)) 'object-hash))
(let () (begin (set! equal-hash (lambda (_x_1) 0)) 'equal-hash))
(let () (let ((_n_3 16777216) (_n-1_3 16777215) (_adj:fixnum_3 9000000) (_adj:negative_3 8000000) (_adj:large_3 7900000) (_adj:ratnum_3 7800000) (_adj:complex_3 7700000) (_adj:flonum_3 7000000) (_adj:compnum_3 6900000) (_adj:char_3 6111000) (_adj:string_3 5022200) (_adj:vector_3 4003330) (_adj:misc_3 3000444) (_adj:pair_3 2555000) (_adj:proc_3 2321001) (_adj:iport_3 2321002) (_adj:oport_3 2321003) (_adj:weird_3 2321004) (_budget0_3 32)) (let ((_hash-on-equal_4 (unspecified)) (_combine_4 (unspecified))) (begin (set! _hash-on-equal_4 (lambda (_x_5 _budget_5) (if (> _budget_5 0) (if (string? _x_5) (string-hash _x_5) (if (pair? _x_5) (let ((_budget_10 (quotient _budget_5 2))) (_combine_4 (_hash-on-equal_4 (let ((_x_11_14 _x_5)) (begin (_check! (pair? _x_11_14) 0 _x_11_14) (car:pair _x_11_14))) _budget_10) (_hash-on-equal_4 (let ((_x_15_18 _x_5)) (begin (_check! (pair? _x_15_18) 1 _x_15_18) (cdr:pair _x_15_18))) _budget_10))) (if (vector? _x_5) (let ((_n_22 (let ((_v_35_38 _x_5)) (begin (_check! (vector? _v_35_38) 42 _v_35_38) (vector-length:vec _v_35_38)))) (_budget_22 (quotient _budget_5 4))) (if (> _n_22 0) (_combine_4 (_combine_4 (_hash-on-equal_4 (let ((_v_23_26 _x_5) (_i_23_26 0)) (begin (_check! (fixnum? _i_23_26) 40 _v_23_26 _i_23_26) (_check! (vector? _v_23_26) 40 _v_23_26 _i_23_26) (_check! (<:fix:fix _i_23_26 (vector-length:vec _v_23_26)) 40 _v_23_26 _i_23_26) (_check! (>=:fix:fix _i_23_26 0) 40 _v_23_26 _i_23_26) (vector-ref:trusted _v_23_26 _i_23_26))) _budget_22) (_hash-on-equal_4 (let ((_v_27_30 _x_5) (_i_27_30 (- _n_22 1))) (begin (_check! (fixnum? _i_27_30) 40 _v_27_30 _i_27_30) (_check! (vector? _v_27_30) 40 _v_27_30 _i_27_30) (_check! (<:fix:fix _i_27_30 (vector-length:vec _v_27_30)) 40 _v_27_30 _i_27_30) (_check! (>=:fix:fix _i_27_30 0) 40 _v_27_30 _i_27_30) (vector-ref:trusted _v_27_30 _i_27_30))) _budget_22)) (_hash-on-equal_4 (let ((_v_31_34 _x_5) (_i_31_34 (quotient _n_22 2))) (begin (_check! (fixnum? _i_31_34) 40 _v_31_34 _i_31_34) (_check! (vector? _v_31_34) 40 _v_31_34 _i_31_34) (_check! (<:fix:fix _i_31_34 (vector-length:vec _v_31_34)) 40 _v_31_34 _i_31_34) (_check! (>=:fix:fix _i_31_34 0) 40 _v_31_34 _i_31_34) (vector-ref:trusted _v_31_34 _i_31_34))) (+ _budget_22 _budget_22))) _adj:vector_3)) (object-hash _x_5)))) _adj:weird_3))) (set! _combine_4 (lambda (_hash_40 _adjustment_40) (modulo (+ (+ (+ _hash_40 _hash_40) _hash_40) _adjustment_40) 16777216))) (set! object-hash (lambda (_x_43) (if (symbol? _x_43) (symbol-hash _x_43) (if (number? _x_43) (if (exact? _x_43) (if (integer? _x_43) (if (< _x_43 0) (_combine_4 (object-hash (- 0 _x_43)) _adj:negative_3) (if (< _x_43 _n_3) (_combine_4 _x_43 _adj:fixnum_3) (_combine_4 (modulo _x_43 _n_3) _adj:large_3))) (if (rational? _x_43) (_combine_4 (_combine_4 (object-hash (numerator _x_43)) _adj:ratnum_3) (object-hash (denominator _x_43))) (if (real? _x_43) _adj:weird_3 (if (complex? _x_43) (_combine_4 (_combine_4 (object-hash (real-part _x_43)) _adj:complex_3) (object-hash (imag-part _x_43))) _adj:weird_3)))) (if #t _adj:flonum_3 (if (rational? _x_43) (_combine_4 (_combine_4 (object-hash (inexact->exact (numerator _x_43))) _adj:flonum_3) (object-hash (inexact->exact (denominator _x_43)))) (if (real? _x_43) _adj:weird_3 (if (complex? _x_43) (_combine_4 (_combine_4 (object-hash (real-part _x_43)) _adj:compnum_3) (object-hash (imag-part _x_43))) _adj:weird_3))))) (if (char? _x_43) (_combine_4 (char->integer _x_43) _adj:char_3) (if (string? _x_43) (_combine_4 (string-length _x_43) _adj:string_3) (if (vector? _x_43) (_combine_4 (let ((_v_64_67 _x_43)) (begin (_check! (vector? _v_64_67) 42 _v_64_67) (vector-length:vec _v_64_67))) _adj:vector_3) (if (eq? _x_43 #t) (_combine_4 1 _adj:misc_3) (if (eq? _x_43 #f) (_combine_4 2 _adj:misc_3) (if (null? _x_43) (_combine_4 3 _adj:misc_3) (if (pair? _x_43) _adj:pair_3 (if (procedure? _x_43) _adj:proc_3 (if (input-port? _x_43) _adj:iport_3 (if (output-port? _x_43) _adj:oport_3 _adj:weird_3)))))))))))))) (set! equal-hash (lambda (_x_76) (_hash-on-equal_4 _x_76 _budget0_3)))))))
(let () (begin (set! make-hashtable (lambda _args_1 '*)) 'make-hashtable))
(let () (begin (set! hashtable-contains? (lambda (_ht_1 _key_1) #f)) 'hashtable-contains?))
(let () (begin (set! hashtable-fetch (lambda (_ht_1 _key_1 _flag_1) _flag_1)) 'hashtable-fetch))
(let () (begin (set! hashtable-get (lambda (_ht_1 _key_1) (hashtable-fetch _ht_1 _key_1 #f))) 'hashtable-get))
(let () (begin (set! hashtable-put! (lambda (_ht_1 _key_1 _val_1) '*)) 'hashtable-put!))
(let () (begin (set! hashtable-remove! (lambda (_ht_1 _key_1) '*)) 'hashtable-remove!))
(let () (begin (set! hashtable-clear! (lambda (_ht_1) '*)) 'hashtable-clear!))
(let () (begin (set! hashtable-size (lambda (_ht_1) 0)) 'hashtable-size))
(let () (begin (set! hashtable-for-each (lambda (_ht_1 _proc_1) '*)) 'hashtable-for-each))
(let () (begin (set! hashtable-map (lambda (_ht_1 _proc_1) '())) 'hashtable-map))
(let () (begin (set! hashtable-copy (lambda (_ht_1) _ht_1)) 'hashtable-copy))
(let () (let ((_doc_3 (cons "HASHTABLE" '())) (_count_3 (lambda (_ht_484) (let ((_v_485_488 _ht_484) (_i_485_488 1)) (begin (_check! (fixnum? _i_485_488) 40 _v_485_488 _i_485_488) (_check! (vector? _v_485_488) 40 _v_485_488 _i_485_488) (_check! (<:fix:fix _i_485_488 (vector-length:vec _v_485_488)) 40 _v_485_488 _i_485_488) (_check! (>=:fix:fix _i_485_488 0) 40 _v_485_488 _i_485_488) (vector-ref:trusted _v_485_488 _i_485_488))))) (_count!_3 (lambda (_ht_489 _n_489) (let ((_v_490_493 _ht_489) (_i_490_493 1) (_x_490_493 _n_489)) (begin (_check! (fixnum? _i_490_493) 41 _v_490_493 _i_490_493 _x_490_493) (_check! (vector? _v_490_493) 41 _v_490_493 _i_490_493 _x_490_493) (_check! (<:fix:fix _i_490_493 (vector-length:vec _v_490_493)) 41 _v_490_493 _i_490_493 _x_490_493) (_check! (>=:fix:fix _i_490_493 0) 41 _v_490_493 _i_490_493 _x_490_493) (vector-set!:trusted _v_490_493 _i_490_493 _x_490_493))))) (_hasher_3 (lambda (_ht_494) (let ((_v_495_498 _ht_494) (_i_495_498 2)) (begin (_check! (fixnum? _i_495_498) 40 _v_495_498 _i_495_498) (_check! (vector? _v_495_498) 40 _v_495_498 _i_495_498) (_check! (<:fix:fix _i_495_498 (vector-length:vec _v_495_498)) 40 _v_495_498 _i_495_498) (_check! (>=:fix:fix _i_495_498 0) 40 _v_495_498 _i_495_498) (vector-ref:trusted _v_495_498 _i_495_498))))) (_searcher_3 (lambda (_ht_499) (let ((_v_500_503 _ht_499) (_i_500_503 3)) (begin (_check! (fixnum? _i_500_503) 40 _v_500_503 _i_500_503) (_check! (vector? _v_500_503) 40 _v_500_503 _i_500_503) (_check! (<:fix:fix _i_500_503 (vector-length:vec _v_500_503)) 40 _v_500_503 _i_500_503) (_check! (>=:fix:fix _i_500_503 0) 40 _v_500_503 _i_500_503) (vector-ref:trusted _v_500_503 _i_500_503))))) (_buckets_3 (lambda (_ht_504) (let ((_v_505_508 _ht_504) (_i_505_508 4)) (begin (_check! (fixnum? _i_505_508) 40 _v_505_508 _i_505_508) (_check! (vector? _v_505_508) 40 _v_505_508 _i_505_508) (_check! (<:fix:fix _i_505_508 (vector-length:vec _v_505_508)) 40 _v_505_508 _i_505_508) (_check! (>=:fix:fix _i_505_508 0) 40 _v_505_508 _i_505_508) (vector-ref:trusted _v_505_508 _i_505_508))))) (_buckets!_3 (lambda (_ht_509 _v_509) (let ((_v_510_513 _ht_509) (_i_510_513 4) (_x_510_513 _v_509)) (begin (_check! (fixnum? _i_510_513) 41 _v_510_513 _i_510_513 _x_510_513) (_check! (vector? _v_510_513) 41 _v_510_513 _i_510_513 _x_510_513) (_check! (<:fix:fix _i_510_513 (vector-length:vec _v_510_513)) 41 _v_510_513 _i_510_513 _x_510_513) (_check! (>=:fix:fix _i_510_513 0) 41 _v_510_513 _i_510_513 _x_510_513) (vector-set!:trusted _v_510_513 _i_510_513 _x_510_513))))) (_defaultn_3 10)) (let ((_hashtable?_6 (lambda (_ht_470) (if (vector? _ht_470) (if (= 5 (let ((_v_473_476 _ht_470)) (begin (_check! (vector? _v_473_476) 42 _v_473_476) (vector-length:vec _v_473_476)))) (eq? _doc_3 (let ((_v_478_481 _ht_470) (_i_478_481 0)) (begin (_check! (fixnum? _i_478_481) 40 _v_478_481 _i_478_481) (_check! (vector? _v_478_481) 40 _v_478_481 _i_478_481) (_check! (<:fix:fix _i_478_481 (vector-length:vec _v_478_481)) 40 _v_478_481 _i_478_481) (_check! (>=:fix:fix _i_478_481 0) 40 _v_478_481 _i_478_481) (vector-ref:trusted _v_478_481 _i_478_481)))) #f) #f))) (_hashtable-error_6 (lambda (_x_482) (begin (display "ERROR: Bad hash table: ") (newline) (write _x_482) (newline))))) (let ((_ht-copy_7 (unspecified)) (_ht-map_7 (unspecified)) (_ht-for-each_7 (unspecified)) (_size_7 (unspecified)) (_clear!_7 (unspecified)) (_remove!_7 (unspecified)) (_put!_7 (unspecified)) (_fetch_7 (unspecified)) (_contains?_7 (unspecified)) (_contents_7 (unspecified)) (_resize_7 (unspecified)) (_remq1_7 (unspecified)) (_substitute1_7 (unspecified)) (_make-ht_7 (unspecified))) (begin (set! _ht-copy_7 (lambda (_ht_8) (if (_hashtable?_6 _ht_8) (let* ((_newtable_11 (make-hashtable (_hasher_3 _ht_8) (_searcher_3 _ht_8) 0)) (_v_14 (_buckets_3 _ht_8)) (_n_17 (let ((_v_42_45 _v_14)) (begin (_check! (vector? _v_42_45) 42 _v_42_45) (vector-length:vec _v_42_45)))) (_newvector_20 (make-vector _n_17 '()))) (let () (begin (_count!_3 _newtable_11 (_count_3 _ht_8)) (_buckets!_3 _newtable_11 _newvector_20) (let () (let ((_loop_25_27_30 (unspecified))) (begin (set! _loop_25_27_30 (lambda (_i_31) (if (= _i_31 _n_17) (if #f #f (unspecified)) (begin (begin #t (let ((_v_34_37 _newvector_20) (_i_34_37 _i_31) (_x_34_37 (append (let ((_v_38_41 _v_14) (_i_38_41 _i_31)) (begin (_check! (fixnum? _i_38_41) 40 _v_38_41 _i_38_41) (_check! (vector? _v_38_41) 40 _v_38_41 _i_38_41) (_check! (<:fix:fix _i_38_41 (vector-length:vec _v_38_41)) 40 _v_38_41 _i_38_41) (_check! (>=:fix:fix _i_38_41 0) 40 _v_38_41 _i_38_41) (vector-ref:trusted _v_38_41 _i_38_41))) '()))) (begin (_check! (fixnum? _i_34_37) 41 _v_34_37 _i_34_37 _x_34_37) (_check! (vector? _v_34_37) 41 _v_34_37 _i_34_37 _x_34_37) (_check! (<:fix:fix _i_34_37 (vector-length:vec _v_34_37)) 41 _v_34_37 _i_34_37 _x_34_37) (_check! (>=:fix:fix _i_34_37 0) 41 _v_34_37 _i_34_37 _x_34_37) (vector-set!:trusted _v_34_37 _i_34_37 _x_34_37)))) (_loop_25_27_30 (+ _i_31 1)))))) (_loop_25_27_30 0)))) _newtable_11))) (_hashtable-error_6 _ht_8)))) (set! _ht-map_7 (lambda (_f_46 _ht_46) (if (_hashtable?_6 _ht_46) (let* ((_v_49 (_contents_7 _ht_46)) (_n_52 (let ((_v_81_84 _v_49)) (begin (_check! (vector? _v_81_84) 42 _v_81_84) (vector-length:vec _v_81_84))))) (let () (let () (let ((_loop_56_59_62 (unspecified))) (begin (set! _loop_56_59_62 (lambda (_j_63 _results_63) (if (= _j_63 _n_52) (reverse _results_63) (begin #t (_loop_56_59_62 (+ _j_63 1) (let ((_x_68 (let ((_v_77_80 _v_49) (_i_77_80 _j_63)) (begin (_check! (fixnum? _i_77_80) 40 _v_77_80 _i_77_80) (_check! (vector? _v_77_80) 40 _v_77_80 _i_77_80) (_check! (<:fix:fix _i_77_80 (vector-length:vec _v_77_80)) 40 _v_77_80 _i_77_80) (_check! (>=:fix:fix _i_77_80 0) 40 _v_77_80 _i_77_80) (vector-ref:trusted _v_77_80 _i_77_80))))) (cons (_f_46 (let ((_x_69_72 _x_68)) (begin (_check! (pair? _x_69_72) 0 _x_69_72) (car:pair _x_69_72))) (let ((_x_73_76 _x_68)) (begin (_check! (pair? _x_73_76) 1 _x_73_76) (cdr:pair _x_73_76)))) _results_63))))))) (_loop_56_59_62 0 '())))))) (_hashtable-error_6 _ht_46)))) (set! _ht-for-each_7 (lambda (_f_85 _ht_85) (if (_hashtable?_6 _ht_85) (let* ((_v_88 (_contents_7 _ht_85)) (_n_91 (let ((_v_120_123 _v_88)) (begin (_check! (vector? _v_120_123) 42 _v_120_123) (vector-length:vec _v_120_123))))) (let () (let () (let ((_loop_96_98_101 (unspecified))) (begin (set! _loop_96_98_101 (lambda (_j_102) (if (= _j_102 _n_91) (if #f #f (unspecified)) (begin (begin #t (let ((_x_107 (let ((_v_116_119 _v_88) (_i_116_119 _j_102)) (begin (_check! (fixnum? _i_116_119) 40 _v_116_119 _i_116_119) (_check! (vector? _v_116_119) 40 _v_116_119 _i_116_119) (_check! (<:fix:fix _i_116_119 (vector-length:vec _v_116_119)) 40 _v_116_119 _i_116_119) (_check! (>=:fix:fix _i_116_119 0) 40 _v_116_119 _i_116_119) (vector-ref:trusted _v_116_119 _i_116_119))))) (_f_85 (let ((_x_108_111 _x_107)) (begin (_check! (pair? _x_108_111) 0 _x_108_111) (car:pair _x_108_111))) (let ((_x_112_115 _x_107)) (begin (_check! (pair? _x_112_115) 1 _x_112_115) (cdr:pair _x_112_115)))))) (_loop_96_98_101 (+ _j_102 1)))))) (_loop_96_98_101 0)))))) (_hashtable-error_6 _ht_85)))) (set! _size_7 (lambda (_ht_124) (if (_hashtable?_6 _ht_124) (_count_3 _ht_124) (_hashtable-error_6 _ht_124)))) (set! _clear!_7 (lambda (_ht_125) (if (_hashtable?_6 _ht_125) (call-without-interrupts (lambda () (begin (_count!_3 _ht_125 0) (_buckets!_3 _ht_125 (make-vector _defaultn_3 '())) #f))) (_hashtable-error_6 _ht_125)))) (set! _remove!_7 (lambda (_ht_127 _key_127) (if (_hashtable?_6 _ht_127) (call-without-interrupts (lambda () (let* ((_v_131 (_buckets_3 _ht_127)) (_n_134 (let ((_v_155_158 _v_131)) (begin (_check! (vector? _v_155_158) 42 _v_155_158) (vector-length:vec _v_155_158)))) (_h_137 (modulo ((_hasher_3 _ht_127) _key_127) _n_134)) (_b_140 (let ((_v_151_154 _v_131) (_i_151_154 _h_137)) (begin (_check! (fixnum? _i_151_154) 40 _v_151_154 _i_151_154) (_check! (vector? _v_151_154) 40 _v_151_154 _i_151_154) (_check! (<:fix:fix _i_151_154 (vector-length:vec _v_151_154)) 40 _v_151_154 _i_151_154) (_check! (>=:fix:fix _i_151_154 0) 40 _v_151_154 _i_151_154) (vector-ref:trusted _v_151_154 _i_151_154)))) (_probe_143 ((_searcher_3 _ht_127) _key_127 _b_140))) (let () (begin (if _probe_143 (begin (_count!_3 _ht_127 (- (_count_3 _ht_127) 1)) (let ((_v_147_150 _v_131) (_i_147_150 _h_137) (_x_147_150 (_remq1_7 _probe_143 _b_140))) (begin (_check! (fixnum? _i_147_150) 41 _v_147_150 _i_147_150 _x_147_150) (_check! (vector? _v_147_150) 41 _v_147_150 _i_147_150 _x_147_150) (_check! (<:fix:fix _i_147_150 (vector-length:vec _v_147_150)) 41 _v_147_150 _i_147_150 _x_147_150) (_check! (>=:fix:fix _i_147_150 0) 41 _v_147_150 _i_147_150 _x_147_150) (vector-set!:trusted _v_147_150 _i_147_150 _x_147_150))) (if (< (* 2 (+ _defaultn_3 (_count_3 _ht_127))) _n_134) (_resize_7 _ht_127) (unspecified))) (unspecified)) #f))))) (_hashtable-error_6 _ht_127)))) (set! _put!_7 (lambda (_ht_159 _key_159 _val_159) (if (_hashtable?_6 _ht_159) (call-without-interrupts (lambda () (begin (let* ((_v_163 (_buckets_3 _ht_159)) (_n_166 (let ((_v_191_194 _v_163)) (begin (_check! (vector? _v_191_194) 42 _v_191_194) (vector-length:vec _v_191_194)))) (_h_169 (modulo ((_hasher_3 _ht_159) _key_159) _n_166)) (_b_172 (let ((_v_187_190 _v_163) (_i_187_190 _h_169)) (begin (_check! (fixnum? _i_187_190) 40 _v_187_190 _i_187_190) (_check! (vector? _v_187_190) 40 _v_187_190 _i_187_190) (_check! (<:fix:fix _i_187_190 (vector-length:vec _v_187_190)) 40 _v_187_190 _i_187_190) (_check! (>=:fix:fix _i_187_190 0) 40 _v_187_190 _i_187_190) (vector-ref:trusted _v_187_190 _i_187_190)))) (_probe_175 ((_searcher_3 _ht_159) _key_159 _b_172))) (let () (if _probe_175 (let ((_v_179_182 _v_163) (_i_179_182 _h_169) (_x_179_182 (_substitute1_7 (cons _key_159 _val_159) _probe_175 _b_172))) (begin (_check! (fixnum? _i_179_182) 41 _v_179_182 _i_179_182 _x_179_182) (_check! (vector? _v_179_182) 41 _v_179_182 _i_179_182 _x_179_182) (_check! (<:fix:fix _i_179_182 (vector-length:vec _v_179_182)) 41 _v_179_182 _i_179_182 _x_179_182) (_check! (>=:fix:fix _i_179_182 0) 41 _v_179_182 _i_179_182 _x_179_182) (vector-set!:trusted _v_179_182 _i_179_182 _x_179_182))) (begin (_count!_3 _ht_159 (+ (_count_3 _ht_159) 1)) (let ((_v_183_186 _v_163) (_i_183_186 _h_169) (_x_183_186 (cons (cons _key_159 _val_159) _b_172))) (begin (_check! (fixnum? _i_183_186) 41 _v_183_186 _i_183_186 _x_183_186) (_check! (vector? _v_183_186) 41 _v_183_186 _i_183_186 _x_183_186) (_check! (<:fix:fix _i_183_186 (vector-length:vec _v_183_186)) 41 _v_183_186 _i_183_186 _x_183_186) (_check! (>=:fix:fix _i_183_186 0) 41 _v_183_186 _i_183_186 _x_183_186) (vector-set!:trusted _v_183_186 _i_183_186 _x_183_186))) (if (> (_count_3 _ht_159) _n_166) (_resize_7 _ht_159) (unspecified)))))) #f))) (_hashtable-error_6 _ht_159)))) (set! _fetch_7 (lambda (_ht_195 _key_195 _flag_195) (if (_hashtable?_6 _ht_195) (let* ((_v_198 (_buckets_3 _ht_195)) (_n_201 (let ((_v_222_225 _v_198)) (begin (_check! (vector? _v_222_225) 42 _v_222_225) (vector-length:vec _v_222_225)))) (_h_204 (modulo ((_hasher_3 _ht_195) _key_195) _n_201)) (_b_207 (let ((_v_218_221 _v_198) (_i_218_221 _h_204)) (begin (_check! (fixnum? _i_218_221) 40 _v_218_221 _i_218_221) (_check! (vector? _v_218_221) 40 _v_218_221 _i_218_221) (_check! (<:fix:fix _i_218_221 (vector-length:vec _v_218_221)) 40 _v_218_221 _i_218_221) (_check! (>=:fix:fix _i_218_221 0) 40 _v_218_221 _i_218_221) (vector-ref:trusted _v_218_221 _i_218_221)))) (_probe_210 ((_searcher_3 _ht_195) _key_195 _b_207))) (let () (if _probe_210 (let ((_x_214_217 _probe_210)) (begin (_check! (pair? _x_214_217) 1 _x_214_217) (cdr:pair _x_214_217))) _flag_195))) (_hashtable-error_6 _ht_195)))) (set! _contains?_7 (lambda (_ht_226 _key_226) (if (_hashtable?_6 _ht_226) (let* ((_v_229 (_buckets_3 _ht_226)) (_n_232 (let ((_v_246_249 _v_229)) (begin (_check! (vector? _v_246_249) 42 _v_246_249) (vector-length:vec _v_246_249)))) (_h_235 (modulo ((_hasher_3 _ht_226) _key_226) _n_232)) (_b_238 (let ((_v_242_245 _v_229) (_i_242_245 _h_235)) (begin (_check! (fixnum? _i_242_245) 40 _v_242_245 _i_242_245) (_check! (vector? _v_242_245) 40 _v_242_245 _i_242_245) (_check! (<:fix:fix _i_242_245 (vector-length:vec _v_242_245)) 40 _v_242_245 _i_242_245) (_check! (>=:fix:fix _i_242_245 0) 40 _v_242_245 _i_242_245) (vector-ref:trusted _v_242_245 _i_242_245))))) (let () (if ((_searcher_3 _ht_226) _key_226 _b_238) #t #f))) (_hashtable-error_6 _ht_226)))) (set! _contents_7 (lambda (_ht_250) (let* ((_v_253 (_buckets_3 _ht_250)) (_n_256 (let ((_v_296_299 _v_253)) (begin (_check! (vector? _v_296_299) 42 _v_296_299) (vector-length:vec _v_296_299)))) (_z_259 (make-vector (_count_3 _ht_250) '()))) (let () (let ((_loop_263 (unspecified))) (begin (set! _loop_263 (lambda (_i_264 _bucket_264 _j_264) (if (null? _bucket_264) (if (= _i_264 _n_256) (if (= _j_264 (let ((_v_265_268 _z_259)) (begin (_check! (vector? _v_265_268) 42 _v_265_268) (vector-length:vec _v_265_268)))) _z_259 (begin (display "BUG in hashtable") (newline) '#())) (_loop_263 (+ _i_264 1) (let ((_v_269_272 _v_253) (_i_269_272 _i_264)) (begin (_check! (fixnum? _i_269_272) 40 _v_269_272 _i_269_272) (_check! (vector? _v_269_272) 40 _v_269_272 _i_269_272) (_check! (<:fix:fix _i_269_272 (vector-length:vec _v_269_272)) 40 _v_269_272 _i_269_272) (_check! (>=:fix:fix _i_269_272 0) 40 _v_269_272 _i_269_272) (vector-ref:trusted _v_269_272 _i_269_272))) _j_264)) (let ((_entry_275 (let ((_x_292_295 _bucket_264)) (begin (_check! (pair? _x_292_295) 0 _x_292_295) (car:pair _x_292_295))))) (begin (let ((_v_276_279 _z_259) (_i_276_279 _j_264) (_x_276_279 (cons (let ((_x_280_283 _entry_275)) (begin (_check! (pair? _x_280_283) 0 _x_280_283) (car:pair _x_280_283))) (let ((_x_284_287 _entry_275)) (begin (_check! (pair? _x_284_287) 1 _x_284_287) (cdr:pair _x_284_287)))))) (begin (_check! (fixnum? _i_276_279) 41 _v_276_279 _i_276_279 _x_276_279) (_check! (vector? _v_276_279) 41 _v_276_279 _i_276_279 _x_276_279) (_check! (<:fix:fix _i_276_279 (vector-length:vec _v_276_279)) 41 _v_276_279 _i_276_279 _x_276_279) (_check! (>=:fix:fix _i_276_279 0) 41 _v_276_279 _i_276_279 _x_276_279) (vector-set!:trusted _v_276_279 _i_276_279 _x_276_279))) (_loop_263 _i_264 (let ((_x_288_291 _bucket_264)) (begin (_check! (pair? _x_288_291) 1 _x_288_291) (cdr:pair _x_288_291))) (+ _j_264 1))))))) (_loop_263 0 '() 0))))))) (set! _resize_7 (lambda (_ht0_300) (call-without-interrupts (lambda () (let ((_ht_304 (_make-ht_7 (_hasher_3 _ht0_300) (_searcher_3 _ht0_300) (+ 1 (* 2 (_count_3 _ht0_300)))))) (begin (_ht-for-each_7 (lambda (_key_305 _val_305) (_put!_7 _ht_304 _key_305 _val_305)) _ht0_300) (_buckets!_3 _ht0_300 (_buckets_3 _ht_304)))))))) (set! _remq1_7 (lambda (_x_306 _y_306) (if (eq? _x_306 (let ((_x_308_311 _y_306)) (begin (_check! (pair? _x_308_311) 0 _x_308_311) (car:pair _x_308_311)))) (let ((_x_312_315 _y_306)) (begin (_check! (pair? _x_312_315) 1 _x_312_315) (cdr:pair _x_312_315))) (cons (let ((_x_317_320 _y_306)) (begin (_check! (pair? _x_317_320) 0 _x_317_320) (car:pair _x_317_320))) (_remq1_7 _x_306 (let ((_x_321_324 _y_306)) (begin (_check! (pair? _x_321_324) 1 _x_321_324) (cdr:pair _x_321_324)))))))) (set! _substitute1_7 (lambda (_x_325 _y_325 _z_325) (if (eq? _y_325 (let ((_x_327_330 _z_325)) (begin (_check! (pair? _x_327_330) 0 _x_327_330) (car:pair _x_327_330)))) (cons _x_325 (let ((_x_331_334 _z_325)) (begin (_check! (pair? _x_331_334) 1 _x_331_334) (cdr:pair _x_331_334)))) (cons (let ((_x_336_339 _z_325)) (begin (_check! (pair? _x_336_339) 0 _x_336_339) (car:pair _x_336_339))) (_substitute1_7 _x_325 _y_325 (let ((_x_340_343 _z_325)) (begin (_check! (pair? _x_340_343) 1 _x_340_343) (cdr:pair _x_340_343)))))))) (set! _make-ht_7 (lambda (_hashfun_344 _searcher_344 _size_344) (let* ((_t_345_350_355 (make-vector _size_344 '())) (_t_345_349_358 _searcher_344) (_t_345_348_361 _hashfun_344) (_t_345_347_364 0) (_t_345_346_367 _doc_3) (_v_345_352_370 (make-vector 5 _t_345_350_355))) (let () (begin (let ((_v_374_377 _v_345_352_370) (_i_374_377 3) (_x_374_377 _t_345_349_358)) (begin (_check! (fixnum? _i_374_377) 41 _v_374_377 _i_374_377 _x_374_377) (_check! (vector? _v_374_377) 41 _v_374_377 _i_374_377 _x_374_377) (_check! (<:fix:fix _i_374_377 (vector-length:vec _v_374_377)) 41 _v_374_377 _i_374_377 _x_374_377) (_check! (>=:fix:fix _i_374_377 0) 41 _v_374_377 _i_374_377 _x_374_377) (vector-set!:trusted _v_374_377 _i_374_377 _x_374_377))) (let ((_v_378_381 _v_345_352_370) (_i_378_381 2) (_x_378_381 _t_345_348_361)) (begin (_check! (fixnum? _i_378_381) 41 _v_378_381 _i_378_381 _x_378_381) (_check! (vector? _v_378_381) 41 _v_378_381 _i_378_381 _x_378_381) (_check! (<:fix:fix _i_378_381 (vector-length:vec _v_378_381)) 41 _v_378_381 _i_378_381 _x_378_381) (_check! (>=:fix:fix _i_378_381 0) 41 _v_378_381 _i_378_381 _x_378_381) (vector-set!:trusted _v_378_381 _i_378_381 _x_378_381))) (let ((_v_382_385 _v_345_352_370) (_i_382_385 1) (_x_382_385 _t_345_347_364)) (begin (_check! (fixnum? _i_382_385) 41 _v_382_385 _i_382_385 _x_382_385) (_check! (vector? _v_382_385) 41 _v_382_385 _i_382_385 _x_382_385) (_check! (<:fix:fix _i_382_385 (vector-length:vec _v_382_385)) 41 _v_382_385 _i_382_385 _x_382_385) (_check! (>=:fix:fix _i_382_385 0) 41 _v_382_385 _i_382_385 _x_382_385) (vector-set!:trusted _v_382_385 _i_382_385 _x_382_385))) (let ((_v_386_389 _v_345_352_370) (_i_386_389 0) (_x_386_389 _t_345_346_367)) (begin (_check! (fixnum? _i_386_389) 41 _v_386_389 _i_386_389 _x_386_389) (_check! (vector? _v_386_389) 41 _v_386_389 _i_386_389 _x_386_389) (_check! (<:fix:fix _i_386_389 (vector-length:vec _v_386_389)) 41 _v_386_389 _i_386_389 _x_386_389) (_check! (>=:fix:fix _i_386_389 0) 41 _v_386_389 _i_386_389 _x_386_389) (vector-set!:trusted _v_386_389 _i_386_389 _x_386_389))) _v_345_352_370))))) (set! make-hashtable (lambda _args_390 (let* ((_hashfun_393 (if (null? _args_390) object-hash (let ((_x_456_459 _args_390)) (begin (_check! (pair? _x_456_459) 0 _x_456_459) (car:pair _x_456_459))))) (_searcher_396 (if (let ((_temp_438_441 (null? _args_390))) (if _temp_438_441 _temp_438_441 (null? (let ((_x_443_446 _args_390)) (begin (_check! (pair? _x_443_446) 1 _x_443_446) (cdr:pair _x_443_446)))))) assv (let ((_x_448_451 (let ((_x_452_455 _args_390)) (begin (_check! (pair? _x_452_455) 1 _x_452_455) (cdr:pair _x_452_455))))) (begin (_check! (pair? _x_448_451) 0 _x_448_451) (car:pair _x_448_451))))) (_size_399 (if (let ((_temp_403_406 (null? _args_390))) (if _temp_403_406 _temp_403_406 (let ((_temp_407_410 (null? (let ((_x_421_424 _args_390)) (begin (_check! (pair? _x_421_424) 1 _x_421_424) (cdr:pair _x_421_424)))))) (if _temp_407_410 _temp_407_410 (null? (let ((_x_413_416 (let ((_x_417_420 _args_390)) (begin (_check! (pair? _x_417_420) 1 _x_417_420) (cdr:pair _x_417_420))))) (begin (_check! (pair? _x_413_416) 1 _x_413_416) (cdr:pair _x_413_416)))))))) _defaultn_3 (let ((_x_426_429 (let ((_x_430_433 (let ((_x_434_437 _args_390)) (begin (_check! (pair? _x_434_437) 1 _x_434_437) (cdr:pair _x_434_437))))) (begin (_check! (pair? _x_430_433) 1 _x_430_433) (cdr:pair _x_430_433))))) (begin (_check! (pair? _x_426_429) 0 _x_426_429) (car:pair _x_426_429)))))) (let () (_make-ht_7 _hashfun_393 _searcher_396 _size_399))))) (set! hashtable-contains? (lambda (_ht_460 _key_460) (_contains?_7 _ht_460 _key_460))) (set! hashtable-fetch (lambda (_ht_461 _key_461 _flag_461) (_fetch_7 _ht_461 _key_461 _flag_461))) (set! hashtable-get (lambda (_ht_462 _key_462) (_fetch_7 _ht_462 _key_462 #f))) (set! hashtable-put! (lambda (_ht_463 _key_463 _val_463) (_put!_7 _ht_463 _key_463 _val_463))) (set! hashtable-remove! (lambda (_ht_464 _key_464) (_remove!_7 _ht_464 _key_464))) (set! hashtable-clear! (lambda (_ht_465) (_clear!_7 _ht_465))) (set! hashtable-size (lambda (_ht_466) (_size_7 _ht_466))) (set! hashtable-for-each (lambda (_ht_467 _proc_467) (_ht-for-each_7 _ht_467 _proc_467))) (set! hashtable-map (lambda (_ht_468 _proc_468) (_ht-map_7 _ht_468 _proc_468))) (set! hashtable-copy (lambda (_ht_469) (_ht-copy_7 _ht_469))) #f)))))
(let () (begin (set! make-hashtree (lambda _args_1 '*)) 'make-hashtree))
(let () (begin (set! hashtree-contains? (lambda (_ht_1 _key_1) #f)) 'hashtree-contains?))
(let () (begin (set! hashtree-fetch (lambda (_ht_1 _key_1 _flag_1) _flag_1)) 'hashtree-fetch))
(let () (begin (set! hashtree-get (lambda (_ht_1 _key_1) (hashtree-fetch _ht_1 _key_1 #f))) 'hashtree-get))
(let () (begin (set! hashtree-put (lambda (_ht_1 _key_1 _val_1) '*)) 'hashtree-put))
(let () (begin (set! hashtree-remove (lambda (_ht_1 _key_1) '*)) 'hashtree-remove))
(let () (begin (set! hashtree-size (lambda (_ht_1) 0)) 'hashtree-size))
(let () (begin (set! hashtree-for-each (lambda (_ht_1 _proc_1) '*)) 'hashtree-for-each))
(let () (begin (set! hashtree-map (lambda (_ht_1 _proc_1) '())) 'hashtree-map))
(let () (let ((_doc_3 (cons "hashtree" '())) (_count_3 (lambda (_ht_334) (let ((_v_335_338 _ht_334) (_i_335_338 1)) (begin (_check! (fixnum? _i_335_338) 40 _v_335_338 _i_335_338) (_check! (vector? _v_335_338) 40 _v_335_338 _i_335_338) (_check! (<:fix:fix _i_335_338 (vector-length:vec _v_335_338)) 40 _v_335_338 _i_335_338) (_check! (>=:fix:fix _i_335_338 0) 40 _v_335_338 _i_335_338) (vector-ref:trusted _v_335_338 _i_335_338))))) (_hasher_3 (lambda (_ht_339) (let ((_v_340_343 _ht_339) (_i_340_343 2)) (begin (_check! (fixnum? _i_340_343) 40 _v_340_343 _i_340_343) (_check! (vector? _v_340_343) 40 _v_340_343 _i_340_343) (_check! (<:fix:fix _i_340_343 (vector-length:vec _v_340_343)) 40 _v_340_343 _i_340_343) (_check! (>=:fix:fix _i_340_343 0) 40 _v_340_343 _i_340_343) (vector-ref:trusted _v_340_343 _i_340_343))))) (_searcher_3 (lambda (_ht_344) (let ((_v_345_348 _ht_344) (_i_345_348 3)) (begin (_check! (fixnum? _i_345_348) 40 _v_345_348 _i_345_348) (_check! (vector? _v_345_348) 40 _v_345_348 _i_345_348) (_check! (<:fix:fix _i_345_348 (vector-length:vec _v_345_348)) 40 _v_345_348 _i_345_348) (_check! (>=:fix:fix _i_345_348 0) 40 _v_345_348 _i_345_348) (vector-ref:trusted _v_345_348 _i_345_348))))) (_buckets_3 (lambda (_ht_349) (let ((_v_350_353 _ht_349) (_i_350_353 4)) (begin (_check! (fixnum? _i_350_353) 40 _v_350_353 _i_350_353) (_check! (vector? _v_350_353) 40 _v_350_353 _i_350_353) (_check! (<:fix:fix _i_350_353 (vector-length:vec _v_350_353)) 40 _v_350_353 _i_350_353) (_check! (>=:fix:fix _i_350_353 0) 40 _v_350_353 _i_350_353) (vector-ref:trusted _v_350_353 _i_350_353))))) (_make-empty-buckets_3 (lambda () '())) (_make-buckets_3 (lambda (_h_355 _alist_355 _buckets1_355 _buckets2_355) (let* ((_t1_356_359 _h_355) (_t2_356_362 (let* ((_t1_366_369 _alist_355) (_t2_366_372 (let* ((_t1_376_379 _buckets1_355) (_t2_376_382 (cons _buckets2_355 '()))) (let () (cons _t1_376_379 _t2_376_382))))) (let () (cons _t1_366_369 _t2_366_372))))) (let () (cons _t1_356_359 _t2_356_362))))) (_buckets-empty?_3 (lambda (_buckets_387) (null? _buckets_387))) (_buckets-n_3 (lambda (_buckets_388) (let ((_x_389_392 _buckets_388)) (begin (_check! (pair? _x_389_392) 0 _x_389_392) (car:pair _x_389_392))))) (_buckets-alist_3 (lambda (_buckets_393) (let ((_x_395_398 (let ((_x_399_402 _buckets_393)) (begin (_check! (pair? _x_399_402) 1 _x_399_402) (cdr:pair _x_399_402))))) (begin (_check! (pair? _x_395_398) 0 _x_395_398) (car:pair _x_395_398))))) (_buckets-left_3 (lambda (_buckets_403) (let ((_x_405_408 (let ((_x_409_412 (let ((_x_413_416 _buckets_403)) (begin (_check! (pair? _x_413_416) 1 _x_413_416) (cdr:pair _x_413_416))))) (begin (_check! (pair? _x_409_412) 1 _x_409_412) (cdr:pair _x_409_412))))) (begin (_check! (pair? _x_405_408) 0 _x_405_408) (car:pair _x_405_408))))) (_buckets-right_3 (lambda (_buckets_417) (let ((_x_419_422 (let ((_x_423_426 (let ((_x_427_430 (let ((_x_431_434 _buckets_417)) (begin (_check! (pair? _x_431_434) 1 _x_431_434) (cdr:pair _x_431_434))))) (begin (_check! (pair? _x_427_430) 1 _x_427_430) (cdr:pair _x_427_430))))) (begin (_check! (pair? _x_423_426) 1 _x_423_426) (cdr:pair _x_423_426))))) (begin (_check! (pair? _x_419_422) 0 _x_419_422) (car:pair _x_419_422)))))) (let ((_hashtree?_6 (lambda (_ht_320) (if (vector? _ht_320) (if (= 5 (let ((_v_323_326 _ht_320)) (begin (_check! (vector? _v_323_326) 42 _v_323_326) (vector-length:vec _v_323_326)))) (eq? _doc_3 (let ((_v_328_331 _ht_320) (_i_328_331 0)) (begin (_check! (fixnum? _i_328_331) 40 _v_328_331 _i_328_331) (_check! (vector? _v_328_331) 40 _v_328_331 _i_328_331) (_check! (<:fix:fix _i_328_331 (vector-length:vec _v_328_331)) 40 _v_328_331 _i_328_331) (_check! (>=:fix:fix _i_328_331 0) 40 _v_328_331 _i_328_331) (vector-ref:trusted _v_328_331 _i_328_331)))) #f) #f))) (_hashtree-error_6 (lambda (_x_332) (begin (display "ERROR: Bad hash tree: ") (newline) (write _x_332) (newline))))) (let ((_ht-map_7 (unspecified)) (_ht-for-each_7 (unspecified)) (_size_7 (unspecified)) (_remove_7 (unspecified)) (_put_7 (unspecified)) (_find-bucket_7 (unspecified)) (_fetch_7 (unspecified)) (_contains?_7 (unspecified)) (_contents_7 (unspecified)) (_remq1_7 (unspecified)) (_substitute1_7 (unspecified)) (_make-ht_7 (unspecified))) (begin (set! _ht-map_7 (lambda (_f_8 _ht_8) (if (_hashtree?_6 _ht_8) (let () (let ((_loop_14_17_20 (unspecified))) (begin (set! _loop_14_17_20 (lambda (_y1_9_10_21 _results_9_13_21) (if (null? _y1_9_10_21) (reverse _results_9_13_21) (begin #t (_loop_14_17_20 (let ((_x_25_28 _y1_9_10_21)) (begin (_check! (pair? _x_25_28) 1 _x_25_28) (cdr:pair _x_25_28))) (cons (let ((_association_29 (let ((_x_38_41 _y1_9_10_21)) (begin (_check! (pair? _x_38_41) 0 _x_38_41) (car:pair _x_38_41))))) (_f_8 (let ((_x_30_33 _association_29)) (begin (_check! (pair? _x_30_33) 0 _x_30_33) (car:pair _x_30_33))) (let ((_x_34_37 _association_29)) (begin (_check! (pair? _x_34_37) 1 _x_34_37) (cdr:pair _x_34_37))))) _results_9_13_21)))))) (_loop_14_17_20 (_contents_7 _ht_8) '())))) (_hashtree-error_6 _ht_8)))) (set! _ht-for-each_7 (lambda (_f_42 _ht_42) (if (_hashtree?_6 _ht_42) (let () (let ((_loop_48_50_53 (unspecified))) (begin (set! _loop_48_50_53 (lambda (_y1_43_44_54) (if (null? _y1_43_44_54) (if #f #f (unspecified)) (begin (begin #t (let ((_association_58 (let ((_x_67_70 _y1_43_44_54)) (begin (_check! (pair? _x_67_70) 0 _x_67_70) (car:pair _x_67_70))))) (_f_42 (let ((_x_59_62 _association_58)) (begin (_check! (pair? _x_59_62) 0 _x_59_62) (car:pair _x_59_62))) (let ((_x_63_66 _association_58)) (begin (_check! (pair? _x_63_66) 1 _x_63_66) (cdr:pair _x_63_66)))))) (_loop_48_50_53 (let ((_x_71_74 _y1_43_44_54)) (begin (_check! (pair? _x_71_74) 1 _x_71_74) (cdr:pair _x_71_74)))))))) (_loop_48_50_53 (_contents_7 _ht_42))))) (_hashtree-error_6 _ht_42)))) (set! _size_7 (lambda (_ht_75) (if (_hashtree?_6 _ht_75) (_count_3 _ht_75) (_hashtree-error_6 _ht_75)))) (set! _remove_7 (lambda (_ht_76 _key_76) (if (_hashtree?_6 _ht_76) (let ((_t_79 (_buckets_3 _ht_76)) (_h_79 ((_hasher_3 _ht_76) _key_76)) (_c_79 (_count_3 _ht_76))) (let ((_remove_82 (unspecified))) (begin (set! _remove_82 (lambda (_t_83 _h_83) (if (_buckets-empty?_3 _t_83) _t_83 (let ((_n_86 (_buckets-n_3 _t_83)) (_alist_86 (_buckets-alist_3 _t_83)) (_left_86 (_buckets-left_3 _t_83)) (_right_86 (_buckets-right_3 _t_83))) (if (< _h_83 _n_86) (_make-buckets_3 _n_86 _alist_86 (_remove_82 _left_86 _h_83) _right_86) (if (< _n_86 _h_83) (_make-buckets_3 _n_86 _alist_86 _left_86 (_remove_82 _right_86 _h_83)) (let ((_probe_92 ((_searcher_3 _ht_76) _key_76 _alist_86))) (if _probe_92 (begin (set! _c_79 (- _c_79 1)) (_make-buckets_3 _n_86 (_remq1_7 _probe_92 _alist_86) _left_86 _right_86)) _t_83)))))))) (let ((_buckets_93 (_remove_82 _t_79 _h_79))) (_make-ht_7 _c_79 (_hasher_3 _ht_76) (_searcher_3 _ht_76) _buckets_93))))) (_hashtree-error_6 _ht_76)))) (set! _put_7 (lambda (_ht_94 _key_94 _val_94) (if (_hashtree?_6 _ht_94) (let ((_t_97 (_buckets_3 _ht_94)) (_h_97 ((_hasher_3 _ht_94) _key_94)) (_association_97 (cons _key_94 _val_94)) (_c_97 (_count_3 _ht_94))) (let ((_put_100 (unspecified))) (begin (set! _put_100 (lambda (_t_101 _h_101) (if (_buckets-empty?_3 _t_101) (begin (set! _c_97 (+ _c_97 1)) (_make-buckets_3 _h_101 (cons _association_97 '()) _t_101 _t_101)) (let ((_n_105 (_buckets-n_3 _t_101)) (_alist_105 (_buckets-alist_3 _t_101)) (_left_105 (_buckets-left_3 _t_101)) (_right_105 (_buckets-right_3 _t_101))) (if (< _h_101 _n_105) (_make-buckets_3 _n_105 _alist_105 (_put_100 (_buckets-left_3 _t_101) _h_101) _right_105) (if (< _n_105 _h_101) (_make-buckets_3 _n_105 _alist_105 _left_105 (_put_100 (_buckets-right_3 _t_101) _h_101)) (let ((_probe_111 ((_searcher_3 _ht_94) _key_94 _alist_105))) (if _probe_111 (_make-buckets_3 _n_105 (_substitute1_7 _association_97 _probe_111 _alist_105) _left_105 _right_105) (begin (set! _c_97 (+ _c_97 1)) (_make-buckets_3 _n_105 (cons _association_97 _alist_105) _left_105 _right_105)))))))))) (let ((_buckets_112 (_put_100 _t_97 _h_97))) (_make-ht_7 _c_97 (_hasher_3 _ht_94) (_searcher_3 _ht_94) _buckets_112))))) (_hashtree-error_6 _ht_94)))) (set! _find-bucket_7 (lambda (_t_113 _h_113) (if (_buckets-empty?_3 _t_113) '() (let ((_n_116 (_buckets-n_3 _t_113))) (if (< _h_113 _n_116) (_find-bucket_7 (_buckets-left_3 _t_113) _h_113) (if (< _n_116 _h_113) (_find-bucket_7 (_buckets-right_3 _t_113) _h_113) (_buckets-alist_3 _t_113))))))) (set! _fetch_7 (lambda (_ht_120 _key_120 _flag_120) (if (_hashtree?_6 _ht_120) (let* ((_t_123 (_buckets_3 _ht_120)) (_h_126 ((_hasher_3 _ht_120) _key_120)) (_probe_129 ((_searcher_3 _ht_120) _key_120 (_find-bucket_7 _t_123 _h_126)))) (let () (if _probe_129 (let ((_x_133_136 _probe_129)) (begin (_check! (pair? _x_133_136) 1 _x_133_136) (cdr:pair _x_133_136))) _flag_120))) (_hashtree-error_6 _ht_120)))) (set! _contains?_7 (lambda (_ht_137 _key_137) (if (_hashtree?_6 _ht_137) (let* ((_t_140 (_buckets_3 _ht_137)) (_h_143 ((_hasher_3 _ht_137) _key_137))) (let () (if ((_searcher_3 _ht_137) _key_137 (_find-bucket_7 _t_140 _h_143)) #t #f))) (_hashtree-error_6 _ht_137)))) (set! _contents_7 (lambda (_ht_147) (let ((_t_150 (_buckets_3 _ht_147))) (let () (let ((_randomize-combine_154 (unspecified)) (_randomize3_154 (unspecified)) (_randomize2_154 (unspecified)) (_randomize1_154 (unspecified)) (_append-reverse_154 (unspecified)) (_contents_154 (unspecified))) (begin (set! _randomize-combine_154 (lambda (_alist1_155 _alist2_155 _alist3_155) (if (null? _alist2_155) _alist1_155 (if (null? _alist3_155) (_append-reverse_154 _alist2_155 _alist1_155) (_append-reverse_154 (_randomize1_154 _alist3_155 '() '() '()) (_append-reverse_154 (_randomize1_154 _alist1_155 '() '() '()) (_randomize1_154 _alist2_155 '() '() '()))))))) (set! _randomize3_154 (lambda (_alist_159 _alist1_159 _alist2_159 _alist3_159) (if (null? _alist_159) (_randomize-combine_154 _alist1_159 _alist2_159 _alist3_159) (_randomize1_154 (let ((_x_160_163 _alist_159)) (begin (_check! (pair? _x_160_163) 1 _x_160_163) (cdr:pair _x_160_163))) _alist1_159 _alist2_159 (cons (let ((_x_164_167 _alist_159)) (begin (_check! (pair? _x_164_167) 0 _x_164_167) (car:pair _x_164_167))) _alist3_159))))) (set! _randomize2_154 (lambda (_alist_168 _alist1_168 _alist2_168 _alist3_168) (if (null? _alist_168) (_randomize-combine_154 _alist1_168 _alist2_168 _alist3_168) (_randomize3_154 (let ((_x_169_172 _alist_168)) (begin (_check! (pair? _x_169_172) 1 _x_169_172) (cdr:pair _x_169_172))) _alist1_168 (cons (let ((_x_173_176 _alist_168)) (begin (_check! (pair? _x_173_176) 0 _x_173_176) (car:pair _x_173_176))) _alist2_168) _alist3_168)))) (set! _randomize1_154 (lambda (_alist_177 _alist1_177 _alist2_177 _alist3_177) (if (null? _alist_177) (_randomize-combine_154 _alist1_177 _alist2_177 _alist3_177) (_randomize2_154 (let ((_x_178_181 _alist_177)) (begin (_check! (pair? _x_178_181) 1 _x_178_181) (cdr:pair _x_178_181))) (cons (let ((_x_182_185 _alist_177)) (begin (_check! (pair? _x_182_185) 0 _x_182_185) (car:pair _x_182_185))) _alist1_177) _alist2_177 _alist3_177)))) (set! _append-reverse_154 (lambda (_x_186 _y_186) (if (null? _x_186) _y_186 (_append-reverse_154 (let ((_x_187_190 _x_186)) (begin (_check! (pair? _x_187_190) 1 _x_187_190) (cdr:pair _x_187_190))) (cons (let ((_x_191_194 _x_186)) (begin (_check! (pair? _x_191_194) 0 _x_191_194) (car:pair _x_191_194))) _y_186))))) (set! _contents_154 (lambda (_t_195 _alist_195) (if (_buckets-empty?_3 _t_195) _alist_195 (_contents_154 (_buckets-left_3 _t_195) (_contents_154 (_buckets-right_3 _t_195) (_append-reverse_154 (_buckets-alist_3 _t_195) _alist_195)))))) (_randomize1_154 (_contents_154 _t_150 '()) '() '() '()))))))) (set! _remq1_7 (lambda (_x_196 _y_196) (if (eq? _x_196 (let ((_x_198_201 _y_196)) (begin (_check! (pair? _x_198_201) 0 _x_198_201) (car:pair _x_198_201)))) (let ((_x_202_205 _y_196)) (begin (_check! (pair? _x_202_205) 1 _x_202_205) (cdr:pair _x_202_205))) (cons (let ((_x_207_210 _y_196)) (begin (_check! (pair? _x_207_210) 0 _x_207_210) (car:pair _x_207_210))) (_remq1_7 _x_196 (let ((_x_211_214 _y_196)) (begin (_check! (pair? _x_211_214) 1 _x_211_214) (cdr:pair _x_211_214)))))))) (set! _substitute1_7 (lambda (_x_215 _y_215 _z_215) (if (eq? _y_215 (let ((_x_217_220 _z_215)) (begin (_check! (pair? _x_217_220) 0 _x_217_220) (car:pair _x_217_220)))) (cons _x_215 (let ((_x_221_224 _z_215)) (begin (_check! (pair? _x_221_224) 1 _x_221_224) (cdr:pair _x_221_224)))) (cons (let ((_x_226_229 _z_215)) (begin (_check! (pair? _x_226_229) 0 _x_226_229) (car:pair _x_226_229))) (_substitute1_7 _x_215 _y_215 (let ((_x_230_233 _z_215)) (begin (_check! (pair? _x_230_233) 1 _x_230_233) (cdr:pair _x_230_233)))))))) (set! _make-ht_7 (lambda (_count_234 _hashfun_234 _searcher_234 _buckets_234) (let* ((_t_235_240_245 _buckets_234) (_t_235_239_248 _searcher_234) (_t_235_238_251 _hashfun_234) (_t_235_237_254 _count_234) (_t_235_236_257 _doc_3) (_v_235_242_260 (make-vector 5 _t_235_240_245))) (let () (begin (let ((_v_264_267 _v_235_242_260) (_i_264_267 3) (_x_264_267 _t_235_239_248)) (begin (_check! (fixnum? _i_264_267) 41 _v_264_267 _i_264_267 _x_264_267) (_check! (vector? _v_264_267) 41 _v_264_267 _i_264_267 _x_264_267) (_check! (<:fix:fix _i_264_267 (vector-length:vec _v_264_267)) 41 _v_264_267 _i_264_267 _x_264_267) (_check! (>=:fix:fix _i_264_267 0) 41 _v_264_267 _i_264_267 _x_264_267) (vector-set!:trusted _v_264_267 _i_264_267 _x_264_267))) (let ((_v_268_271 _v_235_242_260) (_i_268_271 2) (_x_268_271 _t_235_238_251)) (begin (_check! (fixnum? _i_268_271) 41 _v_268_271 _i_268_271 _x_268_271) (_check! (vector? _v_268_271) 41 _v_268_271 _i_268_271 _x_268_271) (_check! (<:fix:fix _i_268_271 (vector-length:vec _v_268_271)) 41 _v_268_271 _i_268_271 _x_268_271) (_check! (>=:fix:fix _i_268_271 0) 41 _v_268_271 _i_268_271 _x_268_271) (vector-set!:trusted _v_268_271 _i_268_271 _x_268_271))) (let ((_v_272_275 _v_235_242_260) (_i_272_275 1) (_x_272_275 _t_235_237_254)) (begin (_check! (fixnum? _i_272_275) 41 _v_272_275 _i_272_275 _x_272_275) (_check! (vector? _v_272_275) 41 _v_272_275 _i_272_275 _x_272_275) (_check! (<:fix:fix _i_272_275 (vector-length:vec _v_272_275)) 41 _v_272_275 _i_272_275 _x_272_275) (_check! (>=:fix:fix _i_272_275 0) 41 _v_272_275 _i_272_275 _x_272_275) (vector-set!:trusted _v_272_275 _i_272_275 _x_272_275))) (let ((_v_276_279 _v_235_242_260) (_i_276_279 0) (_x_276_279 _t_235_236_257)) (begin (_check! (fixnum? _i_276_279) 41 _v_276_279 _i_276_279 _x_276_279) (_check! (vector? _v_276_279) 41 _v_276_279 _i_276_279 _x_276_279) (_check! (<:fix:fix _i_276_279 (vector-length:vec _v_276_279)) 41 _v_276_279 _i_276_279 _x_276_279) (_check! (>=:fix:fix _i_276_279 0) 41 _v_276_279 _i_276_279 _x_276_279) (vector-set!:trusted _v_276_279 _i_276_279 _x_276_279))) _v_235_242_260))))) (set! make-hashtree (lambda _args_280 (let* ((_hashfun_283 (if (null? _args_280) object-hash (let ((_x_308_311 _args_280)) (begin (_check! (pair? _x_308_311) 0 _x_308_311) (car:pair _x_308_311))))) (_searcher_286 (if (let ((_temp_290_293 (null? _args_280))) (if _temp_290_293 _temp_290_293 (null? (let ((_x_295_298 _args_280)) (begin (_check! (pair? _x_295_298) 1 _x_295_298) (cdr:pair _x_295_298)))))) assv (let ((_x_300_303 (let ((_x_304_307 _args_280)) (begin (_check! (pair? _x_304_307) 1 _x_304_307) (cdr:pair _x_304_307))))) (begin (_check! (pair? _x_300_303) 0 _x_300_303) (car:pair _x_300_303)))))) (let () (_make-ht_7 0 _hashfun_283 _searcher_286 (_make-empty-buckets_3)))))) (set! hashtree-contains? (lambda (_ht_312 _key_312) (_contains?_7 _ht_312 _key_312))) (set! hashtree-fetch (lambda (_ht_313 _key_313 _flag_313) (_fetch_7 _ht_313 _key_313 _flag_313))) (set! hashtree-get (lambda (_ht_314 _key_314) (_fetch_7 _ht_314 _key_314 #f))) (set! hashtree-put (lambda (_ht_315 _key_315 _val_315) (_put_7 _ht_315 _key_315 _val_315))) (set! hashtree-remove (lambda (_ht_316 _key_316) (_remove_7 _ht_316 _key_316))) (set! hashtree-size (lambda (_ht_317) (_size_7 _ht_317))) (set! hashtree-for-each (lambda (_ht_318 _proc_318) (_ht-for-each_7 _ht_318 _proc_318))) (set! hashtree-map (lambda (_ht_319 _proc_319) (_ht-map_7 _ht_319 _proc_319))) #f)))))
(let () (begin (set! make-twobit-flag (undefined)) 'make-twobit-flag))
(let () (begin (set! display-twobit-flag (undefined)) 'display-twobit-flag))
(let () (begin (set! make-twobit-flag (lambda (_name_1) (let ((_display-flag_4 (unspecified)) (_twobit-warning_4 (unspecified))) (begin (set! _display-flag_4 (lambda (_state_5) (begin (display (if _state_5 "  + " "  - ")) (display _name_1) (display " is ") (display (if _state_5 "on" "off")) (newline)))) (set! _twobit-warning_4 (lambda () (begin (display "Error: incorrect arguments to ") (write _name_1) (newline) (reset)))) (let ((_state_7 #t)) (lambda _args_8 (if (null? _args_8) _state_7 (if (if (null? (let ((_x_12_15 _args_8)) (begin (_check! (pair? _x_12_15) 1 _x_12_15) (cdr:pair _x_12_15)))) (boolean? (let ((_x_17_20 _args_8)) (begin (_check! (pair? _x_17_20) 0 _x_17_20) (car:pair _x_17_20)))) #f) (begin (set! _state_7 (let ((_x_21_24 _args_8)) (begin (_check! (pair? _x_21_24) 0 _x_21_24) (car:pair _x_21_24)))) _state_7) (if (if (null? (let ((_x_27_30 _args_8)) (begin (_check! (pair? _x_27_30) 1 _x_27_30) (cdr:pair _x_27_30)))) (eq? (let ((_x_32_35 _args_8)) (begin (_check! (pair? _x_32_35) 0 _x_32_35) (car:pair _x_32_35))) 'display) #f) (_display-flag_4 _state_7) (_twobit-warning_4)))))))))) 'make-twobit-flag))
(let () (begin (set! display-twobit-flag (lambda (_flag_1) (let ((_display-twobit-flag_2 0)) (begin (set! _display-twobit-flag_2 (lambda (_flag_3) (_flag_3 'display))) (_display-twobit-flag_2 _flag_1))))) 'display-twobit-flag))
(let () (begin (set! issue-warnings (make-twobit-flag 'issue-warnings)) 'issue-warnings))
(let () (begin (set! include-source-code (make-twobit-flag 'include-source-code)) 'include-source-code))
(let () (begin (set! include-variable-names (make-twobit-flag 'include-variable-names)) 'include-variable-names))
(let () (begin (set! include-procedure-names (make-twobit-flag 'include-procedure-names)) 'include-procedure-names))
(let () (begin (set! avoid-space-leaks (make-twobit-flag 'avoid-space-leaks)) 'avoid-space-leaks))
(let () (begin (set! integrate-usual-procedures (make-twobit-flag 'integrate-usual-procedures)) 'integrate-usual-procedures))
(let () (begin (set! control-optimization (make-twobit-flag 'control-optimization)) 'control-optimization))
(let () (begin (set! parallel-assignment-optimization (make-twobit-flag 'parallel-assignment-optimization)) 'parallel-assignment-optimization))
(let () (begin (set! lambda-optimization (make-twobit-flag 'lambda-optimization)) 'lambda-optimization))
(let () (begin (set! benchmark-mode (make-twobit-flag 'benchmark-mode)) 'benchmark-mode))
(let () (begin (set! benchmark-block-mode (make-twobit-flag 'benchmark-block-mode)) 'benchmark-block-mode))
(let () (begin (set! global-optimization (make-twobit-flag 'global-optimization)) 'global-optimization))
(let () (begin (set! interprocedural-inlining (make-twobit-flag 'interprocedural-inlining)) 'interprocedural-inlining))
(let () (begin (set! interprocedural-constant-propagation (make-twobit-flag 'interprocedural-constant-propagation)) 'interprocedural-constant-propagation))
(let () (begin (set! common-subexpression-elimination (make-twobit-flag 'common-subexpression-elimination)) 'common-subexpression-elimination))
(let () (begin (set! representation-inference (make-twobit-flag 'representation-inference)) 'representation-inference))
(let () (begin (set! local-optimization (make-twobit-flag 'local-optimization)) 'local-optimization))
(let () (begin (set! ignore-space-leaks (lambda _args_1 (if (null? _args_1) (not (avoid-space-leaks)) (avoid-space-leaks (not (let ((_x_2_5 _args_1)) (begin (_check! (pair? _x_2_5) 0 _x_2_5) (car:pair _x_2_5)))))))) 'ignore-space-leaks))
(let () (begin (set! lambda-optimizations lambda-optimization) 'lambda-optimizations))
(let () (begin (set! local-optimizations local-optimization) 'local-optimizations))
(let () (begin (set! set-compiler-flags! (lambda (_how_1) (let ((_set-compiler-flags!_2 0)) (begin (set! _set-compiler-flags!_2 (lambda (_how_3) (let ((_temp_4_7 _how_3)) (if (memv _temp_4_7 '(no-optimization)) (begin (_set-compiler-flags!_2 'standard) (avoid-space-leaks #t) (integrate-usual-procedures #f) (control-optimization #f) (parallel-assignment-optimization #f) (lambda-optimization #f) (benchmark-mode #f) (benchmark-block-mode #f) (global-optimization #f) (interprocedural-inlining #f) (interprocedural-constant-propagation #f) (common-subexpression-elimination #f) (representation-inference #f) (local-optimization #f)) (if (memv _temp_4_7 '(standard)) (begin (issue-warnings #t) (include-source-code #f) (include-procedure-names #t) (include-variable-names #t) (avoid-space-leaks #f) (runtime-safety-checking #t) (integrate-usual-procedures #f) (control-optimization #t) (parallel-assignment-optimization #t) (lambda-optimization #t) (benchmark-mode #f) (benchmark-block-mode #f) (global-optimization #t) (interprocedural-inlining #t) (interprocedural-constant-propagation #t) (common-subexpression-elimination #t) (representation-inference #t) (local-optimization #t)) (if (memv _temp_4_7 '(fast-safe)) (let ((_bbmode_13 (benchmark-block-mode))) (begin (_set-compiler-flags!_2 'standard) (integrate-usual-procedures #t) (benchmark-mode #t) (benchmark-block-mode _bbmode_13))) (if (memv _temp_4_7 '(fast-unsafe)) (begin (_set-compiler-flags!_2 'fast-safe) (runtime-safety-checking #f)) (error "set-compiler-flags!: unknown mode " _how_3)))))))) (_set-compiler-flags!_2 _how_1))))) 'set-compiler-flags!))
(let () (begin (set! display-twobit-flags (lambda (_which_1) (let ((_display-twobit-flags_2 0)) (begin (set! _display-twobit-flags_2 (lambda (_which_3) (let ((_temp_4_7 _which_3)) (if (memv _temp_4_7 '(debugging)) (begin (display-twobit-flag issue-warnings) (display-twobit-flag include-procedure-names) (display-twobit-flag include-variable-names) (display-twobit-flag include-source-code)) (if (memv _temp_4_7 '(safety)) (display-twobit-flag avoid-space-leaks) (if (memv _temp_4_7 '(optimization)) (begin (display-twobit-flag integrate-usual-procedures) (display-twobit-flag control-optimization) (display-twobit-flag parallel-assignment-optimization) (display-twobit-flag lambda-optimization) (display-twobit-flag benchmark-mode) (display-twobit-flag benchmark-block-mode) (display-twobit-flag global-optimization) (if (global-optimization) (begin (display "  ") (display-twobit-flag interprocedural-inlining) (display "  ") (display-twobit-flag interprocedural-constant-propagation) (display "  ") (display-twobit-flag common-subexpression-elimination) (display "  ") (display-twobit-flag representation-inference)) (unspecified)) (display-twobit-flag local-optimization)) #t)))))) (_display-twobit-flags_2 _which_1))))) 'display-twobit-flags))
(let () ($$trace "pass1_aux"))
(let () (begin (set! _maxargs-with-rest-arg_ 1000000) '_maxargs-with-rest-arg_))
(let () (begin (set! prim-entry (lambda (_name_1) (let ((_prim-entry_2 0)) (begin (set! _prim-entry_2 (lambda (_name_3) #f)) (_prim-entry_2 _name_1))))) 'prim-entry))
(let () (begin (set! prim-arity (lambda (_name_1) (let ((_prim-arity_2 0)) (begin (set! _prim-arity_2 (lambda (_name_3) 0)) (_prim-arity_2 _name_1))))) 'prim-arity))
(let () (begin (set! prim-opcodename (lambda (_name_1) (let ((_prim-opcodename_2 0)) (begin (set! _prim-opcodename_2 (lambda (_name_3) _name_3)) (_prim-opcodename_2 _name_1))))) 'prim-opcodename))
(let () (begin (set! m-warn (lambda (_msg_1 _ _more_1) (if (issue-warnings) (begin (display "WARNING from macro expander:") (newline) (display _msg_1) (newline) (let ((_f_2_5_8 (lambda (_x_28) (begin (write _x_28) (newline))))) (let () (let ((_loop_10_12_15 (unspecified))) (begin (set! _loop_10_12_15 (lambda (_y1_2_3_16) (if (null? _y1_2_3_16) (if #f #f (unspecified)) (begin (begin #t (_f_2_5_8 (let ((_x_20_23 _y1_2_3_16)) (begin (_check! (pair? _x_20_23) 0 _x_20_23) (car:pair _x_20_23))))) (_loop_10_12_15 (let ((_x_24_27 _y1_2_3_16)) (begin (_check! (pair? _x_24_27) 1 _x_24_27) (cdr:pair _x_24_27)))))))) (_loop_10_12_15 _more_1)))))) (unspecified)))) 'm-warn))
(let () (begin (set! m-error (lambda (_msg_1 _ _more_1) (begin (display "ERROR detected during macro expansion:") (newline) (display _msg_1) (newline) (let ((_f_2_5_8 (lambda (_x_28) (begin (write _x_28) (newline))))) (let () (let ((_loop_10_12_15 (unspecified))) (begin (set! _loop_10_12_15 (lambda (_y1_2_3_16) (if (null? _y1_2_3_16) (if #f #f (unspecified)) (begin (begin #t (_f_2_5_8 (let ((_x_20_23 _y1_2_3_16)) (begin (_check! (pair? _x_20_23) 0 _x_20_23) (car:pair _x_20_23))))) (_loop_10_12_15 (let ((_x_24_27 _y1_2_3_16)) (begin (_check! (pair? _x_24_27) 1 _x_24_27) (cdr:pair _x_24_27)))))))) (_loop_10_12_15 _more_1))))) (m-quit (make-constant #f))))) 'm-error))
(let () (begin (set! m-bug (lambda (_msg_1 _ _more_1) (begin (display "BUG in macro expander: ") (newline) (display _msg_1) (newline) (let ((_f_2_5_8 (lambda (_x_28) (begin (write _x_28) (newline))))) (let () (let ((_loop_10_12_15 (unspecified))) (begin (set! _loop_10_12_15 (lambda (_y1_2_3_16) (if (null? _y1_2_3_16) (if #f #f (unspecified)) (begin (begin #t (_f_2_5_8 (let ((_x_20_23 _y1_2_3_16)) (begin (_check! (pair? _x_20_23) 0 _x_20_23) (car:pair _x_20_23))))) (_loop_10_12_15 (let ((_x_24_27 _y1_2_3_16)) (begin (_check! (pair? _x_24_27) 1 _x_24_27) (cdr:pair _x_24_27)))))))) (_loop_10_12_15 _more_1))))) (m-quit (make-constant #f))))) 'm-bug))
(let () '(define (make-null-terminated x) (cond ((null? x) '()) ((pair? x) (cons (car x) (make-null-terminated (cdr x)))) (else (list x)))))
(let () (begin (set! safe-length (lambda (_x_1) (let ((_safe-length_2 0)) (begin (set! _safe-length_2 (lambda (_x_3) (let ((_loop_4 (unspecified))) (begin (set! _loop_4 (lambda (_x_5 _n_5) (if (null? _x_5) _n_5 (if (pair? _x_5) (_loop_4 (let ((_x_8_11 _x_5)) (begin (_check! (pair? _x_8_11) 1 _x_8_11) (cdr:pair _x_8_11))) (+ _n_5 1)) -1)))) (_loop_4 _x_3 0))))) (_safe-length_2 _x_1))))) 'safe-length))
(let () (begin (set! filter1 (lambda (_p_1 _x_1) (let ((_filter1_2 0)) (begin (set! _filter1_2 (lambda (_p_3 _x_3) (if (null? _x_3) '() (if (_p_3 (let ((_x_6_9 _x_3)) (begin (_check! (pair? _x_6_9) 0 _x_6_9) (car:pair _x_6_9)))) (cons (let ((_x_10_13 _x_3)) (begin (_check! (pair? _x_10_13) 0 _x_10_13) (car:pair _x_10_13))) (_filter1_2 _p_3 (let ((_x_14_17 _x_3)) (begin (_check! (pair? _x_14_17) 1 _x_14_17) (cdr:pair _x_14_17))))) (_filter1_2 _p_3 (let ((_x_19_22 _x_3)) (begin (_check! (pair? _x_19_22) 1 _x_19_22) (cdr:pair _x_19_22)))))))) (_filter1_2 _p_1 _x_1))))) 'filter1))
(let () (begin (set! every1? (lambda (_p_1 _x_1) (let ((_every1?_2 0)) (begin (set! _every1?_2 (lambda (_p_3 _x_3) (if (null? _x_3) #t (if (_p_3 (let ((_x_6_9 _x_3)) (begin (_check! (pair? _x_6_9) 0 _x_6_9) (car:pair _x_6_9)))) (_every1?_2 _p_3 (let ((_x_10_13 _x_3)) (begin (_check! (pair? _x_10_13) 1 _x_10_13) (cdr:pair _x_10_13)))) #f)))) (_every1?_2 _p_1 _x_1))))) 'every1?))
(let () (begin (set! union2 (lambda (_x_1 _y_1) (let ((_union2_2 0)) (begin (set! _union2_2 (lambda (_x_3 _y_3) (if (null? _x_3) _y_3 (if (member (let ((_x_6_9 _x_3)) (begin (_check! (pair? _x_6_9) 0 _x_6_9) (car:pair _x_6_9))) _y_3) (_union2_2 (let ((_x_10_13 _x_3)) (begin (_check! (pair? _x_10_13) 1 _x_10_13) (cdr:pair _x_10_13))) _y_3) (_union2_2 (let ((_x_15_18 _x_3)) (begin (_check! (pair? _x_15_18) 1 _x_15_18) (cdr:pair _x_15_18))) (cons (let ((_x_19_22 _x_3)) (begin (_check! (pair? _x_19_22) 0 _x_19_22) (car:pair _x_19_22))) _y_3)))))) (_union2_2 _x_1 _y_1))))) 'union2))
(let () (begin (set! copy-alist (lambda (_alist_1) (let ((_copy-alist_2 0)) (begin (set! _copy-alist_2 (lambda (_alist_3) (let () (let ((_loop_9_12_15 (unspecified))) (begin (set! _loop_9_12_15 (lambda (_y1_4_5_16 _results_4_8_16) (if (null? _y1_4_5_16) (reverse _results_4_8_16) (begin #t (_loop_9_12_15 (let ((_x_20_23 _y1_4_5_16)) (begin (_check! (pair? _x_20_23) 1 _x_20_23) (cdr:pair _x_20_23))) (cons (let ((_x_24 (let ((_x_33_36 _y1_4_5_16)) (begin (_check! (pair? _x_33_36) 0 _x_33_36) (car:pair _x_33_36))))) (cons (let ((_x_25_28 _x_24)) (begin (_check! (pair? _x_25_28) 0 _x_25_28) (car:pair _x_25_28))) (let ((_x_29_32 _x_24)) (begin (_check! (pair? _x_29_32) 1 _x_29_32) (cdr:pair _x_29_32))))) _results_4_8_16)))))) (_loop_9_12_15 _alist_3 '())))))) (_copy-alist_2 _alist_1))))) 'copy-alist))
(let () '(define remq! (letrec ((loop (lambda (x y prev) (cond ((null? y) #t) ((eq? x (car y)) (set-cdr! prev (cdr y)) (loop x (cdr prev) prev)) (else (loop x (cdr y) y)))))) (lambda (x y) (cond ((null? y) '()) ((eq? x (car y)) (remq! x (cdr y))) (else (loop x (cdr y) y) y))))))
(let () (begin (set! integrable? (lambda (_name_1) (let ((_integrable?_2 0)) (begin (set! _integrable?_2 (lambda (_name_3) (if (integrate-usual-procedures) (prim-entry _name_3) #f))) (_integrable?_2 _name_1))))) 'integrable?))
(let () (begin (set! make-readable (lambda (_exp_1 _ _rest_1) (let ((_fancy?_4 (if (not (null? _rest_1)) (let ((_x_963_966 _rest_1)) (begin (_check! (pair? _x_963_966) 0 _x_963_966) (car:pair _x_963_966))) #f))) (let ((_make-readable-let*_5 (unspecified)) (_make-readable-let_5 (unspecified)) (_make-readable-call_5 (unspecified)) (_make-readable-quote_5 (unspecified)) (_make-readable_5 (unspecified))) (begin (set! _make-readable-let*_5 (lambda (_exp_6 _vars_6 _inits_6 _defs_6) (if (if (null? _defs_6) (if (call? _exp_6) (if (lambda? (call_proc _exp_6)) (= 1 (length (lambda_args (call_proc _exp_6)))) #f) #f) #f) (let ((_proc_13 (call_proc _exp_6)) (_arg_13 (let ((_x_92_95 (call_args _exp_6))) (begin (_check! (pair? _x_92_95) 0 _x_92_95) (car:pair _x_92_95))))) (if (if (call? _arg_13) (if (lambda? (call_proc _arg_13)) (if (= 1 (length (lambda_args (call_proc _arg_13)))) (null? (lambda_defs (call_proc _arg_13))) #f) #f) #f) (_make-readable-let*_5 (make-call _proc_13 (cons (lambda_body (call_proc _arg_13)) '())) (cons (let ((_x_19_22 (lambda_args (call_proc _arg_13)))) (begin (_check! (pair? _x_19_22) 0 _x_19_22) (car:pair _x_19_22))) _vars_6) (cons (_make-readable_5 (let ((_x_23_26 (call_args _arg_13))) (begin (_check! (pair? _x_23_26) 0 _x_23_26) (car:pair _x_23_26)))) _inits_6) '()) (_make-readable-let*_5 (lambda_body _proc_13) (cons (let ((_x_27_30 (lambda_args _proc_13))) (begin (_check! (pair? _x_27_30) 0 _x_27_30) (car:pair _x_27_30))) _vars_6) (cons (_make-readable_5 (let ((_x_31_34 (call_args _exp_6))) (begin (_check! (pair? _x_31_34) 0 _x_31_34) (car:pair _x_31_34)))) _inits_6) (let () (let ((_loop_40_43_46 (unspecified))) (begin (set! _loop_40_43_46 (lambda (_y1_35_36_47 _results_35_39_47) (if (null? _y1_35_36_47) (reverse _results_35_39_47) (begin #t (_loop_40_43_46 (let ((_x_51_54 _y1_35_36_47)) (begin (_check! (pair? _x_51_54) 1 _x_51_54) (cdr:pair _x_51_54))) (cons (let ((_def_55 (let ((_x_88_91 _y1_35_36_47)) (begin (_check! (pair? _x_88_91) 0 _x_88_91) (car:pair _x_88_91))))) (_cons 'define (_cons (def_lhs _def_55) (_cons (_make-readable_5 (def_rhs _def_55)) '())))) _results_35_39_47)))))) (_loop_40_43_46 (reverse (lambda_defs _proc_13)) '()))))))) (if (let ((_temp_97_100 (not (null? _vars_6)))) (if _temp_97_100 _temp_97_100 (not (null? _defs_6)))) (_cons 'let* (_cons (let () (let ((_loop_147_151_154 (unspecified))) (begin (set! _loop_147_151_154 (lambda (_y1_141_143_155 _y1_141_142_155 _results_141_146_155) (if (let ((_temp_157_160 (null? _y1_141_143_155))) (if _temp_157_160 _temp_157_160 (null? _y1_141_142_155))) (reverse _results_141_146_155) (begin #t (_loop_147_151_154 (let ((_x_163_166 _y1_141_143_155)) (begin (_check! (pair? _x_163_166) 1 _x_163_166) (cdr:pair _x_163_166))) (let ((_x_167_170 _y1_141_142_155)) (begin (_check! (pair? _x_167_170) 1 _x_167_170) (cdr:pair _x_167_170))) (cons (let* ((_t1_171_174 (let ((_x_186_189 _y1_141_143_155)) (begin (_check! (pair? _x_186_189) 0 _x_186_189) (car:pair _x_186_189)))) (_t2_171_177 (cons (let ((_x_182_185 _y1_141_142_155)) (begin (_check! (pair? _x_182_185) 0 _x_182_185) (car:pair _x_182_185))) '()))) (let () (cons _t1_171_174 _t2_171_177))) _results_141_146_155)))))) (_loop_147_151_154 (reverse _vars_6) (reverse _inits_6) '())))) (append _defs_6 (_cons (_make-readable_5 _exp_6) '())))) (if (if (call? _exp_6) (lambda? (call_proc _exp_6)) #f) (let ((_proc_195 (call_proc _exp_6))) (_cons 'let (_cons (let () (let ((_loop_241_245_248 (unspecified))) (begin (set! _loop_241_245_248 (lambda (_y1_235_237_249 _y1_235_236_249 _results_235_240_249) (if (let ((_temp_251_254 (null? _y1_235_237_249))) (if _temp_251_254 _temp_251_254 (null? _y1_235_236_249))) (reverse _results_235_240_249) (begin #t (_loop_241_245_248 (let ((_x_257_260 _y1_235_237_249)) (begin (_check! (pair? _x_257_260) 1 _x_257_260) (cdr:pair _x_257_260))) (let ((_x_261_264 _y1_235_236_249)) (begin (_check! (pair? _x_261_264) 1 _x_261_264) (cdr:pair _x_261_264))) (cons (let* ((_t1_265_268 (let ((_x_280_283 _y1_235_237_249)) (begin (_check! (pair? _x_280_283) 0 _x_280_283) (car:pair _x_280_283)))) (_t2_265_271 (cons (let ((_x_276_279 _y1_235_236_249)) (begin (_check! (pair? _x_276_279) 0 _x_276_279) (car:pair _x_276_279))) '()))) (let () (cons _t1_265_268 _t2_265_271))) _results_235_240_249)))))) (_loop_241_245_248 (lambda_args _proc_195) (let () (let ((_loop_289_292_295 (unspecified))) (begin (set! _loop_289_292_295 (lambda (_y1_284_285_296 _results_284_288_296) (if (null? _y1_284_285_296) (reverse _results_284_288_296) (begin #t (_loop_289_292_295 (let ((_x_300_303 _y1_284_285_296)) (begin (_check! (pair? _x_300_303) 1 _x_300_303) (cdr:pair _x_300_303))) (cons (_make-readable_5 (let ((_x_304_307 _y1_284_285_296)) (begin (_check! (pair? _x_304_307) 0 _x_304_307) (car:pair _x_304_307)))) _results_284_288_296)))))) (_loop_289_292_295 (call_args _exp_6) '())))) '())))) (append (let () (let ((_loop_313_316_319 (unspecified))) (begin (set! _loop_313_316_319 (lambda (_y1_308_309_320 _results_308_312_320) (if (null? _y1_308_309_320) (reverse _results_308_312_320) (begin #t (_loop_313_316_319 (let ((_x_324_327 _y1_308_309_320)) (begin (_check! (pair? _x_324_327) 1 _x_324_327) (cdr:pair _x_324_327))) (cons (let ((_def_328 (let ((_x_361_364 _y1_308_309_320)) (begin (_check! (pair? _x_361_364) 0 _x_361_364) (car:pair _x_361_364))))) (_cons 'define (_cons (def_lhs _def_328) (_cons (_make-readable_5 (def_rhs _def_328)) '())))) _results_308_312_320)))))) (_loop_313_316_319 (lambda_defs _proc_195) '())))) (_cons (_make-readable_5 (lambda_body _proc_195)) '()))))) (_make-readable_5 _exp_6)))))) (set! _make-readable-let_5 (lambda (_exp_366) (let* ((_l_369 (call_proc _exp_366)) (_formals_372 (lambda_args _l_369)) (_args_375 (let () (let ((_loop_646_649_652 (unspecified))) (begin (set! _loop_646_649_652 (lambda (_y1_641_642_653 _results_641_645_653) (if (null? _y1_641_642_653) (reverse _results_641_645_653) (begin #t (_loop_646_649_652 (let ((_x_657_660 _y1_641_642_653)) (begin (_check! (pair? _x_657_660) 1 _x_657_660) (cdr:pair _x_657_660))) (cons (_make-readable_5 (let ((_x_661_664 _y1_641_642_653)) (begin (_check! (pair? _x_661_664) 0 _x_661_664) (car:pair _x_661_664)))) _results_641_645_653)))))) (_loop_646_649_652 (call_args _exp_366) '()))))) (_body_378 (_make-readable_5 (lambda_body _l_369)))) (let () (if (if (null? (lambda_defs _l_369)) (if (= (length _args_375) 1) (if (pair? _body_378) (let ((_temp_386_389 (if (eq? (let ((_x_396_399 _body_378)) (begin (_check! (pair? _x_396_399) 0 _x_396_399) (car:pair _x_396_399))) 'let) (= (length (let ((_x_402_405 (let ((_x_406_409 _body_378)) (begin (_check! (pair? _x_406_409) 1 _x_406_409) (cdr:pair _x_406_409))))) (begin (_check! (pair? _x_402_405) 0 _x_402_405) (car:pair _x_402_405)))) 1) #f))) (if _temp_386_389 _temp_386_389 (eq? (let ((_x_391_394 _body_378)) (begin (_check! (pair? _x_391_394) 0 _x_391_394) (car:pair _x_391_394))) 'let*))) #f) #f) #f) (_cons 'let* (_cons (_cons (_cons (let ((_x_470_473 _formals_372)) (begin (_check! (pair? _x_470_473) 0 _x_470_473) (car:pair _x_470_473))) (_cons (let ((_x_474_477 _args_375)) (begin (_check! (pair? _x_474_477) 0 _x_474_477) (car:pair _x_474_477))) '())) (let ((_x_479_482 (let ((_x_483_486 _body_378)) (begin (_check! (pair? _x_483_486) 1 _x_483_486) (cdr:pair _x_483_486))))) (begin (_check! (pair? _x_479_482) 0 _x_479_482) (car:pair _x_479_482)))) (let ((_x_488_491 (let ((_x_492_495 _body_378)) (begin (_check! (pair? _x_492_495) 1 _x_492_495) (cdr:pair _x_492_495))))) (begin (_check! (pair? _x_488_491) 1 _x_488_491) (cdr:pair _x_488_491))))) (_cons 'let (_cons (let () (let ((_loop_541_545_548 (unspecified))) (begin (set! _loop_541_545_548 (lambda (_y1_535_537_549 _y1_535_536_549 _results_535_540_549) (if (let ((_temp_551_554 (null? _y1_535_537_549))) (if _temp_551_554 _temp_551_554 (null? _y1_535_536_549))) (reverse _results_535_540_549) (begin #t (_loop_541_545_548 (let ((_x_557_560 _y1_535_537_549)) (begin (_check! (pair? _x_557_560) 1 _x_557_560) (cdr:pair _x_557_560))) (let ((_x_561_564 _y1_535_536_549)) (begin (_check! (pair? _x_561_564) 1 _x_561_564) (cdr:pair _x_561_564))) (cons (let* ((_t1_565_568 (let ((_x_580_583 _y1_535_537_549)) (begin (_check! (pair? _x_580_583) 0 _x_580_583) (car:pair _x_580_583)))) (_t2_565_571 (cons (let ((_x_576_579 _y1_535_536_549)) (begin (_check! (pair? _x_576_579) 0 _x_576_579) (car:pair _x_576_579))) '()))) (let () (cons _t1_565_568 _t2_565_571))) _results_535_540_549)))))) (_loop_541_545_548 (lambda_args _l_369) _args_375 '())))) (append (let () (let ((_loop_589_592_595 (unspecified))) (begin (set! _loop_589_592_595 (lambda (_y1_584_585_596 _results_584_588_596) (if (null? _y1_584_585_596) (reverse _results_584_588_596) (begin #t (_loop_589_592_595 (let ((_x_600_603 _y1_584_585_596)) (begin (_check! (pair? _x_600_603) 1 _x_600_603) (cdr:pair _x_600_603))) (cons (let ((_def_604 (let ((_x_637_640 _y1_584_585_596)) (begin (_check! (pair? _x_637_640) 0 _x_637_640) (car:pair _x_637_640))))) (_cons 'define (_cons (def_lhs _def_604) (_cons (_make-readable_5 (def_rhs _def_604)) '())))) _results_584_588_596)))))) (_loop_589_592_595 (lambda_defs _l_369) '())))) (_cons _body_378 '()))))))))) (set! _make-readable-call_5 (lambda (_exp_665) (let ((_proc_668 (call_proc _exp_665))) (if (if _fancy?_4 (if (lambda? _proc_668) (list? (lambda_args _proc_668)) #f) #f) (_make-readable-let_5 _exp_665) (_cons (_make-readable_5 (call_proc _exp_665)) (let () (let ((_loop_696_699_702 (unspecified))) (begin (set! _loop_696_699_702 (lambda (_y1_691_692_703 _results_691_695_703) (if (null? _y1_691_692_703) (reverse _results_691_695_703) (begin #t (_loop_696_699_702 (let ((_x_707_710 _y1_691_692_703)) (begin (_check! (pair? _x_707_710) 1 _x_707_710) (cdr:pair _x_707_710))) (cons (_make-readable_5 (let ((_x_711_714 _y1_691_692_703)) (begin (_check! (pair? _x_711_714) 0 _x_711_714) (car:pair _x_711_714)))) _results_691_695_703)))))) (_loop_696_699_702 (call_args _exp_665) '()))))))))) (set! _make-readable-quote_5 (lambda (_exp_715) (let ((_x_718 (constant_value _exp_715))) (if (if _fancy?_4 (let ((_temp_721_724 (boolean? _x_718))) (if _temp_721_724 _temp_721_724 (let ((_temp_725_728 (number? _x_718))) (if _temp_725_728 _temp_725_728 (let ((_temp_729_732 (char? _x_718))) (if _temp_729_732 _temp_729_732 (string? _x_718))))))) #f) _x_718 _exp_715)))) (set! _make-readable_5 (lambda (_exp_734) (let ((_temp_735_738 (let ((_x_957_960 _exp_734)) (begin (_check! (pair? _x_957_960) 0 _x_957_960) (car:pair _x_957_960))))) (if (memv _temp_735_738 '(quote)) (_make-readable-quote_5 _exp_734) (if (memv _temp_735_738 '(lambda)) (_cons 'lambda (_cons (lambda_args _exp_734) (append (let () (let ((_loop_785_788_791 (unspecified))) (begin (set! _loop_785_788_791 (lambda (_y1_780_781_792 _results_780_784_792) (if (null? _y1_780_781_792) (reverse _results_780_784_792) (begin #t (_loop_785_788_791 (let ((_x_796_799 _y1_780_781_792)) (begin (_check! (pair? _x_796_799) 1 _x_796_799) (cdr:pair _x_796_799))) (cons (let ((_def_800 (let ((_x_833_836 _y1_780_781_792)) (begin (_check! (pair? _x_833_836) 0 _x_833_836) (car:pair _x_833_836))))) (_cons 'define (_cons (def_lhs _def_800) (_cons (_make-readable_5 (def_rhs _def_800)) '())))) _results_780_784_792)))))) (_loop_785_788_791 (lambda_defs _exp_734) '())))) (_cons (_make-readable_5 (lambda_body _exp_734)) '())))) (if (memv _temp_735_738 '(set!)) (_cons 'set! (_cons (assignment_lhs _exp_734) (_cons (_make-readable_5 (assignment_rhs _exp_734)) '()))) (if (memv _temp_735_738 '(if)) (_cons 'if (_cons (_make-readable_5 (if_test _exp_734)) (_cons (_make-readable_5 (if_then _exp_734)) (_cons (_make-readable_5 (if_else _exp_734)) '())))) (if (memv _temp_735_738 '(begin)) (if (variable? _exp_734) (variable_name _exp_734) (_cons 'begin (let () (let ((_loop_937_940_943 (unspecified))) (begin (set! _loop_937_940_943 (lambda (_y1_932_933_944 _results_932_936_944) (if (null? _y1_932_933_944) (reverse _results_932_936_944) (begin #t (_loop_937_940_943 (let ((_x_948_951 _y1_932_933_944)) (begin (_check! (pair? _x_948_951) 1 _x_948_951) (cdr:pair _x_948_951))) (cons (_make-readable_5 (let ((_x_952_955 _y1_932_933_944)) (begin (_check! (pair? _x_952_955) 0 _x_952_955) (car:pair _x_952_955)))) _results_932_936_944)))))) (_loop_937_940_943 (begin_exprs _exp_734) '())))))) (_make-readable-call_5 _exp_734))))))))) (_make-readable_5 _exp_1)))))) 'make-readable))
(let () (begin (set! make-unreadable (lambda (_exp_1) (let ((_make-unreadable_2 0)) (begin (set! _make-unreadable_2 (lambda (_exp_3) (if (symbol? _exp_3) (let* ((_t1_5_8 'begin) (_t2_5_11 (cons _exp_3 '()))) (let () (cons _t1_5_8 _t2_5_11))) (if (pair? _exp_3) (let ((_temp_17_20 (let ((_x_291_294 _exp_3)) (begin (_check! (pair? _x_291_294) 0 _x_291_294) (car:pair _x_291_294))))) (if (memv _temp_17_20 '(quote)) _exp_3 (if (memv _temp_17_20 '(lambda)) (let* ((_t1_23_26 'lambda) (_t2_23_29 (let* ((_t1_33_36 (let ((_x_105_108 (let ((_x_109_112 _exp_3)) (begin (_check! (pair? _x_109_112) 1 _x_109_112) (cdr:pair _x_109_112))))) (begin (_check! (pair? _x_105_108) 0 _x_105_108) (car:pair _x_105_108)))) (_t2_33_39 (let* ((_t1_43_46 '(begin)) (_t2_43_49 (let* ((_t1_53_56 (let* ((_t1_73_76 '()) (_t2_73_79 (let* ((_t1_83_86 '()) (_t2_83_89 (let* ((_t1_93_96 '()) (_t2_93_99 (cons '() '()))) (let () (cons _t1_93_96 _t2_93_99))))) (let () (cons _t1_83_86 _t2_83_89))))) (let () (cons _t1_73_76 _t2_73_79)))) (_t2_53_59 (cons (_make-unreadable_2 (cons 'begin (let ((_x_65_68 (let ((_x_69_72 _exp_3)) (begin (_check! (pair? _x_69_72) 1 _x_69_72) (cdr:pair _x_69_72))))) (begin (_check! (pair? _x_65_68) 1 _x_65_68) (cdr:pair _x_65_68))))) '()))) (let () (cons _t1_53_56 _t2_53_59))))) (let () (cons _t1_43_46 _t2_43_49))))) (let () (cons _t1_33_36 _t2_33_39))))) (let () (cons _t1_23_26 _t2_23_29))) (if (memv _temp_17_20 '(set!)) (let* ((_t1_114_117 'set!) (_t2_114_120 (let* ((_t1_124_127 (let ((_x_149_152 (let ((_x_153_156 _exp_3)) (begin (_check! (pair? _x_153_156) 1 _x_153_156) (cdr:pair _x_153_156))))) (begin (_check! (pair? _x_149_152) 0 _x_149_152) (car:pair _x_149_152)))) (_t2_124_130 (cons (_make-unreadable_2 (let ((_x_136_139 (let ((_x_140_143 (let ((_x_144_147 _exp_3)) (begin (_check! (pair? _x_144_147) 1 _x_144_147) (cdr:pair _x_144_147))))) (begin (_check! (pair? _x_140_143) 1 _x_140_143) (cdr:pair _x_140_143))))) (begin (_check! (pair? _x_136_139) 0 _x_136_139) (car:pair _x_136_139)))) '()))) (let () (cons _t1_124_127 _t2_124_130))))) (let () (cons _t1_114_117 _t2_114_120))) (if (memv _temp_17_20 '(if)) (let* ((_t1_158_161 'if) (_t2_158_164 (let* ((_t1_168_171 (_make-unreadable_2 (let ((_x_220_223 (let ((_x_224_227 _exp_3)) (begin (_check! (pair? _x_224_227) 1 _x_224_227) (cdr:pair _x_224_227))))) (begin (_check! (pair? _x_220_223) 0 _x_220_223) (car:pair _x_220_223))))) (_t2_168_174 (let* ((_t1_178_181 (_make-unreadable_2 (let ((_x_207_210 (let ((_x_211_214 (let ((_x_215_218 _exp_3)) (begin (_check! (pair? _x_215_218) 1 _x_215_218) (cdr:pair _x_215_218))))) (begin (_check! (pair? _x_211_214) 1 _x_211_214) (cdr:pair _x_211_214))))) (begin (_check! (pair? _x_207_210) 0 _x_207_210) (car:pair _x_207_210))))) (_t2_178_184 (cons (if (= (length _exp_3) 3) '(unspecified) (_make-unreadable_2 (let ((_x_190_193 (let ((_x_194_197 (let ((_x_198_201 (let ((_x_202_205 _exp_3)) (begin (_check! (pair? _x_202_205) 1 _x_202_205) (cdr:pair _x_202_205))))) (begin (_check! (pair? _x_198_201) 1 _x_198_201) (cdr:pair _x_198_201))))) (begin (_check! (pair? _x_194_197) 1 _x_194_197) (cdr:pair _x_194_197))))) (begin (_check! (pair? _x_190_193) 0 _x_190_193) (car:pair _x_190_193))))) '()))) (let () (cons _t1_178_181 _t2_178_184))))) (let () (cons _t1_168_171 _t2_168_174))))) (let () (cons _t1_158_161 _t2_158_164))) (if (memv _temp_17_20 '(begin)) (if (= (length _exp_3) 2) (_make-unreadable_2 (let ((_x_230_233 (let ((_x_234_237 _exp_3)) (begin (_check! (pair? _x_234_237) 1 _x_234_237) (cdr:pair _x_234_237))))) (begin (_check! (pair? _x_230_233) 0 _x_230_233) (car:pair _x_230_233)))) (cons 'begin (let () (let ((_loop_243_246_249 (unspecified))) (begin (set! _loop_243_246_249 (lambda (_y1_238_239_250 _results_238_242_250) (if (null? _y1_238_239_250) (reverse _results_238_242_250) (begin #t (_loop_243_246_249 (let ((_x_254_257 _y1_238_239_250)) (begin (_check! (pair? _x_254_257) 1 _x_254_257) (cdr:pair _x_254_257))) (cons (_make-unreadable_2 (let ((_x_258_261 _y1_238_239_250)) (begin (_check! (pair? _x_258_261) 0 _x_258_261) (car:pair _x_258_261)))) _results_238_242_250)))))) (_loop_243_246_249 (let ((_x_262_265 _exp_3)) (begin (_check! (pair? _x_262_265) 1 _x_262_265) (cdr:pair _x_262_265))) '())))))) (let () (let ((_loop_272_275_278 (unspecified))) (begin (set! _loop_272_275_278 (lambda (_y1_267_268_279 _results_267_271_279) (if (null? _y1_267_268_279) (reverse _results_267_271_279) (begin #t (_loop_272_275_278 (let ((_x_283_286 _y1_267_268_279)) (begin (_check! (pair? _x_283_286) 1 _x_283_286) (cdr:pair _x_283_286))) (cons (_make-unreadable_2 (let ((_x_287_290 _y1_267_268_279)) (begin (_check! (pair? _x_287_290) 0 _x_287_290) (car:pair _x_287_290)))) _results_267_271_279)))))) (_loop_272_275_278 _exp_3 '())))))))))) (let* ((_t1_296_299 'quote) (_t2_296_302 (cons _exp_3 '()))) (let () (cons _t1_296_299 _t2_296_302))))))) (_make-unreadable_2 _exp_1))))) 'make-unreadable))
(let () ($$trace "pass2_aux"))
(let () (begin (set! constant? (lambda (_exp_1) (let ((_constant?_2 0)) (begin (set! _constant?_2 (lambda (_exp_3) (eq? (let ((_x_4_7 _exp_3)) (begin (_check! (pair? _x_4_7) 0 _x_4_7) (car:pair _x_4_7))) 'quote))) (_constant?_2 _exp_1))))) 'constant?))
(let () (begin (set! variable? (lambda (_exp_1) (let ((_variable?_2 0)) (begin (set! _variable?_2 (lambda (_exp_3) (if (eq? (let ((_x_5_8 _exp_3)) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))) 'begin) (null? (let ((_x_11_14 (let ((_x_15_18 _exp_3)) (begin (_check! (pair? _x_15_18) 1 _x_15_18) (cdr:pair _x_15_18))))) (begin (_check! (pair? _x_11_14) 1 _x_11_14) (cdr:pair _x_11_14)))) #f))) (_variable?_2 _exp_1))))) 'variable?))
(let () (begin (set! lambda? (lambda (_exp_1) (let ((_lambda?_2 0)) (begin (set! _lambda?_2 (lambda (_exp_3) (eq? (let ((_x_4_7 _exp_3)) (begin (_check! (pair? _x_4_7) 0 _x_4_7) (car:pair _x_4_7))) 'lambda))) (_lambda?_2 _exp_1))))) 'lambda?))
(let () (begin (set! call? (lambda (_exp_1) (let ((_call?_2 0)) (begin (set! _call?_2 (lambda (_exp_3) (pair? (let ((_x_4_7 _exp_3)) (begin (_check! (pair? _x_4_7) 0 _x_4_7) (car:pair _x_4_7)))))) (_call?_2 _exp_1))))) 'call?))
(let () (begin (set! assignment? (lambda (_exp_1) (let ((_assignment?_2 0)) (begin (set! _assignment?_2 (lambda (_exp_3) (eq? (let ((_x_4_7 _exp_3)) (begin (_check! (pair? _x_4_7) 0 _x_4_7) (car:pair _x_4_7))) 'set!))) (_assignment?_2 _exp_1))))) 'assignment?))
(let () (begin (set! conditional? (lambda (_exp_1) (let ((_conditional?_2 0)) (begin (set! _conditional?_2 (lambda (_exp_3) (eq? (let ((_x_4_7 _exp_3)) (begin (_check! (pair? _x_4_7) 0 _x_4_7) (car:pair _x_4_7))) 'if))) (_conditional?_2 _exp_1))))) 'conditional?))
(let () (begin (set! begin? (lambda (_exp_1) (let ((_begin?_2 0)) (begin (set! _begin?_2 (lambda (_exp_3) (if (eq? (let ((_x_5_8 _exp_3)) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))) 'begin) (not (null? (let ((_x_11_14 (let ((_x_15_18 _exp_3)) (begin (_check! (pair? _x_15_18) 1 _x_15_18) (cdr:pair _x_15_18))))) (begin (_check! (pair? _x_11_14) 1 _x_11_14) (cdr:pair _x_11_14))))) #f))) (_begin?_2 _exp_1))))) 'begin?))
(let () (begin (set! make-constant (lambda (_value_1) (let ((_make-constant_2 0)) (begin (set! _make-constant_2 (lambda (_value_3) (let* ((_t1_4_7 'quote) (_t2_4_10 (cons _value_3 '()))) (let () (cons _t1_4_7 _t2_4_10))))) (_make-constant_2 _value_1))))) 'make-constant))
(let () (begin (set! make-variable (lambda (_name_1) (let ((_make-variable_2 0)) (begin (set! _make-variable_2 (lambda (_name_3) (let* ((_t1_4_7 'begin) (_t2_4_10 (cons _name_3 '()))) (let () (cons _t1_4_7 _t2_4_10))))) (_make-variable_2 _name_1))))) 'make-variable))
(let () (begin (set! make-lambda (lambda (_formals_1 _defs_1 _r_1 _f_1 _g_1 _decls_1 _doc_1 _body_1) (let ((_make-lambda_2 0)) (begin (set! _make-lambda_2 (lambda (_formals_3 _defs_3 _r_3 _f_3 _g_3 _decls_3 _doc_3 _body_3) (let* ((_t1_4_7 'lambda) (_t2_4_10 (let* ((_t1_14_17 _formals_3) (_t2_14_20 (let* ((_t1_24_27 (cons 'begin _defs_3)) (_t2_24_30 (let* ((_t1_34_37 (let* ((_t1_45_48 'quote) (_t2_45_51 (cons (let* ((_t1_56_59 _r_3) (_t2_56_62 (let* ((_t1_66_69 _f_3) (_t2_66_72 (let* ((_t1_76_79 _g_3) (_t2_76_82 (let* ((_t1_86_89 _decls_3) (_t2_86_92 (cons _doc_3 '()))) (let () (cons _t1_86_89 _t2_86_92))))) (let () (cons _t1_76_79 _t2_76_82))))) (let () (cons _t1_66_69 _t2_66_72))))) (let () (cons _t1_56_59 _t2_56_62))) '()))) (let () (cons _t1_45_48 _t2_45_51)))) (_t2_34_40 (cons _body_3 '()))) (let () (cons _t1_34_37 _t2_34_40))))) (let () (cons _t1_24_27 _t2_24_30))))) (let () (cons _t1_14_17 _t2_14_20))))) (let () (cons _t1_4_7 _t2_4_10))))) (_make-lambda_2 _formals_1 _defs_1 _r_1 _f_1 _g_1 _decls_1 _doc_1 _body_1))))) 'make-lambda))
(let () (begin (set! make-call (lambda (_proc_1 _args_1) (let ((_make-call_2 0)) (begin (set! _make-call_2 (lambda (_proc_3 _args_3) (cons _proc_3 (append _args_3 '())))) (_make-call_2 _proc_1 _args_1))))) 'make-call))
(let () (begin (set! make-assignment (lambda (_lhs_1 _rhs_1) (let ((_make-assignment_2 0)) (begin (set! _make-assignment_2 (lambda (_lhs_3 _rhs_3) (let* ((_t1_4_7 'set!) (_t2_4_10 (let* ((_t1_14_17 _lhs_3) (_t2_14_20 (cons _rhs_3 '()))) (let () (cons _t1_14_17 _t2_14_20))))) (let () (cons _t1_4_7 _t2_4_10))))) (_make-assignment_2 _lhs_1 _rhs_1))))) 'make-assignment))
(let () (begin (set! make-conditional (lambda (_e0_1 _e1_1 _e2_1) (let ((_make-conditional_2 0)) (begin (set! _make-conditional_2 (lambda (_e0_3 _e1_3 _e2_3) (let* ((_t1_4_7 'if) (_t2_4_10 (let* ((_t1_14_17 _e0_3) (_t2_14_20 (let* ((_t1_24_27 _e1_3) (_t2_24_30 (cons _e2_3 '()))) (let () (cons _t1_24_27 _t2_24_30))))) (let () (cons _t1_14_17 _t2_14_20))))) (let () (cons _t1_4_7 _t2_4_10))))) (_make-conditional_2 _e0_1 _e1_1 _e2_1))))) 'make-conditional))
(let () (begin (set! make-begin (lambda (_exprs_1) (let ((_make-begin_2 0)) (begin (set! _make-begin_2 (lambda (_exprs_3) (if (null? (let ((_x_4_7 _exprs_3)) (begin (_check! (pair? _x_4_7) 1 _x_4_7) (cdr:pair _x_4_7)))) (let ((_x_8_11 _exprs_3)) (begin (_check! (pair? _x_8_11) 0 _x_8_11) (car:pair _x_8_11))) (cons 'begin (append _exprs_3 '()))))) (_make-begin_2 _exprs_1))))) 'make-begin))
(let () (begin (set! make-definition (lambda (_lhs_1 _rhs_1) (let ((_make-definition_2 0)) (begin (set! _make-definition_2 (lambda (_lhs_3 _rhs_3) (let* ((_t1_4_7 'define) (_t2_4_10 (let* ((_t1_14_17 _lhs_3) (_t2_14_20 (cons _rhs_3 '()))) (let () (cons _t1_14_17 _t2_14_20))))) (let () (cons _t1_4_7 _t2_4_10))))) (_make-definition_2 _lhs_1 _rhs_1))))) 'make-definition))
(let () (begin (set! constant_value (lambda (_exp_1) (let ((_constant_value_2 0)) (begin (set! _constant_value_2 (lambda (_exp_3) (let ((_x_5_8 (let ((_x_9_12 _exp_3)) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))))) (_constant_value_2 _exp_1))))) 'constant_value))
(let () (begin (set! variable_name (lambda (_exp_1) (let ((_variable_name_2 0)) (begin (set! _variable_name_2 (lambda (_exp_3) (let ((_x_5_8 (let ((_x_9_12 _exp_3)) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))))) (_variable_name_2 _exp_1))))) 'variable_name))
(let () (begin (set! lambda_args (lambda (_exp_1) (let ((_lambda_args_2 0)) (begin (set! _lambda_args_2 (lambda (_exp_3) (let ((_x_5_8 (let ((_x_9_12 _exp_3)) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))))) (_lambda_args_2 _exp_1))))) 'lambda_args))
(let () (begin (set! lambda_defs (lambda (_exp_1) (let ((_lambda_defs_2 0)) (begin (set! _lambda_defs_2 (lambda (_exp_3) (let ((_x_4_7 (let ((_x_9_12 (let ((_x_13_16 (let ((_x_17_20 _exp_3)) (begin (_check! (pair? _x_17_20) 1 _x_17_20) (cdr:pair _x_17_20))))) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 0 _x_9_12) (car:pair _x_9_12))))) (begin (_check! (pair? _x_4_7) 1 _x_4_7) (cdr:pair _x_4_7))))) (_lambda_defs_2 _exp_1))))) 'lambda_defs))
(let () (begin (set! lambda_r (lambda (_exp_1) (let ((_lambda_r_2 0)) (begin (set! _lambda_r_2 (lambda (_exp_3) (let ((_x_4_7 (let ((_x_9_12 (let ((_x_13_16 (let ((_x_18_21 (let ((_x_22_25 (let ((_x_26_29 (let ((_x_30_33 _exp_3)) (begin (_check! (pair? _x_30_33) 1 _x_30_33) (cdr:pair _x_30_33))))) (begin (_check! (pair? _x_26_29) 1 _x_26_29) (cdr:pair _x_26_29))))) (begin (_check! (pair? _x_22_25) 1 _x_22_25) (cdr:pair _x_22_25))))) (begin (_check! (pair? _x_18_21) 0 _x_18_21) (car:pair _x_18_21))))) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 0 _x_9_12) (car:pair _x_9_12))))) (begin (_check! (pair? _x_4_7) 0 _x_4_7) (car:pair _x_4_7))))) (_lambda_r_2 _exp_1))))) 'lambda_r))
(let () (begin (set! lambda_f (lambda (_exp_1) (let ((_lambda_f_2 0)) (begin (set! _lambda_f_2 (lambda (_exp_3) (let ((_x_5_8 (let ((_x_9_12 (let ((_x_14_17 (let ((_x_18_21 (let ((_x_23_26 (let ((_x_27_30 (let ((_x_31_34 (let ((_x_35_38 _exp_3)) (begin (_check! (pair? _x_35_38) 1 _x_35_38) (cdr:pair _x_35_38))))) (begin (_check! (pair? _x_31_34) 1 _x_31_34) (cdr:pair _x_31_34))))) (begin (_check! (pair? _x_27_30) 1 _x_27_30) (cdr:pair _x_27_30))))) (begin (_check! (pair? _x_23_26) 0 _x_23_26) (car:pair _x_23_26))))) (begin (_check! (pair? _x_18_21) 1 _x_18_21) (cdr:pair _x_18_21))))) (begin (_check! (pair? _x_14_17) 0 _x_14_17) (car:pair _x_14_17))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))))) (_lambda_f_2 _exp_1))))) 'lambda_f))
(let () (begin (set! lambda_g (lambda (_exp_1) (let ((_lambda_g_2 0)) (begin (set! _lambda_g_2 (lambda (_exp_3) (let ((_x_5_8 (let ((_x_9_12 (let ((_x_13_16 (let ((_x_18_21 (let ((_x_22_25 (let ((_x_27_30 (let ((_x_31_34 (let ((_x_35_38 (let ((_x_39_42 _exp_3)) (begin (_check! (pair? _x_39_42) 1 _x_39_42) (cdr:pair _x_39_42))))) (begin (_check! (pair? _x_35_38) 1 _x_35_38) (cdr:pair _x_35_38))))) (begin (_check! (pair? _x_31_34) 1 _x_31_34) (cdr:pair _x_31_34))))) (begin (_check! (pair? _x_27_30) 0 _x_27_30) (car:pair _x_27_30))))) (begin (_check! (pair? _x_22_25) 1 _x_22_25) (cdr:pair _x_22_25))))) (begin (_check! (pair? _x_18_21) 0 _x_18_21) (car:pair _x_18_21))))) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))))) (_lambda_g_2 _exp_1))))) 'lambda_g))
(let () (begin (set! lambda_decls (lambda (_exp_1) (let ((_lambda_decls_2 0)) (begin (set! _lambda_decls_2 (lambda (_exp_3) (let ((_x_5_8 (let ((_x_9_12 (let ((_x_13_16 (let ((_x_17_20 (let ((_x_22_25 (let ((_x_26_29 (let ((_x_31_34 (let ((_x_35_38 (let ((_x_39_42 (let ((_x_43_46 _exp_3)) (begin (_check! (pair? _x_43_46) 1 _x_43_46) (cdr:pair _x_43_46))))) (begin (_check! (pair? _x_39_42) 1 _x_39_42) (cdr:pair _x_39_42))))) (begin (_check! (pair? _x_35_38) 1 _x_35_38) (cdr:pair _x_35_38))))) (begin (_check! (pair? _x_31_34) 0 _x_31_34) (car:pair _x_31_34))))) (begin (_check! (pair? _x_26_29) 1 _x_26_29) (cdr:pair _x_26_29))))) (begin (_check! (pair? _x_22_25) 0 _x_22_25) (car:pair _x_22_25))))) (begin (_check! (pair? _x_17_20) 1 _x_17_20) (cdr:pair _x_17_20))))) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))))) (_lambda_decls_2 _exp_1))))) 'lambda_decls))
(let () (begin (set! lambda_doc (lambda (_exp_1) (let ((_lambda_doc_2 0)) (begin (set! _lambda_doc_2 (lambda (_exp_3) (let ((_x_4_7 (let ((_x_9_12 (let ((_x_13_16 (let ((_x_17_20 (let ((_x_21_24 (let ((_x_26_29 (let ((_x_30_33 (let ((_x_35_38 (let ((_x_39_42 (let ((_x_43_46 (let ((_x_47_50 _exp_3)) (begin (_check! (pair? _x_47_50) 1 _x_47_50) (cdr:pair _x_47_50))))) (begin (_check! (pair? _x_43_46) 1 _x_43_46) (cdr:pair _x_43_46))))) (begin (_check! (pair? _x_39_42) 1 _x_39_42) (cdr:pair _x_39_42))))) (begin (_check! (pair? _x_35_38) 0 _x_35_38) (car:pair _x_35_38))))) (begin (_check! (pair? _x_30_33) 1 _x_30_33) (cdr:pair _x_30_33))))) (begin (_check! (pair? _x_26_29) 0 _x_26_29) (car:pair _x_26_29))))) (begin (_check! (pair? _x_21_24) 1 _x_21_24) (cdr:pair _x_21_24))))) (begin (_check! (pair? _x_17_20) 1 _x_17_20) (cdr:pair _x_17_20))))) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_4_7) 0 _x_4_7) (car:pair _x_4_7))))) (_lambda_doc_2 _exp_1))))) 'lambda_doc))
(let () (begin (set! lambda_body (lambda (_exp_1) (let ((_lambda_body_2 0)) (begin (set! _lambda_body_2 (lambda (_exp_3) (let ((_x_4_7 (let ((_x_9_12 (let ((_x_13_16 (let ((_x_17_20 (let ((_x_21_24 _exp_3)) (begin (_check! (pair? _x_21_24) 1 _x_21_24) (cdr:pair _x_21_24))))) (begin (_check! (pair? _x_17_20) 1 _x_17_20) (cdr:pair _x_17_20))))) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_4_7) 0 _x_4_7) (car:pair _x_4_7))))) (_lambda_body_2 _exp_1))))) 'lambda_body))
(let () (begin (set! call_proc (lambda (_exp_1) (let ((_call_proc_2 0)) (begin (set! _call_proc_2 (lambda (_exp_3) (let ((_x_4_7 _exp_3)) (begin (_check! (pair? _x_4_7) 0 _x_4_7) (car:pair _x_4_7))))) (_call_proc_2 _exp_1))))) 'call_proc))
(let () (begin (set! call_args (lambda (_exp_1) (let ((_call_args_2 0)) (begin (set! _call_args_2 (lambda (_exp_3) (let ((_x_4_7 _exp_3)) (begin (_check! (pair? _x_4_7) 1 _x_4_7) (cdr:pair _x_4_7))))) (_call_args_2 _exp_1))))) 'call_args))
(let () (begin (set! assignment_lhs (lambda (_exp_1) (let ((_assignment_lhs_2 0)) (begin (set! _assignment_lhs_2 (lambda (_exp_3) (let ((_x_5_8 (let ((_x_9_12 _exp_3)) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))))) (_assignment_lhs_2 _exp_1))))) 'assignment_lhs))
(let () (begin (set! assignment_rhs (lambda (_exp_1) (let ((_assignment_rhs_2 0)) (begin (set! _assignment_rhs_2 (lambda (_exp_3) (let ((_x_5_8 (let ((_x_9_12 (let ((_x_13_16 _exp_3)) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))))) (_assignment_rhs_2 _exp_1))))) 'assignment_rhs))
(let () (begin (set! if_test (lambda (_exp_1) (let ((_if_test_2 0)) (begin (set! _if_test_2 (lambda (_exp_3) (let ((_x_5_8 (let ((_x_9_12 _exp_3)) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))))) (_if_test_2 _exp_1))))) 'if_test))
(let () (begin (set! if_then (lambda (_exp_1) (let ((_if_then_2 0)) (begin (set! _if_then_2 (lambda (_exp_3) (let ((_x_5_8 (let ((_x_9_12 (let ((_x_13_16 _exp_3)) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))))) (_if_then_2 _exp_1))))) 'if_then))
(let () (begin (set! if_else (lambda (_exp_1) (let ((_if_else_2 0)) (begin (set! _if_else_2 (lambda (_exp_3) (let ((_x_5_8 (let ((_x_9_12 (let ((_x_13_16 (let ((_x_17_20 _exp_3)) (begin (_check! (pair? _x_17_20) 1 _x_17_20) (cdr:pair _x_17_20))))) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))))) (_if_else_2 _exp_1))))) 'if_else))
(let () (begin (set! begin_exprs (lambda (_exp_1) (let ((_begin_exprs_2 0)) (begin (set! _begin_exprs_2 (lambda (_exp_3) (let ((_x_4_7 _exp_3)) (begin (_check! (pair? _x_4_7) 1 _x_4_7) (cdr:pair _x_4_7))))) (_begin_exprs_2 _exp_1))))) 'begin_exprs))
(let () (begin (set! def_lhs (lambda (_exp_1) (let ((_def_lhs_2 0)) (begin (set! _def_lhs_2 (lambda (_exp_3) (let ((_x_5_8 (let ((_x_9_12 _exp_3)) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))))) (_def_lhs_2 _exp_1))))) 'def_lhs))
(let () (begin (set! def_rhs (lambda (_exp_1) (let ((_def_rhs_2 0)) (begin (set! _def_rhs_2 (lambda (_exp_3) (let ((_x_5_8 (let ((_x_9_12 (let ((_x_13_16 _exp_3)) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))))) (_def_rhs_2 _exp_1))))) 'def_rhs))
(let () (begin (set! variable-set! (lambda (_exp_1 _newexp_1) (let ((_variable-set!_2 0)) (begin (set! _variable-set!_2 (lambda (_exp_3 _newexp_3) (begin (set-car! _exp_3 (let ((_x_4_7 _newexp_3)) (begin (_check! (pair? _x_4_7) 0 _x_4_7) (car:pair _x_4_7)))) (set-cdr! _exp_3 (append (let ((_x_8_11 _newexp_3)) (begin (_check! (pair? _x_8_11) 1 _x_8_11) (cdr:pair _x_8_11))) '()))))) (_variable-set!_2 _exp_1 _newexp_1))))) 'variable-set!))
(let () (begin (set! lambda_args-set! (lambda (_exp_1 _args_1) (let ((_lambda_args-set!_2 0)) (begin (set! _lambda_args-set!_2 (lambda (_exp_3 _args_3) (set-car! (let ((_x_4_7 _exp_3)) (begin (_check! (pair? _x_4_7) 1 _x_4_7) (cdr:pair _x_4_7))) _args_3))) (_lambda_args-set!_2 _exp_1 _args_1))))) 'lambda_args-set!))
(let () (begin (set! lambda_defs-set! (lambda (_exp_1 _defs_1) (let ((_lambda_defs-set!_2 0)) (begin (set! _lambda_defs-set!_2 (lambda (_exp_3 _defs_3) (set-cdr! (let ((_x_5_8 (let ((_x_9_12 (let ((_x_13_16 _exp_3)) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))) _defs_3))) (_lambda_defs-set!_2 _exp_1 _defs_1))))) 'lambda_defs-set!))
(let () (begin (set! lambda_r-set! (lambda (_exp_1 _r_1) (let ((_lambda_r-set!_2 0)) (begin (set! _lambda_r-set!_2 (lambda (_exp_3 _r_3) (set-car! (let ((_x_5_8 (let ((_x_9_12 (let ((_x_14_17 (let ((_x_18_21 (let ((_x_22_25 (let ((_x_26_29 _exp_3)) (begin (_check! (pair? _x_26_29) 1 _x_26_29) (cdr:pair _x_26_29))))) (begin (_check! (pair? _x_22_25) 1 _x_22_25) (cdr:pair _x_22_25))))) (begin (_check! (pair? _x_18_21) 1 _x_18_21) (cdr:pair _x_18_21))))) (begin (_check! (pair? _x_14_17) 0 _x_14_17) (car:pair _x_14_17))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))) _r_3))) (_lambda_r-set!_2 _exp_1 _r_1))))) 'lambda_r-set!))
(let () (begin (set! lambda_f-set! (lambda (_exp_1 _f_1) (let ((_lambda_f-set!_2 0)) (begin (set! _lambda_f-set!_2 (lambda (_exp_3 _f_3) (set-car! (let ((_x_4_7 (let ((_x_9_12 (let ((_x_13_16 (let ((_x_18_21 (let ((_x_22_25 (let ((_x_26_29 (let ((_x_30_33 _exp_3)) (begin (_check! (pair? _x_30_33) 1 _x_30_33) (cdr:pair _x_30_33))))) (begin (_check! (pair? _x_26_29) 1 _x_26_29) (cdr:pair _x_26_29))))) (begin (_check! (pair? _x_22_25) 1 _x_22_25) (cdr:pair _x_22_25))))) (begin (_check! (pair? _x_18_21) 0 _x_18_21) (car:pair _x_18_21))))) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 0 _x_9_12) (car:pair _x_9_12))))) (begin (_check! (pair? _x_4_7) 1 _x_4_7) (cdr:pair _x_4_7))) _f_3))) (_lambda_f-set!_2 _exp_1 _f_1))))) 'lambda_f-set!))
(let () (begin (set! lambda_g-set! (lambda (_exp_1 _g_1) (let ((_lambda_g-set!_2 0)) (begin (set! _lambda_g-set!_2 (lambda (_exp_3 _g_3) (set-car! (let ((_x_5_8 (let ((_x_9_12 (let ((_x_14_17 (let ((_x_18_21 (let ((_x_23_26 (let ((_x_27_30 (let ((_x_31_34 (let ((_x_35_38 _exp_3)) (begin (_check! (pair? _x_35_38) 1 _x_35_38) (cdr:pair _x_35_38))))) (begin (_check! (pair? _x_31_34) 1 _x_31_34) (cdr:pair _x_31_34))))) (begin (_check! (pair? _x_27_30) 1 _x_27_30) (cdr:pair _x_27_30))))) (begin (_check! (pair? _x_23_26) 0 _x_23_26) (car:pair _x_23_26))))) (begin (_check! (pair? _x_18_21) 1 _x_18_21) (cdr:pair _x_18_21))))) (begin (_check! (pair? _x_14_17) 0 _x_14_17) (car:pair _x_14_17))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 1 _x_5_8) (cdr:pair _x_5_8))) _g_3))) (_lambda_g-set!_2 _exp_1 _g_1))))) 'lambda_g-set!))
(let () (begin (set! lambda_decls-set! (lambda (_exp_1 _decls_1) (let ((_lambda_decls-set!_2 0)) (begin (set! _lambda_decls-set!_2 (lambda (_exp_3 _decls_3) (set-car! (let ((_x_5_8 (let ((_x_9_12 (let ((_x_13_16 (let ((_x_18_21 (let ((_x_22_25 (let ((_x_27_30 (let ((_x_31_34 (let ((_x_35_38 (let ((_x_39_42 _exp_3)) (begin (_check! (pair? _x_39_42) 1 _x_39_42) (cdr:pair _x_39_42))))) (begin (_check! (pair? _x_35_38) 1 _x_35_38) (cdr:pair _x_35_38))))) (begin (_check! (pair? _x_31_34) 1 _x_31_34) (cdr:pair _x_31_34))))) (begin (_check! (pair? _x_27_30) 0 _x_27_30) (car:pair _x_27_30))))) (begin (_check! (pair? _x_22_25) 1 _x_22_25) (cdr:pair _x_22_25))))) (begin (_check! (pair? _x_18_21) 0 _x_18_21) (car:pair _x_18_21))))) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 1 _x_5_8) (cdr:pair _x_5_8))) _decls_3))) (_lambda_decls-set!_2 _exp_1 _decls_1))))) 'lambda_decls-set!))
(let () (begin (set! lambda_doc-set! (lambda (_exp_1 _doc_1) (let ((_lambda_doc-set!_2 0)) (begin (set! _lambda_doc-set!_2 (lambda (_exp_3 _doc_3) (set-car! (let ((_x_5_8 (let ((_x_9_12 (let ((_x_13_16 (let ((_x_17_20 (let ((_x_22_25 (let ((_x_26_29 (let ((_x_31_34 (let ((_x_35_38 (let ((_x_39_42 (let ((_x_43_46 _exp_3)) (begin (_check! (pair? _x_43_46) 1 _x_43_46) (cdr:pair _x_43_46))))) (begin (_check! (pair? _x_39_42) 1 _x_39_42) (cdr:pair _x_39_42))))) (begin (_check! (pair? _x_35_38) 1 _x_35_38) (cdr:pair _x_35_38))))) (begin (_check! (pair? _x_31_34) 0 _x_31_34) (car:pair _x_31_34))))) (begin (_check! (pair? _x_26_29) 1 _x_26_29) (cdr:pair _x_26_29))))) (begin (_check! (pair? _x_22_25) 0 _x_22_25) (car:pair _x_22_25))))) (begin (_check! (pair? _x_17_20) 1 _x_17_20) (cdr:pair _x_17_20))))) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 1 _x_5_8) (cdr:pair _x_5_8))) _doc_3))) (_lambda_doc-set!_2 _exp_1 _doc_1))))) 'lambda_doc-set!))
(let () (begin (set! lambda_body-set! (lambda (_exp_1 _exp0_1) (let ((_lambda_body-set!_2 0)) (begin (set! _lambda_body-set!_2 (lambda (_exp_3 _exp0_3) (set-car! (let ((_x_5_8 (let ((_x_9_12 (let ((_x_13_16 (let ((_x_17_20 _exp_3)) (begin (_check! (pair? _x_17_20) 1 _x_17_20) (cdr:pair _x_17_20))))) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 1 _x_5_8) (cdr:pair _x_5_8))) _exp0_3))) (_lambda_body-set!_2 _exp_1 _exp0_1))))) 'lambda_body-set!))
(let () (begin (set! call_proc-set! (lambda (_exp_1 _exp0_1) (let ((_call_proc-set!_2 0)) (begin (set! _call_proc-set!_2 (lambda (_exp_3 _exp0_3) (set-car! _exp_3 _exp0_3))) (_call_proc-set!_2 _exp_1 _exp0_1))))) 'call_proc-set!))
(let () (begin (set! call_args-set! (lambda (_exp_1 _exprs_1) (let ((_call_args-set!_2 0)) (begin (set! _call_args-set!_2 (lambda (_exp_3 _exprs_3) (set-cdr! _exp_3 _exprs_3))) (_call_args-set!_2 _exp_1 _exprs_1))))) 'call_args-set!))
(let () (begin (set! assignment_rhs-set! (lambda (_exp_1 _exp0_1) (let ((_assignment_rhs-set!_2 0)) (begin (set! _assignment_rhs-set!_2 (lambda (_exp_3 _exp0_3) (set-car! (let ((_x_5_8 (let ((_x_9_12 _exp_3)) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 1 _x_5_8) (cdr:pair _x_5_8))) _exp0_3))) (_assignment_rhs-set!_2 _exp_1 _exp0_1))))) 'assignment_rhs-set!))
(let () (begin (set! if_test-set! (lambda (_exp_1 _exp0_1) (let ((_if_test-set!_2 0)) (begin (set! _if_test-set!_2 (lambda (_exp_3 _exp0_3) (set-car! (let ((_x_4_7 _exp_3)) (begin (_check! (pair? _x_4_7) 1 _x_4_7) (cdr:pair _x_4_7))) _exp0_3))) (_if_test-set!_2 _exp_1 _exp0_1))))) 'if_test-set!))
(let () (begin (set! if_then-set! (lambda (_exp_1 _exp0_1) (let ((_if_then-set!_2 0)) (begin (set! _if_then-set!_2 (lambda (_exp_3 _exp0_3) (set-car! (let ((_x_5_8 (let ((_x_9_12 _exp_3)) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 1 _x_5_8) (cdr:pair _x_5_8))) _exp0_3))) (_if_then-set!_2 _exp_1 _exp0_1))))) 'if_then-set!))
(let () (begin (set! if_else-set! (lambda (_exp_1 _exp0_1) (let ((_if_else-set!_2 0)) (begin (set! _if_else-set!_2 (lambda (_exp_3 _exp0_3) (set-car! (let ((_x_5_8 (let ((_x_9_12 (let ((_x_13_16 _exp_3)) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 1 _x_5_8) (cdr:pair _x_5_8))) _exp0_3))) (_if_else-set!_2 _exp_1 _exp0_1))))) 'if_else-set!))
(let () (begin (set! begin_exprs-set! (lambda (_exp_1 _exprs_1) (let ((_begin_exprs-set!_2 0)) (begin (set! _begin_exprs-set!_2 (lambda (_exp_3 _exprs_3) (set-cdr! _exp_3 _exprs_3))) (_begin_exprs-set!_2 _exp_1 _exprs_1))))) 'begin_exprs-set!))
(let () (begin (set! expression-set! variable-set!) 'expression-set!))
(let () (begin (set! make-doc (lambda (_name_1 _arity_1 _formals_1 _source-code_1 _filename_1 _filepos_1) (let ((_make-doc_2 0)) (begin (set! _make-doc_2 (lambda (_name_3 _arity_3 _formals_3 _source-code_3 _filename_3 _filepos_3) (let* ((_t_4_10_15 _formals_3) (_t_4_9_18 _filepos_3) (_t_4_8_21 _filename_3) (_t_4_7_24 _arity_3) (_t_4_6_27 _source-code_3) (_t_4_5_30 _name_3) (_v_4_12_33 (make-vector 6 _t_4_10_15))) (let () (begin (let ((_v_37_40 _v_4_12_33) (_i_37_40 4) (_x_37_40 _t_4_9_18)) (begin (_check! (fixnum? _i_37_40) 41 _v_37_40 _i_37_40 _x_37_40) (_check! (vector? _v_37_40) 41 _v_37_40 _i_37_40 _x_37_40) (_check! (<:fix:fix _i_37_40 (vector-length:vec _v_37_40)) 41 _v_37_40 _i_37_40 _x_37_40) (_check! (>=:fix:fix _i_37_40 0) 41 _v_37_40 _i_37_40 _x_37_40) (vector-set!:trusted _v_37_40 _i_37_40 _x_37_40))) (let ((_v_41_44 _v_4_12_33) (_i_41_44 3) (_x_41_44 _t_4_8_21)) (begin (_check! (fixnum? _i_41_44) 41 _v_41_44 _i_41_44 _x_41_44) (_check! (vector? _v_41_44) 41 _v_41_44 _i_41_44 _x_41_44) (_check! (<:fix:fix _i_41_44 (vector-length:vec _v_41_44)) 41 _v_41_44 _i_41_44 _x_41_44) (_check! (>=:fix:fix _i_41_44 0) 41 _v_41_44 _i_41_44 _x_41_44) (vector-set!:trusted _v_41_44 _i_41_44 _x_41_44))) (let ((_v_45_48 _v_4_12_33) (_i_45_48 2) (_x_45_48 _t_4_7_24)) (begin (_check! (fixnum? _i_45_48) 41 _v_45_48 _i_45_48 _x_45_48) (_check! (vector? _v_45_48) 41 _v_45_48 _i_45_48 _x_45_48) (_check! (<:fix:fix _i_45_48 (vector-length:vec _v_45_48)) 41 _v_45_48 _i_45_48 _x_45_48) (_check! (>=:fix:fix _i_45_48 0) 41 _v_45_48 _i_45_48 _x_45_48) (vector-set!:trusted _v_45_48 _i_45_48 _x_45_48))) (let ((_v_49_52 _v_4_12_33) (_i_49_52 1) (_x_49_52 _t_4_6_27)) (begin (_check! (fixnum? _i_49_52) 41 _v_49_52 _i_49_52 _x_49_52) (_check! (vector? _v_49_52) 41 _v_49_52 _i_49_52 _x_49_52) (_check! (<:fix:fix _i_49_52 (vector-length:vec _v_49_52)) 41 _v_49_52 _i_49_52 _x_49_52) (_check! (>=:fix:fix _i_49_52 0) 41 _v_49_52 _i_49_52 _x_49_52) (vector-set!:trusted _v_49_52 _i_49_52 _x_49_52))) (let ((_v_53_56 _v_4_12_33) (_i_53_56 0) (_x_53_56 _t_4_5_30)) (begin (_check! (fixnum? _i_53_56) 41 _v_53_56 _i_53_56 _x_53_56) (_check! (vector? _v_53_56) 41 _v_53_56 _i_53_56 _x_53_56) (_check! (<:fix:fix _i_53_56 (vector-length:vec _v_53_56)) 41 _v_53_56 _i_53_56 _x_53_56) (_check! (>=:fix:fix _i_53_56 0) 41 _v_53_56 _i_53_56 _x_53_56) (vector-set!:trusted _v_53_56 _i_53_56 _x_53_56))) _v_4_12_33))))) (_make-doc_2 _name_1 _arity_1 _formals_1 _source-code_1 _filename_1 _filepos_1))))) 'make-doc))
(let () (begin (set! doc_name (lambda (_d_1) (let ((_doc_name_2 0)) (begin (set! _doc_name_2 (lambda (_d_3) (let ((_v_4_7 _d_3) (_i_4_7 0)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_doc_name_2 _d_1))))) 'doc_name))
(let () (begin (set! doc_code (lambda (_d_1) (let ((_doc_code_2 0)) (begin (set! _doc_code_2 (lambda (_d_3) (let ((_v_4_7 _d_3) (_i_4_7 1)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_doc_code_2 _d_1))))) 'doc_code))
(let () (begin (set! doc_arity (lambda (_d_1) (let ((_doc_arity_2 0)) (begin (set! _doc_arity_2 (lambda (_d_3) (let ((_v_4_7 _d_3) (_i_4_7 2)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_doc_arity_2 _d_1))))) 'doc_arity))
(let () (begin (set! doc_file (lambda (_d_1) (let ((_doc_file_2 0)) (begin (set! _doc_file_2 (lambda (_d_3) (let ((_v_4_7 _d_3) (_i_4_7 3)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_doc_file_2 _d_1))))) 'doc_file))
(let () (begin (set! doc_filepos (lambda (_d_1) (let ((_doc_filepos_2 0)) (begin (set! _doc_filepos_2 (lambda (_d_3) (let ((_v_4_7 _d_3) (_i_4_7 4)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_doc_filepos_2 _d_1))))) 'doc_filepos))
(let () (begin (set! doc_formals (lambda (_d_1) (let ((_doc_formals_2 0)) (begin (set! _doc_formals_2 (lambda (_d_3) (let ((_v_4_7 _d_3) (_i_4_7 5)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_doc_formals_2 _d_1))))) 'doc_formals))
(let () (begin (set! doc_name-set! (lambda (_d_1 _x_1) (let ((_doc_name-set!_2 0)) (begin (set! _doc_name-set!_2 (lambda (_d_3 _x_3) (if _d_3 (let ((_v_4_7 _d_3) (_i_4_7 0) (_x_4_7 _x_3)) (begin (_check! (fixnum? _i_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (vector? _v_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (>=:fix:fix _i_4_7 0) 41 _v_4_7 _i_4_7 _x_4_7) (vector-set!:trusted _v_4_7 _i_4_7 _x_4_7))) (unspecified)))) (_doc_name-set!_2 _d_1 _x_1))))) 'doc_name-set!))
(let () (begin (set! doc_code-set! (lambda (_d_1 _x_1) (let ((_doc_code-set!_2 0)) (begin (set! _doc_code-set!_2 (lambda (_d_3 _x_3) (if _d_3 (let ((_v_4_7 _d_3) (_i_4_7 1) (_x_4_7 _x_3)) (begin (_check! (fixnum? _i_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (vector? _v_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (>=:fix:fix _i_4_7 0) 41 _v_4_7 _i_4_7 _x_4_7) (vector-set!:trusted _v_4_7 _i_4_7 _x_4_7))) (unspecified)))) (_doc_code-set!_2 _d_1 _x_1))))) 'doc_code-set!))
(let () (begin (set! doc_arity-set! (lambda (_d_1 _x_1) (let ((_doc_arity-set!_2 0)) (begin (set! _doc_arity-set!_2 (lambda (_d_3 _x_3) (if _d_3 (let ((_v_4_7 _d_3) (_i_4_7 2) (_x_4_7 _x_3)) (begin (_check! (fixnum? _i_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (vector? _v_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (>=:fix:fix _i_4_7 0) 41 _v_4_7 _i_4_7 _x_4_7) (vector-set!:trusted _v_4_7 _i_4_7 _x_4_7))) (unspecified)))) (_doc_arity-set!_2 _d_1 _x_1))))) 'doc_arity-set!))
(let () (begin (set! doc_file-set! (lambda (_d_1 _x_1) (let ((_doc_file-set!_2 0)) (begin (set! _doc_file-set!_2 (lambda (_d_3 _x_3) (if _d_3 (let ((_v_4_7 _d_3) (_i_4_7 3) (_x_4_7 _x_3)) (begin (_check! (fixnum? _i_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (vector? _v_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (>=:fix:fix _i_4_7 0) 41 _v_4_7 _i_4_7 _x_4_7) (vector-set!:trusted _v_4_7 _i_4_7 _x_4_7))) (unspecified)))) (_doc_file-set!_2 _d_1 _x_1))))) 'doc_file-set!))
(let () (begin (set! doc_filepos-set! (lambda (_d_1 _x_1) (let ((_doc_filepos-set!_2 0)) (begin (set! _doc_filepos-set!_2 (lambda (_d_3 _x_3) (if _d_3 (let ((_v_4_7 _d_3) (_i_4_7 4) (_x_4_7 _x_3)) (begin (_check! (fixnum? _i_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (vector? _v_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (>=:fix:fix _i_4_7 0) 41 _v_4_7 _i_4_7 _x_4_7) (vector-set!:trusted _v_4_7 _i_4_7 _x_4_7))) (unspecified)))) (_doc_filepos-set!_2 _d_1 _x_1))))) 'doc_filepos-set!))
(let () (begin (set! doc_formals-set! (lambda (_d_1 _x_1) (let ((_doc_formals-set!_2 0)) (begin (set! _doc_formals-set!_2 (lambda (_d_3 _x_3) (if _d_3 (let ((_v_4_7 _d_3) (_i_4_7 5) (_x_4_7 _x_3)) (begin (_check! (fixnum? _i_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (vector? _v_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (>=:fix:fix _i_4_7 0) 41 _v_4_7 _i_4_7 _x_4_7) (vector-set!:trusted _v_4_7 _i_4_7 _x_4_7))) (unspecified)))) (_doc_formals-set!_2 _d_1 _x_1))))) 'doc_formals-set!))
(let () (begin (set! doc-copy (lambda (_d_1) (let ((_doc-copy_2 0)) (begin (set! _doc-copy_2 (lambda (_d_3) (list->vector (vector->list _d_3)))) (_doc-copy_2 _d_1))))) 'doc-copy))
(let () (begin (set! ignored? (lambda (_name_1) (let ((_ignored?_2 0)) (begin (set! _ignored?_2 (lambda (_name_3) (eq? _name_3 name:ignored))) (_ignored?_2 _name_1))))) 'ignored?))
(let () (begin (set! flag-as-ignored (lambda (_name_1 _l_1) (let ((_flag-as-ignored_2 0)) (begin (set! _flag-as-ignored_2 (lambda (_name_3 _l_3) (let ((_loop_4 (unspecified))) (begin (set! _loop_4 (lambda (_name_5 _formals_5) (if (null? _formals_5) #t (if (symbol? _formals_5) #t (if (eq? _name_5 (let ((_x_9_12 _formals_5)) (begin (_check! (pair? _x_9_12) 0 _x_9_12) (car:pair _x_9_12)))) (begin (set-car! _formals_5 name:ignored) (if (not (local? (lambda_r _l_3) name:ignored)) (lambda_r-set! _l_3 (cons (make-r-entry name:ignored '() '() '()) (lambda_r _l_3))) (unspecified))) (_loop_4 _name_5 (let ((_x_14_17 _formals_5)) (begin (_check! (pair? _x_14_17) 1 _x_14_17) (cdr:pair _x_14_17))))))))) (_loop_4 _name_3 (lambda_args _l_3)))))) (_flag-as-ignored_2 _name_1 _l_1))))) 'flag-as-ignored))
(let () (begin (set! make-null-terminated (lambda (_formals_1) (let ((_make-null-terminated_2 0)) (begin (set! _make-null-terminated_2 (lambda (_formals_3) (if (null? _formals_3) '() (if (symbol? _formals_3) (cons _formals_3 '()) (cons (let ((_x_8_11 _formals_3)) (begin (_check! (pair? _x_8_11) 0 _x_8_11) (car:pair _x_8_11))) (_make-null-terminated_2 (let ((_x_12_15 _formals_3)) (begin (_check! (pair? _x_12_15) 1 _x_12_15) (cdr:pair _x_12_15))))))))) (_make-null-terminated_2 _formals_1))))) 'make-null-terminated))
(let () (begin (set! list-head (lambda (_x_1 _n_1) (let ((_list-head_2 0)) (begin (set! _list-head_2 (lambda (_x_3 _n_3) (if (zero? _n_3) '() (cons (let ((_x_6_9 _x_3)) (begin (_check! (pair? _x_6_9) 0 _x_6_9) (car:pair _x_6_9))) (_list-head_2 (let ((_x_10_13 _x_3)) (begin (_check! (pair? _x_10_13) 1 _x_10_13) (cdr:pair _x_10_13))) (- _n_3 1)))))) (_list-head_2 _x_1 _n_1))))) 'list-head))
(let () (begin (set! remq (lambda (_x_1 _y_1) (let ((_remq_2 0)) (begin (set! _remq_2 (lambda (_x_3 _y_3) (if (null? _y_3) '() (if (eq? _x_3 (let ((_x_6_9 _y_3)) (begin (_check! (pair? _x_6_9) 0 _x_6_9) (car:pair _x_6_9)))) (_remq_2 _x_3 (let ((_x_10_13 _y_3)) (begin (_check! (pair? _x_10_13) 1 _x_10_13) (cdr:pair _x_10_13)))) (cons (let ((_x_15_18 _y_3)) (begin (_check! (pair? _x_15_18) 0 _x_15_18) (car:pair _x_15_18))) (_remq_2 _x_3 (let ((_x_19_22 _y_3)) (begin (_check! (pair? _x_19_22) 1 _x_19_22) (cdr:pair _x_19_22))))))))) (_remq_2 _x_1 _y_1))))) 'remq))
(let () (begin (set! make-call-to-list (lambda (_args_1) (let ((_make-call-to-list_2 0)) (begin (set! _make-call-to-list_2 (lambda (_args_3) (if (null? _args_3) (make-constant '()) (if (null? (let ((_x_6_9 _args_3)) (begin (_check! (pair? _x_6_9) 1 _x_6_9) (cdr:pair _x_6_9)))) (make-call (make-variable name:cons) (let* ((_t1_10_13 (let ((_x_21_24 _args_3)) (begin (_check! (pair? _x_21_24) 0 _x_21_24) (car:pair _x_21_24)))) (_t2_10_16 (cons (make-constant '()) '()))) (let () (cons _t1_10_13 _t2_10_16)))) (make-call (make-variable name:list) _args_3))))) (_make-call-to-list_2 _args_1))))) 'make-call-to-list))
(let () (begin (set! pass2-error (lambda (_i_1 _ _etc_1) (apply cerror (cons (let ((_v_2_5 pass2-error-messages) (_i_2_5 _i_1)) (begin (_check! (fixnum? _i_2_5) 40 _v_2_5 _i_2_5) (_check! (vector? _v_2_5) 40 _v_2_5 _i_2_5) (_check! (<:fix:fix _i_2_5 (vector-length:vec _v_2_5)) 40 _v_2_5 _i_2_5) (_check! (>=:fix:fix _i_2_5 0) 40 _v_2_5 _i_2_5) (vector-ref:trusted _v_2_5 _i_2_5))) _etc_1)))) 'pass2-error))
(let () (begin (set! pass2-error-messages '#("System error: violation of an invariant in pass 2" "Wrong number of arguments to known procedure")) 'pass2-error-messages))
(let () (begin (set! p2error:violation-of-invariant 0) 'p2error:violation-of-invariant))
(let () (begin (set! p2error:wna 1) 'p2error:wna))
(let () (begin (set! make-r-entry (lambda (_name_1 _refs_1 _assigns_1 _calls_1) (let ((_make-r-entry_2 0)) (begin (set! _make-r-entry_2 (lambda (_name_3 _refs_3 _assigns_3 _calls_3) (let* ((_t1_4_7 _name_3) (_t2_4_10 (let* ((_t1_14_17 _refs_3) (_t2_14_20 (let* ((_t1_24_27 _assigns_3) (_t2_24_30 (cons _calls_3 '()))) (let () (cons _t1_24_27 _t2_24_30))))) (let () (cons _t1_14_17 _t2_14_20))))) (let () (cons _t1_4_7 _t2_4_10))))) (_make-r-entry_2 _name_1 _refs_1 _assigns_1 _calls_1))))) 'make-r-entry))
(let () (begin (set! r-entry_name (lambda (_x_1) (let ((_r-entry_name_2 0)) (begin (set! _r-entry_name_2 (lambda (_x_3) (let ((_x_4_7 _x_3)) (begin (_check! (pair? _x_4_7) 0 _x_4_7) (car:pair _x_4_7))))) (_r-entry_name_2 _x_1))))) 'r-entry_name))
(let () (begin (set! r-entry_references (lambda (_x_1) (let ((_r-entry_references_2 0)) (begin (set! _r-entry_references_2 (lambda (_x_3) (let ((_x_5_8 (let ((_x_9_12 _x_3)) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))))) (_r-entry_references_2 _x_1))))) 'r-entry_references))
(let () (begin (set! r-entry_assignments (lambda (_x_1) (let ((_r-entry_assignments_2 0)) (begin (set! _r-entry_assignments_2 (lambda (_x_3) (let ((_x_5_8 (let ((_x_9_12 (let ((_x_13_16 _x_3)) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))))) (_r-entry_assignments_2 _x_1))))) 'r-entry_assignments))
(let () (begin (set! r-entry_calls (lambda (_x_1) (let ((_r-entry_calls_2 0)) (begin (set! _r-entry_calls_2 (lambda (_x_3) (let ((_x_5_8 (let ((_x_9_12 (let ((_x_13_16 (let ((_x_17_20 _x_3)) (begin (_check! (pair? _x_17_20) 1 _x_17_20) (cdr:pair _x_17_20))))) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))))) (_r-entry_calls_2 _x_1))))) 'r-entry_calls))
(let () (begin (set! r-entry_references-set! (lambda (_x_1 _refs_1) (let ((_r-entry_references-set!_2 0)) (begin (set! _r-entry_references-set!_2 (lambda (_x_3 _refs_3) (set-car! (let ((_x_4_7 _x_3)) (begin (_check! (pair? _x_4_7) 1 _x_4_7) (cdr:pair _x_4_7))) _refs_3))) (_r-entry_references-set!_2 _x_1 _refs_1))))) 'r-entry_references-set!))
(let () (begin (set! r-entry_assignments-set! (lambda (_x_1 _assignments_1) (let ((_r-entry_assignments-set!_2 0)) (begin (set! _r-entry_assignments-set!_2 (lambda (_x_3 _assignments_3) (set-car! (let ((_x_5_8 (let ((_x_9_12 _x_3)) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 1 _x_5_8) (cdr:pair _x_5_8))) _assignments_3))) (_r-entry_assignments-set!_2 _x_1 _assignments_1))))) 'r-entry_assignments-set!))
(let () (begin (set! r-entry_calls-set! (lambda (_x_1 _calls_1) (let ((_r-entry_calls-set!_2 0)) (begin (set! _r-entry_calls-set!_2 (lambda (_x_3 _calls_3) (set-car! (let ((_x_5_8 (let ((_x_9_12 (let ((_x_13_16 _x_3)) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 1 _x_5_8) (cdr:pair _x_5_8))) _calls_3))) (_r-entry_calls-set!_2 _x_1 _calls_1))))) 'r-entry_calls-set!))
(let () (begin (set! local? (lambda (_r_1 _i_1) (let ((_local?_2 0)) (begin (set! _local?_2 (lambda (_r_3 _i_3) (assq _i_3 _r_3))) (_local?_2 _r_1 _i_1))))) 'local?))
(let () (begin (set! r-entry (lambda (_r_1 _i_1) (let ((_r-entry_2 0)) (begin (set! _r-entry_2 (lambda (_r_3 _i_3) (assq _i_3 _r_3))) (_r-entry_2 _r_1 _i_1))))) 'r-entry))
(let () (begin (set! r-lookup (lambda (_r_1 _i_1) (let ((_r-lookup_2 0)) (begin (set! _r-lookup_2 (lambda (_r_3 _i_3) (let ((_temp_4_7 (assq _i_3 _r_3))) (if _temp_4_7 _temp_4_7 (pass2-error p2error:violation-of-invariant _r_3 _i_3))))) (_r-lookup_2 _r_1 _i_1))))) 'r-lookup))
(let () (begin (set! references (lambda (_r_1 _i_1) (let ((_references_2 0)) (begin (set! _references_2 (lambda (_r_3 _i_3) (let ((_x_5_8 (let ((_x_9_12 (r-lookup _r_3 _i_3))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))))) (_references_2 _r_1 _i_1))))) 'references))
(let () (begin (set! assignments (lambda (_r_1 _i_1) (let ((_assignments_2 0)) (begin (set! _assignments_2 (lambda (_r_3 _i_3) (let ((_x_5_8 (let ((_x_9_12 (let ((_x_13_16 (r-lookup _r_3 _i_3))) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))))) (_assignments_2 _r_1 _i_1))))) 'assignments))
(let () (begin (set! calls (lambda (_r_1 _i_1) (let ((_calls_2 0)) (begin (set! _calls_2 (lambda (_r_3 _i_3) (let ((_x_5_8 (let ((_x_9_12 (let ((_x_13_16 (let ((_x_17_20 (r-lookup _r_3 _i_3))) (begin (_check! (pair? _x_17_20) 1 _x_17_20) (cdr:pair _x_17_20))))) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))))) (_calls_2 _r_1 _i_1))))) 'calls))
(let () (begin (set! references-set! (lambda (_r_1 _i_1 _x_1) (let ((_references-set!_2 0)) (begin (set! _references-set!_2 (lambda (_r_3 _i_3 _x_3) (set-car! (let ((_x_4_7 (r-lookup _r_3 _i_3))) (begin (_check! (pair? _x_4_7) 1 _x_4_7) (cdr:pair _x_4_7))) _x_3))) (_references-set!_2 _r_1 _i_1 _x_1))))) 'references-set!))
(let () (begin (set! assignments-set! (lambda (_r_1 _i_1 _x_1) (let ((_assignments-set!_2 0)) (begin (set! _assignments-set!_2 (lambda (_r_3 _i_3 _x_3) (set-car! (let ((_x_5_8 (let ((_x_9_12 (r-lookup _r_3 _i_3))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 1 _x_5_8) (cdr:pair _x_5_8))) _x_3))) (_assignments-set!_2 _r_1 _i_1 _x_1))))) 'assignments-set!))
(let () (begin (set! calls-set! (lambda (_r_1 _i_1 _x_1) (let ((_calls-set!_2 0)) (begin (set! _calls-set!_2 (lambda (_r_3 _i_3 _x_3) (set-car! (let ((_x_5_8 (let ((_x_9_12 (let ((_x_13_16 (r-lookup _r_3 _i_3))) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 1 _x_5_8) (cdr:pair _x_5_8))) _x_3))) (_calls-set!_2 _r_1 _i_1 _x_1))))) 'calls-set!))
(let () (begin (set! make-notepad (lambda (_l_1) (let ((_make-notepad_2 0)) (begin (set! _make-notepad_2 (lambda (_l_3) (let* ((_t_4_8_13 '()) (_t_4_7_16 '()) (_t_4_6_19 '()) (_t_4_5_22 _l_3) (_v_4_10_25 (make-vector 4 _t_4_8_13))) (let () (begin (let ((_v_29_32 _v_4_10_25) (_i_29_32 2) (_x_29_32 _t_4_7_16)) (begin (_check! (fixnum? _i_29_32) 41 _v_29_32 _i_29_32 _x_29_32) (_check! (vector? _v_29_32) 41 _v_29_32 _i_29_32 _x_29_32) (_check! (<:fix:fix _i_29_32 (vector-length:vec _v_29_32)) 41 _v_29_32 _i_29_32 _x_29_32) (_check! (>=:fix:fix _i_29_32 0) 41 _v_29_32 _i_29_32 _x_29_32) (vector-set!:trusted _v_29_32 _i_29_32 _x_29_32))) (let ((_v_33_36 _v_4_10_25) (_i_33_36 1) (_x_33_36 _t_4_6_19)) (begin (_check! (fixnum? _i_33_36) 41 _v_33_36 _i_33_36 _x_33_36) (_check! (vector? _v_33_36) 41 _v_33_36 _i_33_36 _x_33_36) (_check! (<:fix:fix _i_33_36 (vector-length:vec _v_33_36)) 41 _v_33_36 _i_33_36 _x_33_36) (_check! (>=:fix:fix _i_33_36 0) 41 _v_33_36 _i_33_36 _x_33_36) (vector-set!:trusted _v_33_36 _i_33_36 _x_33_36))) (let ((_v_37_40 _v_4_10_25) (_i_37_40 0) (_x_37_40 _t_4_5_22)) (begin (_check! (fixnum? _i_37_40) 41 _v_37_40 _i_37_40 _x_37_40) (_check! (vector? _v_37_40) 41 _v_37_40 _i_37_40 _x_37_40) (_check! (<:fix:fix _i_37_40 (vector-length:vec _v_37_40)) 41 _v_37_40 _i_37_40 _x_37_40) (_check! (>=:fix:fix _i_37_40 0) 41 _v_37_40 _i_37_40 _x_37_40) (vector-set!:trusted _v_37_40 _i_37_40 _x_37_40))) _v_4_10_25))))) (_make-notepad_2 _l_1))))) 'make-notepad))
(let () (begin (set! notepad_parent (lambda (_np_1) (let ((_notepad_parent_2 0)) (begin (set! _notepad_parent_2 (lambda (_np_3) (let ((_v_4_7 _np_3) (_i_4_7 0)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_notepad_parent_2 _np_1))))) 'notepad_parent))
(let () (begin (set! notepad_lambdas (lambda (_np_1) (let ((_notepad_lambdas_2 0)) (begin (set! _notepad_lambdas_2 (lambda (_np_3) (let ((_v_4_7 _np_3) (_i_4_7 1)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_notepad_lambdas_2 _np_1))))) 'notepad_lambdas))
(let () (begin (set! notepad_nonescaping (lambda (_np_1) (let ((_notepad_nonescaping_2 0)) (begin (set! _notepad_nonescaping_2 (lambda (_np_3) (let ((_v_4_7 _np_3) (_i_4_7 2)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_notepad_nonescaping_2 _np_1))))) 'notepad_nonescaping))
(let () (begin (set! notepad_vars (lambda (_np_1) (let ((_notepad_vars_2 0)) (begin (set! _notepad_vars_2 (lambda (_np_3) (let ((_v_4_7 _np_3) (_i_4_7 3)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_notepad_vars_2 _np_1))))) 'notepad_vars))
(let () (begin (set! notepad_lambdas-set! (lambda (_np_1 _x_1) (let ((_notepad_lambdas-set!_2 0)) (begin (set! _notepad_lambdas-set!_2 (lambda (_np_3 _x_3) (let ((_v_4_7 _np_3) (_i_4_7 1) (_x_4_7 _x_3)) (begin (_check! (fixnum? _i_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (vector? _v_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (>=:fix:fix _i_4_7 0) 41 _v_4_7 _i_4_7 _x_4_7) (vector-set!:trusted _v_4_7 _i_4_7 _x_4_7))))) (_notepad_lambdas-set!_2 _np_1 _x_1))))) 'notepad_lambdas-set!))
(let () (begin (set! notepad_nonescaping-set! (lambda (_np_1 _x_1) (let ((_notepad_nonescaping-set!_2 0)) (begin (set! _notepad_nonescaping-set!_2 (lambda (_np_3 _x_3) (let ((_v_4_7 _np_3) (_i_4_7 2) (_x_4_7 _x_3)) (begin (_check! (fixnum? _i_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (vector? _v_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (>=:fix:fix _i_4_7 0) 41 _v_4_7 _i_4_7 _x_4_7) (vector-set!:trusted _v_4_7 _i_4_7 _x_4_7))))) (_notepad_nonescaping-set!_2 _np_1 _x_1))))) 'notepad_nonescaping-set!))
(let () (begin (set! notepad_vars-set! (lambda (_np_1 _x_1) (let ((_notepad_vars-set!_2 0)) (begin (set! _notepad_vars-set!_2 (lambda (_np_3 _x_3) (let ((_v_4_7 _np_3) (_i_4_7 3) (_x_4_7 _x_3)) (begin (_check! (fixnum? _i_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (vector? _v_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (>=:fix:fix _i_4_7 0) 41 _v_4_7 _i_4_7 _x_4_7) (vector-set!:trusted _v_4_7 _i_4_7 _x_4_7))))) (_notepad_vars-set!_2 _np_1 _x_1))))) 'notepad_vars-set!))
(let () (begin (set! notepad-lambda-add! (lambda (_np_1 _l_1) (let ((_notepad-lambda-add!_2 0)) (begin (set! _notepad-lambda-add!_2 (lambda (_np_3 _l_3) (notepad_lambdas-set! _np_3 (cons _l_3 (notepad_lambdas _np_3))))) (_notepad-lambda-add!_2 _np_1 _l_1))))) 'notepad-lambda-add!))
(let () (begin (set! notepad-nonescaping-add! (lambda (_np_1 _l_1) (let ((_notepad-nonescaping-add!_2 0)) (begin (set! _notepad-nonescaping-add!_2 (lambda (_np_3 _l_3) (notepad_nonescaping-set! _np_3 (cons _l_3 (notepad_nonescaping _np_3))))) (_notepad-nonescaping-add!_2 _np_1 _l_1))))) 'notepad-nonescaping-add!))
(let () (begin (set! notepad-var-add! (lambda (_np_1 _i_1) (let ((_notepad-var-add!_2 0)) (begin (set! _notepad-var-add!_2 (lambda (_np_3 _i_3) (let ((_vars_6 (notepad_vars _np_3))) (if (not (memq _i_3 _vars_6)) (notepad_vars-set! _np_3 (cons _i_3 _vars_6)) (unspecified))))) (_notepad-var-add!_2 _np_1 _i_1))))) 'notepad-var-add!))
(let () (begin (set! notepad-captured-variables (lambda (_np_1) (let ((_notepad-captured-variables_2 0)) (begin (set! _notepad-captured-variables_2 (lambda (_np_3) (let ((_nonescaping_6 (notepad_nonescaping _np_3))) (apply-union (let () (let ((_loop_12_15_18 (unspecified))) (begin (set! _loop_12_15_18 (lambda (_y1_7_8_19 _results_7_11_19) (if (null? _y1_7_8_19) (reverse _results_7_11_19) (begin #t (_loop_12_15_18 (let ((_x_23_26 _y1_7_8_19)) (begin (_check! (pair? _x_23_26) 1 _x_23_26) (cdr:pair _x_23_26))) (cons (let ((_l_27 (let ((_x_28_31 _y1_7_8_19)) (begin (_check! (pair? _x_28_31) 0 _x_28_31) (car:pair _x_28_31))))) (if (memq _l_27 _nonescaping_6) (lambda_g _l_27) (lambda_f _l_27))) _results_7_11_19)))))) (_loop_12_15_18 (notepad_lambdas _np_3) '())))))))) (_notepad-captured-variables_2 _np_1))))) 'notepad-captured-variables))
(let () (begin (set! notepad-free-variables (lambda (_np_1) (let ((_notepad-free-variables_2 0)) (begin (set! _notepad-free-variables_2 (lambda (_np_3) (let () (let ((_loop_4_7_10 (unspecified))) (begin (set! _loop_4_7_10 (lambda (_lambdas_11 _fv_11) (if (null? _lambdas_11) _fv_11 (begin #t (_loop_4_7_10 (let ((_x_14_17 _lambdas_11)) (begin (_check! (pair? _x_14_17) 1 _x_14_17) (cdr:pair _x_14_17))) (let ((_l_20 (let ((_x_21_24 _lambdas_11)) (begin (_check! (pair? _x_21_24) 0 _x_21_24) (car:pair _x_21_24))))) (union (difference (lambda_f _l_20) (make-null-terminated (lambda_args _l_20))) _fv_11))))))) (_loop_4_7_10 (notepad_lambdas _np_3) (notepad_vars _np_3))))))) (_notepad-free-variables_2 _np_1))))) 'notepad-free-variables))
(let () ($$trace "prefs"))
(let () (begin (set! begin1 (string->symbol "Begin")) 'begin1))
(let () (begin (set! define1 (string->symbol "Define")) 'define1))
(let () (begin (set! quote1 (string->symbol "Quote")) 'quote1))
(let () (begin (set! lambda1 (string->symbol "Lambda")) 'lambda1))
(let () (begin (set! if1 (string->symbol "If")) 'if1))
(let () (begin (set! set!1 (string->symbol "Set!")) 'set!1))
(let () (begin (set! undefined1 (cons (string->symbol "Undefined") '())) 'undefined1))
(let () (begin (set! renaming-prefix-character #\_) 'renaming-prefix-character))
(let () (begin (set! renaming-suffix-character #\_) 'renaming-suffix-character))
(let () (begin (set! renaming-prefix (string renaming-prefix-character)) 'renaming-prefix))
(let () (begin (set! renaming-suffix (string renaming-suffix-character)) 'renaming-suffix))
(let () (begin (set! make-toplevel-definition (lambda (_id_1 _exp_1) (let ((_make-toplevel-definition_2 0)) (begin (set! _make-toplevel-definition_2 (lambda (_id_3 _exp_3) (begin (if (lambda? _exp_3) (doc_name-set! (lambda_doc _exp_3) _id_3) (unspecified)) (make-begin (let* ((_t1_4_7 (make-assignment _id_3 _exp_3)) (_t2_4_10 (cons (make-constant _id_3) '()))) (let () (cons _t1_4_7 _t2_4_10))))))) (_make-toplevel-definition_2 _id_1 _exp_1))))) 'make-toplevel-definition))
(let () (begin (set! make-undefined (lambda () (let ((_make-undefined_2 0)) (begin (set! _make-undefined_2 (lambda () (make-call (make-variable 'undefined) '()))) (_make-undefined_2))))) 'make-undefined))
(let () (begin (set! make-unspecified (lambda () (let ((_make-unspecified_2 0)) (begin (set! _make-unspecified_2 (lambda () (make-call (make-variable 'unspecified) '()))) (_make-unspecified_2))))) 'make-unspecified))
(let () ($$trace "syntaxenv"))
(let () (begin (set! standard-syntactic-environment '((quote special quote) (lambda special lambda) (if special if) (set! special set!) (begin special begin) (define special define) (define-inline special define-inline) (define-syntax special define-syntax) (let-syntax special let-syntax) (letrec-syntax special letrec-syntax) (syntax-rules special syntax-rules))) 'standard-syntactic-environment))
(let () (begin (set! lambda0 (string->symbol " lambda ")) 'lambda0))
(let () (begin (set! set!0 (string->symbol " set! ")) 'set!0))
(let () (begin (set! syntactic-copy (lambda (_env_1) (let ((_syntactic-copy_2 0)) (begin (set! _syntactic-copy_2 (lambda (_env_3) (copy-alist _env_3))) (_syntactic-copy_2 _env_1))))) 'syntactic-copy))
(let () (begin (set! make-basic-syntactic-environment (lambda () (let ((_make-basic-syntactic-environment_2 0)) (begin (set! _make-basic-syntactic-environment_2 (lambda () (cons (cons lambda0 (let ((_x_4_7 (assq 'lambda standard-syntactic-environment))) (begin (_check! (pair? _x_4_7) 1 _x_4_7) (cdr:pair _x_4_7)))) (cons (cons set!0 (let ((_x_8_11 (assq 'set! standard-syntactic-environment))) (begin (_check! (pair? _x_8_11) 1 _x_8_11) (cdr:pair _x_8_11)))) (syntactic-copy standard-syntactic-environment))))) (_make-basic-syntactic-environment_2))))) 'make-basic-syntactic-environment))
(let () (begin (set! global-syntactic-environment (make-basic-syntactic-environment)) 'global-syntactic-environment))
(let () (begin (set! global-syntactic-environment-set! (lambda (_env_1) (let ((_global-syntactic-environment-set!_2 0)) (begin (set! _global-syntactic-environment-set!_2 (lambda (_env_3) (begin (set-cdr! global-syntactic-environment _env_3) #t))) (_global-syntactic-environment-set!_2 _env_1))))) 'global-syntactic-environment-set!))
(let () (begin (set! syntactic-bind-globally! (lambda (_id_1 _denotation_1) (let ((_syntactic-bind-globally!_2 0)) (begin (set! _syntactic-bind-globally!_2 (lambda (_id_3 _denotation_3) (if (if (identifier-denotation? _denotation_3) (eq? _id_3 (identifier-name _denotation_3)) #f) (let () (let ((_remove-bindings-for-id_8 (unspecified))) (begin (set! _remove-bindings-for-id_8 (lambda (_bindings_9) (if (null? _bindings_9) '() (if (eq? (let ((_x_13_16 (let ((_x_17_20 _bindings_9)) (begin (_check! (pair? _x_17_20) 0 _x_17_20) (car:pair _x_17_20))))) (begin (_check! (pair? _x_13_16) 0 _x_13_16) (car:pair _x_13_16))) _id_3) (_remove-bindings-for-id_8 (let ((_x_21_24 _bindings_9)) (begin (_check! (pair? _x_21_24) 1 _x_21_24) (cdr:pair _x_21_24)))) (cons (let ((_x_26_29 _bindings_9)) (begin (_check! (pair? _x_26_29) 0 _x_26_29) (car:pair _x_26_29))) (_remove-bindings-for-id_8 (let ((_x_30_33 _bindings_9)) (begin (_check! (pair? _x_30_33) 1 _x_30_33) (cdr:pair _x_30_33))))))))) (global-syntactic-environment-set! (_remove-bindings-for-id_8 (let ((_x_34_37 global-syntactic-environment)) (begin (_check! (pair? _x_34_37) 1 _x_34_37) (cdr:pair _x_34_37)))))))) (let ((_x_40 (assq _id_3 global-syntactic-environment))) (if _x_40 (begin (set-cdr! _x_40 _denotation_3) #t) (global-syntactic-environment-set! (cons (cons _id_3 _denotation_3) (let ((_x_41_44 global-syntactic-environment)) (begin (_check! (pair? _x_41_44) 1 _x_41_44) (cdr:pair _x_41_44)))))))))) (_syntactic-bind-globally!_2 _id_1 _denotation_1))))) 'syntactic-bind-globally!))
(let () (begin (set! syntactic-divert (lambda (_env1_1 _env2_1) (let ((_syntactic-divert_2 0)) (begin (set! _syntactic-divert_2 (lambda (_env1_3 _env2_3) (append _env2_3 _env1_3))) (_syntactic-divert_2 _env1_1 _env2_1))))) 'syntactic-divert))
(let () (begin (set! syntactic-extend (lambda (_env_1 _ids_1 _denotations_1) (let ((_syntactic-extend_2 0)) (begin (set! _syntactic-extend_2 (lambda (_env_3 _ids_3 _denotations_3) (syntactic-divert _env_3 (let () (let ((_loop_10_14_17 (unspecified))) (begin (set! _loop_10_14_17 (lambda (_y1_4_6_18 _y1_4_5_18 _results_4_9_18) (if (let ((_temp_20_23 (null? _y1_4_6_18))) (if _temp_20_23 _temp_20_23 (null? _y1_4_5_18))) (reverse _results_4_9_18) (begin #t (_loop_10_14_17 (let ((_x_26_29 _y1_4_6_18)) (begin (_check! (pair? _x_26_29) 1 _x_26_29) (cdr:pair _x_26_29))) (let ((_x_30_33 _y1_4_5_18)) (begin (_check! (pair? _x_30_33) 1 _x_30_33) (cdr:pair _x_30_33))) (cons (cons (let ((_x_34_37 _y1_4_6_18)) (begin (_check! (pair? _x_34_37) 0 _x_34_37) (car:pair _x_34_37))) (let ((_x_38_41 _y1_4_5_18)) (begin (_check! (pair? _x_38_41) 0 _x_38_41) (car:pair _x_38_41)))) _results_4_9_18)))))) (_loop_10_14_17 _ids_3 _denotations_3 '()))))))) (_syntactic-extend_2 _env_1 _ids_1 _denotations_1))))) 'syntactic-extend))
(let () (begin (set! syntactic-lookup (lambda (_env_1 _id_1) (let ((_syntactic-lookup_2 0)) (begin (set! _syntactic-lookup_2 (lambda (_env_3 _id_3) (let ((_entry_6 (assq _id_3 _env_3))) (if _entry_6 (let ((_x_7_10 _entry_6)) (begin (_check! (pair? _x_7_10) 1 _x_7_10) (cdr:pair _x_7_10))) (make-identifier-denotation _id_3))))) (_syntactic-lookup_2 _env_1 _id_1))))) 'syntactic-lookup))
(let () (begin (set! syntactic-assign! (lambda (_env_1 _id_1 _denotation_1) (let ((_syntactic-assign!_2 0)) (begin (set! _syntactic-assign!_2 (lambda (_env_3 _id_3 _denotation_3) (let ((_entry_6 (assq _id_3 _env_3))) (if _entry_6 (set-cdr! _entry_6 _denotation_3) (m-bug "Bug detected in syntactic-assign!" _env_3 _id_3 _denotation_3))))) (_syntactic-assign!_2 _env_1 _id_1 _denotation_1))))) 'syntactic-assign!))
(let () (begin (set! denotation-class car) 'denotation-class))
(let () (begin (set! special-denotation? (lambda (_denotation_1) (let ((_special-denotation?_2 0)) (begin (set! _special-denotation?_2 (lambda (_denotation_3) (eq? (denotation-class _denotation_3) 'special))) (_special-denotation?_2 _denotation_1))))) 'special-denotation?))
(let () (begin (set! macro-denotation? (lambda (_denotation_1) (let ((_macro-denotation?_2 0)) (begin (set! _macro-denotation?_2 (lambda (_denotation_3) (eq? (denotation-class _denotation_3) 'macro))) (_macro-denotation?_2 _denotation_1))))) 'macro-denotation?))
(let () (begin (set! inline-denotation? (lambda (_denotation_1) (let ((_inline-denotation?_2 0)) (begin (set! _inline-denotation?_2 (lambda (_denotation_3) (eq? (denotation-class _denotation_3) 'inline))) (_inline-denotation?_2 _denotation_1))))) 'inline-denotation?))
(let () (begin (set! identifier-denotation? (lambda (_denotation_1) (let ((_identifier-denotation?_2 0)) (begin (set! _identifier-denotation?_2 (lambda (_denotation_3) (eq? (denotation-class _denotation_3) 'identifier))) (_identifier-denotation?_2 _denotation_1))))) 'identifier-denotation?))
(let () (begin (set! make-macro-denotation (lambda (_rules_1 _env_1) (let ((_make-macro-denotation_2 0)) (begin (set! _make-macro-denotation_2 (lambda (_rules_3 _env_3) (let* ((_t1_4_7 'macro) (_t2_4_10 (let* ((_t1_14_17 _rules_3) (_t2_14_20 (cons _env_3 '()))) (let () (cons _t1_14_17 _t2_14_20))))) (let () (cons _t1_4_7 _t2_4_10))))) (_make-macro-denotation_2 _rules_1 _env_1))))) 'make-macro-denotation))
(let () (begin (set! make-inline-denotation (lambda (_id_1 _rules_1 _env_1) (let ((_make-inline-denotation_2 0)) (begin (set! _make-inline-denotation_2 (lambda (_id_3 _rules_3 _env_3) (let* ((_t1_4_7 'inline) (_t2_4_10 (let* ((_t1_14_17 _rules_3) (_t2_14_20 (let* ((_t1_24_27 _env_3) (_t2_24_30 (cons _id_3 '()))) (let () (cons _t1_24_27 _t2_24_30))))) (let () (cons _t1_14_17 _t2_14_20))))) (let () (cons _t1_4_7 _t2_4_10))))) (_make-inline-denotation_2 _id_1 _rules_1 _env_1))))) 'make-inline-denotation))
(let () (begin (set! make-identifier-denotation (lambda (_id_1) (let ((_make-identifier-denotation_2 0)) (begin (set! _make-identifier-denotation_2 (lambda (_id_3) (let* ((_t1_4_7 'identifier) (_t2_4_10 (let* ((_t1_14_17 _id_3) (_t2_14_20 (let* ((_t1_24_27 '()) (_t2_24_30 (let* ((_t1_34_37 '()) (_t2_34_40 (cons '() '()))) (let () (cons _t1_34_37 _t2_34_40))))) (let () (cons _t1_24_27 _t2_24_30))))) (let () (cons _t1_14_17 _t2_14_20))))) (let () (cons _t1_4_7 _t2_4_10))))) (_make-identifier-denotation_2 _id_1))))) 'make-identifier-denotation))
(let () (begin (set! macro-rules cadr) 'macro-rules))
(let () (begin (set! macro-env caddr) 'macro-env))
(let () (begin (set! inline-rules macro-rules) 'inline-rules))
(let () (begin (set! inline-env macro-env) 'inline-env))
(let () (begin (set! inline-name cadddr) 'inline-name))
(let () (begin (set! identifier-name cadr) 'identifier-name))
(let () (begin (set! identifier-r-entry cdr) 'identifier-r-entry))
(let () (begin (set! same-denotation? (lambda (_d1_1 _d2_1) (let ((_same-denotation?_2 0)) (begin (set! _same-denotation?_2 (lambda (_d1_3 _d2_3) (let ((_temp_4_7 (eq? _d1_3 _d2_3))) (if _temp_4_7 _temp_4_7 (if (identifier-denotation? _d1_3) (if (identifier-denotation? _d2_3) (eq? (identifier-name _d1_3) (identifier-name _d2_3)) #f) #f))))) (_same-denotation?_2 _d1_1 _d2_1))))) 'same-denotation?))
(let () (begin (set! denotation-of-quote (syntactic-lookup standard-syntactic-environment 'quote)) 'denotation-of-quote))
(let () (begin (set! denotation-of-lambda (syntactic-lookup standard-syntactic-environment 'lambda)) 'denotation-of-lambda))
(let () (begin (set! denotation-of-if (syntactic-lookup standard-syntactic-environment 'if)) 'denotation-of-if))
(let () (begin (set! denotation-of-set! (syntactic-lookup standard-syntactic-environment 'set!)) 'denotation-of-set!))
(let () (begin (set! denotation-of-begin (syntactic-lookup standard-syntactic-environment 'begin)) 'denotation-of-begin))
(let () (begin (set! denotation-of-define (syntactic-lookup standard-syntactic-environment 'define)) 'denotation-of-define))
(let () (begin (set! denotation-of-define-inline (syntactic-lookup standard-syntactic-environment 'define-inline)) 'denotation-of-define-inline))
(let () (begin (set! denotation-of-define-syntax (syntactic-lookup standard-syntactic-environment 'define-syntax)) 'denotation-of-define-syntax))
(let () (begin (set! denotation-of-let-syntax (syntactic-lookup standard-syntactic-environment 'let-syntax)) 'denotation-of-let-syntax))
(let () (begin (set! denotation-of-letrec-syntax (syntactic-lookup standard-syntactic-environment 'letrec-syntax)) 'denotation-of-letrec-syntax))
(let () (begin (set! denotation-of-syntax-rules (syntactic-lookup standard-syntactic-environment 'syntax-rules)) 'denotation-of-syntax-rules))
(let () (begin (set! denotation-of-___ (syntactic-lookup standard-syntactic-environment '___)) 'denotation-of-___))
(let () (begin (set! denotation-of-transformer (syntactic-lookup standard-syntactic-environment 'transformer)) 'denotation-of-transformer))
(let () (begin (set! syntactic-alias (lambda (_env_1 _alist_1 _env2_1) (let ((_syntactic-alias_2 0)) (begin (set! _syntactic-alias_2 (lambda (_env_3 _alist_3 _env2_3) (syntactic-divert _env_3 (let () (let ((_loop_9_12_15 (unspecified))) (begin (set! _loop_9_12_15 (lambda (_y1_4_5_16 _results_4_8_16) (if (null? _y1_4_5_16) (reverse _results_4_8_16) (begin #t (_loop_9_12_15 (let ((_x_20_23 _y1_4_5_16)) (begin (_check! (pair? _x_20_23) 1 _x_20_23) (cdr:pair _x_20_23))) (cons (let ((_name-pair_24 (let ((_x_36_39 _y1_4_5_16)) (begin (_check! (pair? _x_36_39) 0 _x_36_39) (car:pair _x_36_39))))) (let ((_old-name_27 (let ((_x_28_31 _name-pair_24)) (begin (_check! (pair? _x_28_31) 0 _x_28_31) (car:pair _x_28_31)))) (_new-name_27 (let ((_x_32_35 _name-pair_24)) (begin (_check! (pair? _x_32_35) 1 _x_32_35) (cdr:pair _x_32_35))))) (cons _new-name_27 (syntactic-lookup _env2_3 _old-name_27)))) _results_4_8_16)))))) (_loop_9_12_15 _alist_3 '()))))))) (_syntactic-alias_2 _env_1 _alist_1 _env2_1))))) 'syntactic-alias))
(let () (begin (set! syntactic-rename (lambda (_env_1 _alist_1) (let ((_syntactic-rename_2 0)) (begin (set! _syntactic-rename_2 (lambda (_env_3 _alist_3) (if (null? _alist_3) _env_3 (let* ((_old_6 (let ((_x_30_33 (let ((_x_34_37 _alist_3)) (begin (_check! (pair? _x_34_37) 0 _x_34_37) (car:pair _x_34_37))))) (begin (_check! (pair? _x_30_33) 0 _x_30_33) (car:pair _x_30_33)))) (_new_9 (let ((_x_21_24 (let ((_x_25_28 _alist_3)) (begin (_check! (pair? _x_25_28) 0 _x_25_28) (car:pair _x_25_28))))) (begin (_check! (pair? _x_21_24) 1 _x_21_24) (cdr:pair _x_21_24)))) (_denotation_12 (make-identifier-denotation _new_9))) (let () (_syntactic-rename_2 (cons (cons _old_6 _denotation_12) (cons (cons _new_9 _denotation_12) _env_3)) (let ((_x_16_19 _alist_3)) (begin (_check! (pair? _x_16_19) 1 _x_16_19) (cdr:pair _x_16_19))))))))) (_syntactic-rename_2 _env_1 _alist_1))))) 'syntactic-rename))
(let () (begin (set! renaming-counter 0) 'renaming-counter))
(let () (begin (set! make-rename-procedure (lambda () (let ((_make-rename-procedure_2 0)) (begin (set! _make-rename-procedure_2 (lambda () (begin (set! renaming-counter (+ renaming-counter 1)) (let ((_suffix_6 (string-append renaming-suffix (number->string renaming-counter)))) (lambda (_sym_7) (if (symbol? _sym_7) (let ((_s_10 (symbol->string _sym_7))) (if (if (> (string-length _s_10) 0) (char=? (string-ref _s_10 0) renaming-prefix-character) #f) (string->symbol (string-append _s_10 _suffix_6)) (string->symbol (string-append renaming-prefix _s_10 _suffix_6)))) (m-warn "Illegal use of rename procedure" 'ok:fixme _sym_7))))))) (_make-rename-procedure_2))))) 'make-rename-procedure))
(let () (begin (set! m-strip (lambda (_x_1) (let ((_m-strip_2 0)) (begin (set! _m-strip_2 (lambda (_x_3) (let ((_original-symbol_5 (unspecified))) (begin (set! _original-symbol_5 (lambda (_x_6) (let ((_loop_9 (unspecified))) (begin (set! _loop_9 (lambda (_sym_10 _s_10 _i_10 _n_10) (if (= _i_10 _n_10) _sym_10 (if (char=? (string-ref _s_10 _i_10) renaming-suffix-character) (string->symbol (substring _s_10 1 _i_10)) (_loop_9 _sym_10 _s_10 (+ _i_10 1) _n_10))))) (let ((_s_14 (symbol->string _x_6))) (if (if (> (string-length _s_14) 0) (char=? (string-ref _s_14 0) renaming-prefix-character) #f) (_loop_9 _x_6 _s_14 0 (string-length _s_14)) _x_6)))))) (if (symbol? _x_3) (_original-symbol_5 _x_3) (if (pair? _x_3) (let ((_a_21 (_m-strip_2 (let ((_x_32_35 _x_3)) (begin (_check! (pair? _x_32_35) 0 _x_32_35) (car:pair _x_32_35))))) (_b_21 (_m-strip_2 (let ((_x_36_39 _x_3)) (begin (_check! (pair? _x_36_39) 1 _x_36_39) (cdr:pair _x_36_39)))))) (if (if (eq? _a_21 (let ((_x_23_26 _x_3)) (begin (_check! (pair? _x_23_26) 0 _x_23_26) (car:pair _x_23_26)))) (eq? _b_21 (let ((_x_28_31 _x_3)) (begin (_check! (pair? _x_28_31) 1 _x_28_31) (cdr:pair _x_28_31)))) #f) _x_3 (cons _a_21 _b_21))) (if (vector? _x_3) (let* ((_v_43 (vector->list _x_3)) (_v2_46 (let () (let ((_loop_55_58_61 (unspecified))) (begin (set! _loop_55_58_61 (lambda (_y1_50_51_62 _results_50_54_62) (if (null? _y1_50_51_62) (reverse _results_50_54_62) (begin #t (_loop_55_58_61 (let ((_x_66_69 _y1_50_51_62)) (begin (_check! (pair? _x_66_69) 1 _x_66_69) (cdr:pair _x_66_69))) (cons (_m-strip_2 (let ((_x_70_73 _y1_50_51_62)) (begin (_check! (pair? _x_70_73) 0 _x_70_73) (car:pair _x_70_73)))) _results_50_54_62)))))) (_loop_55_58_61 _v_43 '())))))) (let () (if (equal? _v_43 _v2_46) _x_3 (list->vector _v2_46)))) _x_3))))))) (_m-strip_2 _x_1))))) 'm-strip))
(let () (begin (set! rename-vars (lambda (_original-vars_1) (let ((_rename-vars_2 0)) (begin (set! _rename-vars_2 (lambda (_original-vars_3) (let* ((_rename_6 (make-rename-procedure)) (_loop_7 (unspecified))) (begin (set! _loop_7 (lambda (_vars_8 _newvars_8) (if (null? _vars_8) (reverse _newvars_8) (if (pair? _vars_8) (let ((_var_13 (let ((_x_18_21 _vars_8)) (begin (_check! (pair? _x_18_21) 0 _x_18_21) (car:pair _x_18_21))))) (if (symbol? _var_13) (_loop_7 (let ((_x_14_17 _vars_8)) (begin (_check! (pair? _x_14_17) 1 _x_14_17) (cdr:pair _x_14_17))) (cons (cons _var_13 (_rename_6 _var_13)) _newvars_8)) (m-error "Illegal variable" _var_13))) (if (symbol? _vars_8) (_loop_7 (cons _vars_8 '()) _newvars_8) (m-error "Malformed parameter list" _original-vars_3)))))) (_loop_7 _original-vars_3 '()))))) (_rename-vars_2 _original-vars_1))))) 'rename-vars))
(let () (begin (set! rename-formals (lambda (_formals_1 _alist_1) (let ((_rename-formals_2 0)) (begin (set! _rename-formals_2 (lambda (_formals_3 _alist_3) (if (null? _formals_3) '() (if (pair? _formals_3) (cons (let ((_x_6_9 (assq (let ((_x_10_13 _formals_3)) (begin (_check! (pair? _x_10_13) 0 _x_10_13) (car:pair _x_10_13))) _alist_3))) (begin (_check! (pair? _x_6_9) 1 _x_6_9) (cdr:pair _x_6_9))) (_rename-formals_2 (let ((_x_14_17 _formals_3)) (begin (_check! (pair? _x_14_17) 1 _x_14_17) (cdr:pair _x_14_17))) _alist_3)) (let ((_x_19_22 (assq _formals_3 _alist_3))) (begin (_check! (pair? _x_19_22) 1 _x_19_22) (cdr:pair _x_19_22))))))) (_rename-formals_2 _formals_1 _alist_1))))) 'rename-formals))
(let () ($$trace "syntaxrules"))
(let () (begin (set! pattern-variable-flag (cons 'v '())) 'pattern-variable-flag))
(let () (begin (set! ellipsis-pattern-flag (cons 'e '())) 'ellipsis-pattern-flag))
(let () (begin (set! ellipsis-template-flag ellipsis-pattern-flag) 'ellipsis-template-flag))
(let () (begin (set! make-patternvar (lambda (_v_1 _rank_1) (let ((_make-patternvar_2 0)) (begin (set! _make-patternvar_2 (lambda (_v_3 _rank_3) (let* ((_t_4_7_12 _rank_3) (_t_4_6_15 _v_3) (_t_4_5_18 pattern-variable-flag) (_v_4_9_21 (make-vector 3 _t_4_7_12))) (let () (begin (let ((_v_25_28 _v_4_9_21) (_i_25_28 1) (_x_25_28 _t_4_6_15)) (begin (_check! (fixnum? _i_25_28) 41 _v_25_28 _i_25_28 _x_25_28) (_check! (vector? _v_25_28) 41 _v_25_28 _i_25_28 _x_25_28) (_check! (<:fix:fix _i_25_28 (vector-length:vec _v_25_28)) 41 _v_25_28 _i_25_28 _x_25_28) (_check! (>=:fix:fix _i_25_28 0) 41 _v_25_28 _i_25_28 _x_25_28) (vector-set!:trusted _v_25_28 _i_25_28 _x_25_28))) (let ((_v_29_32 _v_4_9_21) (_i_29_32 0) (_x_29_32 _t_4_5_18)) (begin (_check! (fixnum? _i_29_32) 41 _v_29_32 _i_29_32 _x_29_32) (_check! (vector? _v_29_32) 41 _v_29_32 _i_29_32 _x_29_32) (_check! (<:fix:fix _i_29_32 (vector-length:vec _v_29_32)) 41 _v_29_32 _i_29_32 _x_29_32) (_check! (>=:fix:fix _i_29_32 0) 41 _v_29_32 _i_29_32 _x_29_32) (vector-set!:trusted _v_29_32 _i_29_32 _x_29_32))) _v_4_9_21))))) (_make-patternvar_2 _v_1 _rank_1))))) 'make-patternvar))
(let () (begin (set! make-ellipsis-pattern (lambda (_p_1 _vars_1) (let ((_make-ellipsis-pattern_2 0)) (begin (set! _make-ellipsis-pattern_2 (lambda (_p_3 _vars_3) (let* ((_t_4_7_12 _vars_3) (_t_4_6_15 _p_3) (_t_4_5_18 ellipsis-pattern-flag) (_v_4_9_21 (make-vector 3 _t_4_7_12))) (let () (begin (let ((_v_25_28 _v_4_9_21) (_i_25_28 1) (_x_25_28 _t_4_6_15)) (begin (_check! (fixnum? _i_25_28) 41 _v_25_28 _i_25_28 _x_25_28) (_check! (vector? _v_25_28) 41 _v_25_28 _i_25_28 _x_25_28) (_check! (<:fix:fix _i_25_28 (vector-length:vec _v_25_28)) 41 _v_25_28 _i_25_28 _x_25_28) (_check! (>=:fix:fix _i_25_28 0) 41 _v_25_28 _i_25_28 _x_25_28) (vector-set!:trusted _v_25_28 _i_25_28 _x_25_28))) (let ((_v_29_32 _v_4_9_21) (_i_29_32 0) (_x_29_32 _t_4_5_18)) (begin (_check! (fixnum? _i_29_32) 41 _v_29_32 _i_29_32 _x_29_32) (_check! (vector? _v_29_32) 41 _v_29_32 _i_29_32 _x_29_32) (_check! (<:fix:fix _i_29_32 (vector-length:vec _v_29_32)) 41 _v_29_32 _i_29_32 _x_29_32) (_check! (>=:fix:fix _i_29_32 0) 41 _v_29_32 _i_29_32 _x_29_32) (vector-set!:trusted _v_29_32 _i_29_32 _x_29_32))) _v_4_9_21))))) (_make-ellipsis-pattern_2 _p_1 _vars_1))))) 'make-ellipsis-pattern))
(let () (begin (set! make-ellipsis-template (lambda (_t_1 _vars_1) (let ((_make-ellipsis-template_2 0)) (begin (set! _make-ellipsis-template_2 (lambda (_t_3 _vars_3) (let* ((_t_4_7_12 _vars_3) (_t_4_6_15 _t_3) (_t_4_5_18 ellipsis-template-flag) (_v_4_9_21 (make-vector 3 _t_4_7_12))) (let () (begin (let ((_v_25_28 _v_4_9_21) (_i_25_28 1) (_x_25_28 _t_4_6_15)) (begin (_check! (fixnum? _i_25_28) 41 _v_25_28 _i_25_28 _x_25_28) (_check! (vector? _v_25_28) 41 _v_25_28 _i_25_28 _x_25_28) (_check! (<:fix:fix _i_25_28 (vector-length:vec _v_25_28)) 41 _v_25_28 _i_25_28 _x_25_28) (_check! (>=:fix:fix _i_25_28 0) 41 _v_25_28 _i_25_28 _x_25_28) (vector-set!:trusted _v_25_28 _i_25_28 _x_25_28))) (let ((_v_29_32 _v_4_9_21) (_i_29_32 0) (_x_29_32 _t_4_5_18)) (begin (_check! (fixnum? _i_29_32) 41 _v_29_32 _i_29_32 _x_29_32) (_check! (vector? _v_29_32) 41 _v_29_32 _i_29_32 _x_29_32) (_check! (<:fix:fix _i_29_32 (vector-length:vec _v_29_32)) 41 _v_29_32 _i_29_32 _x_29_32) (_check! (>=:fix:fix _i_29_32 0) 41 _v_29_32 _i_29_32 _x_29_32) (vector-set!:trusted _v_29_32 _i_29_32 _x_29_32))) _v_4_9_21))))) (_make-ellipsis-template_2 _t_1 _vars_1))))) 'make-ellipsis-template))
(let () (begin (set! patternvar? (lambda (_x_1) (let ((_patternvar?_2 0)) (begin (set! _patternvar?_2 (lambda (_x_3) (if (vector? _x_3) (if (= (let ((_v_6_9 _x_3)) (begin (_check! (vector? _v_6_9) 42 _v_6_9) (vector-length:vec _v_6_9))) 3) (eq? (let ((_v_11_14 _x_3) (_i_11_14 0)) (begin (_check! (fixnum? _i_11_14) 40 _v_11_14 _i_11_14) (_check! (vector? _v_11_14) 40 _v_11_14 _i_11_14) (_check! (<:fix:fix _i_11_14 (vector-length:vec _v_11_14)) 40 _v_11_14 _i_11_14) (_check! (>=:fix:fix _i_11_14 0) 40 _v_11_14 _i_11_14) (vector-ref:trusted _v_11_14 _i_11_14))) pattern-variable-flag) #f) #f))) (_patternvar?_2 _x_1))))) 'patternvar?))
(let () (begin (set! ellipsis-pattern? (lambda (_x_1) (let ((_ellipsis-pattern?_2 0)) (begin (set! _ellipsis-pattern?_2 (lambda (_x_3) (if (vector? _x_3) (if (= (let ((_v_6_9 _x_3)) (begin (_check! (vector? _v_6_9) 42 _v_6_9) (vector-length:vec _v_6_9))) 3) (eq? (let ((_v_11_14 _x_3) (_i_11_14 0)) (begin (_check! (fixnum? _i_11_14) 40 _v_11_14 _i_11_14) (_check! (vector? _v_11_14) 40 _v_11_14 _i_11_14) (_check! (<:fix:fix _i_11_14 (vector-length:vec _v_11_14)) 40 _v_11_14 _i_11_14) (_check! (>=:fix:fix _i_11_14 0) 40 _v_11_14 _i_11_14) (vector-ref:trusted _v_11_14 _i_11_14))) ellipsis-pattern-flag) #f) #f))) (_ellipsis-pattern?_2 _x_1))))) 'ellipsis-pattern?))
(let () (begin (set! ellipsis-template? (lambda (_x_1) (let ((_ellipsis-template?_2 0)) (begin (set! _ellipsis-template?_2 (lambda (_x_3) (if (vector? _x_3) (if (= (let ((_v_6_9 _x_3)) (begin (_check! (vector? _v_6_9) 42 _v_6_9) (vector-length:vec _v_6_9))) 3) (eq? (let ((_v_11_14 _x_3) (_i_11_14 0)) (begin (_check! (fixnum? _i_11_14) 40 _v_11_14 _i_11_14) (_check! (vector? _v_11_14) 40 _v_11_14 _i_11_14) (_check! (<:fix:fix _i_11_14 (vector-length:vec _v_11_14)) 40 _v_11_14 _i_11_14) (_check! (>=:fix:fix _i_11_14 0) 40 _v_11_14 _i_11_14) (vector-ref:trusted _v_11_14 _i_11_14))) ellipsis-template-flag) #f) #f))) (_ellipsis-template?_2 _x_1))))) 'ellipsis-template?))
(let () (begin (set! patternvar-name (lambda (_v_1) (let ((_patternvar-name_2 0)) (begin (set! _patternvar-name_2 (lambda (_v_3) (let ((_v_4_7 _v_3) (_i_4_7 1)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_patternvar-name_2 _v_1))))) 'patternvar-name))
(let () (begin (set! patternvar-rank (lambda (_v_1) (let ((_patternvar-rank_2 0)) (begin (set! _patternvar-rank_2 (lambda (_v_3) (let ((_v_4_7 _v_3) (_i_4_7 2)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_patternvar-rank_2 _v_1))))) 'patternvar-rank))
(let () (begin (set! ellipsis-pattern (lambda (_p_1) (let ((_ellipsis-pattern_2 0)) (begin (set! _ellipsis-pattern_2 (lambda (_p_3) (let ((_v_4_7 _p_3) (_i_4_7 1)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_ellipsis-pattern_2 _p_1))))) 'ellipsis-pattern))
(let () (begin (set! ellipsis-pattern-vars (lambda (_p_1) (let ((_ellipsis-pattern-vars_2 0)) (begin (set! _ellipsis-pattern-vars_2 (lambda (_p_3) (let ((_v_4_7 _p_3) (_i_4_7 2)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_ellipsis-pattern-vars_2 _p_1))))) 'ellipsis-pattern-vars))
(let () (begin (set! ellipsis-template (lambda (_t_1) (let ((_ellipsis-template_2 0)) (begin (set! _ellipsis-template_2 (lambda (_t_3) (let ((_v_4_7 _t_3) (_i_4_7 1)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_ellipsis-template_2 _t_1))))) 'ellipsis-template))
(let () (begin (set! ellipsis-template-vars (lambda (_t_1) (let ((_ellipsis-template-vars_2 0)) (begin (set! _ellipsis-template-vars_2 (lambda (_t_3) (let ((_v_4_7 _t_3) (_i_4_7 2)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_ellipsis-template-vars_2 _t_1))))) 'ellipsis-template-vars))
(let () (begin (set! pattern-variable (lambda (_v_1 _vars_1) (let ((_pattern-variable_2 0)) (begin (set! _pattern-variable_2 (lambda (_v_3 _vars_3) (if (null? _vars_3) #f (if (eq? _v_3 (patternvar-name (let ((_x_6_9 _vars_3)) (begin (_check! (pair? _x_6_9) 0 _x_6_9) (car:pair _x_6_9))))) (let ((_x_10_13 _vars_3)) (begin (_check! (pair? _x_10_13) 0 _x_10_13) (car:pair _x_10_13))) (_pattern-variable_2 _v_3 (let ((_x_15_18 _vars_3)) (begin (_check! (pair? _x_15_18) 1 _x_15_18) (cdr:pair _x_15_18)))))))) (_pattern-variable_2 _v_1 _vars_1))))) 'pattern-variable))
(let () (begin (set! m-compile-transformer-spec (lambda (_spec_1 _env_1) (let ((_m-compile-transformer-spec_2 0)) (begin (set! _m-compile-transformer-spec_2 (lambda (_spec_3 _env_3) (if (if (> (safe-length _spec_3) 1) (eq? (syntactic-lookup _env_3 (let ((_x_6_9 _spec_3)) (begin (_check! (pair? _x_6_9) 0 _x_6_9) (car:pair _x_6_9)))) denotation-of-syntax-rules) #f) (let ((_literals_12 (let ((_x_72_75 (let ((_x_76_79 _spec_3)) (begin (_check! (pair? _x_76_79) 1 _x_76_79) (cdr:pair _x_76_79))))) (begin (_check! (pair? _x_72_75) 0 _x_72_75) (car:pair _x_72_75)))) (_rules_12 (let ((_x_81_84 (let ((_x_85_88 _spec_3)) (begin (_check! (pair? _x_85_88) 1 _x_85_88) (cdr:pair _x_85_88))))) (begin (_check! (pair? _x_81_84) 1 _x_81_84) (cdr:pair _x_81_84))))) (begin (if (let ((_temp_13_16 (not (list? _literals_12)))) (if _temp_13_16 _temp_13_16 (not (every1? (lambda (_rule_18) (if (= (safe-length _rule_18) 2) (pair? (let ((_x_21_24 _rule_18)) (begin (_check! (pair? _x_21_24) 0 _x_21_24) (car:pair _x_21_24)))) #f)) _rules_12)))) (m-error "Malformed syntax-rules" _spec_3) (unspecified)) (let* ((_t1_25_28 'macro) (_t2_25_31 (let* ((_t1_35_38 (let () (let ((_loop_51_54_57 (unspecified))) (begin (set! _loop_51_54_57 (lambda (_y1_46_47_58 _results_46_50_58) (if (null? _y1_46_47_58) (reverse _results_46_50_58) (begin #t (_loop_51_54_57 (let ((_x_62_65 _y1_46_47_58)) (begin (_check! (pair? _x_62_65) 1 _x_62_65) (cdr:pair _x_62_65))) (cons (let ((_rule_66 (let ((_x_67_70 _y1_46_47_58)) (begin (_check! (pair? _x_67_70) 0 _x_67_70) (car:pair _x_67_70))))) (m-compile-rule _rule_66 _literals_12 _env_3)) _results_46_50_58)))))) (_loop_51_54_57 _rules_12 '()))))) (_t2_35_41 (cons _env_3 '()))) (let () (cons _t1_35_38 _t2_35_41))))) (let () (cons _t1_25_28 _t2_25_31))))) (m-error "Malformed syntax-rules" _spec_3)))) (_m-compile-transformer-spec_2 _spec_1 _env_1))))) 'm-compile-transformer-spec))
(let () (begin (set! m-compile-rule (lambda (_rule_1 _literals_1 _env_1) (let ((_m-compile-rule_2 0)) (begin (set! _m-compile-rule_2 (lambda (_rule_3 _literals_3 _env_3) (m-compile-pattern (let ((_x_4_7 (let ((_x_8_11 _rule_3)) (begin (_check! (pair? _x_8_11) 0 _x_8_11) (car:pair _x_8_11))))) (begin (_check! (pair? _x_4_7) 1 _x_4_7) (cdr:pair _x_4_7))) _literals_3 _env_3 (lambda (_compiled-rule_12 _patternvars_12) (cons _compiled-rule_12 (m-compile-template (let ((_x_14_17 (let ((_x_18_21 _rule_3)) (begin (_check! (pair? _x_18_21) 1 _x_18_21) (cdr:pair _x_18_21))))) (begin (_check! (pair? _x_14_17) 0 _x_14_17) (car:pair _x_14_17))) _patternvars_12 _env_3)))))) (_m-compile-rule_2 _rule_1 _literals_1 _env_1))))) 'm-compile-rule))
(let () (begin (set! m-compile-pattern (lambda (_p_1 _literals_1 _env_1 _k_1) (let ((_m-compile-pattern_2 0)) (begin (set! _m-compile-pattern_2 (lambda (_p_3 _literals_3 _env_3 _k_3) (let ((_loop_4 (unspecified))) (begin (set! _loop_4 (lambda (_p_5 _vars_5 _rank_5 _k_5) (if (symbol? _p_5) (if (memq _p_5 _literals_3) (_k_5 _p_5 _vars_5) (let ((_var_9 (make-patternvar _p_5 _rank_5))) (_k_5 _var_9 (cons _var_9 _vars_5)))) (if (null? _p_5) (_k_5 '() _vars_5) (if (pair? _p_5) (if (if (pair? (let ((_x_13_16 _p_5)) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16)))) (if (symbol? (let ((_x_19_22 (let ((_x_23_26 _p_5)) (begin (_check! (pair? _x_23_26) 1 _x_23_26) (cdr:pair _x_23_26))))) (begin (_check! (pair? _x_19_22) 0 _x_19_22) (car:pair _x_19_22)))) (same-denotation? (syntactic-lookup _env_3 (let ((_x_29_32 (let ((_x_33_36 _p_5)) (begin (_check! (pair? _x_33_36) 1 _x_33_36) (cdr:pair _x_33_36))))) (begin (_check! (pair? _x_29_32) 0 _x_29_32) (car:pair _x_29_32)))) denotation-of-___) #f) #f) (if (null? (let ((_x_38_41 (let ((_x_42_45 _p_5)) (begin (_check! (pair? _x_42_45) 1 _x_42_45) (cdr:pair _x_42_45))))) (begin (_check! (pair? _x_38_41) 1 _x_38_41) (cdr:pair _x_38_41)))) (_loop_4 (let ((_x_46_49 _p_5)) (begin (_check! (pair? _x_46_49) 0 _x_46_49) (car:pair _x_46_49))) '() (+ _rank_5 1) (lambda (_p_50 _vars1_50) (_k_5 (make-ellipsis-pattern _p_50 _vars1_50) (union2 _vars1_50 _vars_5)))) (m-error "Malformed pattern" _p_5)) (_loop_4 (let ((_x_51_54 _p_5)) (begin (_check! (pair? _x_51_54) 0 _x_51_54) (car:pair _x_51_54))) _vars_5 _rank_5 (lambda (_p1_55 _vars_55) (_loop_4 (let ((_x_56_59 _p_5)) (begin (_check! (pair? _x_56_59) 1 _x_56_59) (cdr:pair _x_56_59))) _vars_55 _rank_5 (lambda (_p2_60 _vars_60) (_k_5 (cons _p1_55 _p2_60) _vars_60)))))) (if (vector? _p_5) (_loop_4 (vector->list _p_5) _vars_5 _rank_5 (lambda (_p_62 _vars_62) (_k_5 (make-vector 1 _p_62) _vars_62))) (_k_5 _p_5 _vars_5))))))) (_loop_4 _p_3 '() 0 _k_3))))) (_m-compile-pattern_2 _p_1 _literals_1 _env_1 _k_1))))) 'm-compile-pattern))
(let () (begin (set! m-compile-template (lambda (_t_1 _vars_1 _env_1) (let ((_m-compile-template_2 0)) (begin (set! _m-compile-template_2 (lambda (_t_3 _vars_3 _env_3) (let ((_loop1_4 (unspecified)) (_loop_4 (unspecified))) (begin (set! _loop1_4 (lambda (_t_5 _inserted_5 _referenced_5 _rank_5 _escaped?_5 _k_5) (_loop_4 (let ((_x_6_9 _t_5)) (begin (_check! (pair? _x_6_9) 0 _x_6_9) (car:pair _x_6_9))) _inserted_5 '() (+ _rank_5 1) _escaped?_5 (lambda (_t1_10 _inserted_10 _referenced1_10) (_loop_4 (let ((_x_12_15 (let ((_x_16_19 _t_5)) (begin (_check! (pair? _x_16_19) 1 _x_16_19) (cdr:pair _x_16_19))))) (begin (_check! (pair? _x_12_15) 1 _x_12_15) (cdr:pair _x_12_15))) _inserted_10 (append _referenced1_10 _referenced_5) _rank_5 _escaped?_5 (lambda (_t2_20 _inserted_20 _referenced_20) (_k_5 (cons (make-ellipsis-template _t1_10 (filter1 (lambda (_var_21) (> (patternvar-rank _var_21) _rank_5)) _referenced1_10)) _t2_20) _inserted_20 _referenced_20))))))) (set! _loop_4 (lambda (_t_22 _inserted_22 _referenced_22 _rank_22 _escaped?_22 _k_22) (if (symbol? _t_22) (let ((_x_26 (pattern-variable _t_22 _vars_3))) (if _x_26 (if (>= _rank_22 (patternvar-rank _x_26)) (_k_22 _x_26 _inserted_22 (cons _x_26 _referenced_22)) (m-error "Too few ellipses follow pattern variable in template" (patternvar-name _x_26))) (_k_22 _t_22 (cons _t_22 _inserted_22) _referenced_22))) (if (null? _t_22) (_k_22 '() _inserted_22 _referenced_22) (if (pair? _t_22) (if (if (not _escaped?_22) (if (symbol? (let ((_x_32_35 _t_22)) (begin (_check! (pair? _x_32_35) 0 _x_32_35) (car:pair _x_32_35)))) (if (same-denotation? (syntactic-lookup _env_3 (let ((_x_37_40 _t_22)) (begin (_check! (pair? _x_37_40) 0 _x_37_40) (car:pair _x_37_40)))) denotation-of-___) (if (pair? (let ((_x_42_45 _t_22)) (begin (_check! (pair? _x_42_45) 1 _x_42_45) (cdr:pair _x_42_45)))) (null? (let ((_x_48_51 (let ((_x_52_55 _t_22)) (begin (_check! (pair? _x_52_55) 1 _x_52_55) (cdr:pair _x_52_55))))) (begin (_check! (pair? _x_48_51) 1 _x_48_51) (cdr:pair _x_48_51)))) #f) #f) #f) #f) (_loop_4 (let ((_x_57_60 (let ((_x_61_64 _t_22)) (begin (_check! (pair? _x_61_64) 1 _x_61_64) (cdr:pair _x_61_64))))) (begin (_check! (pair? _x_57_60) 0 _x_57_60) (car:pair _x_57_60))) _inserted_22 _referenced_22 _rank_22 #t _k_22) (if (if (not _escaped?_22) (if (pair? (let ((_x_68_71 _t_22)) (begin (_check! (pair? _x_68_71) 1 _x_68_71) (cdr:pair _x_68_71)))) (if (symbol? (let ((_x_74_77 (let ((_x_78_81 _t_22)) (begin (_check! (pair? _x_78_81) 1 _x_78_81) (cdr:pair _x_78_81))))) (begin (_check! (pair? _x_74_77) 0 _x_74_77) (car:pair _x_74_77)))) (same-denotation? (syntactic-lookup _env_3 (let ((_x_84_87 (let ((_x_88_91 _t_22)) (begin (_check! (pair? _x_88_91) 1 _x_88_91) (cdr:pair _x_88_91))))) (begin (_check! (pair? _x_84_87) 0 _x_84_87) (car:pair _x_84_87)))) denotation-of-___) #f) #f) #f) (_loop1_4 _t_22 _inserted_22 _referenced_22 _rank_22 _escaped?_22 _k_22) (_loop_4 (let ((_x_93_96 _t_22)) (begin (_check! (pair? _x_93_96) 0 _x_93_96) (car:pair _x_93_96))) _inserted_22 _referenced_22 _rank_22 _escaped?_22 (lambda (_t1_97 _inserted_97 _referenced_97) (_loop_4 (let ((_x_98_101 _t_22)) (begin (_check! (pair? _x_98_101) 1 _x_98_101) (cdr:pair _x_98_101))) _inserted_97 _referenced_97 _rank_22 _escaped?_22 (lambda (_t2_102 _inserted_102 _referenced_102) (_k_22 (cons _t1_97 _t2_102) _inserted_102 _referenced_102))))))) (if (vector? _t_22) (_loop_4 (vector->list _t_22) _inserted_22 _referenced_22 _rank_22 _escaped?_22 (lambda (_t_104 _inserted_104 _referenced_104) (_k_22 (make-vector 1 _t_104) _inserted_104 _referenced_104))) (_k_22 _t_22 _inserted_22 _referenced_22))))))) (_loop_4 _t_3 '() '() 0 #f (lambda (_t_107 _inserted_107 _referenced_107) (let* ((_t1_108_111 _t_107) (_t2_108_114 (cons _inserted_107 '()))) (let () (cons _t1_108_111 _t2_108_114))))))))) (_m-compile-template_2 _t_1 _vars_1 _env_1))))) 'm-compile-template))
(let () (begin (set! empty-pattern-variable-environment (cons (make-patternvar (string->symbol "") 0) '())) 'empty-pattern-variable-environment))
(let () (begin (set! m-match (lambda (_f_1 _p_1 _env-def_1 _env-use_1) (let ((_m-match_2 0)) (begin (set! _m-match_2 (lambda (_f_3 _p_3 _env-def_3 _env-use_3) (let ((_match1_4 (unspecified)) (_match_4 (unspecified))) (begin (set! _match1_4 (lambda (_f_5 _p_5 _answer_5 _rank_5) (if (not (list? _f_5)) #f (if (null? _f_5) (append (let () (let ((_loop_13_16_19 (unspecified))) (begin (set! _loop_13_16_19 (lambda (_y1_8_9_20 _results_8_12_20) (if (null? _y1_8_9_20) (reverse _results_8_12_20) (begin #t (_loop_13_16_19 (let ((_x_24_27 _y1_8_9_20)) (begin (_check! (pair? _x_24_27) 1 _x_24_27) (cdr:pair _x_24_27))) (cons (let ((_var_28 (let ((_x_29_32 _y1_8_9_20)) (begin (_check! (pair? _x_29_32) 0 _x_29_32) (car:pair _x_29_32))))) (cons _var_28 '())) _results_8_12_20)))))) (_loop_13_16_19 (ellipsis-pattern-vars _p_5) '())))) _answer_5) (let* ((_p1_36 (ellipsis-pattern _p_5)) (_answers_39 (let () (let ((_loop_103_106_109 (unspecified))) (begin (set! _loop_103_106_109 (lambda (_y1_98_99_110 _results_98_102_110) (if (null? _y1_98_99_110) (reverse _results_98_102_110) (begin #t (_loop_103_106_109 (let ((_x_114_117 _y1_98_99_110)) (begin (_check! (pair? _x_114_117) 1 _x_114_117) (cdr:pair _x_114_117))) (cons (let ((_f_118 (let ((_x_119_122 _y1_98_99_110)) (begin (_check! (pair? _x_119_122) 0 _x_119_122) (car:pair _x_119_122))))) (_match_4 _f_118 _p1_36 _answer_5 _rank_5)) _results_98_102_110)))))) (_loop_103_106_109 _f_5 '())))))) (let () (if (every1? (lambda (_answer_43) _answer_43) _answers_39) (append (let () (let ((_loop_49_52_55 (unspecified))) (begin (set! _loop_49_52_55 (lambda (_y1_44_45_56 _results_44_48_56) (if (null? _y1_44_45_56) (reverse _results_44_48_56) (begin #t (_loop_49_52_55 (let ((_x_60_63 _y1_44_45_56)) (begin (_check! (pair? _x_60_63) 1 _x_60_63) (cdr:pair _x_60_63))) (cons (let ((_var_64 (let ((_x_94_97 _y1_44_45_56)) (begin (_check! (pair? _x_94_97) 0 _x_94_97) (car:pair _x_94_97))))) (cons _var_64 (let () (let ((_loop_70_73_76 (unspecified))) (begin (set! _loop_70_73_76 (lambda (_y1_65_66_77 _results_65_69_77) (if (null? _y1_65_66_77) (reverse _results_65_69_77) (begin #t (_loop_70_73_76 (let ((_x_81_84 _y1_65_66_77)) (begin (_check! (pair? _x_81_84) 1 _x_81_84) (cdr:pair _x_81_84))) (cons (let* ((_answer_85 (let ((_x_90_93 _y1_65_66_77)) (begin (_check! (pair? _x_90_93) 0 _x_90_93) (car:pair _x_90_93)))) (_x_86_89 (assq _var_64 _answer_85))) (begin (_check! (pair? _x_86_89) 1 _x_86_89) (cdr:pair _x_86_89))) _results_65_69_77)))))) (_loop_70_73_76 _answers_39 '())))))) _results_44_48_56)))))) (_loop_49_52_55 (ellipsis-pattern-vars _p_5) '())))) _answer_5) #f))))))) (set! _match_4 (lambda (_f_123 _p_123 _answer_123 _rank_123) (if (null? _p_123) (if (null? _f_123) _answer_123 #f) (if (pair? _p_123) (if (pair? _f_123) (let ((_answer_132 (_match_4 (let ((_x_143_146 _f_123)) (begin (_check! (pair? _x_143_146) 0 _x_143_146) (car:pair _x_143_146))) (let ((_x_147_150 _p_123)) (begin (_check! (pair? _x_147_150) 0 _x_147_150) (car:pair _x_147_150))) _answer_123 _rank_123))) (if _answer_132 (_match_4 (let ((_x_135_138 _f_123)) (begin (_check! (pair? _x_135_138) 1 _x_135_138) (cdr:pair _x_135_138))) (let ((_x_139_142 _p_123)) (begin (_check! (pair? _x_139_142) 1 _x_139_142) (cdr:pair _x_139_142))) _answer_132 _rank_123) #f)) #f) (if (symbol? _p_123) (if (symbol? _f_123) (if (same-denotation? (syntactic-lookup _env-def_3 _p_123) (syntactic-lookup _env-use_3 _f_123)) _answer_123 #f) #f) (if (patternvar? _p_123) (cons (cons _p_123 _f_123) _answer_123) (if (ellipsis-pattern? _p_123) (_match1_4 _f_123 _p_123 _answer_123 (+ _rank_123 1)) (if (vector? _p_123) (if (vector? _f_123) (_match_4 (vector->list _f_123) (let ((_v_160_163 _p_123) (_i_160_163 0)) (begin (_check! (fixnum? _i_160_163) 40 _v_160_163 _i_160_163) (_check! (vector? _v_160_163) 40 _v_160_163 _i_160_163) (_check! (<:fix:fix _i_160_163 (vector-length:vec _v_160_163)) 40 _v_160_163 _i_160_163) (_check! (>=:fix:fix _i_160_163 0) 40 _v_160_163 _i_160_163) (vector-ref:trusted _v_160_163 _i_160_163))) _answer_123 _rank_123) #f) (if (equal? _f_123 _p_123) _answer_123 #f))))))))) (_match_4 _f_3 _p_3 empty-pattern-variable-environment 0))))) (_m-match_2 _f_1 _p_1 _env-def_1 _env-use_1))))) 'm-match))
(let () (begin (set! m-rewrite (lambda (_t_1 _alist_1) (let ((_m-rewrite_2 0)) (begin (set! _m-rewrite_2 (lambda (_t_3 _alist_3) (let ((_make-columns_4 (unspecified)) (_rewrite1_4 (unspecified)) (_rewrite_4 (unspecified))) (begin (set! _make-columns_4 (lambda (_vars_5 _rows_5 _alist_5) (let ((_loop_6 (unspecified))) (begin (set! _loop_6 (lambda (_rows_7) (if (null? (let ((_x_8_11 _rows_7)) (begin (_check! (pair? _x_8_11) 0 _x_8_11) (car:pair _x_8_11)))) '() (cons (append (let () (let ((_loop_18_22_25 (unspecified))) (begin (set! _loop_18_22_25 (lambda (_y1_12_14_26 _y1_12_13_26 _results_12_17_26) (if (let ((_temp_28_31 (null? _y1_12_14_26))) (if _temp_28_31 _temp_28_31 (null? _y1_12_13_26))) (reverse _results_12_17_26) (begin #t (_loop_18_22_25 (let ((_x_34_37 _y1_12_14_26)) (begin (_check! (pair? _x_34_37) 1 _x_34_37) (cdr:pair _x_34_37))) (let ((_x_38_41 _y1_12_13_26)) (begin (_check! (pair? _x_38_41) 1 _x_38_41) (cdr:pair _x_38_41))) (cons (let ((_var_42 (let ((_x_47_50 _y1_12_14_26)) (begin (_check! (pair? _x_47_50) 0 _x_47_50) (car:pair _x_47_50)))) (_row_42 (let ((_x_51_54 _y1_12_13_26)) (begin (_check! (pair? _x_51_54) 0 _x_51_54) (car:pair _x_51_54))))) (cons _var_42 (let ((_x_43_46 _row_42)) (begin (_check! (pair? _x_43_46) 0 _x_43_46) (car:pair _x_43_46))))) _results_12_17_26)))))) (_loop_18_22_25 _vars_5 _rows_7 '())))) _alist_5) (_loop_6 (let () (let ((_loop_60_63_66 (unspecified))) (begin (set! _loop_60_63_66 (lambda (_y1_55_56_67 _results_55_59_67) (if (null? _y1_55_56_67) (reverse _results_55_59_67) (begin #t (_loop_60_63_66 (let ((_x_71_74 _y1_55_56_67)) (begin (_check! (pair? _x_71_74) 1 _x_71_74) (cdr:pair _x_71_74))) (cons (let ((_x_75_78 (let ((_x_79_82 _y1_55_56_67)) (begin (_check! (pair? _x_79_82) 0 _x_79_82) (car:pair _x_79_82))))) (begin (_check! (pair? _x_75_78) 1 _x_75_78) (cdr:pair _x_75_78))) _results_55_59_67)))))) (_loop_60_63_66 _rows_7 '()))))))))) (if (let ((_temp_83_86 (null? (let ((_x_112_115 _rows_5)) (begin (_check! (pair? _x_112_115) 1 _x_112_115) (cdr:pair _x_112_115)))))) (if _temp_83_86 _temp_83_86 (apply = (let () (let ((_loop_93_96_99 (unspecified))) (begin (set! _loop_93_96_99 (lambda (_y1_88_89_100 _results_88_92_100) (if (null? _y1_88_89_100) (reverse _results_88_92_100) (begin #t (_loop_93_96_99 (let ((_x_104_107 _y1_88_89_100)) (begin (_check! (pair? _x_104_107) 1 _x_104_107) (cdr:pair _x_104_107))) (cons (length (let ((_x_108_111 _y1_88_89_100)) (begin (_check! (pair? _x_108_111) 0 _x_108_111) (car:pair _x_108_111)))) _results_88_92_100)))))) (_loop_93_96_99 _rows_5 '()))))))) (_loop_6 _rows_5) (m-error "Use of macro is not consistent with definition" _vars_5 _rows_5)))))) (set! _rewrite1_4 (lambda (_t_116 _alist_116 _rank_116) (let* ((_t1_119 (ellipsis-template _t_116)) (_vars_122 (ellipsis-template-vars _t_116)) (_rows_125 (let () (let ((_loop_159_162_165 (unspecified))) (begin (set! _loop_159_162_165 (lambda (_y1_154_155_166 _results_154_158_166) (if (null? _y1_154_155_166) (reverse _results_154_158_166) (begin #t (_loop_159_162_165 (let ((_x_170_173 _y1_154_155_166)) (begin (_check! (pair? _x_170_173) 1 _x_170_173) (cdr:pair _x_170_173))) (cons (let* ((_var_174 (let ((_x_179_182 _y1_154_155_166)) (begin (_check! (pair? _x_179_182) 0 _x_179_182) (car:pair _x_179_182)))) (_x_175_178 (assq _var_174 _alist_116))) (begin (_check! (pair? _x_175_178) 1 _x_175_178) (cdr:pair _x_175_178))) _results_154_158_166)))))) (_loop_159_162_165 _vars_122 '())))))) (let () (let () (let ((_loop_134_137_140 (unspecified))) (begin (set! _loop_134_137_140 (lambda (_y1_129_130_141 _results_129_133_141) (if (null? _y1_129_130_141) (reverse _results_129_133_141) (begin #t (_loop_134_137_140 (let ((_x_145_148 _y1_129_130_141)) (begin (_check! (pair? _x_145_148) 1 _x_145_148) (cdr:pair _x_145_148))) (cons (let ((_alist_149 (let ((_x_150_153 _y1_129_130_141)) (begin (_check! (pair? _x_150_153) 0 _x_150_153) (car:pair _x_150_153))))) (_rewrite_4 _t1_119 _alist_149 _rank_116)) _results_129_133_141)))))) (_loop_134_137_140 (_make-columns_4 _vars_122 _rows_125 _alist_116) '())))))))) (set! _rewrite_4 (lambda (_t_183 _alist_183 _rank_183) (if (null? _t_183) '() (if (pair? _t_183) ((if (ellipsis-pattern? (let ((_x_186_189 _t_183)) (begin (_check! (pair? _x_186_189) 0 _x_186_189) (car:pair _x_186_189)))) append cons) (_rewrite_4 (let ((_x_190_193 _t_183)) (begin (_check! (pair? _x_190_193) 0 _x_190_193) (car:pair _x_190_193))) _alist_183 _rank_183) (_rewrite_4 (let ((_x_194_197 _t_183)) (begin (_check! (pair? _x_194_197) 1 _x_194_197) (cdr:pair _x_194_197))) _alist_183 _rank_183)) (if (symbol? _t_183) (let ((_x_199_202 (assq _t_183 _alist_183))) (begin (_check! (pair? _x_199_202) 1 _x_199_202) (cdr:pair _x_199_202))) (if (patternvar? _t_183) (let ((_x_204_207 (assq _t_183 _alist_183))) (begin (_check! (pair? _x_204_207) 1 _x_204_207) (cdr:pair _x_204_207))) (if (ellipsis-template? _t_183) (_rewrite1_4 _t_183 _alist_183 (+ _rank_183 1)) (if (vector? _t_183) (list->vector (_rewrite_4 (let ((_v_210_213 _t_183) (_i_210_213 0)) (begin (_check! (fixnum? _i_210_213) 40 _v_210_213 _i_210_213) (_check! (vector? _v_210_213) 40 _v_210_213 _i_210_213) (_check! (<:fix:fix _i_210_213 (vector-length:vec _v_210_213)) 40 _v_210_213 _i_210_213) (_check! (>=:fix:fix _i_210_213 0) 40 _v_210_213 _i_210_213) (vector-ref:trusted _v_210_213 _i_210_213))) _alist_183 _rank_183)) _t_183)))))))) (_rewrite_4 _t_3 _alist_3 0))))) (_m-rewrite_2 _t_1 _alist_1))))) 'm-rewrite))
(let () (begin (set! m-transcribe0 (lambda (_exp_1 _env-use_1 _k_1 _inline?_1) (let ((_m-transcribe0_2 0)) (begin (set! _m-transcribe0_2 (lambda (_exp_3 _env-use_3 _k_3 _inline?_3) (let* ((_m_6 (syntactic-lookup _env-use_3 (let ((_x_86_89 _exp_3)) (begin (_check! (pair? _x_86_89) 0 _x_86_89) (car:pair _x_86_89))))) (_rules_9 (macro-rules _m_6)) (_env-def_12 (macro-env _m_6)) (_f_15 (let ((_x_82_85 _exp_3)) (begin (_check! (pair? _x_82_85) 1 _x_82_85) (cdr:pair _x_82_85))))) (let () (let ((_loop_19 (unspecified))) (begin (set! _loop_19 (lambda (_rules_20) (if (null? _rules_20) (if _inline?_3 (_k_3 _exp_3 _env-use_3) (m-error "Use of macro does not match definition" _exp_3)) (let* ((_rule_23 (let ((_x_78_81 _rules_20)) (begin (_check! (pair? _x_78_81) 0 _x_78_81) (car:pair _x_78_81)))) (_pattern_26 (let ((_x_74_77 _rule_23)) (begin (_check! (pair? _x_74_77) 0 _x_74_77) (car:pair _x_74_77)))) (_alist_29 (m-match _f_15 _pattern_26 _env-def_12 _env-use_3))) (let () (if _alist_29 (let* ((_template_35 (let ((_x_62_65 (let ((_x_66_69 _rule_23)) (begin (_check! (pair? _x_66_69) 1 _x_66_69) (cdr:pair _x_66_69))))) (begin (_check! (pair? _x_62_65) 0 _x_62_65) (car:pair _x_62_65)))) (_inserted_38 (let ((_x_49_52 (let ((_x_53_56 (let ((_x_57_60 _rule_23)) (begin (_check! (pair? _x_57_60) 1 _x_57_60) (cdr:pair _x_57_60))))) (begin (_check! (pair? _x_53_56) 1 _x_53_56) (cdr:pair _x_53_56))))) (begin (_check! (pair? _x_49_52) 0 _x_49_52) (car:pair _x_49_52)))) (_alist2_41 (rename-vars _inserted_38)) (_newexp_44 (m-rewrite _template_35 (append _alist2_41 _alist_29)))) (let () (_k_3 _newexp_44 (syntactic-alias _env-use_3 _alist2_41 _env-def_12)))) (_loop_19 (let ((_x_70_73 _rules_20)) (begin (_check! (pair? _x_70_73) 1 _x_70_73) (cdr:pair _x_70_73)))))))))) (if (procedure? _rules_9) (m-transcribe-low-level _exp_3 _env-use_3 _k_3 _rules_9 _env-def_12) (_loop_19 _rules_9)))))))) (_m-transcribe0_2 _exp_1 _env-use_1 _k_1 _inline?_1))))) 'm-transcribe0))
(let () (begin (set! m-transcribe (lambda (_exp_1 _env-use_1 _k_1) (let ((_m-transcribe_2 0)) (begin (set! _m-transcribe_2 (lambda (_exp_3 _env-use_3 _k_3) (m-transcribe0 _exp_3 _env-use_3 _k_3 #f))) (_m-transcribe_2 _exp_1 _env-use_1 _k_1))))) 'm-transcribe))
(let () (begin (set! m-transcribe-inline (lambda (_exp_1 _env-use_1 _k_1) (let ((_m-transcribe-inline_2 0)) (begin (set! _m-transcribe-inline_2 (lambda (_exp_3 _env-use_3 _k_3) (m-transcribe0 _exp_3 _env-use_3 _k_3 #t))) (_m-transcribe-inline_2 _exp_1 _env-use_1 _k_1))))) 'm-transcribe-inline))
(let () ($$trace "lowlevel"))
(let () (begin (set! m-transcribe-low-level (lambda (_exp_1 _env-use_1 _k_1 _transformer_1 _env-def_1) (let ((_m-transcribe-low-level_2 0)) (begin (set! _m-transcribe-low-level_2 (lambda (_exp_3 _env-use_3 _k_3 _transformer_3 _env-def_3) (let ((_rename0_6 (make-rename-procedure)) (_renamed_6 '()) (_ok_6 #t)) (let ((_lookup_9 (unspecified))) (begin (set! _lookup_9 (lambda (_sym_10) (let ((_alist_13 _renamed_6)) (let () (let ((_loop_16 (unspecified))) (begin (set! _loop_16 (lambda (_alist_17) (if (null? _alist_17) (syntactic-lookup _env-use_3 _sym_10) (if (eq? _sym_10 (let ((_x_20_23 (let ((_x_24_27 _alist_17)) (begin (_check! (pair? _x_24_27) 0 _x_24_27) (car:pair _x_24_27))))) (begin (_check! (pair? _x_20_23) 1 _x_20_23) (cdr:pair _x_20_23)))) (syntactic-lookup _env-def_3 (let ((_x_28_31 (let ((_x_32_35 _alist_17)) (begin (_check! (pair? _x_32_35) 0 _x_32_35) (car:pair _x_32_35))))) (begin (_check! (pair? _x_28_31) 0 _x_28_31) (car:pair _x_28_31)))) (_loop_16 (let ((_x_37_40 _alist_17)) (begin (_check! (pair? _x_37_40) 1 _x_37_40) (cdr:pair _x_37_40)))))))) (_loop_16 _alist_13))))))) (let ((_rename_41 (lambda (_sym_45) (if _ok_6 (let ((_probe_48 (assq _sym_45 _renamed_6))) (if _probe_48 (let ((_x_49_52 _probe_48)) (begin (_check! (pair? _x_49_52) 1 _x_49_52) (cdr:pair _x_49_52))) (let ((_sym2_55 (_rename0_6 _sym_45))) (begin (set! _renamed_6 (cons (cons _sym_45 _sym2_55) _renamed_6)) _sym2_55)))) (m-error "Illegal use of a rename procedure" _sym_45)))) (_compare_41 (lambda (_sym1_56 _sym2_56) (same-denotation? (_lookup_9 _sym1_56) (_lookup_9 _sym2_56))))) (let ((_exp2_44 (_transformer_3 _exp_3 _rename_41 _compare_41))) (begin (set! _ok_6 #f) (_k_3 _exp2_44 (syntactic-alias _env-use_3 _renamed_6 _env-def_3)))))))))) (_m-transcribe-low-level_2 _exp_1 _env-use_1 _k_1 _transformer_1 _env-def_1))))) 'm-transcribe-low-level))
(let () (begin (set! identifier? symbol?) 'identifier?))
(let () (begin (set! identifier->symbol (lambda (_id_1) (let ((_identifier->symbol_2 0)) (begin (set! _identifier->symbol_2 (lambda (_id_3) (m-strip _id_3))) (_identifier->symbol_2 _id_1))))) 'identifier->symbol))
(let () ($$trace "expand"))
(let () (begin (set! define-syntax-scope (let ((_flag_3 'letrec)) (lambda _args_4 (if (null? _args_4) _flag_3 (if (not (null? (let ((_x_7_10 _args_4)) (begin (_check! (pair? _x_7_10) 1 _x_7_10) (cdr:pair _x_7_10))))) (apply m-warn "Too many arguments passed to define-syntax-scope" _args_4) (if (let ((_t0_12_13_16 (let ((_x_42_45 _args_4)) (begin (_check! (pair? _x_42_45) 0 _x_42_45) (car:pair _x_42_45)))) (_t1_12_13_16 '(letrec letrec* let*))) (if (eq? _t0_12_13_16 'letrec) _t1_12_13_16 (let ((_t1_12_13_20 (let ((_x_38_41 _t1_12_13_16)) (begin (_check! (pair? _x_38_41) 1 _x_38_41) (cdr:pair _x_38_41))))) (if (eq? _t0_12_13_16 'letrec*) _t1_12_13_20 (let ((_t1_12_13_24 (let ((_x_34_37 _t1_12_13_20)) (begin (_check! (pair? _x_34_37) 1 _x_34_37) (cdr:pair _x_34_37))))) (if (eq? _t0_12_13_16 'let*) _t1_12_13_24 (let ((_t1_12_13_28 (let ((_x_30_33 _t1_12_13_24)) (begin (_check! (pair? _x_30_33) 1 _x_30_33) (cdr:pair _x_30_33))))) #f))))))) (set! _flag_3 (let ((_x_46_49 _args_4)) (begin (_check! (pair? _x_46_49) 0 _x_46_49) (car:pair _x_46_49)))) (m-warn "Unrecognized argument to define-syntax-scope" (let ((_x_51_54 _args_4)) (begin (_check! (pair? _x_51_54) 0 _x_51_54) (car:pair _x_51_54)))))))))) 'define-syntax-scope))
(let () (begin (set! macro-expand (lambda (_def-or-exp_1) (let ((_macro-expand_2 0)) (begin (set! _macro-expand_2 (lambda (_def-or-exp_3) (call-with-current-continuation (lambda (_k_4) (begin (set! m-quit _k_4) (set! renaming-counter 0) (make-call (make-lambda '() '() '() '() '() '() #f (desugar-definitions _def-or-exp_3 global-syntactic-environment make-toplevel-definition)) '())))))) (_macro-expand_2 _def-or-exp_1))))) 'macro-expand))
(let () (begin (set! desugar-definitions (lambda (_exp_1 _env_1 _make-toplevel-definition_1) (let ((_desugar-definitions_2 0)) (begin (set! _desugar-definitions_2 (lambda (_exp_3 _env_3 _make-toplevel-definition_3) (let () (let ((_redefinition_6 (unspecified)) (_desugar-define_6 (unspecified)) (_define-syntax-loop_6 (unspecified)) (_define-loop_6 (unspecified))) (begin (set! _redefinition_6 (lambda (_id_7) (if (symbol? _id_7) (if (not (identifier-denotation? (syntactic-lookup global-syntactic-environment _id_7))) (if (issue-warnings) (m-warn "Redefining " _id_7) (unspecified)) (unspecified)) (m-error "Malformed variable or keyword" _id_7)))) (set! _desugar-define_6 (lambda (_exp_8 _env_8) (if (null? (let ((_x_10_13 _exp_8)) (begin (_check! (pair? _x_10_13) 1 _x_10_13) (cdr:pair _x_10_13)))) (m-error "Malformed definition" _exp_8) (if (null? (let ((_x_16_19 (let ((_x_20_23 _exp_8)) (begin (_check! (pair? _x_20_23) 1 _x_20_23) (cdr:pair _x_20_23))))) (begin (_check! (pair? _x_16_19) 1 _x_16_19) (cdr:pair _x_16_19)))) (let ((_id_26 (let ((_x_33_36 (let ((_x_37_40 _exp_8)) (begin (_check! (pair? _x_37_40) 1 _x_37_40) (cdr:pair _x_37_40))))) (begin (_check! (pair? _x_33_36) 0 _x_33_36) (car:pair _x_33_36))))) (begin (if (let ((_temp_27_30 (null? pass1-block-inlines))) (if _temp_27_30 _temp_27_30 (not (memq _id_26 pass1-block-inlines)))) (begin (_redefinition_6 _id_26) (syntactic-bind-globally! _id_26 (make-identifier-denotation _id_26))) (unspecified)) (_make-toplevel-definition_3 _id_26 (make-undefined)))) (if (pair? (let ((_x_43_46 (let ((_x_47_50 _exp_8)) (begin (_check! (pair? _x_47_50) 1 _x_47_50) (cdr:pair _x_47_50))))) (begin (_check! (pair? _x_43_46) 0 _x_43_46) (car:pair _x_43_46)))) (_desugar-define_6 (let* ((_def_53 (let ((_x_343_346 _exp_8)) (begin (_check! (pair? _x_343_346) 0 _x_343_346) (car:pair _x_343_346)))) (_pattern_56 (let ((_x_335_338 (let ((_x_339_342 _exp_8)) (begin (_check! (pair? _x_339_342) 1 _x_339_342) (cdr:pair _x_339_342))))) (begin (_check! (pair? _x_335_338) 0 _x_335_338) (car:pair _x_335_338)))) (_f_59 (let ((_x_330_333 _pattern_56)) (begin (_check! (pair? _x_330_333) 0 _x_330_333) (car:pair _x_330_333)))) (_args_62 (let ((_x_326_329 _pattern_56)) (begin (_check! (pair? _x_326_329) 1 _x_326_329) (cdr:pair _x_326_329)))) (_body_65 (let ((_x_318_321 (let ((_x_322_325 _exp_8)) (begin (_check! (pair? _x_322_325) 1 _x_322_325) (cdr:pair _x_322_325))))) (begin (_check! (pair? _x_318_321) 1 _x_318_321) (cdr:pair _x_318_321))))) (let () (if (if (symbol? (let ((_x_70_73 (let ((_x_75_78 (let ((_x_79_82 _exp_8)) (begin (_check! (pair? _x_79_82) 1 _x_79_82) (cdr:pair _x_79_82))))) (begin (_check! (pair? _x_75_78) 0 _x_75_78) (car:pair _x_75_78))))) (begin (_check! (pair? _x_70_73) 0 _x_70_73) (car:pair _x_70_73)))) (if (benchmark-mode) (list? (let ((_x_86_89 (let ((_x_90_93 _exp_8)) (begin (_check! (pair? _x_90_93) 1 _x_90_93) (cdr:pair _x_90_93))))) (begin (_check! (pair? _x_86_89) 0 _x_86_89) (car:pair _x_86_89)))) #f) #f) (_cons _def_53 (_cons _f_59 (_cons (_cons lambda0 (_cons _args_62 (_cons (_cons (_cons lambda0 (_cons (_cons _f_59 '()) (_cons (_cons set!0 (_cons _f_59 (_cons (_cons lambda0 (_cons _args_62 _body_65)) '()))) (_cons _pattern_56 '())))) '(0)) '()))) '()))) (_cons _def_53 (_cons _f_59 (_cons (_cons lambda0 (_cons _args_62 _body_65)) '())))))) _env_8) (if (> (length _exp_8) 3) (m-error "Malformed definition" _exp_8) (let ((_id_351 (let ((_x_371_374 (let ((_x_375_378 _exp_8)) (begin (_check! (pair? _x_375_378) 1 _x_375_378) (cdr:pair _x_375_378))))) (begin (_check! (pair? _x_371_374) 0 _x_371_374) (car:pair _x_371_374))))) (begin (if (let ((_temp_352_355 (null? pass1-block-inlines))) (if _temp_352_355 _temp_352_355 (not (memq _id_351 pass1-block-inlines)))) (begin (_redefinition_6 _id_351) (syntactic-bind-globally! _id_351 (make-identifier-denotation _id_351))) (unspecified)) (_make-toplevel-definition_3 _id_351 (m-expand (let ((_x_358_361 (let ((_x_362_365 (let ((_x_366_369 _exp_8)) (begin (_check! (pair? _x_366_369) 1 _x_366_369) (cdr:pair _x_366_369))))) (begin (_check! (pair? _x_362_365) 1 _x_362_365) (cdr:pair _x_362_365))))) (begin (_check! (pair? _x_358_361) 0 _x_358_361) (car:pair _x_358_361))) _env_8)))))))))) (set! _define-syntax-loop_6 (lambda (_exp_379 _rest_379 _env_379) (if (if (pair? _exp_379) (if (symbol? (let ((_x_383_386 _exp_379)) (begin (_check! (pair? _x_383_386) 0 _x_383_386) (car:pair _x_383_386)))) (if (eq? (syntactic-lookup _env_379 (let ((_x_388_391 _exp_379)) (begin (_check! (pair? _x_388_391) 0 _x_388_391) (car:pair _x_388_391)))) denotation-of-begin) (pair? (let ((_x_393_396 _exp_379)) (begin (_check! (pair? _x_393_396) 1 _x_393_396) (cdr:pair _x_393_396)))) #f) #f) #f) (_define-syntax-loop_6 (let ((_x_398_401 (let ((_x_402_405 _exp_379)) (begin (_check! (pair? _x_402_405) 1 _x_402_405) (cdr:pair _x_402_405))))) (begin (_check! (pair? _x_398_401) 0 _x_398_401) (car:pair _x_398_401))) (append (let ((_x_407_410 (let ((_x_411_414 _exp_379)) (begin (_check! (pair? _x_411_414) 1 _x_411_414) (cdr:pair _x_411_414))))) (begin (_check! (pair? _x_407_410) 1 _x_407_410) (cdr:pair _x_407_410))) _rest_379) _env_379) (if (if (pair? _exp_379) (if (symbol? (let ((_x_418_421 _exp_379)) (begin (_check! (pair? _x_418_421) 0 _x_418_421) (car:pair _x_418_421)))) (eq? (syntactic-lookup _env_379 (let ((_x_423_426 _exp_379)) (begin (_check! (pair? _x_423_426) 0 _x_423_426) (car:pair _x_423_426)))) denotation-of-define-syntax) #f) #f) (begin (if (pair? (let ((_x_427_430 _exp_379)) (begin (_check! (pair? _x_427_430) 1 _x_427_430) (cdr:pair _x_427_430)))) (_redefinition_6 (let ((_x_432_435 (let ((_x_436_439 _exp_379)) (begin (_check! (pair? _x_436_439) 1 _x_436_439) (cdr:pair _x_436_439))))) (begin (_check! (pair? _x_432_435) 0 _x_432_435) (car:pair _x_432_435)))) (unspecified)) (if (null? _rest_379) (m-define-syntax _exp_379 _env_379) (begin (m-define-syntax _exp_379 _env_379) (_define-syntax-loop_6 (let ((_x_440_443 _rest_379)) (begin (_check! (pair? _x_440_443) 0 _x_440_443) (car:pair _x_440_443))) (let ((_x_444_447 _rest_379)) (begin (_check! (pair? _x_444_447) 1 _x_444_447) (cdr:pair _x_444_447))) _env_379)))) (if (if (pair? _exp_379) (if (symbol? (let ((_x_451_454 _exp_379)) (begin (_check! (pair? _x_451_454) 0 _x_451_454) (car:pair _x_451_454)))) (eq? (syntactic-lookup _env_379 (let ((_x_456_459 _exp_379)) (begin (_check! (pair? _x_456_459) 0 _x_456_459) (car:pair _x_456_459)))) denotation-of-define-inline) #f) #f) (begin (if (pair? (let ((_x_460_463 _exp_379)) (begin (_check! (pair? _x_460_463) 1 _x_460_463) (cdr:pair _x_460_463)))) (_redefinition_6 (let ((_x_465_468 (let ((_x_469_472 _exp_379)) (begin (_check! (pair? _x_469_472) 1 _x_469_472) (cdr:pair _x_469_472))))) (begin (_check! (pair? _x_465_468) 0 _x_465_468) (car:pair _x_465_468)))) (unspecified)) (if (null? _rest_379) (m-define-inline _exp_379 _env_379) (begin (m-define-inline _exp_379 _env_379) (_define-syntax-loop_6 (let ((_x_473_476 _rest_379)) (begin (_check! (pair? _x_473_476) 0 _x_473_476) (car:pair _x_473_476))) (let ((_x_477_480 _rest_379)) (begin (_check! (pair? _x_477_480) 1 _x_477_480) (cdr:pair _x_477_480))) _env_379)))) (if (if (pair? _exp_379) (if (symbol? (let ((_x_484_487 _exp_379)) (begin (_check! (pair? _x_484_487) 0 _x_484_487) (car:pair _x_484_487)))) (macro-denotation? (syntactic-lookup _env_379 (let ((_x_489_492 _exp_379)) (begin (_check! (pair? _x_489_492) 0 _x_489_492) (car:pair _x_489_492))))) #f) #f) (m-transcribe _exp_379 _env_379 (lambda (_exp_493 _env_493) (_define-syntax-loop_6 _exp_493 _rest_379 _env_493))) (if (if (pair? _exp_379) (if (symbol? (let ((_x_497_500 _exp_379)) (begin (_check! (pair? _x_497_500) 0 _x_497_500) (car:pair _x_497_500)))) (eq? (syntactic-lookup _env_379 (let ((_x_502_505 _exp_379)) (begin (_check! (pair? _x_502_505) 0 _x_502_505) (car:pair _x_502_505)))) denotation-of-define) #f) #f) (_define-loop_6 _exp_379 _rest_379 '() _env_379) (if (null? _rest_379) (m-expand _exp_379 _env_379) (make-begin (let () (let ((_loop_513_516_519 (unspecified))) (begin (set! _loop_513_516_519 (lambda (_y1_508_509_520 _results_508_512_520) (if (null? _y1_508_509_520) (reverse _results_508_512_520) (begin #t (_loop_513_516_519 (let ((_x_524_527 _y1_508_509_520)) (begin (_check! (pair? _x_524_527) 1 _x_524_527) (cdr:pair _x_524_527))) (cons (let ((_exp_528 (let ((_x_529_532 _y1_508_509_520)) (begin (_check! (pair? _x_529_532) 0 _x_529_532) (car:pair _x_529_532))))) (m-expand _exp_528 _env_379)) _results_508_512_520)))))) (_loop_513_516_519 (cons _exp_379 _rest_379) '()))))))))))))) (set! _define-loop_6 (lambda (_exp_533 _rest_533 _first_533 _env_533) (if (if (pair? _exp_533) (if (symbol? (let ((_x_537_540 _exp_533)) (begin (_check! (pair? _x_537_540) 0 _x_537_540) (car:pair _x_537_540)))) (if (eq? (syntactic-lookup _env_533 (let ((_x_542_545 _exp_533)) (begin (_check! (pair? _x_542_545) 0 _x_542_545) (car:pair _x_542_545)))) denotation-of-begin) (pair? (let ((_x_547_550 _exp_533)) (begin (_check! (pair? _x_547_550) 1 _x_547_550) (cdr:pair _x_547_550)))) #f) #f) #f) (_define-loop_6 (let ((_x_552_555 (let ((_x_556_559 _exp_533)) (begin (_check! (pair? _x_556_559) 1 _x_556_559) (cdr:pair _x_556_559))))) (begin (_check! (pair? _x_552_555) 0 _x_552_555) (car:pair _x_552_555))) (append (let ((_x_561_564 (let ((_x_565_568 _exp_533)) (begin (_check! (pair? _x_565_568) 1 _x_565_568) (cdr:pair _x_565_568))))) (begin (_check! (pair? _x_561_564) 1 _x_561_564) (cdr:pair _x_561_564))) _rest_533) _first_533 _env_533) (if (if (pair? _exp_533) (if (symbol? (let ((_x_572_575 _exp_533)) (begin (_check! (pair? _x_572_575) 0 _x_572_575) (car:pair _x_572_575)))) (eq? (syntactic-lookup _env_533 (let ((_x_577_580 _exp_533)) (begin (_check! (pair? _x_577_580) 0 _x_577_580) (car:pair _x_577_580)))) denotation-of-define) #f) #f) (let ((_exp_583 (_desugar-define_6 _exp_533 _env_533))) (if (if (null? _first_533) (null? _rest_533) #f) _exp_583 (if (null? _rest_533) (make-begin (reverse (cons _exp_583 _first_533))) (_define-loop_6 (let ((_x_589_592 _rest_533)) (begin (_check! (pair? _x_589_592) 0 _x_589_592) (car:pair _x_589_592))) (let ((_x_593_596 _rest_533)) (begin (_check! (pair? _x_593_596) 1 _x_593_596) (cdr:pair _x_593_596))) (cons _exp_583 _first_533) _env_533)))) (if (if (pair? _exp_533) (if (symbol? (let ((_x_600_603 _exp_533)) (begin (_check! (pair? _x_600_603) 0 _x_600_603) (car:pair _x_600_603)))) (if (let ((_temp_605_608 (eq? (syntactic-lookup _env_533 (let ((_x_614_617 _exp_533)) (begin (_check! (pair? _x_614_617) 0 _x_614_617) (car:pair _x_614_617)))) denotation-of-define-syntax))) (if _temp_605_608 _temp_605_608 (eq? (syntactic-lookup _env_533 (let ((_x_610_613 _exp_533)) (begin (_check! (pair? _x_610_613) 0 _x_610_613) (car:pair _x_610_613)))) denotation-of-define-inline))) (null? _first_533) #f) #f) #f) (_define-syntax-loop_6 _exp_533 _rest_533 _env_533) (if (if (pair? _exp_533) (if (symbol? (let ((_x_622_625 _exp_533)) (begin (_check! (pair? _x_622_625) 0 _x_622_625) (car:pair _x_622_625)))) (macro-denotation? (syntactic-lookup _env_533 (let ((_x_627_630 _exp_533)) (begin (_check! (pair? _x_627_630) 0 _x_627_630) (car:pair _x_627_630))))) #f) #f) (m-transcribe _exp_533 _env_533 (lambda (_exp_631 _env_631) (_define-loop_6 _exp_631 _rest_533 _first_533 _env_631))) (if (if (null? _first_533) (null? _rest_533) #f) (m-expand _exp_533 _env_533) (if (null? _rest_533) (make-begin (reverse (cons (m-expand _exp_533 _env_533) _first_533))) (make-begin (append (reverse _first_533) (let () (let ((_loop_642_645_648 (unspecified))) (begin (set! _loop_642_645_648 (lambda (_y1_637_638_649 _results_637_641_649) (if (null? _y1_637_638_649) (reverse _results_637_641_649) (begin #t (_loop_642_645_648 (let ((_x_653_656 _y1_637_638_649)) (begin (_check! (pair? _x_653_656) 1 _x_653_656) (cdr:pair _x_653_656))) (cons (let ((_exp_657 (let ((_x_658_661 _y1_637_638_649)) (begin (_check! (pair? _x_658_661) 0 _x_658_661) (car:pair _x_658_661))))) (m-expand _exp_657 _env_533)) _results_637_641_649)))))) (_loop_642_645_648 (cons _exp_533 _rest_533) '())))))))))))))) (_define-loop_6 _exp_3 '() '() _env_3)))))) (_desugar-definitions_2 _exp_1 _env_1 _make-toplevel-definition_1))))) 'desugar-definitions))
(let () (begin (set! m-expand (lambda (_exp_1 _env_1) (let ((_m-expand_2 0)) (begin (set! _m-expand_2 (lambda (_exp_3 _env_3) (if (not (pair? _exp_3)) (m-atom _exp_3 _env_3) (if (not (symbol? (let ((_x_6_9 _exp_3)) (begin (_check! (pair? _x_6_9) 0 _x_6_9) (car:pair _x_6_9))))) (m-application _exp_3 _env_3) (let* ((_keyword_13 (syntactic-lookup _env_3 (let ((_x_41_44 _exp_3)) (begin (_check! (pair? _x_41_44) 0 _x_41_44) (car:pair _x_41_44))))) (_temp_14_17 (denotation-class _keyword_13))) (if (memv _temp_14_17 '(special)) (if (eq? _keyword_13 denotation-of-quote) (m-quote _exp_3) (if (eq? _keyword_13 denotation-of-lambda) (m-lambda _exp_3 _env_3) (if (eq? _keyword_13 denotation-of-if) (m-if _exp_3 _env_3) (if (eq? _keyword_13 denotation-of-set!) (m-set _exp_3 _env_3) (if (eq? _keyword_13 denotation-of-begin) (m-begin _exp_3 _env_3) (if (eq? _keyword_13 denotation-of-let-syntax) (m-let-syntax _exp_3 _env_3) (if (eq? _keyword_13 denotation-of-letrec-syntax) (m-letrec-syntax _exp_3 _env_3) (if (let ((_temp_27_30 (eq? _keyword_13 denotation-of-define))) (if _temp_27_30 _temp_27_30 (let ((_temp_31_34 (eq? _keyword_13 denotation-of-define-syntax))) (if _temp_31_34 _temp_31_34 (eq? _keyword_13 denotation-of-define-inline))))) (m-error "Definition out of context" _exp_3) (m-bug "Bug detected in m-expand" _exp_3 _env_3))))))))) (if (memv _temp_14_17 '(macro)) (m-macro _exp_3 _env_3) (if (memv _temp_14_17 '(inline)) (m-inline _exp_3 _env_3) (if (memv _temp_14_17 '(identifier)) (m-application _exp_3 _env_3) (m-bug "Bug detected in m-expand" _exp_3 _env_3)))))))))) (_m-expand_2 _exp_1 _env_1))))) 'm-expand))
(let () (begin (set! m-atom (lambda (_exp_1 _env_1) (let ((_m-atom_2 0)) (begin (set! _m-atom_2 (lambda (_exp_3 _env_3) (if (not (symbol? _exp_3)) (begin (if (if (not (boolean? _exp_3)) (if (not (number? _exp_3)) (if (not (char? _exp_3)) (if (not (string? _exp_3)) (if (not (procedure? _exp_3)) (not (eq? _exp_3 (unspecified))) #f) #f) #f) #f) #f) (m-warn "Malformed constant -- should be quoted" _exp_3) (unspecified)) (make-constant _exp_3)) (let* ((_denotation_14 (syntactic-lookup _env_3 _exp_3)) (_temp_15_18 (denotation-class _denotation_14))) (if (memv _temp_15_18 '(special macro)) (begin (m-warn "Syntactic keyword used as a variable" _exp_3) (make-constant #t)) (if (memv _temp_15_18 '(inline)) (make-variable (inline-name _denotation_14)) (if (memv _temp_15_18 '(identifier)) (let ((_var_24 (make-variable (identifier-name _denotation_14))) (_r-entry_24 (identifier-r-entry _denotation_14))) (begin (r-entry_references-set! _r-entry_24 (cons _var_24 (r-entry_references _r-entry_24))) _var_24)) (m-bug "Bug detected by m-atom" _exp_3 _env_3)))))))) (_m-atom_2 _exp_1 _env_1))))) 'm-atom))
(let () (begin (set! m-quote (lambda (_exp_1) (let ((_m-quote_2 0)) (begin (set! _m-quote_2 (lambda (_exp_3) (if (if (pair? (let ((_x_5_8 _exp_3)) (begin (_check! (pair? _x_5_8) 1 _x_5_8) (cdr:pair _x_5_8)))) (null? (let ((_x_11_14 (let ((_x_15_18 _exp_3)) (begin (_check! (pair? _x_15_18) 1 _x_15_18) (cdr:pair _x_15_18))))) (begin (_check! (pair? _x_11_14) 1 _x_11_14) (cdr:pair _x_11_14)))) #f) (make-constant (m-strip (let ((_x_20_23 (let ((_x_24_27 _exp_3)) (begin (_check! (pair? _x_24_27) 1 _x_24_27) (cdr:pair _x_24_27))))) (begin (_check! (pair? _x_20_23) 0 _x_20_23) (car:pair _x_20_23))))) (m-error "Malformed quoted constant" _exp_3)))) (_m-quote_2 _exp_1))))) 'm-quote))
(let () (begin (set! m-lambda (lambda (_exp_1 _env_1) (let ((_m-lambda_2 0)) (begin (set! _m-lambda_2 (lambda (_exp_3 _env_3) (if (> (safe-length _exp_3) 2) (let* ((_formals_6 (let ((_x_242_245 (let ((_x_246_249 _exp_3)) (begin (_check! (pair? _x_246_249) 1 _x_246_249) (cdr:pair _x_246_249))))) (begin (_check! (pair? _x_242_245) 0 _x_242_245) (car:pair _x_242_245)))) (_alist_9 (rename-vars _formals_6)) (_env_12 (syntactic-rename _env_3 _alist_9)) (_body_15 (let ((_x_233_236 (let ((_x_237_240 _exp_3)) (begin (_check! (pair? _x_237_240) 1 _x_237_240) (cdr:pair _x_237_240))))) (begin (_check! (pair? _x_233_236) 1 _x_233_236) (cdr:pair _x_233_236))))) (let () (begin (let () (let ((_loop_20_22_25 (unspecified))) (begin (set! _loop_20_22_25 (lambda (_alist_26) (if (null? _alist_26) (if #f #f (unspecified)) (begin (begin #t (if (assq (let ((_x_30_33 (let ((_x_34_37 _alist_26)) (begin (_check! (pair? _x_34_37) 0 _x_34_37) (car:pair _x_34_37))))) (begin (_check! (pair? _x_30_33) 0 _x_30_33) (car:pair _x_30_33))) (let ((_x_38_41 _alist_26)) (begin (_check! (pair? _x_38_41) 1 _x_38_41) (cdr:pair _x_38_41)))) (m-error "Malformed parameter list" _formals_6) (unspecified))) (_loop_20_22_25 (let ((_x_42_45 _alist_26)) (begin (_check! (pair? _x_42_45) 1 _x_42_45) (cdr:pair _x_42_45)))))))) (_loop_20_22_25 _alist_9)))) (if (if (not (list? _formals_6)) (> (length _alist_9) _maxargs-with-rest-arg_) #f) (let ((_temp_50 (let ((_x_195_198 (rename-vars '(temp)))) (begin (_check! (pair? _x_195_198) 0 _x_195_198) (car:pair _x_195_198))))) (_m-lambda_2 (_cons lambda0 (_cons _temp_50 (_cons (_cons (_cons lambda0 (_cons (let () (let ((_loop_125_128_131 (unspecified))) (begin (set! _loop_125_128_131 (lambda (_y1_120_121_132 _results_120_124_132) (if (null? _y1_120_121_132) (reverse _results_120_124_132) (begin #t (_loop_125_128_131 (let ((_x_136_139 _y1_120_121_132)) (begin (_check! (pair? _x_136_139) 1 _x_136_139) (cdr:pair _x_136_139))) (cons (let ((_x_140_143 (let ((_x_144_147 _y1_120_121_132)) (begin (_check! (pair? _x_144_147) 0 _x_144_147) (car:pair _x_144_147))))) (begin (_check! (pair? _x_140_143) 0 _x_140_143) (car:pair _x_140_143))) _results_120_124_132)))))) (_loop_125_128_131 _alist_9 '())))) (let ((_x_149_152 (let ((_x_153_156 _exp_3)) (begin (_check! (pair? _x_153_156) 1 _x_153_156) (cdr:pair _x_153_156))))) (begin (_check! (pair? _x_149_152) 1 _x_149_152) (cdr:pair _x_149_152))))) (let () (let ((_loop_157_161_164 (unspecified))) (begin (set! _loop_157_161_164 (lambda (_actuals_165 _path_165 _formals_165) (if (symbol? _formals_165) (append (reverse _actuals_165) (cons _path_165 '())) (begin #t (_loop_157_161_164 (cons (let* ((_t1_169_172 name:car) (_t2_169_175 (cons _path_165 '()))) (let () (cons _t1_169_172 _t2_169_175))) _actuals_165) (let* ((_t1_180_183 name:cdr) (_t2_180_186 (cons _path_165 '()))) (let () (cons _t1_180_183 _t2_180_186))) (let ((_x_191_194 _formals_165)) (begin (_check! (pair? _x_191_194) 1 _x_191_194) (cdr:pair _x_191_194)))))))) (_loop_157_161_164 '() _temp_50 _formals_6))))) '()))) _env_12)) (make-lambda (rename-formals _formals_6 _alist_9) '() (let () (let ((_loop_204_207_210 (unspecified))) (begin (set! _loop_204_207_210 (lambda (_y1_199_200_211 _results_199_203_211) (if (null? _y1_199_200_211) (reverse _results_199_203_211) (begin #t (_loop_204_207_210 (let ((_x_215_218 _y1_199_200_211)) (begin (_check! (pair? _x_215_218) 1 _x_215_218) (cdr:pair _x_215_218))) (cons (let* ((_entry_219 (let ((_x_228_231 _y1_199_200_211)) (begin (_check! (pair? _x_228_231) 0 _x_228_231) (car:pair _x_228_231)))) (_x_220_223 (syntactic-lookup _env_12 (let ((_x_224_227 _entry_219)) (begin (_check! (pair? _x_224_227) 1 _x_224_227) (cdr:pair _x_224_227)))))) (begin (_check! (pair? _x_220_223) 1 _x_220_223) (cdr:pair _x_220_223))) _results_199_203_211)))))) (_loop_204_207_210 _alist_9 '())))) '() '() '() (make-doc #f (if (list? _formals_6) (length _alist_9) (exact->inexact (- (length _alist_9) 1))) (if (include-variable-names) _formals_6 #f) (if (include-source-code) _exp_3 #f) source-file-name source-file-position) (m-body _body_15 _env_12)))))) (m-error "Malformed lambda expression" _exp_3)))) (_m-lambda_2 _exp_1 _env_1))))) 'm-lambda))
(let () (begin (set! m-body (lambda (_body_1 _env_1) (let ((_m-body_2 0)) (begin (set! _m-body_2 (lambda (_body_3 _env_3) (let ((_loop_4 (unspecified))) (begin (set! _loop_4 (lambda (_body_5 _env_5 _defs_5) (begin (if (null? _body_5) (m-error "Empty body") (unspecified)) (let ((_exp_8 (let ((_x_50_53 _body_5)) (begin (_check! (pair? _x_50_53) 0 _x_50_53) (car:pair _x_50_53))))) (if (if (pair? _exp_8) (symbol? (let ((_x_11_14 _exp_8)) (begin (_check! (pair? _x_11_14) 0 _x_11_14) (car:pair _x_11_14)))) #f) (let* ((_denotation_17 (syntactic-lookup _env_5 (let ((_x_46_49 _exp_8)) (begin (_check! (pair? _x_46_49) 0 _x_46_49) (car:pair _x_46_49))))) (_temp_18_21 (denotation-class _denotation_17))) (if (memv _temp_18_21 '(special)) (if (eq? _denotation_17 denotation-of-begin) (_loop_4 (append (let ((_x_24_27 _exp_8)) (begin (_check! (pair? _x_24_27) 1 _x_24_27) (cdr:pair _x_24_27))) (let ((_x_28_31 _body_5)) (begin (_check! (pair? _x_28_31) 1 _x_28_31) (cdr:pair _x_28_31)))) _env_5 _defs_5) (if (eq? _denotation_17 denotation-of-define) (_loop_4 (let ((_x_33_36 _body_5)) (begin (_check! (pair? _x_33_36) 1 _x_33_36) (cdr:pair _x_33_36))) _env_5 (cons _exp_8 _defs_5)) (finalize-body _body_5 _env_5 _defs_5))) (if (memv _temp_18_21 '(macro)) (m-transcribe _exp_8 _env_5 (lambda (_exp_39 _env_39) (_loop_4 (cons _exp_39 (let ((_x_40_43 _body_5)) (begin (_check! (pair? _x_40_43) 1 _x_40_43) (cdr:pair _x_40_43)))) _env_39 _defs_5))) (if (memv _temp_18_21 '(inline identifier)) (finalize-body _body_5 _env_5 _defs_5) (m-bug "Bug detected in m-body" _body_5 _env_5))))) (finalize-body _body_5 _env_5 _defs_5)))))) (_loop_4 _body_3 _env_3 '()))))) (_m-body_2 _body_1 _env_1))))) 'm-body))
(let () (begin (set! finalize-body (lambda (_body_1 _env_1 _defs_1) (let ((_finalize-body_2 0)) (begin (set! _finalize-body_2 (lambda (_body_3 _env_3 _defs_3) (if (null? _defs_3) (let ((_body_6 (let () (let ((_loop_20_23_26 (unspecified))) (begin (set! _loop_20_23_26 (lambda (_y1_15_16_27 _results_15_19_27) (if (null? _y1_15_16_27) (reverse _results_15_19_27) (begin #t (_loop_20_23_26 (let ((_x_31_34 _y1_15_16_27)) (begin (_check! (pair? _x_31_34) 1 _x_31_34) (cdr:pair _x_31_34))) (cons (let ((_exp_35 (let ((_x_36_39 _y1_15_16_27)) (begin (_check! (pair? _x_36_39) 0 _x_36_39) (car:pair _x_36_39))))) (m-expand _exp_35 _env_3)) _results_15_19_27)))))) (_loop_20_23_26 _body_3 '())))))) (if (null? (let ((_x_7_10 _body_6)) (begin (_check! (pair? _x_7_10) 1 _x_7_10) (cdr:pair _x_7_10)))) (let ((_x_11_14 _body_6)) (begin (_check! (pair? _x_11_14) 0 _x_11_14) (car:pair _x_11_14))) (make-begin _body_6))) (let () (let ((_expand-letrec_43 (unspecified)) (_desugar-definition_43 (unspecified)) (_sort-defs_43 (unspecified))) (begin (set! _expand-letrec_43 (lambda (_bindings_44 _body_44) (make-call (m-expand (_cons lambda0 (_cons (let () (let ((_loop_85_88_91 (unspecified))) (begin (set! _loop_85_88_91 (lambda (_y1_80_81_92 _results_80_84_92) (if (null? _y1_80_81_92) (reverse _results_80_84_92) (begin #t (_loop_85_88_91 (let ((_x_96_99 _y1_80_81_92)) (begin (_check! (pair? _x_96_99) 1 _x_96_99) (cdr:pair _x_96_99))) (cons (let ((_x_100_103 (let ((_x_104_107 _y1_80_81_92)) (begin (_check! (pair? _x_104_107) 0 _x_104_107) (car:pair _x_104_107))))) (begin (_check! (pair? _x_100_103) 0 _x_100_103) (car:pair _x_100_103))) _results_80_84_92)))))) (_loop_85_88_91 _bindings_44 '())))) (append (let () (let ((_loop_113_116_119 (unspecified))) (begin (set! _loop_113_116_119 (lambda (_y1_108_109_120 _results_108_112_120) (if (null? _y1_108_109_120) (reverse _results_108_112_120) (begin #t (_loop_113_116_119 (let ((_x_124_127 _y1_108_109_120)) (begin (_check! (pair? _x_124_127) 1 _x_124_127) (cdr:pair _x_124_127))) (cons (let ((_binding_128 (let ((_x_174_177 _y1_108_109_120)) (begin (_check! (pair? _x_174_177) 0 _x_174_177) (car:pair _x_174_177))))) (_cons set!0 (_cons (let ((_x_161_164 _binding_128)) (begin (_check! (pair? _x_161_164) 0 _x_161_164) (car:pair _x_161_164))) (_cons (let ((_x_166_169 (let ((_x_170_173 _binding_128)) (begin (_check! (pair? _x_170_173) 1 _x_170_173) (cdr:pair _x_170_173))))) (begin (_check! (pair? _x_166_169) 0 _x_166_169) (car:pair _x_166_169))) '())))) _results_108_112_120)))))) (_loop_113_116_119 _bindings_44 '())))) _body_44))) _env_3) (let () (let ((_loop_183_186_189 (unspecified))) (begin (set! _loop_183_186_189 (lambda (_y1_178_179_190 _results_178_182_190) (if (null? _y1_178_179_190) (reverse _results_178_182_190) (begin #t (_loop_183_186_189 (let ((_x_194_197 _y1_178_179_190)) (begin (_check! (pair? _x_194_197) 1 _x_194_197) (cdr:pair _x_194_197))) (cons (let ((_binding_198 (let ((_x_199_202 _y1_178_179_190)) (begin (_check! (pair? _x_199_202) 0 _x_199_202) (car:pair _x_199_202))))) (make-unspecified)) _results_178_182_190)))))) (_loop_183_186_189 _bindings_44 '()))))))) (set! _desugar-definition_43 (lambda (_def_203) (if (> (safe-length _def_203) 2) (if (pair? (let ((_x_206_209 (let ((_x_210_213 _def_203)) (begin (_check! (pair? _x_210_213) 1 _x_210_213) (cdr:pair _x_210_213))))) (begin (_check! (pair? _x_206_209) 0 _x_206_209) (car:pair _x_206_209)))) (_desugar-definition_43 (_cons (let ((_x_269_272 _def_203)) (begin (_check! (pair? _x_269_272) 0 _x_269_272) (car:pair _x_269_272))) (_cons (let ((_x_273_276 (let ((_x_278_281 (let ((_x_282_285 _def_203)) (begin (_check! (pair? _x_282_285) 1 _x_282_285) (cdr:pair _x_282_285))))) (begin (_check! (pair? _x_278_281) 0 _x_278_281) (car:pair _x_278_281))))) (begin (_check! (pair? _x_273_276) 0 _x_273_276) (car:pair _x_273_276))) (_cons (_cons lambda0 (_cons (let ((_x_286_289 (let ((_x_291_294 (let ((_x_295_298 _def_203)) (begin (_check! (pair? _x_295_298) 1 _x_295_298) (cdr:pair _x_295_298))))) (begin (_check! (pair? _x_291_294) 0 _x_291_294) (car:pair _x_291_294))))) (begin (_check! (pair? _x_286_289) 1 _x_286_289) (cdr:pair _x_286_289))) (let ((_x_300_303 (let ((_x_304_307 _def_203)) (begin (_check! (pair? _x_304_307) 1 _x_304_307) (cdr:pair _x_304_307))))) (begin (_check! (pair? _x_300_303) 1 _x_300_303) (cdr:pair _x_300_303))))) '())))) (if (if (= (length _def_203) 3) (symbol? (let ((_x_312_315 (let ((_x_316_319 _def_203)) (begin (_check! (pair? _x_316_319) 1 _x_316_319) (cdr:pair _x_316_319))))) (begin (_check! (pair? _x_312_315) 0 _x_312_315) (car:pair _x_312_315)))) #f) (let ((_x_320_323 _def_203)) (begin (_check! (pair? _x_320_323) 1 _x_320_323) (cdr:pair _x_320_323))) (m-error "Malformed definition" _def_203))) (m-error "Malformed definition" _def_203)))) (set! _sort-defs_43 (lambda (_defs_325) (let* ((_augmented_328 (let () (let ((_loop_382_385_388 (unspecified))) (begin (set! _loop_382_385_388 (lambda (_y1_377_378_389 _results_377_381_389) (if (null? _y1_377_378_389) (reverse _results_377_381_389) (begin #t (_loop_382_385_388 (let ((_x_393_396 _y1_377_378_389)) (begin (_check! (pair? _x_393_396) 1 _x_393_396) (cdr:pair _x_393_396))) (cons (let* ((_def_397 (let ((_x_420_423 _y1_377_378_389)) (begin (_check! (pair? _x_420_423) 0 _x_420_423) (car:pair _x_420_423)))) (_rhs_400 (let ((_x_412_415 (let ((_x_416_419 _def_397)) (begin (_check! (pair? _x_416_419) 1 _x_416_419) (cdr:pair _x_416_419))))) (begin (_check! (pair? _x_412_415) 0 _x_412_415) (car:pair _x_412_415))))) (if (not (pair? _rhs_400)) (cons 'trivial _def_397) (let ((_denotation_403 (syntactic-lookup _env_3 (let ((_x_407_410 _rhs_400)) (begin (_check! (pair? _x_407_410) 0 _x_407_410) (car:pair _x_407_410)))))) (if (eq? _denotation_403 denotation-of-lambda) (cons 'procedure _def_397) (if (eq? _denotation_403 denotation-of-quote) (cons 'trivial _def_397) (cons 'miscellaneous _def_397)))))) _results_377_381_389)))))) (_loop_382_385_388 _defs_325 '()))))) (_sorted_331 (twobit-sort (lambda (_x_363 _y_363) (let ((_temp_364_367 (eq? (let ((_x_373_376 _x_363)) (begin (_check! (pair? _x_373_376) 0 _x_373_376) (car:pair _x_373_376))) 'procedure))) (if _temp_364_367 _temp_364_367 (eq? (let ((_x_369_372 _y_363)) (begin (_check! (pair? _x_369_372) 0 _x_369_372) (car:pair _x_369_372))) 'miscellaneous)))) _augmented_328))) (let () (let () (let ((_loop_340_343_346 (unspecified))) (begin (set! _loop_340_343_346 (lambda (_y1_335_336_347 _results_335_339_347) (if (null? _y1_335_336_347) (reverse _results_335_339_347) (begin #t (_loop_340_343_346 (let ((_x_351_354 _y1_335_336_347)) (begin (_check! (pair? _x_351_354) 1 _x_351_354) (cdr:pair _x_351_354))) (cons (let ((_x_355_358 (let ((_x_359_362 _y1_335_336_347)) (begin (_check! (pair? _x_359_362) 0 _x_359_362) (car:pair _x_359_362))))) (begin (_check! (pair? _x_355_358) 1 _x_355_358) (cdr:pair _x_355_358))) _results_335_339_347)))))) (_loop_340_343_346 _sorted_331 '())))))))) (_expand-letrec_43 (_sort-defs_43 (let () (let ((_loop_429_432_435 (unspecified))) (begin (set! _loop_429_432_435 (lambda (_y1_424_425_436 _results_424_428_436) (if (null? _y1_424_425_436) (reverse _results_424_428_436) (begin #t (_loop_429_432_435 (let ((_x_440_443 _y1_424_425_436)) (begin (_check! (pair? _x_440_443) 1 _x_440_443) (cdr:pair _x_440_443))) (cons (_desugar-definition_43 (let ((_x_444_447 _y1_424_425_436)) (begin (_check! (pair? _x_444_447) 0 _x_444_447) (car:pair _x_444_447)))) _results_424_428_436)))))) (_loop_429_432_435 (reverse _defs_3) '()))))) _body_3))))))) (_finalize-body_2 _body_1 _env_1 _defs_1))))) 'finalize-body))
(let () (begin (set! m-if (lambda (_exp_1 _env_1) (let ((_m-if_2 0)) (begin (set! _m-if_2 (lambda (_exp_3 _env_3) (let ((_n_6 (safe-length _exp_3))) (if (let ((_temp_7_10 (= _n_6 3))) (if _temp_7_10 _temp_7_10 (= _n_6 4))) (make-conditional (m-expand (let ((_x_13_16 (let ((_x_17_20 _exp_3)) (begin (_check! (pair? _x_17_20) 1 _x_17_20) (cdr:pair _x_17_20))))) (begin (_check! (pair? _x_13_16) 0 _x_13_16) (car:pair _x_13_16))) _env_3) (m-expand (let ((_x_22_25 (let ((_x_26_29 (let ((_x_30_33 _exp_3)) (begin (_check! (pair? _x_30_33) 1 _x_30_33) (cdr:pair _x_30_33))))) (begin (_check! (pair? _x_26_29) 1 _x_26_29) (cdr:pair _x_26_29))))) (begin (_check! (pair? _x_22_25) 0 _x_22_25) (car:pair _x_22_25))) _env_3) (if (= _n_6 3) (make-unspecified) (m-expand (let ((_x_35_38 (let ((_x_39_42 (let ((_x_43_46 (let ((_x_47_50 _exp_3)) (begin (_check! (pair? _x_47_50) 1 _x_47_50) (cdr:pair _x_47_50))))) (begin (_check! (pair? _x_43_46) 1 _x_43_46) (cdr:pair _x_43_46))))) (begin (_check! (pair? _x_39_42) 1 _x_39_42) (cdr:pair _x_39_42))))) (begin (_check! (pair? _x_35_38) 0 _x_35_38) (car:pair _x_35_38))) _env_3))) (m-error "Malformed if expression" _exp_3))))) (_m-if_2 _exp_1 _env_1))))) 'm-if))
(let () (begin (set! m-set (lambda (_exp_1 _env_1) (let ((_m-set_2 0)) (begin (set! _m-set_2 (lambda (_exp_3 _env_3) (if (= (safe-length _exp_3) 3) (let ((_lhs_6 (m-expand (let ((_x_28_31 (let ((_x_32_35 _exp_3)) (begin (_check! (pair? _x_32_35) 1 _x_32_35) (cdr:pair _x_32_35))))) (begin (_check! (pair? _x_28_31) 0 _x_28_31) (car:pair _x_28_31))) _env_3)) (_rhs_6 (m-expand (let ((_x_37_40 (let ((_x_41_44 (let ((_x_45_48 _exp_3)) (begin (_check! (pair? _x_45_48) 1 _x_45_48) (cdr:pair _x_45_48))))) (begin (_check! (pair? _x_41_44) 1 _x_41_44) (cdr:pair _x_41_44))))) (begin (_check! (pair? _x_37_40) 0 _x_37_40) (car:pair _x_37_40))) _env_3))) (if (variable? _lhs_6) (let* ((_x_9 (variable_name _lhs_6)) (_assignment_12 (make-assignment _x_9 _rhs_6)) (_denotation_15 (syntactic-lookup _env_3 _x_9))) (let () (begin (if (identifier-denotation? _denotation_15) (let ((_r-entry_21 (identifier-r-entry _denotation_15))) (begin (r-entry_references-set! _r-entry_21 (remq _lhs_6 (r-entry_references _r-entry_21))) (r-entry_assignments-set! _r-entry_21 (cons _assignment_12 (r-entry_assignments _r-entry_21))))) (unspecified)) (if (if (lambda? _rhs_6) (include-procedure-names) #f) (let ((_doc_26 (lambda_doc _rhs_6))) (doc_name-set! _doc_26 _x_9)) (unspecified)) (if pass1-block-compiling? (set! pass1-block-assignments (cons _x_9 pass1-block-assignments)) (unspecified)) _assignment_12))) (m-error "Malformed assignment" _exp_3))) (m-error "Malformed assignment" _exp_3)))) (_m-set_2 _exp_1 _env_1))))) 'm-set))
(let () (begin (set! m-begin (lambda (_exp_1 _env_1) (let ((_m-begin_2 0)) (begin (set! _m-begin_2 (lambda (_exp_3 _env_3) (if (> (safe-length _exp_3) 1) (make-begin (let () (let ((_loop_10_13_16 (unspecified))) (begin (set! _loop_10_13_16 (lambda (_y1_5_6_17 _results_5_9_17) (if (null? _y1_5_6_17) (reverse _results_5_9_17) (begin #t (_loop_10_13_16 (let ((_x_21_24 _y1_5_6_17)) (begin (_check! (pair? _x_21_24) 1 _x_21_24) (cdr:pair _x_21_24))) (cons (let ((_exp_25 (let ((_x_26_29 _y1_5_6_17)) (begin (_check! (pair? _x_26_29) 0 _x_26_29) (car:pair _x_26_29))))) (m-expand _exp_25 _env_3)) _results_5_9_17)))))) (_loop_10_13_16 (let ((_x_30_33 _exp_3)) (begin (_check! (pair? _x_30_33) 1 _x_30_33) (cdr:pair _x_30_33))) '()))))) (if (= (safe-length _exp_3) 1) (begin (m-warn "Non-standard begin expression" _exp_3) (make-unspecified)) (m-error "Malformed begin expression" _exp_3))))) (_m-begin_2 _exp_1 _env_1))))) 'm-begin))
(let () (begin (set! m-application (lambda (_exp_1 _env_1) (let ((_m-application_2 0)) (begin (set! _m-application_2 (lambda (_exp_3 _env_3) (if (> (safe-length _exp_3) 0) (let* ((_proc_6 (m-expand (let ((_x_129_132 _exp_3)) (begin (_check! (pair? _x_129_132) 0 _x_129_132) (car:pair _x_129_132))) _env_3)) (_args_9 (let () (let ((_loop_105_108_111 (unspecified))) (begin (set! _loop_105_108_111 (lambda (_y1_100_101_112 _results_100_104_112) (if (null? _y1_100_101_112) (reverse _results_100_104_112) (begin #t (_loop_105_108_111 (let ((_x_116_119 _y1_100_101_112)) (begin (_check! (pair? _x_116_119) 1 _x_116_119) (cdr:pair _x_116_119))) (cons (let ((_exp_120 (let ((_x_121_124 _y1_100_101_112)) (begin (_check! (pair? _x_121_124) 0 _x_121_124) (car:pair _x_121_124))))) (m-expand _exp_120 _env_3)) _results_100_104_112)))))) (_loop_105_108_111 (let ((_x_125_128 _exp_3)) (begin (_check! (pair? _x_125_128) 1 _x_125_128) (cdr:pair _x_125_128))) '()))))) (_call_12 (make-call _proc_6 _args_9))) (let () (if (variable? _proc_6) (let* ((_procname_18 (variable_name _proc_6)) (_entry_21 (if (not (null? _args_9)) (if (constant? (let ((_x_57_60 _args_9)) (begin (_check! (pair? _x_57_60) 0 _x_57_60) (car:pair _x_57_60)))) (if (integrate-usual-procedures) (if (every1? constant? _args_9) (let ((_entry_66 (constant-folding-entry _procname_18))) (if _entry_66 (let ((_predicates_71 (constant-folding-predicates _entry_66))) (if (= (length _args_9) (length _predicates_71)) (let ((_args_76 _args_9) (_predicates_76 _predicates_71)) (let () (let ((_loop_79 (unspecified))) (begin (set! _loop_79 (lambda (_args_80 _predicates_80) (if (null? _args_80) _entry_66 (if ((let ((_x_83_86 _predicates_80)) (begin (_check! (pair? _x_83_86) 0 _x_83_86) (car:pair _x_83_86))) (constant_value (let ((_x_87_90 _args_80)) (begin (_check! (pair? _x_87_90) 0 _x_87_90) (car:pair _x_87_90))))) (_loop_79 (let ((_x_91_94 _args_80)) (begin (_check! (pair? _x_91_94) 1 _x_91_94) (cdr:pair _x_91_94))) (let ((_x_95_98 _predicates_80)) (begin (_check! (pair? _x_95_98) 1 _x_95_98) (cdr:pair _x_95_98)))) #f)))) (_loop_79 _args_76 _predicates_76))))) #f)) #f)) #f) #f) #f) #f))) (let () (if _entry_21 (make-constant (apply (constant-folding-folder _entry_21) (let () (let ((_loop_30_33_36 (unspecified))) (begin (set! _loop_30_33_36 (lambda (_y1_25_26_37 _results_25_29_37) (if (null? _y1_25_26_37) (reverse _results_25_29_37) (begin #t (_loop_30_33_36 (let ((_x_41_44 _y1_25_26_37)) (begin (_check! (pair? _x_41_44) 1 _x_41_44) (cdr:pair _x_41_44))) (cons (constant_value (let ((_x_45_48 _y1_25_26_37)) (begin (_check! (pair? _x_45_48) 0 _x_45_48) (car:pair _x_45_48)))) _results_25_29_37)))))) (_loop_30_33_36 _args_9 '())))))) (let ((_denotation_51 (syntactic-lookup _env_3 _procname_18))) (begin (if (identifier-denotation? _denotation_51) (let ((_r-entry_54 (identifier-r-entry _denotation_51))) (r-entry_calls-set! _r-entry_54 (cons _call_12 (r-entry_calls _r-entry_54)))) (unspecified)) _call_12))))) _call_12))) (m-error "Malformed application" _exp_3)))) (_m-application_2 _exp_1 _env_1))))) 'm-application))
(let () (begin (set! m-define-inline (lambda (_exp_1 _env_1) (let ((_m-define-inline_2 0)) (begin (set! _m-define-inline_2 (lambda (_exp_3 _env_3) (if (if (= (safe-length _exp_3) 3) (symbol? (let ((_x_8_11 (let ((_x_12_15 _exp_3)) (begin (_check! (pair? _x_12_15) 1 _x_12_15) (cdr:pair _x_12_15))))) (begin (_check! (pair? _x_8_11) 0 _x_8_11) (car:pair _x_8_11)))) #f) (let ((_name_18 (let ((_x_36_39 (let ((_x_40_43 _exp_3)) (begin (_check! (pair? _x_40_43) 1 _x_40_43) (cdr:pair _x_40_43))))) (begin (_check! (pair? _x_36_39) 0 _x_36_39) (car:pair _x_36_39))))) (begin (m-define-syntax1 _name_18 (let ((_x_20_23 (let ((_x_24_27 (let ((_x_28_31 _exp_3)) (begin (_check! (pair? _x_28_31) 1 _x_28_31) (cdr:pair _x_28_31))))) (begin (_check! (pair? _x_24_27) 1 _x_24_27) (cdr:pair _x_24_27))))) (begin (_check! (pair? _x_20_23) 0 _x_20_23) (car:pair _x_20_23))) _env_3 (define-syntax-scope)) (let ((_denotation_34 (syntactic-lookup global-syntactic-environment _name_18))) (syntactic-bind-globally! _name_18 (make-inline-denotation _name_18 (macro-rules _denotation_34) (macro-env _denotation_34)))) (make-constant _name_18))) (m-error "Malformed define-inline" _exp_3)))) (_m-define-inline_2 _exp_1 _env_1))))) 'm-define-inline))
(let () (begin (set! m-define-syntax (lambda (_exp_1 _env_1) (let ((_m-define-syntax_2 0)) (begin (set! _m-define-syntax_2 (lambda (_exp_3 _env_3) (if (if (= (safe-length _exp_3) 3) (symbol? (let ((_x_8_11 (let ((_x_12_15 _exp_3)) (begin (_check! (pair? _x_12_15) 1 _x_12_15) (cdr:pair _x_12_15))))) (begin (_check! (pair? _x_8_11) 0 _x_8_11) (car:pair _x_8_11)))) #f) (m-define-syntax1 (let ((_x_17_20 (let ((_x_21_24 _exp_3)) (begin (_check! (pair? _x_21_24) 1 _x_21_24) (cdr:pair _x_21_24))))) (begin (_check! (pair? _x_17_20) 0 _x_17_20) (car:pair _x_17_20))) (let ((_x_26_29 (let ((_x_30_33 (let ((_x_34_37 _exp_3)) (begin (_check! (pair? _x_34_37) 1 _x_34_37) (cdr:pair _x_34_37))))) (begin (_check! (pair? _x_30_33) 1 _x_30_33) (cdr:pair _x_30_33))))) (begin (_check! (pair? _x_26_29) 0 _x_26_29) (car:pair _x_26_29))) _env_3 (define-syntax-scope)) (if (if (= (safe-length _exp_3) 4) (if (symbol? (let ((_x_42_45 (let ((_x_46_49 _exp_3)) (begin (_check! (pair? _x_46_49) 1 _x_46_49) (cdr:pair _x_46_49))))) (begin (_check! (pair? _x_42_45) 0 _x_42_45) (car:pair _x_42_45)))) (let ((_t0_51_52_55 (let ((_x_82_85 (let ((_x_86_89 (let ((_x_90_93 _exp_3)) (begin (_check! (pair? _x_90_93) 1 _x_90_93) (cdr:pair _x_90_93))))) (begin (_check! (pair? _x_86_89) 1 _x_86_89) (cdr:pair _x_86_89))))) (begin (_check! (pair? _x_82_85) 0 _x_82_85) (car:pair _x_82_85)))) (_t1_51_52_55 '(letrec letrec* let*))) (if (eq? _t0_51_52_55 'letrec) _t1_51_52_55 (let ((_t1_51_52_59 (let ((_x_77_80 _t1_51_52_55)) (begin (_check! (pair? _x_77_80) 1 _x_77_80) (cdr:pair _x_77_80))))) (if (eq? _t0_51_52_55 'letrec*) _t1_51_52_59 (let ((_t1_51_52_63 (let ((_x_73_76 _t1_51_52_59)) (begin (_check! (pair? _x_73_76) 1 _x_73_76) (cdr:pair _x_73_76))))) (if (eq? _t0_51_52_55 'let*) _t1_51_52_63 (let ((_t1_51_52_67 (let ((_x_69_72 _t1_51_52_63)) (begin (_check! (pair? _x_69_72) 1 _x_69_72) (cdr:pair _x_69_72))))) #f))))))) #f) #f) (m-define-syntax1 (let ((_x_95_98 (let ((_x_99_102 _exp_3)) (begin (_check! (pair? _x_99_102) 1 _x_99_102) (cdr:pair _x_99_102))))) (begin (_check! (pair? _x_95_98) 0 _x_95_98) (car:pair _x_95_98))) (let ((_x_104_107 (let ((_x_108_111 (let ((_x_112_115 (let ((_x_116_119 _exp_3)) (begin (_check! (pair? _x_116_119) 1 _x_116_119) (cdr:pair _x_116_119))))) (begin (_check! (pair? _x_112_115) 1 _x_112_115) (cdr:pair _x_112_115))))) (begin (_check! (pair? _x_108_111) 1 _x_108_111) (cdr:pair _x_108_111))))) (begin (_check! (pair? _x_104_107) 0 _x_104_107) (car:pair _x_104_107))) _env_3 (let ((_x_121_124 (let ((_x_125_128 (let ((_x_129_132 _exp_3)) (begin (_check! (pair? _x_129_132) 1 _x_129_132) (cdr:pair _x_129_132))))) (begin (_check! (pair? _x_125_128) 1 _x_125_128) (cdr:pair _x_125_128))))) (begin (_check! (pair? _x_121_124) 0 _x_121_124) (car:pair _x_121_124)))) (m-error "Malformed define-syntax" _exp_3))))) (_m-define-syntax_2 _exp_1 _env_1))))) 'm-define-syntax))
(let () (begin (set! m-define-syntax1 (lambda (_keyword_1 _spec_1 _env_1 _scope_1) (let ((_m-define-syntax1_2 0)) (begin (set! _m-define-syntax1_2 (lambda (_keyword_3 _spec_3 _env_3 _scope_3) (begin (if (if (pair? _spec_3) (symbol? (let ((_x_6_9 _spec_3)) (begin (_check! (pair? _x_6_9) 0 _x_6_9) (car:pair _x_6_9)))) #f) (let* ((_transformer-keyword_12 (let ((_x_39_42 _spec_3)) (begin (_check! (pair? _x_39_42) 0 _x_39_42) (car:pair _x_39_42)))) (_denotation_15 (syntactic-lookup _env_3 _transformer-keyword_12))) (let () (if (eq? _denotation_15 denotation-of-syntax-rules) (let ((_temp_20_23 _scope_3)) (if (memv _temp_20_23 '(letrec)) (m-define-syntax-letrec _keyword_3 _spec_3 _env_3) (if (memv _temp_20_23 '(letrec*)) (m-define-syntax-letrec* _keyword_3 _spec_3 _env_3) (if (memv _temp_20_23 '(let*)) (m-define-syntax-let* _keyword_3 _spec_3 _env_3) (m-bug "Weird scope" _scope_3))))) (if (same-denotation? _denotation_15 denotation-of-transformer) (syntactic-bind-globally! _keyword_3 (make-macro-denotation (eval (let ((_x_30_33 (let ((_x_34_37 _spec_3)) (begin (_check! (pair? _x_34_37) 1 _x_34_37) (cdr:pair _x_34_37))))) (begin (_check! (pair? _x_30_33) 0 _x_30_33) (car:pair _x_30_33)))) _env_3)) (m-error "Malformed syntax transformer" _spec_3))))) (m-error "Malformed syntax transformer" _spec_3)) (make-constant _keyword_3)))) (_m-define-syntax1_2 _keyword_1 _spec_1 _env_1 _scope_1))))) 'm-define-syntax1))
(let () (begin (set! m-define-syntax-letrec (lambda (_keyword_1 _spec_1 _env_1) (let ((_m-define-syntax-letrec_2 0)) (begin (set! _m-define-syntax-letrec_2 (lambda (_keyword_3 _spec_3 _env_3) (syntactic-bind-globally! _keyword_3 (m-compile-transformer-spec _spec_3 _env_3)))) (_m-define-syntax-letrec_2 _keyword_1 _spec_1 _env_1))))) 'm-define-syntax-letrec))
(let () (begin (set! m-define-syntax-letrec* (lambda (_keyword_1 _spec_1 _env_1) (let ((_m-define-syntax-letrec*_2 0)) (begin (set! _m-define-syntax-letrec*_2 (lambda (_keyword_3 _spec_3 _env_3) (let* ((_env_6 (syntactic-extend (syntactic-copy _env_3) (cons _keyword_3 '()) '((fake denotation)))) (_transformer_9 (m-compile-transformer-spec _spec_3 _env_6))) (let () (begin (syntactic-assign! _env_6 _keyword_3 _transformer_9) (syntactic-bind-globally! _keyword_3 _transformer_9)))))) (_m-define-syntax-letrec*_2 _keyword_1 _spec_1 _env_1))))) 'm-define-syntax-letrec*))
(let () (begin (set! m-define-syntax-let* (lambda (_keyword_1 _spec_1 _env_1) (let ((_m-define-syntax-let*_2 0)) (begin (set! _m-define-syntax-let*_2 (lambda (_keyword_3 _spec_3 _env_3) (syntactic-bind-globally! _keyword_3 (m-compile-transformer-spec _spec_3 (syntactic-copy _env_3))))) (_m-define-syntax-let*_2 _keyword_1 _spec_1 _env_1))))) 'm-define-syntax-let*))
(let () (begin (set! m-let-syntax (lambda (_exp_1 _env_1) (let ((_m-let-syntax_2 0)) (begin (set! _m-let-syntax_2 (lambda (_exp_3 _env_3) (if (if (> (safe-length _exp_3) 2) (every1? (lambda (_binding_6) (if (pair? _binding_6) (if (symbol? (let ((_x_9_12 _binding_6)) (begin (_check! (pair? _x_9_12) 0 _x_9_12) (car:pair _x_9_12)))) (if (pair? (let ((_x_14_17 _binding_6)) (begin (_check! (pair? _x_14_17) 1 _x_14_17) (cdr:pair _x_14_17)))) (null? (let ((_x_20_23 (let ((_x_24_27 _binding_6)) (begin (_check! (pair? _x_24_27) 1 _x_24_27) (cdr:pair _x_24_27))))) (begin (_check! (pair? _x_20_23) 1 _x_20_23) (cdr:pair _x_20_23)))) #f) #f) #f)) (let ((_x_29_32 (let ((_x_33_36 _exp_3)) (begin (_check! (pair? _x_33_36) 1 _x_33_36) (cdr:pair _x_33_36))))) (begin (_check! (pair? _x_29_32) 0 _x_29_32) (car:pair _x_29_32)))) #f) (m-body (let ((_x_38_41 (let ((_x_42_45 _exp_3)) (begin (_check! (pair? _x_42_45) 1 _x_42_45) (cdr:pair _x_42_45))))) (begin (_check! (pair? _x_38_41) 1 _x_38_41) (cdr:pair _x_38_41))) (syntactic-extend _env_3 (let () (let ((_loop_51_54_57 (unspecified))) (begin (set! _loop_51_54_57 (lambda (_y1_46_47_58 _results_46_50_58) (if (null? _y1_46_47_58) (reverse _results_46_50_58) (begin #t (_loop_51_54_57 (let ((_x_62_65 _y1_46_47_58)) (begin (_check! (pair? _x_62_65) 1 _x_62_65) (cdr:pair _x_62_65))) (cons (let ((_x_66_69 (let ((_x_70_73 _y1_46_47_58)) (begin (_check! (pair? _x_70_73) 0 _x_70_73) (car:pair _x_70_73))))) (begin (_check! (pair? _x_66_69) 0 _x_66_69) (car:pair _x_66_69))) _results_46_50_58)))))) (_loop_51_54_57 (let ((_x_75_78 (let ((_x_79_82 _exp_3)) (begin (_check! (pair? _x_79_82) 1 _x_79_82) (cdr:pair _x_79_82))))) (begin (_check! (pair? _x_75_78) 0 _x_75_78) (car:pair _x_75_78))) '())))) (let () (let ((_loop_88_91_94 (unspecified))) (begin (set! _loop_88_91_94 (lambda (_y1_83_84_95 _results_83_87_95) (if (null? _y1_83_84_95) (reverse _results_83_87_95) (begin #t (_loop_88_91_94 (let ((_x_99_102 _y1_83_84_95)) (begin (_check! (pair? _x_99_102) 1 _x_99_102) (cdr:pair _x_99_102))) (cons (let ((_spec_103 (let ((_x_104_107 _y1_83_84_95)) (begin (_check! (pair? _x_104_107) 0 _x_104_107) (car:pair _x_104_107))))) (m-compile-transformer-spec _spec_103 _env_3)) _results_83_87_95)))))) (_loop_88_91_94 (let () (let ((_loop_113_116_119 (unspecified))) (begin (set! _loop_113_116_119 (lambda (_y1_108_109_120 _results_108_112_120) (if (null? _y1_108_109_120) (reverse _results_108_112_120) (begin #t (_loop_113_116_119 (let ((_x_124_127 _y1_108_109_120)) (begin (_check! (pair? _x_124_127) 1 _x_124_127) (cdr:pair _x_124_127))) (cons (let ((_x_129_132 (let ((_x_133_136 (let ((_x_137_140 _y1_108_109_120)) (begin (_check! (pair? _x_137_140) 0 _x_137_140) (car:pair _x_137_140))))) (begin (_check! (pair? _x_133_136) 1 _x_133_136) (cdr:pair _x_133_136))))) (begin (_check! (pair? _x_129_132) 0 _x_129_132) (car:pair _x_129_132))) _results_108_112_120)))))) (_loop_113_116_119 (let ((_x_142_145 (let ((_x_146_149 _exp_3)) (begin (_check! (pair? _x_146_149) 1 _x_146_149) (cdr:pair _x_146_149))))) (begin (_check! (pair? _x_142_145) 0 _x_142_145) (car:pair _x_142_145))) '())))) '())))))) (m-error "Malformed let-syntax" _exp_3)))) (_m-let-syntax_2 _exp_1 _env_1))))) 'm-let-syntax))
(let () (begin (set! m-letrec-syntax (lambda (_exp_1 _env_1) (let ((_m-letrec-syntax_2 0)) (begin (set! _m-letrec-syntax_2 (lambda (_exp_3 _env_3) (if (if (> (safe-length _exp_3) 2) (every1? (lambda (_binding_6) (if (pair? _binding_6) (if (symbol? (let ((_x_9_12 _binding_6)) (begin (_check! (pair? _x_9_12) 0 _x_9_12) (car:pair _x_9_12)))) (if (pair? (let ((_x_14_17 _binding_6)) (begin (_check! (pair? _x_14_17) 1 _x_14_17) (cdr:pair _x_14_17)))) (null? (let ((_x_20_23 (let ((_x_24_27 _binding_6)) (begin (_check! (pair? _x_24_27) 1 _x_24_27) (cdr:pair _x_24_27))))) (begin (_check! (pair? _x_20_23) 1 _x_20_23) (cdr:pair _x_20_23)))) #f) #f) #f)) (let ((_x_29_32 (let ((_x_33_36 _exp_3)) (begin (_check! (pair? _x_33_36) 1 _x_33_36) (cdr:pair _x_33_36))))) (begin (_check! (pair? _x_29_32) 0 _x_29_32) (car:pair _x_29_32)))) #f) (let ((_env_39 (syntactic-extend _env_3 (let () (let ((_loop_171_174_177 (unspecified))) (begin (set! _loop_171_174_177 (lambda (_y1_166_167_178 _results_166_170_178) (if (null? _y1_166_167_178) (reverse _results_166_170_178) (begin #t (_loop_171_174_177 (let ((_x_182_185 _y1_166_167_178)) (begin (_check! (pair? _x_182_185) 1 _x_182_185) (cdr:pair _x_182_185))) (cons (let ((_x_186_189 (let ((_x_190_193 _y1_166_167_178)) (begin (_check! (pair? _x_190_193) 0 _x_190_193) (car:pair _x_190_193))))) (begin (_check! (pair? _x_186_189) 0 _x_186_189) (car:pair _x_186_189))) _results_166_170_178)))))) (_loop_171_174_177 (let ((_x_195_198 (let ((_x_199_202 _exp_3)) (begin (_check! (pair? _x_199_202) 1 _x_199_202) (cdr:pair _x_199_202))))) (begin (_check! (pair? _x_195_198) 0 _x_195_198) (car:pair _x_195_198))) '())))) (let () (let ((_loop_208_211_214 (unspecified))) (begin (set! _loop_208_211_214 (lambda (_y1_203_204_215 _results_203_207_215) (if (null? _y1_203_204_215) (reverse _results_203_207_215) (begin #t (_loop_208_211_214 (let ((_x_219_222 _y1_203_204_215)) (begin (_check! (pair? _x_219_222) 1 _x_219_222) (cdr:pair _x_219_222))) (cons (let ((_id_223 (let ((_x_224_227 _y1_203_204_215)) (begin (_check! (pair? _x_224_227) 0 _x_224_227) (car:pair _x_224_227))))) '(fake denotation)) _results_203_207_215)))))) (_loop_208_211_214 (let ((_x_229_232 (let ((_x_233_236 _exp_3)) (begin (_check! (pair? _x_233_236) 1 _x_233_236) (cdr:pair _x_233_236))))) (begin (_check! (pair? _x_229_232) 0 _x_229_232) (car:pair _x_229_232))) '()))))))) (begin (let () (let ((_loop_46_49_52 (unspecified))) (begin (set! _loop_46_49_52 (lambda (_y1_40_42_53 _y1_40_41_53) (if (let ((_temp_55_58 (null? _y1_40_42_53))) (if _temp_55_58 _temp_55_58 (null? _y1_40_41_53))) (if #f #f (unspecified)) (begin (begin #t (let ((_id_61 (let ((_x_62_65 _y1_40_42_53)) (begin (_check! (pair? _x_62_65) 0 _x_62_65) (car:pair _x_62_65)))) (_spec_61 (let ((_x_66_69 _y1_40_41_53)) (begin (_check! (pair? _x_66_69) 0 _x_66_69) (car:pair _x_66_69))))) (syntactic-assign! _env_39 _id_61 (m-compile-transformer-spec _spec_61 _env_39)))) (_loop_46_49_52 (let ((_x_70_73 _y1_40_42_53)) (begin (_check! (pair? _x_70_73) 1 _x_70_73) (cdr:pair _x_70_73))) (let ((_x_74_77 _y1_40_41_53)) (begin (_check! (pair? _x_74_77) 1 _x_74_77) (cdr:pair _x_74_77)))))))) (_loop_46_49_52 (let () (let ((_loop_83_86_89 (unspecified))) (begin (set! _loop_83_86_89 (lambda (_y1_78_79_90 _results_78_82_90) (if (null? _y1_78_79_90) (reverse _results_78_82_90) (begin #t (_loop_83_86_89 (let ((_x_94_97 _y1_78_79_90)) (begin (_check! (pair? _x_94_97) 1 _x_94_97) (cdr:pair _x_94_97))) (cons (let ((_x_98_101 (let ((_x_102_105 _y1_78_79_90)) (begin (_check! (pair? _x_102_105) 0 _x_102_105) (car:pair _x_102_105))))) (begin (_check! (pair? _x_98_101) 0 _x_98_101) (car:pair _x_98_101))) _results_78_82_90)))))) (_loop_83_86_89 (let ((_x_107_110 (let ((_x_111_114 _exp_3)) (begin (_check! (pair? _x_111_114) 1 _x_111_114) (cdr:pair _x_111_114))))) (begin (_check! (pair? _x_107_110) 0 _x_107_110) (car:pair _x_107_110))) '())))) (let () (let ((_loop_120_123_126 (unspecified))) (begin (set! _loop_120_123_126 (lambda (_y1_115_116_127 _results_115_119_127) (if (null? _y1_115_116_127) (reverse _results_115_119_127) (begin #t (_loop_120_123_126 (let ((_x_131_134 _y1_115_116_127)) (begin (_check! (pair? _x_131_134) 1 _x_131_134) (cdr:pair _x_131_134))) (cons (let ((_x_136_139 (let ((_x_140_143 (let ((_x_144_147 _y1_115_116_127)) (begin (_check! (pair? _x_144_147) 0 _x_144_147) (car:pair _x_144_147))))) (begin (_check! (pair? _x_140_143) 1 _x_140_143) (cdr:pair _x_140_143))))) (begin (_check! (pair? _x_136_139) 0 _x_136_139) (car:pair _x_136_139))) _results_115_119_127)))))) (_loop_120_123_126 (let ((_x_149_152 (let ((_x_153_156 _exp_3)) (begin (_check! (pair? _x_153_156) 1 _x_153_156) (cdr:pair _x_153_156))))) (begin (_check! (pair? _x_149_152) 0 _x_149_152) (car:pair _x_149_152))) '())))))))) (m-body (let ((_x_158_161 (let ((_x_162_165 _exp_3)) (begin (_check! (pair? _x_162_165) 1 _x_162_165) (cdr:pair _x_162_165))))) (begin (_check! (pair? _x_158_161) 1 _x_158_161) (cdr:pair _x_158_161))) _env_39))) (m-error "Malformed let-syntax" _exp_3)))) (_m-letrec-syntax_2 _exp_1 _env_1))))) 'm-letrec-syntax))
(let () (begin (set! m-macro (lambda (_exp_1 _env_1) (let ((_m-macro_2 0)) (begin (set! _m-macro_2 (lambda (_exp_3 _env_3) (m-transcribe _exp_3 _env_3 (lambda (_exp_4 _env_4) (m-expand _exp_4 _env_4))))) (_m-macro_2 _exp_1 _env_1))))) 'm-macro))
(let () (begin (set! m-inline (lambda (_exp_1 _env_1) (let ((_m-inline_2 0)) (begin (set! _m-inline_2 (lambda (_exp_3 _env_3) (if (integrate-usual-procedures) (m-transcribe-inline _exp_3 _env_3 (lambda (_newexp_4 _env_4) (if (eq? _exp_3 _newexp_4) (m-application _exp_3 _env_4) (m-expand _newexp_4 _env_4)))) (m-application _exp_3 _env_3)))) (_m-inline_2 _exp_1 _env_1))))) 'm-inline))
(let () (begin (set! m-quit (lambda (_v_1) _v_1)) 'm-quit))
(let () ($$trace "usual"))
(let () (define-syntax-scope 'letrec*))
(let () (let () (let ((_loop_6_8_11 (unspecified))) (begin (set! _loop_6_8_11 (lambda (_y1_1_2_12) (if (null? _y1_1_2_12) (if #f #f (unspecified)) (begin (begin #t (let ((_form_16 (let ((_x_17_20 _y1_1_2_12)) (begin (_check! (pair? _x_17_20) 0 _x_17_20) (car:pair _x_17_20))))) (macro-expand _form_16))) (_loop_6_8_11 (let ((_x_21_24 _y1_1_2_12)) (begin (_check! (pair? _x_21_24) 1 _x_21_24) (cdr:pair _x_21_24)))))))) (_loop_6_8_11 '((define-syntax let (syntax-rules () ((let ((?name ?val) ___) ?body ?body1 ___) ((lambda (?name ___) ?body ?body1 ___) ?val ___)))) (define-syntax let* (syntax-rules () ((let* () ?body ?body1 ___) (let () ?body ?body1 ___)) ((let* ((?name1 ?val1) (?name ?val) ___) ?body ?body1 ___) (let ((?name1 ?val1)) (let* ((?name ?val) ___) ?body ?body1 ___))))) (define-syntax letrec (syntax-rules (lambda quote) ((letrec ((?name ?val) ___) ?body ?body2 ___) ((lambda () (define ?name ?val) ___ ?body ?body2 ___))))) (define-syntax let let* (syntax-rules () ((let (?bindings ___) _ ?body) (let (?bindings ___) _ ?body)) ((let ?tag ((?name ?val) ___) ?body ?body1 ___) (let ((?name ?val) ___) (letrec ((?tag (lambda (?name ___) ?body ?body1 ___))) (?tag ?name ___)))))) (define-syntax and (syntax-rules () ((and) #t) ((and ?e) ?e) ((and ?e1 ?e2 ?e3 ___) (if ?e1 (and ?e2 ?e3 ___) #f)))) (define-syntax or (syntax-rules () ((or) #f) ((or ?e) ?e) ((or ?e1 ?e2 ?e3 ___) (let ((temp ?e1)) (if temp temp (or ?e2 ?e3 ___)))))) (define-syntax cond (syntax-rules (else =>) ((cond (else ?result ?result2 ___)) (begin ?result ?result2 ___)) ((cond (?test => ?result)) (let ((temp ?test)) (if temp (?result temp)))) ((cond (?test)) ?test) ((cond (?test ?result ?result2 ___)) (if ?test (begin ?result ?result2 ___))) ((cond (?test => ?result) ?clause ?clause2 ___) (let ((temp ?test)) (if temp (?result temp) (cond ?clause ?clause2 ___)))) ((cond (?test) ?clause ?clause2 ___) (or ?test (cond ?clause ?clause2 ___))) ((cond (?test ?result ?result2 ___) ?clause ?clause2 ___) (if ?test (begin ?result ?result2 ___) (cond ?clause ?clause2 ___))))) (define-syntax do (syntax-rules () ((do (?bindings0 ___) (?test) ?body0 ___) (do (?bindings0 ___) (?test (if #f #f)) ?body0 ___)) ((do (?bindings0 ___) ?clause0 ?body0 ___) (letrec-syntax ((do-aux (___ (syntax-rules () ((do-aux () ((?name ?init ?step) ___) ?clause ?body ___) (letrec ((loop (lambda (?name ___) (cond ?clause (else (begin #t ?body ___) (loop ?step ___)))))) (loop ?init ___))) ((do-aux ((?name ?init ?step) ?todo ___) (?bindings ___) ?clause ?body ___) (do-aux (?todo ___) (?bindings ___ (?name ?init ?step)) ?clause ?body ___)) ((do-aux ((?name ?init) ?todo ___) (?bindings ___) ?clause ?body ___) (do-aux (?todo ___) (?bindings ___ (?name ?init ?name)) ?clause ?body ___)))))) (do-aux (?bindings0 ___) () ?clause0 ?body0 ___))))) (define-syntax delay (syntax-rules () ((delay ?e) (_make-promise (lambda () ?e))))) (define-syntax case (syntax-rules (else) ((case ?e1 (else ?body ?body2 ___)) (begin ?e1 ?body ?body2 ___)) ((case ?e1 (?z ?body ?body2 ___)) (if (memv ?e1 '?z) (begin ?body ?body2 ___))) ((case ?e1 ?clause1 ?clause2 ?clause3 ___) (letrec-syntax ((case-aux (___ (syntax-rules (else) ((case-aux ?temp (else ?body ?body2 ___)) (begin ?body ?body2 ___)) ((case-aux ?temp ((?z ___) ?body ?body2 ___)) (if (memv ?temp '(?z ___)) (begin ?body ?body2 ___))) ((case-aux ?temp ((?z ___) ?body ?body2 ___) ?c1 ?c2 ___) (if (memv ?temp '(?z ___)) (begin ?body ?body2 ___) (case-aux ?temp ?c1 ?c2 ___))) ((case-aux ?temp (?z ?body ___) ?c1 ___) (case-aux ?temp ((?z) ?body ___) ?c1 ___)))))) (let ((temp ?e1)) (case-aux temp ?clause1 ?clause2 ?clause3 ___)))))) (begin (define-syntax _finalize-quasiquote letrec (syntax-rules (quote unquote unquote-splicing) ((_finalize-quasiquote quote ?arg ?return) (_interpret-continuation ?return '?arg)) ((_finalize-quasiquote unquote ?arg ?return) (_interpret-continuation ?return ?arg)) ((_finalize-quasiquote unquote-splicing ?arg ?return) (syntax-error ",@ in illegal context" ?arg)) ((_finalize-quasiquote ?mode ?arg ?return) (_interpret-continuation ?return (?mode _ ?arg))))) (define-syntax _descend-quasiquote letrec (syntax-rules (quasiquote unquote unquote-splicing) ((_descend-quasiquote `?y ?x ?level ?return) (_descend-quasiquote-pair ?x ?x (?level) ?return)) ((_descend-quasiquote ,?y ?x () ?return) (_interpret-continuation ?return unquote ?y)) ((_descend-quasiquote ,?y ?x (?level) ?return) (_descend-quasiquote-pair ?x ?x ?level ?return)) ((_descend-quasiquote ,@?y ?x () ?return) (_interpret-continuation ?return unquote-splicing ?y)) ((_descend-quasiquote ,@?y ?x (?level) ?return) (_descend-quasiquote-pair ?x ?x ?level ?return)) ((_descend-quasiquote (?y _ ?z) ?x ?level ?return) (_descend-quasiquote-pair ?x ?x ?level ?return)) ((_descend-quasiquote #(?y ___) ?x ?level ?return) (_descend-quasiquote-vector ?x ?x ?level ?return)) ((_descend-quasiquote ?y ?x ?level ?return) (_interpret-continuation ?return quote ?x)))) (define-syntax _descend-quasiquote-pair letrec (syntax-rules (quote unquote unquote-splicing) ((_descend-quasiquote-pair (?carx _ ?cdrx) ?x ?level ?return) (_descend-quasiquote ?carx ?carx ?level (1 ?cdrx ?x ?level ?return))))) (define-syntax _descend-quasiquote-vector letrec (syntax-rules (quote) ((_descend-quasiquote-vector #(?y ___) ?x ?level ?return) (_descend-quasiquote (?y ___) (?y ___) ?level (6 ?x ?return))))) (define-syntax _interpret-continuation letrec (syntax-rules (quote unquote unquote-splicing) ((_interpret-continuation (-1) ?e) ?e) ((_interpret-continuation (0) ?mode ?arg) (_finalize-quasiquote ?mode ?arg (-1))) ((_interpret-continuation (1 ?cdrx ?x ?level ?return) ?car-mode ?car-arg) (_descend-quasiquote ?cdrx ?cdrx ?level (2 ?car-mode ?car-arg ?x ?return))) ((_interpret-continuation (2 quote ?car-arg ?x ?return) quote ?cdr-arg) (_interpret-continuation ?return quote ?x)) ((_interpret-continuation (2 unquote-splicing ?car-arg ?x ?return) quote ()) (_interpret-continuation ?return unquote ?car-arg)) ((_interpret-continuation (2 unquote-splicing ?car-arg ?x ?return) ?cdr-mode ?cdr-arg) (_finalize-quasiquote ?cdr-mode ?cdr-arg (3 ?car-arg ?return))) ((_interpret-continuation (2 ?car-mode ?car-arg ?x ?return) ?cdr-mode ?cdr-arg) (_finalize-quasiquote ?car-mode ?car-arg (4 ?cdr-mode ?cdr-arg ?return))) ((_interpret-continuation (3 ?car-arg ?return) ?e) (_interpret-continuation ?return append (?car-arg ?e))) ((_interpret-continuation (4 ?cdr-mode ?cdr-arg ?return) ?e1) (_finalize-quasiquote ?cdr-mode ?cdr-arg (5 ?e1 ?return))) ((_interpret-continuation (5 ?e1 ?return) ?e2) (_interpret-continuation ?return _cons (?e1 ?e2))) ((_interpret-continuation (6 ?x ?return) quote ?arg) (_interpret-continuation ?return quote ?x)) ((_interpret-continuation (6 ?x ?return) ?mode ?arg) (_finalize-quasiquote ?mode ?arg (7 ?return))) ((_interpret-continuation (7 ?return) ?e) (_interpret-continuation ?return _list->vector (?e))))) (define-syntax quasiquote letrec (syntax-rules () (`?x (_descend-quasiquote ?x ?x () (0)))))) (define-syntax let*-syntax (syntax-rules () ((let*-syntax () ?body) (let-syntax () ?body)) ((let*-syntax ((?name1 ?val1) (?name ?val) ___) ?body) (let-syntax ((?name1 ?val1)) (let*-syntax ((?name ?val) ___) ?body)))))))))))
(let () (define-syntax-scope 'letrec))
(let () (begin (set! standard-syntactic-environment (syntactic-copy global-syntactic-environment)) 'standard-syntactic-environment))
(let () (begin (set! make-standard-syntactic-environment (lambda () (let ((_make-standard-syntactic-environment_2 0)) (begin (set! _make-standard-syntactic-environment_2 (lambda () (syntactic-copy standard-syntactic-environment))) (_make-standard-syntactic-environment_2))))) 'make-standard-syntactic-environment))
(let () (begin (set! copy-exp (lambda (_exp_1) (let ((_copy-exp_2 0)) (begin (set! _copy-exp_2 (lambda (_exp_3) (let ((_copy_4 (unspecified)) (_lexical-lookup_4 (unspecified)) (_env-unbind-multiple!_4 (unspecified)) (_env-bind-multiple!_4 (unspecified)) (_env-lookup_4 (unspecified)) (_env-unbind!_4 (unspecified)) (_env-bind!_4 (unspecified)) (_make-env_4 (unspecified)) (_rename-formals_4 (unspecified)) (_rename-vars_4 (unspecified)) (_renaming-counter_4 (unspecified)) (_original-names_4 (unspecified)) (_special-names_4 (unspecified))) (begin (set! _copy_4 (lambda (_exp_5 _env_5 _notepad_5 _r-table_5) (if (constant? _exp_5) _exp_5 (if (lambda? _exp_5) (let* ((_bvl_10 (make-null-terminated (lambda_args _exp_5))) (_newnames_13 (_rename-vars_4 _bvl_10)) (_procnames_16 (let () (let ((_loop_172_175_178 (unspecified))) (begin (set! _loop_172_175_178 (lambda (_y1_167_168_179 _results_167_171_179) (if (null? _y1_167_168_179) (reverse _results_167_171_179) (begin #t (_loop_172_175_178 (let ((_x_183_186 _y1_167_168_179)) (begin (_check! (pair? _x_183_186) 1 _x_183_186) (cdr:pair _x_183_186))) (cons (def_lhs (let ((_x_187_190 _y1_167_168_179)) (begin (_check! (pair? _x_187_190) 0 _x_187_190) (car:pair _x_187_190)))) _results_167_171_179)))))) (_loop_172_175_178 (lambda_defs _exp_5) '()))))) (_newprocnames_19 (_rename-vars_4 _procnames_16)) (_refinfo_22 (let () (let ((_loop_147_150_153 (unspecified))) (begin (set! _loop_147_150_153 (lambda (_y1_142_143_154 _results_142_146_154) (if (null? _y1_142_143_154) (reverse _results_142_146_154) (begin #t (_loop_147_150_153 (let ((_x_158_161 _y1_142_143_154)) (begin (_check! (pair? _x_158_161) 1 _x_158_161) (cdr:pair _x_158_161))) (cons (let ((_var_162 (let ((_x_163_166 _y1_142_143_154)) (begin (_check! (pair? _x_163_166) 0 _x_163_166) (car:pair _x_163_166))))) (make-r-entry _var_162 '() '() '())) _results_142_146_154)))))) (_loop_147_150_153 (append _newnames_13 _newprocnames_19) '()))))) (_newexp_25 (make-lambda (_rename-formals_4 (lambda_args _exp_5) _newnames_13) '() _refinfo_22 '() '() (lambda_decls _exp_5) (lambda_doc _exp_5) (lambda_body _exp_5)))) (let () (begin (_env-bind-multiple!_4 _env_5 _procnames_16 _newprocnames_19) (_env-bind-multiple!_4 _env_5 _bvl_10 _newnames_13) (let () (let ((_loop_34_36_39 (unspecified))) (begin (set! _loop_34_36_39 (lambda (_y1_29_30_40) (if (null? _y1_29_30_40) (if #f #f (unspecified)) (begin (begin #t (let ((_entry_44 (let ((_x_45_48 _y1_29_30_40)) (begin (_check! (pair? _x_45_48) 0 _x_45_48) (car:pair _x_45_48))))) (_env-bind!_4 _r-table_5 (r-entry_name _entry_44) _entry_44))) (_loop_34_36_39 (let ((_x_49_52 _y1_29_30_40)) (begin (_check! (pair? _x_49_52) 1 _x_49_52) (cdr:pair _x_49_52)))))))) (_loop_34_36_39 _refinfo_22)))) (notepad-lambda-add! _notepad_5 _newexp_25) (let ((_newnotepad_55 (make-notepad _notepad_5))) (begin (let () (let ((_loop_62_65_68 (unspecified))) (begin (set! _loop_62_65_68 (lambda (_y1_56_58_69 _y1_56_57_69) (if (let ((_temp_71_74 (null? _y1_56_58_69))) (if _temp_71_74 _temp_71_74 (null? _y1_56_57_69))) (if #f #f (unspecified)) (begin (begin #t (let ((_name_77 (let ((_x_78_81 _y1_56_58_69)) (begin (_check! (pair? _x_78_81) 0 _x_78_81) (car:pair _x_78_81)))) (_rhs_77 (let ((_x_82_85 _y1_56_57_69)) (begin (_check! (pair? _x_82_85) 0 _x_82_85) (car:pair _x_82_85))))) (lambda_defs-set! _newexp_25 (cons (make-definition _name_77 (_copy_4 _rhs_77 _env_5 _newnotepad_55 _r-table_5)) (lambda_defs _newexp_25))))) (_loop_62_65_68 (let ((_x_86_89 _y1_56_58_69)) (begin (_check! (pair? _x_86_89) 1 _x_86_89) (cdr:pair _x_86_89))) (let ((_x_90_93 _y1_56_57_69)) (begin (_check! (pair? _x_90_93) 1 _x_90_93) (cdr:pair _x_90_93)))))))) (_loop_62_65_68 (reverse _newprocnames_19) (let () (let ((_loop_99_102_105 (unspecified))) (begin (set! _loop_99_102_105 (lambda (_y1_94_95_106 _results_94_98_106) (if (null? _y1_94_95_106) (reverse _results_94_98_106) (begin #t (_loop_99_102_105 (let ((_x_110_113 _y1_94_95_106)) (begin (_check! (pair? _x_110_113) 1 _x_110_113) (cdr:pair _x_110_113))) (cons (def_rhs (let ((_x_114_117 _y1_94_95_106)) (begin (_check! (pair? _x_114_117) 0 _x_114_117) (car:pair _x_114_117)))) _results_94_98_106)))))) (_loop_99_102_105 (reverse (lambda_defs _exp_5)) '())))))))) (lambda_body-set! _newexp_25 (_copy_4 (lambda_body _exp_5) _env_5 _newnotepad_55 _r-table_5)) (lambda_f-set! _newexp_25 (notepad-free-variables _newnotepad_55)) (lambda_g-set! _newexp_25 (notepad-captured-variables _newnotepad_55)))) (_env-unbind-multiple!_4 _env_5 _procnames_16) (_env-unbind-multiple!_4 _env_5 _bvl_10) (let () (let ((_loop_123_125_128 (unspecified))) (begin (set! _loop_123_125_128 (lambda (_y1_118_119_129) (if (null? _y1_118_119_129) (if #f #f (unspecified)) (begin (begin #t (let ((_entry_133 (let ((_x_134_137 _y1_118_119_129)) (begin (_check! (pair? _x_134_137) 0 _x_134_137) (car:pair _x_134_137))))) (_env-unbind!_4 _r-table_5 (r-entry_name _entry_133)))) (_loop_123_125_128 (let ((_x_138_141 _y1_118_119_129)) (begin (_check! (pair? _x_138_141) 1 _x_138_141) (cdr:pair _x_138_141)))))))) (_loop_123_125_128 _refinfo_22)))) _newexp_25))) (if (assignment? _exp_5) (let* ((_oldname_194 (assignment_lhs _exp_5)) (_name_197 (_env-lookup_4 _env_5 _oldname_194 _oldname_194)) (_varinfo_200 (_env-lookup_4 _r-table_5 _name_197 #f)) (_newexp_203 (make-assignment _name_197 (_copy_4 (assignment_rhs _exp_5) _env_5 _notepad_5 _r-table_5)))) (let () (begin (notepad-var-add! _notepad_5 _name_197) (if _varinfo_200 (r-entry_assignments-set! _varinfo_200 (cons _newexp_203 (r-entry_assignments _varinfo_200))) (unspecified)) _newexp_203))) (if (conditional? _exp_5) (make-conditional (_copy_4 (if_test _exp_5) _env_5 _notepad_5 _r-table_5) (_copy_4 (if_then _exp_5) _env_5 _notepad_5 _r-table_5) (_copy_4 (if_else _exp_5) _env_5 _notepad_5 _r-table_5)) (if (begin? _exp_5) (make-begin (let () (let ((_loop_214_217_220 (unspecified))) (begin (set! _loop_214_217_220 (lambda (_y1_209_210_221 _results_209_213_221) (if (null? _y1_209_210_221) (reverse _results_209_213_221) (begin #t (_loop_214_217_220 (let ((_x_225_228 _y1_209_210_221)) (begin (_check! (pair? _x_225_228) 1 _x_225_228) (cdr:pair _x_225_228))) (cons (let ((_exp_229 (let ((_x_230_233 _y1_209_210_221)) (begin (_check! (pair? _x_230_233) 0 _x_230_233) (car:pair _x_230_233))))) (_copy_4 _exp_229 _env_5 _notepad_5 _r-table_5)) _results_209_213_221)))))) (_loop_214_217_220 (begin_exprs _exp_5) '()))))) (if (variable? _exp_5) (let* ((_oldname_237 (variable_name _exp_5)) (_name_240 (_env-lookup_4 _env_5 _oldname_237 _oldname_237)) (_varinfo_243 (_env-lookup_4 _r-table_5 _name_240 #f)) (_newexp_246 (make-variable _name_240))) (let () (begin (notepad-var-add! _notepad_5 _name_240) (if _varinfo_243 (r-entry_references-set! _varinfo_243 (cons _newexp_246 (r-entry_references _varinfo_243))) (unspecified)) _newexp_246))) (if (call? _exp_5) (let ((_newexp_253 (make-call (_copy_4 (call_proc _exp_5) _env_5 _notepad_5 _r-table_5) (let () (let ((_loop_262_265_268 (unspecified))) (begin (set! _loop_262_265_268 (lambda (_y1_257_258_269 _results_257_261_269) (if (null? _y1_257_258_269) (reverse _results_257_261_269) (begin #t (_loop_262_265_268 (let ((_x_273_276 _y1_257_258_269)) (begin (_check! (pair? _x_273_276) 1 _x_273_276) (cdr:pair _x_273_276))) (cons (let ((_exp_277 (let ((_x_278_281 _y1_257_258_269)) (begin (_check! (pair? _x_278_281) 0 _x_278_281) (car:pair _x_278_281))))) (_copy_4 _exp_277 _env_5 _notepad_5 _r-table_5)) _results_257_261_269)))))) (_loop_262_265_268 (call_args _exp_5) '()))))))) (begin (if (variable? (call_proc _newexp_253)) (let ((_varinfo_256 (_env-lookup_4 _r-table_5 (variable_name (call_proc _newexp_253)) #f))) (if _varinfo_256 (r-entry_calls-set! _varinfo_256 (cons _newexp_253 (r-entry_calls _varinfo_256))) (unspecified))) (unspecified)) (if (lambda? (call_proc _newexp_253)) (notepad-nonescaping-add! _notepad_5 (call_proc _newexp_253)) (unspecified)) _newexp_253)) ???))))))))) (set! _lexical-lookup_4 (lambda (_r-table_283 _name_283) (assq _name_283 _r-table_283))) (set! _env-unbind-multiple!_4 (lambda (_env_284 _symbols_284) (let () (let ((_loop_290_292_295 (unspecified))) (begin (set! _loop_290_292_295 (lambda (_y1_285_286_296) (if (null? _y1_285_286_296) (if #f #f (unspecified)) (begin (begin #t (let ((_sym_300 (let ((_x_301_304 _y1_285_286_296)) (begin (_check! (pair? _x_301_304) 0 _x_301_304) (car:pair _x_301_304))))) (_env-unbind!_4 _env_284 _sym_300))) (_loop_290_292_295 (let ((_x_305_308 _y1_285_286_296)) (begin (_check! (pair? _x_305_308) 1 _x_305_308) (cdr:pair _x_305_308)))))))) (_loop_290_292_295 _symbols_284)))))) (set! _env-bind-multiple!_4 (lambda (_env_309 _symbols_309 _infos_309) (let () (let ((_loop_316_319_322 (unspecified))) (begin (set! _loop_316_319_322 (lambda (_y1_310_312_323 _y1_310_311_323) (if (let ((_temp_325_328 (null? _y1_310_312_323))) (if _temp_325_328 _temp_325_328 (null? _y1_310_311_323))) (if #f #f (unspecified)) (begin (begin #t (let ((_sym_331 (let ((_x_332_335 _y1_310_312_323)) (begin (_check! (pair? _x_332_335) 0 _x_332_335) (car:pair _x_332_335)))) (_info_331 (let ((_x_336_339 _y1_310_311_323)) (begin (_check! (pair? _x_336_339) 0 _x_336_339) (car:pair _x_336_339))))) (_env-bind!_4 _env_309 _sym_331 _info_331))) (_loop_316_319_322 (let ((_x_340_343 _y1_310_312_323)) (begin (_check! (pair? _x_340_343) 1 _x_340_343) (cdr:pair _x_340_343))) (let ((_x_344_347 _y1_310_311_323)) (begin (_check! (pair? _x_344_347) 1 _x_344_347) (cdr:pair _x_344_347)))))))) (_loop_316_319_322 _symbols_309 _infos_309)))))) (set! _env-lookup_4 (lambda (_env_348 _sym_348 _default_348) (let ((_stack_351 (hashtable-get _env_348 _sym_348))) (if _stack_351 (let ((_x_352_355 _stack_351)) (begin (_check! (pair? _x_352_355) 0 _x_352_355) (car:pair _x_352_355))) _default_348)))) (set! _env-unbind!_4 (lambda (_env_356 _sym_356) (let ((_stack_359 (hashtable-get _env_356 _sym_356))) (hashtable-put! _env_356 _sym_356 (let ((_x_360_363 _stack_359)) (begin (_check! (pair? _x_360_363) 1 _x_360_363) (cdr:pair _x_360_363))))))) (set! _env-bind!_4 (lambda (_env_364 _sym_364 _info_364) (let ((_stack_367 (hashtable-get _env_364 _sym_364))) (hashtable-put! _env_364 _sym_364 (cons _info_364 _stack_367))))) (set! _make-env_4 (lambda () (make-hashtable symbol-hash assq))) (set! _rename-formals_4 (lambda (_formals_369 _newnames_369) (if (null? _formals_369) '() (if (symbol? _formals_369) (let ((_x_372_375 _newnames_369)) (begin (_check! (pair? _x_372_375) 0 _x_372_375) (car:pair _x_372_375))) (if (memq (let ((_x_377_380 _formals_369)) (begin (_check! (pair? _x_377_380) 0 _x_377_380) (car:pair _x_377_380))) _special-names_4) (cons (let ((_x_381_384 _formals_369)) (begin (_check! (pair? _x_381_384) 0 _x_381_384) (car:pair _x_381_384))) (_rename-formals_4 (let ((_x_385_388 _formals_369)) (begin (_check! (pair? _x_385_388) 1 _x_385_388) (cdr:pair _x_385_388))) (let ((_x_389_392 _newnames_369)) (begin (_check! (pair? _x_389_392) 1 _x_389_392) (cdr:pair _x_389_392))))) (cons (let ((_x_394_397 _newnames_369)) (begin (_check! (pair? _x_394_397) 0 _x_394_397) (car:pair _x_394_397))) (_rename-formals_4 (let ((_x_398_401 _formals_369)) (begin (_check! (pair? _x_398_401) 1 _x_398_401) (cdr:pair _x_398_401))) (let ((_x_402_405 _newnames_369)) (begin (_check! (pair? _x_402_405) 1 _x_402_405) (cdr:pair _x_402_405)))))))))) (set! _rename-vars_4 (lambda (_vars_406) (let ((_rename_409 (make-rename-procedure))) (let () (let ((_loop_415_418_421 (unspecified))) (begin (set! _loop_415_418_421 (lambda (_y1_410_411_422 _results_410_414_422) (if (null? _y1_410_411_422) (reverse _results_410_414_422) (begin #t (_loop_415_418_421 (let ((_x_426_429 _y1_410_411_422)) (begin (_check! (pair? _x_426_429) 1 _x_426_429) (cdr:pair _x_426_429))) (cons (let ((_var_430 (let ((_x_434_437 _y1_410_411_422)) (begin (_check! (pair? _x_434_437) 0 _x_434_437) (car:pair _x_434_437))))) (if (memq _var_430 _special-names_4) _var_430 (if (hashtable-get _original-names_4 _var_430) (_rename_409 _var_430) (begin (hashtable-put! _original-names_4 _var_430 #t) _var_430)))) _results_410_414_422)))))) (_loop_415_418_421 _vars_406 '()))))))) (set! _renaming-counter_4 0) (set! _original-names_4 (make-hashtable symbol-hash assq)) (set! _special-names_4 (cons name:ignored argument-registers)) (_copy_4 _exp_3 (_make-env_4) (make-notepad #f) (_make-env_4)))))) (_copy-exp_2 _exp_1))))) 'copy-exp))
(let () (begin (set! check-referencing-invariants (lambda (_exp_1 _ _flags_1) (let ((_check-free-variables?_4 (memq 'free _flags_1)) (_check-referencing?_4 (memq 'reference _flags_1)) (_first-violation?_4 #t)) (let ((_lookup_5 (unspecified)) (_return_5 (unspecified)) (_check_5 (unspecified))) (begin (set! _lookup_5 (lambda (_env_6 _i_6) (if (null? _env_6) #f (let* ((_rinfo_9 (r-entry (lambda_r (let ((_x_19_22 _env_6)) (begin (_check! (pair? _x_19_22) 0 _x_19_22) (car:pair _x_19_22)))) _i_6)) (_temp_10_13 _rinfo_9)) (if _temp_10_13 _temp_10_13 (_lookup_5 (let ((_x_15_18 _env_6)) (begin (_check! (pair? _x_15_18) 1 _x_15_18) (cdr:pair _x_15_18))) _i_6)))))) (set! _return_5 (lambda (_exp_23 _flag_23) (if _flag_23 #t (if _first-violation?_4 (begin (set! _first-violation?_4 #f) (display "Violation of referencing invariants") (newline) (pretty-print (make-readable _exp_23)) #f) (begin (pretty-print (make-readable _exp_23)) #f))))) (set! _check_5 (lambda (_exp_27 _env_27) (if (constant? _exp_27) (_return_5 _exp_27 #t) (if (lambda? _exp_27) (let ((_env_32 (cons _exp_27 _env_27))) (_return_5 _exp_27 (if (every? (lambda (_exp_34) (_check_5 _exp_34 _env_32)) (let () (let ((_loop_40_43_46 (unspecified))) (begin (set! _loop_40_43_46 (lambda (_y1_35_36_47 _results_35_39_47) (if (null? _y1_35_36_47) (reverse _results_35_39_47) (begin #t (_loop_40_43_46 (let ((_x_51_54 _y1_35_36_47)) (begin (_check! (pair? _x_51_54) 1 _x_51_54) (cdr:pair _x_51_54))) (cons (def_rhs (let ((_x_55_58 _y1_35_36_47)) (begin (_check! (pair? _x_55_58) 0 _x_55_58) (car:pair _x_55_58)))) _results_35_39_47)))))) (_loop_40_43_46 (lambda_defs _exp_27) '()))))) (if (_check_5 (lambda_body _exp_27) _env_32) (if (if (if _check-free-variables?_4 (not (null? _env_32)) #f) (subset? (difference (lambda_f _exp_27) (make-null-terminated (lambda_args _exp_27))) (lambda_f (let ((_x_63_66 _env_32)) (begin (_check! (pair? _x_63_66) 0 _x_63_66) (car:pair _x_63_66))))) #t) (if _check-referencing?_4 (let ((_env_70 (cons _exp_27 _env_32)) (_r_70 (lambda_r _exp_27))) (every? (lambda (_formal_71) (let ((_temp_72_75 (ignored? _formal_71))) (if _temp_72_75 _temp_72_75 (r-entry _r_70 _formal_71)))) (make-null-terminated (lambda_args _exp_27)))) #t) #f) #f) #f))) (if (variable? _exp_27) (_return_5 _exp_27 (if (if (if _check-free-variables?_4 (not (null? _env_27)) #f) (memq (variable_name _exp_27) (lambda_f (let ((_x_81_84 _env_27)) (begin (_check! (pair? _x_81_84) 0 _x_81_84) (car:pair _x_81_84))))) #t) (if _check-referencing?_4 (let ((_rinfo_88 (_lookup_5 _env_27 (variable_name _exp_27)))) (if _rinfo_88 (memq _exp_27 (r-entry_references _rinfo_88)) #t)) #t) #f)) (if (assignment? _exp_27) (_return_5 _exp_27 (if (_check_5 (assignment_rhs _exp_27) _env_27) (if (if (if _check-free-variables?_4 (not (null? _env_27)) #f) (memq (assignment_lhs _exp_27) (lambda_f (let ((_x_94_97 _env_27)) (begin (_check! (pair? _x_94_97) 0 _x_94_97) (car:pair _x_94_97))))) #t) (if _check-referencing?_4 (let ((_rinfo_101 (_lookup_5 _env_27 (assignment_lhs _exp_27)))) (if _rinfo_101 (memq _exp_27 (r-entry_assignments _rinfo_101)) #t)) #t) #f) #f)) (if (conditional? _exp_27) (_return_5 _exp_27 (if (_check_5 (if_test _exp_27) _env_27) (if (_check_5 (if_then _exp_27) _env_27) (_check_5 (if_else _exp_27) _env_27) #f) #f)) (if (begin? _exp_27) (_return_5 _exp_27 (every? (lambda (_exp_107) (_check_5 _exp_107 _env_27)) (begin_exprs _exp_27))) (if (call? _exp_27) (_return_5 _exp_27 (if (_check_5 (call_proc _exp_27) _env_27) (if (every? (lambda (_exp_111) (_check_5 _exp_111 _env_27)) (call_args _exp_27)) (if (if _check-referencing?_4 (variable? (call_proc _exp_27)) #f) (let ((_rinfo_117 (_lookup_5 _env_27 (variable_name (call_proc _exp_27))))) (if _rinfo_117 (memq _exp_27 (r-entry_calls _rinfo_117)) #t)) #t) #f) #f)) ???))))))))) (if (null? _flags_1) (begin (set! _check-free-variables?_4 #t) (set! _check-referencing?_4 #t)) (unspecified)) (_check_5 _exp_1 '())))))) 'check-referencing-invariants))
(let () (begin (set! compute-free-variables! (lambda (_exp_1) (let ((_compute-free-variables!_2 0)) (begin (set! _compute-free-variables!_2 (lambda (_exp_3) (let ((_free_4 (unspecified)) (_set->list_4 (unspecified)) (_union3_4 (unspecified)) (_union2_4 (unspecified)) (_singleton_4 (unspecified)) (_empty-set_4 (unspecified))) (begin (set! _free_4 (lambda (_exp_5) (if (constant? _exp_5) _empty-set_4 (if (lambda? _exp_5) (let* ((_defs_10 (lambda_defs _exp_5)) (_formals_13 (make-set (make-null-terminated (lambda_args _exp_5)))) (_defined_16 (make-set (let () (let ((_loop_59_62_65 (unspecified))) (begin (set! _loop_59_62_65 (lambda (_y1_54_55_66 _results_54_58_66) (if (null? _y1_54_55_66) (reverse _results_54_58_66) (begin #t (_loop_59_62_65 (let ((_x_70_73 _y1_54_55_66)) (begin (_check! (pair? _x_70_73) 1 _x_70_73) (cdr:pair _x_70_73))) (cons (def_lhs (let ((_x_74_77 _y1_54_55_66)) (begin (_check! (pair? _x_74_77) 0 _x_74_77) (car:pair _x_74_77)))) _results_54_58_66)))))) (_loop_59_62_65 _defs_10 '())))))) (_fdefs_19 (apply-union (let () (let ((_loop_34_37_40 (unspecified))) (begin (set! _loop_34_37_40 (lambda (_y1_29_30_41 _results_29_33_41) (if (null? _y1_29_30_41) (reverse _results_29_33_41) (begin #t (_loop_34_37_40 (let ((_x_45_48 _y1_29_30_41)) (begin (_check! (pair? _x_45_48) 1 _x_45_48) (cdr:pair _x_45_48))) (cons (let ((_def_49 (let ((_x_50_53 _y1_29_30_41)) (begin (_check! (pair? _x_50_53) 0 _x_50_53) (car:pair _x_50_53))))) (_free_4 (def_rhs _def_49))) _results_29_33_41)))))) (_loop_34_37_40 _defs_10 '())))))) (_fbody_22 (_free_4 (lambda_body _exp_5))) (_f_25 (_union2_4 _fdefs_19 _fbody_22))) (let () (begin (lambda_f-set! _exp_5 (_set->list_4 _f_25)) (lambda_g-set! _exp_5 (_set->list_4 _f_25)) (difference _f_25 (_union2_4 _formals_13 _defined_16))))) (if (assignment? _exp_5) (_union2_4 (make-set (cons (assignment_lhs _exp_5) '())) (_free_4 (assignment_rhs _exp_5))) (if (conditional? _exp_5) (_union3_4 (_free_4 (if_test _exp_5)) (_free_4 (if_then _exp_5)) (_free_4 (if_else _exp_5))) (if (begin? _exp_5) (apply-union (let () (let ((_loop_87_90_93 (unspecified))) (begin (set! _loop_87_90_93 (lambda (_y1_82_83_94 _results_82_86_94) (if (null? _y1_82_83_94) (reverse _results_82_86_94) (begin #t (_loop_87_90_93 (let ((_x_98_101 _y1_82_83_94)) (begin (_check! (pair? _x_98_101) 1 _x_98_101) (cdr:pair _x_98_101))) (cons (let ((_exp_102 (let ((_x_103_106 _y1_82_83_94)) (begin (_check! (pair? _x_103_106) 0 _x_103_106) (car:pair _x_103_106))))) (_free_4 _exp_102)) _results_82_86_94)))))) (_loop_87_90_93 (begin_exprs _exp_5) '()))))) (if (variable? _exp_5) (_singleton_4 (variable_name _exp_5)) (if (call? _exp_5) (_union2_4 (_free_4 (call_proc _exp_5)) (apply-union (let () (let ((_loop_114_117_120 (unspecified))) (begin (set! _loop_114_117_120 (lambda (_y1_109_110_121 _results_109_113_121) (if (null? _y1_109_110_121) (reverse _results_109_113_121) (begin #t (_loop_114_117_120 (let ((_x_125_128 _y1_109_110_121)) (begin (_check! (pair? _x_125_128) 1 _x_125_128) (cdr:pair _x_125_128))) (cons (let ((_exp_129 (let ((_x_130_133 _y1_109_110_121)) (begin (_check! (pair? _x_130_133) 0 _x_130_133) (car:pair _x_130_133))))) (_free_4 _exp_129)) _results_109_113_121)))))) (_loop_114_117_120 (call_args _exp_5) '())))))) ???))))))))) (set! _set->list_4 (lambda (_set_135) _set_135)) (set! _union3_4 (lambda (_x_136 _y_136 _z_136) (union _x_136 _y_136 _z_136))) (set! _union2_4 (lambda (_x_137 _y_137) (union _x_137 _y_137))) (set! _singleton_4 (lambda (_x_138) (cons _x_138 '()))) (set! _empty-set_4 (make-set '())) (_free_4 _exp_3))))) (_compute-free-variables!_2 _exp_1))))) 'compute-free-variables!))
(let () (begin '(define (compute-free-variables! exp) (define empty-set (make-hashtree symbol-hash assq)) (define (singleton x) (hashtree-put empty-set x #t)) (define (make-set values) (if (null? values) empty-set (hashtree-put (make-set (cdr values)) (car values) #t))) (define (union2 x y) (hashtree-for-each (lambda (key val) (set! x (hashtree-put x key #t))) y) x) (define (union3 x y z) (union2 (union2 x y) z)) (define (apply-union sets) (cond ((null? sets) (make-set '())) ((null? (cdr sets)) (car sets)) (else (union2 (car sets) (apply-union (cdr sets)))))) (define (difference x y) (hashtree-for-each (lambda (key val) (set! x (hashtree-remove x key))) y) x) (define (set->list set) (hashtree-map (lambda (sym val) sym) set)) (define (free exp) (cond ((constant? exp) empty-set) ((lambda? exp) (let* ((defs (lambda_defs exp)) (formals (make-set (make-null-terminated (lambda_args exp)))) (defined (make-set (map def_lhs defs))) (fdefs (apply-union (map (lambda (def) (free (def_rhs def))) defs))) (fbody (free (lambda_body exp))) (f (union2 fdefs fbody))) (lambda_f-set! exp (set->list f)) (lambda_g-set! exp (set->list f)) (difference f (union2 formals defined)))) ((assignment? exp) (union2 (make-set (list (assignment_lhs exp))) (free (assignment_rhs exp)))) ((conditional? exp) (union3 (free (if_test exp)) (free (if_then exp)) (free (if_else exp)))) ((begin? exp) (apply-union (map (lambda (exp) (free exp)) (begin_exprs exp)))) ((variable? exp) (singleton (variable_name exp))) ((call? exp) (union2 (free (call_proc exp)) (apply-union (map (lambda (exp) (free exp)) (call_args exp))))) (else ???))) (hashtree-map (lambda (sym val) sym) (free exp))) #t))
(let () ($$trace "pass1"))
(let () (begin (set! source-file-name #f) 'source-file-name))
(let () (begin (set! source-file-position #f) 'source-file-position))
(let () (begin (set! pass1-block-compiling? #f) 'pass1-block-compiling?))
(let () (begin (set! pass1-block-assignments '()) 'pass1-block-assignments))
(let () (begin (set! pass1-block-inlines '()) 'pass1-block-inlines))
(let () (begin (set! pass1 (lambda (_def-or-exp_1 _ _rest_1) (begin (set! source-file-name #f) (set! source-file-position #f) (set! pass1-block-compiling? #f) (set! pass1-block-assignments '()) (set! pass1-block-inlines '()) (if (not (null? _rest_1)) (begin (set! source-file-name (let ((_x_2_5 _rest_1)) (begin (_check! (pair? _x_2_5) 0 _x_2_5) (car:pair _x_2_5)))) (if (not (null? (let ((_x_6_9 _rest_1)) (begin (_check! (pair? _x_6_9) 1 _x_6_9) (cdr:pair _x_6_9))))) (set! source-file-position (let ((_x_11_14 (let ((_x_15_18 _rest_1)) (begin (_check! (pair? _x_15_18) 1 _x_15_18) (cdr:pair _x_15_18))))) (begin (_check! (pair? _x_11_14) 0 _x_11_14) (car:pair _x_11_14)))) (unspecified))) (unspecified)) (set! renaming-counter 0) (macro-expand _def-or-exp_1)))) 'pass1))
(let () (begin (set! pass1-block (lambda (_forms_1 _ _rest_1) (let ((_part3_2 (unspecified)) (_part2_2 (unspecified)) (_part1_2 (unspecified))) (begin (set! _part3_2 (lambda (_alist_3 _definitions0_3 _definitions1_3 _forms_3) (begin (set! pass1-block-compiling? #f) (set! pass1-block-assignments '()) (set! pass1-block-inlines '()) (let* ((_constnames0_6 (let () (let ((_loop_211_214_217 (unspecified))) (begin (set! _loop_211_214_217 (lambda (_y1_206_207_218 _results_206_210_218) (if (null? _y1_206_207_218) (reverse _results_206_210_218) (begin #t (_loop_211_214_217 (let ((_x_222_225 _y1_206_207_218)) (begin (_check! (pair? _x_222_225) 1 _x_222_225) (cdr:pair _x_222_225))) (cons (assignment_lhs (let ((_x_226_229 _y1_206_207_218)) (begin (_check! (pair? _x_226_229) 0 _x_226_229) (car:pair _x_226_229)))) _results_206_210_218)))))) (_loop_211_214_217 _definitions0_3 '()))))) (_constnames1_9 (let () (let ((_loop_182_185_188 (unspecified))) (begin (set! _loop_182_185_188 (lambda (_y1_177_178_189 _results_177_181_189) (if (null? _y1_177_178_189) (reverse _results_177_181_189) (begin #t (_loop_182_185_188 (let ((_x_193_196 _y1_177_178_189)) (begin (_check! (pair? _x_193_196) 1 _x_193_196) (cdr:pair _x_193_196))) (cons (let* ((_id0_197 (let ((_x_202_205 _y1_177_178_189)) (begin (_check! (pair? _x_202_205) 0 _x_202_205) (car:pair _x_202_205)))) (_x_198_201 (assq _id0_197 _alist_3))) (begin (_check! (pair? _x_198_201) 1 _x_198_201) (cdr:pair _x_198_201))) _results_177_181_189)))))) (_loop_182_185_188 _constnames0_6 '()))))) (_procnames1_12 (let () (let ((_loop_158_161_164 (unspecified))) (begin (set! _loop_158_161_164 (lambda (_y1_153_154_165 _results_153_157_165) (if (null? _y1_153_154_165) (reverse _results_153_157_165) (begin #t (_loop_158_161_164 (let ((_x_169_172 _y1_153_154_165)) (begin (_check! (pair? _x_169_172) 1 _x_169_172) (cdr:pair _x_169_172))) (cons (assignment_lhs (let ((_x_173_176 _y1_153_154_165)) (begin (_check! (pair? _x_173_176) 0 _x_173_176) (car:pair _x_173_176)))) _results_153_157_165)))))) (_loop_158_161_164 _definitions1_3 '())))))) (let () (copy-exp (make-call (make-lambda _constnames1_9 '() '() '() '() '() #f (make-begin (let* ((_t1_16_19 (make-begin (cons (make-constant #f) (reverse (let () (let ((_loop_105_108_111 (unspecified))) (begin (set! _loop_105_108_111 (lambda (_y1_100_101_112 _results_100_104_112) (if (null? _y1_100_101_112) (reverse _results_100_104_112) (begin #t (_loop_105_108_111 (let ((_x_116_119 _y1_100_101_112)) (begin (_check! (pair? _x_116_119) 1 _x_116_119) (cdr:pair _x_116_119))) (cons (let ((_id_120 (let ((_x_125_128 _y1_100_101_112)) (begin (_check! (pair? _x_125_128) 0 _x_125_128) (car:pair _x_125_128))))) (make-assignment _id_120 (make-variable (let ((_x_121_124 (assq _id_120 _alist_3))) (begin (_check! (pair? _x_121_124) 1 _x_121_124) (cdr:pair _x_121_124)))))) _results_100_104_112)))))) (_loop_105_108_111 _constnames0_6 '())))))))) (_t2_16_22 (cons (make-call (make-lambda _constnames0_6 '() '() '() '() '() #f (make-call (make-lambda (let () (let ((_loop_32_35_38 (unspecified))) (begin (set! _loop_32_35_38 (lambda (_y1_27_28_39 _results_27_31_39) (if (null? _y1_27_28_39) (reverse _results_27_31_39) (begin #t (_loop_32_35_38 (let ((_x_43_46 _y1_27_28_39)) (begin (_check! (pair? _x_43_46) 1 _x_43_46) (cdr:pair _x_43_46))) (cons (assignment_lhs (let ((_x_47_50 _y1_27_28_39)) (begin (_check! (pair? _x_47_50) 0 _x_47_50) (car:pair _x_47_50)))) _results_27_31_39)))))) (_loop_32_35_38 _definitions1_3 '())))) '() '() '() '() '() #f (make-begin (cons (make-constant #f) (append _definitions1_3 _forms_3)))) (let () (let ((_loop_56_59_62 (unspecified))) (begin (set! _loop_56_59_62 (lambda (_y1_51_52_63 _results_51_55_63) (if (null? _y1_51_52_63) (reverse _results_51_55_63) (begin #t (_loop_56_59_62 (let ((_x_67_70 _y1_51_52_63)) (begin (_check! (pair? _x_67_70) 1 _x_67_70) (cdr:pair _x_67_70))) (cons (let ((_ignored_71 (let ((_x_72_75 _y1_51_52_63)) (begin (_check! (pair? _x_72_75) 0 _x_72_75) (car:pair _x_72_75))))) (make-unspecified)) _results_51_55_63)))))) (_loop_56_59_62 _definitions1_3 '())))))) (let () (let ((_loop_81_84_87 (unspecified))) (begin (set! _loop_81_84_87 (lambda (_y1_76_77_88 _results_76_80_88) (if (null? _y1_76_77_88) (reverse _results_76_80_88) (begin #t (_loop_81_84_87 (let ((_x_92_95 _y1_76_77_88)) (begin (_check! (pair? _x_92_95) 1 _x_92_95) (cdr:pair _x_92_95))) (cons (make-variable (let ((_x_96_99 _y1_76_77_88)) (begin (_check! (pair? _x_96_99) 0 _x_96_99) (car:pair _x_96_99)))) _results_76_80_88)))))) (_loop_81_84_87 _constnames1_9 '()))))) '()))) (let () (cons _t1_16_19 _t2_16_22))))) (let () (let ((_loop_134_137_140 (unspecified))) (begin (set! _loop_134_137_140 (lambda (_y1_129_130_141 _results_129_133_141) (if (null? _y1_129_130_141) (reverse _results_129_133_141) (begin #t (_loop_134_137_140 (let ((_x_145_148 _y1_129_130_141)) (begin (_check! (pair? _x_145_148) 1 _x_145_148) (cdr:pair _x_145_148))) (cons (assignment_rhs (let ((_x_149_152 _y1_129_130_141)) (begin (_check! (pair? _x_149_152) 0 _x_149_152) (car:pair _x_149_152)))) _results_129_133_141)))))) (_loop_134_137_140 _definitions0_3 '()))))))))))) (set! _part2_2 (lambda (_defined_230) (begin (set! pass1-block-compiling? #f) (set! pass1-block-assignments '()) (set! pass1-block-inlines '()) (set! renaming-counter 0) (let* ((_rename_233 (make-rename-procedure)) (_alist_236 (let () (let ((_loop_354_357_360 (unspecified))) (begin (set! _loop_354_357_360 (lambda (_y1_349_350_361 _results_349_353_361) (if (null? _y1_349_350_361) (reverse _results_349_353_361) (begin #t (_loop_354_357_360 (let ((_x_365_368 _y1_349_350_361)) (begin (_check! (pair? _x_365_368) 1 _x_365_368) (cdr:pair _x_365_368))) (cons (let ((_id_369 (let ((_x_370_373 _y1_349_350_361)) (begin (_check! (pair? _x_370_373) 0 _x_370_373) (car:pair _x_370_373))))) (cons _id_369 (_rename_233 _id_369))) _results_349_353_361)))))) (_loop_354_357_360 _defined_230 '()))))) (_definitions0_239 '()) (_definitions1_242 '())) (let () (let ((_make-toplevel-definition_248 (unspecified))) (begin (set! _make-toplevel-definition_248 (lambda (_id_249 _exp_249) (begin (if (lambda? _exp_249) (doc_name-set! (lambda_doc _exp_249) _id_249) (unspecified)) (let ((_probe_252 (assq _id_249 _alist_236))) (if _probe_252 (let ((_id1_255 (let ((_x_283_286 _probe_252)) (begin (_check! (pair? _x_283_286) 1 _x_283_286) (cdr:pair _x_283_286))))) (if (constant? _exp_249) (begin (set! _definitions0_239 (cons (make-assignment _id_249 _exp_249) _definitions0_239)) (make-constant _id_249)) (if (lambda? _exp_249) (begin (set! _definitions1_242 (cons (make-assignment _id1_255 _exp_249) _definitions1_242)) (make-assignment _id_249 (make-lambda (lambda_args _exp_249) '() '() '() '() '() (lambda_doc _exp_249) (make-call (make-variable _id1_255) (let () (let ((_loop_263_266_269 (unspecified))) (begin (set! _loop_263_266_269 (lambda (_y1_258_259_270 _results_258_262_270) (if (null? _y1_258_259_270) (reverse _results_258_262_270) (begin #t (_loop_263_266_269 (let ((_x_274_277 _y1_258_259_270)) (begin (_check! (pair? _x_274_277) 1 _x_274_277) (cdr:pair _x_274_277))) (cons (make-variable (let ((_x_278_281 _y1_258_259_270)) (begin (_check! (pair? _x_278_281) 0 _x_278_281) (car:pair _x_278_281)))) _results_258_262_270)))))) (_loop_263_266_269 (lambda_args _exp_249) '())))))))) (m-error "Inconsistent macro expansion" (make-readable _exp_249))))) (make-assignment _id_249 _exp_249)))))) (let ((_env0_287 (syntactic-copy global-syntactic-environment)) (_bmode_287 (benchmark-mode)) (_wmode_287 (issue-warnings))) (begin (issue-warnings #f) (let () (let ((_loop_293_295_298 (unspecified))) (begin (set! _loop_293_295_298 (lambda (_y1_288_289_299) (if (null? _y1_288_289_299) (if #f #f (unspecified)) (begin (begin #t (let ((_pair_303 (let ((_x_320_323 _y1_288_289_299)) (begin (_check! (pair? _x_320_323) 0 _x_320_323) (car:pair _x_320_323))))) (let ((_id0_306 (let ((_x_312_315 _pair_303)) (begin (_check! (pair? _x_312_315) 0 _x_312_315) (car:pair _x_312_315)))) (_id1_306 (let ((_x_316_319 _pair_303)) (begin (_check! (pair? _x_316_319) 1 _x_316_319) (cdr:pair _x_316_319))))) (begin (syntactic-bind-globally! _id0_306 (make-inline-denotation _id0_306 (lambda (_exp_307 _rename_307 _compare_307) (cons _id1_306 (let ((_x_308_311 _exp_307)) (begin (_check! (pair? _x_308_311) 1 _x_308_311) (cdr:pair _x_308_311))))) global-syntactic-environment)) (set! pass1-block-inlines (cons _id0_306 pass1-block-inlines)))))) (_loop_293_295_298 (let ((_x_324_327 _y1_288_289_299)) (begin (_check! (pair? _x_324_327) 1 _x_324_327) (cdr:pair _x_324_327)))))))) (_loop_293_295_298 _alist_236)))) (benchmark-mode #f) (issue-warnings _wmode_287) (let ((_forms_330 (let () (let ((_loop_331_334_337 (unspecified))) (begin (set! _loop_331_334_337 (lambda (_forms_338 _newforms_338) (if (null? _forms_338) (reverse _newforms_338) (begin #t (_loop_331_334_337 (let ((_x_341_344 _forms_338)) (begin (_check! (pair? _x_341_344) 1 _x_341_344) (cdr:pair _x_341_344))) (cons (desugar-definitions (let ((_x_345_348 _forms_338)) (begin (_check! (pair? _x_345_348) 0 _x_345_348) (car:pair _x_345_348))) global-syntactic-environment _make-toplevel-definition_248) _newforms_338)))))) (_loop_331_334_337 _forms_1 '())))))) (begin (benchmark-mode _bmode_287) (set! global-syntactic-environment _env0_287) (_part3_2 _alist_236 _definitions0_239 _definitions1_242 _forms_330)))))))))))) (set! _part1_2 (lambda () (begin (set! pass1-block-compiling? #t) (set! pass1-block-assignments '()) (set! pass1-block-inlines '()) (set! renaming-counter 0) (let ((_env0_377 (syntactic-copy global-syntactic-environment)) (_bmode_377 (benchmark-mode)) (_wmode_377 (issue-warnings)) (_defined_377 '())) (let ((_make-toplevel-definition_378 (unspecified))) (begin (set! _make-toplevel-definition_378 (lambda (_id_379 _exp_379) (begin (if (memq _id_379 _defined_377) (set! pass1-block-assignments (cons _id_379 pass1-block-assignments)) (if (let ((_temp_382_385 (constant? _exp_379))) (if _temp_382_385 _temp_382_385 (if (lambda? _exp_379) (list? (lambda_args _exp_379)) #f))) (set! _defined_377 (cons _id_379 _defined_377)) (unspecified))) (make-begin (let* ((_t1_389_392 (make-assignment _id_379 _exp_379)) (_t2_389_395 (cons (make-constant _id_379) '()))) (let () (cons _t1_389_392 _t2_389_395))))))) (benchmark-mode #f) (issue-warnings #f) (let () (let ((_loop_405_407_410 (unspecified))) (begin (set! _loop_405_407_410 (lambda (_y1_400_401_411) (if (null? _y1_400_401_411) (if #f #f (unspecified)) (begin (begin #t (let ((_form_415 (let ((_x_416_419 _y1_400_401_411)) (begin (_check! (pair? _x_416_419) 0 _x_416_419) (car:pair _x_416_419))))) (desugar-definitions _form_415 global-syntactic-environment _make-toplevel-definition_378))) (_loop_405_407_410 (let ((_x_420_423 _y1_400_401_411)) (begin (_check! (pair? _x_420_423) 1 _x_420_423) (cdr:pair _x_420_423)))))))) (_loop_405_407_410 _forms_1)))) (set! global-syntactic-environment _env0_377) (benchmark-mode _bmode_377) (issue-warnings _wmode_377) (_part2_2 (filter (lambda (_id_424) (not (memq _id_424 pass1-block-assignments))) (reverse _defined_377))))))))) (set! source-file-name #f) (set! source-file-position #f) (if (not (null? _rest_1)) (begin (set! source-file-name (let ((_x_425_428 _rest_1)) (begin (_check! (pair? _x_425_428) 0 _x_425_428) (car:pair _x_425_428)))) (if (not (null? (let ((_x_429_432 _rest_1)) (begin (_check! (pair? _x_429_432) 1 _x_429_432) (cdr:pair _x_429_432))))) (set! source-file-position (let ((_x_434_437 (let ((_x_438_441 _rest_1)) (begin (_check! (pair? _x_438_441) 1 _x_438_441) (cdr:pair _x_438_441))))) (begin (_check! (pair? _x_434_437) 0 _x_434_437) (car:pair _x_434_437)))) (unspecified))) (unspecified)) (_part1_2))))) 'pass1-block))
(let () (begin (set! make-available-table (lambda () (let ((_make-available-table_2 0)) (begin (set! _make-available-table_2 (lambda () (let* ((_t_4_6_11 '()) (_t_4_5_14 '()) (_v_4_8_17 (make-vector 2 _t_4_6_11))) (let () (begin (let ((_v_21_24 _v_4_8_17) (_i_21_24 0) (_x_21_24 _t_4_5_14)) (begin (_check! (fixnum? _i_21_24) 41 _v_21_24 _i_21_24 _x_21_24) (_check! (vector? _v_21_24) 41 _v_21_24 _i_21_24 _x_21_24) (_check! (<:fix:fix _i_21_24 (vector-length:vec _v_21_24)) 41 _v_21_24 _i_21_24 _x_21_24) (_check! (>=:fix:fix _i_21_24 0) 41 _v_21_24 _i_21_24 _x_21_24) (vector-set!:trusted _v_21_24 _i_21_24 _x_21_24))) _v_4_8_17))))) (_make-available-table_2))))) 'make-available-table))
(let () (begin (set! copy-available-table (lambda (_available_1) (let ((_copy-available-table_2 0)) (begin (set! _copy-available-table_2 (lambda (_available_3) (let* ((_t_4_6_11 (let ((_v_29_32 _available_3) (_i_29_32 1)) (begin (_check! (fixnum? _i_29_32) 40 _v_29_32 _i_29_32) (_check! (vector? _v_29_32) 40 _v_29_32 _i_29_32) (_check! (<:fix:fix _i_29_32 (vector-length:vec _v_29_32)) 40 _v_29_32 _i_29_32) (_check! (>=:fix:fix _i_29_32 0) 40 _v_29_32 _i_29_32) (vector-ref:trusted _v_29_32 _i_29_32)))) (_t_4_5_14 (let ((_v_25_28 _available_3) (_i_25_28 0)) (begin (_check! (fixnum? _i_25_28) 40 _v_25_28 _i_25_28) (_check! (vector? _v_25_28) 40 _v_25_28 _i_25_28) (_check! (<:fix:fix _i_25_28 (vector-length:vec _v_25_28)) 40 _v_25_28 _i_25_28) (_check! (>=:fix:fix _i_25_28 0) 40 _v_25_28 _i_25_28) (vector-ref:trusted _v_25_28 _i_25_28)))) (_v_4_8_17 (make-vector 2 _t_4_6_11))) (let () (begin (let ((_v_21_24 _v_4_8_17) (_i_21_24 0) (_x_21_24 _t_4_5_14)) (begin (_check! (fixnum? _i_21_24) 41 _v_21_24 _i_21_24 _x_21_24) (_check! (vector? _v_21_24) 41 _v_21_24 _i_21_24 _x_21_24) (_check! (<:fix:fix _i_21_24 (vector-length:vec _v_21_24)) 41 _v_21_24 _i_21_24 _x_21_24) (_check! (>=:fix:fix _i_21_24 0) 41 _v_21_24 _i_21_24 _x_21_24) (vector-set!:trusted _v_21_24 _i_21_24 _x_21_24))) _v_4_8_17))))) (_copy-available-table_2 _available_1))))) 'copy-available-table))
(let () (begin (set! available-expression (lambda (_available_1 _e_1) (let ((_available-expression_2 0)) (begin (set! _available-expression_2 (lambda (_available_3 _e_3) (let ((_binding_6 (assoc _e_3 (let ((_v_16_19 _available_3) (_i_16_19 0)) (begin (_check! (fixnum? _i_16_19) 40 _v_16_19 _i_16_19) (_check! (vector? _v_16_19) 40 _v_16_19 _i_16_19) (_check! (<:fix:fix _i_16_19 (vector-length:vec _v_16_19)) 40 _v_16_19 _i_16_19) (_check! (>=:fix:fix _i_16_19 0) 40 _v_16_19 _i_16_19) (vector-ref:trusted _v_16_19 _i_16_19)))))) (if _binding_6 (let ((_x_8_11 (let ((_x_12_15 _binding_6)) (begin (_check! (pair? _x_12_15) 1 _x_12_15) (cdr:pair _x_12_15))))) (begin (_check! (pair? _x_8_11) 0 _x_8_11) (car:pair _x_8_11))) #f)))) (_available-expression_2 _available_1 _e_1))))) 'available-expression))
(let () (begin (set! available-variable (lambda (_available_1 _t_1) (let ((_available-variable_2 0)) (begin (set! _available-variable_2 (lambda (_available_3 _t_3) (let ((_binding_6 (assq _t_3 (let ((_v_16_19 _available_3) (_i_16_19 1)) (begin (_check! (fixnum? _i_16_19) 40 _v_16_19 _i_16_19) (_check! (vector? _v_16_19) 40 _v_16_19 _i_16_19) (_check! (<:fix:fix _i_16_19 (vector-length:vec _v_16_19)) 40 _v_16_19 _i_16_19) (_check! (>=:fix:fix _i_16_19 0) 40 _v_16_19 _i_16_19) (vector-ref:trusted _v_16_19 _i_16_19)))))) (if _binding_6 (let ((_x_8_11 (let ((_x_12_15 _binding_6)) (begin (_check! (pair? _x_12_15) 1 _x_12_15) (cdr:pair _x_12_15))))) (begin (_check! (pair? _x_8_11) 0 _x_8_11) (car:pair _x_8_11))) #f)))) (_available-variable_2 _available_1 _t_1))))) 'available-variable))
(let () (begin (set! available-extend! (lambda (_available_1 _t_1 _e_1 _k_1) (let ((_available-extend!_2 0)) (begin (set! _available-extend!_2 (lambda (_available_3 _t_3 _e_3 _k_3) (if (constant? _e_3) (let ((_v_5_8 _available_3) (_i_5_8 1) (_x_5_8 (cons (let* ((_t1_9_12 _t_3) (_t2_9_15 (let* ((_t1_19_22 _e_3) (_t2_19_25 (cons _k_3 '()))) (let () (cons _t1_19_22 _t2_19_25))))) (let () (cons _t1_9_12 _t2_9_15))) (let ((_v_30_33 _available_3) (_i_30_33 1)) (begin (_check! (fixnum? _i_30_33) 40 _v_30_33 _i_30_33) (_check! (vector? _v_30_33) 40 _v_30_33 _i_30_33) (_check! (<:fix:fix _i_30_33 (vector-length:vec _v_30_33)) 40 _v_30_33 _i_30_33) (_check! (>=:fix:fix _i_30_33 0) 40 _v_30_33 _i_30_33) (vector-ref:trusted _v_30_33 _i_30_33)))))) (begin (_check! (fixnum? _i_5_8) 41 _v_5_8 _i_5_8 _x_5_8) (_check! (vector? _v_5_8) 41 _v_5_8 _i_5_8 _x_5_8) (_check! (<:fix:fix _i_5_8 (vector-length:vec _v_5_8)) 41 _v_5_8 _i_5_8 _x_5_8) (_check! (>=:fix:fix _i_5_8 0) 41 _v_5_8 _i_5_8 _x_5_8) (vector-set!:trusted _v_5_8 _i_5_8 _x_5_8))) (if (if (variable? _e_3) (eq? _k_3 available:killer:none) #f) (let ((_v_37_40 _available_3) (_i_37_40 1) (_x_37_40 (cons (let* ((_t1_41_44 _t_3) (_t2_41_47 (let* ((_t1_51_54 _e_3) (_t2_51_57 (cons _k_3 '()))) (let () (cons _t1_51_54 _t2_51_57))))) (let () (cons _t1_41_44 _t2_41_47))) (let ((_v_62_65 _available_3) (_i_62_65 1)) (begin (_check! (fixnum? _i_62_65) 40 _v_62_65 _i_62_65) (_check! (vector? _v_62_65) 40 _v_62_65 _i_62_65) (_check! (<:fix:fix _i_62_65 (vector-length:vec _v_62_65)) 40 _v_62_65 _i_62_65) (_check! (>=:fix:fix _i_62_65 0) 40 _v_62_65 _i_62_65) (vector-ref:trusted _v_62_65 _i_62_65)))))) (begin (_check! (fixnum? _i_37_40) 41 _v_37_40 _i_37_40 _x_37_40) (_check! (vector? _v_37_40) 41 _v_37_40 _i_37_40 _x_37_40) (_check! (<:fix:fix _i_37_40 (vector-length:vec _v_37_40)) 41 _v_37_40 _i_37_40 _x_37_40) (_check! (>=:fix:fix _i_37_40 0) 41 _v_37_40 _i_37_40 _x_37_40) (vector-set!:trusted _v_37_40 _i_37_40 _x_37_40))) (let ((_v_67_70 _available_3) (_i_67_70 0) (_x_67_70 (cons (let* ((_t1_71_74 _e_3) (_t2_71_77 (let* ((_t1_81_84 _t_3) (_t2_81_87 (cons _k_3 '()))) (let () (cons _t1_81_84 _t2_81_87))))) (let () (cons _t1_71_74 _t2_71_77))) (let ((_v_92_95 _available_3) (_i_92_95 0)) (begin (_check! (fixnum? _i_92_95) 40 _v_92_95 _i_92_95) (_check! (vector? _v_92_95) 40 _v_92_95 _i_92_95) (_check! (<:fix:fix _i_92_95 (vector-length:vec _v_92_95)) 40 _v_92_95 _i_92_95) (_check! (>=:fix:fix _i_92_95 0) 40 _v_92_95 _i_92_95) (vector-ref:trusted _v_92_95 _i_92_95)))))) (begin (_check! (fixnum? _i_67_70) 41 _v_67_70 _i_67_70 _x_67_70) (_check! (vector? _v_67_70) 41 _v_67_70 _i_67_70 _x_67_70) (_check! (<:fix:fix _i_67_70 (vector-length:vec _v_67_70)) 41 _v_67_70 _i_67_70 _x_67_70) (_check! (>=:fix:fix _i_67_70 0) 41 _v_67_70 _i_67_70 _x_67_70) (vector-set!:trusted _v_67_70 _i_67_70 _x_67_70))))))) (_available-extend!_2 _available_1 _t_1 _e_1 _k_1))))) 'available-extend!))
(let () (begin (set! available-kill! (lambda (_available_1 _k_1) (let ((_available-kill!_2 0)) (begin (set! _available-kill!_2 (lambda (_available_3 _k_3) (begin (let ((_v_4_7 _available_3) (_i_4_7 0) (_x_4_7 (filter (lambda (_binding_8) (zero? (logand _k_3 (let ((_x_10_13 (let ((_x_14_17 (let ((_x_18_21 _binding_8)) (begin (_check! (pair? _x_18_21) 1 _x_18_21) (cdr:pair _x_18_21))))) (begin (_check! (pair? _x_14_17) 1 _x_14_17) (cdr:pair _x_14_17))))) (begin (_check! (pair? _x_10_13) 0 _x_10_13) (car:pair _x_10_13)))))) (let ((_v_22_25 _available_3) (_i_22_25 0)) (begin (_check! (fixnum? _i_22_25) 40 _v_22_25 _i_22_25) (_check! (vector? _v_22_25) 40 _v_22_25 _i_22_25) (_check! (<:fix:fix _i_22_25 (vector-length:vec _v_22_25)) 40 _v_22_25 _i_22_25) (_check! (>=:fix:fix _i_22_25 0) 40 _v_22_25 _i_22_25) (vector-ref:trusted _v_22_25 _i_22_25)))))) (begin (_check! (fixnum? _i_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (vector? _v_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (>=:fix:fix _i_4_7 0) 41 _v_4_7 _i_4_7 _x_4_7) (vector-set!:trusted _v_4_7 _i_4_7 _x_4_7))) (let ((_v_26_29 _available_3) (_i_26_29 1) (_x_26_29 (filter (lambda (_binding_30) (zero? (logand _k_3 (let ((_x_32_35 (let ((_x_36_39 (let ((_x_40_43 _binding_30)) (begin (_check! (pair? _x_40_43) 1 _x_40_43) (cdr:pair _x_40_43))))) (begin (_check! (pair? _x_36_39) 1 _x_36_39) (cdr:pair _x_36_39))))) (begin (_check! (pair? _x_32_35) 0 _x_32_35) (car:pair _x_32_35)))))) (let ((_v_44_47 _available_3) (_i_44_47 1)) (begin (_check! (fixnum? _i_44_47) 40 _v_44_47 _i_44_47) (_check! (vector? _v_44_47) 40 _v_44_47 _i_44_47) (_check! (<:fix:fix _i_44_47 (vector-length:vec _v_44_47)) 40 _v_44_47 _i_44_47) (_check! (>=:fix:fix _i_44_47 0) 40 _v_44_47 _i_44_47) (vector-ref:trusted _v_44_47 _i_44_47)))))) (begin (_check! (fixnum? _i_26_29) 41 _v_26_29 _i_26_29 _x_26_29) (_check! (vector? _v_26_29) 41 _v_26_29 _i_26_29 _x_26_29) (_check! (<:fix:fix _i_26_29 (vector-length:vec _v_26_29)) 41 _v_26_29 _i_26_29 _x_26_29) (_check! (>=:fix:fix _i_26_29 0) 41 _v_26_29 _i_26_29 _x_26_29) (vector-set!:trusted _v_26_29 _i_26_29 _x_26_29)))))) (_available-kill!_2 _available_1 _k_1))))) 'available-kill!))
(let () (begin (set! available-intersect! (lambda (_available0_1 _available1_1 _available2_1) (let ((_available-intersect!_2 0)) (begin (set! _available-intersect!_2 (lambda (_available0_3 _available1_3 _available2_3) (begin (let ((_v_4_7 _available0_3) (_i_4_7 0) (_x_4_7 (intersection (let ((_v_8_11 _available1_3) (_i_8_11 0)) (begin (_check! (fixnum? _i_8_11) 40 _v_8_11 _i_8_11) (_check! (vector? _v_8_11) 40 _v_8_11 _i_8_11) (_check! (<:fix:fix _i_8_11 (vector-length:vec _v_8_11)) 40 _v_8_11 _i_8_11) (_check! (>=:fix:fix _i_8_11 0) 40 _v_8_11 _i_8_11) (vector-ref:trusted _v_8_11 _i_8_11))) (let ((_v_12_15 _available2_3) (_i_12_15 0)) (begin (_check! (fixnum? _i_12_15) 40 _v_12_15 _i_12_15) (_check! (vector? _v_12_15) 40 _v_12_15 _i_12_15) (_check! (<:fix:fix _i_12_15 (vector-length:vec _v_12_15)) 40 _v_12_15 _i_12_15) (_check! (>=:fix:fix _i_12_15 0) 40 _v_12_15 _i_12_15) (vector-ref:trusted _v_12_15 _i_12_15)))))) (begin (_check! (fixnum? _i_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (vector? _v_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (>=:fix:fix _i_4_7 0) 41 _v_4_7 _i_4_7 _x_4_7) (vector-set!:trusted _v_4_7 _i_4_7 _x_4_7))) (let ((_v_16_19 _available0_3) (_i_16_19 1) (_x_16_19 (intersection (let ((_v_20_23 _available1_3) (_i_20_23 1)) (begin (_check! (fixnum? _i_20_23) 40 _v_20_23 _i_20_23) (_check! (vector? _v_20_23) 40 _v_20_23 _i_20_23) (_check! (<:fix:fix _i_20_23 (vector-length:vec _v_20_23)) 40 _v_20_23 _i_20_23) (_check! (>=:fix:fix _i_20_23 0) 40 _v_20_23 _i_20_23) (vector-ref:trusted _v_20_23 _i_20_23))) (let ((_v_24_27 _available2_3) (_i_24_27 1)) (begin (_check! (fixnum? _i_24_27) 40 _v_24_27 _i_24_27) (_check! (vector? _v_24_27) 40 _v_24_27 _i_24_27) (_check! (<:fix:fix _i_24_27 (vector-length:vec _v_24_27)) 40 _v_24_27 _i_24_27) (_check! (>=:fix:fix _i_24_27 0) 40 _v_24_27 _i_24_27) (vector-ref:trusted _v_24_27 _i_24_27)))))) (begin (_check! (fixnum? _i_16_19) 41 _v_16_19 _i_16_19 _x_16_19) (_check! (vector? _v_16_19) 41 _v_16_19 _i_16_19 _x_16_19) (_check! (<:fix:fix _i_16_19 (vector-length:vec _v_16_19)) 41 _v_16_19 _i_16_19 _x_16_19) (_check! (>=:fix:fix _i_16_19 0) 41 _v_16_19 _i_16_19 _x_16_19) (vector-set!:trusted _v_16_19 _i_16_19 _x_16_19)))))) (_available-intersect!_2 _available0_1 _available1_1 _available2_1))))) 'available-intersect!))
(let () (begin (set! available:killer:globals 2) 'available:killer:globals))
(let () (begin (set! available:killer:car 4) 'available:killer:car))
(let () (begin (set! available:killer:cdr 8) 'available:killer:cdr))
(let () (begin (set! available:killer:string 16) 'available:killer:string))
(let () (begin (set! available:killer:vector 32) 'available:killer:vector))
(let () (begin (set! available:killer:cell 64) 'available:killer:cell))
(let () (begin (set! available:killer:io 128) 'available:killer:io))
(let () (begin (set! available:killer:none 0) 'available:killer:none))
(let () (begin (set! available:killer:all 1022) 'available:killer:all))
(let () (begin (set! available:killer:immortal 0) 'available:killer:immortal))
(let () (begin (set! available:killer:dead 1023) 'available:killer:dead))
(let () (begin (set! available:killer-combine (lambda (_k1_1 _k2_1) (let ((_available:killer-combine_2 0)) (begin (set! _available:killer-combine_2 (lambda (_k1_3 _k2_3) (logior _k1_3 _k2_3))) (_available:killer-combine_2 _k1_1 _k2_1))))) 'available:killer-combine))
(let () (begin (set! simple-lambda? (lambda (_l_1) (let ((_simple-lambda?_2 0)) (begin (set! _simple-lambda?_2 (lambda (_l_3) (if (null? (lambda_defs _l_3)) (every? (lambda (_decl_6) (eq? _decl_6 a-normal-form-declaration)) (lambda_decls _l_3)) #f))) (_simple-lambda?_2 _l_1))))) 'simple-lambda?))
(let () (begin (set! real-call? (lambda (_e_1) (let ((_real-call?_2 0)) (begin (set! _real-call?_2 (lambda (_e_3) (if (call? _e_3) (let ((_proc_8 (call_proc _e_3))) (if (not (lambda? _proc_8)) (let ((_temp_11_14 (not (variable? _proc_8)))) (if _temp_11_14 _temp_11_14 (let* ((_f_18 (variable_name _proc_8)) (_temp_19_22 (not (integrate-usual-procedures)))) (if _temp_19_22 _temp_19_22 (not (prim-entry _f_18)))))) #f)) #f))) (_real-call?_2 _e_1))))) 'real-call?))
(let () (begin (set! prim-call (lambda (_e_1) (let ((_prim-call_2 0)) (begin (set! _prim-call_2 (lambda (_e_3) (if (call? _e_3) (let ((_proc_8 (call_proc _e_3))) (if (variable? _proc_8) (if (integrate-usual-procedures) (prim-entry (variable_name _proc_8)) #f) #f)) #f))) (_prim-call_2 _e_1))))) 'prim-call))
(let () (begin (set! no-side-effects? (lambda (_e_1) (let ((_no-side-effects?_2 0)) (begin (set! _no-side-effects?_2 (lambda (_e_3) (let ((_temp_4_7 (constant? _e_3))) (if _temp_4_7 _temp_4_7 (let ((_temp_8_11 (variable? _e_3))) (if _temp_8_11 _temp_8_11 (let ((_temp_12_15 (lambda? _e_3))) (if _temp_12_15 _temp_12_15 (let ((_temp_16_19 (if (conditional? _e_3) (if (_no-side-effects?_2 (if_test _e_3)) (if (_no-side-effects?_2 (if_then _e_3)) (_no-side-effects?_2 (if_else _e_3)) #f) #f) #f))) (if _temp_16_19 _temp_16_19 (if (call? _e_3) (let ((_proc_25 (call_proc _e_3))) (if (variable? _proc_25) (if (integrate-usual-procedures) (let ((_entry_31 (prim-entry (variable_name _proc_25)))) (if _entry_31 (not (eq? available:killer:dead (prim-lives-until _entry_31))) #f)) #f) #f)) #f))))))))))) (_no-side-effects?_2 _e_1))))) 'no-side-effects?))
(let () (begin (set! temporary-used-once? (lambda (_t_1 _e_1 _used-once_1) (let ((_temporary-used-once?_2 0)) (begin (set! _temporary-used-once?_2 (lambda (_t_3 _e_3 _used-once_3) (if (call? _e_3) (let ((_proc_7 (call_proc _e_3)) (_args_7 (call_args _e_3))) (let ((_temp_8_11 (if (lambda? _proc_7) (if (not (memq _t_3 (lambda_f _proc_7))) (if (pair? _args_7) (if (null? (let ((_x_47_50 _args_7)) (begin (_check! (pair? _x_47_50) 1 _x_47_50) (cdr:pair _x_47_50)))) (_temporary-used-once?_2 _t_3 (let ((_x_52_55 _args_7)) (begin (_check! (pair? _x_52_55) 0 _x_52_55) (car:pair _x_52_55))) _used-once_3) #f) #f) #f) #f))) (if _temp_8_11 _temp_8_11 (let () (let ((_loop_13_16_19 (unspecified))) (begin (set! _loop_13_16_19 (lambda (_exprs_20 _n_20) (if (let ((_temp_22_25 (null? _exprs_20))) (if _temp_22_25 _temp_22_25 (> _n_20 1))) (= _n_20 1) (begin #t (_loop_13_16_19 (let ((_x_28_31 _exprs_20)) (begin (_check! (pair? _x_28_31) 1 _x_28_31) (cdr:pair _x_28_31))) (let ((_exp_34 (let ((_x_38_41 _exprs_20)) (begin (_check! (pair? _x_38_41) 0 _x_38_41) (car:pair _x_38_41))))) (if (constant? _exp_34) _n_20 (if (variable? _exp_34) (if (eq? _t_3 (variable_name _exp_34)) (+ _n_20 1) _n_20) 2)))))))) (_loop_13_16_19 (cons _proc_7 (call_args _e_3)) 0))))))) (memq _t_3 _used-once_3)))) (_temporary-used-once?_2 _t_1 _e_1 _used-once_1))))) 'temporary-used-once?))
(let () (begin (set! make-regbinding (lambda (_lhs_1 _rhs_1 _use_1) (let ((_make-regbinding_2 0)) (begin (set! _make-regbinding_2 (lambda (_lhs_3 _rhs_3 _use_3) (let* ((_t1_4_7 _lhs_3) (_t2_4_10 (let* ((_t1_14_17 _rhs_3) (_t2_14_20 (cons _use_3 '()))) (let () (cons _t1_14_17 _t2_14_20))))) (let () (cons _t1_4_7 _t2_4_10))))) (_make-regbinding_2 _lhs_1 _rhs_1 _use_1))))) 'make-regbinding))
(let () (begin (set! regbinding_lhs (lambda (_x_1) (let ((_regbinding_lhs_2 0)) (begin (set! _regbinding_lhs_2 (lambda (_x_3) (let ((_x_4_7 _x_3)) (begin (_check! (pair? _x_4_7) 0 _x_4_7) (car:pair _x_4_7))))) (_regbinding_lhs_2 _x_1))))) 'regbinding_lhs))
(let () (begin (set! regbinding_rhs (lambda (_x_1) (let ((_regbinding_rhs_2 0)) (begin (set! _regbinding_rhs_2 (lambda (_x_3) (let ((_x_5_8 (let ((_x_9_12 _x_3)) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))))) (_regbinding_rhs_2 _x_1))))) 'regbinding_rhs))
(let () (begin (set! regbinding_use (lambda (_x_1) (let ((_regbinding_use_2 0)) (begin (set! _regbinding_use_2 (lambda (_x_3) (let ((_x_5_8 (let ((_x_9_12 (let ((_x_13_16 _x_3)) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))))) (_regbinding_use_2 _x_1))))) 'regbinding_use))
(let () (begin (set! wrap-with-register-bindings (lambda (_regbindings_1 _e_1 _f_1) (let ((_wrap-with-register-bindings_2 0)) (begin (set! _wrap-with-register-bindings_2 (lambda (_regbindings_3 _e_3 _f_3) (if (null? _regbindings_3) (values _e_3 _f_3) (let* ((_regbinding_6 (let ((_x_25_28 _regbindings_3)) (begin (_check! (pair? _x_25_28) 0 _x_25_28) (car:pair _x_25_28)))) (_r_9 (regbinding_lhs _regbinding_6)) (_x_12 (regbinding_rhs _regbinding_6))) (let () (_wrap-with-register-bindings_2 (let ((_x_16_19 _regbindings_3)) (begin (_check! (pair? _x_16_19) 1 _x_16_19) (cdr:pair _x_16_19))) (make-call (make-lambda (cons _r_9 '()) '() '() _f_3 _f_3 (cons a-normal-form-declaration '()) #f _e_3) (cons (make-variable _x_12) '())) (union (cons _x_12 '()) (difference _f_3 (cons _r_9 '()))))))))) (_wrap-with-register-bindings_2 _regbindings_1 _e_1 _f_1))))) 'wrap-with-register-bindings))
(let () (begin (set! register-bindings (lambda (_regbindings_1 _x_1) (let ((_register-bindings_2 0)) (begin (set! _register-bindings_2 (lambda (_regbindings_3 _x_3) (let ((_loop_4 (unspecified))) (begin (set! _loop_4 (lambda (_regbindings_5 _to-x_5 _others_5) (if (null? _regbindings_5) (values _to-x_5 _others_5) (if (eq? _x_3 (regbinding_rhs (let ((_x_8_11 _regbindings_5)) (begin (_check! (pair? _x_8_11) 0 _x_8_11) (car:pair _x_8_11))))) (_loop_4 (let ((_x_12_15 _regbindings_5)) (begin (_check! (pair? _x_12_15) 1 _x_12_15) (cdr:pair _x_12_15))) (cons (let ((_x_16_19 _regbindings_5)) (begin (_check! (pair? _x_16_19) 0 _x_16_19) (car:pair _x_16_19))) _to-x_5) _others_5) (_loop_4 (let ((_x_21_24 _regbindings_5)) (begin (_check! (pair? _x_21_24) 1 _x_21_24) (cdr:pair _x_21_24))) _to-x_5 (cons (let ((_x_25_28 _regbindings_5)) (begin (_check! (pair? _x_25_28) 0 _x_25_28) (car:pair _x_25_28))) _others_5)))))) (_loop_4 _regbindings_3 '() '()))))) (_register-bindings_2 _regbindings_1 _x_1))))) 'register-bindings))
(let () (begin (set! declaration-error (lambda (_e_1) (let ((_declaration-error_2 0)) (begin (set! _declaration-error_2 (lambda (_e_3) (if (issue-warnings) (begin (display "WARNING: Assertion is false: ") (write (make-readable _e_3 #t)) (newline)) (unspecified)))) (_declaration-error_2 _e_1))))) 'declaration-error))
(let () (begin (set! *nreps* 0) '*nreps*))
(let () (begin (set! *rep-encodings* '()) '*rep-encodings*))
(let () (begin (set! *rep-decodings* '()) '*rep-decodings*))
(let () (begin (set! *rep-subtypes* '()) '*rep-subtypes*))
(let () (begin (set! *rep-joins* (make-bytevector 0)) '*rep-joins*))
(let () (begin (set! *rep-meets* (make-bytevector 0)) '*rep-meets*))
(let () (begin (set! *rep-joins-special* '#()) '*rep-joins-special*))
(let () (begin (set! *rep-meets-special* '#()) '*rep-meets-special*))
(let () (begin (set! representation-error (lambda (_msg_1 _ _stuff_1) (apply error (if (string? _msg_1) (string-append "Bug in flow analysis: " _msg_1) _msg_1) _stuff_1))) 'representation-error))
(let () (begin (set! symbol->rep (lambda (_sym_1) (let ((_symbol->rep_2 0)) (begin (set! _symbol->rep_2 (lambda (_sym_3) (let ((_probe_6 (assq _sym_3 *rep-encodings*))) (if _probe_6 (let ((_x_7_10 _probe_6)) (begin (_check! (pair? _x_7_10) 1 _x_7_10) (cdr:pair _x_7_10))) (let ((_rep_13 *nreps*)) (begin (set! *nreps* (+ *nreps* 1)) (if (> *nreps* 255) (representation-error "Too many representation types") (unspecified)) (set! *rep-encodings* (cons (cons _sym_3 _rep_13) *rep-encodings*)) (set! *rep-decodings* (cons (cons _rep_13 _sym_3) *rep-decodings*)) _rep_13)))))) (_symbol->rep_2 _sym_1))))) 'symbol->rep))
(let () (begin (set! rep->symbol (lambda (_rep_1) (let ((_rep->symbol_2 0)) (begin (set! _rep->symbol_2 (lambda (_rep_3) (if (pair? _rep_3) (cons (_rep->symbol_2 (let ((_x_4_7 _rep_3)) (begin (_check! (pair? _x_4_7) 0 _x_4_7) (car:pair _x_4_7)))) (let ((_x_8_11 _rep_3)) (begin (_check! (pair? _x_8_11) 1 _x_8_11) (cdr:pair _x_8_11)))) (let ((_probe_14 (assv _rep_3 *rep-decodings*))) (if _probe_14 (let ((_x_15_18 _probe_14)) (begin (_check! (pair? _x_15_18) 1 _x_15_18) (cdr:pair _x_15_18))) 'unknown))))) (_rep->symbol_2 _rep_1))))) 'rep->symbol))
(let () (begin (set! representation-table (lambda (_table_1) (let ((_representation-table_2 0)) (begin (set! _representation-table_2 (lambda (_table_3) (let () (let ((_loop_9_12_15 (unspecified))) (begin (set! _loop_9_12_15 (lambda (_y1_4_5_16 _results_4_8_16) (if (null? _y1_4_5_16) (reverse _results_4_8_16) (begin #t (_loop_9_12_15 (let ((_x_20_23 _y1_4_5_16)) (begin (_check! (pair? _x_20_23) 1 _x_20_23) (cdr:pair _x_20_23))) (cons (let ((_row_24 (let ((_x_74_77 _y1_4_5_16)) (begin (_check! (pair? _x_74_77) 0 _x_74_77) (car:pair _x_74_77))))) (let () (let ((_loop_30_33_36 (unspecified))) (begin (set! _loop_30_33_36 (lambda (_y1_25_26_37 _results_25_29_37) (if (null? _y1_25_26_37) (reverse _results_25_29_37) (begin #t (_loop_30_33_36 (let ((_x_41_44 _y1_25_26_37)) (begin (_check! (pair? _x_41_44) 1 _x_41_44) (cdr:pair _x_41_44))) (cons (let ((_x_45 (let ((_x_70_73 _y1_25_26_37)) (begin (_check! (pair? _x_70_73) 0 _x_70_73) (car:pair _x_70_73))))) (if (list? _x_45) (let () (let ((_loop_51_54_57 (unspecified))) (begin (set! _loop_51_54_57 (lambda (_y1_46_47_58 _results_46_50_58) (if (null? _y1_46_47_58) (reverse _results_46_50_58) (begin #t (_loop_51_54_57 (let ((_x_62_65 _y1_46_47_58)) (begin (_check! (pair? _x_62_65) 1 _x_62_65) (cdr:pair _x_62_65))) (cons (symbol->rep (let ((_x_66_69 _y1_46_47_58)) (begin (_check! (pair? _x_66_69) 0 _x_66_69) (car:pair _x_66_69)))) _results_46_50_58)))))) (_loop_51_54_57 _x_45 '())))) _x_45)) _results_25_29_37)))))) (_loop_30_33_36 _row_24 '()))))) _results_4_8_16)))))) (_loop_9_12_15 _table_3 '())))))) (_representation-table_2 _table_1))))) 'representation-table))
(let () (begin (set! define-subtype (lambda (_sym1_1 _sym2_1) (let ((_define-subtype_2 0)) (begin (set! _define-subtype_2 (lambda (_sym1_3 _sym2_3) (let* ((_rep2_6 (symbol->rep _sym2_3)) (_rep1_9 (symbol->rep _sym1_3))) (let () (begin (set! *rep-subtypes* (cons (cons _rep1_9 _rep2_6) *rep-subtypes*)) _sym1_3))))) (_define-subtype_2 _sym1_1 _sym2_1))))) 'define-subtype))
(let () (begin (set! define-intersection (lambda (_sym1_1 _sym2_1 _sym3_1) (let ((_define-intersection_2 0)) (begin (set! _define-intersection_2 (lambda (_sym1_3 _sym2_3 _sym3_3) (let ((_rep1_6 (symbol->rep _sym1_3)) (_rep2_6 (symbol->rep _sym2_3)) (_rep3_6 (symbol->rep _sym3_3))) (begin (representation-aset! *rep-meets* _rep1_6 _rep2_6 _rep3_6) (representation-aset! *rep-meets* _rep2_6 _rep1_6 _rep3_6))))) (_define-intersection_2 _sym1_1 _sym2_1 _sym3_1))))) 'define-intersection))
(let () (begin (set! representation-aref (lambda (_bv_1 _i_1 _j_1) (let ((_representation-aref_2 0)) (begin (set! _representation-aref_2 (lambda (_bv_3 _i_3 _j_3) (bytevector-ref _bv_3 (+ (* *nreps* _i_3) _j_3)))) (_representation-aref_2 _bv_1 _i_1 _j_1))))) 'representation-aref))
(let () (begin (set! representation-aset! (lambda (_bv_1 _i_1 _j_1 _x_1) (let ((_representation-aset!_2 0)) (begin (set! _representation-aset!_2 (lambda (_bv_3 _i_3 _j_3 _x_3) (bytevector-set! _bv_3 (+ (* *nreps* _i_3) _j_3) _x_3))) (_representation-aset!_2 _bv_1 _i_1 _j_1 _x_1))))) 'representation-aset!))
(let () (begin (set! compute-unions! (lambda () (let ((_compute-unions!_2 0)) (begin (set! _compute-unions!_2 (lambda () (begin (let () (let ((_loop_9_11_14 (unspecified))) (begin (set! _loop_9_11_14 (lambda (_y1_4_5_15) (if (null? _y1_4_5_15) (if #f #f (unspecified)) (begin (begin #t (let ((_sym_19 (let ((_x_20_23 _y1_4_5_15)) (begin (_check! (pair? _x_20_23) 0 _x_20_23) (car:pair _x_20_23))))) (define-subtype 'bottom _sym_19))) (_loop_9_11_14 (let ((_x_24_27 _y1_4_5_15)) (begin (_check! (pair? _x_24_27) 1 _x_24_27) (cdr:pair _x_24_27)))))))) (_loop_9_11_14 (let () (let ((_loop_33_36_39 (unspecified))) (begin (set! _loop_33_36_39 (lambda (_y1_28_29_40 _results_28_32_40) (if (null? _y1_28_29_40) (reverse _results_28_32_40) (begin #t (_loop_33_36_39 (let ((_x_44_47 _y1_28_29_40)) (begin (_check! (pair? _x_44_47) 1 _x_44_47) (cdr:pair _x_44_47))) (cons (let ((_x_48_51 (let ((_x_52_55 _y1_28_29_40)) (begin (_check! (pair? _x_52_55) 0 _x_52_55) (car:pair _x_52_55))))) (begin (_check! (pair? _x_48_51) 0 _x_48_51) (car:pair _x_48_51))) _results_28_32_40)))))) (_loop_33_36_39 *rep-encodings* '())))))))) (let* ((_debugging?_58 #f) (_n_61 *nreps*) (_n^2_64 (* _n_61 _n_61)) (_matrix_67 (make-bytevector _n^2_64))) (let () (let ((_compute-joins!_73 (unspecified)) (_compute-transitive-closure!_73 (unspecified)) (_join_73 (unspecified)) (_lub_73 (unspecified))) (begin (set! _compute-joins!_73 (lambda () (begin (let ((_default_77 (lambda (_x_78 _y_78) (error "Compiler bug: special meet or join" _x_78 _y_78)))) (begin (set! *rep-joins-special* (make-vector _n_61 _default_77)) (set! *rep-meets-special* (make-vector _n_61 _default_77)))) (set! *rep-joins* (make-bytevector _n^2_64)) (set! *rep-meets* (make-bytevector _n^2_64)) (let () (let ((_loop_80_82_85 (unspecified))) (begin (set! _loop_80_82_85 (lambda (_i_86) (if (= _i_86 _n_61) (if #f #f (unspecified)) (begin (begin #t (let () (let ((_loop_90_92_95 (unspecified))) (begin (set! _loop_90_92_95 (lambda (_j_96) (if (= _j_96 _n_61) (if #f #f (unspecified)) (begin (begin #t (representation-aset! *rep-joins* _i_86 _j_96 (_join_73 _i_86 _j_96))) (_loop_90_92_95 (+ _j_96 1)))))) (_loop_90_92_95 0))))) (_loop_80_82_85 (+ _i_86 1)))))) (_loop_80_82_85 0))))))) (set! _compute-transitive-closure!_73 (lambda () (let* ((_changed?_102 #f) (_loop_103 (unspecified))) (begin (set! _loop_103 (lambda () (begin (let () (let ((_loop_106_108_111 (unspecified))) (begin (set! _loop_106_108_111 (lambda (_i_112) (if (= _i_112 _n_61) (if #f #f (unspecified)) (begin (begin #t (let () (let ((_loop_116_118_121 (unspecified))) (begin (set! _loop_116_118_121 (lambda (_k_122) (if (= _k_122 _n_61) (if #f #f (unspecified)) (begin (begin #t (let () (let ((_loop_125_128_131 (unspecified))) (begin (set! _loop_125_128_131 (lambda (_j_132 _sum_132) (if (= _j_132 _n_61) (if (> _sum_132 0) (let ((_x_136 (representation-aref _matrix_67 _i_112 _k_122))) (if (zero? _x_136) (begin (set! _changed?_102 #t) (representation-aset! _matrix_67 _i_112 _k_122 1)) (unspecified))) (unspecified)) (begin #t (_loop_125_128_131 (+ _j_132 1) (logior _sum_132 (logand (representation-aref _matrix_67 _i_112 _j_132) (representation-aref _matrix_67 _j_132 _k_122)))))))) (_loop_125_128_131 0 0))))) (_loop_116_118_121 (+ _k_122 1)))))) (_loop_116_118_121 0))))) (_loop_106_108_111 (+ _i_112 1)))))) (_loop_106_108_111 0)))) (if _changed?_102 (begin (set! _changed?_102 #f) (_loop_103)) (unspecified))))) (_loop_103))))) (set! _join_73 (lambda (_i_138 _j_138) (_lub_73 _i_138 _j_138 (lambda (_rep1_139 _rep2_139) (= 1 (representation-aref _matrix_67 _rep1_139 _rep2_139)))))) (set! _lub_73 (lambda (_rep1_140 _rep2_140 _subtype?_140) (let () (let ((_loop_141_144_147 (unspecified))) (begin (set! _loop_141_144_147 (lambda (_i_148 _bounds_148) (if (= _i_148 _n_61) (let ((_x_150_153 (twobit-sort _subtype?_140 _bounds_148))) (begin (_check! (pair? _x_150_153) 0 _x_150_153) (car:pair _x_150_153))) (begin #t (_loop_141_144_147 (+ _i_148 1) (if (if (_subtype?_140 _rep1_140 _i_148) (_subtype?_140 _rep2_140 _i_148) #f) (cons _i_148 _bounds_148) _bounds_148)))))) (_loop_141_144_147 0 '())))))) (let () (let ((_loop_72_158_161 (unspecified))) (begin (set! _loop_72_158_161 (lambda (_i_162) (if (= _i_162 _n_61) (if #f #f (unspecified)) (begin (begin #t (let () (let ((_loop_166_168_171 (unspecified))) (begin (set! _loop_166_168_171 (lambda (_j_172) (if (= _j_172 _n_61) (if #f #f (unspecified)) (begin (begin #t (representation-aset! _matrix_67 _i_162 _j_172 0)) (_loop_166_168_171 (+ _j_172 1)))))) (_loop_166_168_171 0)))) (representation-aset! _matrix_67 _i_162 _i_162 1)) (_loop_72_158_161 (+ _i_162 1)))))) (_loop_72_158_161 0)))) (let () (let ((_loop_180_182_185 (unspecified))) (begin (set! _loop_180_182_185 (lambda (_y1_175_176_186) (if (null? _y1_175_176_186) (if #f #f (unspecified)) (begin (begin #t (let ((_subtype_190 (let ((_x_202_205 _y1_175_176_186)) (begin (_check! (pair? _x_202_205) 0 _x_202_205) (car:pair _x_202_205))))) (let ((_rep1_193 (let ((_x_194_197 _subtype_190)) (begin (_check! (pair? _x_194_197) 0 _x_194_197) (car:pair _x_194_197)))) (_rep2_193 (let ((_x_198_201 _subtype_190)) (begin (_check! (pair? _x_198_201) 1 _x_198_201) (cdr:pair _x_198_201))))) (representation-aset! _matrix_67 _rep1_193 _rep2_193 1)))) (_loop_180_182_185 (let ((_x_206_209 _y1_175_176_186)) (begin (_check! (pair? _x_206_209) 1 _x_206_209) (cdr:pair _x_206_209)))))))) (_loop_180_182_185 *rep-subtypes*)))) (_compute-transitive-closure!_73) (if _debugging?_58 (let () (let ((_loop_211_213_216 (unspecified))) (begin (set! _loop_211_213_216 (lambda (_i_217) (if (= _i_217 _n_61) (if #f #f (unspecified)) (begin (begin #t (let () (let ((_loop_221_223_226 (unspecified))) (begin (set! _loop_221_223_226 (lambda (_j_227) (if (= _j_227 _n_61) (if #f #f (unspecified)) (begin (begin #t (write-char #\space) (write (representation-aref _matrix_67 _i_217 _j_227))) (_loop_221_223_226 (+ _j_227 1)))))) (_loop_221_223_226 0)))) (newline)) (_loop_211_213_216 (+ _i_217 1)))))) (_loop_211_213_216 0)))) (unspecified)) (_compute-joins!_73) (set! *rep-subtypes* '())))))))) (_compute-unions!_2))))) 'compute-unions!))
(let () (begin (set! compute-intersections! (lambda () (let ((_compute-intersections!_2 0)) (begin (set! _compute-intersections!_2 (lambda () (let* ((_n_6 *nreps*) (_meet_9 (unspecified))) (begin (set! _meet_9 (lambda (_i_10 _j_10) (let ((_k_13 (representation-union _i_10 _j_10))) (if (= _i_10 _k_13) _j_10 _i_10)))) (let () (let ((_loop_8_15_18 (unspecified))) (begin (set! _loop_8_15_18 (lambda (_i_19) (if (= _i_19 _n_6) (if #f #f (unspecified)) (begin (begin #t (let () (let ((_loop_23_25_28 (unspecified))) (begin (set! _loop_23_25_28 (lambda (_j_29) (if (= _j_29 _n_6) (if #f #f (unspecified)) (begin (begin #t (representation-aset! *rep-meets* _i_19 _j_29 (_meet_9 _i_19 _j_29))) (_loop_23_25_28 (+ _j_29 1)))))) (_loop_23_25_28 0))))) (_loop_8_15_18 (+ _i_19 1)))))) (_loop_8_15_18 0)))))))) (_compute-intersections!_2))))) 'compute-intersections!))
(let () (begin (set! compute-type-structure! (lambda () (let ((_compute-type-structure!_2 0)) (begin (set! _compute-type-structure!_2 (lambda () (begin (compute-unions!) (compute-intersections!)))) (_compute-type-structure!_2))))) 'compute-type-structure!))
(let () (begin (set! representation-subtype? (lambda (_rep1_1 _rep2_1) (let ((_representation-subtype?_2 0)) (begin (set! _representation-subtype?_2 (lambda (_rep1_3 _rep2_3) (equal? _rep2_3 (representation-union _rep1_3 _rep2_3)))) (_representation-subtype?_2 _rep1_1 _rep2_1))))) 'representation-subtype?))
(let () (begin (set! representation-union (lambda (_rep1_1 _rep2_1) (let ((_representation-union_2 0)) (begin (set! _representation-union_2 (lambda (_rep1_3 _rep2_3) (if (fixnum? _rep1_3) (if (fixnum? _rep2_3) (representation-aref *rep-joins* _rep1_3 _rep2_3) (_representation-union_2 _rep1_3 (let ((_x_4_7 _rep2_3)) (begin (_check! (pair? _x_4_7) 0 _x_4_7) (car:pair _x_4_7))))) (if (fixnum? _rep2_3) (_representation-union_2 (let ((_x_8_11 _rep1_3)) (begin (_check! (pair? _x_8_11) 0 _x_8_11) (car:pair _x_8_11))) _rep2_3) (let ((_r1_14 (let ((_x_19_22 _rep1_3)) (begin (_check! (pair? _x_19_22) 0 _x_19_22) (car:pair _x_19_22)))) (_r2_14 (let ((_x_23_26 _rep2_3)) (begin (_check! (pair? _x_23_26) 0 _x_23_26) (car:pair _x_23_26))))) (if (= _r1_14 _r2_14) ((let ((_v_15_18 *rep-joins-special*) (_i_15_18 _r1_14)) (begin (_check! (fixnum? _i_15_18) 40 _v_15_18 _i_15_18) (_check! (vector? _v_15_18) 40 _v_15_18 _i_15_18) (_check! (<:fix:fix _i_15_18 (vector-length:vec _v_15_18)) 40 _v_15_18 _i_15_18) (_check! (>=:fix:fix _i_15_18 0) 40 _v_15_18 _i_15_18) (vector-ref:trusted _v_15_18 _i_15_18))) _rep1_3 _rep2_3) (_representation-union_2 _r1_14 _r2_14))))))) (_representation-union_2 _rep1_1 _rep2_1))))) 'representation-union))
(let () (begin (set! representation-intersection (lambda (_rep1_1 _rep2_1) (let ((_representation-intersection_2 0)) (begin (set! _representation-intersection_2 (lambda (_rep1_3 _rep2_3) (if (fixnum? _rep1_3) (if (fixnum? _rep2_3) (representation-aref *rep-meets* _rep1_3 _rep2_3) (_representation-intersection_2 _rep1_3 (let ((_x_4_7 _rep2_3)) (begin (_check! (pair? _x_4_7) 0 _x_4_7) (car:pair _x_4_7))))) (if (fixnum? _rep2_3) (_representation-intersection_2 (let ((_x_8_11 _rep1_3)) (begin (_check! (pair? _x_8_11) 0 _x_8_11) (car:pair _x_8_11))) _rep2_3) (let ((_r1_14 (let ((_x_19_22 _rep1_3)) (begin (_check! (pair? _x_19_22) 0 _x_19_22) (car:pair _x_19_22)))) (_r2_14 (let ((_x_23_26 _rep2_3)) (begin (_check! (pair? _x_23_26) 0 _x_23_26) (car:pair _x_23_26))))) (if (= _r1_14 _r2_14) ((let ((_v_15_18 *rep-meets-special*) (_i_15_18 _r1_14)) (begin (_check! (fixnum? _i_15_18) 40 _v_15_18 _i_15_18) (_check! (vector? _v_15_18) 40 _v_15_18 _i_15_18) (_check! (<:fix:fix _i_15_18 (vector-length:vec _v_15_18)) 40 _v_15_18 _i_15_18) (_check! (>=:fix:fix _i_15_18 0) 40 _v_15_18 _i_15_18) (vector-ref:trusted _v_15_18 _i_15_18))) _rep1_3 _rep2_3) (_representation-intersection_2 _r1_14 _r2_14))))))) (_representation-intersection_2 _rep1_1 _rep2_1))))) 'representation-intersection))
(let () (begin (set! display-unions-and-intersections (lambda () (let ((_display-unions-and-intersections_2 0)) (begin (set! _display-unions-and-intersections_2 (lambda () (let* ((_column-width_6 10) (_columns/row_9 (quotient 80 _column-width_6))) (let () (let ((_display-matrix_13 (unspecified)) (_display-symbol_13 (unspecified))) (begin (set! _display-matrix_13 (lambda (_f_14 _i_14 _n_14) (begin (display (make-string _column-width_6 #\space)) (let () (let ((_loop_16_18_21 (unspecified))) (begin (set! _loop_16_18_21 (lambda (_i_22) (if (= _i_22 _n_14) (if #f #f (unspecified)) (begin (begin #t (_display-symbol_13 (rep->symbol _i_22))) (_loop_16_18_21 (+ _i_22 1)))))) (_loop_16_18_21 _i_14)))) (newline) (newline) (let () (let ((_loop_26_28_31 (unspecified))) (begin (set! _loop_26_28_31 (lambda (_k_32) (if (= _k_32 *nreps*) (if #f #f (unspecified)) (begin (begin #t (_display-symbol_13 (rep->symbol _k_32)) (let () (let ((_loop_36_38_41 (unspecified))) (begin (set! _loop_36_38_41 (lambda (_i_42) (if (= _i_42 _n_14) (if #f #f (unspecified)) (begin (begin #t (_display-symbol_13 (rep->symbol (_f_14 _k_32 _i_42)))) (_loop_36_38_41 (+ _i_42 1)))))) (_loop_36_38_41 _i_14)))) (newline)) (_loop_26_28_31 (+ _k_32 1)))))) (_loop_26_28_31 0)))) (newline) (newline)))) (set! _display-symbol_13 (lambda (_sym_45) (let* ((_s_48 (symbol->string _sym_45)) (_n_51 (string-length _s_48))) (let () (if (< _n_51 _column-width_6) (begin (display _s_48) (display (make-string (- _column-width_6 _n_51) #\space))) (begin (display (substring _s_48 0 (- _column-width_6 1))) (write-char #\space))))))) (display "Unions:") (newline) (newline) (let () (let ((_loop_56_58_61 (unspecified))) (begin (set! _loop_56_58_61 (lambda (_i_62) (if (>= _i_62 *nreps*) (if #f #f (unspecified)) (begin (begin #t (_display-matrix_13 representation-union _i_62 (min *nreps* (+ _i_62 _columns/row_9)))) (_loop_56_58_61 (+ _i_62 _columns/row_9)))))) (_loop_56_58_61 0)))) (display "Intersections:") (newline) (newline) (let () (let ((_loop_66_68_71 (unspecified))) (begin (set! _loop_66_68_71 (lambda (_i_72) (if (>= _i_72 *nreps*) (if #f #f (unspecified)) (begin (begin #t (_display-matrix_13 representation-intersection _i_72 (min *nreps* (+ _i_72 _columns/row_9)))) (_loop_66_68_71 (+ _i_72 _columns/row_9)))))) (_loop_66_68_71 0)))))))))) (_display-unions-and-intersections_2))))) 'display-unions-and-intersections))
(let () (begin (set! rep-specific? (lambda (_f_1 _rs_1) (let ((_rep-specific?_2 0)) (begin (set! _rep-specific?_2 (lambda (_f_3 _rs_3) (rep-match _f_3 _rs_3 rep-specific caddr))) (_rep-specific?_2 _f_1 _rs_1))))) 'rep-specific?))
(let () (begin (set! rep-result? (lambda (_f_1 _rs_1) (let ((_rep-result?_2 0)) (begin (set! _rep-result?_2 (lambda (_f_3 _rs_3) (rep-match _f_3 _rs_3 rep-result caaddr))) (_rep-result?_2 _f_1 _rs_1))))) 'rep-result?))
(let () (begin (set! rep-if-true (lambda (_f_1 _rs_1) (let ((_rep-if-true_2 0)) (begin (set! _rep-if-true_2 (lambda (_f_3 _rs_3) (rep-match _f_3 _rs_3 rep-informing caddr))) (_rep-if-true_2 _f_1 _rs_1))))) 'rep-if-true))
(let () (begin (set! rep-if-false (lambda (_f_1 _rs_1) (let ((_rep-if-false_2 0)) (begin (set! _rep-if-false_2 (lambda (_f_3 _rs_3) (rep-match _f_3 _rs_3 rep-informing cadddr))) (_rep-if-false_2 _f_1 _rs_1))))) 'rep-if-false))
(let () (begin (set! rep-match (lambda (_f_1 _rs_1 _table_1 _selector_1) (let ((_rep-match_2 0)) (begin (set! _rep-match_2 (lambda (_f_3 _rs_3 _table_3 _selector_3) (let* ((_n_6 (length _rs_3)) (_entries_9 _table_3)) (let () (let ((_loop_12 (unspecified))) (begin (set! _loop_12 (lambda (_entries_13) (if (null? _entries_13) #f (if (eq? _f_3 (let ((_x_16_19 (let ((_x_20_23 _entries_13)) (begin (_check! (pair? _x_20_23) 0 _x_20_23) (car:pair _x_20_23))))) (begin (_check! (pair? _x_16_19) 0 _x_16_19) (car:pair _x_16_19)))) (let ((_rs0_26 (let ((_x_88_91 (let ((_x_92_95 (let ((_x_96_99 _entries_13)) (begin (_check! (pair? _x_96_99) 0 _x_96_99) (car:pair _x_96_99))))) (begin (_check! (pair? _x_92_95) 1 _x_92_95) (cdr:pair _x_92_95))))) (begin (_check! (pair? _x_88_91) 0 _x_88_91) (car:pair _x_88_91))))) (if (if (= _n_6 (length _rs0_26)) (every? (lambda (_r1+r2_29) (let ((_r1_32 (let ((_x_33_36 _r1+r2_29)) (begin (_check! (pair? _x_33_36) 0 _x_33_36) (car:pair _x_33_36)))) (_r2_32 (let ((_x_37_40 _r1+r2_29)) (begin (_check! (pair? _x_37_40) 1 _x_37_40) (cdr:pair _x_37_40))))) (representation-subtype? _r1_32 _r2_32))) (let () (let ((_loop_47_51_54 (unspecified))) (begin (set! _loop_47_51_54 (lambda (_y1_41_43_55 _y1_41_42_55 _results_41_46_55) (if (let ((_temp_57_60 (null? _y1_41_43_55))) (if _temp_57_60 _temp_57_60 (null? _y1_41_42_55))) (reverse _results_41_46_55) (begin #t (_loop_47_51_54 (let ((_x_63_66 _y1_41_43_55)) (begin (_check! (pair? _x_63_66) 1 _x_63_66) (cdr:pair _x_63_66))) (let ((_x_67_70 _y1_41_42_55)) (begin (_check! (pair? _x_67_70) 1 _x_67_70) (cdr:pair _x_67_70))) (cons (cons (let ((_x_71_74 _y1_41_43_55)) (begin (_check! (pair? _x_71_74) 0 _x_71_74) (car:pair _x_71_74))) (let ((_x_75_78 _y1_41_42_55)) (begin (_check! (pair? _x_75_78) 0 _x_75_78) (car:pair _x_75_78)))) _results_41_46_55)))))) (_loop_47_51_54 _rs_3 _rs0_26 '()))))) #f) (_selector_3 (let ((_x_79_82 _entries_13)) (begin (_check! (pair? _x_79_82) 0 _x_79_82) (car:pair _x_79_82)))) (_loop_12 (let ((_x_83_86 _entries_13)) (begin (_check! (pair? _x_83_86) 1 _x_83_86) (cdr:pair _x_83_86)))))) (_loop_12 (let ((_x_101_104 _entries_13)) (begin (_check! (pair? _x_101_104) 1 _x_101_104) (cdr:pair _x_101_104)))))))) (_loop_12 _entries_9))))))) (_rep-match_2 _f_1 _rs_1 _table_1 _selector_1))))) 'rep-match))
(let () (begin (set! aeval (lambda (_e_1 _types_1 _constraints_1) (let ((_aeval_2 0)) (begin (set! _aeval_2 (lambda (_e_3 _types_3 _constraints_3) (if (call? _e_3) (let ((_proc_7 (call_proc _e_3))) (if (variable? _proc_7) (let* ((_op_10 (variable_name _proc_7)) (_argtypes_13 (let () (let ((_loop_25_28_31 (unspecified))) (begin (set! _loop_25_28_31 (lambda (_y1_20_21_32 _results_20_24_32) (if (null? _y1_20_21_32) (reverse _results_20_24_32) (begin #t (_loop_25_28_31 (let ((_x_36_39 _y1_20_21_32)) (begin (_check! (pair? _x_36_39) 1 _x_36_39) (cdr:pair _x_36_39))) (cons (let ((_e_40 (let ((_x_41_44 _y1_20_21_32)) (begin (_check! (pair? _x_41_44) 0 _x_41_44) (car:pair _x_41_44))))) (_aeval_2 _e_40 _types_3 _constraints_3)) _results_20_24_32)))))) (_loop_25_28_31 (call_args _e_3) '()))))) (_type_16 (rep-result? _op_10 _argtypes_13))) (let () (if _type_16 _type_16 rep:object))) rep:object)) (if (variable? _e_3) (representation-typeof (variable_name _e_3) _types_3 _constraints_3) (if (constant? _e_3) (representation-of-value (constant_value _e_3)) rep:object))))) (_aeval_2 _e_1 _types_1 _constraints_1))))) 'aeval))
(let () (begin (set! representation-typeof (lambda (_name_1 _types_1 _constraints_1) (let ((_representation-typeof_2 0)) (begin (set! _representation-typeof_2 (lambda (_name_3 _types_3 _constraints_3) (let ((_t0_6 (hashtable-fetch _types_3 _name_3 rep:object)) (_cs_6 (hashtable-fetch (constraints_table _constraints_3) _name_3 '()))) (let ((_loop_7 (unspecified))) (begin (set! _loop_7 (lambda (_type_8 _cs_8) (if (null? _cs_8) _type_8 (let* ((_c_11 (let ((_x_28_31 _cs_8)) (begin (_check! (pair? _x_28_31) 0 _x_28_31) (car:pair _x_28_31)))) (_cs_14 (let ((_x_24_27 _cs_8)) (begin (_check! (pair? _x_24_27) 1 _x_24_27) (cdr:pair _x_24_27)))) (_e_17 (constraint_rhs _c_11))) (let () (if (constant? _e_17) (_loop_7 (representation-intersection _type_8 (constant_value _e_17)) _cs_14) (if (call? _e_17) (_loop_7 (representation-intersection _type_8 (aeval _e_17 _types_3 _constraints_3)) _cs_14) (_loop_7 _type_8 _cs_14)))))))) (_loop_7 _t0_6 _cs_6)))))) (_representation-typeof_2 _name_1 _types_1 _constraints_1))))) 'representation-typeof))
(let () (begin (set! make-constraint (lambda (_t_1 _e_1 _k_1) (let ((_make-constraint_2 0)) (begin (set! _make-constraint_2 (lambda (_t_3 _e_3 _k_3) (let* ((_t1_4_7 _t_3) (_t2_4_10 (let* ((_t1_14_17 _e_3) (_t2_14_20 (cons _k_3 '()))) (let () (cons _t1_14_17 _t2_14_20))))) (let () (cons _t1_4_7 _t2_4_10))))) (_make-constraint_2 _t_1 _e_1 _k_1))))) 'make-constraint))
(let () (begin (set! constraint_lhs (lambda (_c_1) (let ((_constraint_lhs_2 0)) (begin (set! _constraint_lhs_2 (lambda (_c_3) (let ((_x_4_7 _c_3)) (begin (_check! (pair? _x_4_7) 0 _x_4_7) (car:pair _x_4_7))))) (_constraint_lhs_2 _c_1))))) 'constraint_lhs))
(let () (begin (set! constraint_rhs (lambda (_c_1) (let ((_constraint_rhs_2 0)) (begin (set! _constraint_rhs_2 (lambda (_c_3) (let ((_x_5_8 (let ((_x_9_12 _c_3)) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))))) (_constraint_rhs_2 _c_1))))) 'constraint_rhs))
(let () (begin (set! constraint_killer (lambda (_c_1) (let ((_constraint_killer_2 0)) (begin (set! _constraint_killer_2 (lambda (_c_3) (let ((_x_5_8 (let ((_x_9_12 (let ((_x_13_16 _c_3)) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))))) (_constraint_killer_2 _c_1))))) 'constraint_killer))
(let () (begin (set! make-type-constraint (lambda (_t_1 _type_1 _k_1) (let ((_make-type-constraint_2 0)) (begin (set! _make-type-constraint_2 (lambda (_t_3 _type_3 _k_3) (make-constraint _t_3 (make-constant _type_3) _k_3))) (_make-type-constraint_2 _t_1 _type_1 _k_1))))) 'make-type-constraint))
(let () (begin (set! constraints-add! (lambda (_types_1 _constraints_1 _new_1) (let ((_constraints-add!_2 0)) (begin (set! _constraints-add!_2 (lambda (_types_3 _constraints_3 _new_3) (let* ((_debugging?_6 #f) (_t_9 (constraint_lhs _new_3)) (_e_12 (constraint_rhs _new_3)) (_k_15 (constraint_killer _new_3)) (_cs_18 (constraints-for-variable _constraints_3 _t_9))) (let () (let ((_record-new-reps!_22 (unspecified)) (_loop_22 (unspecified))) (begin (set! _record-new-reps!_22 (lambda (_args_23 _argtypes_23 _reps_23 _k2_23) (begin (if _debugging?_6 (begin (write (let* ((_t1_24_27 (let () (let ((_loop_98_101_104 (unspecified))) (begin (set! _loop_98_101_104 (lambda (_y1_93_94_105 _results_93_97_105) (if (null? _y1_93_94_105) (reverse _results_93_97_105) (begin #t (_loop_98_101_104 (let ((_x_109_112 _y1_93_94_105)) (begin (_check! (pair? _x_109_112) 1 _x_109_112) (cdr:pair _x_109_112))) (cons (make-readable (let ((_x_113_116 _y1_93_94_105)) (begin (_check! (pair? _x_113_116) 0 _x_113_116) (car:pair _x_113_116)))) _results_93_97_105)))))) (_loop_98_101_104 _args_23 '()))))) (_t2_24_30 (let* ((_t1_34_37 (let () (let ((_loop_74_77_80 (unspecified))) (begin (set! _loop_74_77_80 (lambda (_y1_69_70_81 _results_69_73_81) (if (null? _y1_69_70_81) (reverse _results_69_73_81) (begin #t (_loop_74_77_80 (let ((_x_85_88 _y1_69_70_81)) (begin (_check! (pair? _x_85_88) 1 _x_85_88) (cdr:pair _x_85_88))) (cons (rep->symbol (let ((_x_89_92 _y1_69_70_81)) (begin (_check! (pair? _x_89_92) 0 _x_89_92) (car:pair _x_89_92)))) _results_69_73_81)))))) (_loop_74_77_80 _argtypes_23 '()))))) (_t2_34_40 (cons (let () (let ((_loop_50_53_56 (unspecified))) (begin (set! _loop_50_53_56 (lambda (_y1_45_46_57 _results_45_49_57) (if (null? _y1_45_46_57) (reverse _results_45_49_57) (begin #t (_loop_50_53_56 (let ((_x_61_64 _y1_45_46_57)) (begin (_check! (pair? _x_61_64) 1 _x_61_64) (cdr:pair _x_61_64))) (cons (rep->symbol (let ((_x_65_68 _y1_45_46_57)) (begin (_check! (pair? _x_65_68) 0 _x_65_68) (car:pair _x_65_68)))) _results_45_49_57)))))) (_loop_50_53_56 _reps_23 '())))) '()))) (let () (cons _t1_34_37 _t2_34_40))))) (let () (cons _t1_24_27 _t2_24_30)))) (newline)) (unspecified)) (let () (let ((_loop_124_128_131 (unspecified))) (begin (set! _loop_124_128_131 (lambda (_y1_117_120_132 _y1_117_119_132 _y1_117_118_132) (if (let ((_temp_134_137 (null? _y1_117_120_132))) (if _temp_134_137 _temp_134_137 (let ((_temp_138_141 (null? _y1_117_119_132))) (if _temp_138_141 _temp_138_141 (null? _y1_117_118_132))))) (if #f #f (unspecified)) (begin (begin #t (let ((_arg_144 (let ((_x_148_151 _y1_117_120_132)) (begin (_check! (pair? _x_148_151) 0 _x_148_151) (car:pair _x_148_151)))) (_type0_144 (let ((_x_152_155 _y1_117_119_132)) (begin (_check! (pair? _x_152_155) 0 _x_152_155) (car:pair _x_152_155)))) (_type1_144 (let ((_x_156_159 _y1_117_118_132)) (begin (_check! (pair? _x_156_159) 0 _x_156_159) (car:pair _x_156_159))))) (if (not (representation-subtype? _type0_144 _type1_144)) (if (variable? _arg_144) (let ((_name_147 (variable_name _arg_144))) (if (hashtable-get _types_3 _name_147) (_constraints-add!_2 _types_3 _constraints_3 (make-type-constraint _name_147 _type1_144 (available:killer-combine _k_15 _k2_23))) (cerror "Compiler bug: unexpected global: " _name_147))) (unspecified)) (unspecified)))) (_loop_124_128_131 (let ((_x_160_163 _y1_117_120_132)) (begin (_check! (pair? _x_160_163) 1 _x_160_163) (cdr:pair _x_160_163))) (let ((_x_164_167 _y1_117_119_132)) (begin (_check! (pair? _x_164_167) 1 _x_164_167) (cdr:pair _x_164_167))) (let ((_x_168_171 _y1_117_118_132)) (begin (_check! (pair? _x_168_171) 1 _x_168_171) (cdr:pair _x_168_171)))))))) (_loop_124_128_131 _args_23 _argtypes_23 _reps_23))))))) (set! _loop_22 (lambda (_type_172 _k_172 _cs_172 _newcs_172) (if (null? _cs_172) (cons (make-type-constraint _t_9 _type_172 _k_172) _newcs_172) (let* ((_c2_175 (let ((_x_249_252 _cs_172)) (begin (_check! (pair? _x_249_252) 0 _x_249_252) (car:pair _x_249_252)))) (_cs_178 (let ((_x_245_248 _cs_172)) (begin (_check! (pair? _x_245_248) 1 _x_245_248) (cdr:pair _x_245_248)))) (_e2_181 (constraint_rhs _c2_175)) (_k2_184 (constraint_killer _c2_175))) (let () (if (constant? _e2_181) (let* ((_type2_190 (constant_value _e2_181)) (_type3_193 (representation-intersection _type_172 _type2_190))) (let () (if (eq? _type2_190 _type3_193) (if (= _k2_184 (logand _k_172 _k2_184)) (append _newcs_172 _cs_178) (_loop_22 (representation-intersection _type_172 _type2_190) (available:killer-combine _k_172 _k2_184) _cs_178 (cons _c2_175 _newcs_172))) (if (representation-subtype? _type_172 _type3_193) (if (= _k_172 (logand _k_172 _k2_184)) (_loop_22 _type_172 _k_172 _cs_178 _newcs_172) (_loop_22 _type_172 _k_172 _cs_178 (cons _c2_175 _newcs_172))) (_loop_22 _type3_193 (available:killer-combine _k_172 _k2_184) _cs_178 (cons _c2_175 _newcs_172)))))) (let* ((_op_202 (variable_name (call_proc _e2_181))) (_args_205 (call_args _e2_181)) (_argtypes_208 (let () (let ((_loop_225_228_231 (unspecified))) (begin (set! _loop_225_228_231 (lambda (_y1_220_221_232 _results_220_224_232) (if (null? _y1_220_221_232) (reverse _results_220_224_232) (begin #t (_loop_225_228_231 (let ((_x_236_239 _y1_220_221_232)) (begin (_check! (pair? _x_236_239) 1 _x_236_239) (cdr:pair _x_236_239))) (cons (let ((_exp_240 (let ((_x_241_244 _y1_220_221_232)) (begin (_check! (pair? _x_241_244) 0 _x_241_244) (car:pair _x_241_244))))) (aeval _exp_240 _types_3 _constraints_3)) _results_220_224_232)))))) (_loop_225_228_231 _args_205 '())))))) (let () (begin (if (representation-subtype? _type_172 rep:true) (let ((_reps_215 (rep-if-true _op_202 _argtypes_208))) (if _reps_215 (_record-new-reps!_22 _args_205 _argtypes_208 _reps_215 _k2_184) (unspecified))) (if (representation-subtype? _type_172 rep:false) (let ((_reps_219 (rep-if-false _op_202 _argtypes_208))) (if _reps_219 (_record-new-reps!_22 _args_205 _argtypes_208 _reps_219 _k2_184) (unspecified))) (unspecified))) (_loop_22 _type_172 _k_172 _cs_178 (cons _c2_175 _newcs_172))))))))))) (if (not (zero? _k_15)) (constraints-add-killedby! _constraints_3 _t_9 _k_15) (unspecified)) (let* ((_table_255 (constraints_table _constraints_3)) (_cs_258 (hashtable-fetch _table_255 _t_9 '()))) (let () (if (constant? _e_12) (let ((_type_265 (constant_value _e_12))) (begin (if _debugging?_6 (begin (display _t_9) (display " : ") (display (rep->symbol _type_265)) (newline)) (unspecified)) (let ((_cs_268 (_loop_22 _type_265 _k_15 _cs_258 '()))) (begin (hashtable-put! _table_255 _t_9 _cs_268) _constraints_3)))) (begin (if _debugging?_6 (begin (display _t_9) (display " = ") (display (make-readable _e_12 #t)) (newline)) (unspecified)) (if (not (null? _cs_258)) (begin (display "Compiler bug: ") (write _t_9) (display " has unexpectedly nonempty constraints") (newline)) (unspecified)) (hashtable-put! _table_255 _t_9 (cons (let* ((_t1_271_274 _t_9) (_t2_271_277 (let* ((_t1_281_284 _e_12) (_t2_281_287 (cons _k_15 '()))) (let () (cons _t1_281_284 _t2_281_287))))) (let () (cons _t1_271_274 _t2_271_277))) '())) _constraints_3)))))))))) (_constraints-add!_2 _types_1 _constraints_1 _new_1))))) 'constraints-add!))
(let () (begin (set! number-of-basic-killers (let () (let ((_loop_1_4_7 (unspecified))) (begin (set! _loop_1_4_7 (lambda (_i_8 _k_8) (if (> _k_8 available:killer:dead) _i_8 (begin #t (_loop_1_4_7 (+ _i_8 1) (+ _k_8 _k_8)))))) (_loop_1_4_7 0 1))))) 'number-of-basic-killers))
(let () (begin (set! constraints_table (lambda (_constraints_1) (let ((_constraints_table_2 0)) (begin (set! _constraints_table_2 (lambda (_constraints_3) (let ((_x_4_7 _constraints_3)) (begin (_check! (pair? _x_4_7) 0 _x_4_7) (car:pair _x_4_7))))) (_constraints_table_2 _constraints_1))))) 'constraints_table))
(let () (begin (set! constraints_killed (lambda (_constraints_1) (let ((_constraints_killed_2 0)) (begin (set! _constraints_killed_2 (lambda (_constraints_3) (let ((_x_5_8 (let ((_x_9_12 _constraints_3)) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))))) (_constraints_killed_2 _constraints_1))))) 'constraints_killed))
(let () (begin (set! make-constraints-table (lambda () (let ((_make-constraints-table_2 0)) (begin (set! _make-constraints-table_2 (lambda () (let* ((_t1_4_7 (make-hashtable symbol-hash assq)) (_t2_4_10 (cons (make-vector number-of-basic-killers '()) '()))) (let () (cons _t1_4_7 _t2_4_10))))) (_make-constraints-table_2))))) 'make-constraints-table))
(let () (begin (set! copy-constraints-table (lambda (_constraints_1) (let ((_copy-constraints-table_2 0)) (begin (set! _copy-constraints-table_2 (lambda (_constraints_3) (let* ((_t1_4_7 (hashtable-copy (constraints_table _constraints_3))) (_t2_4_10 (cons (list->vector (vector->list (constraints_killed _constraints_3))) '()))) (let () (cons _t1_4_7 _t2_4_10))))) (_copy-constraints-table_2 _constraints_1))))) 'copy-constraints-table))
(let () (begin (set! constraints-for-variable (lambda (_constraints_1 _t_1) (let ((_constraints-for-variable_2 0)) (begin (set! _constraints-for-variable_2 (lambda (_constraints_3 _t_3) (hashtable-fetch (constraints_table _constraints_3) _t_3 '()))) (_constraints-for-variable_2 _constraints_1 _t_1))))) 'constraints-for-variable))
(let () (begin (set! constraints-add-killedby! (lambda (_constraints_1 _t_1 _k0_1) (let ((_constraints-add-killedby!_2 0)) (begin (set! _constraints-add-killedby!_2 (lambda (_constraints_3 _t_3 _k0_3) (if (not (zero? _k0_3)) (let ((_v_6 (constraints_killed _constraints_3))) (let () (let ((_loop_8_11_14 (unspecified))) (begin (set! _loop_8_11_14 (lambda (_i_15 _k_15) (if (= _i_15 number-of-basic-killers) (if #f #f (unspecified)) (begin (begin #t (if (not (zero? (logand _k_15 _k0_3))) (let ((_v_18_21 _v_6) (_i_18_21 _i_15) (_x_18_21 (cons _t_3 (let ((_v_22_25 _v_6) (_i_22_25 _i_15)) (begin (_check! (fixnum? _i_22_25) 40 _v_22_25 _i_22_25) (_check! (vector? _v_22_25) 40 _v_22_25 _i_22_25) (_check! (<:fix:fix _i_22_25 (vector-length:vec _v_22_25)) 40 _v_22_25 _i_22_25) (_check! (>=:fix:fix _i_22_25 0) 40 _v_22_25 _i_22_25) (vector-ref:trusted _v_22_25 _i_22_25)))))) (begin (_check! (fixnum? _i_18_21) 41 _v_18_21 _i_18_21 _x_18_21) (_check! (vector? _v_18_21) 41 _v_18_21 _i_18_21 _x_18_21) (_check! (<:fix:fix _i_18_21 (vector-length:vec _v_18_21)) 41 _v_18_21 _i_18_21 _x_18_21) (_check! (>=:fix:fix _i_18_21 0) 41 _v_18_21 _i_18_21 _x_18_21) (vector-set!:trusted _v_18_21 _i_18_21 _x_18_21))) (unspecified))) (_loop_8_11_14 (+ _i_15 1) (+ _k_15 _k_15)))))) (_loop_8_11_14 0 1))))) (unspecified)))) (_constraints-add-killedby!_2 _constraints_1 _t_1 _k0_1))))) 'constraints-add-killedby!))
(let () (begin (set! constraints-kill! (lambda (_constraints_1 _k_1) (let ((_constraints-kill!_2 0)) (begin (set! _constraints-kill!_2 (lambda (_constraints_3 _k_3) (if (not (zero? _k_3)) (let ((_table_6 (constraints_table _constraints_3)) (_killed_6 (constraints_killed _constraints_3))) (let ((_examine!_9 (unspecified))) (begin (set! _examine!_9 (lambda (_t_10) (let ((_cs_13 (filter (lambda (_c_14) (zero? (logand (constraint_killer _c_14) _k_3))) (hashtable-fetch _table_6 _t_10 '())))) (if (null? _cs_13) (hashtable-remove! _table_6 _t_10) (hashtable-put! _table_6 _t_10 _cs_13))))) (let () (let ((_loop_8_17_20 (unspecified))) (begin (set! _loop_8_17_20 (lambda (_i_21 _j_21) (if (= _i_21 number-of-basic-killers) (if #f #f (unspecified)) (begin (begin #t (if (not (zero? (logand _j_21 _k_3))) (begin (let () (let ((_loop_29_31_34 (unspecified))) (begin (set! _loop_29_31_34 (lambda (_y1_24_25_35) (if (null? _y1_24_25_35) (if #f #f (unspecified)) (begin (begin #t (_examine!_9 (let ((_x_39_42 _y1_24_25_35)) (begin (_check! (pair? _x_39_42) 0 _x_39_42) (car:pair _x_39_42))))) (_loop_29_31_34 (let ((_x_43_46 _y1_24_25_35)) (begin (_check! (pair? _x_43_46) 1 _x_43_46) (cdr:pair _x_43_46)))))))) (_loop_29_31_34 (let ((_v_47_50 _killed_6) (_i_47_50 _i_21)) (begin (_check! (fixnum? _i_47_50) 40 _v_47_50 _i_47_50) (_check! (vector? _v_47_50) 40 _v_47_50 _i_47_50) (_check! (<:fix:fix _i_47_50 (vector-length:vec _v_47_50)) 40 _v_47_50 _i_47_50) (_check! (>=:fix:fix _i_47_50 0) 40 _v_47_50 _i_47_50) (vector-ref:trusted _v_47_50 _i_47_50))))))) (let ((_v_51_54 _killed_6) (_i_51_54 _i_21) (_x_51_54 '())) (begin (_check! (fixnum? _i_51_54) 41 _v_51_54 _i_51_54 _x_51_54) (_check! (vector? _v_51_54) 41 _v_51_54 _i_51_54 _x_51_54) (_check! (<:fix:fix _i_51_54 (vector-length:vec _v_51_54)) 41 _v_51_54 _i_51_54 _x_51_54) (_check! (>=:fix:fix _i_51_54 0) 41 _v_51_54 _i_51_54 _x_51_54) (vector-set!:trusted _v_51_54 _i_51_54 _x_51_54)))) (unspecified))) (_loop_8_17_20 (+ _i_21 1) (+ _j_21 _j_21)))))) (_loop_8_17_20 0 1))))))) (unspecified)))) (_constraints-kill!_2 _constraints_1 _k_1))))) 'constraints-kill!))
(let () (begin (set! constraints-intersect! (lambda (_constraints0_1 _constraints1_1 _constraints2_1) (let ((_constraints-intersect!_2 0)) (begin (set! _constraints-intersect!_2 (lambda (_constraints0_3 _constraints1_3 _constraints2_3) (let ((_table0_6 (constraints_table _constraints0_3)) (_table1_6 (constraints_table _constraints1_3)) (_table2_6 (constraints_table _constraints2_3))) (if (eq? _table0_6 _table1_6) (hashtable-for-each (lambda (_t_7 _cs_7) (if (not (null? _cs_7)) (hashtable-put! _table0_6 _t_7 (cs-intersect (hashtable-fetch _table2_6 _t_7 '()) _cs_7)) (unspecified))) _table1_6) (begin (_constraints-intersect!_2 _constraints0_3 _constraints0_3 _constraints1_3) (_constraints-intersect!_2 _constraints0_3 _constraints0_3 _constraints2_3)))))) (_constraints-intersect!_2 _constraints0_1 _constraints1_1 _constraints2_1))))) 'constraints-intersect!))
(let () (begin (set! cs-intersect (lambda (_cs1_1 _cs2_1) (let ((_cs-intersect_2 0)) (begin (set! _cs-intersect_2 (lambda (_cs1_3 _cs2_3) (let ((_loop_4 (unspecified))) (begin (set! _loop_4 (lambda (_cs_5 _init_5 _rep_5 _krep_5) (if (null? _cs_5) (values _init_5 _rep_5 _krep_5) (let* ((_c_8 (let ((_x_28_31 _cs_5)) (begin (_check! (pair? _x_28_31) 0 _x_28_31) (car:pair _x_28_31)))) (_cs_11 (let ((_x_24_27 _cs_5)) (begin (_check! (pair? _x_24_27) 1 _x_24_27) (cdr:pair _x_24_27)))) (_e2_14 (constraint_rhs _c_8)) (_k2_17 (constraint_killer _c_8))) (let () (if (constant? _e2_14) (_loop_4 _cs_11 _init_5 (representation-intersection _rep_5 (constant_value _e2_14)) (available:killer-combine _krep_5 _k2_17)) (if (call? _e2_14) (if _init_5 (begin (display "Compiler bug in cs-intersect") (break)) (_loop_4 _cs_11 _c_8 _rep_5 _krep_5)) (error "Compiler bug in cs-intersect")))))))) (call-with-values (lambda () (_loop_4 _cs1_3 #f rep:object available:killer:none)) (lambda (_c1_33 _rep1_33 _krep1_33) (call-with-values (lambda () (_loop_4 _cs2_3 #f rep:object available:killer:none)) (lambda (_c2_35 _rep2_35 _krep2_35) (let ((_c_38 (if (equal? _c1_33 _c2_35) _c1_33 #f)) (_rep_38 (representation-union _rep1_33 _rep2_35)) (_krep_38 (available:killer-combine _krep1_33 _krep2_35))) (if (eq? _rep_38 rep:object) (if _c_38 (cons _c_38 '()) '()) (let ((_t_42 (constraint_lhs (let ((_x_55_58 _cs1_3)) (begin (_check! (pair? _x_55_58) 0 _x_55_58) (car:pair _x_55_58)))))) (if _c_38 (let* ((_t1_43_46 _c_38) (_t2_43_49 (cons (make-type-constraint _t_42 _rep_38 _krep_38) '()))) (let () (cons _t1_43_46 _t2_43_49))) (cons (make-type-constraint _t_42 _rep_38 _krep_38) '()))))))))))))) (_cs-intersect_2 _cs1_1 _cs2_1))))) 'cs-intersect))
(let () (begin (set! $gc_ephemeral 0) '$gc_ephemeral))
(let () (begin (set! $gc_tenuring 1) '$gc_tenuring))
(let () (begin (set! $gc_full 2) '$gc_full))
(let () (begin (set! $mstat_wallocated-hi 0) '$mstat_wallocated-hi))
(let () (begin (set! $mstat_wallocated-lo 1) '$mstat_wallocated-lo))
(let () (begin (set! $mstat_wcollected-hi 2) '$mstat_wcollected-hi))
(let () (begin (set! $mstat_wcollected-lo 3) '$mstat_wcollected-lo))
(let () (begin (set! $mstat_wcopied-hi 4) '$mstat_wcopied-hi))
(let () (begin (set! $mstat_wcopied-lo 5) '$mstat_wcopied-lo))
(let () (begin (set! $mstat_gctime 6) '$mstat_gctime))
(let () (begin (set! $mstat_wlive 7) '$mstat_wlive))
(let () (begin (set! $mstat_gc-last-gen 8) '$mstat_gc-last-gen))
(let () (begin (set! $mstat_gc-last-type 9) '$mstat_gc-last-type))
(let () (begin (set! $mstat_generations 10) '$mstat_generations))
(let () (begin (set! $mstat_g-gc-count 0) '$mstat_g-gc-count))
(let () (begin (set! $mstat_g-prom-count 1) '$mstat_g-prom-count))
(let () (begin (set! $mstat_g-gctime 2) '$mstat_g-gctime))
(let () (begin (set! $mstat_g-wlive 3) '$mstat_g-wlive))
(let () (begin (set! $mstat_g-np-youngp 4) '$mstat_g-np-youngp))
(let () (begin (set! $mstat_g-np-oldp 5) '$mstat_g-np-oldp))
(let () (begin (set! $mstat_g-np-j 6) '$mstat_g-np-j))
(let () (begin (set! $mstat_g-np-k 7) '$mstat_g-np-k))
(let () (begin (set! $mstat_g-alloc 8) '$mstat_g-alloc))
(let () (begin (set! $mstat_g-target 9) '$mstat_g-target))
(let () (begin (set! $mstat_g-promtime 10) '$mstat_g-promtime))
(let () (begin (set! $mstat_remsets 11) '$mstat_remsets))
(let () (begin (set! $mstat_r-apool 0) '$mstat_r-apool))
(let () (begin (set! $mstat_r-upool 1) '$mstat_r-upool))
(let () (begin (set! $mstat_r-ahash 2) '$mstat_r-ahash))
(let () (begin (set! $mstat_r-uhash 3) '$mstat_r-uhash))
(let () (begin (set! $mstat_r-hrec-hi 4) '$mstat_r-hrec-hi))
(let () (begin (set! $mstat_r-hrec-lo 5) '$mstat_r-hrec-lo))
(let () (begin (set! $mstat_r-hrem-hi 6) '$mstat_r-hrem-hi))
(let () (begin (set! $mstat_r-hrem-lo 7) '$mstat_r-hrem-lo))
(let () (begin (set! $mstat_r-hscan-hi 8) '$mstat_r-hscan-hi))
(let () (begin (set! $mstat_r-hscan-lo 9) '$mstat_r-hscan-lo))
(let () (begin (set! $mstat_r-wscan-hi 10) '$mstat_r-wscan-hi))
(let () (begin (set! $mstat_r-wscan-lo 11) '$mstat_r-wscan-lo))
(let () (begin (set! $mstat_r-ssbrec-hi 12) '$mstat_r-ssbrec-hi))
(let () (begin (set! $mstat_r-ssbrec-lo 13) '$mstat_r-ssbrec-lo))
(let () (begin (set! $mstat_r-np-p 14) '$mstat_r-np-p))
(let () (begin (set! $mstat_fflushed-hi 12) '$mstat_fflushed-hi))
(let () (begin (set! $mstat_fflushed-lo 13) '$mstat_fflushed-lo))
(let () (begin (set! $mstat_wflushed-hi 14) '$mstat_wflushed-hi))
(let () (begin (set! $mstat_wflushed-lo 15) '$mstat_wflushed-lo))
(let () (begin (set! $mstat_stk-created 16) '$mstat_stk-created))
(let () (begin (set! $mstat_frestored-hi 17) '$mstat_frestored-hi))
(let () (begin (set! $mstat_frestored-lo 18) '$mstat_frestored-lo))
(let () (begin (set! $mstat_words-heap 19) '$mstat_words-heap))
(let () (begin (set! $mstat_words-remset 20) '$mstat_words-remset))
(let () (begin (set! $mstat_words-rts 21) '$mstat_words-rts))
(let () (begin (set! $mstat_swb-assign 22) '$mstat_swb-assign))
(let () (begin (set! $mstat_swb-lhs-ok 23) '$mstat_swb-lhs-ok))
(let () (begin (set! $mstat_swb-rhs-const 24) '$mstat_swb-rhs-const))
(let () (begin (set! $mstat_swb-not-xgen 25) '$mstat_swb-not-xgen))
(let () (begin (set! $mstat_swb-trans 26) '$mstat_swb-trans))
(let () (begin (set! $mstat_rtime 27) '$mstat_rtime))
(let () (begin (set! $mstat_stime 28) '$mstat_stime))
(let () (begin (set! $mstat_utime 29) '$mstat_utime))
(let () (begin (set! $mstat_minfaults 30) '$mstat_minfaults))
(let () (begin (set! $mstat_majfaults 31) '$mstat_majfaults))
(let () (begin (set! $mstat_np-remsetp 32) '$mstat_np-remsetp))
(let () (begin (set! $mstat_max-heap 33) '$mstat_max-heap))
(let () (begin (set! $mstat_promtime 34) '$mstat_promtime))
(let () (begin (set! $mstat_wmoved-hi 35) '$mstat_wmoved-hi))
(let () (begin (set! $mstat_wmoved-lo 36) '$mstat_wmoved-lo))
(let () (begin (set! $mstat_vsize 37) '$mstat_vsize))
(let () (begin (set! $g_reg0 12) '$g_reg0))
(let () (begin (set! $r_reg8 44) '$r_reg8))
(let () (begin (set! $r_reg9 48) '$r_reg9))
(let () (begin (set! $r_reg10 52) '$r_reg10))
(let () (begin (set! $r_reg11 56) '$r_reg11))
(let () (begin (set! $r_reg12 60) '$r_reg12))
(let () (begin (set! $r_reg13 64) '$r_reg13))
(let () (begin (set! $r_reg14 68) '$r_reg14))
(let () (begin (set! $r_reg15 72) '$r_reg15))
(let () (begin (set! $r_reg16 76) '$r_reg16))
(let () (begin (set! $r_reg17 80) '$r_reg17))
(let () (begin (set! $r_reg18 84) '$r_reg18))
(let () (begin (set! $r_reg19 88) '$r_reg19))
(let () (begin (set! $r_reg20 92) '$r_reg20))
(let () (begin (set! $r_reg21 96) '$r_reg21))
(let () (begin (set! $r_reg22 100) '$r_reg22))
(let () (begin (set! $r_reg23 104) '$r_reg23))
(let () (begin (set! $r_reg24 108) '$r_reg24))
(let () (begin (set! $r_reg25 112) '$r_reg25))
(let () (begin (set! $r_reg26 116) '$r_reg26))
(let () (begin (set! $r_reg27 120) '$r_reg27))
(let () (begin (set! $r_reg28 124) '$r_reg28))
(let () (begin (set! $r_reg29 128) '$r_reg29))
(let () (begin (set! $r_reg30 132) '$r_reg30))
(let () (begin (set! $r_reg31 136) '$r_reg31))
(let () (begin (set! $g_stkbot 180) '$g_stkbot))
(let () (begin (set! $g_gccnt 420) '$g_gccnt))
(let () (begin (set! $m_alloc 1024) '$m_alloc))
(let () (begin (set! $m_alloci 1032) '$m_alloci))
(let () (begin (set! $m_gc 1040) '$m_gc))
(let () (begin (set! $m_addtrans 1048) '$m_addtrans))
(let () (begin (set! $m_stkoflow 1056) '$m_stkoflow))
(let () (begin (set! $m_stkuflow 1072) '$m_stkuflow))
(let () (begin (set! $m_creg 1080) '$m_creg))
(let () (begin (set! $m_creg-set! 1088) '$m_creg-set!))
(let () (begin (set! $m_add 1096) '$m_add))
(let () (begin (set! $m_subtract 1104) '$m_subtract))
(let () (begin (set! $m_multiply 1112) '$m_multiply))
(let () (begin (set! $m_quotient 1120) '$m_quotient))
(let () (begin (set! $m_remainder 1128) '$m_remainder))
(let () (begin (set! $m_divide 1136) '$m_divide))
(let () (begin (set! $m_modulo 1144) '$m_modulo))
(let () (begin (set! $m_negate 1152) '$m_negate))
(let () (begin (set! $m_numeq 1160) '$m_numeq))
(let () (begin (set! $m_numlt 1168) '$m_numlt))
(let () (begin (set! $m_numle 1176) '$m_numle))
(let () (begin (set! $m_numgt 1184) '$m_numgt))
(let () (begin (set! $m_numge 1192) '$m_numge))
(let () (begin (set! $m_zerop 1200) '$m_zerop))
(let () (begin (set! $m_complexp 1208) '$m_complexp))
(let () (begin (set! $m_realp 1216) '$m_realp))
(let () (begin (set! $m_rationalp 1224) '$m_rationalp))
(let () (begin (set! $m_integerp 1232) '$m_integerp))
(let () (begin (set! $m_exactp 1240) '$m_exactp))
(let () (begin (set! $m_inexactp 1248) '$m_inexactp))
(let () (begin (set! $m_exact->inexact 1256) '$m_exact->inexact))
(let () (begin (set! $m_inexact->exact 1264) '$m_inexact->exact))
(let () (begin (set! $m_make-rectangular 1272) '$m_make-rectangular))
(let () (begin (set! $m_real-part 1280) '$m_real-part))
(let () (begin (set! $m_imag-part 1288) '$m_imag-part))
(let () (begin (set! $m_sqrt 1296) '$m_sqrt))
(let () (begin (set! $m_round 1304) '$m_round))
(let () (begin (set! $m_truncate 1312) '$m_truncate))
(let () (begin (set! $m_apply 1320) '$m_apply))
(let () (begin (set! $m_varargs 1328) '$m_varargs))
(let () (begin (set! $m_typetag 1336) '$m_typetag))
(let () (begin (set! $m_typetag-set 1344) '$m_typetag-set))
(let () (begin (set! $m_break 1352) '$m_break))
(let () (begin (set! $m_eqv 1360) '$m_eqv))
(let () (begin (set! $m_partial-list->vector 1368) '$m_partial-list->vector))
(let () (begin (set! $m_timer-exception 1376) '$m_timer-exception))
(let () (begin (set! $m_exception 1384) '$m_exception))
(let () (begin (set! $m_singlestep 1392) '$m_singlestep))
(let () (begin (set! $m_syscall 1400) '$m_syscall))
(let () (begin (set! $m_bvlcmp 1408) '$m_bvlcmp))
(let () (begin (set! $m_enable-interrupts 1416) '$m_enable-interrupts))
(let () (begin (set! $m_disable-interrupts 1424) '$m_disable-interrupts))
(let () (begin (set! $m_alloc-bv 1432) '$m_alloc-bv))
(let () (begin (set! $m_global-ex 1440) '$m_global-ex))
(let () (begin (set! $m_invoke-ex 1448) '$m_invoke-ex))
(let () (begin (set! $m_global-invoke-ex 1456) '$m_global-invoke-ex))
(let () (begin (set! $m_argc-ex 1464) '$m_argc-ex))
(let () (begin (set! $r_g0 0) '$r_g0))
(let () (begin (set! $r_g1 1) '$r_g1))
(let () (begin (set! $r_g2 2) '$r_g2))
(let () (begin (set! $r_g3 3) '$r_g3))
(let () (begin (set! $r_g4 4) '$r_g4))
(let () (begin (set! $r_g5 5) '$r_g5))
(let () (begin (set! $r_g6 6) '$r_g6))
(let () (begin (set! $r_g7 7) '$r_g7))
(let () (begin (set! $r_o0 8) '$r_o0))
(let () (begin (set! $r_o1 9) '$r_o1))
(let () (begin (set! $r_o2 10) '$r_o2))
(let () (begin (set! $r_o3 11) '$r_o3))
(let () (begin (set! $r_o4 12) '$r_o4))
(let () (begin (set! $r_o5 13) '$r_o5))
(let () (begin (set! $r_o6 14) '$r_o6))
(let () (begin (set! $r_o7 15) '$r_o7))
(let () (begin (set! $r_l0 16) '$r_l0))
(let () (begin (set! $r_l1 17) '$r_l1))
(let () (begin (set! $r_l2 18) '$r_l2))
(let () (begin (set! $r_l3 19) '$r_l3))
(let () (begin (set! $r_l4 20) '$r_l4))
(let () (begin (set! $r_l5 21) '$r_l5))
(let () (begin (set! $r_l6 22) '$r_l6))
(let () (begin (set! $r_l7 23) '$r_l7))
(let () (begin (set! $r_i0 24) '$r_i0))
(let () (begin (set! $r_i1 25) '$r_i1))
(let () (begin (set! $r_i2 26) '$r_i2))
(let () (begin (set! $r_i3 27) '$r_i3))
(let () (begin (set! $r_i4 28) '$r_i4))
(let () (begin (set! $r_i5 29) '$r_i5))
(let () (begin (set! $r_i6 30) '$r_i6))
(let () (begin (set! $r_i7 31) '$r_i7))
(let () (begin (set! $r_result $r_o0) '$r_result))
(let () (begin (set! $r_argreg2 $r_o1) '$r_argreg2))
(let () (begin (set! $r_argreg3 $r_o2) '$r_argreg3))
(let () (begin (set! $r_stkp $r_o3) '$r_stkp))
(let () (begin (set! $r_stklim $r_i0) '$r_stklim))
(let () (begin (set! $r_tmp1 $r_o4) '$r_tmp1))
(let () (begin (set! $r_tmp2 $r_o5) '$r_tmp2))
(let () (begin (set! $r_tmp0 $r_g1) '$r_tmp0))
(let () (begin (set! $r_e-top $r_i0) '$r_e-top))
(let () (begin (set! $r_e-limit $r_o3) '$r_e-limit))
(let () (begin (set! $r_timer $r_i4) '$r_timer))
(let () (begin (set! $r_millicode $r_i7) '$r_millicode))
(let () (begin (set! $r_globals $r_i7) '$r_globals))
(let () (begin (set! $r_reg0 $r_l0) '$r_reg0))
(let () (begin (set! $r_reg1 $r_l1) '$r_reg1))
(let () (begin (set! $r_reg2 $r_l2) '$r_reg2))
(let () (begin (set! $r_reg3 $r_l3) '$r_reg3))
(let () (begin (set! $r_reg4 $r_l4) '$r_reg4))
(let () (begin (set! $r_reg5 $r_l5) '$r_reg5))
(let () (begin (set! $r_reg6 $r_l6) '$r_reg6))
(let () (begin (set! $r_reg7 $r_l7) '$r_reg7))
(let () (begin (set! $ex_car 0) '$ex_car))
(let () (begin (set! $ex_cdr 1) '$ex_cdr))
(let () (begin (set! $ex_setcar 2) '$ex_setcar))
(let () (begin (set! $ex_setcdr 3) '$ex_setcdr))
(let () (begin (set! $ex_add 10) '$ex_add))
(let () (begin (set! $ex_sub 11) '$ex_sub))
(let () (begin (set! $ex_mul 12) '$ex_mul))
(let () (begin (set! $ex_div 13) '$ex_div))
(let () (begin (set! $ex_lessp 14) '$ex_lessp))
(let () (begin (set! $ex_lesseqp 15) '$ex_lesseqp))
(let () (begin (set! $ex_equalp 16) '$ex_equalp))
(let () (begin (set! $ex_greatereqp 17) '$ex_greatereqp))
(let () (begin (set! $ex_greaterp 18) '$ex_greaterp))
(let () (begin (set! $ex_quotient 19) '$ex_quotient))
(let () (begin (set! $ex_remainder 20) '$ex_remainder))
(let () (begin (set! $ex_modulo 21) '$ex_modulo))
(let () (begin (set! $ex_logior 22) '$ex_logior))
(let () (begin (set! $ex_logand 23) '$ex_logand))
(let () (begin (set! $ex_logxor 24) '$ex_logxor))
(let () (begin (set! $ex_lognot 25) '$ex_lognot))
(let () (begin (set! $ex_lsh 26) '$ex_lsh))
(let () (begin (set! $ex_rsha 27) '$ex_rsha))
(let () (begin (set! $ex_rshl 28) '$ex_rshl))
(let () (begin (set! $ex_e2i 29) '$ex_e2i))
(let () (begin (set! $ex_i2e 30) '$ex_i2e))
(let () (begin (set! $ex_exactp 31) '$ex_exactp))
(let () (begin (set! $ex_inexactp 32) '$ex_inexactp))
(let () (begin (set! $ex_round 33) '$ex_round))
(let () (begin (set! $ex_trunc 34) '$ex_trunc))
(let () (begin (set! $ex_zerop 35) '$ex_zerop))
(let () (begin (set! $ex_neg 36) '$ex_neg))
(let () (begin (set! $ex_abs 37) '$ex_abs))
(let () (begin (set! $ex_realpart 38) '$ex_realpart))
(let () (begin (set! $ex_imagpart 39) '$ex_imagpart))
(let () (begin (set! $ex_vref 40) '$ex_vref))
(let () (begin (set! $ex_vset 41) '$ex_vset))
(let () (begin (set! $ex_vlen 42) '$ex_vlen))
(let () (begin (set! $ex_pref 50) '$ex_pref))
(let () (begin (set! $ex_pset 51) '$ex_pset))
(let () (begin (set! $ex_plen 52) '$ex_plen))
(let () (begin (set! $ex_sref 60) '$ex_sref))
(let () (begin (set! $ex_sset 61) '$ex_sset))
(let () (begin (set! $ex_slen 62) '$ex_slen))
(let () (begin (set! $ex_bvref 70) '$ex_bvref))
(let () (begin (set! $ex_bvset 71) '$ex_bvset))
(let () (begin (set! $ex_bvlen 72) '$ex_bvlen))
(let () (begin (set! $ex_bvlref 80) '$ex_bvlref))
(let () (begin (set! $ex_bvlset 81) '$ex_bvlset))
(let () (begin (set! $ex_bvllen 82) '$ex_bvllen))
(let () (begin (set! $ex_vlref 90) '$ex_vlref))
(let () (begin (set! $ex_vlset 91) '$ex_vlset))
(let () (begin (set! $ex_vllen 92) '$ex_vllen))
(let () (begin (set! $ex_typetag 100) '$ex_typetag))
(let () (begin (set! $ex_typetagset 101) '$ex_typetagset))
(let () (begin (set! $ex_apply 102) '$ex_apply))
(let () (begin (set! $ex_argc 103) '$ex_argc))
(let () (begin (set! $ex_vargc 104) '$ex_vargc))
(let () (begin (set! $ex_nonproc 105) '$ex_nonproc))
(let () (begin (set! $ex_undef-global 106) '$ex_undef-global))
(let () (begin (set! $ex_dump 107) '$ex_dump))
(let () (begin (set! $ex_dumpfail 108) '$ex_dumpfail))
(let () (begin (set! $ex_timer 109) '$ex_timer))
(let () (begin (set! $ex_unsupported 110) '$ex_unsupported))
(let () (begin (set! $ex_int2char 111) '$ex_int2char))
(let () (begin (set! $ex_char2int 112) '$ex_char2int))
(let () (begin (set! $ex_mkbvl 113) '$ex_mkbvl))
(let () (begin (set! $ex_mkvl 114) '$ex_mkvl))
(let () (begin (set! $ex_char<? 115) '$ex_char<?))
(let () (begin (set! $ex_char<=? 116) '$ex_char<=?))
(let () (begin (set! $ex_char=? 117) '$ex_char=?))
(let () (begin (set! $ex_char>? 118) '$ex_char>?))
(let () (begin (set! $ex_char>=? 119) '$ex_char>=?))
(let () (begin (set! $ex_bvfill 120) '$ex_bvfill))
(let () (begin (set! $ex_enable-interrupts 121) '$ex_enable-interrupts))
(let () (begin (set! $ex_keyboard-interrupt 122) '$ex_keyboard-interrupt))
(let () (begin (set! $ex_arithmetic-exception 123) '$ex_arithmetic-exception))
(let () (begin (set! $ex_global-invoke 124) '$ex_global-invoke))
(let () (begin (set! $ex_fx+ 140) '$ex_fx+))
(let () (begin (set! $ex_fx- 141) '$ex_fx-))
(let () (begin (set! $ex_fx-- 142) '$ex_fx--))
(let () (begin (set! $ex_fx= 143) '$ex_fx=))
(let () (begin (set! $ex_fx< 144) '$ex_fx<))
(let () (begin (set! $ex_fx<= 145) '$ex_fx<=))
(let () (begin (set! $ex_fx> 146) '$ex_fx>))
(let () (begin (set! $ex_fx>= 147) '$ex_fx>=))
(let () (begin (set! $ex_fxpositive? 148) '$ex_fxpositive?))
(let () (begin (set! $ex_fxnegative? 149) '$ex_fxnegative?))
(let () (begin (set! $ex_fxzero? 150) '$ex_fxzero?))
(let () (begin (set! $ex_fx* 151) '$ex_fx*))
(let () (begin (set! $tag_tagmask 7) '$tag_tagmask))
(let () (begin (set! $tag_pair-tag 1) '$tag_pair-tag))
(let () (begin (set! $tag_vector-tag 3) '$tag_vector-tag))
(let () (begin (set! $tag_bytevector-tag 5) '$tag_bytevector-tag))
(let () (begin (set! $tag_procedure-tag 7) '$tag_procedure-tag))
(let () (begin (set! $imm_vector-header 162) '$imm_vector-header))
(let () (begin (set! $imm_bytevector-header 194) '$imm_bytevector-header))
(let () (begin (set! $imm_procedure-header 254) '$imm_procedure-header))
(let () (begin (set! $imm_true 6) '$imm_true))
(let () (begin (set! $imm_false 2) '$imm_false))
(let () (begin (set! $imm_null 10) '$imm_null))
(let () (begin (set! $imm_unspecified 278) '$imm_unspecified))
(let () (begin (set! $imm_eof 534) '$imm_eof))
(let () (begin (set! $imm_undefined 790) '$imm_undefined))
(let () (begin (set! $imm_character 38) '$imm_character))
(let () (begin (set! $tag_vector-typetag 0) '$tag_vector-typetag))
(let () (begin (set! $tag_rectnum-typetag 4) '$tag_rectnum-typetag))
(let () (begin (set! $tag_ratnum-typetag 8) '$tag_ratnum-typetag))
(let () (begin (set! $tag_symbol-typetag 12) '$tag_symbol-typetag))
(let () (begin (set! $tag_port-typetag 16) '$tag_port-typetag))
(let () (begin (set! $tag_structure-typetag 20) '$tag_structure-typetag))
(let () (begin (set! $tag_bytevector-typetag 0) '$tag_bytevector-typetag))
(let () (begin (set! $tag_string-typetag 4) '$tag_string-typetag))
(let () (begin (set! $tag_flonum-typetag 8) '$tag_flonum-typetag))
(let () (begin (set! $tag_compnum-typetag 12) '$tag_compnum-typetag))
(let () (begin (set! $tag_bignum-typetag 16) '$tag_bignum-typetag))
(let () (begin (set! $hdr_port 178) '$hdr_port))
(let () (begin (set! $hdr_struct 182) '$hdr_struct))
(let () (begin (set! $p_codevector -3) '$p_codevector))
(let () (begin (set! $p_constvector 1) '$p_constvector))
(let () (begin (set! $p_linkoffset 5) '$p_linkoffset))
(let () (begin (set! $p_reg0 5) '$p_reg0))
(let () (begin (set! $p_codeoffset -1) '$p_codeoffset))
(let () (begin (set! twobit-sort (lambda (_less?_1 _list_1) (compat:sort _list_1 _less?_1))) 'twobit-sort))
(let () (begin (set! renaming-prefix "_") 'renaming-prefix))
(let () (begin (set! cell-prefix (string-append renaming-prefix "CELL:")) 'cell-prefix))
(let () (begin (set! name:check! '_check!) 'name:check!))
(let () (begin (set! name:cons '_cons) 'name:cons))
(let () (begin (set! name:list '_list) 'name:list))
(let () (begin (set! name:make-cell '_make-cell) 'name:make-cell))
(let () (begin (set! name:cell-ref '_cell-ref) 'name:cell-ref))
(let () (begin (set! name:cell-set! '_cell-set!) 'name:cell-set!))
(let () (begin (set! name:ignored (string->symbol "IGNORED")) 'name:ignored))
(let () (begin (set! name:car '_car) 'name:car))
(let () (begin (set! name:cdr '_cdr) 'name:cdr))
(let () (begin (set! name:not 'not) 'name:not))
(let () (begin (set! name:memq 'memq) 'name:memq))
(let () (begin (set! name:memv 'memv) 'name:memv))
(let () (begin (set! name:eq? 'eq?) 'name:eq?))
(let () (begin (set! name:eqv? 'eqv?) 'name:eqv?))
(let () (begin (set! name:fixnum? 'fixnum?) 'name:fixnum?))
(let () (begin (set! name:char? 'char?) 'name:char?))
(let () (begin (set! name:symbol? 'symbol?) 'name:symbol?))
(let () (begin (set! name:fx< '<:fix:fix) 'name:fx<))
(let () (begin (set! name:fx- 'fx-) 'name:fx-))
(let () (begin (set! name:char->integer 'char->integer) 'name:char->integer))
(let () (begin (set! name:vector-ref 'vector-ref:trusted) 'name:vector-ref))
(let () (begin (set! constant-folding-entry (lambda (_name_1) (let ((_constant-folding-entry_2 0)) (begin (set! _constant-folding-entry_2 (lambda (_name_3) (assq _name_3 $usual-constant-folding-procedures$))) (_constant-folding-entry_2 _name_1))))) 'constant-folding-entry))
(let () (begin (set! constant-folding-predicates cadr) 'constant-folding-predicates))
(let () (begin (set! constant-folding-folder caddr) 'constant-folding-folder))
(let () (begin (set! $usual-constant-folding-procedures$ (let ((_always?_3 (lambda (_x_1468) #t)) (_charcode?_3 (lambda (_n_1469) (if (number? _n_1469) (if (exact? _n_1469) (if (<= 0 _n_1469) (< _n_1469 128) #f) #f) #f))) (_ratnum?_3 (lambda (_n_1474) (if (number? _n_1474) (if (exact? _n_1474) (rational? _n_1474) #f) #f))) (_smallint?_3 (lambda (_n_1478) (smallint? _n_1478)))) (_cons (_cons 'integer->char (_cons (_cons _charcode?_3 '()) (_cons integer->char '()))) (_cons (_cons 'char->integer (_cons (_cons char? '()) (_cons char->integer '()))) (_cons (_cons 'zero? (_cons (_cons _ratnum?_3 '()) (_cons zero? '()))) (_cons (_cons '< (_cons (_cons _ratnum?_3 (_cons _ratnum?_3 '())) (_cons < '()))) (_cons (_cons '<= (_cons (_cons _ratnum?_3 (_cons _ratnum?_3 '())) (_cons <= '()))) (_cons (_cons '= (_cons (_cons _ratnum?_3 (_cons _ratnum?_3 '())) (_cons = '()))) (_cons (_cons '>= (_cons (_cons _ratnum?_3 (_cons _ratnum?_3 '())) (_cons >= '()))) (_cons (_cons '> (_cons (_cons _ratnum?_3 (_cons _ratnum?_3 '())) (_cons > '()))) (_cons (_cons '+ (_cons (_cons _ratnum?_3 (_cons _ratnum?_3 '())) (_cons + '()))) (_cons (_cons '- (_cons (_cons _ratnum?_3 (_cons _ratnum?_3 '())) (_cons - '()))) (_cons (_cons '* (_cons (_cons _ratnum?_3 (_cons _ratnum?_3 '())) (_cons * '()))) (_cons (_cons '_-- (_cons (_cons _ratnum?_3 '()) (_cons (lambda (_x_1467) (- 0 _x_1467)) '()))) (_cons (_cons 'eq? (_cons (_cons _always?_3 (_cons _always?_3 '())) (_cons eq? '()))) (_cons (_cons 'eqv? (_cons (_cons _always?_3 (_cons _always?_3 '())) (_cons eqv? '()))) (_cons (_cons 'equal? (_cons (_cons _always?_3 (_cons _always?_3 '())) (_cons equal? '()))) (_cons (_cons 'memq (_cons (_cons _always?_3 (_cons list? '())) (_cons memq '()))) (_cons (_cons 'memv (_cons (_cons _always?_3 (_cons list? '())) (_cons memv '()))) (_cons (_cons 'member (_cons (_cons _always?_3 (_cons list? '())) (_cons member '()))) (_cons (_cons 'assq (_cons (_cons _always?_3 (_cons list? '())) (_cons assq '()))) (_cons (_cons 'assv (_cons (_cons _always?_3 (_cons list? '())) (_cons assv '()))) (_cons (_cons 'assoc (_cons (_cons _always?_3 (_cons list? '())) (_cons assoc '()))) (_cons (_cons 'length (_cons (_cons list? '()) (_cons length '()))) (_cons (_cons 'fixnum? (_cons (_cons _smallint?_3 '()) (_cons _smallint?_3 '()))) (_cons (_cons '=:fix:fix (_cons (_cons _smallint?_3 (_cons _smallint?_3 '())) (_cons = '()))) (_cons (_cons '<:fix:fix (_cons (_cons _smallint?_3 (_cons _smallint?_3 '())) (_cons < '()))) (_cons (_cons '<=:fix:fix (_cons (_cons _smallint?_3 (_cons _smallint?_3 '())) (_cons <= '()))) (_cons (_cons '>:fix:fix (_cons (_cons _smallint?_3 (_cons _smallint?_3 '())) (_cons > '()))) (_cons (_cons '>=:fix:fix (_cons (_cons _smallint?_3 (_cons _smallint?_3 '())) (_cons >= '()))) '())))))))))))))))))))))))))))))) '$usual-constant-folding-procedures$))
(let () (begin '(define (_check! flag exn _ args) (if (not flag) (apply error "Runtime check exception: " exn args))) #t))
(let () (let () (let ((_loop_6_8_11 (unspecified))) (begin (set! _loop_6_8_11 (lambda (_y1_1_2_12) (if (null? _y1_1_2_12) (if #f #f (unspecified)) (begin (begin #t (pass1 (let ((_x_16_19 _y1_1_2_12)) (begin (_check! (pair? _x_16_19) 0 _x_16_19) (car:pair _x_16_19))))) (_loop_6_8_11 (let ((_x_20_23 _y1_1_2_12)) (begin (_check! (pair? _x_20_23) 1 _x_20_23) (cdr:pair _x_20_23)))))))) (_loop_6_8_11 (_cons (_cons 'define-inline (_cons 'car (_cons (_cons 'syntax-rules (_cons '() (_cons (_cons '(car x0) (_cons (_cons 'let (_cons '((x x0)) (_cons (_cons '_check! (_cons '(pair? x) (_cons $ex_car '(x)))) '((car:pair x))))) '())) '()))) '()))) (_cons (_cons 'define-inline (_cons 'cdr (_cons (_cons 'syntax-rules (_cons '() (_cons (_cons '(car x0) (_cons (_cons 'let (_cons '((x x0)) (_cons (_cons '_check! (_cons '(pair? x) (_cons $ex_cdr '(x)))) '((cdr:pair x))))) '())) '()))) '()))) (_cons (_cons 'define-inline (_cons 'vector-length (_cons (_cons 'syntax-rules (_cons '() (_cons (_cons '(vector-length v0) (_cons (_cons 'let (_cons '((v v0)) (_cons (_cons '_check! (_cons '(vector? v) (_cons $ex_vlen '(v)))) '((vector-length:vec v))))) '())) '()))) '()))) (_cons (_cons 'define-inline (_cons 'vector-ref (_cons (_cons 'syntax-rules (_cons '() (_cons (_cons '(vector-ref v0 i0) (_cons (_cons 'let (_cons '((v v0) (i i0)) (_cons (_cons '_check! (_cons '(fixnum? i) (_cons $ex_vref '(v i)))) (_cons (_cons '_check! (_cons '(vector? v) (_cons $ex_vref '(v i)))) (_cons (_cons '_check! (_cons '(<:fix:fix i (vector-length:vec v)) (_cons $ex_vref '(v i)))) (_cons (_cons '_check! (_cons '(>=:fix:fix i 0) (_cons $ex_vref '(v i)))) '((vector-ref:trusted v i)))))))) '())) '()))) '()))) (_cons (_cons 'define-inline (_cons 'vector-set! (_cons (_cons 'syntax-rules (_cons '() (_cons (_cons '(vector-set! v0 i0 x0) (_cons (_cons 'let (_cons '((v v0) (i i0) (x x0)) (_cons (_cons '_check! (_cons '(fixnum? i) (_cons $ex_vset '(v i x)))) (_cons (_cons '_check! (_cons '(vector? v) (_cons $ex_vset '(v i x)))) (_cons (_cons '_check! (_cons '(<:fix:fix i (vector-length:vec v)) (_cons $ex_vset '(v i x)))) (_cons (_cons '_check! (_cons '(>=:fix:fix i 0) (_cons $ex_vset '(v i x)))) '((vector-set!:trusted v i x)))))))) '())) '()))) '()))) '((define-inline list (syntax-rules () ((list) '()) ((list ?e) (cons ?e '())) ((list ?e1 ?e2 ___) (let* ((t1 ?e1) (t2 (list ?e2 ___))) (cons t1 t2))))) (define-inline vector (syntax-rules () ((vector) '#()) ((vector ?e) (make-vector 1 ?e)) ((vector ?e1 ?e2 ___) (letrec-syntax ((vector-aux1 (___ (syntax-rules () ((vector-aux1 () ?n ?exps ?indexes ?temps) (vector-aux2 ?n ?exps ?indexes ?temps)) ((vector-aux1 (?exp1 ?exp2 ___) ?n ?exps ?indexes ?temps) (vector-aux1 (?exp2 ___) (+ ?n 1) (?exp1 _ ?exps) (?n _ ?indexes) (t _ ?temps)))))) (vector-aux2 (___ (syntax-rules () ((vector-aux2 ?n (?exp1 ?exp2 ___) (?n1 ?n2 ___) (?t1 ?t2 ___)) (let* ((?t1 ?exp1) (?t2 ?exp2) ___ (v (make-vector ?n ?t1))) (vector-set! v ?n2 ?t2) ___ v)))))) (vector-aux1 (?e1 ?e2 ___) 0 () () ()))))) (define-inline cadddr (syntax-rules () ((cadddr ?e) (car (cdr (cdr (cdr ?e))))))) (define-inline cddddr (syntax-rules () ((cddddr ?e) (cdr (cdr (cdr (cdr ?e))))))) (define-inline cdddr (syntax-rules () ((cdddr ?e) (cdr (cdr (cdr ?e)))))) (define-inline caddr (syntax-rules () ((caddr ?e) (car (cdr (cdr ?e)))))) (define-inline cddr (syntax-rules () ((cddr ?e) (cdr (cdr ?e))))) (define-inline cdar (syntax-rules () ((cdar ?e) (cdr (car ?e))))) (define-inline cadr (syntax-rules () ((cadr ?e) (car (cdr ?e))))) (define-inline caar (syntax-rules () ((caar ?e) (car (car ?e))))) (define-inline make-vector (syntax-rules () ((make-vector ?n) (make-vector ?n '())))) (define-inline make-string (syntax-rules () ((make-string ?n) (make-string ?n #\space)))) (define-inline = (syntax-rules () ((= ?e1 ?e2 ?e3 ?e4 ___) (let ((t ?e2)) (and (= ?e1 t) (= t ?e3 ?e4 ___)))))) (define-inline < (syntax-rules () ((< ?e1 ?e2 ?e3 ?e4 ___) (let ((t ?e2)) (and (< ?e1 t) (< t ?e3 ?e4 ___)))))) (define-inline > (syntax-rules () ((> ?e1 ?e2 ?e3 ?e4 ___) (let ((t ?e2)) (and (> ?e1 t) (> t ?e3 ?e4 ___)))))) (define-inline <= (syntax-rules () ((<= ?e1 ?e2 ?e3 ?e4 ___) (let ((t ?e2)) (and (<= ?e1 t) (<= t ?e3 ?e4 ___)))))) (define-inline >= (syntax-rules () ((>= ?e1 ?e2 ?e3 ?e4 ___) (let ((t ?e2)) (and (>= ?e1 t) (>= t ?e3 ?e4 ___)))))) (define-inline + (syntax-rules () ((+) 0) ((+ ?e) ?e) ((+ ?e1 ?e2 ?e3 ?e4 ___) (+ (+ ?e1 ?e2) ?e3 ?e4 ___)))) (define-inline * (syntax-rules () ((*) 1) ((* ?e) ?e) ((* ?e1 ?e2 ?e3 ?e4 ___) (* (* ?e1 ?e2) ?e3 ?e4 ___)))) (define-inline - (syntax-rules () ((- ?e) (- 0 ?e)) ((- ?e1 ?e2 ?e3 ?e4 ___) (- (- ?e1 ?e2) ?e3 ?e4 ___)))) (define-inline / (syntax-rules () ((/ ?e) (/ 1 ?e)) ((/ ?e1 ?e2 ?e3 ?e4 ___) (/ (/ ?e1 ?e2) ?e3 ?e4 ___)))) (define-inline abs (syntax-rules () ((abs ?z) (let ((temp ?z)) (if (< temp 0) (_-- temp) temp))))) (define-inline negative? (syntax-rules () ((negative? ?x) (< ?x 0)))) (define-inline positive? (syntax-rules () ((positive? ?x) (> ?x 0)))) (define-inline eqv? (transformer (lambda (exp rename compare) (let ((arg1 (cadr exp)) (arg2 (caddr exp))) (define (constant? exp) (or (boolean? exp) (char? exp) (and (pair? exp) (= (length exp) 2) (identifier? (car exp)) (compare (car exp) (rename 'quote)) (symbol? (cadr exp))))) (if (or (constant? arg1) (constant? arg2)) (cons (rename 'eq?) (cdr exp)) exp))))) (define-inline memq (syntax-rules (quote) ((memq ?expr '(?datum ___)) (letrec-syntax ((memq0 (___ (syntax-rules (quote) ((memq0 '?xx '(?d ___)) (let ((t1 '(?d ___))) (memq1 '?xx t1 (?d ___)))) ((memq0 ?e '(?d ___)) (let ((t0 ?e) (t1 '(?d ___))) (memq1 t0 t1 (?d ___))))))) (memq1 (___ (syntax-rules () ((memq1 ?t0 ?t1 ()) #f) ((memq1 ?t0 ?t1 (?d1 ?d2 ___)) (if (eq? ?t0 '?d1) ?t1 (let ((?t1 (cdr ?t1))) (memq1 ?t0 ?t1 (?d2 ___))))))))) (memq0 ?expr '(?datum ___)))))) (define-inline memv (transformer (lambda (exp rename compare) (let ((arg1 (cadr exp)) (arg2 (caddr exp))) (if (or (boolean? arg1) (fixnum? arg1) (char? arg1) (and (pair? arg1) (= (length arg1) 2) (identifier? (car arg1)) (compare (car arg1) (rename 'quote)) (symbol? (cadr arg1))) (and (pair? arg2) (= (length arg2) 2) (identifier? (car arg2)) (compare (car arg2) (rename 'quote)) (every1? (lambda (x) (or (boolean? x) (fixnum? x) (char? x) (symbol? x))) (cadr arg2)))) (cons (rename 'memq) (cdr exp)) exp))))) (define-inline assv (transformer (lambda (exp rename compare) (let ((arg1 (cadr exp)) (arg2 (caddr exp))) (if (or (boolean? arg1) (char? arg1) (and (pair? arg1) (= (length arg1) 2) (identifier? (car arg1)) (compare (car arg1) (rename 'quote)) (symbol? (cadr arg1))) (and (pair? arg2) (= (length arg2) 2) (identifier? (car arg2)) (compare (car arg2) (rename 'quote)) (every1? (lambda (y) (and (pair? y) (let ((x (car y))) (or (boolean? x) (char? x) (symbol? x))))) (cadr arg2)))) (cons (rename 'assq) (cdr exp)) exp))))) (define-inline map (syntax-rules (lambda) ((map ?proc ?exp1 ?exp2 ___) (letrec-syntax ((loop (___ (syntax-rules (lambda) ((loop 1 () (?y1 ?y2 ___) ?f ?exprs) (loop 2 (?y1 ?y2 ___) ?f ?exprs)) ((loop 1 (?a1 ?a2 ___) (?y2 ___) ?f ?exprs) (loop 1 (?a2 ___) (y1 ?y2 ___) ?f ?exprs)) ((loop 2 ?ys (lambda ?formals ?body) ?exprs) (loop 3 ?ys (lambda ?formals ?body) ?exprs)) ((loop 2 ?ys (?f1 _ ?f2) ?exprs) (let ((f (?f1 _ ?f2))) (loop 3 ?ys f ?exprs))) ((loop 2 ?ys ?f ?exprs) (loop 3 ?ys ?f ?exprs)) ((loop 3 (?y1 ?y2 ___) ?f (?e1 ?e2 ___)) (do ((?y1 ?e1 (cdr ?y1)) (?y2 ?e2 (cdr ?y2)) ___ (results '() (cons (?f (car ?y1) (car ?y2) ___) results))) ((or (null? ?y1) (null? ?y2) ___) (reverse results)))))))) (loop 1 (?exp1 ?exp2 ___) () ?proc (?exp1 ?exp2 ___)))))) (define-inline for-each (syntax-rules (lambda) ((for-each ?proc ?exp1 ?exp2 ___) (letrec-syntax ((loop (___ (syntax-rules (lambda) ((loop 1 () (?y1 ?y2 ___) ?f ?exprs) (loop 2 (?y1 ?y2 ___) ?f ?exprs)) ((loop 1 (?a1 ?a2 ___) (?y2 ___) ?f ?exprs) (loop 1 (?a2 ___) (y1 ?y2 ___) ?f ?exprs)) ((loop 2 ?ys (lambda ?formals ?body) ?exprs) (loop 3 ?ys (lambda ?formals ?body) ?exprs)) ((loop 2 ?ys (?f1 _ ?f2) ?exprs) (let ((f (?f1 _ ?f2))) (loop 3 ?ys f ?exprs))) ((loop 2 ?ys ?f ?exprs) (loop 3 ?ys ?f ?exprs)) ((loop 3 (?y1 ?y2 ___) ?f (?e1 ?e2 ___)) (do ((?y1 ?e1 (cdr ?y1)) (?y2 ?e2 (cdr ?y2)) ___) ((or (null? ?y1) (null? ?y2) ___) (if #f #f)) (?f (car ?y1) (car ?y2) ___))))))) (loop 1 (?exp1 ?exp2 ___) () ?proc (?exp1 ?exp2 ___)))))))))))))))))
(let () (begin (set! extended-syntactic-environment (syntactic-copy global-syntactic-environment)) 'extended-syntactic-environment))
(let () (begin (set! make-extended-syntactic-environment (lambda () (let ((_make-extended-syntactic-environment_2 0)) (begin (set! _make-extended-syntactic-environment_2 (lambda () (syntactic-copy extended-syntactic-environment))) (_make-extended-syntactic-environment_2))))) 'make-extended-syntactic-environment))
(let () (begin (set! instruction_op car) 'instruction_op))
(let () (begin (set! instruction_arg1 cadr) 'instruction_arg1))
(let () (begin (set! instruction_arg2 caddr) 'instruction_arg2))
(let () (begin (set! instruction_arg3 cadddr) 'instruction_arg3))
(let () (begin (set! *mnemonic-names* '()) '*mnemonic-names*))
(let () (begin '(define *last-reserved-mnemonic* 32767) '(define make-mnemonic (let ((count 0)) (lambda (name) (set! count (+ count 1)) (if (= count *last-reserved-mnemonic*) (error "Error in make-mnemonic: conflict: " name)) (set! *mnemonic-names* (cons (cons count name) *mnemonic-names*)) count))) '(define (reserved-mnemonic name value) (if (and (> value 0) (< value *last-reserved-mnemonic*)) (set! *last-reserved-mnemonic* value)) (set! *mnemonic-names* (cons (cons value name) *mnemonic-names*)) value) #t))
(let () (begin (set! make-mnemonic (let ((_count_3 0)) (lambda (_name_4) (begin (set! _count_3 (+ _count_3 1)) (set! *mnemonic-names* (cons (cons _count_3 _name_4) *mnemonic-names*)) _count_3)))) 'make-mnemonic))
(let () (begin (set! reserved-mnemonic (lambda (_name_1 _ignored_1) (let ((_reserved-mnemonic_2 0)) (begin (set! _reserved-mnemonic_2 (lambda (_name_3 _ignored_3) (make-mnemonic _name_3))) (_reserved-mnemonic_2 _name_1 _ignored_1))))) 'reserved-mnemonic))
(let () (begin (set! $_linearize (reserved-mnemonic '_linearize -1)) '$_linearize))
(let () (begin (set! $_label (reserved-mnemonic '_label 63)) '$_label))
(let () (begin (set! $_proc (reserved-mnemonic '_proc 62)) '$_proc))
(let () (begin (set! $_cont (reserved-mnemonic '_cont 61)) '$_cont))
(let () (begin (set! $_align (reserved-mnemonic '_align 60)) '$_align))
(let () (begin (set! $_asm (reserved-mnemonic '_asm 59)) '$_asm))
(let () (begin (set! $_proc-doc (reserved-mnemonic '_proc-doc 58)) '$_proc-doc))
(let () (begin (set! $_end (reserved-mnemonic '_end 57)) '$_end))
(let () (begin (set! $_singlestep (reserved-mnemonic '_singlestep 56)) '$_singlestep))
(let () (begin (set! $_entry (reserved-mnemonic '_entry 55)) '$_entry))
(let () (begin (set! $op1 (make-mnemonic 'op1)) '$op1))
(let () (begin (set! $op2 (make-mnemonic 'op2)) '$op2))
(let () (begin (set! $op3 (make-mnemonic 'op3)) '$op3))
(let () (begin (set! $op2imm (make-mnemonic 'op2imm)) '$op2imm))
(let () (begin (set! $const (make-mnemonic 'const)) '$const))
(let () (begin (set! $global (make-mnemonic 'global)) '$global))
(let () (begin (set! $setglbl (make-mnemonic 'setglbl)) '$setglbl))
(let () (begin (set! $lexical (make-mnemonic 'lexical)) '$lexical))
(let () (begin (set! $setlex (make-mnemonic 'setlex)) '$setlex))
(let () (begin (set! $stack (make-mnemonic 'stack)) '$stack))
(let () (begin (set! $setstk (make-mnemonic 'setstk)) '$setstk))
(let () (begin (set! $load (make-mnemonic 'load)) '$load))
(let () (begin (set! $store (make-mnemonic 'store)) '$store))
(let () (begin (set! $reg (make-mnemonic 'reg)) '$reg))
(let () (begin (set! $setreg (make-mnemonic 'setreg)) '$setreg))
(let () (begin (set! $movereg (make-mnemonic 'movereg)) '$movereg))
(let () (begin (set! $lambda (make-mnemonic 'lambda)) '$lambda))
(let () (begin (set! $lexes (make-mnemonic 'lexes)) '$lexes))
(let () (begin (set! $args= (make-mnemonic 'args=)) '$args=))
(let () (begin (set! $args>= (make-mnemonic 'args>=)) '$args>=))
(let () (begin (set! $invoke (make-mnemonic 'invoke)) '$invoke))
(let () (begin (set! $save (make-mnemonic 'save)) '$save))
(let () (begin (set! $setrtn (make-mnemonic 'setrtn)) '$setrtn))
(let () (begin (set! $restore (make-mnemonic 'restore)) '$restore))
(let () (begin (set! $pop (make-mnemonic 'pop)) '$pop))
(let () (begin (set! $popstk (make-mnemonic 'popstk)) '$popstk))
(let () (begin (set! $return (make-mnemonic 'return)) '$return))
(let () (begin (set! $mvrtn (make-mnemonic 'mvrtn)) '$mvrtn))
(let () (begin (set! $apply (make-mnemonic 'apply)) '$apply))
(let () (begin (set! $nop (make-mnemonic 'nop)) '$nop))
(let () (begin (set! $jump (make-mnemonic 'jump)) '$jump))
(let () (begin (set! $skip (make-mnemonic 'skip)) '$skip))
(let () (begin (set! $branch (make-mnemonic 'branch)) '$branch))
(let () (begin (set! $branchf (make-mnemonic 'branchf)) '$branchf))
(let () (begin (set! $check (make-mnemonic 'check)) '$check))
(let () (begin (set! $trap (make-mnemonic 'trap)) '$trap))
(let () (begin (set! _maxargs-with-rest-arg_ 30) '_maxargs-with-rest-arg_))
(let () (begin (set! *nregs* 32) '*nregs*))
(let () (begin (set! *lastreg* (- *nregs* 1)) '*lastreg*))
(let () (begin (set! *fullregs* (quotient *nregs* 2)) '*fullregs*))
(let () (begin (set! *nhwregs* 8) '*nhwregs*))
(let () (begin (set! *regnames* (let () (let ((_loop_1_4_7 (unspecified))) (begin (set! _loop_1_4_7 (lambda (_alist_8 _r_8) (if (<= _r_8 0) _alist_8 (begin #t (_loop_1_4_7 (cons (cons (string->symbol (string-append "_REG" (number->string _r_8))) _r_8) _alist_8) (- _r_8 1)))))) (_loop_1_4_7 '() (- *nhwregs* 1)))))) '*regnames*))
(let () (begin (set! *number-of-mnemonics* 72) '*number-of-mnemonics*))
(let () (begin (set! prim-entry (lambda (_name_1) (let ((_prim-entry_2 0)) (begin (set! _prim-entry_2 (lambda (_name_3) (assq _name_3 $usual-integrable-procedures$))) (_prim-entry_2 _name_1))))) 'prim-entry))
(let () (begin (set! prim-arity cadr) 'prim-arity))
(let () (begin (set! prim-opcodename caddr) 'prim-opcodename))
(let () (begin (set! prim-immediate? cadddr) 'prim-immediate?))
(let () (begin (set! prim-primcode (lambda (_entry_1) (let ((_prim-primcode_2 0)) (begin (set! _prim-primcode_2 (lambda (_entry_3) (let ((_x_4_7 (let ((_x_9_12 (let ((_x_13_16 (let ((_x_17_20 (let ((_x_21_24 _entry_3)) (begin (_check! (pair? _x_21_24) 1 _x_21_24) (cdr:pair _x_21_24))))) (begin (_check! (pair? _x_17_20) 1 _x_17_20) (cdr:pair _x_17_20))))) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_4_7) 0 _x_4_7) (car:pair _x_4_7))))) (_prim-primcode_2 _entry_1))))) 'prim-primcode))
(let () (begin (set! smallint? (let* ((_least_3 (- 0 (expt 2 29))) (_greatest_6 (- (- 0 _least_3) 1))) (let () (lambda (_x_10) (if (number? _x_10) (if (exact? _x_10) (if (integer? _x_10) (let ((_t_15_18 _x_10)) (if (<= _least_3 _t_15_18) (<= _t_15_18 _greatest_6) #f)) #f) #f) #f))))) 'smallint?))
(let () (begin (set! sparc-imm? (lambda (_x_1) (let ((_sparc-imm?_2 0)) (begin (set! _sparc-imm?_2 (lambda (_x_3) (if (fixnum? _x_3) (let ((_t_6_9 _x_3)) (if (<= -1024 _t_6_9) (<= _t_6_9 1023) #f)) #f))) (_sparc-imm?_2 _x_1))))) 'sparc-imm?))
(let () (begin (set! sparc-eq-imm? (lambda (_x_1) (let ((_sparc-eq-imm?_2 0)) (begin (set! _sparc-eq-imm?_2 (lambda (_x_3) (let ((_temp_4_7 (sparc-imm? _x_3))) (if _temp_4_7 _temp_4_7 (let ((_temp_8_11 (eq? _x_3 #t))) (if _temp_8_11 _temp_8_11 (let ((_temp_12_15 (eq? _x_3 #f))) (if _temp_12_15 _temp_12_15 (eq? _x_3 '()))))))))) (_sparc-eq-imm?_2 _x_1))))) 'sparc-eq-imm?))
(let () (begin (set! valid-typetag? (lambda (_x_1) (let ((_valid-typetag?_2 0)) (begin (set! _valid-typetag?_2 (lambda (_x_3) (if (fixnum? _x_3) (let ((_t_6_9 _x_3)) (if (<= 0 _t_6_9) (<= _t_6_9 7) #f)) #f))) (_valid-typetag?_2 _x_1))))) 'valid-typetag?))
(let () (begin (set! fixnum-primitives (lambda () (let ((_fixnum-primitives_2 0)) (begin (set! _fixnum-primitives_2 (lambda () #t)) (_fixnum-primitives_2))))) 'fixnum-primitives))
(let () (begin (set! flonum-primitives (lambda () (let ((_flonum-primitives_2 0)) (begin (set! _flonum-primitives_2 (lambda () #t)) (_flonum-primitives_2))))) 'flonum-primitives))
(let () (begin (set! prim-lives-until (lambda (_entry_1) (let ((_prim-lives-until_2 0)) (begin (set! _prim-lives-until_2 (lambda (_entry_3) (list-ref _entry_3 5))) (_prim-lives-until_2 _entry_1))))) 'prim-lives-until))
(let () (begin (set! prim-kills (lambda (_entry_1) (let ((_prim-kills_2 0)) (begin (set! _prim-kills_2 (lambda (_entry_3) (list-ref _entry_3 6))) (_prim-kills_2 _entry_1))))) 'prim-kills))
(let () (begin (set! $usual-integrable-procedures$ (let ((_:globals_3 available:killer:globals) (_:car_3 available:killer:car) (_:cdr_3 available:killer:cdr) (_:string_3 available:killer:string) (_:vector_3 available:killer:vector) (_:cell_3 available:killer:cell) (_:io_3 available:killer:io) (_:none_3 available:killer:none) (_:all_3 available:killer:all) (_:immortal_3 available:killer:immortal) (_:dead_3 available:killer:dead)) (_cons (_cons 'break (_cons 0 (_cons 'break (_cons #f (_cons 3 (_cons _:dead_3 (_cons _:all_3 '()))))))) (_cons (_cons 'creg (_cons 0 (_cons 'creg (_cons #f (_cons 7 (_cons _:dead_3 (_cons _:all_3 '()))))))) (_cons (_cons 'unspecified (_cons 0 (_cons 'unspecified (_cons #f (_cons -1 (_cons _:dead_3 (_cons _:none_3 '()))))))) (_cons (_cons 'undefined (_cons 0 (_cons 'undefined (_cons #f (_cons 8 (_cons _:dead_3 (_cons _:none_3 '()))))))) (_cons (_cons 'eof-object (_cons 0 (_cons 'eof-object (_cons #f (_cons -1 (_cons _:dead_3 (_cons _:none_3 '()))))))) (_cons (_cons 'enable-interrupts (_cons 1 (_cons 'enable-interrupts (_cons #f (_cons -1 (_cons _:dead_3 (_cons _:all_3 '()))))))) (_cons (_cons 'disable-interrupts (_cons 0 (_cons 'disable-interrupts (_cons #f (_cons -1 (_cons _:dead_3 (_cons _:all_3 '()))))))) (_cons (_cons 'typetag (_cons 1 (_cons 'typetag (_cons #f (_cons 17 (_cons _:dead_3 (_cons _:none_3 '()))))))) (_cons (_cons 'not (_cons 1 (_cons 'not (_cons #f (_cons 24 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'null? (_cons 1 (_cons 'null? (_cons #f (_cons 25 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'pair? (_cons 1 (_cons 'pair? (_cons #f (_cons 26 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'eof-object? (_cons 1 (_cons 'eof-object? (_cons #f (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'port? (_cons 1 (_cons 'port? (_cons #f (_cons -1 (_cons _:dead_3 (_cons _:none_3 '()))))))) (_cons (_cons 'structure? (_cons 1 (_cons 'structure? (_cons #f (_cons -1 (_cons _:dead_3 (_cons _:none_3 '()))))))) (_cons (_cons 'car (_cons 1 (_cons 'car (_cons #f (_cons 27 (_cons _:car_3 (_cons _:none_3 '()))))))) (_cons (_cons name:car (_cons 1 (_cons 'car (_cons #f (_cons 27 (_cons _:car_3 (_cons _:none_3 '()))))))) (_cons (_cons 'cdr (_cons 1 (_cons 'cdr (_cons #f (_cons 28 (_cons _:cdr_3 (_cons _:none_3 '()))))))) (_cons (_cons name:cdr (_cons 1 (_cons 'cdr (_cons #f (_cons 28 (_cons _:cdr_3 (_cons _:none_3 '()))))))) (_cons (_cons 'symbol? (_cons 1 (_cons 'symbol? (_cons #f (_cons 31 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'number? (_cons 1 (_cons 'complex? (_cons #f (_cons 32 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'complex? (_cons 1 (_cons 'complex? (_cons #f (_cons 32 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'real? (_cons 1 (_cons 'rational? (_cons #f (_cons 33 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'rational? (_cons 1 (_cons 'rational? (_cons #f (_cons 33 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'integer? (_cons 1 (_cons 'integer? (_cons #f (_cons 34 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'fixnum? (_cons 1 (_cons 'fixnum? (_cons #f (_cons 35 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'flonum? (_cons 1 (_cons 'flonum? (_cons #f (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'compnum? (_cons 1 (_cons 'compnum? (_cons #f (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'exact? (_cons 1 (_cons 'exact? (_cons #f (_cons 36 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'inexact? (_cons 1 (_cons 'inexact? (_cons #f (_cons 37 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'exact->inexact (_cons 1 (_cons 'exact->inexact (_cons #f (_cons 38 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'inexact->exact (_cons 1 (_cons 'inexact->exact (_cons #f (_cons 39 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'round (_cons 1 (_cons 'round (_cons #f (_cons 40 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'truncate (_cons 1 (_cons 'truncate (_cons #f (_cons 41 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'zero? (_cons 1 (_cons 'zero? (_cons #f (_cons 44 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons '_-- (_cons 1 (_cons '_-- (_cons #f (_cons 45 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'lognot (_cons 1 (_cons 'lognot (_cons #f (_cons 47 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'real-part (_cons 1 (_cons 'real-part (_cons #f (_cons 62 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'imag-part (_cons 1 (_cons 'imag-part (_cons #f (_cons 63 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'char? (_cons 1 (_cons 'char? (_cons #f (_cons 64 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'char->integer (_cons 1 (_cons 'char->integer (_cons #f (_cons 65 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'integer->char (_cons 1 (_cons 'integer->char (_cons #f (_cons 66 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'string? (_cons 1 (_cons 'string? (_cons #f (_cons 80 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'string-length (_cons 1 (_cons 'string-length (_cons #f (_cons 81 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'vector? (_cons 1 (_cons 'vector? (_cons #f (_cons 82 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'vector-length (_cons 1 (_cons 'vector-length (_cons #f (_cons 83 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'bytevector? (_cons 1 (_cons 'bytevector? (_cons #f (_cons 84 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'bytevector-length (_cons 1 (_cons 'bytevector-length (_cons #f (_cons 85 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'bytevector-fill! (_cons 2 (_cons 'bytevector-fill! (_cons #f (_cons -1 (_cons _:dead_3 (_cons _:string_3 '()))))))) (_cons (_cons 'make-bytevector (_cons 1 (_cons 'make-bytevector (_cons #f (_cons 86 (_cons _:dead_3 (_cons _:none_3 '()))))))) (_cons (_cons 'procedure? (_cons 1 (_cons 'procedure? (_cons #f (_cons 88 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'procedure-length (_cons 1 (_cons 'procedure-length (_cons #f (_cons 89 (_cons _:dead_3 (_cons _:none_3 '()))))))) (_cons (_cons 'make-procedure (_cons 1 (_cons 'make-procedure (_cons #f (_cons 90 (_cons _:dead_3 (_cons _:none_3 '()))))))) (_cons (_cons 'creg-set! (_cons 1 (_cons 'creg-set! (_cons #f (_cons 113 (_cons _:dead_3 (_cons _:none_3 '()))))))) (_cons (_cons name:make-cell (_cons 1 (_cons 'make-cell (_cons #f (_cons 126 (_cons _:dead_3 (_cons _:none_3 '()))))))) (_cons (_cons name:cell-ref (_cons 1 (_cons 'cell-ref (_cons #f (_cons 127 (_cons _:cell_3 (_cons _:none_3 '()))))))) (_cons (_cons name:cell-set! (_cons 2 (_cons 'cell-set! (_cons #f (_cons 223 (_cons _:dead_3 (_cons _:cell_3 '()))))))) (_cons (_cons 'typetag-set! (_cons 2 (_cons 'typetag-set! (_cons valid-typetag? (_cons 160 (_cons _:dead_3 (_cons _:all_3 '()))))))) (_cons (_cons 'eq? (_cons 2 (_cons 'eq? (_cons sparc-eq-imm? (_cons 161 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'eqv? (_cons 2 (_cons 'eqv? (_cons #f (_cons 162 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'cons (_cons 2 (_cons 'cons (_cons #f (_cons 168 (_cons _:dead_3 (_cons _:none_3 '()))))))) (_cons (_cons name:cons (_cons 2 (_cons 'cons (_cons #f (_cons 168 (_cons _:dead_3 (_cons _:none_3 '()))))))) (_cons (_cons 'set-car! (_cons 2 (_cons 'set-car! (_cons #f (_cons 169 (_cons _:dead_3 (_cons _:car_3 '()))))))) (_cons (_cons 'set-cdr! (_cons 2 (_cons 'set-cdr! (_cons #f (_cons 170 (_cons _:dead_3 (_cons _:cdr_3 '()))))))) (_cons (_cons '+ (_cons 2 (_cons '+ (_cons sparc-imm? (_cons 176 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons '- (_cons 2 (_cons '- (_cons sparc-imm? (_cons 177 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons '* (_cons 2 (_cons '* (_cons sparc-imm? (_cons 178 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons '/ (_cons 2 (_cons '/ (_cons #f (_cons 179 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'quotient (_cons 2 (_cons 'quotient (_cons #f (_cons 180 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons '< (_cons 2 (_cons '< (_cons sparc-imm? (_cons 181 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons '<= (_cons 2 (_cons '<= (_cons sparc-imm? (_cons 182 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons '= (_cons 2 (_cons '= (_cons sparc-imm? (_cons 183 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons '> (_cons 2 (_cons '> (_cons sparc-imm? (_cons 184 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons '>= (_cons 2 (_cons '>= (_cons sparc-imm? (_cons 185 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'logand (_cons 2 (_cons 'logand (_cons #f (_cons 192 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'logior (_cons 2 (_cons 'logior (_cons #f (_cons 193 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'logxor (_cons 2 (_cons 'logxor (_cons #f (_cons 194 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'lsh (_cons 2 (_cons 'lsh (_cons #f (_cons 195 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'rsha (_cons 2 (_cons 'rsha (_cons #f (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'rshl (_cons 2 (_cons 'rshl (_cons #f (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'rot (_cons 2 (_cons 'rot (_cons #f (_cons 196 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'make-string (_cons 2 (_cons 'make-string (_cons #f (_cons -1 (_cons _:dead_3 (_cons _:none_3 '()))))))) (_cons (_cons 'string-ref (_cons 2 (_cons 'string-ref (_cons sparc-imm? (_cons 209 (_cons _:string_3 (_cons _:none_3 '()))))))) (_cons (_cons 'string-set! (_cons 3 (_cons 'string-set! (_cons sparc-imm? (_cons -1 (_cons _:dead_3 (_cons _:string_3 '()))))))) (_cons (_cons 'make-vector (_cons 2 (_cons 'make-vector (_cons #f (_cons 210 (_cons _:dead_3 (_cons _:none_3 '()))))))) (_cons (_cons 'vector-ref (_cons 2 (_cons 'vector-ref (_cons sparc-imm? (_cons 211 (_cons _:vector_3 (_cons _:none_3 '()))))))) (_cons (_cons 'bytevector-ref (_cons 2 (_cons 'bytevector-ref (_cons sparc-imm? (_cons 213 (_cons _:string_3 (_cons _:none_3 '()))))))) (_cons (_cons 'procedure-ref (_cons 2 (_cons 'procedure-ref (_cons #f (_cons 215 (_cons _:dead_3 (_cons _:none_3 '()))))))) (_cons (_cons 'char<? (_cons 2 (_cons 'char<? (_cons char? (_cons 224 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'char<=? (_cons 2 (_cons 'char<=? (_cons char? (_cons 225 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'char=? (_cons 2 (_cons 'char=? (_cons char? (_cons 226 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'char>? (_cons 2 (_cons 'char>? (_cons char? (_cons 227 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'char>=? (_cons 2 (_cons 'char>=? (_cons char? (_cons 228 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'sys$partial-list->vector (_cons 2 (_cons 'sys$partial-list->vector (_cons #f (_cons -1 (_cons _:dead_3 (_cons _:all_3 '()))))))) (_cons (_cons 'vector-set! (_cons 3 (_cons 'vector-set! (_cons #f (_cons 241 (_cons _:dead_3 (_cons _:vector_3 '()))))))) (_cons (_cons 'bytevector-set! (_cons 3 (_cons 'bytevector-set! (_cons #f (_cons 242 (_cons _:dead_3 (_cons _:string_3 '()))))))) (_cons (_cons 'procedure-set! (_cons 3 (_cons 'procedure-set! (_cons #f (_cons 243 (_cons _:dead_3 (_cons _:all_3 '()))))))) (_cons (_cons 'bytevector-like? (_cons 1 (_cons 'bytevector-like? (_cons #f (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'vector-like? (_cons 1 (_cons 'vector-like? (_cons #f (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'bytevector-like-ref (_cons 2 (_cons 'bytevector-like-ref (_cons #f (_cons -1 (_cons _:string_3 (_cons _:none_3 '()))))))) (_cons (_cons 'bytevector-like-set! (_cons 3 (_cons 'bytevector-like-set! (_cons #f (_cons -1 (_cons _:dead_3 (_cons _:string_3 '()))))))) (_cons (_cons 'sys$bvlcmp (_cons 2 (_cons 'sys$bvlcmp (_cons #f (_cons -1 (_cons _:dead_3 (_cons _:all_3 '()))))))) (_cons (_cons 'vector-like-ref (_cons 2 (_cons 'vector-like-ref (_cons #f (_cons -1 (_cons _:vector_3 (_cons _:none_3 '()))))))) (_cons (_cons 'vector-like-set! (_cons 3 (_cons 'vector-like-set! (_cons #f (_cons -1 (_cons _:dead_3 (_cons _:vector_3 '()))))))) (_cons (_cons 'vector-like-length (_cons 1 (_cons 'vector-like-length (_cons #f (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'bytevector-like-length (_cons 1 (_cons 'bytevector-like-length (_cons #f (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'remainder (_cons 2 (_cons 'remainder (_cons #f (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'sys$read-char (_cons 1 (_cons 'sys$read-char (_cons #f (_cons -1 (_cons _:dead_3 (_cons _:io_3 '()))))))) (_cons (_cons 'gc-counter (_cons 0 (_cons 'gc-counter (_cons #f (_cons -1 (_cons _:dead_3 (_cons _:none_3 '()))))))) (append (if (fixnum-primitives) (_cons (_cons 'most-positive-fixnum (_cons 0 (_cons 'most-positive-fixnum (_cons #f (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'most-negative-fixnum (_cons 0 (_cons 'most-negative-fixnum (_cons #f (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'fx+ (_cons 2 (_cons 'fx+ (_cons sparc-imm? (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'fx- (_cons 2 (_cons 'fx- (_cons sparc-imm? (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'fx-- (_cons 1 (_cons 'fx-- (_cons #f (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'fx* (_cons 2 (_cons 'fx* (_cons #f (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'fx= (_cons 2 (_cons 'fx= (_cons sparc-imm? (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'fx< (_cons 2 (_cons 'fx< (_cons sparc-imm? (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'fx<= (_cons 2 (_cons 'fx<= (_cons sparc-imm? (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'fx> (_cons 2 (_cons 'fx> (_cons sparc-imm? (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'fx>= (_cons 2 (_cons 'fx>= (_cons sparc-imm? (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'fxzero? (_cons 1 (_cons 'fxzero? (_cons #f (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'fxpositive? (_cons 1 (_cons 'fxpositive? (_cons #f (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'fxnegative? (_cons 1 (_cons 'fxnegative? (_cons #f (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) '())))))))))))))) '()) (append (if (flonum-primitives) (_cons (_cons 'fl+ (_cons 2 (_cons '+ (_cons #f (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'fl- (_cons 2 (_cons '- (_cons #f (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'fl-- (_cons 1 (_cons '_-- (_cons #f (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'fl* (_cons 2 (_cons '* (_cons #f (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'fl= (_cons 2 (_cons '= (_cons #f (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'fl< (_cons 2 (_cons '< (_cons #f (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'fl<= (_cons 2 (_cons '<= (_cons #f (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'fl> (_cons 2 (_cons '> (_cons #f (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'fl>= (_cons 2 (_cons '>= (_cons #f (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) '()))))))))) '()) (_cons (_cons name:check! (_cons -1 (_cons 'check! (_cons #f (_cons -1 (_cons _:dead_3 (_cons _:none_3 '()))))))) (_cons (_cons 'vector-length:vec (_cons 1 (_cons 'vector-length:vec (_cons #f (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons 'vector-ref:trusted (_cons 2 (_cons 'vector-ref:trusted (_cons sparc-imm? (_cons -1 (_cons _:vector_3 (_cons _:none_3 '()))))))) (_cons (_cons 'vector-set!:trusted (_cons 3 (_cons 'vector-set!:trusted (_cons #f (_cons -1 (_cons _:dead_3 (_cons _:vector_3 '()))))))) (_cons (_cons 'car:pair (_cons 1 (_cons 'car:pair (_cons #f (_cons -1 (_cons _:car_3 (_cons _:none_3 '()))))))) (_cons (_cons 'cdr:pair (_cons 1 (_cons 'cdr:pair (_cons #f (_cons -1 (_cons _:cdr_3 (_cons _:none_3 '()))))))) (_cons (_cons '=:fix:fix (_cons 2 (_cons '=:fix:fix (_cons sparc-imm? (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons '<:fix:fix (_cons 2 (_cons '<:fix:fix (_cons sparc-imm? (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons '<=:fix:fix (_cons 2 (_cons '<=:fix:fix (_cons sparc-imm? (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons '>=:fix:fix (_cons 2 (_cons '>=:fix:fix (_cons sparc-imm? (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons '>:fix:fix (_cons 2 (_cons '>:fix:fix (_cons sparc-imm? (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons '_+:idx:idx (_cons 2 (_cons '_+:idx:idx (_cons #f (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons '_+:fix:fix (_cons 2 (_cons '_+:idx:idx (_cons #f (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons '_+:exi:exi (_cons 2 (_cons '_+:idx:idx (_cons #f (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons '_+:flo:flo (_cons 2 (_cons '_+:idx:idx (_cons #f (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons '=:flo:flo (_cons 2 (_cons '=:flo:flo (_cons #f (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons '=:obj:flo (_cons 2 (_cons '=:obj:flo (_cons #f (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) (_cons (_cons '=:flo:obj (_cons 2 (_cons '=:flo:obj (_cons #f (_cons -1 (_cons _:immortal_3 (_cons _:none_3 '()))))))) '())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) '$usual-integrable-procedures$))
(let () (begin (set! $immediate-primops$ '((typetag-set! 128) (eq? 129) (+ 130) (- 131) (< 132) (<= 133) (= 134) (> 135) (>= 136) (char<? 137) (char<=? 138) (char=? 139) (char>? 140) (char>=? 141) (string-ref 144) (vector-ref 145) (bytevector-ref 146) (bytevector-like-ref -1) (vector-like-ref -1) (fx+ -1) (fx- -1) (fx-- -1) (fx= -1) (fx< -1) (fx<= -1) (fx> -1) (fx>= -1))) '$immediate-primops$))
(let () (begin (set! $reg/op1/branchf (make-mnemonic 'reg/op1/branchf)) '$reg/op1/branchf))
(let () (begin (set! $reg/op2/branchf (make-mnemonic 'reg/op2/branchf)) '$reg/op2/branchf))
(let () (begin (set! $reg/op2imm/branchf (make-mnemonic 'reg/op2imm/branchf)) '$reg/op2imm/branchf))
(let () (begin (set! $reg/op1/check (make-mnemonic 'reg/op1/check)) '$reg/op1/check))
(let () (begin (set! $reg/op2/check (make-mnemonic 'reg/op2/check)) '$reg/op2/check))
(let () (begin (set! $reg/op2imm/check (make-mnemonic 'reg/op2imm/check)) '$reg/op2imm/check))
(let () (begin (set! $reg/op1/setreg (make-mnemonic 'reg/op1/setreg)) '$reg/op1/setreg))
(let () (begin (set! $reg/op2/setreg (make-mnemonic 'reg/op2/setreg)) '$reg/op2/setreg))
(let () (begin (set! $reg/op2imm/setreg (make-mnemonic 'reg/op2imm/setreg)) '$reg/op2imm/setreg))
(let () (begin (set! $reg/branchf (make-mnemonic 'reg/branchf)) '$reg/branchf))
(let () (begin (set! $reg/return (make-mnemonic 'reg/return)) '$reg/return))
(let () (begin (set! $reg/setglbl (make-mnemonic 'reg/setglbl)) '$reg/setglbl))
(let () (begin (set! $reg/op3 (make-mnemonic 'reg/op3)) '$reg/op3))
(let () (begin (set! $const/setreg (make-mnemonic 'const/setreg)) '$const/setreg))
(let () (begin (set! $const/return (make-mnemonic 'const/return)) '$const/return))
(let () (begin (set! $global/setreg (make-mnemonic 'global/setreg)) '$global/setreg))
(let () (begin (set! $setrtn/branch (make-mnemonic 'setrtn/branch)) '$setrtn/branch))
(let () (begin (set! $setrtn/invoke (make-mnemonic 'setrtn/invoke)) '$setrtn/invoke))
(let () (begin (set! $global/invoke (make-mnemonic 'global/invoke)) '$global/invoke))
(let () (begin (set! $cons 'cons) '$cons))
(let () (begin (set! $car:pair 'car) '$car:pair))
(let () (begin (set! $cdr:pair 'cdr) '$cdr:pair))
(let () (define-subtype 'true 'object))
(let () (define-subtype 'eqtype 'object))
(let () (define-subtype 'nonpointer 'eqtype))
(let () (define-subtype 'eqtype1 'eqtype))
(let () (define-subtype 'boolean 'nonpointer))
(let () (define-subtype 'truth 'eqtype1))
(let () (define-subtype 'truth 'boolean))
(let () (define-subtype 'false 'boolean))
(let () (define-subtype 'eqtype1 'true))
(let () (define-subtype 'procedure 'true))
(let () (define-subtype 'vector 'true))
(let () (define-subtype 'bytevector 'true))
(let () (define-subtype 'string 'true))
(let () (define-subtype 'pair 'true))
(let () (define-subtype 'emptylist 'eqtype1))
(let () (define-subtype 'emptylist 'nonpointer))
(let () (define-subtype 'symbol 'eqtype1))
(let () (define-subtype 'char 'eqtype1))
(let () (define-subtype 'char 'nonpointer))
(let () (define-subtype 'number 'true))
(let () (define-subtype 'inexact 'number))
(let () (define-subtype 'flonum 'inexact))
(let () (define-subtype 'integer 'number))
(let () (define-subtype 'exact 'number))
(let () (define-subtype 'exactint 'integer))
(let () (define-subtype 'exactint 'exact))
(let () (define-subtype 'fixnum 'exactint))
(let () (define-subtype '!fixnum 'fixnum))
(let () (define-subtype 'fixnum! 'fixnum))
(let () (define-subtype 'index '!fixnum))
(let () (define-subtype 'index 'fixnum!))
(let () (define-subtype 'zero 'index))
(let () (define-subtype 'fixnum 'eqtype1))
(let () (define-subtype 'fixnum 'nonpointer))
(let () (compute-type-structure!))
(let () (define-intersection 'true 'eqtype 'eqtype1))
(let () (define-intersection 'true 'boolean 'truth))
(let () (define-intersection 'exact 'integer 'exactint))
(let () (define-intersection '!fixnum 'fixnum! 'index))
(let () (begin (set! rep:min_fixnum (- 0 (expt 2 29))) 'rep:min_fixnum))
(let () (begin (set! rep:max_fixnum (- (expt 2 29) 1)) 'rep:max_fixnum))
(let () (begin (set! rep:max_index (- (expt 2 24) 1)) 'rep:max_index))
(let () (begin (set! rep:object (symbol->rep 'object)) 'rep:object))
(let () (begin (set! rep:true (symbol->rep 'true)) 'rep:true))
(let () (begin (set! rep:truth (symbol->rep 'truth)) 'rep:truth))
(let () (begin (set! rep:false (symbol->rep 'false)) 'rep:false))
(let () (begin (set! rep:boolean (symbol->rep 'boolean)) 'rep:boolean))
(let () (begin (set! rep:pair (symbol->rep 'pair)) 'rep:pair))
(let () (begin (set! rep:symbol (symbol->rep 'symbol)) 'rep:symbol))
(let () (begin (set! rep:number (symbol->rep 'number)) 'rep:number))
(let () (begin (set! rep:zero (symbol->rep 'zero)) 'rep:zero))
(let () (begin (set! rep:index (symbol->rep 'index)) 'rep:index))
(let () (begin (set! rep:fixnum (symbol->rep 'fixnum)) 'rep:fixnum))
(let () (begin (set! rep:exactint (symbol->rep 'exactint)) 'rep:exactint))
(let () (begin (set! rep:flonum (symbol->rep 'flonum)) 'rep:flonum))
(let () (begin (set! rep:exact (symbol->rep 'exact)) 'rep:exact))
(let () (begin (set! rep:inexact (symbol->rep 'inexact)) 'rep:inexact))
(let () (begin (set! rep:integer (symbol->rep 'integer)) 'rep:integer))
(let () (begin (set! rep:char (symbol->rep 'char)) 'rep:char))
(let () (begin (set! rep:string (symbol->rep 'string)) 'rep:string))
(let () (begin (set! rep:vector (symbol->rep 'vector)) 'rep:vector))
(let () (begin (set! rep:procedure (symbol->rep 'procedure)) 'rep:procedure))
(let () (begin (set! rep:bottom (symbol->rep 'bottom)) 'rep:bottom))
(let () (begin (set! representation-of-value (lambda (_x_1) (let ((_representation-of-value_2 0)) (begin (set! _representation-of-value_2 (lambda (_x_3) (if (boolean? _x_3) (if _x_3 rep:truth rep:false) (if (pair? _x_3) rep:pair (if (symbol? _x_3) rep:symbol (if (number? _x_3) (if (if (exact? _x_3) (integer? _x_3) #f) (if (zero? _x_3) rep:zero (if (let ((_t_13_16 _x_3)) (if (<= 0 _t_13_16) (<= _t_13_16 rep:max_index) #f)) rep:index (if (let ((_t_20_23 _x_3)) (if (<= rep:min_fixnum _t_20_23) (<= _t_20_23 rep:max_fixnum) #f)) rep:fixnum rep:exactint))) (if (if (inexact? _x_3) (real? _x_3) #f) rep:flonum rep:number)) (if (char? _x_3) rep:char (if (string? _x_3) rep:string (if (vector? _x_3) rep:vector rep:true))))))))) (_representation-of-value_2 _x_1))))) 'representation-of-value))
(let () (begin (set! rep-specific (representation-table '((= (fixnum fixnum) =:fix:fix) (< (fixnum fixnum) <:fix:fix) (<= (fixnum fixnum) <=:fix:fix) (> (fixnum fixnum) >:fix:fix) (>= (fixnum fixnum) >=:fix:fix)))) 'rep-specific))
(let () (begin (set! rep-result (representation-table '((fixnum? (fixnum) (truth)) (vector? (vector) (truth)) (<= (zero !fixnum) (truth)) (>= (!fixnum zero) (truth)) (<=:fix:fix (zero !fixnum) (truth)) (>=:fix:fix (!fixnum zero) (truth)) (+ (index index) (!fixnum)) (+ (fixnum fixnum) (exactint)) (- (index index) (fixnum!)) (- (fixnum fixnum) (exactint)) (+ (flonum flonum) (flonum)) (- (flonum flonum) (flonum)) (make-vector (object object) (vector)) (vector-length:vec (vector) (index)) (cons (object object) (pair)) (= (number number) (boolean)) (< (number number) (boolean)) (<= (number number) (boolean)) (> (number number) (boolean)) (>= (number number) (boolean)) (=:fix:fix (fixnum fixnum) (boolean)) (<:fix:fix (fixnum fixnum) (boolean)) (<=:fix:fix (fixnum fixnum) (boolean)) (>:fix:fix (fixnum fixnum) (boolean)) (>=:fix:fix (fixnum fixnum) (boolean))))) 'rep-result))
(let () (begin (set! rep-informing (representation-table '((fixnum? (object) (fixnum) (object)) (flonum? (object) (flonum) (object)) (vector? (object) (vector) (object)) (pair? (object) (pair) (object)) (= (exactint index) (index index) (exactint index)) (= (index exactint) (index index) (index exactint)) (= (exactint !fixnum) (!fixnum !fixnum) (exactint !fixnum)) (= (!fixnum exactint) (!fixnum !fixnum) (!fixnum exactint)) (= (exactint fixnum!) (fixnum! fixnum!) (exactint fixnum!)) (= (fixnum! exactint) (fixnum! fixnum!) (fixnum! exactint)) (< (!fixnum fixnum!) (index index) (!fixnum fixnum!)) (< (fixnum fixnum!) (fixnum! fixnum!) (fixnum fixnum!)) (< (!fixnum fixnum) (!fixnum !fixnum) (!fixnum fixnum)) (< (fixnum! !fixnum) (fixnum! !fixnum) (index index)) (<= (!fixnum fixnum!) (index index) (!fixnum fixnum!)) (<= (fixnum! !fixnum) (fixnum! !fixnum) (index index)) (<= (fixnum fixnum!) (fixnum! fixnum!) (fixnum fixnum!)) (<= (!fixnum fixnum) (!fixnum !fixnum) (!fixnum fixnum)) (> (!fixnum fixnum!) (!fixnum fixnum!) (index index)) (> (fixnum! !fixnum) (index index) (fixnum! !fixnum)) (> (fixnum fixnum!) (fixnum fixnum!) (fixnum! fixnum!)) (> (!fixnum fixnum) (!fixnum fixnum) (!fixnum !fixnum)) (>= (!fixnum fixnum!) (!fixnum fixnum!) (index index)) (>= (fixnum! !fixnum) (index index) (fixnum! !fixnum)) (>= (fixnum fixnum!) (fixnum fixnum!) (fixnum! fixnum!)) (>= (!fixnum fixnum) (!fixnum fixnum) (!fixnum !fixnum)) (=:fix:fix (exactint index) (index index) (exactint index)) (=:fix:fix (index exactint) (index index) (index exactint)) (=:fix:fix (exactint !fixnum) (!fixnum !fixnum) (exactint !fixnum)) (=:fix:fix (!fixnum exactint) (!fixnum !fixnum) (!fixnum exactint)) (=:fix:fix (exactint fixnum!) (fixnum! fixnum!) (exactint fixnum!)) (=:fix:fix (fixnum! exactint) (fixnum! fixnum!) (fixnum! exactint)) (<:fix:fix (!fixnum fixnum!) (index index) (!fixnum fixnum!)) (<:fix:fix (fixnum! !fixnum) (fixnum! !fixnum) (index index)) (<:fix:fix (fixnum fixnum!) (fixnum! fixnum!) (fixnum fixnum!)) (<:fix:fix (!fixnum fixnum) (!fixnum !fixnum) (!fixnum fixnum)) (<=:fix:fix (!fixnum fixnum!) (index index) (!fixnum fixnum!)) (<=:fix:fix (fixnum! !fixnum) (fixnum! !fixnum) (index index)) (<=:fix:fix (fixnum fixnum!) (fixnum! fixnum!) (fixnum fixnum!)) (<=:fix:fix (!fixnum fixnum) (!fixnum !fixnum) (!fixnum fixnum)) (>:fix:fix (!fixnum fixnum!) (!fixnum fixnum!) (index index)) (>:fix:fix (fixnum! !fixnum) (index index) (fixnum! !fixnum)) (>:fix:fix (fixnum fixnum!) (fixnum fixnum!) (fixnum! fixnum!)) (>:fix:fix (!fixnum fixnum) (!fixnum fixnum) (!fixnum !fixnum)) (>=:fix:fix (!fixnum fixnum!) (!fixnum fixnum!) (index index)) (>=:fix:fix (fixnum! !fixnum) (index index) (fixnum! !fixnum)) (>=:fix:fix (fixnum fixnum!) (fixnum fixnum!) (fixnum! fixnum!)) (>=:fix:fix (!fixnum fixnum) (!fixnum fixnum) (!fixnum !fixnum))))) 'rep-informing))
(let () (begin (set! pass2 (lambda (_exp_1) (let ((_pass2_2 0)) (begin (set! _pass2_2 (lambda (_exp_3) (simplify _exp_3 (make-notepad #f)))) (_pass2_2 _exp_1))))) 'pass2))
(let () (begin (set! simplify (lambda (_exp_1 _notepad_1) (let ((_simplify_2 0)) (begin (set! _simplify_2 (lambda (_exp_3 _notepad_3) (let ((_temp_4_7 (let ((_x_14_17 _exp_3)) (begin (_check! (pair? _x_14_17) 0 _x_14_17) (car:pair _x_14_17))))) (if (memv _temp_4_7 '(quote)) _exp_3 (if (memv _temp_4_7 '(lambda)) (simplify-lambda _exp_3 _notepad_3) (if (memv _temp_4_7 '(set!)) (simplify-assignment _exp_3 _notepad_3) (if (memv _temp_4_7 '(if)) (simplify-conditional _exp_3 _notepad_3) (if (memv _temp_4_7 '(begin)) (if (variable? _exp_3) (begin (notepad-var-add! _notepad_3 (variable_name _exp_3)) _exp_3) (simplify-sequential _exp_3 _notepad_3)) (simplify-call _exp_3 _notepad_3))))))))) (_simplify_2 _exp_1 _notepad_1))))) 'simplify))
(let () (begin (set! simplify-lambda (lambda (_exp_1 _notepad_1) (let ((_simplify-lambda_2 0)) (begin (set! _simplify-lambda_2 (lambda (_exp_3 _notepad_3) (begin (notepad-lambda-add! _notepad_3 _exp_3) (let ((_defs_6 (lambda_defs _exp_3)) (_body_6 (lambda_body _exp_3)) (_newnotepad_6 (make-notepad _exp_3))) (begin (let () (let ((_loop_12_14_17 (unspecified))) (begin (set! _loop_12_14_17 (lambda (_y1_7_8_18) (if (null? _y1_7_8_18) (if #f #f (unspecified)) (begin (begin #t (let ((_def_22 (let ((_x_23_26 _y1_7_8_18)) (begin (_check! (pair? _x_23_26) 0 _x_23_26) (car:pair _x_23_26))))) (_simplify-lambda_2 (def_rhs _def_22) _newnotepad_6))) (_loop_12_14_17 (let ((_x_27_30 _y1_7_8_18)) (begin (_check! (pair? _x_27_30) 1 _x_27_30) (cdr:pair _x_27_30)))))))) (_loop_12_14_17 _defs_6)))) (lambda_body-set! _exp_3 (simplify _body_6 _newnotepad_6)) (lambda_f-set! _exp_3 (notepad-free-variables _newnotepad_6)) (lambda_g-set! _exp_3 (notepad-captured-variables _newnotepad_6)) (single-assignment-analysis _exp_3 _newnotepad_6) (let ((_known-lambdas_33 (notepad_nonescaping _newnotepad_6))) (let () (let ((_loop_39_41_44 (unspecified))) (begin (set! _loop_39_41_44 (lambda (_y1_34_35_45) (if (null? _y1_34_35_45) (if #f #f (unspecified)) (begin (begin #t (let ((_l_49 (let ((_x_50_53 _y1_34_35_45)) (begin (_check! (pair? _x_50_53) 0 _x_50_53) (car:pair _x_50_53))))) (if (memq _l_49 _known-lambdas_33) (lambda-lifting _l_49 _exp_3) (lambda-lifting _l_49 _l_49)))) (_loop_39_41_44 (let ((_x_54_57 _y1_34_35_45)) (begin (_check! (pair? _x_54_57) 1 _x_54_57) (cdr:pair _x_54_57)))))))) (_loop_39_41_44 (notepad_lambdas _newnotepad_6)))))))) (single-assignment-elimination _exp_3 _notepad_3) (assignment-elimination _exp_3) (if (not (notepad_parent _notepad_3)) (lambda-lifting _exp_3 _exp_3) (unspecified)) _exp_3))) (_simplify-lambda_2 _exp_1 _notepad_1))))) 'simplify-lambda))
(let () (begin (set! simplify-assignment (lambda (_exp_1 _notepad_1) (let ((_simplify-assignment_2 0)) (begin (set! _simplify-assignment_2 (lambda (_exp_3 _notepad_3) (begin (notepad-var-add! _notepad_3 (assignment_lhs _exp_3)) (let ((_rhs_6 (simplify (assignment_rhs _exp_3) _notepad_3))) (if (begin? _rhs_6) (let ((_exprs_10 (reverse (begin_exprs _rhs_6)))) (begin (assignment_rhs-set! _exp_3 (let ((_x_11_14 _exprs_10)) (begin (_check! (pair? _x_11_14) 0 _x_11_14) (car:pair _x_11_14)))) (post-simplify-begin (make-begin (reverse (cons _exp_3 (let ((_x_15_18 _exprs_10)) (begin (_check! (pair? _x_15_18) 1 _x_15_18) (cdr:pair _x_15_18)))))) _notepad_3))) (begin (assignment_rhs-set! _exp_3 _rhs_6) _exp_3)))))) (_simplify-assignment_2 _exp_1 _notepad_1))))) 'simplify-assignment))
(let () (begin (set! simplify-sequential (lambda (_exp_1 _notepad_1) (let ((_simplify-sequential_2 0)) (begin (set! _simplify-sequential_2 (lambda (_exp_3 _notepad_3) (let ((_exprs_6 (let () (let ((_loop_12_15_18 (unspecified))) (begin (set! _loop_12_15_18 (lambda (_y1_7_8_19 _results_7_11_19) (if (null? _y1_7_8_19) (reverse _results_7_11_19) (begin #t (_loop_12_15_18 (let ((_x_23_26 _y1_7_8_19)) (begin (_check! (pair? _x_23_26) 1 _x_23_26) (cdr:pair _x_23_26))) (cons (let ((_exp_27 (let ((_x_28_31 _y1_7_8_19)) (begin (_check! (pair? _x_28_31) 0 _x_28_31) (car:pair _x_28_31))))) (simplify _exp_27 _notepad_3)) _results_7_11_19)))))) (_loop_12_15_18 (begin_exprs _exp_3) '())))))) (begin (begin_exprs-set! _exp_3 _exprs_6) (post-simplify-begin _exp_3 _notepad_3))))) (_simplify-sequential_2 _exp_1 _notepad_1))))) 'simplify-sequential))
(let () (begin (set! post-simplify-begin (lambda (_exp_1 _notepad_1) (let ((_post-simplify-begin_2 0)) (begin (set! _post-simplify-begin_2 (lambda (_exp_3 _notepad_3) (let ((_unspecified-expression_6 (make-unspecified))) (let ((_filter_9 (unspecified)) (_flatten_9 (unspecified))) (begin (set! _filter_9 (lambda (_exprs_10 _filtered_10) (if (null? _exprs_10) _filtered_10 (let ((_exp_13 (let ((_x_39_42 _exprs_10)) (begin (_check! (pair? _x_39_42) 0 _x_39_42) (car:pair _x_39_42))))) (if (constant? _exp_13) (_filter_9 (let ((_x_15_18 _exprs_10)) (begin (_check! (pair? _x_15_18) 1 _x_15_18) (cdr:pair _x_15_18))) _filtered_10) (if (variable? _exp_13) (_filter_9 (let ((_x_20_23 _exprs_10)) (begin (_check! (pair? _x_20_23) 1 _x_20_23) (cdr:pair _x_20_23))) _filtered_10) (if (lambda? _exp_13) (begin (notepad_lambdas-set! _notepad_3 (remq _exp_13 (notepad_lambdas _notepad_3))) (_filter_9 (let ((_x_25_28 _exprs_10)) (begin (_check! (pair? _x_25_28) 1 _x_25_28) (cdr:pair _x_25_28))) _filtered_10)) (if (equal? _exp_13 _unspecified-expression_6) (_filter_9 (let ((_x_30_33 _exprs_10)) (begin (_check! (pair? _x_30_33) 1 _x_30_33) (cdr:pair _x_30_33))) _filtered_10) (_filter_9 (let ((_x_35_38 _exprs_10)) (begin (_check! (pair? _x_35_38) 1 _x_35_38) (cdr:pair _x_35_38))) (cons _exp_13 _filtered_10)))))))))) (set! _flatten_9 (lambda (_exprs_43 _flattened_43) (if (null? _exprs_43) _flattened_43 (if (begin? (let ((_x_46_49 _exprs_43)) (begin (_check! (pair? _x_46_49) 0 _x_46_49) (car:pair _x_46_49)))) (_flatten_9 (let ((_x_50_53 _exprs_43)) (begin (_check! (pair? _x_50_53) 1 _x_50_53) (cdr:pair _x_50_53))) (_flatten_9 (begin_exprs (let ((_x_54_57 _exprs_43)) (begin (_check! (pair? _x_54_57) 0 _x_54_57) (car:pair _x_54_57)))) _flattened_43)) (_flatten_9 (let ((_x_59_62 _exprs_43)) (begin (_check! (pair? _x_59_62) 1 _x_59_62) (cdr:pair _x_59_62))) (cons (let ((_x_63_66 _exprs_43)) (begin (_check! (pair? _x_63_66) 0 _x_63_66) (car:pair _x_63_66))) _flattened_43)))))) (let ((_exprs_67 (_flatten_9 (begin_exprs _exp_3) '()))) (begin (begin_exprs-set! _exp_3 (_filter_9 (let ((_x_68_71 _exprs_67)) (begin (_check! (pair? _x_68_71) 1 _x_68_71) (cdr:pair _x_68_71))) (cons (let ((_x_73_76 _exprs_67)) (begin (_check! (pair? _x_73_76) 0 _x_73_76) (car:pair _x_73_76))) '()))) (if (null? (let ((_x_77_80 (begin_exprs _exp_3))) (begin (_check! (pair? _x_77_80) 1 _x_77_80) (cdr:pair _x_77_80)))) (let ((_x_81_84 (begin_exprs _exp_3))) (begin (_check! (pair? _x_81_84) 0 _x_81_84) (car:pair _x_81_84))) _exp_3)))))))) (_post-simplify-begin_2 _exp_1 _notepad_1))))) 'post-simplify-begin))
(let () (begin (set! simplify-call (lambda (_exp_1 _notepad_1) (let ((_simplify-call_2 0)) (begin (set! _simplify-call_2 (lambda (_exp_3 _notepad_3) (let ((_finish_4 (unspecified)) (_loop_4 (unspecified))) (begin (set! _finish_4 (lambda (_newargs_5 _exprs_5) (begin (call_args-set! _exp_3 (reverse _newargs_5)) (let* ((_newexp_8 (if (lambda? (call_proc _exp_3)) (simplify-let _exp_3 _notepad_3) (begin (call_proc-set! _exp_3 (simplify (call_proc _exp_3) _notepad_3)) _exp_3))) (_newexp_11 (if (if (call? _newexp_8) (variable? (call_proc _newexp_8)) #f) (let* ((_procname_35 (variable_name (call_proc _newexp_8))) (_args_38 (call_args _newexp_8)) (_entry_41 (if (not (null? _args_38)) (if (constant? (let ((_x_71_74 _args_38)) (begin (_check! (pair? _x_71_74) 0 _x_71_74) (car:pair _x_71_74)))) (if (integrate-usual-procedures) (if (every? constant? _args_38) (let ((_entry_80 (constant-folding-entry _procname_35))) (if _entry_80 (let ((_predicates_85 (constant-folding-predicates _entry_80))) (if (= (length _args_38) (length _predicates_85)) (let ((_args_90 _args_38) (_predicates_90 _predicates_85)) (let () (let ((_loop_93 (unspecified))) (begin (set! _loop_93 (lambda (_args_94 _predicates_94) (if (null? _args_94) _entry_80 (if ((let ((_x_97_100 _predicates_94)) (begin (_check! (pair? _x_97_100) 0 _x_97_100) (car:pair _x_97_100))) (constant_value (let ((_x_101_104 _args_94)) (begin (_check! (pair? _x_101_104) 0 _x_101_104) (car:pair _x_101_104))))) (_loop_93 (let ((_x_105_108 _args_94)) (begin (_check! (pair? _x_105_108) 1 _x_105_108) (cdr:pair _x_105_108))) (let ((_x_109_112 _predicates_94)) (begin (_check! (pair? _x_109_112) 1 _x_109_112) (cdr:pair _x_109_112)))) #f)))) (_loop_93 _args_90 _predicates_90))))) #f)) #f)) #f) #f) #f) #f))) (let () (if _entry_41 (make-constant (apply (constant-folding-folder _entry_41) (let () (let ((_loop_50_53_56 (unspecified))) (begin (set! _loop_50_53_56 (lambda (_y1_45_46_57 _results_45_49_57) (if (null? _y1_45_46_57) (reverse _results_45_49_57) (begin #t (_loop_50_53_56 (let ((_x_61_64 _y1_45_46_57)) (begin (_check! (pair? _x_61_64) 1 _x_61_64) (cdr:pair _x_61_64))) (cons (constant_value (let ((_x_65_68 _y1_45_46_57)) (begin (_check! (pair? _x_65_68) 0 _x_65_68) (car:pair _x_65_68)))) _results_45_49_57)))))) (_loop_50_53_56 _args_38 '())))))) _newexp_8))) _newexp_8))) (let () (if (if (call? _newexp_11) (begin? (call_proc _newexp_11)) #f) (let ((_exprs0_20 (reverse (begin_exprs (call_proc _newexp_11))))) (begin (call_proc-set! _newexp_11 (let ((_x_21_24 _exprs0_20)) (begin (_check! (pair? _x_21_24) 0 _x_21_24) (car:pair _x_21_24)))) (post-simplify-begin (make-begin (reverse (cons _newexp_11 (append (let ((_x_25_28 _exprs0_20)) (begin (_check! (pair? _x_25_28) 1 _x_25_28) (cdr:pair _x_25_28))) _exprs_5)))) _notepad_3))) (if (null? _exprs_5) _newexp_11 (post-simplify-begin (make-begin (reverse (cons _newexp_11 _exprs_5))) _notepad_3)))))))) (set! _loop_4 (lambda (_args_114 _newargs_114 _exprs_114) (if (null? _args_114) (_finish_4 _newargs_114 _exprs_114) (if (begin? (let ((_x_117_120 _args_114)) (begin (_check! (pair? _x_117_120) 0 _x_117_120) (car:pair _x_117_120)))) (let ((_newexprs_123 (reverse (begin_exprs (let ((_x_136_139 _args_114)) (begin (_check! (pair? _x_136_139) 0 _x_136_139) (car:pair _x_136_139))))))) (_loop_4 (let ((_x_124_127 _args_114)) (begin (_check! (pair? _x_124_127) 1 _x_124_127) (cdr:pair _x_124_127))) (cons (let ((_x_128_131 _newexprs_123)) (begin (_check! (pair? _x_128_131) 0 _x_128_131) (car:pair _x_128_131))) _newargs_114) (append (let ((_x_132_135 _newexprs_123)) (begin (_check! (pair? _x_132_135) 1 _x_132_135) (cdr:pair _x_132_135))) _exprs_114))) (_loop_4 (let ((_x_141_144 _args_114)) (begin (_check! (pair? _x_141_144) 1 _x_141_144) (cdr:pair _x_141_144))) (cons (let ((_x_145_148 _args_114)) (begin (_check! (pair? _x_145_148) 0 _x_145_148) (car:pair _x_145_148))) _newargs_114) _exprs_114))))) (call_args-set! _exp_3 (let () (let ((_loop_154_157_160 (unspecified))) (begin (set! _loop_154_157_160 (lambda (_y1_149_150_161 _results_149_153_161) (if (null? _y1_149_150_161) (reverse _results_149_153_161) (begin #t (_loop_154_157_160 (let ((_x_165_168 _y1_149_150_161)) (begin (_check! (pair? _x_165_168) 1 _x_165_168) (cdr:pair _x_165_168))) (cons (let ((_arg_169 (let ((_x_170_173 _y1_149_150_161)) (begin (_check! (pair? _x_170_173) 0 _x_170_173) (car:pair _x_170_173))))) (simplify _arg_169 _notepad_3)) _results_149_153_161)))))) (_loop_154_157_160 (call_args _exp_3) '()))))) (_loop_4 (call_args _exp_3) '() '()))))) (_simplify-call_2 _exp_1 _notepad_1))))) 'simplify-call))
(let () (begin (set! simplify-let (lambda (_exp_1 _notepad_1) (let ((_simplify-let_2 0)) (begin (set! _simplify-let_2 (lambda (_exp_3 _notepad_3) (let ((_return2_4 (unspecified)) (_loop2_4 (unspecified)) (_return1-finish_4 (unspecified)) (_return1_4 (unspecified)) (_loop1_4 (unspecified)) (_proc_4 (unspecified))) (begin (set! _return2_4 (lambda (_rev-formals_5 _rev-actuals_5 _rev-for-effect_5) (let ((_formals_8 (reverse _rev-formals_5)) (_actuals_8 (reverse _rev-actuals_5)) (_for-effect_8 (reverse _rev-for-effect_5))) (begin (lambda_args-set! _proc_4 _formals_8) (call_args-set! _exp_3 _actuals_8) (let ((_exp_11 (if (if (null? _actuals_8) (let ((_temp_15_18 (null? (lambda_defs _proc_4)))) (if _temp_15_18 _temp_15_18 (if (notepad_parent _notepad_3) (policy:lift? _proc_4 (notepad_parent _notepad_3) (let () (let ((_loop_27_30_33 (unspecified))) (begin (set! _loop_27_30_33 (lambda (_y1_22_23_34 _results_22_26_34) (if (null? _y1_22_23_34) (reverse _results_22_26_34) (begin #t (_loop_27_30_33 (let ((_x_38_41 _y1_22_23_34)) (begin (_check! (pair? _x_38_41) 1 _x_38_41) (cdr:pair _x_38_41))) (cons (let ((_def_42 (let ((_x_43_46 _y1_22_23_34)) (begin (_check! (pair? _x_43_46) 0 _x_43_46) (car:pair _x_43_46))))) '()) _results_22_26_34)))))) (_loop_27_30_33 (lambda_defs _proc_4) '()))))) #f))) #f) (begin (let () (let ((_loop_52_54_57 (unspecified))) (begin (set! _loop_52_54_57 (lambda (_y1_47_48_58) (if (null? _y1_47_48_58) (if #f #f (unspecified)) (begin (begin #t (let ((_i_62 (let ((_x_63_66 _y1_47_48_58)) (begin (_check! (pair? _x_63_66) 0 _x_63_66) (car:pair _x_63_66))))) (notepad-var-add! _notepad_3 _i_62))) (_loop_52_54_57 (let ((_x_67_70 _y1_47_48_58)) (begin (_check! (pair? _x_67_70) 1 _x_67_70) (cdr:pair _x_67_70)))))))) (_loop_52_54_57 (lambda_f _proc_4))))) (if (not (null? (lambda_defs _proc_4))) (let ((_parent_73 (notepad_parent _notepad_3)) (_defs_73 (lambda_defs _proc_4)) (_r_73 (lambda_r _proc_4))) (begin (lambda_defs-set! _parent_73 (append _defs_73 (lambda_defs _parent_73))) (lambda_defs-set! _proc_4 '()) (lambda_r-set! _parent_73 (append (let () (let ((_loop_79_82_85 (unspecified))) (begin (set! _loop_79_82_85 (lambda (_y1_74_75_86 _results_74_78_86) (if (null? _y1_74_75_86) (reverse _results_74_78_86) (begin #t (_loop_79_82_85 (let ((_x_90_93 _y1_74_75_86)) (begin (_check! (pair? _x_90_93) 1 _x_90_93) (cdr:pair _x_90_93))) (cons (let ((_def_94 (let ((_x_95_98 _y1_74_75_86)) (begin (_check! (pair? _x_95_98) 0 _x_95_98) (car:pair _x_95_98))))) (r-lookup _r_73 (def_lhs _def_94))) _results_74_78_86)))))) (_loop_79_82_85 _defs_73 '())))) (lambda_r _parent_73))))) (unspecified)) (lambda_body _proc_4)) _exp_3))) (if (null? _for-effect_8) _exp_11 (post-simplify-begin (make-begin (append _for-effect_8 (cons _exp_11 '()))) _notepad_3))))))) (set! _loop2_4 (lambda (_formals_99 _actuals_99 _processed-formals_99 _processed-actuals_99 _for-effect_99) (if (null? _formals_99) (_return2_4 _processed-formals_99 _processed-actuals_99 _for-effect_99) (if (ignored? (let ((_x_102_105 _formals_99)) (begin (_check! (pair? _x_102_105) 0 _x_102_105) (car:pair _x_102_105)))) (_loop2_4 (let ((_x_106_109 _formals_99)) (begin (_check! (pair? _x_106_109) 1 _x_106_109) (cdr:pair _x_106_109))) (let ((_x_110_113 _actuals_99)) (begin (_check! (pair? _x_110_113) 1 _x_110_113) (cdr:pair _x_110_113))) _processed-formals_99 _processed-actuals_99 (cons (let ((_x_114_117 _actuals_99)) (begin (_check! (pair? _x_114_117) 0 _x_114_117) (car:pair _x_114_117))) _for-effect_99)) (_loop2_4 (let ((_x_119_122 _formals_99)) (begin (_check! (pair? _x_119_122) 1 _x_119_122) (cdr:pair _x_119_122))) (let ((_x_123_126 _actuals_99)) (begin (_check! (pair? _x_123_126) 1 _x_123_126) (cdr:pair _x_123_126))) (cons (let ((_x_127_130 _formals_99)) (begin (_check! (pair? _x_127_130) 0 _x_127_130) (car:pair _x_127_130))) _processed-formals_99) (cons (let ((_x_131_134 _actuals_99)) (begin (_check! (pair? _x_131_134) 0 _x_131_134) (car:pair _x_131_134))) _processed-actuals_99) _for-effect_99))))) (set! _return1-finish_4 (lambda (_formals_135 _actuals_135) (begin (simplify-lambda _proc_4 _notepad_3) (_loop2_4 _formals_135 _actuals_135 '() '() '())))) (set! _return1_4 (lambda (_rev-formals_136 _rev-actuals_136) (let ((_formals_139 (reverse _rev-formals_136)) (_actuals_139 (reverse _rev-actuals_136))) (begin (lambda_args-set! _proc_4 _formals_139) (if (if (not (null? _formals_139)) (if (null? (let ((_x_142_145 _formals_139)) (begin (_check! (pair? _x_142_145) 1 _x_142_145) (cdr:pair _x_142_145)))) (let* ((_x_149 (let ((_x_161_164 _formals_139)) (begin (_check! (pair? _x_161_164) 0 _x_161_164) (car:pair _x_161_164)))) (_r_152 (lambda_r _proc_4)) (_refs_155 (references _r_152 _x_149))) (let () (if (= 1 (length _refs_155)) (null? (assignments _r_152 _x_149)) #f))) #f) #f) (let ((_x_167 (let ((_x_186_189 _formals_139)) (begin (_check! (pair? _x_186_189) 0 _x_186_189) (car:pair _x_186_189)))) (_body_167 (lambda_body _proc_4))) (if (if (variable? _body_167) (eq? _x_167 (variable_name _body_167)) #f) (simplify (let ((_x_171_174 _actuals_139)) (begin (_check! (pair? _x_171_174) 0 _x_171_174) (car:pair _x_171_174))) _notepad_3) (if (if (conditional? _body_167) (let ((_b0_180 (if_test _body_167))) (begin (variable? _b0_180) (eq? _x_167 (variable_name _b0_180)))) #f) (begin (if_test-set! _body_167 (let ((_x_181_184 _actuals_139)) (begin (_check! (pair? _x_181_184) 0 _x_181_184) (car:pair _x_181_184)))) (simplify _body_167 _notepad_3)) (_return1-finish_4 _formals_139 _actuals_139)))) (_return1-finish_4 _formals_139 _actuals_139)))))) (set! _loop1_4 (lambda (_formals_190 _actuals_190 _processed-formals_190 _processed-actuals_190) (if (null? _formals_190) (begin (if (not (null? _actuals_190)) (pass2-error p2error:wna _exp_3) (unspecified)) (_return1_4 _processed-formals_190 _processed-actuals_190)) (if (symbol? _formals_190) (_return1_4 (cons _formals_190 _processed-formals_190) (cons (make-call-to-list _actuals_190) _processed-actuals_190)) (if (null? _actuals_190) (begin (pass2-error p2error:wna _exp_3) (_return1_4 _processed-formals_190 _processed-actuals_190)) (if (if (lambda? (let ((_x_196_199 _actuals_190)) (begin (_check! (pair? _x_196_199) 0 _x_196_199) (car:pair _x_196_199)))) (let ((_rinfo_203 (r-lookup (lambda_r _proc_4) (let ((_x_206_209 _formals_190)) (begin (_check! (pair? _x_206_209) 0 _x_206_209) (car:pair _x_206_209)))))) (if (null? (r-entry_assignments _rinfo_203)) (= (length (r-entry_references _rinfo_203)) (length (r-entry_calls _rinfo_203))) #f)) #f) (begin (let ((_i_212 (let ((_x_213_216 _formals_190)) (begin (_check! (pair? _x_213_216) 0 _x_213_216) (car:pair _x_213_216)))) (_l_212 (let ((_x_217_220 _actuals_190)) (begin (_check! (pair? _x_217_220) 0 _x_217_220) (car:pair _x_217_220))))) (begin (notepad-nonescaping-add! _notepad_3 _l_212) (lambda_defs-set! _proc_4 (cons (make-definition _i_212 _l_212) (lambda_defs _proc_4))) (standardize-known-calls _l_212 (r-entry_calls (r-lookup (lambda_r _proc_4) _i_212))) (lambda_f-set! _proc_4 (union (lambda_f _proc_4) (free-variables _l_212))) (lambda_g-set! _proc_4 (union (lambda_g _proc_4) (lambda_g _l_212))))) (_loop1_4 (let ((_x_221_224 _formals_190)) (begin (_check! (pair? _x_221_224) 1 _x_221_224) (cdr:pair _x_221_224))) (let ((_x_225_228 _actuals_190)) (begin (_check! (pair? _x_225_228) 1 _x_225_228) (cdr:pair _x_225_228))) _processed-formals_190 _processed-actuals_190)) (if (if (constant? (let ((_x_231_234 _actuals_190)) (begin (_check! (pair? _x_231_234) 0 _x_231_234) (car:pair _x_231_234)))) (let* ((_x_238 (constant_value (let ((_x_252_255 _actuals_190)) (begin (_check! (pair? _x_252_255) 0 _x_252_255) (car:pair _x_252_255))))) (_temp_239_242 (boolean? _x_238))) (if _temp_239_242 _temp_239_242 (let ((_temp_243_246 (number? _x_238))) (if _temp_243_246 _temp_243_246 (let ((_temp_247_250 (symbol? _x_238))) (if _temp_247_250 _temp_247_250 (char? _x_238))))))) #f) (let* ((_i_258 (let ((_x_317_320 _formals_190)) (begin (_check! (pair? _x_317_320) 0 _x_317_320) (car:pair _x_317_320)))) (_rinfo_261 (r-lookup (lambda_r _proc_4) _i_258))) (let () (if (null? (r-entry_assignments _rinfo_261)) (begin (let () (let ((_loop_270_272_275 (unspecified))) (begin (set! _loop_270_272_275 (lambda (_y1_265_266_276) (if (null? _y1_265_266_276) (if #f #f (unspecified)) (begin (begin #t (let ((_ref_280 (let ((_x_285_288 _y1_265_266_276)) (begin (_check! (pair? _x_285_288) 0 _x_285_288) (car:pair _x_285_288))))) (variable-set! _ref_280 (let ((_x_281_284 _actuals_190)) (begin (_check! (pair? _x_281_284) 0 _x_281_284) (car:pair _x_281_284)))))) (_loop_270_272_275 (let ((_x_289_292 _y1_265_266_276)) (begin (_check! (pair? _x_289_292) 1 _x_289_292) (cdr:pair _x_289_292)))))))) (_loop_270_272_275 (r-entry_references _rinfo_261))))) (lambda_r-set! _proc_4 (remq _rinfo_261 (lambda_r _proc_4))) (lambda_f-set! _proc_4 (remq _i_258 (lambda_f _proc_4))) (lambda_g-set! _proc_4 (remq _i_258 (lambda_g _proc_4))) (_loop1_4 (let ((_x_293_296 _formals_190)) (begin (_check! (pair? _x_293_296) 1 _x_293_296) (cdr:pair _x_293_296))) (let ((_x_297_300 _actuals_190)) (begin (_check! (pair? _x_297_300) 1 _x_297_300) (cdr:pair _x_297_300))) _processed-formals_190 _processed-actuals_190)) (_loop1_4 (let ((_x_301_304 _formals_190)) (begin (_check! (pair? _x_301_304) 1 _x_301_304) (cdr:pair _x_301_304))) (let ((_x_305_308 _actuals_190)) (begin (_check! (pair? _x_305_308) 1 _x_305_308) (cdr:pair _x_305_308))) (cons (let ((_x_309_312 _formals_190)) (begin (_check! (pair? _x_309_312) 0 _x_309_312) (car:pair _x_309_312))) _processed-formals_190) (cons (let ((_x_313_316 _actuals_190)) (begin (_check! (pair? _x_313_316) 0 _x_313_316) (car:pair _x_313_316))) _processed-actuals_190))))) (begin (if (null? _actuals_190) (pass2-error p2error:wna _exp_3) (unspecified)) (_loop1_4 (let ((_x_322_325 _formals_190)) (begin (_check! (pair? _x_322_325) 1 _x_322_325) (cdr:pair _x_322_325))) (let ((_x_326_329 _actuals_190)) (begin (_check! (pair? _x_326_329) 1 _x_326_329) (cdr:pair _x_326_329))) (cons (let ((_x_330_333 _formals_190)) (begin (_check! (pair? _x_330_333) 0 _x_330_333) (car:pair _x_330_333))) _processed-formals_190) (cons (let ((_x_334_337 _actuals_190)) (begin (_check! (pair? _x_334_337) 0 _x_334_337) (car:pair _x_334_337))) _processed-actuals_190)))))))))) (set! _proc_4 (call_proc _exp_3)) (notepad-nonescaping-add! _notepad_3 _proc_4) (_loop1_4 (lambda_args _proc_4) (call_args _exp_3) '() '()))))) (_simplify-let_2 _exp_1 _notepad_1))))) 'simplify-let))
(let () (begin (set! single-assignment-analysis (lambda (_l_1 _notepad_1) (let ((_single-assignment-analysis_2 0)) (begin (set! _single-assignment-analysis_2 (lambda (_l_3 _notepad_3) (let ((_formals_6 (lambda_args _l_3)) (_defs_6 (lambda_defs _l_3)) (_r_6 (lambda_r _l_3)) (_body_6 (lambda_body _l_3))) (let ((_finish!_7 (unspecified))) (begin (set! _finish!_7 (lambda (_exprs_8 _escapees_8) (begin (begin_exprs-set! _body_6 (append (reverse _escapees_8) _exprs_8)) (lambda_body-set! _l_3 (post-simplify-begin _body_6 '()))))) (if (begin? _body_6) (let ((_exprs_11 (begin_exprs _body_6)) (_escapees_11 '())) (let () (let ((_loop_14 (unspecified))) (begin (set! _loop_14 (lambda (_exprs_15 _escapees_15) (let ((_first_18 (let ((_x_43_46 _exprs_15)) (begin (_check! (pair? _x_43_46) 0 _x_43_46) (car:pair _x_43_46))))) (if (if (assignment? _first_18) (not (null? (let ((_x_21_24 _exprs_15)) (begin (_check! (pair? _x_21_24) 1 _x_21_24) (cdr:pair _x_21_24))))) #f) (let ((_i_27 (assignment_lhs _first_18)) (_rhs_27 (assignment_rhs _first_18))) (if (if (lambda? _rhs_27) (if (local? _r_6 _i_27) (= 1 (length (assignments _r_6 _i_27))) #f) #f) (if (= (length (calls _r_6 _i_27)) (length (references _r_6 _i_27))) (begin (notepad-nonescaping-add! _notepad_3 _rhs_27) (flag-as-ignored _i_27 _l_3) (lambda_defs-set! _l_3 (cons (make-definition _i_27 _rhs_27) (lambda_defs _l_3))) (assignments-set! _r_6 _i_27 '()) (standardize-known-calls _rhs_27 (r-entry_calls (r-lookup _r_6 _i_27))) (_loop_14 (let ((_x_31_34 _exprs_15)) (begin (_check! (pair? _x_31_34) 1 _x_31_34) (cdr:pair _x_31_34))) _escapees_15)) (_loop_14 (let ((_x_35_38 _exprs_15)) (begin (_check! (pair? _x_35_38) 1 _x_35_38) (cdr:pair _x_35_38))) (cons (let ((_x_39_42 _exprs_15)) (begin (_check! (pair? _x_39_42) 0 _x_39_42) (car:pair _x_39_42))) _escapees_15))) (_finish!_7 _exprs_15 _escapees_15))) (_finish!_7 _exprs_15 _escapees_15))))) (_loop_14 _exprs_11 _escapees_11))))) (unspecified))))))) (_single-assignment-analysis_2 _l_1 _notepad_1))))) 'single-assignment-analysis))
(let () (begin (set! standardize-known-calls (lambda (_l_1 _calls_1) (let ((_standardize-known-calls_2 0)) (begin (set! _standardize-known-calls_2 (lambda (_l_3 _calls_3) (let ((_formals_6 (lambda_args _l_3))) (if (not (list? _formals_6)) (let* ((_newformals_10 (make-null-terminated _formals_6)) (_n_13 (- (length _newformals_10) 1))) (let () (begin (lambda_args-set! _l_3 _newformals_10) (let () (let ((_loop_22_24_27 (unspecified))) (begin (set! _loop_22_24_27 (lambda (_y1_17_18_28) (if (null? _y1_17_18_28) (if #f #f (unspecified)) (begin (begin #t (let ((_call_32 (let ((_x_34_37 _y1_17_18_28)) (begin (_check! (pair? _x_34_37) 0 _x_34_37) (car:pair _x_34_37))))) (if (>= (length (call_args _call_32)) _n_13) (call_args-set! _call_32 (append (list-head (call_args _call_32) _n_13) (cons (make-call-to-list (list-tail (call_args _call_32) _n_13)) '()))) (pass2-error p2error:wna _call_32)))) (_loop_22_24_27 (let ((_x_38_41 _y1_17_18_28)) (begin (_check! (pair? _x_38_41) 1 _x_38_41) (cdr:pair _x_38_41)))))))) (_loop_22_24_27 _calls_3))))))) (let ((_n_45 (length _formals_6))) (let () (let ((_loop_51_53_56 (unspecified))) (begin (set! _loop_51_53_56 (lambda (_y1_46_47_57) (if (null? _y1_46_47_57) (if #f #f (unspecified)) (begin (begin #t (let ((_call_61 (let ((_x_62_65 _y1_46_47_57)) (begin (_check! (pair? _x_62_65) 0 _x_62_65) (car:pair _x_62_65))))) (if (not (= (length (call_args _call_61)) _n_45)) (pass2-error p2error:wna _call_61) (unspecified)))) (_loop_51_53_56 (let ((_x_66_69 _y1_46_47_57)) (begin (_check! (pair? _x_66_69) 1 _x_66_69) (cdr:pair _x_66_69)))))))) (_loop_51_53_56 _calls_3))))))))) (_standardize-known-calls_2 _l_1 _calls_1))))) 'standardize-known-calls))
(let () (begin (set! single-assignment-elimination (lambda (_l_1 _notepad_1) (let ((_single-assignment-elimination_2 0)) (begin (set! _single-assignment-elimination_2 (lambda (_l_3 _notepad_3) (begin (if (begin? (lambda_body _l_3)) (let* ((_formals_6 (make-null-terminated (lambda_args _l_3))) (_defined_9 (let () (let ((_loop_190_193_196 (unspecified))) (begin (set! _loop_190_193_196 (lambda (_y1_185_186_197 _results_185_189_197) (if (null? _y1_185_186_197) (reverse _results_185_189_197) (begin #t (_loop_190_193_196 (let ((_x_201_204 _y1_185_186_197)) (begin (_check! (pair? _x_201_204) 1 _x_201_204) (cdr:pair _x_201_204))) (cons (def_lhs (let ((_x_205_208 _y1_185_186_197)) (begin (_check! (pair? _x_205_208) 0 _x_205_208) (car:pair _x_205_208)))) _results_185_189_197)))))) (_loop_190_193_196 (lambda_defs _l_3) '()))))) (_escaping_12 (intersection _formals_6 (notepad-captured-variables _notepad_3))) (_r_15 (lambda_r _l_3))) (let () (let ((_return-loop_19 (unspecified)) (_return_19 (unspecified)) (_loop_19 (unspecified))) (begin (set! _return-loop_19 (lambda (_assigns_20 _body_20) (if (null? _assigns_20) (let ((_l3_23 (call_proc _body_20))) (begin (lambda_body-set! _l_3 _body_20) (lambda-lifting _l3_23 _l_3))) (let* ((_i_26 (assignment_lhs (let ((_x_56_59 _assigns_20)) (begin (_check! (pair? _x_56_59) 0 _x_56_59) (car:pair _x_56_59))))) (_e_29 (assignment_rhs (let ((_x_52_55 _assigns_20)) (begin (_check! (pair? _x_52_55) 0 _x_52_55) (car:pair _x_52_55))))) (_l3_32 (call_proc _body_20)) (_f_35 (remq _i_26 (lambda_f _l3_32))) (_g_38 (remq _i_26 (lambda_g _l3_32)))) (let () (begin (flag-as-ignored _i_26 _l_3) (assignments-set! _r_15 _i_26 '()) (let ((_l2_44 (make-lambda (cons _i_26 '()) '() (cons (r-entry _r_15 _i_26) '()) _f_35 _g_38 (lambda_decls _l_3) (lambda_doc _l_3) _body_20))) (begin (lambda_r-set! _l_3 (remq (r-entry _r_15 _i_26) _r_15)) (lambda-lifting _l3_32 _l2_44) (_return-loop_19 (let ((_x_45_48 _assigns_20)) (begin (_check! (pair? _x_45_48) 1 _x_45_48) (cdr:pair _x_45_48))) (make-call _l2_44 (cons _e_29 '()))))))))))) (set! _return_19 (lambda (_exprs_60 _assigns_60) (if (not (null? _assigns_60)) (let ((_i_63 (assignment_lhs (let ((_x_122_125 _assigns_60)) (begin (_check! (pair? _x_122_125) 0 _x_122_125) (car:pair _x_122_125))))) (_e_63 (assignment_rhs (let ((_x_126_129 _assigns_60)) (begin (_check! (pair? _x_126_129) 0 _x_126_129) (car:pair _x_126_129))))) (_defs_63 (lambda_defs _l_3)) (_f_63 (lambda_f _l_3)) (_g_63 (lambda_g _l_3))) (begin (flag-as-ignored _i_63 _l_3) (assignments-set! _r_15 _i_63 '()) (let ((_l2_66 (make-lambda (cons _i_63 '()) _defs_63 (cons (r-entry _r_15 _i_63) (let () (let ((_loop_102_105_108 (unspecified))) (begin (set! _loop_102_105_108 (lambda (_y1_97_98_109 _results_97_101_109) (if (null? _y1_97_98_109) (reverse _results_97_101_109) (begin #t (_loop_102_105_108 (let ((_x_113_116 _y1_97_98_109)) (begin (_check! (pair? _x_113_116) 1 _x_113_116) (cdr:pair _x_113_116))) (cons (let ((_def_117 (let ((_x_118_121 _y1_97_98_109)) (begin (_check! (pair? _x_118_121) 0 _x_118_121) (car:pair _x_118_121))))) (r-entry _r_15 (def_lhs _def_117))) _results_97_101_109)))))) (_loop_102_105_108 _defs_63 '()))))) _f_63 _g_63 (lambda_decls _l_3) (lambda_doc _l_3) (make-begin _exprs_60)))) (begin (lambda_defs-set! _l_3 '()) (let () (let ((_loop_72_74_77 (unspecified))) (begin (set! _loop_72_74_77 (lambda (_y1_67_68_78) (if (null? _y1_67_68_78) (if #f #f (unspecified)) (begin (begin #t (let ((_entry_82 (let ((_x_83_86 _y1_67_68_78)) (begin (_check! (pair? _x_83_86) 0 _x_83_86) (car:pair _x_83_86))))) (lambda_r-set! _l_3 (remq _entry_82 _r_15)))) (_loop_72_74_77 (let ((_x_87_90 _y1_67_68_78)) (begin (_check! (pair? _x_87_90) 1 _x_87_90) (cdr:pair _x_87_90)))))))) (_loop_72_74_77 (lambda_r _l2_66))))) (_return-loop_19 (let ((_x_91_94 _assigns_60)) (begin (_check! (pair? _x_91_94) 1 _x_91_94) (cdr:pair _x_91_94))) (make-call _l2_66 (cons _e_63 '()))))))) (unspecified)))) (set! _loop_19 (lambda (_exprs_130 _assigns_130 _call-has-occurred?_130 _free_130) (if (null? (let ((_x_132_135 _exprs_130)) (begin (_check! (pair? _x_132_135) 1 _x_132_135) (cdr:pair _x_132_135)))) (_return_19 _exprs_130 _assigns_130) (if (assignment? (let ((_x_137_140 _exprs_130)) (begin (_check! (pair? _x_137_140) 0 _x_137_140) (car:pair _x_137_140)))) (let ((_i1_143 (assignment_lhs (let ((_x_176_179 _exprs_130)) (begin (_check! (pair? _x_176_179) 0 _x_176_179) (car:pair _x_176_179))))) (_e1_143 (assignment_rhs (let ((_x_180_183 _exprs_130)) (begin (_check! (pair? _x_180_183) 0 _x_180_183) (car:pair _x_180_183)))))) (if (if (memq _i1_143 _formals_6) (if (= (length (assignments _r_15 _i1_143)) 1) (not (if _call-has-occurred?_130 (memq _i1_143 _escaping_12) #f)) #f) #f) (let* ((_free-in-e1_151 (free-variables _e1_143)) (_newfree_154 (union _free-in-e1_151 _free_130))) (let () (if (let ((_temp_158_161 (memq _i1_143 _newfree_154))) (if _temp_158_161 _temp_158_161 (not (empty-set? (intersection _free-in-e1_151 _defined_9))))) (_return_19 _exprs_130 _assigns_130) (_loop_19 (let ((_x_163_166 _exprs_130)) (begin (_check! (pair? _x_163_166) 1 _x_163_166) (cdr:pair _x_163_166))) (cons (let ((_x_167_170 _exprs_130)) (begin (_check! (pair? _x_167_170) 0 _x_167_170) (car:pair _x_167_170))) _assigns_130) (let ((_temp_171_174 _call-has-occurred?_130)) (if _temp_171_174 _temp_171_174 (might-return-twice? _e1_143))) _newfree_154)))) (_return_19 _exprs_130 _assigns_130))) (_return_19 _exprs_130 _assigns_130))))) (_loop_19 (begin_exprs (lambda_body _l_3)) '() #f '()))))) (unspecified)) _l_3))) (_single-assignment-elimination_2 _l_1 _notepad_1))))) 'single-assignment-elimination))
(let () (begin (set! free-variables (lambda (_exp_1) (let ((_free-variables_2 0)) (begin (set! _free-variables_2 (lambda (_exp_3) (let ((_temp_4_7 (let ((_x_64_67 _exp_3)) (begin (_check! (pair? _x_64_67) 0 _x_64_67) (car:pair _x_64_67))))) (if (memv _temp_4_7 '(quote)) '() (if (memv _temp_4_7 '(lambda)) (difference (lambda_f _exp_3) (make-null-terminated (lambda_args _exp_3))) (if (memv _temp_4_7 '(set!)) (union (cons (assignment_lhs _exp_3) '()) (_free-variables_2 (assignment_rhs _exp_3))) (if (memv _temp_4_7 '(if)) (union (_free-variables_2 (if_test _exp_3)) (_free-variables_2 (if_then _exp_3)) (_free-variables_2 (if_else _exp_3))) (if (memv _temp_4_7 '(begin)) (if (variable? _exp_3) (cons (variable_name _exp_3) '()) (apply union (let () (let ((_loop_20_23_26 (unspecified))) (begin (set! _loop_20_23_26 (lambda (_y1_15_16_27 _results_15_19_27) (if (null? _y1_15_16_27) (reverse _results_15_19_27) (begin #t (_loop_20_23_26 (let ((_x_31_34 _y1_15_16_27)) (begin (_check! (pair? _x_31_34) 1 _x_31_34) (cdr:pair _x_31_34))) (cons (_free-variables_2 (let ((_x_35_38 _y1_15_16_27)) (begin (_check! (pair? _x_35_38) 0 _x_35_38) (car:pair _x_35_38)))) _results_15_19_27)))))) (_loop_20_23_26 (begin_exprs _exp_3) '())))))) (apply union (let () (let ((_loop_45_48_51 (unspecified))) (begin (set! _loop_45_48_51 (lambda (_y1_40_41_52 _results_40_44_52) (if (null? _y1_40_41_52) (reverse _results_40_44_52) (begin #t (_loop_45_48_51 (let ((_x_56_59 _y1_40_41_52)) (begin (_check! (pair? _x_56_59) 1 _x_56_59) (cdr:pair _x_56_59))) (cons (_free-variables_2 (let ((_x_60_63 _y1_40_41_52)) (begin (_check! (pair? _x_60_63) 0 _x_60_63) (car:pair _x_60_63)))) _results_40_44_52)))))) (_loop_45_48_51 _exp_3 '()))))))))))))) (_free-variables_2 _exp_1))))) 'free-variables))
(let () (begin (set! might-return-twice? (lambda (_exp_1) (let ((_might-return-twice?_2 0)) (begin (set! _might-return-twice?_2 (lambda (_exp_3) (let ((_temp_4_7 (let ((_x_23_26 _exp_3)) (begin (_check! (pair? _x_23_26) 0 _x_23_26) (car:pair _x_23_26))))) (if (memv _temp_4_7 '(quote)) #f (if (memv _temp_4_7 '(lambda)) #f (if (memv _temp_4_7 '(set!)) (_might-return-twice?_2 (assignment_rhs _exp_3)) (if (memv _temp_4_7 '(if)) (let ((_temp_12_15 (_might-return-twice?_2 (if_test _exp_3)))) (if _temp_12_15 _temp_12_15 (let ((_temp_16_19 (_might-return-twice?_2 (if_then _exp_3)))) (if _temp_16_19 _temp_16_19 (_might-return-twice?_2 (if_else _exp_3)))))) (if (memv _temp_4_7 '(begin)) (if (variable? _exp_3) #f (some? _might-return-twice?_2 (begin_exprs _exp_3))) #t)))))))) (_might-return-twice?_2 _exp_1))))) 'might-return-twice?))
(let () (begin (set! assignment-elimination (lambda (_l_1) (let ((_assignment-elimination_2 0)) (begin (set! _assignment-elimination_2 (lambda (_l_3) (let ((_r_6 (lambda_r _l_3))) (let ((_update-old-reference-info!_7 (unspecified)) (_new-reference-info_7 (unspecified)) (_cellify!_7 (unspecified)) (_generate-new-name_7 (unspecified)) (_eliminate_7 (unspecified)) (_loop_7 (unspecified))) (begin (set! _update-old-reference-info!_7 (lambda (_ref_8) (begin (references-set! _r_6 (variable_name _ref_8) (cons _ref_8 '())) (assignments-set! _r_6 (variable_name _ref_8) '()) (calls-set! _r_6 (variable_name _ref_8) '())))) (set! _new-reference-info_7 (lambda (_augmented-entry_10) (make-r-entry (let ((_x_11_14 _augmented-entry_10)) (begin (_check! (pair? _x_11_14) 0 _x_11_14) (car:pair _x_11_14))) (r-entry_references (let ((_x_16_19 (let ((_x_20_23 _augmented-entry_10)) (begin (_check! (pair? _x_20_23) 1 _x_20_23) (cdr:pair _x_20_23))))) (begin (_check! (pair? _x_16_19) 0 _x_16_19) (car:pair _x_16_19)))) '() '()))) (set! _cellify!_7 (lambda (_augmented-entry_24) (let ((_newname_27 (let ((_x_90_93 _augmented-entry_24)) (begin (_check! (pair? _x_90_93) 0 _x_90_93) (car:pair _x_90_93)))) (_entry_27 (let ((_x_95_98 (let ((_x_99_102 _augmented-entry_24)) (begin (_check! (pair? _x_99_102) 1 _x_99_102) (cdr:pair _x_99_102))))) (begin (_check! (pair? _x_95_98) 0 _x_95_98) (car:pair _x_95_98))))) (begin (let () (let ((_loop_29_31_34 (unspecified))) (begin (set! _loop_29_31_34 (lambda (_refs_35) (if (null? _refs_35) (if #f #f (unspecified)) (begin (begin #t (let* ((_reference_40 (let ((_x_51_54 _refs_35)) (begin (_check! (pair? _x_51_54) 0 _x_51_54) (car:pair _x_51_54)))) (_newref_43 (make-variable _newname_27))) (let () (begin (set-car! _reference_40 (make-variable name:cell-ref)) (set-car! (let ((_x_47_50 _reference_40)) (begin (_check! (pair? _x_47_50) 1 _x_47_50) (cdr:pair _x_47_50))) _newref_43) (set-car! _refs_35 _newref_43))))) (_loop_29_31_34 (let ((_x_55_58 _refs_35)) (begin (_check! (pair? _x_55_58) 1 _x_55_58) (cdr:pair _x_55_58)))))))) (_loop_29_31_34 (r-entry_references _entry_27))))) (let () (let ((_loop_60_62_65 (unspecified))) (begin (set! _loop_60_62_65 (lambda (_assigns_66) (if (null? _assigns_66) (if #f #f (unspecified)) (begin (begin #t (let* ((_assignment_71 (let ((_x_82_85 _assigns_66)) (begin (_check! (pair? _x_82_85) 0 _x_82_85) (car:pair _x_82_85)))) (_newref_74 (make-variable _newname_27))) (let () (begin (set-car! _assignment_71 (make-variable name:cell-set!)) (set-car! (let ((_x_78_81 _assignment_71)) (begin (_check! (pair? _x_78_81) 1 _x_78_81) (cdr:pair _x_78_81))) _newref_74) (r-entry_references-set! _entry_27 (cons _newref_74 (r-entry_references _entry_27))))))) (_loop_60_62_65 (let ((_x_86_89 _assigns_66)) (begin (_check! (pair? _x_86_89) 1 _x_86_89) (cdr:pair _x_86_89)))))))) (_loop_60_62_65 (r-entry_assignments _entry_27))))) (r-entry_assignments-set! _entry_27 '()))))) (set! _generate-new-name_7 (lambda (_name_103) (string->symbol (string-append cell-prefix (symbol->string _name_103))))) (set! _eliminate_7 (lambda (_assigned_104) (let* ((_oldnames_107 (let () (let ((_loop_554_557_560 (unspecified))) (begin (set! _loop_554_557_560 (lambda (_y1_549_550_561 _results_549_553_561) (if (null? _y1_549_550_561) (reverse _results_549_553_561) (begin #t (_loop_554_557_560 (let ((_x_565_568 _y1_549_550_561)) (begin (_check! (pair? _x_565_568) 1 _x_565_568) (cdr:pair _x_565_568))) (cons (r-entry_name (let ((_x_569_572 _y1_549_550_561)) (begin (_check! (pair? _x_569_572) 0 _x_569_572) (car:pair _x_569_572)))) _results_549_553_561)))))) (_loop_554_557_560 _assigned_104 '()))))) (_newnames_110 (let () (let ((_loop_530_533_536 (unspecified))) (begin (set! _loop_530_533_536 (lambda (_y1_525_526_537 _results_525_529_537) (if (null? _y1_525_526_537) (reverse _results_525_529_537) (begin #t (_loop_530_533_536 (let ((_x_541_544 _y1_525_526_537)) (begin (_check! (pair? _x_541_544) 1 _x_541_544) (cdr:pair _x_541_544))) (cons (_generate-new-name_7 (let ((_x_545_548 _y1_525_526_537)) (begin (_check! (pair? _x_545_548) 0 _x_545_548) (car:pair _x_545_548)))) _results_525_529_537)))))) (_loop_530_533_536 _oldnames_107 '())))))) (let () (let ((_augmented-entries_116 (let () (let ((_loop_444_448_451 (unspecified))) (begin (set! _loop_444_448_451 (lambda (_y1_438_440_452 _y1_438_439_452 _results_438_443_452) (if (let ((_temp_454_457 (null? _y1_438_440_452))) (if _temp_454_457 _temp_454_457 (null? _y1_438_439_452))) (reverse _results_438_443_452) (begin #t (_loop_444_448_451 (let ((_x_460_463 _y1_438_440_452)) (begin (_check! (pair? _x_460_463) 1 _x_460_463) (cdr:pair _x_460_463))) (let ((_x_464_467 _y1_438_439_452)) (begin (_check! (pair? _x_464_467) 1 _x_464_467) (cdr:pair _x_464_467))) (cons (let* ((_t1_468_471 (let ((_x_483_486 _y1_438_440_452)) (begin (_check! (pair? _x_483_486) 0 _x_483_486) (car:pair _x_483_486)))) (_t2_468_474 (cons (let ((_x_479_482 _y1_438_439_452)) (begin (_check! (pair? _x_479_482) 0 _x_479_482) (car:pair _x_479_482))) '()))) (let () (cons _t1_468_471 _t2_468_474))) _results_438_443_452)))))) (_loop_444_448_451 _newnames_110 _assigned_104 '()))))) (_renaming-alist_116 (let () (let ((_loop_493_497_500 (unspecified))) (begin (set! _loop_493_497_500 (lambda (_y1_487_489_501 _y1_487_488_501 _results_487_492_501) (if (let ((_temp_503_506 (null? _y1_487_489_501))) (if _temp_503_506 _temp_503_506 (null? _y1_487_488_501))) (reverse _results_487_492_501) (begin #t (_loop_493_497_500 (let ((_x_509_512 _y1_487_489_501)) (begin (_check! (pair? _x_509_512) 1 _x_509_512) (cdr:pair _x_509_512))) (let ((_x_513_516 _y1_487_488_501)) (begin (_check! (pair? _x_513_516) 1 _x_513_516) (cdr:pair _x_513_516))) (cons (cons (let ((_x_517_520 _y1_487_489_501)) (begin (_check! (pair? _x_517_520) 0 _x_517_520) (car:pair _x_517_520))) (let ((_x_521_524 _y1_487_488_501)) (begin (_check! (pair? _x_521_524) 0 _x_521_524) (car:pair _x_521_524)))) _results_487_492_501)))))) (_loop_493_497_500 _oldnames_107 _newnames_110 '()))))) (_defs_116 (lambda_defs _l_3))) (begin (let () (let ((_loop_122_124_127 (unspecified))) (begin (set! _loop_122_124_127 (lambda (_y1_117_118_128) (if (null? _y1_117_118_128) (if #f #f (unspecified)) (begin (begin #t (_cellify!_7 (let ((_x_132_135 _y1_117_118_128)) (begin (_check! (pair? _x_132_135) 0 _x_132_135) (car:pair _x_132_135))))) (_loop_122_124_127 (let ((_x_136_139 _y1_117_118_128)) (begin (_check! (pair? _x_136_139) 1 _x_136_139) (cdr:pair _x_136_139)))))))) (_loop_122_124_127 _augmented-entries_116)))) (let () (let ((_loop_145_147_150 (unspecified))) (begin (set! _loop_145_147_150 (lambda (_y1_140_141_151) (if (null? _y1_140_141_151) (if #f #f (unspecified)) (begin (begin #t (let ((_def_155 (let ((_x_181_184 _y1_140_141_151)) (begin (_check! (pair? _x_181_184) 0 _x_181_184) (car:pair _x_181_184))))) (let () (let ((_loop_157_159_162 (unspecified))) (begin (set! _loop_157_159_162 (lambda (_free_163) (if (null? _free_163) (if #f #f (unspecified)) (begin (begin #t (let ((_z_168 (assq (let ((_x_173_176 _free_163)) (begin (_check! (pair? _x_173_176) 0 _x_173_176) (car:pair _x_173_176))) _renaming-alist_116))) (if _z_168 (set-car! _free_163 (let ((_x_169_172 _z_168)) (begin (_check! (pair? _x_169_172) 1 _x_169_172) (cdr:pair _x_169_172)))) (unspecified)))) (_loop_157_159_162 (let ((_x_177_180 _free_163)) (begin (_check! (pair? _x_177_180) 1 _x_177_180) (cdr:pair _x_177_180)))))))) (_loop_157_159_162 (lambda_f (def_rhs _def_155)))))))) (_loop_145_147_150 (let ((_x_185_188 _y1_140_141_151)) (begin (_check! (pair? _x_185_188) 1 _x_185_188) (cdr:pair _x_185_188)))))))) (_loop_145_147_150 _defs_116)))) (let ((_newbody_191 (make-call (make-lambda (let () (let ((_loop_294_297_300 (unspecified))) (begin (set! _loop_294_297_300 (lambda (_y1_289_290_301 _results_289_293_301) (if (null? _y1_289_290_301) (reverse _results_289_293_301) (begin #t (_loop_294_297_300 (let ((_x_305_308 _y1_289_290_301)) (begin (_check! (pair? _x_305_308) 1 _x_305_308) (cdr:pair _x_305_308))) (cons (let ((_x_309_312 (let ((_x_313_316 _y1_289_290_301)) (begin (_check! (pair? _x_313_316) 0 _x_313_316) (car:pair _x_313_316))))) (begin (_check! (pair? _x_309_312) 0 _x_309_312) (car:pair _x_309_312))) _results_289_293_301)))))) (_loop_294_297_300 _augmented-entries_116 '())))) _defs_116 (union (let () (let ((_loop_322_325_328 (unspecified))) (begin (set! _loop_322_325_328 (lambda (_y1_317_318_329 _results_317_321_329) (if (null? _y1_317_318_329) (reverse _results_317_321_329) (begin #t (_loop_322_325_328 (let ((_x_333_336 _y1_317_318_329)) (begin (_check! (pair? _x_333_336) 1 _x_333_336) (cdr:pair _x_333_336))) (cons (let ((_def_337 (let ((_x_338_341 _y1_317_318_329)) (begin (_check! (pair? _x_338_341) 0 _x_338_341) (car:pair _x_338_341))))) (r-entry _r_6 (def_lhs _def_337))) _results_317_321_329)))))) (_loop_322_325_328 _defs_116 '())))) (let () (let ((_loop_347_350_353 (unspecified))) (begin (set! _loop_347_350_353 (lambda (_y1_342_343_354 _results_342_346_354) (if (null? _y1_342_343_354) (reverse _results_342_346_354) (begin #t (_loop_347_350_353 (let ((_x_358_361 _y1_342_343_354)) (begin (_check! (pair? _x_358_361) 1 _x_358_361) (cdr:pair _x_358_361))) (cons (_new-reference-info_7 (let ((_x_362_365 _y1_342_343_354)) (begin (_check! (pair? _x_362_365) 0 _x_362_365) (car:pair _x_362_365)))) _results_342_346_354)))))) (_loop_347_350_353 _augmented-entries_116 '()))))) (union (let* ((_t1_366_369 name:cell-ref) (_t2_366_372 (cons name:cell-set! '()))) (let () (cons _t1_366_369 _t2_366_372))) _newnames_110 (difference (lambda_f _l_3) _oldnames_107)) (union (let* ((_t1_377_380 name:cell-ref) (_t2_377_383 (cons name:cell-set! '()))) (let () (cons _t1_377_380 _t2_377_383))) _newnames_110 (difference (lambda_g _l_3) _oldnames_107)) (lambda_decls _l_3) (lambda_doc _l_3) (lambda_body _l_3)) (let () (let ((_loop_393_396_399 (unspecified))) (begin (set! _loop_393_396_399 (lambda (_y1_388_389_400 _results_388_392_400) (if (null? _y1_388_389_400) (reverse _results_388_392_400) (begin #t (_loop_393_396_399 (let ((_x_404_407 _y1_388_389_400)) (begin (_check! (pair? _x_404_407) 1 _x_404_407) (cdr:pair _x_404_407))) (cons (let ((_name_408 (let ((_x_410_413 _y1_388_389_400)) (begin (_check! (pair? _x_410_413) 0 _x_410_413) (car:pair _x_410_413))))) (make-call (make-variable name:make-cell) (cons (make-variable _name_408) '()))) _results_388_392_400)))))) (_loop_393_396_399 (let () (let ((_loop_419_422_425 (unspecified))) (begin (set! _loop_419_422_425 (lambda (_y1_414_415_426 _results_414_418_426) (if (null? _y1_414_415_426) (reverse _results_414_418_426) (begin #t (_loop_419_422_425 (let ((_x_430_433 _y1_414_415_426)) (begin (_check! (pair? _x_430_433) 1 _x_430_433) (cdr:pair _x_430_433))) (cons (r-entry_name (let ((_x_434_437 _y1_414_415_426)) (begin (_check! (pair? _x_434_437) 0 _x_434_437) (car:pair _x_434_437)))) _results_414_418_426)))))) (_loop_419_422_425 _assigned_104 '())))) '()))))))) (begin (lambda_f-set! _l_3 (union (let* ((_t1_192_195 name:make-cell) (_t2_192_198 (let* ((_t1_202_205 name:cell-ref) (_t2_202_208 (cons name:cell-set! '()))) (let () (cons _t1_202_205 _t2_202_208))))) (let () (cons _t1_192_195 _t2_192_198))) (difference (lambda_f _l_3) (let () (let ((_loop_218_221_224 (unspecified))) (begin (set! _loop_218_221_224 (lambda (_y1_213_214_225 _results_213_217_225) (if (null? _y1_213_214_225) (reverse _results_213_217_225) (begin #t (_loop_218_221_224 (let ((_x_229_232 _y1_213_214_225)) (begin (_check! (pair? _x_229_232) 1 _x_229_232) (cdr:pair _x_229_232))) (cons (def_lhs (let ((_x_233_236 _y1_213_214_225)) (begin (_check! (pair? _x_233_236) 0 _x_233_236) (car:pair _x_233_236)))) _results_213_217_225)))))) (_loop_218_221_224 (lambda_defs _l_3) '()))))))) (lambda_defs-set! _l_3 '()) (let () (let ((_loop_242_244_247 (unspecified))) (begin (set! _loop_242_244_247 (lambda (_y1_237_238_248) (if (null? _y1_237_238_248) (if #f #f (unspecified)) (begin (begin #t (_update-old-reference-info!_7 (let ((_x_252_255 _y1_237_238_248)) (begin (_check! (pair? _x_252_255) 0 _x_252_255) (car:pair _x_252_255))))) (_loop_242_244_247 (let ((_x_256_259 _y1_237_238_248)) (begin (_check! (pair? _x_256_259) 1 _x_256_259) (cdr:pair _x_256_259)))))))) (_loop_242_244_247 (let () (let ((_loop_265_268_271 (unspecified))) (begin (set! _loop_265_268_271 (lambda (_y1_260_261_272 _results_260_264_272) (if (null? _y1_260_261_272) (reverse _results_260_264_272) (begin #t (_loop_265_268_271 (let ((_x_276_279 _y1_260_261_272)) (begin (_check! (pair? _x_276_279) 1 _x_276_279) (cdr:pair _x_276_279))) (cons (let* ((_arg_280 (let ((_x_285_288 _y1_260_261_272)) (begin (_check! (pair? _x_285_288) 0 _x_285_288) (car:pair _x_285_288)))) (_x_281_284 (call_args _arg_280))) (begin (_check! (pair? _x_281_284) 0 _x_281_284) (car:pair _x_281_284))) _results_260_264_272)))))) (_loop_265_268_271 (call_args _newbody_191) '())))))))) (lambda_body-set! _l_3 _newbody_191) (lambda-lifting (call_proc _newbody_191) _l_3))))))))) (set! _loop_7 (lambda (_entries_573 _assigned_573) (if (null? _entries_573) (if (not (null? _assigned_573)) (_eliminate_7 _assigned_573) (unspecified)) (if (not (null? (r-entry_assignments (let ((_x_576_579 _entries_573)) (begin (_check! (pair? _x_576_579) 0 _x_576_579) (car:pair _x_576_579)))))) (_loop_7 (let ((_x_580_583 _entries_573)) (begin (_check! (pair? _x_580_583) 1 _x_580_583) (cdr:pair _x_580_583))) (cons (let ((_x_584_587 _entries_573)) (begin (_check! (pair? _x_584_587) 0 _x_584_587) (car:pair _x_584_587))) _assigned_573)) (if (null? (r-entry_references (let ((_x_589_592 _entries_573)) (begin (_check! (pair? _x_589_592) 0 _x_589_592) (car:pair _x_589_592))))) (begin (flag-as-ignored (r-entry_name (let ((_x_593_596 _entries_573)) (begin (_check! (pair? _x_593_596) 0 _x_593_596) (car:pair _x_593_596)))) _l_3) (_loop_7 (let ((_x_597_600 _entries_573)) (begin (_check! (pair? _x_597_600) 1 _x_597_600) (cdr:pair _x_597_600))) _assigned_573)) (_loop_7 (let ((_x_602_605 _entries_573)) (begin (_check! (pair? _x_602_605) 1 _x_602_605) (cdr:pair _x_602_605))) _assigned_573)))))) (_loop_7 _r_6 '())))))) (_assignment-elimination_2 _l_1))))) 'assignment-elimination))
(let () (begin (set! lambda-lifting (lambda (_l2_1 _l_1) (let ((_lambda-lifting_2 0)) (begin (set! _lambda-lifting_2 (lambda (_l2_3 _l_3) (let ((_lift_4 (unspecified))) (begin (set! _lift_4 (lambda (_l2_5 _l_5 _args-to-add_5) (let ((_formals_8 (make-null-terminated (lambda_args _l2_5)))) (begin (let () (let ((_loop_10_13_16 (unspecified))) (begin (set! _loop_10_13_16 (lambda (_defs_17 _args-to-add_17) (if (null? _defs_17) (if #f #f (unspecified)) (begin (begin #t (let* ((_def_22 (let ((_x_99_102 _defs_17)) (begin (_check! (pair? _x_99_102) 0 _x_99_102) (car:pair _x_99_102)))) (_entry_25 (r-lookup (lambda_r _l2_5) (def_lhs _def_22))) (_calls_28 (r-entry_calls _entry_25)) (_added_31 (twobit-sort (lambda (_x_89 _y_89) (let ((_xx_92 (memq _x_89 _formals_8)) (_yy_92 (memq _y_89 _formals_8))) (if (if _xx_92 _yy_92 #f) (> (length _xx_92) (length _yy_92)) #t))) (let ((_x_95_98 _args-to-add_17)) (begin (_check! (pair? _x_95_98) 0 _x_95_98) (car:pair _x_95_98))))) (_l3_34 (def_rhs _def_22))) (let () (begin (lambda_f-set! _l3_34 (union _added_31 (lambda_f _l3_34))) (lambda_args-set! _l3_34 (append _added_31 (lambda_args _l3_34))) (let () (let ((_loop_43_45_48 (unspecified))) (begin (set! _loop_43_45_48 (lambda (_y1_38_39_49) (if (null? _y1_38_39_49) (if #f #f (unspecified)) (begin (begin #t (let* ((_call_53 (let ((_x_81_84 _y1_38_39_49)) (begin (_check! (pair? _x_81_84) 0 _x_81_84) (car:pair _x_81_84)))) (_newargs_56 (let () (let ((_loop_62_65_68 (unspecified))) (begin (set! _loop_62_65_68 (lambda (_y1_57_58_69 _results_57_61_69) (if (null? _y1_57_58_69) (reverse _results_57_61_69) (begin #t (_loop_62_65_68 (let ((_x_73_76 _y1_57_58_69)) (begin (_check! (pair? _x_73_76) 1 _x_73_76) (cdr:pair _x_73_76))) (cons (make-variable (let ((_x_77_80 _y1_57_58_69)) (begin (_check! (pair? _x_77_80) 0 _x_77_80) (car:pair _x_77_80)))) _results_57_61_69)))))) (_loop_62_65_68 _added_31 '())))))) (call_args-set! _call_53 (append _newargs_56 (call_args _call_53))))) (_loop_43_45_48 (let ((_x_85_88 _y1_38_39_49)) (begin (_check! (pair? _x_85_88) 1 _x_85_88) (cdr:pair _x_85_88)))))))) (_loop_43_45_48 _calls_28)))) (lambda_r-set! _l2_5 (remq _entry_25 (lambda_r _l2_5))) (lambda_r-set! _l_5 (cons _entry_25 (lambda_r _l_5))))))) (_loop_10_13_16 (let ((_x_103_106 _defs_17)) (begin (_check! (pair? _x_103_106) 1 _x_103_106) (cdr:pair _x_103_106))) (let ((_x_107_110 _args-to-add_17)) (begin (_check! (pair? _x_107_110) 1 _x_107_110) (cdr:pair _x_107_110)))))))) (_loop_10_13_16 (lambda_defs _l2_5) _args-to-add_5)))) (if (not (eq? _l2_5 _l_5)) (begin (lambda_defs-set! _l_5 (append (lambda_defs _l2_5) (lambda_defs _l_5))) (lambda_defs-set! _l2_5 '())) (unspecified)))))) (if _l_3 (if (not (null? (lambda_defs _l2_3))) (let ((_args-to-add_113 (compute-added-arguments (lambda_defs _l2_3) (make-null-terminated (lambda_args _l2_3))))) (if (policy:lift? _l2_3 _l_3 _args-to-add_113) (_lift_4 _l2_3 _l_3 _args-to-add_113) (unspecified))) (unspecified)) (unspecified)))))) (_lambda-lifting_2 _l2_1 _l_1))))) 'lambda-lifting))
(let () (begin (set! compute-added-arguments (lambda (_defs_1 _formals_1) (let ((_compute-added-arguments_2 0)) (begin (set! _compute-added-arguments_2 (lambda (_defs_3 _formals_3) (let ((_procs_6 (let () (let ((_loop_159_162_165 (unspecified))) (begin (set! _loop_159_162_165 (lambda (_y1_154_155_166 _results_154_158_166) (if (null? _y1_154_155_166) (reverse _results_154_158_166) (begin #t (_loop_159_162_165 (let ((_x_170_173 _y1_154_155_166)) (begin (_check! (pair? _x_170_173) 1 _x_170_173) (cdr:pair _x_170_173))) (cons (def_lhs (let ((_x_174_177 _y1_154_155_166)) (begin (_check! (pair? _x_174_177) 0 _x_174_177) (car:pair _x_174_177)))) _results_154_158_166)))))) (_loop_159_162_165 _defs_3 '()))))) (_freevars_6 (let () (let ((_loop_183_186_189 (unspecified))) (begin (set! _loop_183_186_189 (lambda (_y1_178_179_190 _results_178_182_190) (if (null? _y1_178_179_190) (reverse _results_178_182_190) (begin #t (_loop_183_186_189 (let ((_x_194_197 _y1_178_179_190)) (begin (_check! (pair? _x_194_197) 1 _x_194_197) (cdr:pair _x_194_197))) (cons (lambda_f (let ((_x_198_201 _y1_178_179_190)) (begin (_check! (pair? _x_198_201) 0 _x_198_201) (car:pair _x_198_201)))) _results_178_182_190)))))) (_loop_183_186_189 (let () (let ((_loop_207_210_213 (unspecified))) (begin (set! _loop_207_210_213 (lambda (_y1_202_203_214 _results_202_206_214) (if (null? _y1_202_203_214) (reverse _results_202_206_214) (begin #t (_loop_207_210_213 (let ((_x_218_221 _y1_202_203_214)) (begin (_check! (pair? _x_218_221) 1 _x_218_221) (cdr:pair _x_218_221))) (cons (def_rhs (let ((_x_222_225 _y1_202_203_214)) (begin (_check! (pair? _x_222_225) 0 _x_222_225) (car:pair _x_222_225)))) _results_202_206_214)))))) (_loop_207_210_213 _defs_3 '())))) '())))))) (let ((_callgraph_9 (let () (let ((_loop_84_87_90 (unspecified))) (begin (set! _loop_84_87_90 (lambda (_y1_79_80_91 _results_79_83_91) (if (null? _y1_79_80_91) (reverse _results_79_83_91) (begin #t (_loop_84_87_90 (let ((_x_95_98 _y1_79_80_91)) (begin (_check! (pair? _x_95_98) 1 _x_95_98) (cdr:pair _x_95_98))) (cons (let ((_names_99 (let ((_x_125_128 _y1_79_80_91)) (begin (_check! (pair? _x_125_128) 0 _x_125_128) (car:pair _x_125_128))))) (let () (let ((_loop_105_108_111 (unspecified))) (begin (set! _loop_105_108_111 (lambda (_y1_100_101_112 _results_100_104_112) (if (null? _y1_100_101_112) (reverse _results_100_104_112) (begin #t (_loop_105_108_111 (let ((_x_116_119 _y1_100_101_112)) (begin (_check! (pair? _x_116_119) 1 _x_116_119) (cdr:pair _x_116_119))) (cons (let ((_name_120 (let ((_x_121_124 _y1_100_101_112)) (begin (_check! (pair? _x_121_124) 0 _x_121_124) (car:pair _x_121_124))))) (position _name_120 _procs_6)) _results_100_104_112)))))) (_loop_105_108_111 (intersection _names_99 _procs_6) '()))))) _results_79_83_91)))))) (_loop_84_87_90 _freevars_6 '()))))) (_added_0_9 (let () (let ((_loop_134_137_140 (unspecified))) (begin (set! _loop_134_137_140 (lambda (_y1_129_130_141 _results_129_133_141) (if (null? _y1_129_130_141) (reverse _results_129_133_141) (begin #t (_loop_134_137_140 (let ((_x_145_148 _y1_129_130_141)) (begin (_check! (pair? _x_145_148) 1 _x_145_148) (cdr:pair _x_145_148))) (cons (let ((_names_149 (let ((_x_150_153 _y1_129_130_141)) (begin (_check! (pair? _x_150_153) 0 _x_150_153) (car:pair _x_150_153))))) (intersection _names_149 _formals_3)) _results_129_133_141)))))) (_loop_134_137_140 _freevars_6 '())))))) (vector->list (compute-fixedpoint (make-vector (length _procs_6) '()) (list->vector (let () (let ((_loop_16_20_23 (unspecified))) (begin (set! _loop_16_20_23 (lambda (_y1_10_12_24 _y1_10_11_24 _results_10_15_24) (if (let ((_temp_26_29 (null? _y1_10_12_24))) (if _temp_26_29 _temp_26_29 (null? _y1_10_11_24))) (reverse _results_10_15_24) (begin #t (_loop_16_20_23 (let ((_x_32_35 _y1_10_12_24)) (begin (_check! (pair? _x_32_35) 1 _x_32_35) (cdr:pair _x_32_35))) (let ((_x_36_39 _y1_10_11_24)) (begin (_check! (pair? _x_36_39) 1 _x_36_39) (cdr:pair _x_36_39))) (cons (let ((_term0_40 (let ((_x_71_74 _y1_10_12_24)) (begin (_check! (pair? _x_71_74) 0 _x_71_74) (car:pair _x_71_74)))) (_indexes_40 (let ((_x_75_78 _y1_10_11_24)) (begin (_check! (pair? _x_75_78) 0 _x_75_78) (car:pair _x_75_78))))) (lambda (_approximations_41) (union _term0_40 (apply union (let () (let ((_loop_47_50_53 (unspecified))) (begin (set! _loop_47_50_53 (lambda (_y1_42_43_54 _results_42_46_54) (if (null? _y1_42_43_54) (reverse _results_42_46_54) (begin #t (_loop_47_50_53 (let ((_x_58_61 _y1_42_43_54)) (begin (_check! (pair? _x_58_61) 1 _x_58_61) (cdr:pair _x_58_61))) (cons (let ((_i_62 (let ((_x_67_70 _y1_42_43_54)) (begin (_check! (pair? _x_67_70) 0 _x_67_70) (car:pair _x_67_70))))) (let ((_v_63_66 _approximations_41) (_i_63_66 _i_62)) (begin (_check! (fixnum? _i_63_66) 40 _v_63_66 _i_63_66) (_check! (vector? _v_63_66) 40 _v_63_66 _i_63_66) (_check! (<:fix:fix _i_63_66 (vector-length:vec _v_63_66)) 40 _v_63_66 _i_63_66) (_check! (>=:fix:fix _i_63_66 0) 40 _v_63_66 _i_63_66) (vector-ref:trusted _v_63_66 _i_63_66)))) _results_42_46_54)))))) (_loop_47_50_53 _indexes_40 '())))))))) _results_10_15_24)))))) (_loop_16_20_23 _added_0_9 _callgraph_9 '()))))) set-equal?)))))) (_compute-added-arguments_2 _defs_1 _formals_1))))) 'compute-added-arguments))
(let () (begin (set! position (lambda (_x_1 _l_1) (let ((_position_2 0)) (begin (set! _position_2 (lambda (_x_3 _l_3) (if (eq? _x_3 (let ((_x_5_8 _l_3)) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8)))) 0 (+ 1 (_position_2 _x_3 (let ((_x_10_13 _l_3)) (begin (_check! (pair? _x_10_13) 1 _x_10_13) (cdr:pair _x_10_13)))))))) (_position_2 _x_1 _l_1))))) 'position))
(let () (begin (set! compute-fixedpoint (lambda (_v_1 _functions_1 _equiv?_1) (let ((_compute-fixedpoint_2 0)) (begin (set! _compute-fixedpoint_2 (lambda (_v_3 _functions_3 _equiv?_3) (let ((_loop_4 (unspecified))) (begin (set! _loop_4 (lambda (_i_5 _flag_5) (if (< _i_5 0) (if _flag_5 (_loop_4 (- (let ((_v_7_10 _v_3)) (begin (_check! (vector? _v_7_10) 42 _v_7_10) (vector-length:vec _v_7_10))) 1) #f) _v_3) (let ((_next_i_13 ((let ((_v_22_25 _functions_3) (_i_22_25 _i_5)) (begin (_check! (fixnum? _i_22_25) 40 _v_22_25 _i_22_25) (_check! (vector? _v_22_25) 40 _v_22_25 _i_22_25) (_check! (<:fix:fix _i_22_25 (vector-length:vec _v_22_25)) 40 _v_22_25 _i_22_25) (_check! (>=:fix:fix _i_22_25 0) 40 _v_22_25 _i_22_25) (vector-ref:trusted _v_22_25 _i_22_25))) _v_3))) (if (_equiv?_3 _next_i_13 (let ((_v_14_17 _v_3) (_i_14_17 _i_5)) (begin (_check! (fixnum? _i_14_17) 40 _v_14_17 _i_14_17) (_check! (vector? _v_14_17) 40 _v_14_17 _i_14_17) (_check! (<:fix:fix _i_14_17 (vector-length:vec _v_14_17)) 40 _v_14_17 _i_14_17) (_check! (>=:fix:fix _i_14_17 0) 40 _v_14_17 _i_14_17) (vector-ref:trusted _v_14_17 _i_14_17)))) (_loop_4 (- _i_5 1) _flag_5) (begin (let ((_v_18_21 _v_3) (_i_18_21 _i_5) (_x_18_21 _next_i_13)) (begin (_check! (fixnum? _i_18_21) 41 _v_18_21 _i_18_21 _x_18_21) (_check! (vector? _v_18_21) 41 _v_18_21 _i_18_21 _x_18_21) (_check! (<:fix:fix _i_18_21 (vector-length:vec _v_18_21)) 41 _v_18_21 _i_18_21 _x_18_21) (_check! (>=:fix:fix _i_18_21 0) 41 _v_18_21 _i_18_21 _x_18_21) (vector-set!:trusted _v_18_21 _i_18_21 _x_18_21))) (_loop_4 (- _i_5 1) #t))))))) (_loop_4 (- (let ((_v_26_29 _v_3)) (begin (_check! (vector? _v_26_29) 42 _v_26_29) (vector-length:vec _v_26_29))) 1) #f))))) (_compute-fixedpoint_2 _v_1 _functions_1 _equiv?_1))))) 'compute-fixedpoint))
(let () (begin (set! policy:lift? (lambda (_l2_1 _l_1 _args-to-add_1) (let ((_policy:lift?_2 0)) (begin (set! _policy:lift?_2 (lambda (_l2_3 _l_3 _args-to-add_3) (if (lambda-optimizations) (if (not (lambda? (lambda_body _l2_3))) (every? (lambda (_addlist_7) (< (length _addlist_7) 6)) _args-to-add_3) #f) #f))) (_policy:lift?_2 _l2_1 _l_1 _args-to-add_1))))) 'policy:lift?))
(let () (begin (set! simplify-conditional (lambda (_exp_1 _notepad_1) (let ((_simplify-conditional_2 0)) (begin (set! _simplify-conditional_2 (lambda (_exp_3 _notepad_3) (let ((_coercion-to-boolean?_4 (unspecified))) (begin (set! _coercion-to-boolean?_4 (lambda (_exp_5) (if (conditional? _exp_5) (let ((_e1_10 (if_then _exp_5)) (_e2_10 (if_else _exp_5))) (if (constant? _e1_10) (if (eq? #t (constant_value _e1_10)) (if (constant? _e2_10) (eq? #f (constant_value _e2_10)) #f) #f) #f)) #f))) (if (not (control-optimization)) (begin (if_test-set! _exp_3 (simplify (if_test _exp_3) _notepad_3)) (if_then-set! _exp_3 (simplify (if_then _exp_3) _notepad_3)) (if_else-set! _exp_3 (simplify (if_else _exp_3) _notepad_3)) _exp_3) (let ((_test_17 (if_test _exp_3))) (let () (if (if (call? _test_17) (if (lambda? (call_proc _test_17)) (let* ((_l_26 (call_proc _test_17)) (_body_29 (lambda_body _l_26))) (let () (if (conditional? _body_29) (let ((_r_37 (lambda_r _l_26)) (_b0_37 (if_test _body_29)) (_b1_37 (if_then _body_29))) (if (variable? _b0_37) (if (variable? _b1_37) (let ((_x_43 (variable_name _b0_37))) (if (eq? _x_43 (variable_name _b1_37)) (if (local? _r_37 _x_43) (if (= 1 (length _r_37)) (= 1 (length (call_args _test_17))) #f) #f) #f)) #f) #f)) #f))) #f) #f) (let* ((_l_50 (call_proc _test_17)) (_r_53 (lambda_r _l_50)) (_body_56 (lambda_body _l_50)) (_ref_59 (if_then _body_56)) (_x_62 (variable_name _ref_59)) (_entry_65 (r-entry _r_53 _x_62))) (let () (begin (if_then-set! _body_56 (make-constant #t)) (if_else-set! _body_56 (make-conditional (if_else _body_56) (make-constant #t) (make-constant #f))) (r-entry_references-set! _entry_65 (remq _ref_59 (r-entry_references _entry_65))) (_simplify-conditional_2 _exp_3 _notepad_3)))) (let ((_test_71 (simplify (if_test _exp_3) _notepad_3))) (let () (let ((_loop_74 (unspecified))) (begin (set! _loop_74 (lambda (_test_75) (begin (if_test-set! _exp_3 _test_75) (if (constant? _test_75) (simplify (if (constant_value _test_75) (if_then _exp_3) (if_else _exp_3)) _notepad_3) (if (if (conditional? _test_75) (if (constant? (if_then _test_75)) (constant? (if_else _test_75)) #f) #f) (if (if (constant_value (if_then _test_75)) (constant_value (if_else _test_75)) #f) (post-simplify-begin (make-begin (let* ((_t1_84_87 (if_test _test_75)) (_t2_84_90 (cons (simplify (if_then _exp_3) _notepad_3) '()))) (let () (cons _t1_84_87 _t2_84_90)))) _notepad_3) (if (if (not (constant_value (if_then _test_75))) (not (constant_value (if_else _test_75))) #f) (post-simplify-begin (make-begin (let* ((_t1_98_101 (if_test _test_75)) (_t2_98_104 (cons (simplify (if_else _exp_3) _notepad_3) '()))) (let () (cons _t1_98_101 _t2_98_104)))) _notepad_3) (begin (if (not (constant_value (if_then _test_75))) (let ((_temp_112 (if_then _exp_3))) (begin (if_then-set! _exp_3 (if_else _exp_3)) (if_else-set! _exp_3 _temp_112))) (unspecified)) (if_test-set! _exp_3 (if_test _test_75)) (_loop_74 (if_test _exp_3))))) (if (if (conditional? _test_75) (let ((_temp_116_119 (_coercion-to-boolean?_4 (if_then _test_75)))) (if _temp_116_119 _temp_116_119 (_coercion-to-boolean?_4 (if_else _test_75)))) #f) (begin (if (_coercion-to-boolean?_4 (if_then _test_75)) (if_then-set! _test_75 (if_test (if_then _test_75))) (if_else-set! _test_75 (if_test (if_else _test_75)))) (_loop_74 _test_75)) (let ((_temp_121_124 (if (conditional? _test_75) (if (variable? (if_test _test_75)) (let* ((_x_168 (variable_name (if_test _test_75))) (_temp_169_172 (if (variable? (if_then _test_75)) (if (eq? _x_168 (variable_name (if_then _test_75))) 1 #f) #f))) (if _temp_169_172 _temp_169_172 (if (variable? (if_else _test_75)) (if (eq? _x_168 (variable_name (if_else _test_75))) 2 #f) #f))) #f) #f))) (if _temp_121_124 (let ((_n_125 _temp_121_124)) (begin (let ((_temp_126_129 _n_125)) (if (memv _temp_126_129 '(1)) (if_then-set! _test_75 (make-constant #t)) (if (memv _temp_126_129 '(2)) (if_else-set! _test_75 (make-constant #f)) (unspecified)))) (_loop_74 _test_75))) (if (begin? _test_75) (let ((_exprs_135 (reverse (begin_exprs _test_75)))) (begin (if_test-set! _exp_3 (let ((_x_136_139 _exprs_135)) (begin (_check! (pair? _x_136_139) 0 _x_136_139) (car:pair _x_136_139)))) (post-simplify-begin (make-begin (reverse (cons (_loop_74 (let ((_x_140_143 _exprs_135)) (begin (_check! (pair? _x_140_143) 0 _x_140_143) (car:pair _x_140_143)))) (let ((_x_144_147 _exprs_135)) (begin (_check! (pair? _x_144_147) 1 _x_144_147) (cdr:pair _x_144_147)))))) _notepad_3))) (if (if (call? _test_75) (if (variable? (call_proc _test_75)) (if (eq? (variable_name (call_proc _test_75)) name:not) (if (integrable? name:not) (if (integrate-usual-procedures) (= (length (call_args _test_75)) 1) #f) #f) #f) #f) #f) (begin (let ((_temp_157 (if_then _exp_3))) (begin (if_then-set! _exp_3 (if_else _exp_3)) (if_else-set! _exp_3 _temp_157))) (_loop_74 (let ((_x_158_161 (call_args _test_75))) (begin (_check! (pair? _x_158_161) 0 _x_158_161) (car:pair _x_158_161))))) (simplify-case _exp_3 _notepad_3))))))))))) (_loop_74 _test_71))))))))))))) (_simplify-conditional_2 _exp_1 _notepad_1))))) 'simplify-conditional))
(let () (begin (set! simplify-case (lambda (_exp_1 _notepad_1) (let ((_simplify-case_2 0)) (begin (set! _simplify-case_2 (lambda (_exp_3 _notepad_3) (let ((_e0_6 (if_test _exp_3))) (if (if (call? _e0_6) (if (variable? (call_proc _e0_6)) (if (let* ((_name_12 (variable_name (call_proc _e0_6))) (_temp_13_16 (eq? _name_12 name:eq?))) (if _temp_13_16 _temp_13_16 (let ((_temp_17_20 (eq? _name_12 name:eqv?))) (if _temp_17_20 _temp_17_20 (let ((_temp_21_24 (eq? _name_12 name:memq))) (if _temp_21_24 _temp_21_24 (eq? _name_12 name:memv))))))) (if (integrate-usual-procedures) (if (= (length (call_args _e0_6)) 2) (if (variable? (let ((_x_29_32 (call_args _e0_6))) (begin (_check! (pair? _x_29_32) 0 _x_29_32) (car:pair _x_29_32)))) (constant? (let ((_x_35_38 (let ((_x_39_42 (call_args _e0_6))) (begin (_check! (pair? _x_39_42) 1 _x_39_42) (cdr:pair _x_39_42))))) (begin (_check! (pair? _x_35_38) 0 _x_35_38) (car:pair _x_35_38)))) #f) #f) #f) #f) #f) #f) (simplify-case-clauses (variable_name (let ((_x_43_46 (call_args _e0_6))) (begin (_check! (pair? _x_43_46) 0 _x_43_46) (car:pair _x_43_46)))) _exp_3 _notepad_3) (begin (if_then-set! _exp_3 (simplify (if_then _exp_3) _notepad_3)) (if_else-set! _exp_3 (simplify (if_else _exp_3) _notepad_3)) _exp_3))))) (_simplify-case_2 _exp_1 _notepad_1))))) 'simplify-case))
(let () (begin (set! simplify-case-clauses (lambda (_var0_1 _e_1 _notepad_1) (let ((_simplify-case-clauses_2 0)) (begin (set! _simplify-case-clauses_2 (lambda (_var0_3 _e_3 _notepad_3) (let ((_analyze_4 (unspecified)) (_finish_4 (unspecified)) (_remove-duplicates_4 (unspecified)) (_collect-clauses_4 (unspecified)) (_notepad2_4 (unspecified))) (begin (set! _analyze_4 (lambda (_default_5 _fix_5 _chr_5 _sym_5 _other_5 _constants_5) (begin (notepad-var-add! _notepad2_4 _var0_3) (let () (let ((_loop_11_13_16 (unspecified))) (begin (set! _loop_11_13_16 (lambda (_y1_6_7_17) (if (null? _y1_6_7_17) (if #f #f (unspecified)) (begin (begin #t (let ((_l_21 (let ((_x_22_25 _y1_6_7_17)) (begin (_check! (pair? _x_22_25) 0 _x_22_25) (car:pair _x_22_25))))) (notepad-lambda-add! _notepad_3 _l_21))) (_loop_11_13_16 (let ((_x_26_29 _y1_6_7_17)) (begin (_check! (pair? _x_26_29) 1 _x_26_29) (cdr:pair _x_26_29)))))))) (_loop_11_13_16 (notepad_lambdas _notepad2_4))))) (let () (let ((_loop_35_37_40 (unspecified))) (begin (set! _loop_35_37_40 (lambda (_y1_30_31_41) (if (null? _y1_30_31_41) (if #f #f (unspecified)) (begin (begin #t (let ((_l_45 (let ((_x_46_49 _y1_30_31_41)) (begin (_check! (pair? _x_46_49) 0 _x_46_49) (car:pair _x_46_49))))) (notepad-nonescaping-add! _notepad_3 _l_45))) (_loop_35_37_40 (let ((_x_50_53 _y1_30_31_41)) (begin (_check! (pair? _x_50_53) 1 _x_50_53) (cdr:pair _x_50_53)))))))) (_loop_35_37_40 (notepad_nonescaping _notepad2_4))))) (let () (let ((_loop_59_61_64 (unspecified))) (begin (set! _loop_59_61_64 (lambda (_y1_54_55_65) (if (null? _y1_54_55_65) (if #f #f (unspecified)) (begin (begin #t (let ((_var_69 (let ((_x_70_73 _y1_54_55_65)) (begin (_check! (pair? _x_70_73) 0 _x_70_73) (car:pair _x_70_73))))) (notepad-var-add! _notepad_3 _var_69))) (_loop_59_61_64 (let ((_x_74_77 _y1_54_55_65)) (begin (_check! (pair? _x_74_77) 1 _x_74_77) (cdr:pair _x_74_77)))))))) (_loop_59_61_64 (append (let* ((_t1_78_81 name:fixnum?) (_t2_78_84 (let* ((_t1_88_91 name:char?) (_t2_88_94 (let* ((_t1_98_101 name:symbol?) (_t2_98_104 (let* ((_t1_108_111 name:fx<) (_t2_108_114 (let* ((_t1_118_121 name:fx-) (_t2_118_124 (let* ((_t1_128_131 name:char->integer) (_t2_128_134 (cons name:vector-ref '()))) (let () (cons _t1_128_131 _t2_128_134))))) (let () (cons _t1_118_121 _t2_118_124))))) (let () (cons _t1_108_111 _t2_108_114))))) (let () (cons _t1_98_101 _t2_98_104))))) (let () (cons _t1_88_91 _t2_88_94))))) (let () (cons _t1_78_81 _t2_78_84))) (notepad_vars _notepad2_4)))))) (analyze-clauses (notepad_vars _notepad2_4) _var0_3 _default_5 (reverse _fix_5) (reverse _chr_5) (reverse _sym_5) (reverse _other_5) _constants_5)))) (set! _finish_4 (lambda (_e_139 _fix_139 _chr_139 _sym_139 _other_139 _constants_139) (begin (if_else-set! _e_139 (simplify (if_else _e_139) _notepad2_4)) (_analyze_4 _e_139 _fix_139 _chr_139 _sym_139 _other_139 _constants_139)))) (set! _remove-duplicates_4 (lambda (_data_140 _set_140) (let ((_originals_143 _data_140) (_data_143 '()) (_set_143 _set_140)) (let () (let ((_loop_146 (unspecified))) (begin (set! _loop_146 (lambda (_originals_147 _data_147 _set_147) (if (null? _originals_147) (values _data_147 _set_147) (let ((_x_150 (let ((_x_152_155 _originals_147)) (begin (_check! (pair? _x_152_155) 0 _x_152_155) (car:pair _x_152_155)))) (_originals_150 (let ((_x_156_159 _originals_147)) (begin (_check! (pair? _x_156_159) 1 _x_156_159) (cdr:pair _x_156_159))))) (if (memv _x_150 _set_147) (_loop_146 _originals_150 _data_147 _set_147) (_loop_146 _originals_150 (cons _x_150 _data_147) (cons _x_150 _set_147))))))) (_loop_146 _originals_143 _data_143 _set_143))))))) (set! _collect-clauses_4 (lambda (_e_160 _fix_160 _chr_160 _sym_160 _other_160 _constants_160) (if (not (conditional? _e_160)) (_analyze_4 (simplify _e_160 _notepad2_4) _fix_160 _chr_160 _sym_160 _other_160 _constants_160) (let ((_test_163 (simplify (if_test _e_160) _notepad2_4)) (_code_163 (simplify (if_then _e_160) _notepad2_4))) (begin (if_test-set! _e_160 _test_163) (if_then-set! _e_160 _code_163) (if (not (call? _test_163)) (_finish_4 _e_160 _fix_160 _chr_160 _sym_160 _other_160 _constants_160) (let ((_proc_166 (call_proc _test_163)) (_args_166 (call_args _test_163))) (if (not (if (variable? _proc_166) (if (let* ((_name_171 (variable_name _proc_166)) (_temp_172_175 (eq? _name_171 name:eq?))) (if _temp_172_175 _temp_172_175 (let ((_temp_176_179 (eq? _name_171 name:eqv?))) (if _temp_176_179 _temp_176_179 (let ((_temp_180_183 (eq? _name_171 name:memq))) (if _temp_180_183 _temp_180_183 (eq? _name_171 name:memv))))))) (if (= (length _args_166) 2) (if (variable? (let ((_x_187_190 _args_166)) (begin (_check! (pair? _x_187_190) 0 _x_187_190) (car:pair _x_187_190)))) (if (eq? (variable_name (let ((_x_192_195 _args_166)) (begin (_check! (pair? _x_192_195) 0 _x_192_195) (car:pair _x_192_195)))) _var0_3) (constant? (let ((_x_198_201 (let ((_x_202_205 _args_166)) (begin (_check! (pair? _x_202_205) 1 _x_202_205) (cdr:pair _x_202_205))))) (begin (_check! (pair? _x_198_201) 0 _x_198_201) (car:pair _x_198_201)))) #f) #f) #f) #f) #f)) (_finish_4 _e_160 _fix_160 _chr_160 _sym_160 _other_160 _constants_160) (let ((_pred_208 (variable_name _proc_166)) (_datum_208 (constant_value (let ((_x_257_260 (let ((_x_261_264 _args_166)) (begin (_check! (pair? _x_261_264) 1 _x_261_264) (cdr:pair _x_261_264))))) (begin (_check! (pair? _x_257_260) 0 _x_257_260) (car:pair _x_257_260)))))) (if (let ((_temp_209_212 (if (let ((_temp_224_227 (eq? _pred_208 name:memv))) (if _temp_224_227 _temp_224_227 (eq? _pred_208 name:memq))) (not (list? _datum_208)) #f))) (if _temp_209_212 _temp_209_212 (let ((_temp_213_216 (if (eq? _pred_208 name:eq?) (not (eqv-is-ok? _datum_208)) #f))) (if _temp_213_216 _temp_213_216 (if (eq? _pred_208 name:memq) (not (every? (lambda (_datum_220) (eqv-is-ok? _datum_220)) _datum_208)) #f))))) (_finish_4 _e_160 _fix_160 _chr_160 _sym_160 _other_160 _constants_160) (call-with-values (lambda () (_remove-duplicates_4 (if (let ((_temp_231_234 (eq? _pred_208 name:eqv?))) (if _temp_231_234 _temp_231_234 (eq? _pred_208 name:eq?))) (cons _datum_208 '()) _datum_208) _constants_160)) (lambda (_data_237 _constants_237) (let ((_clause_240 (let* ((_t1_245_248 _data_237) (_t2_245_251 (cons _code_163 '()))) (let () (cons _t1_245_248 _t2_245_251)))) (_e2_240 (if_else _e_160))) (if (every? smallint? _data_237) (_collect-clauses_4 _e2_240 (cons _clause_240 _fix_160) _chr_160 _sym_160 _other_160 _constants_237) (if (every? char? _data_237) (_collect-clauses_4 _e2_240 _fix_160 (cons _clause_240 _chr_160) _sym_160 _other_160 _constants_237) (if (every? symbol? _data_237) (_collect-clauses_4 _e2_240 _fix_160 _chr_160 (cons _clause_240 _sym_160) _other_160 _constants_237) (_collect-clauses_4 _e2_240 _fix_160 _chr_160 _sym_160 (cons _clause_240 _other_160) _constants_237))))))))))))))))) (set! _notepad2_4 (make-notepad (notepad_parent _notepad_3))) (_collect-clauses_4 _e_3 '() '() '() '() '()))))) (_simplify-case-clauses_2 _var0_1 _e_1 _notepad_1))))) 'simplify-case-clauses))
(let () (begin (set! eqv-is-ok? (lambda (_x_1) (let ((_eqv-is-ok?_2 0)) (begin (set! _eqv-is-ok?_2 (lambda (_x_3) (let ((_temp_4_7 (smallint? _x_3))) (if _temp_4_7 _temp_4_7 (let ((_temp_8_11 (char? _x_3))) (if _temp_8_11 _temp_8_11 (let ((_temp_12_15 (symbol? _x_3))) (if _temp_12_15 _temp_12_15 (boolean? _x_3))))))))) (_eqv-is-ok?_2 _x_1))))) 'eqv-is-ok?))
(let () (begin (set! eq-is-ok? (lambda (_x_1) (let ((_eq-is-ok?_2 0)) (begin (set! _eq-is-ok?_2 (lambda (_x_3) (eqv-is-ok? _x_3))) (_eq-is-ok?_2 _x_1))))) 'eq-is-ok?))
(let () (begin (set! analyze-clauses (lambda (_f_1 _var0_1 _default_1 _fix_1 _chr_1 _sym_1 _other_1 _constants_1) (let ((_analyze-clauses_2 0)) (begin (set! _analyze-clauses_2 (lambda (_f_3 _var0_3 _default_3 _fix_3 _chr_3 _sym_3 _other_3 _constants_3) (if (let ((_temp_5_8 (if (null? _fix_3) (null? _chr_3) #f))) (if _temp_5_8 _temp_5_8 (< (length _constants_3) 12))) (implement-clauses-by-sequential-search _var0_3 _default_3 (append _fix_3 _chr_3 _sym_3 _other_3)) (implement-clauses _f_3 _var0_3 _default_3 _fix_3 _chr_3 _sym_3 _other_3 _constants_3)))) (_analyze-clauses_2 _f_1 _var0_1 _default_1 _fix_1 _chr_1 _sym_1 _other_1 _constants_1))))) 'analyze-clauses))
(let () (begin (set! implement-clauses (lambda (_f_1 _var0_1 _default_1 _fix_1 _chr_1 _sym_1 _other_1 _constants_1) (let ((_implement-clauses_2 0)) (begin (set! _implement-clauses_2 (lambda (_f_3 _var0_3 _default_3 _fix_3 _chr_3 _sym_3 _other_3 _constants_3) (let* ((_name:n_6 ((make-rename-procedure) 'n)) (_entry_9 (make-r-entry _name:n_6 '() '() '())) (_f_12 (union (make-set (cons _name:n_6 '())) _f_3)) (_l_15 (make-lambda (cons _name:n_6 '()) '() '() _f_12 '() '() #f (implement-case-dispatch _name:n_6 (cons _default_3 (let () (let ((_loop_138_141_144 (unspecified))) (begin (set! _loop_138_141_144 (lambda (_y1_133_134_145 _results_133_137_145) (if (null? _y1_133_134_145) (reverse _results_133_137_145) (begin #t (_loop_138_141_144 (let ((_x_149_152 _y1_133_134_145)) (begin (_check! (pair? _x_149_152) 1 _x_149_152) (cdr:pair _x_149_152))) (cons (let ((_x_154_157 (let ((_x_158_161 (let ((_x_162_165 _y1_133_134_145)) (begin (_check! (pair? _x_162_165) 0 _x_162_165) (car:pair _x_162_165))))) (begin (_check! (pair? _x_158_161) 1 _x_158_161) (cdr:pair _x_158_161))))) (begin (_check! (pair? _x_154_157) 0 _x_154_157) (car:pair _x_154_157))) _results_133_137_145)))))) (_loop_138_141_144 (append _other_3 _fix_3 _chr_3 _sym_3) '()))))))))) (let () (make-call _l_15 (cons (implement-dispatch 0 _var0_3 (let () (let ((_loop_25_28_31 (unspecified))) (begin (set! _loop_25_28_31 (lambda (_y1_20_21_32 _results_20_24_32) (if (null? _y1_20_21_32) (reverse _results_20_24_32) (begin #t (_loop_25_28_31 (let ((_x_36_39 _y1_20_21_32)) (begin (_check! (pair? _x_36_39) 1 _x_36_39) (cdr:pair _x_36_39))) (cons (let ((_x_40_43 (let ((_x_44_47 _y1_20_21_32)) (begin (_check! (pair? _x_44_47) 0 _x_44_47) (car:pair _x_44_47))))) (begin (_check! (pair? _x_40_43) 0 _x_40_43) (car:pair _x_40_43))) _results_20_24_32)))))) (_loop_25_28_31 _other_3 '())))) (let () (let ((_loop_53_56_59 (unspecified))) (begin (set! _loop_53_56_59 (lambda (_y1_48_49_60 _results_48_52_60) (if (null? _y1_48_49_60) (reverse _results_48_52_60) (begin #t (_loop_53_56_59 (let ((_x_64_67 _y1_48_49_60)) (begin (_check! (pair? _x_64_67) 1 _x_64_67) (cdr:pair _x_64_67))) (cons (let ((_x_68_71 (let ((_x_72_75 _y1_48_49_60)) (begin (_check! (pair? _x_72_75) 0 _x_72_75) (car:pair _x_72_75))))) (begin (_check! (pair? _x_68_71) 0 _x_68_71) (car:pair _x_68_71))) _results_48_52_60)))))) (_loop_53_56_59 _fix_3 '())))) (let () (let ((_loop_81_84_87 (unspecified))) (begin (set! _loop_81_84_87 (lambda (_y1_76_77_88 _results_76_80_88) (if (null? _y1_76_77_88) (reverse _results_76_80_88) (begin #t (_loop_81_84_87 (let ((_x_92_95 _y1_76_77_88)) (begin (_check! (pair? _x_92_95) 1 _x_92_95) (cdr:pair _x_92_95))) (cons (let ((_x_96_99 (let ((_x_100_103 _y1_76_77_88)) (begin (_check! (pair? _x_100_103) 0 _x_100_103) (car:pair _x_100_103))))) (begin (_check! (pair? _x_96_99) 0 _x_96_99) (car:pair _x_96_99))) _results_76_80_88)))))) (_loop_81_84_87 _chr_3 '())))) (let () (let ((_loop_109_112_115 (unspecified))) (begin (set! _loop_109_112_115 (lambda (_y1_104_105_116 _results_104_108_116) (if (null? _y1_104_105_116) (reverse _results_104_108_116) (begin #t (_loop_109_112_115 (let ((_x_120_123 _y1_104_105_116)) (begin (_check! (pair? _x_120_123) 1 _x_120_123) (cdr:pair _x_120_123))) (cons (let ((_x_124_127 (let ((_x_128_131 _y1_104_105_116)) (begin (_check! (pair? _x_128_131) 0 _x_128_131) (car:pair _x_128_131))))) (begin (_check! (pair? _x_124_127) 0 _x_124_127) (car:pair _x_124_127))) _results_104_108_116)))))) (_loop_109_112_115 _sym_3 '()))))) '())))))) (_implement-clauses_2 _f_1 _var0_1 _default_1 _fix_1 _chr_1 _sym_1 _other_1 _constants_1))))) 'implement-clauses))
(let () (begin (set! implement-case-dispatch (lambda (_var0_1 _exprs_1) (let ((_implement-case-dispatch_2 0)) (begin (set! _implement-case-dispatch_2 (lambda (_var0_3 _exprs_3) (implement-intervals _var0_3 (let () (let ((_loop_10_14_17 (unspecified))) (begin (set! _loop_10_14_17 (lambda (_y1_4_6_18 _y1_4_5_18 _results_4_9_18) (if (let ((_temp_20_23 (null? _y1_4_6_18))) (if _temp_20_23 _temp_20_23 (null? _y1_4_5_18))) (reverse _results_4_9_18) (begin #t (_loop_10_14_17 (let ((_x_26_29 _y1_4_6_18)) (begin (_check! (pair? _x_26_29) 1 _x_26_29) (cdr:pair _x_26_29))) (let ((_x_30_33 _y1_4_5_18)) (begin (_check! (pair? _x_30_33) 1 _x_30_33) (cdr:pair _x_30_33))) (cons (let ((_n_34 (let ((_x_56_59 _y1_4_6_18)) (begin (_check! (pair? _x_56_59) 0 _x_56_59) (car:pair _x_56_59)))) (_code_34 (let ((_x_60_63 _y1_4_5_18)) (begin (_check! (pair? _x_60_63) 0 _x_60_63) (car:pair _x_60_63))))) (let* ((_t1_35_38 _n_34) (_t2_35_41 (let* ((_t1_45_48 (+ _n_34 1)) (_t2_45_51 (cons _code_34 '()))) (let () (cons _t1_45_48 _t2_45_51))))) (let () (cons _t1_35_38 _t2_35_41)))) _results_4_9_18)))))) (_loop_10_14_17 (iota (length _exprs_3)) _exprs_3 '()))))))) (_implement-case-dispatch_2 _var0_1 _exprs_1))))) 'implement-case-dispatch))
(let () (begin (set! implement-dispatch (lambda (_prior_1 _var0_1 _other_1 _fix_1 _chr_1 _sym_1) (let ((_implement-dispatch_2 0)) (begin (set! _implement-dispatch_2 (lambda (_prior_3 _var0_3 _other_3 _fix_3 _chr_3 _sym_3) (if (not (null? _other_3)) (implement-dispatch-other (_implement-dispatch_2 (+ _prior_3 (length _other_3)) _var0_3 _fix_3 _chr_3 _sym_3 '()) _prior_3 var _other_3) (if (not (null? _fix_3)) (make-conditional (make-call (make-variable name:fixnum?) (cons (make-variable _var0_3) '())) (implement-dispatch-fixnum _prior_3 _var0_3 _fix_3) (_implement-dispatch_2 (+ _prior_3 (length _fix_3)) _var0_3 '() _chr_3 _sym_3 _other_3)) (if (not (null? _chr_3)) (make-conditional (make-call (make-variable name:char?) (cons (make-variable _var0_3) '())) (implement-dispatch-char _prior_3 _var0_3 _chr_3) (_implement-dispatch_2 (+ _prior_3 (length _chr_3)) _var0_3 _fix_3 '() _sym_3 _other_3)) (if (not (null? _sym_3)) (make-conditional (make-call (make-variable name:symbol?) (cons (make-variable _var0_3) '())) (implement-dispatch-symbol _prior_3 _var0_3 _sym_3) (_implement-dispatch_2 (+ _prior_3 (length _sym_3)) _var0_3 _fix_3 _chr_3 '() _other_3)) (make-constant 0))))))) (_implement-dispatch_2 _prior_1 _var0_1 _other_1 _fix_1 _chr_1 _sym_1))))) 'implement-dispatch))
(let () (begin (set! implement-dispatch-fixnum (lambda (_prior_1 _var0_1 _lists_1) (let ((_implement-dispatch-fixnum_2 0)) (begin (set! _implement-dispatch-fixnum_2 (lambda (_prior_3 _var0_3 _lists_3) (let ((_complete-intervals_6 (unspecified)) (_extract-intervals_6 (unspecified)) (_calculate-intervals_6 (unspecified))) (begin (set! _complete-intervals_6 (lambda (_intervals_7) (if (null? _intervals_7) _intervals_7 (if (null? (let ((_x_10_13 _intervals_7)) (begin (_check! (pair? _x_10_13) 1 _x_10_13) (cdr:pair _x_10_13)))) _intervals_7 (let* ((_i1_17 (let ((_x_80_83 _intervals_7)) (begin (_check! (pair? _x_80_83) 0 _x_80_83) (car:pair _x_80_83)))) (_i2_20 (let ((_x_72_75 (let ((_x_76_79 _intervals_7)) (begin (_check! (pair? _x_76_79) 1 _x_76_79) (cdr:pair _x_76_79))))) (begin (_check! (pair? _x_72_75) 0 _x_72_75) (car:pair _x_72_75)))) (_end1_23 (let ((_x_63_66 (let ((_x_67_70 _i1_17)) (begin (_check! (pair? _x_67_70) 1 _x_67_70) (cdr:pair _x_67_70))))) (begin (_check! (pair? _x_63_66) 0 _x_63_66) (car:pair _x_63_66)))) (_start2_26 (let ((_x_58_61 _i2_20)) (begin (_check! (pair? _x_58_61) 0 _x_58_61) (car:pair _x_58_61)))) (_intervals_29 (_complete-intervals_6 (let ((_x_54_57 _intervals_7)) (begin (_check! (pair? _x_54_57) 1 _x_54_57) (cdr:pair _x_54_57)))))) (let () (if (= _end1_23 _start2_26) (cons _i1_17 _intervals_29) (cons _i1_17 (cons (let* ((_t1_33_36 _end1_23) (_t2_33_39 (let* ((_t1_43_46 _start2_26) (_t2_43_49 (cons (make-constant 0) '()))) (let () (cons _t1_43_46 _t2_43_49))))) (let () (cons _t1_33_36 _t2_33_39))) _intervals_29))))))))) (set! _extract-intervals_6 (lambda (_n_84 _constants_84) (if (null? _constants_84) '() (let ((_k0_87 (let ((_x_136_139 _constants_84)) (begin (_check! (pair? _x_136_139) 0 _x_136_139) (car:pair _x_136_139))))) (let () (let ((_loop_88_91_94 (unspecified))) (begin (set! _loop_88_91_94 (lambda (_constants_95 _k1_95) (if (let ((_temp_97_100 (null? _constants_95))) (if _temp_97_100 _temp_97_100 (not (= _k1_95 (let ((_x_102_105 _constants_95)) (begin (_check! (pair? _x_102_105) 0 _x_102_105) (car:pair _x_102_105))))))) (cons (let* ((_t1_106_109 _k0_87) (_t2_106_112 (let* ((_t1_116_119 _k1_95) (_t2_116_122 (cons (make-constant _n_84) '()))) (let () (cons _t1_116_119 _t2_116_122))))) (let () (cons _t1_106_109 _t2_106_112))) (_extract-intervals_6 _n_84 _constants_95)) (begin #t (_loop_88_91_94 (let ((_x_128_131 _constants_95)) (begin (_check! (pair? _x_128_131) 1 _x_128_131) (cdr:pair _x_128_131))) (+ _k1_95 1)))))) (_loop_88_91_94 (let ((_x_132_135 _constants_84)) (begin (_check! (pair? _x_132_135) 1 _x_132_135) (cdr:pair _x_132_135))) (+ _k0_87 1))))))))) (set! _calculate-intervals_6 (lambda (_n_140 _lists_140) (let ((_loop_141 (unspecified))) (begin (set! _loop_141 (lambda (_n_142 _lists_142 _intervals_142) (if (null? _lists_142) (twobit-sort (lambda (_interval1_143 _interval2_143) (< (let ((_x_144_147 _interval1_143)) (begin (_check! (pair? _x_144_147) 0 _x_144_147) (car:pair _x_144_147))) (let ((_x_148_151 _interval2_143)) (begin (_check! (pair? _x_148_151) 0 _x_148_151) (car:pair _x_148_151))))) _intervals_142) (let ((_constants_154 (twobit-sort < (let ((_x_159_162 _lists_142)) (begin (_check! (pair? _x_159_162) 0 _x_159_162) (car:pair _x_159_162)))))) (_loop_141 (+ _n_142 1) (let ((_x_155_158 _lists_142)) (begin (_check! (pair? _x_155_158) 1 _x_155_158) (cdr:pair _x_155_158))) (append (_extract-intervals_6 _n_142 _constants_154) _intervals_142)))))) (_loop_141 _n_140 _lists_140 '()))))) (let* ((_intervals_163 (_complete-intervals_6 (_calculate-intervals_6 (+ _prior_3 1) _lists_3))) (_lo_166 (let ((_x_206_209 (let ((_x_210_213 _intervals_163)) (begin (_check! (pair? _x_210_213) 0 _x_210_213) (car:pair _x_210_213))))) (begin (_check! (pair? _x_206_209) 0 _x_206_209) (car:pair _x_206_209)))) (_hi_169 (let ((_x_198_201 (let ((_x_202_205 (reverse _intervals_163))) (begin (_check! (pair? _x_202_205) 0 _x_202_205) (car:pair _x_202_205))))) (begin (_check! (pair? _x_198_201) 0 _x_198_201) (car:pair _x_198_201)))) (_p_172 (length _intervals_163))) (let () (make-conditional (make-call (make-variable name:fx<) (let* ((_t1_176_179 (make-variable _var0_3)) (_t2_176_182 (cons (make-constant _lo_166) '()))) (let () (cons _t1_176_179 _t2_176_182)))) (make-constant 0) (make-conditional (make-call (make-variable name:fx<) (let* ((_t1_187_190 (make-variable _var0_3)) (_t2_187_193 (cons (make-constant (+ _hi_169 1)) '()))) (let () (cons _t1_187_190 _t2_187_193)))) (if (< (- _hi_169 _lo_166) (* 5 _p_172)) (implement-table-lookup _var0_3 (+ _prior_3 1) _lists_3 _lo_166 _hi_169) (implement-intervals _var0_3 _intervals_163)) (make-constant 0))))))))) (_implement-dispatch-fixnum_2 _prior_1 _var0_1 _lists_1))))) 'implement-dispatch-fixnum))
(let () (begin (set! implement-dispatch-char (lambda (_prior_1 _var0_1 _lists_1) (let ((_implement-dispatch-char_2 0)) (begin (set! _implement-dispatch-char_2 (lambda (_prior_3 _var0_3 _lists_3) (let* ((_lists_6 (let () (let ((_loop_67_70_73 (unspecified))) (begin (set! _loop_67_70_73 (lambda (_y1_62_63_74 _results_62_66_74) (if (null? _y1_62_63_74) (reverse _results_62_66_74) (begin #t (_loop_67_70_73 (let ((_x_78_81 _y1_62_63_74)) (begin (_check! (pair? _x_78_81) 1 _x_78_81) (cdr:pair _x_78_81))) (cons (let ((_constants_82 (let ((_x_107_110 _y1_62_63_74)) (begin (_check! (pair? _x_107_110) 0 _x_107_110) (car:pair _x_107_110))))) (let () (let ((_loop_88_91_94 (unspecified))) (begin (set! _loop_88_91_94 (lambda (_y1_83_84_95 _results_83_87_95) (if (null? _y1_83_84_95) (reverse _results_83_87_95) (begin #t (_loop_88_91_94 (let ((_x_99_102 _y1_83_84_95)) (begin (_check! (pair? _x_99_102) 1 _x_99_102) (cdr:pair _x_99_102))) (cons (compat:char->integer (let ((_x_103_106 _y1_83_84_95)) (begin (_check! (pair? _x_103_106) 0 _x_103_106) (car:pair _x_103_106)))) _results_83_87_95)))))) (_loop_88_91_94 _constants_82 '()))))) _results_62_66_74)))))) (_loop_67_70_73 _lists_3 '()))))) (_name:n_9 ((make-rename-procedure) 'n)) (_f_12 (let* ((_t1_21_24 _name:n_9) (_t2_21_27 (let* ((_t1_31_34 name:eq?) (_t2_31_37 (let* ((_t1_41_44 name:fx<) (_t2_41_47 (let* ((_t1_51_54 name:fx-) (_t2_51_57 (cons name:vector-ref '()))) (let () (cons _t1_51_54 _t2_51_57))))) (let () (cons _t1_41_44 _t2_41_47))))) (let () (cons _t1_31_34 _t2_31_37))))) (let () (cons _t1_21_24 _t2_21_27)))) (_l_15 (make-lambda (cons _name:n_9 '()) '() '() _f_12 '() '() #f (implement-dispatch-fixnum _prior_3 _name:n_9 _lists_6)))) (let () (make-call _l_15 (make-call (make-variable name:char->integer) (cons (make-variable _var0_3) '()))))))) (_implement-dispatch-char_2 _prior_1 _var0_1 _lists_1))))) 'implement-dispatch-char))
(let () (begin (set! implement-dispatch-symbol (lambda (_prior_1 _var0_1 _lists_1) (let ((_implement-dispatch-symbol_2 0)) (begin (set! _implement-dispatch-symbol_2 (lambda (_prior_3 _var0_3 _lists_3) (implement-dispatch-other (make-constant 0) _prior_3 _var0_3 _lists_3))) (_implement-dispatch-symbol_2 _prior_1 _var0_1 _lists_1))))) 'implement-dispatch-symbol))
(let () (begin (set! implement-dispatch-other (lambda (_default_1 _prior_1 _var0_1 _lists_1) (let ((_implement-dispatch-other_2 0)) (begin (set! _implement-dispatch-other_2 (lambda (_default_3 _prior_3 _var0_3 _lists_3) (if (null? _lists_3) _default_3 (let* ((_constants_6 (let ((_x_20_23 _lists_3)) (begin (_check! (pair? _x_20_23) 0 _x_20_23) (car:pair _x_20_23)))) (_lists_9 (let ((_x_16_19 _lists_3)) (begin (_check! (pair? _x_16_19) 1 _x_16_19) (cdr:pair _x_16_19)))) (_n_12 (+ _prior_3 1))) (let () (make-conditional (make-call-to-memv _var0_3 _constants_6) (make-constant _n_12) (_implement-dispatch-other_2 _default_3 _n_12 _var0_3 _lists_9))))))) (_implement-dispatch-other_2 _default_1 _prior_1 _var0_1 _lists_1))))) 'implement-dispatch-other))
(let () (begin (set! make-call-to-memv (lambda (_var0_1 _constants_1) (let ((_make-call-to-memv_2 0)) (begin (set! _make-call-to-memv_2 (lambda (_var0_3 _constants_3) (if (null? _constants_3) (make-constant #f) (if (null? (let ((_x_6_9 _constants_3)) (begin (_check! (pair? _x_6_9) 1 _x_6_9) (cdr:pair _x_6_9)))) (make-call-to-eqv _var0_3 (let ((_x_10_13 _constants_3)) (begin (_check! (pair? _x_10_13) 0 _x_10_13) (car:pair _x_10_13)))) (make-conditional (make-call-to-eqv _var0_3 (let ((_x_15_18 _constants_3)) (begin (_check! (pair? _x_15_18) 0 _x_15_18) (car:pair _x_15_18)))) (make-constant #t) (_make-call-to-memv_2 _var0_3 (let ((_x_19_22 _constants_3)) (begin (_check! (pair? _x_19_22) 1 _x_19_22) (cdr:pair _x_19_22))))))))) (_make-call-to-memv_2 _var0_1 _constants_1))))) 'make-call-to-memv))
(let () (begin (set! make-call-to-eqv (lambda (_var0_1 _constant_1) (let ((_make-call-to-eqv_2 0)) (begin (set! _make-call-to-eqv_2 (lambda (_var0_3 _constant_3) (make-call (make-variable (if (eq-is-ok? _constant_3) name:eq? name:eqv?)) (let* ((_t1_4_7 (make-variable _var0_3)) (_t2_4_10 (cons (make-constant _constant_3) '()))) (let () (cons _t1_4_7 _t2_4_10)))))) (_make-call-to-eqv_2 _var0_1 _constant_1))))) 'make-call-to-eqv))
(let () (begin (set! implement-table-lookup (lambda (_var0_1 _index_1 _lists_1 _lo_1 _hi_1) (let ((_implement-table-lookup_2 0)) (begin (set! _implement-table-lookup_2 (lambda (_var0_3 _index_3 _lists_3 _lo_3 _hi_3) (let ((_v_6 (make-vector (+ 1 (- _hi_3 _lo_3)) 0))) (begin (let () (let ((_loop_8_11_14 (unspecified))) (begin (set! _loop_8_11_14 (lambda (_index_15 _lists_15) (if (null? _lists_15) (if #f #f (unspecified)) (begin (begin #t (let () (let ((_loop_23_25_28 (unspecified))) (begin (set! _loop_23_25_28 (lambda (_y1_18_19_29) (if (null? _y1_18_19_29) (if #f #f (unspecified)) (begin (begin #t (let ((_k_33 (let ((_x_38_41 _y1_18_19_29)) (begin (_check! (pair? _x_38_41) 0 _x_38_41) (car:pair _x_38_41))))) (let ((_v_34_37 _v_6) (_i_34_37 (- _k_33 _lo_3)) (_x_34_37 _index_15)) (begin (_check! (fixnum? _i_34_37) 41 _v_34_37 _i_34_37 _x_34_37) (_check! (vector? _v_34_37) 41 _v_34_37 _i_34_37 _x_34_37) (_check! (<:fix:fix _i_34_37 (vector-length:vec _v_34_37)) 41 _v_34_37 _i_34_37 _x_34_37) (_check! (>=:fix:fix _i_34_37 0) 41 _v_34_37 _i_34_37 _x_34_37) (vector-set!:trusted _v_34_37 _i_34_37 _x_34_37))))) (_loop_23_25_28 (let ((_x_42_45 _y1_18_19_29)) (begin (_check! (pair? _x_42_45) 1 _x_42_45) (cdr:pair _x_42_45)))))))) (_loop_23_25_28 (let ((_x_46_49 _lists_15)) (begin (_check! (pair? _x_46_49) 0 _x_46_49) (car:pair _x_46_49)))))))) (_loop_8_11_14 (+ _index_15 1) (let ((_x_50_53 _lists_15)) (begin (_check! (pair? _x_50_53) 1 _x_50_53) (cdr:pair _x_50_53)))))))) (_loop_8_11_14 _index_3 _lists_3)))) (make-call (make-variable name:vector-ref) (let* ((_t1_54_57 (make-constant _v_6)) (_t2_54_60 (cons (make-call (make-variable name:fx-) (let* ((_t1_65_68 (make-variable _var0_3)) (_t2_65_71 (cons (make-constant _lo_3) '()))) (let () (cons _t1_65_68 _t2_65_71)))) '()))) (let () (cons _t1_54_57 _t2_54_60)))))))) (_implement-table-lookup_2 _var0_1 _index_1 _lists_1 _lo_1 _hi_1))))) 'implement-table-lookup))
(let () (begin (set! implement-intervals (lambda (_var0_1 _intervals_1) (let ((_implement-intervals_2 0)) (begin (set! _implement-intervals_2 (lambda (_var0_3 _intervals_3) (if (null? (let ((_x_4_7 _intervals_3)) (begin (_check! (pair? _x_4_7) 1 _x_4_7) (cdr:pair _x_4_7)))) (let ((_x_9_12 (let ((_x_13_16 (let ((_x_17_20 (let ((_x_21_24 _intervals_3)) (begin (_check! (pair? _x_21_24) 0 _x_21_24) (car:pair _x_21_24))))) (begin (_check! (pair? _x_17_20) 1 _x_17_20) (cdr:pair _x_17_20))))) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 0 _x_9_12) (car:pair _x_9_12))) (let ((_n_27 (quotient (length _intervals_3) 2))) (let () (let ((_loop_28_32_35 (unspecified))) (begin (set! _loop_28_32_35 (lambda (_n_36 _intervals1_36 _intervals2_36) (if (zero? _n_36) (let ((_intervals1_40 (reverse _intervals1_36)) (_m_40 (let ((_x_52_55 (let ((_x_56_59 _intervals2_36)) (begin (_check! (pair? _x_56_59) 0 _x_56_59) (car:pair _x_56_59))))) (begin (_check! (pair? _x_52_55) 0 _x_52_55) (car:pair _x_52_55))))) (make-conditional (make-call (make-variable name:fx<) (let* ((_t1_41_44 (make-variable _var0_3)) (_t2_41_47 (cons (make-constant _m_40) '()))) (let () (cons _t1_41_44 _t2_41_47)))) (_implement-intervals_2 _var0_3 _intervals1_40) (_implement-intervals_2 _var0_3 _intervals2_36))) (begin #t (_loop_28_32_35 (- _n_36 1) (cons (let ((_x_61_64 _intervals2_36)) (begin (_check! (pair? _x_61_64) 0 _x_61_64) (car:pair _x_61_64))) _intervals1_36) (let ((_x_65_68 _intervals2_36)) (begin (_check! (pair? _x_65_68) 1 _x_65_68) (cdr:pair _x_65_68)))))))) (_loop_28_32_35 _n_27 '() _intervals_3)))))))) (_implement-intervals_2 _var0_1 _intervals_1))))) 'implement-intervals))
(let () (begin (set! *memq-threshold* 20) '*memq-threshold*))
(let () (begin (set! *memv-threshold* 4) '*memv-threshold*))
(let () (begin (set! implement-clauses-by-sequential-search (lambda (_var0_1 _default_1 _clauses_1) (let ((_implement-clauses-by-sequential-search_2 0)) (begin (set! _implement-clauses-by-sequential-search_2 (lambda (_var0_3 _default_3 _clauses_3) (if (null? _clauses_3) _default_3 (let* ((_case1_6 (let ((_x_36_39 _clauses_3)) (begin (_check! (pair? _x_36_39) 0 _x_36_39) (car:pair _x_36_39)))) (_clauses_9 (let ((_x_32_35 _clauses_3)) (begin (_check! (pair? _x_32_35) 1 _x_32_35) (cdr:pair _x_32_35)))) (_constants1_12 (let ((_x_28_31 _case1_6)) (begin (_check! (pair? _x_28_31) 0 _x_28_31) (car:pair _x_28_31)))) (_code1_15 (let ((_x_20_23 (let ((_x_24_27 _case1_6)) (begin (_check! (pair? _x_24_27) 1 _x_24_27) (cdr:pair _x_24_27))))) (begin (_check! (pair? _x_20_23) 0 _x_20_23) (car:pair _x_20_23))))) (let () (make-conditional (make-call-to-memv _var0_3 _constants1_12) _code1_15 (_implement-clauses-by-sequential-search_2 _var0_3 _default_3 _clauses_9))))))) (_implement-clauses-by-sequential-search_2 _var0_1 _default_1 _clauses_1))))) 'implement-clauses-by-sequential-search))
(let () (begin (set! callgraphnode_name (lambda (_x_1) (let ((_callgraphnode_name_2 0)) (begin (set! _callgraphnode_name_2 (lambda (_x_3) (let ((_x_4_7 _x_3)) (begin (_check! (pair? _x_4_7) 0 _x_4_7) (car:pair _x_4_7))))) (_callgraphnode_name_2 _x_1))))) 'callgraphnode_name))
(let () (begin (set! callgraphnode_code (lambda (_x_1) (let ((_callgraphnode_code_2 0)) (begin (set! _callgraphnode_code_2 (lambda (_x_3) (let ((_x_5_8 (let ((_x_9_12 _x_3)) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))))) (_callgraphnode_code_2 _x_1))))) 'callgraphnode_code))
(let () (begin (set! callgraphnode_vars (lambda (_x_1) (let ((_callgraphnode_vars_2 0)) (begin (set! _callgraphnode_vars_2 (lambda (_x_3) (let ((_x_5_8 (let ((_x_9_12 (let ((_x_13_16 _x_3)) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))))) (_callgraphnode_vars_2 _x_1))))) 'callgraphnode_vars))
(let () (begin (set! callgraphnode_tailcalls (lambda (_x_1) (let ((_callgraphnode_tailcalls_2 0)) (begin (set! _callgraphnode_tailcalls_2 (lambda (_x_3) (let ((_x_5_8 (let ((_x_9_12 (let ((_x_13_16 (let ((_x_17_20 _x_3)) (begin (_check! (pair? _x_17_20) 1 _x_17_20) (cdr:pair _x_17_20))))) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))))) (_callgraphnode_tailcalls_2 _x_1))))) 'callgraphnode_tailcalls))
(let () (begin (set! callgraphnode_nontailcalls (lambda (_x_1) (let ((_callgraphnode_nontailcalls_2 0)) (begin (set! _callgraphnode_nontailcalls_2 (lambda (_x_3) (let ((_x_4_7 (let ((_x_9_12 (let ((_x_13_16 (let ((_x_17_20 (let ((_x_21_24 _x_3)) (begin (_check! (pair? _x_21_24) 1 _x_21_24) (cdr:pair _x_21_24))))) (begin (_check! (pair? _x_17_20) 1 _x_17_20) (cdr:pair _x_17_20))))) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_4_7) 0 _x_4_7) (car:pair _x_4_7))))) (_callgraphnode_nontailcalls_2 _x_1))))) 'callgraphnode_nontailcalls))
(let () (begin (set! callgraphnode_size (lambda (_x_1) (let ((_callgraphnode_size_2 0)) (begin (set! _callgraphnode_size_2 (lambda (_x_3) (let ((_x_5_8 (let ((_x_9_12 (let ((_x_14_17 (let ((_x_18_21 (let ((_x_22_25 (let ((_x_26_29 _x_3)) (begin (_check! (pair? _x_26_29) 1 _x_26_29) (cdr:pair _x_26_29))))) (begin (_check! (pair? _x_22_25) 1 _x_22_25) (cdr:pair _x_22_25))))) (begin (_check! (pair? _x_18_21) 1 _x_18_21) (cdr:pair _x_18_21))))) (begin (_check! (pair? _x_14_17) 1 _x_14_17) (cdr:pair _x_14_17))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))))) (_callgraphnode_size_2 _x_1))))) 'callgraphnode_size))
(let () (begin (set! callgraphnode_info (lambda (_x_1) (let ((_callgraphnode_info_2 0)) (begin (set! _callgraphnode_info_2 (lambda (_x_3) (let ((_x_5_8 (let ((_x_9_12 (let ((_x_13_16 (let ((_x_18_21 (let ((_x_22_25 (let ((_x_26_29 (let ((_x_30_33 _x_3)) (begin (_check! (pair? _x_30_33) 1 _x_30_33) (cdr:pair _x_30_33))))) (begin (_check! (pair? _x_26_29) 1 _x_26_29) (cdr:pair _x_26_29))))) (begin (_check! (pair? _x_22_25) 1 _x_22_25) (cdr:pair _x_22_25))))) (begin (_check! (pair? _x_18_21) 1 _x_18_21) (cdr:pair _x_18_21))))) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))))) (_callgraphnode_info_2 _x_1))))) 'callgraphnode_info))
(let () (begin (set! callgraphnode_size! (lambda (_x_1 _v_1) (let ((_callgraphnode_size!_2 0)) (begin (set! _callgraphnode_size!_2 (lambda (_x_3 _v_3) (begin (set-car! (let ((_x_4_7 (let ((_x_9_12 (let ((_x_13_16 (let ((_x_17_20 (let ((_x_21_24 _x_3)) (begin (_check! (pair? _x_21_24) 1 _x_21_24) (cdr:pair _x_21_24))))) (begin (_check! (pair? _x_17_20) 1 _x_17_20) (cdr:pair _x_17_20))))) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_4_7) 1 _x_4_7) (cdr:pair _x_4_7))) _v_3) #f))) (_callgraphnode_size!_2 _x_1 _v_1))))) 'callgraphnode_size!))
(let () (begin (set! callgraphnode_info! (lambda (_x_1 _v_1) (let ((_callgraphnode_info!_2 0)) (begin (set! _callgraphnode_info!_2 (lambda (_x_3 _v_3) (begin (set-car! (let ((_x_5_8 (let ((_x_9_12 (let ((_x_14_17 (let ((_x_18_21 (let ((_x_22_25 (let ((_x_26_29 _x_3)) (begin (_check! (pair? _x_26_29) 1 _x_26_29) (cdr:pair _x_26_29))))) (begin (_check! (pair? _x_22_25) 1 _x_22_25) (cdr:pair _x_22_25))))) (begin (_check! (pair? _x_18_21) 1 _x_18_21) (cdr:pair _x_18_21))))) (begin (_check! (pair? _x_14_17) 1 _x_14_17) (cdr:pair _x_14_17))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 1 _x_5_8) (cdr:pair _x_5_8))) _v_3) #f))) (_callgraphnode_info!_2 _x_1 _v_1))))) 'callgraphnode_info!))
(let () (begin (set! callgraph (lambda (_exp_1) (let ((_callgraph_2 0)) (begin (set! _callgraph_2 (lambda (_exp_3) (let ((_adjoin_6 (unspecified))) (begin (set! _adjoin_6 (lambda (_x_7 _z_7) (if (memq _x_7 _z_7) _z_7 (cons _x_7 _z_7)))) (let* ((_result_8 '()) (_add-vertex!_9 (unspecified))) (begin (set! _add-vertex!_9 (lambda (_name_10 _l_10 _vars_10 _known_10) (let ((_tailcalls_13 '()) (_nontailcalls_13 '()) (_size_13 0)) (let ((_graph-lambda!_14 (unspecified)) (_graph!_14 (unspecified))) (begin (set! _graph-lambda!_14 (lambda (_l_15 _vars_15 _known_15 _tail?_15) (let* ((_defs_18 (lambda_defs _l_15)) (_newknown_21 (let () (let ((_loop_67_70_73 (unspecified))) (begin (set! _loop_67_70_73 (lambda (_y1_62_63_74 _results_62_66_74) (if (null? _y1_62_63_74) (reverse _results_62_66_74) (begin #t (_loop_67_70_73 (let ((_x_78_81 _y1_62_63_74)) (begin (_check! (pair? _x_78_81) 1 _x_78_81) (cdr:pair _x_78_81))) (cons (def_lhs (let ((_x_82_85 _y1_62_63_74)) (begin (_check! (pair? _x_82_85) 0 _x_82_85) (car:pair _x_82_85)))) _results_62_66_74)))))) (_loop_67_70_73 _defs_18 '()))))) (_vars_24 (append _newknown_21 (make-null-terminated (lambda_args _l_15)) _vars_15)) (_known_27 (append _newknown_21 _known_15))) (let () (begin (let ((_f_31_34_37 (lambda (_def_57) (begin (_add-vertex!_9 (def_lhs _def_57) (def_rhs _def_57) _vars_24 _known_27) (set! _size_13 (+ _size_13 (callgraphnode_size (let ((_x_58_61 _result_8)) (begin (_check! (pair? _x_58_61) 0 _x_58_61) (car:pair _x_58_61)))))))))) (let () (let ((_loop_39_41_44 (unspecified))) (begin (set! _loop_39_41_44 (lambda (_y1_31_32_45) (if (null? _y1_31_32_45) (if #f #f (unspecified)) (begin (begin #t (_f_31_34_37 (let ((_x_49_52 _y1_31_32_45)) (begin (_check! (pair? _x_49_52) 0 _x_49_52) (car:pair _x_49_52))))) (_loop_39_41_44 (let ((_x_53_56 _y1_31_32_45)) (begin (_check! (pair? _x_53_56) 1 _x_53_56) (cdr:pair _x_53_56)))))))) (_loop_39_41_44 _defs_18))))) (_graph!_14 (lambda_body _l_15) _vars_24 _known_27 _tail?_15)))))) (set! _graph!_14 (lambda (_exp_86 _vars_86 _known_86 _tail?_86) (begin (set! _size_13 (+ _size_13 1)) (let ((_temp_87_90 (let ((_x_159_162 _exp_86)) (begin (_check! (pair? _x_159_162) 0 _x_159_162) (car:pair _x_159_162))))) (if (memv _temp_87_90 '(quote)) #f (if (memv _temp_87_90 '(lambda)) (begin (_add-vertex!_9 #f _exp_86 _vars_86 _known_86) (set! _size_13 (+ _size_13 (callgraphnode_size (let ((_x_93_96 _result_8)) (begin (_check! (pair? _x_93_96) 0 _x_93_96) (car:pair _x_93_96))))))) (if (memv _temp_87_90 '(set!)) (_graph!_14 (assignment_rhs _exp_86) _vars_86 _known_86 #f) (if (memv _temp_87_90 '(if)) (begin (_graph!_14 (if_test _exp_86) _vars_86 _known_86 #f) (_graph!_14 (if_then _exp_86) _vars_86 _known_86 _tail?_86) (_graph!_14 (if_else _exp_86) _vars_86 _known_86 _tail?_86)) (if (memv _temp_87_90 '(begin)) (if (not (variable? _exp_86)) (let () (let ((_loop_100_102_105 (unspecified))) (begin (set! _loop_100_102_105 (lambda (_exprs_106) (if (null? (let ((_x_108_111 _exprs_106)) (begin (_check! (pair? _x_108_111) 1 _x_108_111) (cdr:pair _x_108_111)))) (_graph!_14 (let ((_x_112_115 _exprs_106)) (begin (_check! (pair? _x_112_115) 0 _x_112_115) (car:pair _x_112_115))) _vars_86 _known_86 _tail?_86) (begin (begin #t (_graph!_14 (let ((_x_117_120 _exprs_106)) (begin (_check! (pair? _x_117_120) 0 _x_117_120) (car:pair _x_117_120))) _vars_86 _known_86 #f)) (_loop_100_102_105 (let ((_x_121_124 _exprs_106)) (begin (_check! (pair? _x_121_124) 1 _x_121_124) (cdr:pair _x_121_124)))))))) (_loop_100_102_105 (begin_exprs _exp_86))))) (unspecified)) (let ((_proc_128 (call_proc _exp_86))) (begin (if (variable? _proc_128) (let ((_name_132 (variable_name _proc_128))) (if (memq _name_132 _known_86) (if _tail?_86 (set! _tailcalls_13 (_adjoin_6 _name_132 _tailcalls_13)) (set! _nontailcalls_13 (_adjoin_6 _name_132 _nontailcalls_13))) (unspecified))) (if (lambda? _proc_128) (_graph-lambda!_14 _proc_128 _vars_86 _known_86 _tail?_86) (_graph!_14 _proc_128 _vars_86 _known_86 #f))) (let () (let ((_loop_140_142_145 (unspecified))) (begin (set! _loop_140_142_145 (lambda (_y1_135_136_146) (if (null? _y1_135_136_146) (if #f #f (unspecified)) (begin (begin #t (let ((_exp_150 (let ((_x_151_154 _y1_135_136_146)) (begin (_check! (pair? _x_151_154) 0 _x_151_154) (car:pair _x_151_154))))) (_graph!_14 _exp_150 _vars_86 _known_86 #f))) (_loop_140_142_145 (let ((_x_155_158 _y1_135_136_146)) (begin (_check! (pair? _x_155_158) 1 _x_155_158) (cdr:pair _x_155_158)))))))) (_loop_140_142_145 (call_args _exp_86)))))))))))))))) (_graph-lambda!_14 _l_10 _vars_10 _known_10 #t) (set! _result_8 (cons (let* ((_t1_163_166 _name_10) (_t2_163_169 (let* ((_t1_173_176 _l_10) (_t2_173_179 (let* ((_t1_183_186 _vars_10) (_t2_183_189 (let* ((_t1_193_196 _tailcalls_13) (_t2_193_199 (let* ((_t1_203_206 _nontailcalls_13) (_t2_203_209 (let* ((_t1_213_216 _size_13) (_t2_213_219 (cons #f '()))) (let () (cons _t1_213_216 _t2_213_219))))) (let () (cons _t1_203_206 _t2_203_209))))) (let () (cons _t1_193_196 _t2_193_199))))) (let () (cons _t1_183_186 _t2_183_189))))) (let () (cons _t1_173_176 _t2_173_179))))) (let () (cons _t1_163_166 _t2_163_169))) _result_8))))))) (_add-vertex!_9 #t (make-lambda '() '() '() '() '() '() '() _exp_3) '() '()) _result_8)))))) (_callgraph_2 _exp_1))))) 'callgraph))
(let () (begin (set! view-callgraph (lambda (_g_1) (let ((_view-callgraph_2 0)) (begin (set! _view-callgraph_2 (lambda (_g_3) (let () (let ((_loop_9_11_14 (unspecified))) (begin (set! _loop_9_11_14 (lambda (_y1_4_5_15) (if (null? _y1_4_5_15) (if #f #f (unspecified)) (begin (begin #t (let ((_entry_19 (let ((_x_26_29 _y1_4_5_15)) (begin (_check! (pair? _x_26_29) 0 _x_26_29) (car:pair _x_26_29))))) (let ((_name_22 (callgraphnode_name _entry_19)) (_exp_22 (callgraphnode_code _entry_19)) (_vars_22 (callgraphnode_vars _entry_19)) (_tail_22 (callgraphnode_tailcalls _entry_19)) (_nt_22 (callgraphnode_nontailcalls _entry_19)) (_size_22 (callgraphnode_size _entry_19))) (begin (if (symbol? _name_22) (write _name_22) (if _name_22 (display "TOP LEVEL EXPRESSION") (display "ESCAPING LAMBDA EXPRESSION"))) (display ":") (newline) (display "Size: ") (write _size_22) (newline) (display "Tail calls:     ") (write _tail_22) (newline) (display "Non-tail calls: ") (write _nt_22) (newline) (newline))))) (_loop_9_11_14 (let ((_x_30_33 _y1_4_5_15)) (begin (_check! (pair? _x_30_33) 1 _x_30_33) (cdr:pair _x_30_33)))))))) (_loop_9_11_14 _g_3)))))) (_view-callgraph_2 _g_1))))) 'view-callgraph))
(let () (begin (set! *tail-threshold* 10) '*tail-threshold*))
(let () (begin (set! *nontail-threshold* 20) '*nontail-threshold*))
(let () (begin (set! *multiplier* 300) '*multiplier*))
(let () (begin (set! inline-using-callgraph! (lambda (_g_1) (let ((_inline-using-callgraph!_2 0)) (begin (set! _inline-using-callgraph!_2 (lambda (_g_3) (let ((_known_6 (make-hashtable)) (_category2_6 '()) (_category3_6 '())) (begin (let () (let ((_loop_12_14_17 (unspecified))) (begin (set! _loop_12_14_17 (lambda (_y1_7_8_18) (if (null? _y1_7_8_18) (if #f #f (unspecified)) (begin (begin #t (let ((_node_22 (let ((_x_28_31 _y1_7_8_18)) (begin (_check! (pair? _x_28_31) 0 _x_28_31) (car:pair _x_28_31))))) (let ((_name_25 (callgraphnode_name _node_22)) (_tcalls_25 (callgraphnode_tailcalls _node_22)) (_ncalls_25 (callgraphnode_nontailcalls _node_22))) (begin (if (symbol? _name_25) (hashtable-put! _known_6 _name_25 _node_22) (unspecified)) (if (if (null? _tcalls_25) (null? _ncalls_25) #f) (if (< (callgraphnode_size _node_22) *nontail-threshold*) (callgraphnode_info! _node_22 #t) (unspecified)) (if (symbol? _name_25) (set! _category2_6 (cons _node_22 _category2_6)) (set! _category3_6 (cons _node_22 _category3_6)))))))) (_loop_12_14_17 (let ((_x_32_35 _y1_7_8_18)) (begin (_check! (pair? _x_32_35) 1 _x_32_35) (cdr:pair _x_32_35)))))))) (_loop_12_14_17 _g_3)))) (set! _category2_6 (twobit-sort (lambda (_x_36 _y_36) (< (callgraphnode_size _x_36) (callgraphnode_size _y_36))) _category2_6)) (let () (let ((_loop_42_44_47 (unspecified))) (begin (set! _loop_42_44_47 (lambda (_y1_37_38_48) (if (null? _y1_37_38_48) (if #f #f (unspecified)) (begin (begin #t (let ((_node_52 (let ((_x_53_56 _y1_37_38_48)) (begin (_check! (pair? _x_53_56) 0 _x_53_56) (car:pair _x_53_56))))) (inline-node! _node_52 _known_6))) (_loop_42_44_47 (let ((_x_57_60 _y1_37_38_48)) (begin (_check! (pair? _x_57_60) 1 _x_57_60) (cdr:pair _x_57_60)))))))) (_loop_42_44_47 _category2_6)))) (let () (let ((_loop_66_68_71 (unspecified))) (begin (set! _loop_66_68_71 (lambda (_y1_61_62_72) (if (null? _y1_61_62_72) (if #f #f (unspecified)) (begin (begin #t (let ((_node_76 (let ((_x_77_80 _y1_61_62_72)) (begin (_check! (pair? _x_77_80) 0 _x_77_80) (car:pair _x_77_80))))) (inline-node! _node_76 _known_6))) (_loop_66_68_71 (let ((_x_81_84 _y1_61_62_72)) (begin (_check! (pair? _x_81_84) 1 _x_81_84) (cdr:pair _x_81_84)))))))) (_loop_66_68_71 _category3_6)))) (hashtable-for-each (lambda (_name_85 _node_85) (callgraphnode_info! _node_85 #f)) _known_6))))) (_inline-using-callgraph!_2 _g_1))))) 'inline-using-callgraph!))
(let () (begin (set! inline-node! (lambda (_node_1 _known_1) (let ((_inline-node!_2 0)) (begin (set! _inline-node!_2 (lambda (_node_3 _known_3) (let* ((_debugging?_6 #f) (_name_9 (callgraphnode_name _node_3)) (_exp_12 (callgraphnode_code _node_3)) (_size0_15 (callgraphnode_size _node_3)) (_budget_18 (quotient (* (- *multiplier* 100) _size0_15) 100)) (_tail-threshold_21 *tail-threshold*) (_nontail-threshold_24 *nontail-threshold*)) (let () (let ((_inline_28 (unspecified))) (begin (set! _inline_28 (lambda (_exp_29 _tail?_29 _budget_29) (if (> _budget_29 0) (let ((_temp_31_34 (let ((_x_122_125 _exp_29)) (begin (_check! (pair? _x_122_125) 0 _x_122_125) (car:pair _x_122_125))))) (if (memv _temp_31_34 ''lambda) _budget_29 (if (memv _temp_31_34 '(set!)) (_inline_28 (assignment_rhs _exp_29) #f _budget_29) (if (memv _temp_31_34 '(if)) (let* ((_budget_40 (_inline_28 (if_test _exp_29) #f _budget_29)) (_budget_43 (_inline_28 (if_then _exp_29) _tail?_29 _budget_40)) (_budget_46 (_inline_28 (if_else _exp_29) _tail?_29 _budget_43))) (let () _budget_46)) (if (memv _temp_31_34 '(begin)) (if (variable? _exp_29) _budget_29 (let () (let ((_loop_51_54_57 (unspecified))) (begin (set! _loop_51_54_57 (lambda (_exprs_58 _budget_58) (if (null? (let ((_x_60_63 _exprs_58)) (begin (_check! (pair? _x_60_63) 1 _x_60_63) (cdr:pair _x_60_63)))) (_inline_28 (let ((_x_64_67 _exprs_58)) (begin (_check! (pair? _x_64_67) 0 _x_64_67) (car:pair _x_64_67))) _tail?_29 _budget_58) (begin #t (_loop_51_54_57 (let ((_x_69_72 _exprs_58)) (begin (_check! (pair? _x_69_72) 1 _x_69_72) (cdr:pair _x_69_72))) (_inline_28 (let ((_x_73_76 _exprs_58)) (begin (_check! (pair? _x_73_76) 0 _x_73_76) (car:pair _x_73_76))) #f _budget_58)))))) (_loop_51_54_57 (begin_exprs _exp_29) _budget_29))))) (let* ((_budget_80 (let () (let ((_loop_104_107_110 (unspecified))) (begin (set! _loop_104_107_110 (lambda (_exprs_111 _budget_111) (if (null? _exprs_111) _budget_111 (begin #t (_loop_104_107_110 (let ((_x_114_117 _exprs_111)) (begin (_check! (pair? _x_114_117) 1 _x_114_117) (cdr:pair _x_114_117))) (_inline_28 (let ((_x_118_121 _exprs_111)) (begin (_check! (pair? _x_118_121) 0 _x_118_121) (car:pair _x_118_121))) #f _budget_111)))))) (_loop_104_107_110 (call_args _exp_29) _budget_29))))) (_proc_83 (call_proc _exp_29))) (if (variable? _proc_83) (let* ((_procname_87 (variable_name _proc_83)) (_procnode_90 (hashtable-get _known_3 _procname_87))) (let () (if _procnode_90 (let ((_size_96 (callgraphnode_size _procnode_90)) (_info_96 (callgraphnode_info _procnode_90))) (if (if _info_96 (if (<= _size_96 _budget_80) (<= _size_96 (if _tail?_29 _tail-threshold_21 _nontail-threshold_24)) #f) #f) (begin (if _debugging?_6 (begin (display "    Inlining ") (write (variable_name _proc_83)) (newline)) (unspecified)) (call_proc-set! _exp_29 (copy-exp (callgraphnode_code _procnode_90))) (callgraphnode_size! _node_3 (+ (callgraphnode_size _node_3) _size_96)) (- _budget_80 _size_96)) (begin (if (if #f _debugging?_6 #f) (begin (display "    Declining to inline ") (write (variable_name _proc_83)) (newline)) (unspecified)) _budget_80))) _budget_80))) (if (lambda? _proc_83) (_inline_28 (lambda_body _proc_83) _tail?_29 _budget_80) (_inline_28 _proc_83 #f _budget_80))))))))) -1))) (if (if #f _debugging?_6 #f) (begin (display "Processing ") (write _name_9) (newline)) (unspecified)) (let ((_budget_130 (_inline_28 (if (lambda? _exp_12) (lambda_body _exp_12) _exp_12) #t _budget_18))) (begin (if (if (< _budget_130 0) _debugging?_6 #f) (begin (display "Ran out of inlining budget for ") (write (callgraphnode_name _node_3)) (newline)) (unspecified)) (if (<= (callgraphnode_size _node_3) _nontail-threshold_24) (callgraphnode_info! _node_3 #t) (unspecified)) #f)))))))) (_inline-node!_2 _node_1 _known_1))))) 'inline-node!))
(let () (begin (set! test-inlining (lambda (_test0_1) (let ((_test-inlining_2 0)) (begin (set! _test-inlining_2 (lambda (_test0_3) (let ((_g0_4 (unspecified)) (_exp0_4 (unspecified))) (begin (set! _g0_4 (begin (display "Computing call graph___") (newline) (callgraph _exp0_4))) (set! _exp0_4 (begin (display "Compiling___") (newline) (pass2 (pass1 _test0_3)))) (display "Inlining___") (newline) (inline-using-callgraph! _g0_4) (pretty-print (make-readable (copy-exp _exp0_4))))))) (_test-inlining_2 _test0_1))))) 'test-inlining))
(let () (begin (set! *constant-propagation-limit* 5) '*constant-propagation-limit*))
(let () (begin (set! constant-propagation (lambda (_exp_1) (let ((_constant-propagation_2 0)) (begin (set! _constant-propagation_2 (lambda (_exp_3) (let ((_constant-propagation_4 (unspecified))) (begin (set! _constant-propagation_4 (lambda (_exp_5 _i_5) (if (< _i_5 *constant-propagation-limit*) (let* ((_g_8 (callgraph _exp_5)) (_l_11 (callgraphnode_code (let ((_x_21_24 _g_8)) (begin (_check! (pair? _x_21_24) 0 _x_21_24) (car:pair _x_21_24))))) (_variables_14 (constant-propagation-using-callgraph _g_8)) (_changed?_17 (constant-folding! _l_11 _variables_14))) (let () (if _changed?_17 (_constant-propagation_4 (lambda_body _l_11) (+ _i_5 1)) (lambda_body _l_11)))) (unspecified)))) (_constant-propagation_4 _exp_3 0))))) (_constant-propagation_2 _exp_1))))) 'constant-propagation))
(let () (begin (set! constant-propagation-using-callgraph (lambda (_g_1) (let ((_constant-propagation-using-callgraph_2 0)) (begin (set! _constant-propagation-using-callgraph_2 (lambda (_g_3) (let ((_debugging?_6 #f) (_folding?_6 (integrate-usual-procedures)) (_known_6 (make-hashtable)) (_variables_6 (make-hashtable)) (_counter_6 0)) (let ((_collect!_7 (unspecified)) (_combine-symbolic_7 (unspecified)) (_aeval1-error_7 (unspecified)) (_aeval1_7 (unspecified)) (_aeval_7 (unspecified)) (_join_7 (unspecified))) (begin (set! _collect!_7 (lambda (_exp_8) (let ((_temp_9_12 (let ((_x_148_151 _exp_8)) (begin (_check! (pair? _x_148_151) 0 _x_148_151) (car:pair _x_148_151))))) (if (memv _temp_9_12 '(quote)) (cons _exp_8 '()) (if (memv _temp_9_12 '(lambda)) #t (if (memv _temp_9_12 '(set!)) (begin (_collect!_7 (assignment_rhs _exp_8)) '()) (if (memv _temp_9_12 '(begin)) (if (variable? _exp_8) (cons _exp_8 '()) (let () (let ((_loop_19_21_24 (unspecified))) (begin (set! _loop_19_21_24 (lambda (_exprs_25) (if (null? (let ((_x_27_30 _exprs_25)) (begin (_check! (pair? _x_27_30) 1 _x_27_30) (cdr:pair _x_27_30)))) (_collect!_7 (let ((_x_31_34 _exprs_25)) (begin (_check! (pair? _x_31_34) 0 _x_31_34) (car:pair _x_31_34)))) (begin (begin #t (_collect!_7 (let ((_x_36_39 _exprs_25)) (begin (_check! (pair? _x_36_39) 0 _x_36_39) (car:pair _x_36_39))))) (_loop_19_21_24 (let ((_x_40_43 _exprs_25)) (begin (_check! (pair? _x_40_43) 1 _x_40_43) (cdr:pair _x_40_43)))))))) (_loop_19_21_24 (begin_exprs _exp_8)))))) (if (memv _temp_9_12 '(if)) (begin (_collect!_7 (if_test _exp_8)) (_collect!_7 (if_then _exp_8)) (_collect!_7 (if_else _exp_8)) #t) (let () (let ((_loop_46_49_52 (unspecified))) (begin (set! _loop_46_49_52 (lambda (_exprs_53 _reps_53) (if (null? _exprs_53) (let* ((_proc_57 (call_proc _exp_8)) (_put-args!_59 (unspecified))) (begin (set! _put-args!_59 (lambda (_args_60 _reps_60) (if (pair? _args_60) (let ((_v_64 (let ((_x_73_76 _args_60)) (begin (_check! (pair? _x_73_76) 0 _x_73_76) (car:pair _x_73_76)))) (_rep_64 (let ((_x_77_80 _reps_60)) (begin (_check! (pair? _x_77_80) 0 _x_77_80) (car:pair _x_77_80))))) (begin (hashtable-put! _variables_6 _v_64 _rep_64) (_put-args!_59 (let ((_x_65_68 _args_60)) (begin (_check! (pair? _x_65_68) 1 _x_65_68) (cdr:pair _x_65_68))) (let ((_x_69_72 _reps_60)) (begin (_check! (pair? _x_69_72) 1 _x_69_72) (cdr:pair _x_69_72)))))) (if (symbol? _args_60) (hashtable-put! _variables_6 _args_60 #t) #f)))) (if (variable? _proc_57) (let* ((_procname_85 (variable_name _proc_57)) (_procnode_88 (hashtable-get _known_6 _procname_85)) (_entry_91 (if _folding?_6 (constant-folding-entry _procname_85) #f))) (let () (if _procnode_88 (begin (let () (let ((_loop_102_105_108 (unspecified))) (begin (set! _loop_102_105_108 (lambda (_y1_96_98_109 _y1_96_97_109) (if (let ((_temp_111_114 (null? _y1_96_98_109))) (if _temp_111_114 _temp_111_114 (null? _y1_96_97_109))) (if #f #f (unspecified)) (begin (begin #t (let ((_v_117 (let ((_x_118_121 _y1_96_98_109)) (begin (_check! (pair? _x_118_121) 0 _x_118_121) (car:pair _x_118_121)))) (_rep_117 (let ((_x_122_125 _y1_96_97_109)) (begin (_check! (pair? _x_122_125) 0 _x_122_125) (car:pair _x_122_125))))) (hashtable-put! _variables_6 _v_117 (_combine-symbolic_7 _rep_117 (hashtable-get _variables_6 _v_117))))) (_loop_102_105_108 (let ((_x_126_129 _y1_96_98_109)) (begin (_check! (pair? _x_126_129) 1 _x_126_129) (cdr:pair _x_126_129))) (let ((_x_130_133 _y1_96_97_109)) (begin (_check! (pair? _x_130_133) 1 _x_130_133) (cdr:pair _x_130_133)))))))) (_loop_102_105_108 (lambda_args (callgraphnode_code _procnode_88)) _reps_53)))) (cons (make-variable _procname_85) '())) (if _entry_91 #t #t)))) (if (lambda? _proc_57) (begin (_put-args!_59 (lambda_args _proc_57) _reps_53) (_collect!_7 (lambda_body _proc_57))) (begin (_collect!_7 _proc_57) #t))))) (begin #t (_loop_46_49_52 (let ((_x_140_143 _exprs_53)) (begin (_check! (pair? _x_140_143) 1 _x_140_143) (cdr:pair _x_140_143))) (cons (_collect!_7 (let ((_x_144_147 _exprs_53)) (begin (_check! (pair? _x_144_147) 0 _x_144_147) (car:pair _x_144_147)))) _reps_53)))))) (_loop_46_49_52 (reverse (call_args _exp_8)) '())))))))))))) (set! _combine-symbolic_7 (lambda (_rep1_152 _rep2_152) (if (eq? _rep1_152 #t) #t (if (eq? _rep2_152 #t) #t (append _rep1_152 _rep2_152))))) (set! _aeval1-error_7 (lambda () (error "Compiler bug: constant propagation (aeval1)"))) (set! _aeval1_7 (lambda (_exp_157 _env_157) (let ((_temp_158_161 (let ((_x_238_241 _exp_157)) (begin (_check! (pair? _x_238_241) 0 _x_238_241) (car:pair _x_238_241))))) (if (memv _temp_158_161 '(quote)) _exp_157 (if (memv _temp_158_161 '(lambda)) #t (if (memv _temp_158_161 '(set!)) #f (if (memv _temp_158_161 '(begin)) (if (variable? _exp_157) (let* ((_name_168 (variable_name _exp_157)) (_i_171 (hashtable-get _variables_6 _name_168))) (let () (if _i_171 (let ((_v_175_178 _env_157) (_i_175_178 _i_171)) (begin (_check! (fixnum? _i_175_178) 40 _v_175_178 _i_175_178) (_check! (vector? _v_175_178) 40 _v_175_178 _i_175_178) (_check! (<:fix:fix _i_175_178 (vector-length:vec _v_175_178)) 40 _v_175_178 _i_175_178) (_check! (>=:fix:fix _i_175_178 0) 40 _v_175_178 _i_175_178) (vector-ref:trusted _v_175_178 _i_175_178))) #t))) (_aeval1-error_7)) (if (memv _temp_158_161 '(if)) (let* ((_val0_182 (_aeval1_7 (if_test _exp_157) _env_157)) (_val1_185 (_aeval1_7 (if_then _exp_157) _env_157)) (_val2_188 (_aeval1_7 (if_else _exp_157) _env_157))) (let () (if (eq? _val0_182 #t) (_join_7 _val1_185 _val2_188) (if (pair? _val0_182) (if (constant_value _val0_182) _val1_185 _val2_188) #f)))) (let () (let ((_loop_196_199_202 (unspecified))) (begin (set! _loop_196_199_202 (lambda (_exprs_203 _vals_203) (if (null? _exprs_203) (let ((_proc_207 (call_proc _exp_157))) (if (variable? _proc_207) (let* ((_procname_211 (variable_name _proc_207)) (_procnode_214 (hashtable-get _known_6 _procname_211)) (_entry_217 (if _folding?_6 (constant-folding-entry _procname_211) #f))) (let () (if _procnode_214 (let ((_v_222_225 _env_157) (_i_222_225 (hashtable-get _variables_6 _procname_211))) (begin (_check! (fixnum? _i_222_225) 40 _v_222_225 _i_222_225) (_check! (vector? _v_222_225) 40 _v_222_225 _i_222_225) (_check! (<:fix:fix _i_222_225 (vector-length:vec _v_222_225)) 40 _v_222_225 _i_222_225) (_check! (>=:fix:fix _i_222_225 0) 40 _v_222_225 _i_222_225) (vector-ref:trusted _v_222_225 _i_222_225))) (if _entry_217 #t (_aeval1-error_7))))) (_aeval1-error_7))) (begin #t (_loop_196_199_202 (let ((_x_230_233 _exprs_203)) (begin (_check! (pair? _x_230_233) 1 _x_230_233) (cdr:pair _x_230_233))) (cons (_aeval1_7 (let ((_x_234_237 _exprs_203)) (begin (_check! (pair? _x_234_237) 0 _x_234_237) (car:pair _x_234_237))) _env_157) _vals_203)))))) (_loop_196_199_202 (reverse (call_args _exp_157)) '())))))))))))) (set! _aeval_7 (lambda (_rep_242 _env_242) (if (eq? _rep_242 #t) #t (if (null? _rep_242) #f (if (null? (let ((_x_246_249 _rep_242)) (begin (_check! (pair? _x_246_249) 1 _x_246_249) (cdr:pair _x_246_249)))) (_aeval1_7 (let ((_x_250_253 _rep_242)) (begin (_check! (pair? _x_250_253) 0 _x_250_253) (car:pair _x_250_253))) _env_242) (_join_7 (_aeval1_7 (let ((_x_255_258 _rep_242)) (begin (_check! (pair? _x_255_258) 0 _x_255_258) (car:pair _x_255_258))) _env_242) (_aeval_7 (let ((_x_259_262 _rep_242)) (begin (_check! (pair? _x_259_262) 1 _x_259_262) (cdr:pair _x_259_262))) _env_242))))))) (set! _join_7 (lambda (_x_263 _y_263) (if (boolean? _x_263) (if _x_263 #t _y_263) (if (boolean? _y_263) (_join_7 _y_263 _x_263) (if (equal? _x_263 _y_263) _x_263 #t))))) (let () (let ((_loop_273_275_278 (unspecified))) (begin (set! _loop_273_275_278 (lambda (_y1_268_269_279) (if (null? _y1_268_269_279) (if #f #f (unspecified)) (begin (begin #t (let* ((_node_283 (let ((_x_323_326 _y1_268_269_279)) (begin (_check! (pair? _x_323_326) 0 _x_323_326) (car:pair _x_323_326)))) (_name_286 (callgraphnode_name _node_283)) (_code_289 (callgraphnode_code _node_283)) (_known?_292 (symbol? _name_286)) (_rep_295 (if _known?_292 '() #t))) (let () (begin (if _known?_292 (hashtable-put! _known_6 _name_286 _node_283) (unspecified)) (if (lambda? _code_289) (let () (let ((_loop_304_306_309 (unspecified))) (begin (set! _loop_304_306_309 (lambda (_y1_299_300_310) (if (null? _y1_299_300_310) (if #f #f (unspecified)) (begin (begin #t (let ((_var_314 (let ((_x_315_318 _y1_299_300_310)) (begin (_check! (pair? _x_315_318) 0 _x_315_318) (car:pair _x_315_318))))) (hashtable-put! _variables_6 _var_314 _rep_295))) (_loop_304_306_309 (let ((_x_319_322 _y1_299_300_310)) (begin (_check! (pair? _x_319_322) 1 _x_319_322) (cdr:pair _x_319_322)))))))) (_loop_304_306_309 (make-null-terminated (lambda_args _code_289)))))) (unspecified)))))) (_loop_273_275_278 (let ((_x_327_330 _y1_268_269_279)) (begin (_check! (pair? _x_327_330) 1 _x_327_330) (cdr:pair _x_327_330)))))))) (_loop_273_275_278 _g_3)))) (let () (let ((_loop_336_338_341 (unspecified))) (begin (set! _loop_336_338_341 (lambda (_y1_331_332_342) (if (null? _y1_331_332_342) (if #f #f (unspecified)) (begin (begin #t (let ((_node_346 (let ((_x_352_355 _y1_331_332_342)) (begin (_check! (pair? _x_352_355) 0 _x_352_355) (car:pair _x_352_355))))) (let ((_name_349 (callgraphnode_name _node_346)) (_code_349 (callgraphnode_code _node_346))) (if (symbol? _name_349) (hashtable-put! _variables_6 _name_349 (_collect!_7 (lambda_body _code_349))) (_collect!_7 (lambda_body _code_349)))))) (_loop_336_338_341 (let ((_x_356_359 _y1_331_332_342)) (begin (_check! (pair? _x_356_359) 1 _x_356_359) (cdr:pair _x_356_359)))))))) (_loop_336_338_341 _g_3)))) (if (if #f _debugging?_6 #f) (begin (hashtable-for-each (lambda (_v_362 _rep_362) (begin (write _v_362) (display ": ") (write _rep_362) (newline))) _variables_6) (display "----------------------------------------") (newline)) (unspecified)) (let* ((_n_365 (hashtable-size _variables_6)) (_vars_368 (hashtable-map (lambda (_v_482 _rep_482) _v_482) _variables_6)) (_reps_371 (let () (let ((_loop_462_465_468 (unspecified))) (begin (set! _loop_462_465_468 (lambda (_y1_457_458_469 _results_457_461_469) (if (null? _y1_457_458_469) (reverse _results_457_461_469) (begin #t (_loop_462_465_468 (let ((_x_473_476 _y1_457_458_469)) (begin (_check! (pair? _x_473_476) 1 _x_473_476) (cdr:pair _x_473_476))) (cons (let ((_v_477 (let ((_x_478_481 _y1_457_458_469)) (begin (_check! (pair? _x_478_481) 0 _x_478_481) (car:pair _x_478_481))))) (hashtable-get _variables_6 _v_477)) _results_457_461_469)))))) (_loop_462_465_468 _vars_368 '()))))) (_init_374 (make-vector _n_365 #f)) (_next_377 (make-vector _n_365 '()))) (let () (begin (let () (let ((_loop_382_386_389 (unspecified))) (begin (set! _loop_382_386_389 (lambda (_i_390 _vars_390 _reps_390) (if (= _i_390 _n_365) (if #f #f (unspecified)) (begin (begin #t (hashtable-put! _variables_6 (let ((_x_393_396 _vars_390)) (begin (_check! (pair? _x_393_396) 0 _x_393_396) (car:pair _x_393_396))) _i_390) (let ((_v_397_400 _next_377) (_i_397_400 _i_390) (_x_397_400 (let ((_rep_403 (let ((_x_405_408 _reps_390)) (begin (_check! (pair? _x_405_408) 0 _x_405_408) (car:pair _x_405_408))))) (lambda (_env_404) (_aeval_7 _rep_403 _env_404))))) (begin (_check! (fixnum? _i_397_400) 41 _v_397_400 _i_397_400 _x_397_400) (_check! (vector? _v_397_400) 41 _v_397_400 _i_397_400 _x_397_400) (_check! (<:fix:fix _i_397_400 (vector-length:vec _v_397_400)) 41 _v_397_400 _i_397_400 _x_397_400) (_check! (>=:fix:fix _i_397_400 0) 41 _v_397_400 _i_397_400 _x_397_400) (vector-set!:trusted _v_397_400 _i_397_400 _x_397_400)))) (_loop_382_386_389 (+ _i_390 1) (let ((_x_409_412 _vars_390)) (begin (_check! (pair? _x_409_412) 1 _x_409_412) (cdr:pair _x_409_412))) (let ((_x_413_416 _reps_390)) (begin (_check! (pair? _x_413_416) 1 _x_413_416) (cdr:pair _x_413_416)))))))) (_loop_382_386_389 0 _vars_368 _reps_371)))) (compute-fixedpoint _init_374 _next_377 equal?) (let () (let ((_loop_422_424_427 (unspecified))) (begin (set! _loop_422_424_427 (lambda (_y1_417_418_428) (if (null? _y1_417_418_428) (if #f #f (unspecified)) (begin (begin #t (let* ((_v_432 (let ((_x_448_451 _y1_417_418_428)) (begin (_check! (pair? _x_448_451) 0 _x_448_451) (car:pair _x_448_451)))) (_i_435 (hashtable-get _variables_6 _v_432)) (_aval_438 (let ((_v_444_447 _init_374) (_i_444_447 _i_435)) (begin (_check! (fixnum? _i_444_447) 40 _v_444_447 _i_444_447) (_check! (vector? _v_444_447) 40 _v_444_447 _i_444_447) (_check! (<:fix:fix _i_444_447 (vector-length:vec _v_444_447)) 40 _v_444_447 _i_444_447) (_check! (>=:fix:fix _i_444_447 0) 40 _v_444_447 _i_444_447) (vector-ref:trusted _v_444_447 _i_444_447))))) (let () (begin (hashtable-put! _variables_6 _v_432 _aval_438) (if (if _debugging?_6 (not (eq? _aval_438 #t)) #f) (begin (write _v_432) (display ": ") (write _aval_438) (newline)) (unspecified)))))) (_loop_422_424_427 (let ((_x_452_455 _y1_417_418_428)) (begin (_check! (pair? _x_452_455) 1 _x_452_455) (cdr:pair _x_452_455)))))))) (_loop_422_424_427 _vars_368)))) _variables_6)))))))) (_constant-propagation-using-callgraph_2 _g_1))))) 'constant-propagation-using-callgraph))
(let () (begin (set! constant-folding! (lambda (_l_1 _variables_1) (let ((_constant-folding!_2 0)) (begin (set! _constant-folding!_2 (lambda (_l_3 _variables_3) (let ((_debugging?_6 #f) (_msg1_6 "    Propagating constant value for ") (_msg2_6 "    Folding: ") (_msg3_6 " ==> ") (_folding?_6 (integrate-usual-procedures)) (_changed?_6 #f)) (let ((_fold!_7 (unspecified)) (_delete-ignored-args!_7 (unspecified))) (begin (set! _fold!_7 (lambda (_exp_8) (let ((_temp_9_12 (let ((_x_403_406 _exp_8)) (begin (_check! (pair? _x_403_406) 0 _x_403_406) (car:pair _x_403_406))))) (if (memv _temp_9_12 '(quote)) _exp_8 (if (memv _temp_9_12 '(lambda)) (let ((_rinfo_17 (lambda_r _exp_8)) (_known_17 (let () (let ((_loop_166_169_172 (unspecified))) (begin (set! _loop_166_169_172 (lambda (_y1_161_162_173 _results_161_165_173) (if (null? _y1_161_162_173) (reverse _results_161_165_173) (begin #t (_loop_166_169_172 (let ((_x_177_180 _y1_161_162_173)) (begin (_check! (pair? _x_177_180) 1 _x_177_180) (cdr:pair _x_177_180))) (cons (def_lhs (let ((_x_181_184 _y1_161_162_173)) (begin (_check! (pair? _x_181_184) 0 _x_181_184) (car:pair _x_181_184)))) _results_161_165_173)))))) (_loop_166_169_172 (lambda_defs _exp_8) '())))))) (begin (let () (let ((_loop_23_25_28 (unspecified))) (begin (set! _loop_23_25_28 (lambda (_y1_18_19_29) (if (null? _y1_18_19_29) (if #f #f (unspecified)) (begin (begin #t (let* ((_entry_33 (let ((_x_102_105 _y1_18_19_29)) (begin (_check! (pair? _x_102_105) 0 _x_102_105) (car:pair _x_102_105)))) (_v_36 (r-entry_name _entry_33)) (_aval_39 (hashtable-fetch _variables_3 _v_36 #t))) (let () (if (if (pair? _aval_39) (not (memq _v_36 _known_17)) #f) (let ((_x_47 (constant_value _aval_39))) (if (let ((_temp_48_51 (boolean? _x_47))) (if _temp_48_51 _temp_48_51 (let ((_temp_52_55 (null? _x_47))) (if _temp_52_55 _temp_52_55 (let ((_temp_56_59 (symbol? _x_47))) (if _temp_56_59 _temp_56_59 (let ((_temp_60_63 (number? _x_47))) (if _temp_60_63 _temp_60_63 (let ((_temp_64_67 (char? _x_47))) (if _temp_64_67 _temp_64_67 (if (vector? _x_47) (zero? (let ((_v_71_74 _x_47)) (begin (_check! (vector? _v_71_74) 42 _v_71_74) (vector-length:vec _v_71_74)))) #f))))))))))) (let ((_refs_77 (r-entry_references _entry_33))) (begin (let () (let ((_loop_83_85_88 (unspecified))) (begin (set! _loop_83_85_88 (lambda (_y1_78_79_89) (if (null? _y1_78_79_89) (if #f #f (unspecified)) (begin (begin #t (let ((_ref_93 (let ((_x_94_97 _y1_78_79_89)) (begin (_check! (pair? _x_94_97) 0 _x_94_97) (car:pair _x_94_97))))) (variable-set! _ref_93 _aval_39))) (_loop_83_85_88 (let ((_x_98_101 _y1_78_79_89)) (begin (_check! (pair? _x_98_101) 1 _x_98_101) (cdr:pair _x_98_101)))))))) (_loop_83_85_88 _refs_77)))) (lambda_r-set! _exp_8 (remq _entry_33 (lambda_r _exp_8))) (flag-as-ignored _v_36 _exp_8) (if _debugging?_6 (begin (display _msg1_6) (write _v_36) (display ": ") (write _aval_39) (newline)) (unspecified)))) (unspecified))) (unspecified))))) (_loop_23_25_28 (let ((_x_106_109 _y1_18_19_29)) (begin (_check! (pair? _x_106_109) 1 _x_106_109) (cdr:pair _x_106_109)))))))) (_loop_23_25_28 _rinfo_17)))) (let () (let ((_loop_115_117_120 (unspecified))) (begin (set! _loop_115_117_120 (lambda (_y1_110_111_121) (if (null? _y1_110_111_121) (if #f #f (unspecified)) (begin (begin #t (let* ((_def_125 (let ((_x_153_156 _y1_110_111_121)) (begin (_check! (pair? _x_153_156) 0 _x_153_156) (car:pair _x_153_156)))) (_name_128 (def_lhs _def_125)) (_rhs_131 (def_rhs _def_125)) (_entry_134 (r-lookup _rinfo_17 _name_128)) (_calls_137 (r-entry_calls _entry_134))) (let () (if (null? _calls_137) (begin (lambda_defs-set! _exp_8 (remq _def_125 (lambda_defs _exp_8))) (lambda_r-set! _exp_8 (remq _entry_134 (lambda_r _exp_8)))) (let* ((_formals0_143 (append (lambda_args _rhs_131) '())) (_l_146 (_fold!_7 _rhs_131)) (_formals1_149 (lambda_args _l_146))) (let () (if (not (equal? _formals0_143 _formals1_149)) (_delete-ignored-args!_7 _l_146 _formals0_143 _calls_137) (unspecified)))))))) (_loop_115_117_120 (let ((_x_157_160 _y1_110_111_121)) (begin (_check! (pair? _x_157_160) 1 _x_157_160) (cdr:pair _x_157_160)))))))) (_loop_115_117_120 (lambda_defs _exp_8))))) (lambda_body-set! _exp_8 (_fold!_7 (lambda_body _exp_8))) _exp_8)) (if (memv _temp_9_12 '(set!)) (begin (assignment_rhs-set! _exp_8 (_fold!_7 (assignment_rhs _exp_8))) _exp_8) (if (memv _temp_9_12 '(begin)) (if (variable? _exp_8) _exp_8 (post-simplify-begin (make-begin (let () (let ((_loop_192_195_198 (unspecified))) (begin (set! _loop_192_195_198 (lambda (_y1_187_188_199 _results_187_191_199) (if (null? _y1_187_188_199) (reverse _results_187_191_199) (begin #t (_loop_192_195_198 (let ((_x_203_206 _y1_187_188_199)) (begin (_check! (pair? _x_203_206) 1 _x_203_206) (cdr:pair _x_203_206))) (cons (_fold!_7 (let ((_x_207_210 _y1_187_188_199)) (begin (_check! (pair? _x_207_210) 0 _x_207_210) (car:pair _x_207_210)))) _results_187_191_199)))))) (_loop_192_195_198 (begin_exprs _exp_8) '()))))) (make-notepad #f))) (if (memv _temp_9_12 '(if)) (let ((_exp0_214 (_fold!_7 (if_test _exp_8))) (_exp1_214 (_fold!_7 (if_then _exp_8))) (_exp2_214 (_fold!_7 (if_else _exp_8)))) (if (constant? _exp0_214) (let ((_newexp_217 (if (constant_value _exp0_214) _exp1_214 _exp2_214))) (begin (if _debugging?_6 (begin (display _msg2_6) (write (make-readable _exp_8)) (display _msg3_6) (write (make-readable _newexp_217)) (newline)) (unspecified)) (set! _changed?_6 #t) _newexp_217)) (make-conditional _exp0_214 _exp1_214 _exp2_214))) (let ((_args_221 (let () (let ((_loop_384_387_390 (unspecified))) (begin (set! _loop_384_387_390 (lambda (_y1_379_380_391 _results_379_383_391) (if (null? _y1_379_380_391) (reverse _results_379_383_391) (begin #t (_loop_384_387_390 (let ((_x_395_398 _y1_379_380_391)) (begin (_check! (pair? _x_395_398) 1 _x_395_398) (cdr:pair _x_395_398))) (cons (_fold!_7 (let ((_x_399_402 _y1_379_380_391)) (begin (_check! (pair? _x_399_402) 0 _x_399_402) (car:pair _x_399_402)))) _results_379_383_391)))))) (_loop_384_387_390 (call_args _exp_8) '()))))) (_proc_221 (_fold!_7 (call_proc _exp_8)))) (if (if _folding?_6 (if (variable? _proc_221) (if (every? constant? _args_221) (let ((_entry_229 (constant-folding-entry (variable_name _proc_221)))) (if _entry_229 (let ((_preds_234 (constant-folding-predicates _entry_229))) (if (= (length _args_221) (length _preds_234)) (every? (lambda (_x_237) _x_237) (let () (let ((_loop_244_248_251 (unspecified))) (begin (set! _loop_244_248_251 (lambda (_y1_238_240_252 _y1_238_239_252 _results_238_243_252) (if (let ((_temp_254_257 (null? _y1_238_240_252))) (if _temp_254_257 _temp_254_257 (null? _y1_238_239_252))) (reverse _results_238_243_252) (begin #t (_loop_244_248_251 (let ((_x_260_263 _y1_238_240_252)) (begin (_check! (pair? _x_260_263) 1 _x_260_263) (cdr:pair _x_260_263))) (let ((_x_264_267 _y1_238_239_252)) (begin (_check! (pair? _x_264_267) 1 _x_264_267) (cdr:pair _x_264_267))) (cons (let ((_f_268 (let ((_x_269_272 _y1_238_240_252)) (begin (_check! (pair? _x_269_272) 0 _x_269_272) (car:pair _x_269_272)))) (_v_268 (let ((_x_273_276 _y1_238_239_252)) (begin (_check! (pair? _x_273_276) 0 _x_273_276) (car:pair _x_273_276))))) (_f_268 _v_268)) _results_238_243_252)))))) (_loop_244_248_251 (constant-folding-predicates _entry_229) (let () (let ((_loop_282_285_288 (unspecified))) (begin (set! _loop_282_285_288 (lambda (_y1_277_278_289 _results_277_281_289) (if (null? _y1_277_278_289) (reverse _results_277_281_289) (begin #t (_loop_282_285_288 (let ((_x_293_296 _y1_277_278_289)) (begin (_check! (pair? _x_293_296) 1 _x_293_296) (cdr:pair _x_293_296))) (cons (constant_value (let ((_x_297_300 _y1_277_278_289)) (begin (_check! (pair? _x_297_300) 0 _x_297_300) (car:pair _x_297_300)))) _results_277_281_289)))))) (_loop_282_285_288 _args_221 '())))) '()))))) #f)) #f)) #f) #f) #f) (begin (set! _changed?_6 #t) (let ((_result_303 (make-constant (apply (constant-folding-folder (constant-folding-entry (variable_name _proc_221))) (let () (let ((_loop_309_312_315 (unspecified))) (begin (set! _loop_309_312_315 (lambda (_y1_304_305_316 _results_304_308_316) (if (null? _y1_304_305_316) (reverse _results_304_308_316) (begin #t (_loop_309_312_315 (let ((_x_320_323 _y1_304_305_316)) (begin (_check! (pair? _x_320_323) 1 _x_320_323) (cdr:pair _x_320_323))) (cons (constant_value (let ((_x_324_327 _y1_304_305_316)) (begin (_check! (pair? _x_324_327) 0 _x_324_327) (car:pair _x_324_327)))) _results_304_308_316)))))) (_loop_309_312_315 _args_221 '())))))))) (begin (if _debugging?_6 (begin (display _msg2_6) (write (make-readable (make-call _proc_221 _args_221))) (display _msg3_6) (write _result_303) (newline)) (unspecified)) _result_303))) (if (if (lambda? _proc_221) (list? (lambda_args _proc_221)) #f) (let ((_formals_333 (reverse (lambda_args _proc_221))) (_actuals_333 (reverse _args_221)) (_processed-formals_333 '()) (_processed-actuals_333 '()) (_for-effect_333 '())) (let () (let ((_loop_336 (unspecified))) (begin (set! _loop_336 (lambda (_formals_337 _actuals_337 _processed-formals_337 _processed-actuals_337 _for-effect_337) (if (null? _formals_337) (begin (lambda_args-set! _proc_221 _processed-formals_337) (call_args-set! _exp_8 _processed-actuals_337) (let ((_call_341 (if (if (null? _processed-formals_337) (null? (lambda_defs _proc_221)) #f) (lambda_body _proc_221) _exp_8))) (if (null? _for-effect_337) _call_341 (post-simplify-begin (make-begin (reverse (cons _call_341 _for-effect_337))) (make-notepad #f))))) (if (ignored? (let ((_x_345_348 _formals_337)) (begin (_check! (pair? _x_345_348) 0 _x_345_348) (car:pair _x_345_348)))) (_loop_336 (let ((_x_349_352 _formals_337)) (begin (_check! (pair? _x_349_352) 1 _x_349_352) (cdr:pair _x_349_352))) (let ((_x_353_356 _actuals_337)) (begin (_check! (pair? _x_353_356) 1 _x_353_356) (cdr:pair _x_353_356))) _processed-formals_337 _processed-actuals_337 (cons (let ((_x_357_360 _actuals_337)) (begin (_check! (pair? _x_357_360) 0 _x_357_360) (car:pair _x_357_360))) _for-effect_337)) (_loop_336 (let ((_x_362_365 _formals_337)) (begin (_check! (pair? _x_362_365) 1 _x_362_365) (cdr:pair _x_362_365))) (let ((_x_366_369 _actuals_337)) (begin (_check! (pair? _x_366_369) 1 _x_366_369) (cdr:pair _x_366_369))) (cons (let ((_x_370_373 _formals_337)) (begin (_check! (pair? _x_370_373) 0 _x_370_373) (car:pair _x_370_373))) _processed-formals_337) (cons (let ((_x_374_377 _actuals_337)) (begin (_check! (pair? _x_374_377) 0 _x_374_377) (car:pair _x_374_377))) _processed-actuals_337) _for-effect_337))))) (_loop_336 _formals_333 _actuals_333 _processed-formals_333 _processed-actuals_333 _for-effect_333))))) (begin (call_proc-set! _exp_8 _proc_221) (call_args-set! _exp_8 _args_221) _exp_8)))))))))))) (set! _delete-ignored-args!_7 (lambda (_l_407 _formals0_407 _calls_407) (let ((_formals1_410 (lambda_args _l_407))) (begin (let () (let ((_loop_416_418_421 (unspecified))) (begin (set! _loop_416_418_421 (lambda (_y1_411_412_422) (if (null? _y1_411_412_422) (if #f #f (unspecified)) (begin (begin #t (let ((_call_426 (let ((_x_465_468 _y1_411_412_422)) (begin (_check! (pair? _x_465_468) 0 _x_465_468) (car:pair _x_465_468))))) (let () (let ((_loop_427_432_435 (unspecified))) (begin (set! _loop_427_432_435 (lambda (_formals0_436 _formals1_436 _args_436 _newargs_436) (if (null? _formals0_436) (call_args-set! _call_426 (reverse _newargs_436)) (begin #t (_loop_427_432_435 (let ((_x_439_442 _formals0_436)) (begin (_check! (pair? _x_439_442) 1 _x_439_442) (cdr:pair _x_439_442))) (let ((_x_443_446 _formals1_436)) (begin (_check! (pair? _x_443_446) 1 _x_443_446) (cdr:pair _x_443_446))) (let ((_x_447_450 _args_436)) (begin (_check! (pair? _x_447_450) 1 _x_447_450) (cdr:pair _x_447_450))) (if (if (eq? (let ((_x_452_455 _formals1_436)) (begin (_check! (pair? _x_452_455) 0 _x_452_455) (car:pair _x_452_455))) name:ignored) (pair? (hashtable-get _variables_3 (let ((_x_457_460 _formals0_436)) (begin (_check! (pair? _x_457_460) 0 _x_457_460) (car:pair _x_457_460))))) #f) _newargs_436 (cons (let ((_x_461_464 _args_436)) (begin (_check! (pair? _x_461_464) 0 _x_461_464) (car:pair _x_461_464))) _newargs_436))))))) (_loop_427_432_435 _formals0_407 _formals1_410 (call_args _call_426) '())))))) (_loop_416_418_421 (let ((_x_469_472 _y1_411_412_422)) (begin (_check! (pair? _x_469_472) 1 _x_469_472) (cdr:pair _x_469_472)))))))) (_loop_416_418_421 _calls_407)))) (let () (let ((_loop_473_477_480 (unspecified))) (begin (set! _loop_473_477_480 (lambda (_formals0_481 _formals1_481 _formals2_481) (if (null? _formals0_481) (lambda_args-set! _l_407 (reverse _formals2_481)) (begin #t (_loop_473_477_480 (let ((_x_484_487 _formals0_481)) (begin (_check! (pair? _x_484_487) 1 _x_484_487) (cdr:pair _x_484_487))) (let ((_x_488_491 _formals1_481)) (begin (_check! (pair? _x_488_491) 1 _x_488_491) (cdr:pair _x_488_491))) (if (if (not (eq? (let ((_x_493_496 _formals0_481)) (begin (_check! (pair? _x_493_496) 0 _x_493_496) (car:pair _x_493_496))) (let ((_x_497_500 _formals1_481)) (begin (_check! (pair? _x_497_500) 0 _x_497_500) (car:pair _x_497_500))))) (if (eq? (let ((_x_502_505 _formals1_481)) (begin (_check! (pair? _x_502_505) 0 _x_502_505) (car:pair _x_502_505))) name:ignored) (pair? (hashtable-get _variables_3 (let ((_x_507_510 _formals0_481)) (begin (_check! (pair? _x_507_510) 0 _x_507_510) (car:pair _x_507_510))))) #f) #f) _formals2_481 (cons (let ((_x_511_514 _formals1_481)) (begin (_check! (pair? _x_511_514) 0 _x_511_514) (car:pair _x_511_514))) _formals2_481))))))) (_loop_473_477_480 _formals0_407 _formals1_410 '())))))))) (_fold!_7 _l_3) _changed?_6))))) (_constant-folding!_2 _l_1 _variables_1))))) 'constant-folding!))
(let () (begin (set! a-normal-form-declaration (cons 'anf '())) 'a-normal-form-declaration))
(let () (begin (set! a-normal-form (lambda (_e_1 _ _rest_1) (let ((_complicated?_2 (unspecified)) (_normalize-let_2 (unspecified)) (_normalize-let-error_2 (unspecified)) (_unpermute_2 (unspecified)) (_permute_2 (unspecified)) (_anf-order-of-evaluation_2 (unspecified)) (_anf-call_2 (unspecified)) (_anf-conditional_2 (unspecified)) (_anf-assignment_2 (unspecified)) (_anf-lambda_2 (unspecified)) (_anf-sequential_2 (unspecified)) (_anf-make-let*_2 (unspecified)) (_anf-result_2 (unspecified)) (_anf-bind_2 (unspecified)) (_anf-bind-name_2 (unspecified)) (_anf-bind-dummy_2 (unspecified)) (_anf_2 (unspecified)) (_newtemp_2 (unspecified)) (_a-normal-form_2 (unspecified)) (_temp-counter_2 (unspecified)) (_anf:dummy_2 (unspecified)) (_temp-prefix_2 (unspecified))) (begin (set! _complicated?_2 (lambda (_exp_3) (let* ((_budget_6 10) (_complicated?_7 (unspecified))) (begin (set! _complicated?_7 (lambda (_exp_8) (begin (set! _budget_6 (- _budget_6 1)) (if (zero? _budget_6) #t (let ((_temp_9_12 (let ((_x_34_37 _exp_8)) (begin (_check! (pair? _x_34_37) 0 _x_34_37) (car:pair _x_34_37))))) (if (memv _temp_9_12 '(quote)) #f (if (memv _temp_9_12 '(lambda)) #f (if (memv _temp_9_12 '(set!)) (_complicated?_7 (assignment_rhs _exp_8)) (if (memv _temp_9_12 '(if)) (let ((_temp_17_20 (_complicated?_7 (if_test _exp_8)))) (if _temp_17_20 _temp_17_20 (let ((_temp_21_24 (_complicated?_7 (if_then _exp_8)))) (if _temp_21_24 _temp_21_24 (_complicated?_7 (if_else _exp_8)))))) (if (memv _temp_9_12 '(begin)) (if (variable? _exp_8) #f (some? _complicated?_7 (begin_exprs _exp_8))) (let ((_proc_30 (call_proc _exp_8))) (if (if (variable? _proc_30) (if (integrate-usual-procedures) (prim-entry (variable_name _proc_30)) #f) #f) (some? _complicated?_7 (call_args _exp_8)) #t)))))))))))) (_complicated?_7 _exp_3))))) (set! _normalize-let_2 (lambda (_exp_38) (let ((_l_41 (call_proc _exp_38))) (let () (let ((_formals_47 (lambda_args _l_41)) (_args_47 (call_args _exp_38)) (_newformals_47 '()) (_newargs_47 '())) (let () (let ((_loop_50 (unspecified))) (begin (set! _loop_50 (lambda (_formals_51 _args_51 _newformals_51 _newargs_51) (if (null? _formals_51) (if (null? _args_51) (begin (lambda_args-set! _l_41 (reverse _newformals_51)) (call_args-set! _exp_38 (reverse _newargs_51))) (begin (_normalize-let-error_2 _exp_38) (_loop_50 (cons (_newtemp_2) '()) _args_51 _newformals_51 _newargs_51))) (if (pair? _formals_51) (if (pair? _args_51) (_loop_50 (let ((_x_55_58 _formals_51)) (begin (_check! (pair? _x_55_58) 1 _x_55_58) (cdr:pair _x_55_58))) (let ((_x_59_62 _args_51)) (begin (_check! (pair? _x_59_62) 1 _x_59_62) (cdr:pair _x_59_62))) (cons (let ((_x_63_66 _formals_51)) (begin (_check! (pair? _x_63_66) 0 _x_63_66) (car:pair _x_63_66))) _newformals_51) (cons (let ((_x_67_70 _args_51)) (begin (_check! (pair? _x_67_70) 0 _x_67_70) (car:pair _x_67_70))) _newargs_51)) (begin (_normalize-let-error_2 _exp_38) (_loop_50 _formals_51 (cons (make-constant 0) _args_51) _newformals_51 _newargs_51))) (_loop_50 (cons _formals_51 '()) (cons (make-call-to-list _args_51) '()) _newformals_51 _newargs_51))))) (_loop_50 _formals_47 _args_47 _newformals_47 _newargs_47))))))))) (set! _normalize-let-error_2 (lambda (_exp_74) (if (issue-warnings) (begin (display "WARNING from compiler: ") (display "Wrong number of arguments ") (display "to lambda expression") (newline) (pretty-print (make-readable _exp_74) #t) (newline)) (unspecified)))) (set! _unpermute_2 (lambda (_things_75 _pi_75) (let* ((_v0_78 (list->vector _things_75)) (_v1_81 (make-vector (let ((_v_112_115 _v0_78)) (begin (_check! (vector? _v_112_115) 42 _v_112_115) (vector-length:vec _v_112_115))) '()))) (let () (let () (let ((_loop_85_88_91 (unspecified))) (begin (set! _loop_85_88_91 (lambda (_pi_92 _k_92) (if (null? _pi_92) (vector->list _v1_81) (begin (begin #t (let ((_v_95_98 _v1_81) (_i_95_98 (let ((_x_99_102 _pi_92)) (begin (_check! (pair? _x_99_102) 0 _x_99_102) (car:pair _x_99_102)))) (_x_95_98 (let ((_v_103_106 _v0_78) (_i_103_106 _k_92)) (begin (_check! (fixnum? _i_103_106) 40 _v_103_106 _i_103_106) (_check! (vector? _v_103_106) 40 _v_103_106 _i_103_106) (_check! (<:fix:fix _i_103_106 (vector-length:vec _v_103_106)) 40 _v_103_106 _i_103_106) (_check! (>=:fix:fix _i_103_106 0) 40 _v_103_106 _i_103_106) (vector-ref:trusted _v_103_106 _i_103_106))))) (begin (_check! (fixnum? _i_95_98) 41 _v_95_98 _i_95_98 _x_95_98) (_check! (vector? _v_95_98) 41 _v_95_98 _i_95_98 _x_95_98) (_check! (<:fix:fix _i_95_98 (vector-length:vec _v_95_98)) 41 _v_95_98 _i_95_98 _x_95_98) (_check! (>=:fix:fix _i_95_98 0) 41 _v_95_98 _i_95_98 _x_95_98) (vector-set!:trusted _v_95_98 _i_95_98 _x_95_98)))) (_loop_85_88_91 (let ((_x_107_110 _pi_92)) (begin (_check! (pair? _x_107_110) 1 _x_107_110) (cdr:pair _x_107_110))) (+ _k_92 1)))))) (_loop_85_88_91 _pi_75 0)))))))) (set! _permute_2 (lambda (_things_116 _pi_116) (let ((_v_119 (list->vector _things_116))) (let () (let ((_loop_125_128_131 (unspecified))) (begin (set! _loop_125_128_131 (lambda (_y1_120_121_132 _results_120_124_132) (if (null? _y1_120_121_132) (reverse _results_120_124_132) (begin #t (_loop_125_128_131 (let ((_x_136_139 _y1_120_121_132)) (begin (_check! (pair? _x_136_139) 1 _x_136_139) (cdr:pair _x_136_139))) (cons (let ((_i_140 (let ((_x_145_148 _y1_120_121_132)) (begin (_check! (pair? _x_145_148) 0 _x_145_148) (car:pair _x_145_148))))) (let ((_v_141_144 _v_119) (_i_141_144 _i_140)) (begin (_check! (fixnum? _i_141_144) 40 _v_141_144 _i_141_144) (_check! (vector? _v_141_144) 40 _v_141_144 _i_141_144) (_check! (<:fix:fix _i_141_144 (vector-length:vec _v_141_144)) 40 _v_141_144 _i_141_144) (_check! (>=:fix:fix _i_141_144 0) 40 _v_141_144 _i_141_144) (vector-ref:trusted _v_141_144 _i_141_144)))) _results_120_124_132)))))) (_loop_125_128_131 _pi_116 '()))))))) (set! _anf-order-of-evaluation_2 (lambda (_exprs_149 _regvars_149 _for-primop?_149) (let ((_ordering_150 (unspecified))) (begin (set! _ordering_150 (lambda (_targets_151 _exprs_151 _alist_151) (let* ((_para_154 (parallel-assignment _targets_151 _alist_151 _exprs_151)) (_temp_155_158 _para_154)) (if _temp_155_158 _temp_155_158 (cons (let ((_x_160_163 _targets_151)) (begin (_check! (pair? _x_160_163) 0 _x_160_163) (car:pair _x_160_163))) (_ordering_150 (let ((_x_164_167 _targets_151)) (begin (_check! (pair? _x_164_167) 1 _x_164_167) (cdr:pair _x_164_167))) (let ((_x_168_171 _exprs_151)) (begin (_check! (pair? _x_168_171) 1 _x_168_171) (cdr:pair _x_168_171))) _alist_151)))))) (if (parallel-assignment-optimization) (if (null? _exprs_149) '() (if (null? (let ((_x_174_177 _exprs_149)) (begin (_check! (pair? _x_174_177) 1 _x_174_177) (cdr:pair _x_174_177)))) '(0) (let* ((_contains-call?_181 #f) (_vexprs_184 (list->vector _exprs_149)) (_vindexes_187 (list->vector (iota (let ((_v_264_267 _vexprs_184)) (begin (_check! (vector? _v_264_267) 42 _v_264_267) (vector-length:vec _v_264_267)))))) (_contains-call?_190 #f) (_categories_193 (list->vector (let () (let ((_loop_240_243_246 (unspecified))) (begin (set! _loop_240_243_246 (lambda (_y1_235_236_247 _results_235_239_247) (if (null? _y1_235_236_247) (reverse _results_235_239_247) (begin #t (_loop_240_243_246 (let ((_x_251_254 _y1_235_236_247)) (begin (_check! (pair? _x_251_254) 1 _x_251_254) (cdr:pair _x_251_254))) (cons (let ((_e_255 (let ((_x_260_263 _y1_235_236_247)) (begin (_check! (pair? _x_260_263) 0 _x_260_263) (car:pair _x_260_263))))) (if (constant? _e_255) 2 (if (variable? _e_255) 2 (if (_complicated?_2 _e_255) (begin (set! _contains-call?_190 #t) 1) 0)))) _results_235_239_247)))))) (_loop_240_243_246 _exprs_149 '()))))))) (let () (if _contains-call?_190 (twobit-sort (lambda (_i_198 _j_198) (< (let ((_v_199_202 _categories_193) (_i_199_202 _i_198)) (begin (_check! (fixnum? _i_199_202) 40 _v_199_202 _i_199_202) (_check! (vector? _v_199_202) 40 _v_199_202 _i_199_202) (_check! (<:fix:fix _i_199_202 (vector-length:vec _v_199_202)) 40 _v_199_202 _i_199_202) (_check! (>=:fix:fix _i_199_202 0) 40 _v_199_202 _i_199_202) (vector-ref:trusted _v_199_202 _i_199_202))) (let ((_v_203_206 _categories_193) (_i_203_206 _j_198)) (begin (_check! (fixnum? _i_203_206) 40 _v_203_206 _i_203_206) (_check! (vector? _v_203_206) 40 _v_203_206 _i_203_206) (_check! (<:fix:fix _i_203_206 (vector-length:vec _v_203_206)) 40 _v_203_206 _i_203_206) (_check! (>=:fix:fix _i_203_206 0) 40 _v_203_206 _i_203_206) (vector-ref:trusted _v_203_206 _i_203_206))))) (iota (length _exprs_149))) (if _for-primop?_149 (reverse (iota (length _exprs_149))) (let* ((_targets_211 (iota (length _exprs_149))) (_pairup_212 (unspecified))) (begin (set! _pairup_212 (lambda (_regvars_213 _targets_213) (if (let ((_temp_214_217 (null? _targets_213))) (if _temp_214_217 _temp_214_217 (null? _regvars_213))) '() (cons (cons (let ((_x_219_222 _regvars_213)) (begin (_check! (pair? _x_219_222) 0 _x_219_222) (car:pair _x_219_222))) (let ((_x_223_226 _targets_213)) (begin (_check! (pair? _x_223_226) 0 _x_223_226) (car:pair _x_223_226)))) (_pairup_212 (let ((_x_227_230 _regvars_213)) (begin (_check! (pair? _x_227_230) 1 _x_227_230) (cdr:pair _x_227_230))) (let ((_x_231_234 _targets_213)) (begin (_check! (pair? _x_231_234) 1 _x_231_234) (cdr:pair _x_231_234)))))))) (_ordering_150 _targets_211 _exprs_149 (_pairup_212 _regvars_149 _targets_211)))))))))) (iota (length _exprs_149))))))) (set! _anf-call_2 (lambda (_e_268 _bindings_268 _regvars_268) (let* ((_proc_271 (call_proc _e_268)) (_args_274 (call_args _e_268))) (let () (let ((_let-loop_279 (unspecified)) (_loop_279 (unspecified))) (begin (set! _let-loop_279 (lambda (_exprs_280 _bindings_280 _regvars_280 _vars_280) (if (null? _exprs_280) (if (null? (lambda_defs _proc_271)) (_anf_2 (lambda_body _proc_271) _bindings_280 _regvars_280) (let ((_bindings_283 (_anf-bind_2 (make-lambda '() (lambda_defs _proc_271) '() '() '() (cons a-normal-form-declaration (lambda_decls _proc_271)) (lambda_doc _proc_271) (lambda_body _proc_271)) _bindings_280 '()))) (_anf-bind-dummy_2 (make-call (_anf-result_2 _bindings_283) '()) _bindings_283))) (_let-loop_279 (let ((_x_284_287 _exprs_280)) (begin (_check! (pair? _x_284_287) 1 _x_284_287) (cdr:pair _x_284_287))) (_anf-bind-name_2 (let ((_x_288_291 _vars_280)) (begin (_check! (pair? _x_288_291) 0 _x_288_291) (car:pair _x_288_291))) (let ((_x_292_295 _exprs_280)) (begin (_check! (pair? _x_292_295) 0 _x_292_295) (car:pair _x_292_295))) _bindings_280 _regvars_280) _regvars_280 (let ((_x_296_299 _vars_280)) (begin (_check! (pair? _x_296_299) 1 _x_296_299) (cdr:pair _x_296_299))))))) (set! _loop_279 (lambda (_exprs_300 _bindings_300 _names_300 _rename-always?_300) (if (null? _exprs_300) (values _bindings_300 (reverse _names_300)) (let ((_e_303 (let ((_x_332_335 _exprs_300)) (begin (_check! (pair? _x_332_335) 0 _x_332_335) (car:pair _x_332_335))))) (if (let ((_temp_304_307 _rename-always?_300)) (if _temp_304_307 _temp_304_307 (not (let ((_temp_309_312 (constant? _e_303))) (if _temp_309_312 _temp_309_312 (variable? _e_303)))))) (let ((_bindings_316 (_anf-bind_2 (let ((_x_324_327 _exprs_300)) (begin (_check! (pair? _x_324_327) 0 _x_324_327) (car:pair _x_324_327))) _bindings_300 _regvars_268))) (let () (_loop_279 (let ((_x_320_323 _exprs_300)) (begin (_check! (pair? _x_320_323) 1 _x_320_323) (cdr:pair _x_320_323))) _bindings_316 (cons (_anf-result_2 _bindings_316) _names_300) _rename-always?_300))) (_loop_279 (let ((_x_328_331 _exprs_300)) (begin (_check! (pair? _x_328_331) 1 _x_328_331) (cdr:pair _x_328_331))) _bindings_300 (cons _e_303 _names_300) _rename-always?_300)))))) (if (lambda? _proc_271) (let ((_formals_338 (lambda_args _proc_271))) (if (list? _formals_338) (let* ((_pi_341 (_anf-order-of-evaluation_2 _args_274 _regvars_268 #f)) (_exprs_344 (_permute_2 _args_274 _pi_341)) (_names_347 (_permute_2 (lambda_args _proc_271) _pi_341))) (let () (_let-loop_279 (reverse _exprs_344) _bindings_268 _regvars_268 (reverse _names_347)))) (_anf-call_2 (_normalize-let_2 _e_268) _bindings_268 _regvars_268))) (if (not (variable? _proc_271)) (let ((_pi_354 (_anf-order-of-evaluation_2 _args_274 _regvars_268 #f))) (call-with-values (lambda () (_loop_279 (_permute_2 _args_274 _pi_354) _bindings_268 '() #t)) (lambda (_bindings_356 _names_356) (let ((_bindings_359 (_anf-bind_2 _proc_271 _bindings_356 _regvars_268))) (_anf-bind-dummy_2 (make-call (_anf-result_2 _bindings_359) (_unpermute_2 _names_356 _pi_354)) _bindings_359))))) (if (if (integrate-usual-procedures) (prim-entry (variable_name _proc_271)) #f) (let ((_pi_365 (_anf-order-of-evaluation_2 _args_274 _regvars_268 #t))) (call-with-values (lambda () (_loop_279 (_permute_2 _args_274 _pi_365) _bindings_268 '() #t)) (lambda (_bindings_367 _names_367) (_anf-bind-dummy_2 (make-call _proc_271 (_unpermute_2 _names_367 _pi_365)) _bindings_367)))) (if (memq (variable_name _proc_271) _regvars_268) (let* ((_exprs_371 (cons _proc_271 _args_274)) (_pi_374 (_anf-order-of-evaluation_2 _exprs_371 (cons name:ignored _regvars_268) #f))) (let () (call-with-values (lambda () (_loop_279 (_permute_2 _exprs_371 _pi_374) _bindings_268 '() #t)) (lambda (_bindings_379 _names_379) (let ((_names_382 (_unpermute_2 _names_379 _pi_374))) (_anf-bind-dummy_2 (make-call (let ((_x_383_386 _names_382)) (begin (_check! (pair? _x_383_386) 0 _x_383_386) (car:pair _x_383_386))) (let ((_x_387_390 _names_382)) (begin (_check! (pair? _x_387_390) 1 _x_387_390) (cdr:pair _x_387_390)))) _bindings_379)))))) (let ((_pi_394 (_anf-order-of-evaluation_2 _args_274 _regvars_268 #f))) (call-with-values (lambda () (_loop_279 (_permute_2 _args_274 _pi_394) _bindings_268 '() #t)) (lambda (_bindings_396 _names_396) (_anf-bind-dummy_2 (make-call _proc_271 (_unpermute_2 _names_396 _pi_394)) _bindings_396)))))))))))))) (set! _anf-conditional_2 (lambda (_e_397 _bindings_397 _regvars_397) (let ((_e0_400 (if_test _e_397)) (_e1_400 (if_then _e_397)) (_e2_400 (if_else _e_397))) (if (variable? _e0_400) (let ((_e1_403 (_anf-make-let*_2 (_anf_2 _e1_400 '() _regvars_397))) (_e2_403 (_anf-make-let*_2 (_anf_2 _e2_400 '() _regvars_397)))) (_anf-bind-dummy_2 (make-conditional _e0_400 _e1_403 _e2_403) _bindings_397)) (let* ((_bindings_406 (_anf-bind_2 _e0_400 _bindings_397 _regvars_397)) (_e1_409 (_anf-make-let*_2 (_anf_2 _e1_400 '() _regvars_397))) (_e2_412 (_anf-make-let*_2 (_anf_2 _e2_400 '() _regvars_397)))) (let () (_anf-bind-dummy_2 (make-conditional (_anf-result_2 _bindings_406) _e1_409 _e2_412) _bindings_406))))))) (set! _anf-assignment_2 (lambda (_e_416 _bindings_416 _regvars_416) (let ((_i_419 (assignment_lhs _e_416)) (_e1_419 (assignment_rhs _e_416))) (if (variable? _e1_419) (_anf-bind-dummy_2 _e_416 _bindings_416) (let* ((_bindings_422 (_anf-bind_2 _e1_419 _bindings_416 _regvars_416)) (_t1_425 (_anf-result_2 _bindings_422))) (let () (_anf-bind-dummy_2 (make-assignment _i_419 _t1_425) _bindings_422))))))) (set! _anf-lambda_2 (lambda (_l_429 _bindings_429 _regvars_429) (_anf-bind-dummy_2 (make-lambda (lambda_args _l_429) (let () (let ((_loop_435_438_441 (unspecified))) (begin (set! _loop_435_438_441 (lambda (_y1_430_431_442 _results_430_434_442) (if (null? _y1_430_431_442) (reverse _results_430_434_442) (begin #t (_loop_435_438_441 (let ((_x_446_449 _y1_430_431_442)) (begin (_check! (pair? _x_446_449) 1 _x_446_449) (cdr:pair _x_446_449))) (cons (let ((_def_450 (let ((_x_451_454 _y1_430_431_442)) (begin (_check! (pair? _x_451_454) 0 _x_451_454) (car:pair _x_451_454))))) (make-definition (def_lhs _def_450) (_a-normal-form_2 (def_rhs _def_450)))) _results_430_434_442)))))) (_loop_435_438_441 (lambda_defs _l_429) '())))) '() '() '() (cons a-normal-form-declaration (lambda_decls _l_429)) (lambda_doc _l_429) (_anf-make-let*_2 (_anf_2 (lambda_body _l_429) '() (make-null-terminated (lambda_args _l_429))))) _bindings_429))) (set! _anf-sequential_2 (lambda (_e_455 _bindings_455 _regvars_455) (let () (let ((_loop_456_459_462 (unspecified))) (begin (set! _loop_456_459_462 (lambda (_bindings_463 _exprs_463) (if (null? (let ((_x_465_468 _exprs_463)) (begin (_check! (pair? _x_465_468) 1 _x_465_468) (cdr:pair _x_465_468)))) (_anf_2 (let ((_x_469_472 _exprs_463)) (begin (_check! (pair? _x_469_472) 0 _x_469_472) (car:pair _x_469_472))) _bindings_463 _regvars_455) (begin #t (_loop_456_459_462 (_anf-bind_2 (let ((_x_474_477 _exprs_463)) (begin (_check! (pair? _x_474_477) 0 _x_474_477) (car:pair _x_474_477))) _bindings_463 _regvars_455) (let ((_x_478_481 _exprs_463)) (begin (_check! (pair? _x_478_481) 1 _x_478_481) (cdr:pair _x_478_481)))))))) (_loop_456_459_462 _bindings_455 (begin_exprs _e_455))))))) (set! _anf-make-let*_2 (lambda (_bindings_482) (let ((_loop_483 (unspecified))) (begin (set! _loop_483 (lambda (_bindings_484 _body_484) (if (null? _bindings_484) _body_484 (let ((_t1_487 (let ((_x_495_498 (let ((_x_499_502 _bindings_484)) (begin (_check! (pair? _x_499_502) 0 _x_499_502) (car:pair _x_499_502))))) (begin (_check! (pair? _x_495_498) 0 _x_495_498) (car:pair _x_495_498)))) (_e1_487 (let ((_x_504_507 (let ((_x_508_511 (let ((_x_512_515 _bindings_484)) (begin (_check! (pair? _x_512_515) 0 _x_512_515) (car:pair _x_512_515))))) (begin (_check! (pair? _x_508_511) 1 _x_508_511) (cdr:pair _x_508_511))))) (begin (_check! (pair? _x_504_507) 0 _x_504_507) (car:pair _x_504_507))))) (_loop_483 (let ((_x_488_491 _bindings_484)) (begin (_check! (pair? _x_488_491) 1 _x_488_491) (cdr:pair _x_488_491))) (make-call (make-lambda (cons _t1_487 '()) '() '() '() '() (cons a-normal-form-declaration '()) '() _body_484) (cons _e1_487 '()))))))) (_loop_483 (let ((_x_516_519 _bindings_482)) (begin (_check! (pair? _x_516_519) 1 _x_516_519) (cdr:pair _x_516_519))) (let ((_x_521_524 (let ((_x_525_528 (let ((_x_529_532 _bindings_482)) (begin (_check! (pair? _x_529_532) 0 _x_529_532) (car:pair _x_529_532))))) (begin (_check! (pair? _x_525_528) 1 _x_525_528) (cdr:pair _x_525_528))))) (begin (_check! (pair? _x_521_524) 0 _x_521_524) (car:pair _x_521_524)))))))) (set! _anf-result_2 (lambda (_bindings_533) (make-variable (let ((_x_534_537 (let ((_x_538_541 _bindings_533)) (begin (_check! (pair? _x_538_541) 0 _x_538_541) (car:pair _x_538_541))))) (begin (_check! (pair? _x_534_537) 0 _x_534_537) (car:pair _x_534_537)))))) (set! _anf-bind_2 (lambda (_e_542 _bindings_542 _regvars_542) (let ((_bindings_545 (_anf_2 _e_542 _bindings_542 _regvars_542))) (cons (let* ((_t1_546_549 (_newtemp_2)) (_t2_546_552 (cons (let ((_x_558_561 (let ((_x_562_565 (let ((_x_566_569 _bindings_545)) (begin (_check! (pair? _x_566_569) 0 _x_566_569) (car:pair _x_566_569))))) (begin (_check! (pair? _x_562_565) 1 _x_562_565) (cdr:pair _x_562_565))))) (begin (_check! (pair? _x_558_561) 0 _x_558_561) (car:pair _x_558_561))) '()))) (let () (cons _t1_546_549 _t2_546_552))) (let ((_x_570_573 _bindings_545)) (begin (_check! (pair? _x_570_573) 1 _x_570_573) (cdr:pair _x_570_573))))))) (set! _anf-bind-name_2 (lambda (_name_574 _e_574 _bindings_574 _regvars_574) (let ((_bindings_577 (_anf_2 _e_574 _bindings_574 _regvars_574))) (cons (let* ((_t1_578_581 _name_574) (_t2_578_584 (cons (let ((_x_590_593 (let ((_x_594_597 (let ((_x_598_601 _bindings_577)) (begin (_check! (pair? _x_598_601) 0 _x_598_601) (car:pair _x_598_601))))) (begin (_check! (pair? _x_594_597) 1 _x_594_597) (cdr:pair _x_594_597))))) (begin (_check! (pair? _x_590_593) 0 _x_590_593) (car:pair _x_590_593))) '()))) (let () (cons _t1_578_581 _t2_578_584))) (let ((_x_602_605 _bindings_577)) (begin (_check! (pair? _x_602_605) 1 _x_602_605) (cdr:pair _x_602_605))))))) (set! _anf-bind-dummy_2 (lambda (_e_606 _bindings_606) (cons (let* ((_t1_607_610 _anf:dummy_2) (_t2_607_613 (cons _e_606 '()))) (let () (cons _t1_607_610 _t2_607_613))) _bindings_606))) (set! _anf_2 (lambda (_e_618 _bindings_618 _regvars_618) (let ((_temp_619_622 (let ((_x_629_632 _e_618)) (begin (_check! (pair? _x_629_632) 0 _x_629_632) (car:pair _x_629_632))))) (if (memv _temp_619_622 '(quote)) (_anf-bind-dummy_2 _e_618 _bindings_618) (if (memv _temp_619_622 '(begin)) (if (variable? _e_618) (_anf-bind-dummy_2 _e_618 _bindings_618) (_anf-sequential_2 _e_618 _bindings_618 _regvars_618)) (if (memv _temp_619_622 '(lambda)) (_anf-lambda_2 _e_618 _bindings_618 _regvars_618) (if (memv _temp_619_622 '(set!)) (_anf-assignment_2 _e_618 _bindings_618 _regvars_618) (if (memv _temp_619_622 '(if)) (_anf-conditional_2 _e_618 _bindings_618 _regvars_618) (_anf-call_2 _e_618 _bindings_618 _regvars_618))))))))) (set! _newtemp_2 (lambda () (begin (set! _temp-counter_2 (+ _temp-counter_2 1)) (string->symbol (string-append _temp-prefix_2 (number->string _temp-counter_2)))))) (set! _a-normal-form_2 (lambda (_e_634) (_anf-make-let*_2 (_anf_2 _e_634 '() '())))) (set! _temp-counter_2 0) (set! _anf:dummy_2 (string->symbol "RESULT")) (set! _temp-prefix_2 (if (let ((_temp_635_638 (null? _rest_1))) (if _temp_635_638 _temp_635_638 (not (string? (let ((_x_640_643 _rest_1)) (begin (_check! (pair? _x_640_643) 0 _x_640_643) (car:pair _x_640_643))))))) (string-append renaming-prefix "T") (let ((_x_644_647 _rest_1)) (begin (_check! (pair? _x_644_647) 0 _x_644_647) (car:pair _x_644_647))))) (_a-normal-form_2 _e_1))))) 'a-normal-form))
(let () (begin (set! post-simplify-anf (lambda (_l0_1 _t1_1 _e0_1 _e1_1 _free_1 _regbindings_1 _l2_1) (let ((_post-simplify-anf_2 0)) (begin (set! _post-simplify-anf_2 (lambda (_l0_3 _t1_3 _e0_3 _e1_3 _free_3 _regbindings_3 _l2_3) (let ((_return-normally_4 (unspecified))) (begin (set! _return-normally_4 (lambda () (values (make-call _l0_3 (cons _e1_3 '())) _free_3 _regbindings_3))) (_return-normally_4))))) (_post-simplify-anf_2 _l0_1 _t1_1 _e0_1 _e1_1 _free_1 _regbindings_1 _l2_1))))) 'post-simplify-anf))
(let () (begin (set! argument-registers (let () (let ((_loop_1_4_7 (unspecified))) (begin (set! _loop_1_4_7 (lambda (_n_8 _regs_8) (if (zero? _n_8) _regs_8 (begin #t (_loop_1_4_7 (- _n_8 1) (cons (string->symbol (string-append "_REG" (number->string _n_8))) _regs_8)))))) (_loop_1_4_7 (- *nregs* 2) '()))))) 'argument-registers))
(let () (begin (set! intraprocedural-commoning (lambda (_e_1 _ _flags_1) (let ((_debugging?_2 (unspecified)) (_commoning?_2 (unspecified)) (_target-registers?_2 (unspecified))) (begin (set! _debugging?_2 #f) (set! _commoning?_2 (let ((_temp_3_6 (null? _flags_1))) (if _temp_3_6 _temp_3_6 (memq 'commoning _flags_1)))) (set! _target-registers?_2 (let ((_temp_8_11 (null? _flags_1))) (if _temp_8_11 _temp_8_11 (memq 'target-registers _flags_1)))) (call-with-current-continuation (lambda (_return_13) (let ((_scan-body_14 (unspecified)) (_error_14 (unspecified))) (begin (set! _scan-body_14 (lambda (_e_15 _env_15 _available_15 _regvars_15) (let ((_scan-rhs_16 (unspecified)) (_scan-defs_16 (unspecified)) (_scan-let0_16 (unspecified)) (_scan-binding-phase3_16 (unspecified)) (_scan-binding-phase2_16 (unspecified)) (_scan-binding_16 (unspecified)) (_scan_16 (unspecified)) (_available-add!_16 (unspecified)) (_global?_16 (unspecified)) (_environment-lookup_16 (unspecified)) (_environment-extend*_16 (unspecified)) (_environment-extend_16 (unspecified)) (_make-empty-environment_16 (unspecified)) (_abandon-expression!_16 (unspecified)) (_used-variable!_16 (unspecified)) (_closed-over-local-variable!_16 (unspecified)) (_adjust-local-variable!_16 (unspecified)) (_used-local-variable!_16 (unspecified)) (_record-local-variable!_16 (unspecified)) (_local-variable-used-once?_16 (unspecified)) (_local-variable-not-used?_16 (unspecified)) (_local-variable?_16 (unspecified)) (_local-variables_16 (unspecified))) (begin (set! _scan-rhs_16 (lambda (_e_17 _env_17 _available_17) (if (constant? _e_17) (values _e_17 (empty-set) '()) (if (variable? _e_17) (let* ((_name_22 (variable_name _e_17)) (_enew_25 (if _commoning?_2 (if (_global?_16 _name_22) (let ((_t_34 (available-expression _available_17 _e_17))) (if _t_34 (make-variable _t_34) #f)) (available-variable _available_17 _name_22)) #f))) (let () (if _enew_25 (_scan-rhs_16 _enew_25 _env_17 _available_17) (begin (_used-variable!_16 _name_22) (values _e_17 (cons _name_22 '()) '()))))) (if (lambda? _e_17) (let* ((_formals_38 (make-null-terminated (lambda_args _e_17))) (_env_41 (_environment-extend*_16 (_environment-extend*_16 _env_17 _formals_38) (let () (let ((_loop_87_90_93 (unspecified))) (begin (set! _loop_87_90_93 (lambda (_y1_82_83_94 _results_82_86_94) (if (null? _y1_82_83_94) (reverse _results_82_86_94) (begin #t (_loop_87_90_93 (let ((_x_98_101 _y1_82_83_94)) (begin (_check! (pair? _x_98_101) 1 _x_98_101) (cdr:pair _x_98_101))) (cons (def_lhs (let ((_x_102_105 _y1_82_83_94)) (begin (_check! (pair? _x_102_105) 0 _x_102_105) (car:pair _x_102_105)))) _results_82_86_94)))))) (_loop_87_90_93 (lambda_defs _e_17) '())))))) (_fdefs_44 (_scan-defs_16 _e_17 _env_41 _available_17))) (let () (call-with-values (lambda () (let ((_available_51 (copy-available-table _available_17))) (begin (available-kill! _available_51 available:killer:all) (_scan-body_14 (lambda_body _e_17) _env_41 _available_51 _formals_38)))) (lambda (_e0_52 _f0_52 _regbindings0_52) (call-with-values (lambda () (wrap-with-register-bindings _regbindings0_52 _e0_52 _f0_52)) (lambda (_e0_54 _f0_54) (begin (lambda_body-set! _e_17 _e0_54) (let ((_f_57 (union _fdefs_44 _f0_54))) (begin (let () (let ((_loop_63_65_68 (unspecified))) (begin (set! _loop_63_65_68 (lambda (_y1_58_59_69) (if (null? _y1_58_59_69) (if #f #f (unspecified)) (begin (begin #t (let ((_x_73 (let ((_x_74_77 _y1_58_59_69)) (begin (_check! (pair? _x_74_77) 0 _x_74_77) (car:pair _x_74_77))))) (_closed-over-local-variable!_16 _x_73))) (_loop_63_65_68 (let ((_x_78_81 _y1_58_59_69)) (begin (_check! (pair? _x_78_81) 1 _x_78_81) (cdr:pair _x_78_81)))))))) (_loop_63_65_68 _f_57)))) (lambda_f-set! _e_17 _f_57) (lambda_g-set! _e_17 _f_57) (values _e_17 (difference _f_57 (make-null-terminated (lambda_args _e_17))) '())))))))))) (if (conditional? _e_17) (let ((_e0_109 (if_test _e_17)) (_e1_109 (if_then _e_17)) (_e2_109 (if_else _e_17))) (if (constant? _e0_109) (let ((_e1_112 (if (constant_value _e0_109) _e1_109 _e2_109))) (call-with-values (lambda () (_scan_16 _e1_112 _env_17 _available_17)) (lambda (_e1_114 _f1_114 _regbindings1_114) (if (let ((_temp_116_119 (not (call? _e1_114)))) (if _temp_116_119 _temp_116_119 (not (lambda? (call_proc _e1_114))))) (values _e1_114 _f1_114 _regbindings1_114) (values (make-conditional (make-constant #t) _e1_114 (make-constant 0)) _f1_114 _regbindings1_114))))) (call-with-values (lambda () (_scan_16 _e0_109 _env_17 _available_17)) (lambda (_e0_123 _f0_123 _regbindings0_123) (begin (if (not (null? _regbindings0_123)) (_error_14 'scan-rhs 'if) (unspecified)) (if (not (eq? _e0_123 (if_test _e_17))) (_scan-rhs_16 (make-conditional _e0_123 _e1_109 _e2_109) _env_17 _available_17) (let ((_available1_126 (copy-available-table _available_17)) (_available2_126 (copy-available-table _available_17))) (begin (if (variable? _e0_123) (let ((_t0_129 (variable_name _e0_123))) (_available-add!_16 _available2_126 _t0_129 (make-constant #f))) (_error_14 (make-readable _e_17 #t))) (call-with-values (lambda () (_scan_16 _e1_109 _env_17 _available1_126)) (lambda (_e1_131 _f1_131 _regbindings1_131) (call-with-values (lambda () (wrap-with-register-bindings _regbindings1_131 _e1_131 _f1_131)) (lambda (_e1_133 _f1_133) (call-with-values (lambda () (_scan_16 _e2_109 _env_17 _available2_126)) (lambda (_e2_135 _f2_135 _regbindings2_135) (call-with-values (lambda () (wrap-with-register-bindings _regbindings2_135 _e2_135 _f2_135)) (lambda (_e2_137 _f2_137) (let ((_e_140 (make-conditional _e0_123 _e1_133 _e2_137)) (_f_140 (union _f0_123 _f1_133 _f2_137))) (begin (available-intersect! _available_17 _available1_126 _available2_126) (values _e_140 _f_140 '()))))))))))))))))))) (if (assignment? _e_17) (call-with-values (lambda () (_scan-rhs_16 (assignment_rhs _e_17) _env_17 _available_17)) (lambda (_e1_143 _f1_143 _regbindings1_143) (begin (if (not (null? _regbindings1_143)) (_error_14 'scan-rhs 'set!) (unspecified)) (available-kill! _available_17 available:killer:globals) (values (make-assignment (assignment_lhs _e_17) _e1_143) (union (cons (assignment_lhs _e_17) '()) _f1_143) '())))) (if (begin? _e_17) (_error_14 'scan-rhs 'begin) (if (real-call? _e_17) (let* ((_e0_149 (call_proc _e_17)) (_args_152 (call_args _e_17)) (_regcontents_155 (append _regvars_15 (let () (let ((_loop_308_311_314 (unspecified))) (begin (set! _loop_308_311_314 (lambda (_y1_303_304_315 _results_303_307_315) (if (null? _y1_303_304_315) (reverse _results_303_307_315) (begin #t (_loop_308_311_314 (let ((_x_319_322 _y1_303_304_315)) (begin (_check! (pair? _x_319_322) 1 _x_319_322) (cdr:pair _x_319_322))) (cons (let ((_x_323 (let ((_x_324_327 _y1_303_304_315)) (begin (_check! (pair? _x_324_327) 0 _x_324_327) (car:pair _x_324_327))))) #f) _results_303_307_315)))))) (_loop_308_311_314 _args_152 '()))))))) (let () (let ((_args_161 _args_152) (_regs_161 argument-registers) (_regcontents_161 _regcontents_155) (_newargs_161 '()) (_regbindings_161 '()) (_f_161 (if (variable? _e0_149) (let ((_f_301 (variable_name _e0_149))) (begin (_used-variable!_16 _f_301) (cons _f_301 '()))) (empty-set)))) (let () (let ((_loop_164 (unspecified))) (begin (set! _loop_164 (lambda (_args_165 _regs_165 _regcontents_165 _newargs_165 _regbindings_165 _f_165) (if (null? _args_165) (begin (available-kill! _available_17 available:killer:all) (values (make-call _e0_149 (reverse _newargs_165)) _f_165 _regbindings_165)) (if (null? _regs_165) (let ((_arg_170 (let ((_x_183_186 _args_165)) (begin (_check! (pair? _x_183_186) 0 _x_183_186) (car:pair _x_183_186))))) (_loop_164 (let ((_x_171_174 _args_165)) (begin (_check! (pair? _x_171_174) 1 _x_171_174) (cdr:pair _x_171_174))) '() (let ((_x_175_178 _regcontents_165)) (begin (_check! (pair? _x_175_178) 1 _x_175_178) (cdr:pair _x_175_178))) (cons _arg_170 _newargs_165) _regbindings_165 (if (variable? _arg_170) (let ((_name_181 (variable_name _arg_170))) (begin (_used-variable!_16 _name_181) (union (cons _name_181 '()) _f_165))) _f_165))) (if (if _commoning?_2 (if (variable? (let ((_x_190_193 _args_165)) (begin (_check! (pair? _x_190_193) 0 _x_190_193) (car:pair _x_190_193)))) (available-variable _available_17 (variable_name (let ((_x_195_198 _args_165)) (begin (_check! (pair? _x_195_198) 0 _x_195_198) (car:pair _x_195_198))))) #f) #f) (let* ((_name_201 (variable_name (let ((_x_212_215 _args_165)) (begin (_check! (pair? _x_212_215) 0 _x_212_215) (car:pair _x_212_215))))) (_enew_204 (available-variable _available_17 _name_201))) (let () (_loop_164 (cons _enew_204 (let ((_x_208_211 _args_165)) (begin (_check! (pair? _x_208_211) 1 _x_208_211) (cdr:pair _x_208_211)))) _regs_165 _regcontents_165 _newargs_165 _regbindings_165 _f_165))) (if (if _target-registers?_2 (if (variable? (let ((_x_219_222 _args_165)) (begin (_check! (pair? _x_219_222) 0 _x_219_222) (car:pair _x_219_222)))) (let* ((_x_226 (variable_name (let ((_x_238_241 _args_165)) (begin (_check! (pair? _x_238_241) 0 _x_238_241) (car:pair _x_238_241))))) (_temp_227_230 (_local-variable-not-used?_16 _x_226))) (if _temp_227_230 _temp_227_230 (if (memq _x_226 _regvars_15) (not (eq? _x_226 (let ((_x_234_237 _regcontents_165)) (begin (_check! (pair? _x_234_237) 0 _x_234_237) (car:pair _x_234_237))))) #f))) #f) #f) (let* ((_x_244 (variable_name (let ((_x_271_274 _args_165)) (begin (_check! (pair? _x_271_274) 0 _x_271_274) (car:pair _x_271_274))))) (_r_247 (let ((_x_267_270 _regs_165)) (begin (_check! (pair? _x_267_270) 0 _x_267_270) (car:pair _x_267_270)))) (_newarg_250 (make-variable _r_247))) (let () (begin (_used-variable!_16 _x_244) (_loop_164 (let ((_x_254_257 _args_165)) (begin (_check! (pair? _x_254_257) 1 _x_254_257) (cdr:pair _x_254_257))) (let ((_x_258_261 _regs_165)) (begin (_check! (pair? _x_258_261) 1 _x_258_261) (cdr:pair _x_258_261))) (let ((_x_262_265 _regcontents_165)) (begin (_check! (pair? _x_262_265) 1 _x_262_265) (cdr:pair _x_262_265))) (cons _newarg_250 _newargs_165) (cons (make-regbinding _r_247 _x_244 _newarg_250) _regbindings_165) (union (cons _r_247 '()) _f_165))))) (let ((_e1_278 (let ((_x_295_298 _args_165)) (begin (_check! (pair? _x_295_298) 0 _x_295_298) (car:pair _x_295_298))))) (_loop_164 (let ((_x_279_282 _args_165)) (begin (_check! (pair? _x_279_282) 1 _x_279_282) (cdr:pair _x_279_282))) (let ((_x_283_286 _regs_165)) (begin (_check! (pair? _x_283_286) 1 _x_283_286) (cdr:pair _x_283_286))) (let ((_x_287_290 _regcontents_165)) (begin (_check! (pair? _x_287_290) 1 _x_287_290) (cdr:pair _x_287_290))) (cons _e1_278 _newargs_165) _regbindings_165 (if (variable? _e1_278) (let ((_name_293 (variable_name _e1_278))) (begin (_used-variable!_16 _name_293) (union (cons _name_293 '()) _f_165))) _f_165))))))))) (_loop_164 _args_161 _regs_161 _regcontents_161 _newargs_161 _regbindings_161 _f_161))))))) (if (call? _e_17) (let* ((_e0_331 (call_proc _e_17)) (_f0_334 (variable_name _e0_331))) (let () (let ((_args_340 (call_args _e_17)) (_newargs_340 '()) (_f_340 (cons _f0_334 '()))) (let () (let ((_loop_343 (unspecified))) (begin (set! _loop_343 (lambda (_args_344 _newargs_344 _f_344) (if (null? _args_344) (let* ((_e_348 (make-call _e0_331 (reverse _newargs_344))) (_t_351 (if _commoning?_2 (available-expression _available_17 _e_348) #f))) (let () (if _t_351 (begin (_abandon-expression!_16 _e_348) (_scan-rhs_16 (make-variable _t_351) _env_17 _available_17)) (begin (available-kill! _available_17 (prim-kills (prim-entry _f0_334))) (if (eq? _f0_334 name:check!) (let ((_x_358 (let ((_x_363_366 (call_args _e_348))) (begin (_check! (pair? _x_363_366) 0 _x_363_366) (car:pair _x_363_366))))) (if (not (runtime-safety-checking)) (begin (_abandon-expression!_16 _e_348) (_scan-rhs_16 _x_358 _env_17 _available_17)) (if (variable? _x_358) (begin (_available-add!_16 _available_17 (variable_name _x_358) (make-constant #t)) (values _e_348 _f_344 '())) (if (constant_value _x_358) (begin (_abandon-expression!_16 _e_348) (values _x_358 '() '())) (begin (declaration-error _e_348) (values _e_348 _f_344 '())))))) (values _e_348 _f_344 '())))))) (if (variable? (let ((_x_371_374 _args_344)) (begin (_check! (pair? _x_371_374) 0 _x_371_374) (car:pair _x_371_374)))) (let* ((_e1_377 (let ((_x_402_405 _args_344)) (begin (_check! (pair? _x_402_405) 0 _x_402_405) (car:pair _x_402_405)))) (_x_380 (variable_name _e1_377)) (_enew_383 (if _commoning?_2 (available-variable _available_17 _x_380) #f))) (let () (if _enew_383 (_loop_343 (cons _enew_383 (let ((_x_387_390 _args_344)) (begin (_check! (pair? _x_387_390) 1 _x_387_390) (cdr:pair _x_387_390)))) _newargs_344 (remq _x_380 _f_344)) (begin (_used-variable!_16 _x_380) (_loop_343 (let ((_x_391_394 _args_344)) (begin (_check! (pair? _x_391_394) 1 _x_391_394) (cdr:pair _x_391_394))) (cons (let ((_x_395_398 _args_344)) (begin (_check! (pair? _x_395_398) 0 _x_395_398) (car:pair _x_395_398))) _newargs_344) (union (cons _x_380 '()) _f_344)))))) (_loop_343 (let ((_x_407_410 _args_344)) (begin (_check! (pair? _x_407_410) 1 _x_407_410) (cdr:pair _x_407_410))) (cons (let ((_x_411_414 _args_344)) (begin (_check! (pair? _x_411_414) 0 _x_411_414) (car:pair _x_411_414))) _newargs_344) _f_344))))) (_loop_343 _args_340 _newargs_340 _f_340))))))) (_error_14 'scan-rhs (make-readable _e_17)))))))))))) (set! _scan-defs_16 (lambda (_l_417 _env_417 _available_417) (let ((_defs_420 (lambda_defs _l_417)) (_newdefs_420 '()) (_fdefs_420 '())) (let () (let ((_loop_423 (unspecified))) (begin (set! _loop_423 (lambda (_defs_424 _newdefs_424 _fdefs_424) (if (null? _defs_424) (begin (lambda_defs-set! _l_417 (reverse _newdefs_424)) _fdefs_424) (let ((_def_427 (let ((_x_470_473 _defs_424)) (begin (_check! (pair? _x_470_473) 0 _x_470_473) (car:pair _x_470_473))))) (call-with-values (lambda () (let* ((_ldef_431 (def_rhs _def_427)) (_lformals_434 (make-null-terminated (lambda_args _ldef_431))) (_lenv_437 (_environment-extend*_16 (_environment-extend*_16 _env_417 _lformals_434) (let () (let ((_loop_446_449_452 (unspecified))) (begin (set! _loop_446_449_452 (lambda (_y1_441_442_453 _results_441_445_453) (if (null? _y1_441_442_453) (reverse _results_441_445_453) (begin #t (_loop_446_449_452 (let ((_x_457_460 _y1_441_442_453)) (begin (_check! (pair? _x_457_460) 1 _x_457_460) (cdr:pair _x_457_460))) (cons (def_lhs (let ((_x_461_464 _y1_441_442_453)) (begin (_check! (pair? _x_461_464) 0 _x_461_464) (car:pair _x_461_464)))) _results_441_445_453)))))) (_loop_446_449_452 (lambda_defs _ldef_431) '()))))))) (let () (_scan_16 _ldef_431 _lenv_437 _available_417)))) (lambda (_rhs_465 _frhs_465 _empty_465) (begin (if (not (null? _empty_465)) (_error_14 'scan-binding 'def) (unspecified)) (_loop_423 (let ((_x_466_469 _defs_424)) (begin (_check! (pair? _x_466_469) 1 _x_466_469) (cdr:pair _x_466_469))) (cons (make-definition (def_lhs _def_427) _rhs_465) _newdefs_424) (union _frhs_465 _fdefs_424))))))))) (_loop_423 _defs_420 _newdefs_420 _fdefs_420))))))) (set! _scan-let0_16 (lambda (_e_474 _env_474 _available_474) (let ((_l_477 (call_proc _e_474))) (if (simple-lambda? _l_477) (_scan_16 (lambda_body _l_477) _env_474 _available_474) (let ((_t1_480 (make-variable name:ignored))) (begin (lambda_args-set! _l_477 (cons _t1_480 '())) (call-with-values (lambda () (_scan_16 (make-call _l_477 (cons (make-constant 0) '())) _env_474 _available_474)) (lambda (_e_484 _f_484 _regbindings_484) (begin (lambda_args-set! _l_477 '()) (values (make-call _l_477 '()) _f_484 _regbindings_484)))))))))) (set! _scan-binding-phase3_16 (lambda (_l_485 _e0_485 _e1_485 _f_485 _f1_485 _regbindings0_485 _regbindings1_485) (let* ((_args_488 (lambda_args _l_485)) (_t1_491 (let ((_x_517_520 _args_488)) (begin (_check! (pair? _x_517_520) 0 _x_517_520) (car:pair _x_517_520)))) (_free_494 (union _f1_485 (difference _f_485 _args_488))) (_simple-let?_497 (simple-lambda? _l_485)) (_regbindings_500 (if (null? _regbindings0_485) _regbindings1_485 (if (null? _regbindings1_485) _regbindings0_485 (_error_14 'scan-binding 'regbindings))))) (let () (begin (lambda_body-set! _l_485 _e0_485) (lambda_f-set! _l_485 _f_485) (lambda_g-set! _l_485 _f_485) (if (if _simple-let?_497 (if (not (memq _t1_491 _f_485)) (no-side-effects? _e1_485) #f) #f) (begin (_abandon-expression!_16 _e1_485) (values _e0_485 _f_485 _regbindings0_485)) (if (if _target-registers?_2 (if _simple-let?_497 (_local-variable-used-once?_16 _t1_491) #f) #f) (post-simplify-anf _l_485 _t1_491 _e0_485 _e1_485 _free_494 _regbindings_500 #f) (values (make-call _l_485 (cons _e1_485 '())) _free_494 _regbindings_500)))))))) (set! _scan-binding-phase2_16 (lambda (_l_521 _t1_521 _e0_521 _e1_521 _f0_521 _f1_521 _fdefs_521 _regbindings0_521 _regbindings1_521) (let ((_phase2e_522 (unspecified)) (_phase2d_522 (unspecified)) (_phase2c_522 (unspecified)) (_phase2b_522 (unspecified)) (_phase2a_522 (unspecified))) (begin (set! _phase2e_522 (lambda (_towrap_523 _regbindings0_523) (call-with-values (lambda () (wrap-with-register-bindings _towrap_523 _e0_521 _f0_521)) (lambda (_e0_525 _f0_525) (let ((_f_528 (union _fdefs_521 _f0_525))) (_scan-binding-phase3_16 _l_521 _e0_525 _e1_521 _f_528 _f1_521 _regbindings0_523 _regbindings1_521)))))) (set! _phase2d_522 (lambda (_towrap_529 _regbindings-t1_529 _regbindings0_529) (begin (if (not (null? (let ((_x_530_533 _regbindings-t1_529)) (begin (_check! (pair? _x_530_533) 1 _x_530_533) (cdr:pair _x_530_533))))) (_error_14 "incorrect number of uses" _t1_521) (unspecified)) (let* ((_regbinding_536 (let ((_x_544_547 _regbindings-t1_529)) (begin (_check! (pair? _x_544_547) 0 _x_544_547) (car:pair _x_544_547)))) (_r_539 (regbinding_lhs _regbinding_536))) (let () (begin (lambda_args-set! _l_521 (cons _r_539 '())) (_phase2e_522 _towrap_529 _regbindings0_529))))))) (set! _phase2c_522 (lambda (_towrap_548 _rb1_548 _regbindings0_548) (if (if (not (null? _rb1_548)) (_local-variable-used-once?_16 _t1_521) #f) (_phase2d_522 _towrap_548 _rb1_548 _regbindings0_548) (_phase2e_522 (append _rb1_548 _towrap_548) _regbindings0_548)))) (set! _phase2b_522 (lambda (_rb1_553 _rb2_553 _rb3_553) (if (let ((_temp_554_557 (conditional? _e1_521))) (if _temp_554_557 _temp_554_557 (real-call? _e1_521))) (_phase2c_522 (append _rb2_553 _rb3_553) _rb1_553 '()) (_phase2c_522 _rb2_553 _rb1_553 _rb3_553)))) (set! _phase2a_522 (lambda () (let () (let ((_loop_560_564_567 (unspecified))) (begin (set! _loop_560_564_567 (lambda (_rvars_568 _regs_568 _regs1_568) (if (let ((_temp_570_573 (null? _rvars_568))) (if _temp_570_573 _temp_570_573 (null? _regs_568))) (let ((_regbindings_577 _regbindings0_521) (_rb1_577 '()) (_rb2_577 '()) (_rb3_577 '())) (let () (let ((_loop_580 (unspecified))) (begin (set! _loop_580 (lambda (_regbindings_581 _rb1_581 _rb2_581 _rb3_581) (if (null? _regbindings_581) (_phase2b_522 _rb1_581 _rb2_581 _rb3_581) (let* ((_binding_584 (let ((_x_604_607 _regbindings_581)) (begin (_check! (pair? _x_604_607) 0 _x_604_607) (car:pair _x_604_607)))) (_regbindings_587 (let ((_x_600_603 _regbindings_581)) (begin (_check! (pair? _x_600_603) 1 _x_600_603) (cdr:pair _x_600_603)))) (_lhs_590 (regbinding_lhs _binding_584)) (_rhs_593 (regbinding_rhs _binding_584))) (let () (if (eq? _rhs_593 _t1_521) (_loop_580 _regbindings_587 (cons _binding_584 _rb1_581) _rb2_581 _rb3_581) (if (memq _lhs_590 _regs1_568) (_loop_580 _regbindings_587 _rb1_581 (cons _binding_584 _rb2_581) _rb3_581) (_loop_580 _regbindings_587 _rb1_581 _rb2_581 (cons _binding_584 _rb3_581))))))))) (_loop_580 _regbindings_577 _rb1_577 _rb2_577 _rb3_577))))) (begin #t (_loop_560_564_567 (let ((_x_609_612 _rvars_568)) (begin (_check! (pair? _x_609_612) 1 _x_609_612) (cdr:pair _x_609_612))) (let ((_x_613_616 _regs_568)) (begin (_check! (pair? _x_613_616) 1 _x_613_616) (cdr:pair _x_613_616))) (if (memq (let ((_x_617_620 _rvars_568)) (begin (_check! (pair? _x_617_620) 0 _x_617_620) (car:pair _x_617_620))) _f1_521) (cons (let ((_x_621_624 _regs_568)) (begin (_check! (pair? _x_621_624) 0 _x_621_624) (car:pair _x_621_624))) _regs1_568) _regs1_568)))))) (_loop_560_564_567 _regvars_15 argument-registers '())))))) (_phase2a_522))))) (set! _scan-binding_16 (lambda (_e_625 _env_625 _available_625) (let* ((_l_628 (call_proc _e_625)) (_t1_631 (let ((_x_685_688 (lambda_args _l_628))) (begin (_check! (pair? _x_685_688) 0 _x_685_688) (car:pair _x_685_688)))) (_e1_634 (let ((_x_681_684 (call_args _e_625))) (begin (_check! (pair? _x_681_684) 0 _x_681_684) (car:pair _x_681_684)))) (_e0_637 (lambda_body _l_628))) (let () (begin (_record-local-variable!_16 _t1_631) (call-with-values (lambda () (_scan-rhs_16 _e1_634 _env_625 _available_625)) (lambda (_e1_642 _f1_642 _regbindings1_642) (begin (_available-add!_16 _available_625 _t1_631 _e1_642) (let* ((_env_645 (let ((_formals_656 (make-null-terminated (lambda_args _l_628)))) (_environment-extend*_16 (_environment-extend*_16 _env_625 _formals_656) (let () (let ((_loop_662_665_668 (unspecified))) (begin (set! _loop_662_665_668 (lambda (_y1_657_658_669 _results_657_661_669) (if (null? _y1_657_658_669) (reverse _results_657_661_669) (begin #t (_loop_662_665_668 (let ((_x_673_676 _y1_657_658_669)) (begin (_check! (pair? _x_673_676) 1 _x_673_676) (cdr:pair _x_673_676))) (cons (def_lhs (let ((_x_677_680 _y1_657_658_669)) (begin (_check! (pair? _x_677_680) 0 _x_677_680) (car:pair _x_677_680)))) _results_657_661_669)))))) (_loop_662_665_668 (lambda_defs _l_628) '()))))))) (_fdefs_648 (_scan-defs_16 _l_628 _env_645 _available_625))) (let () (call-with-values (lambda () (_scan_16 _e0_637 _env_645 _available_625)) (lambda (_e0_653 _f0_653 _regbindings0_653) (begin (lambda_body-set! _l_628 _e0_653) (if _target-registers?_2 (_scan-binding-phase2_16 _l_628 _t1_631 _e0_653 _e1_642 _f0_653 _f1_642 _fdefs_648 _regbindings0_653 _regbindings1_642) (_scan-binding-phase3_16 _l_628 _e0_653 _e1_642 (union _f0_653 _fdefs_648) _f1_642 _regbindings0_653 _regbindings1_642))))))))))))))) (set! _scan_16 (lambda (_e_689 _env_689 _available_689) (if (not (call? _e_689)) (_scan-rhs_16 _e_689 _env_689 _available_689) (let ((_proc_692 (call_proc _e_689))) (if (not (lambda? _proc_692)) (_scan-rhs_16 _e_689 _env_689 _available_689) (let ((_vars_695 (lambda_args _proc_692))) (if (null? _vars_695) (_scan-let0_16 _e_689 _env_689 _available_689) (if (null? (let ((_x_698_701 _vars_695)) (begin (_check! (pair? _x_698_701) 1 _x_698_701) (cdr:pair _x_698_701)))) (_scan-binding_16 _e_689 _env_689 _available_689) (_error_14 (make-readable _e_689)))))))))) (set! _available-add!_16 (lambda (_available_703 _t_703 _e_703) (if (constant? _e_703) (available-extend! _available_703 _t_703 _e_703 available:killer:immortal) (if (variable? _e_703) (available-extend! _available_703 _t_703 _e_703 (if (_global?_16 (variable_name _e_703)) available:killer:globals available:killer:immortal)) (let ((_entry_709 (prim-call _e_703))) (if _entry_709 (let ((_killer_712 (prim-lives-until _entry_709))) (if (not (eq? _killer_712 available:killer:dead)) (let () (let ((_loop_713_716_719 (unspecified))) (begin (set! _loop_713_716_719 (lambda (_args_720 _k_720) (if (null? _args_720) (available-extend! _available_703 _t_703 _e_703 (logior _killer_712 _k_720)) (begin #t (_loop_713_716_719 (let ((_x_723_726 _args_720)) (begin (_check! (pair? _x_723_726) 1 _x_723_726) (cdr:pair _x_723_726))) (let ((_arg_729 (let ((_x_732_735 _args_720)) (begin (_check! (pair? _x_732_735) 0 _x_732_735) (car:pair _x_732_735))))) (if (if (variable? _arg_729) (_global?_16 (variable_name _arg_729)) #f) available:killer:globals _k_720))))))) (_loop_713_716_719 (call_args _e_703) _killer_712)))) (unspecified))) (unspecified))))))) (set! _global?_16 (lambda (_x_736) (if (_local-variable?_16 _x_736) #f (if (_environment-lookup_16 _env_15 _x_736) #f #t)))) (set! _environment-lookup_16 (lambda (_env_740 _sym_740) (hashtree-get _env_740 _sym_740))) (set! _environment-extend*_16 (lambda (_env_741 _symbols_741) (if (null? _symbols_741) _env_741 (_environment-extend*_16 (hashtree-put _env_741 (let ((_x_742_745 _symbols_741)) (begin (_check! (pair? _x_742_745) 0 _x_742_745) (car:pair _x_742_745))) #t) (let ((_x_746_749 _symbols_741)) (begin (_check! (pair? _x_746_749) 1 _x_746_749) (cdr:pair _x_746_749))))))) (set! _environment-extend_16 (lambda (_env_750 _sym_750) (hashtree-put _env_750 _sym_750 #t))) (set! _make-empty-environment_16 (lambda () (make-hashtree symbol-hash assq))) (set! _abandon-expression!_16 (lambda (_e_752) (if (variable? _e_752) (_adjust-local-variable!_16 (variable_name _e_752) -1) (if (conditional? _e_752) (begin (_abandon-expression!_16 (if_test _e_752)) (_abandon-expression!_16 (if_then _e_752)) (_abandon-expression!_16 (if_else _e_752))) (if (call? _e_752) (let () (let ((_loop_761_763_766 (unspecified))) (begin (set! _loop_761_763_766 (lambda (_y1_756_757_767) (if (null? _y1_756_757_767) (if #f #f (unspecified)) (begin (begin #t (let ((_exp_771 (let ((_x_775_778 _y1_756_757_767)) (begin (_check! (pair? _x_775_778) 0 _x_775_778) (car:pair _x_775_778))))) (if (variable? _exp_771) (let ((_name_774 (variable_name _exp_771))) (if (_local-variable?_16 _name_774) (_adjust-local-variable!_16 _name_774 -1) (unspecified))) (unspecified)))) (_loop_761_763_766 (let ((_x_779_782 _y1_756_757_767)) (begin (_check! (pair? _x_779_782) 1 _x_779_782) (cdr:pair _x_779_782)))))))) (_loop_761_763_766 (cons (call_proc _e_752) (call_args _e_752)))))) (unspecified)))))) (set! _used-variable!_16 (lambda (_sym_783) (_used-local-variable!_16 _sym_783))) (set! _closed-over-local-variable!_16 (lambda (_sym_784) (hashtable-put! _local-variables_16 _sym_784 1000000))) (set! _adjust-local-variable!_16 (lambda (_sym_785 _n_785) (let ((_m_788 (hashtable-get _local-variables_16 _sym_785))) (begin (if _debugging?_2 (if (if _m_788 (> _m_788 0) #f) (begin (write (let* ((_t1_791_794 _sym_785) (_t2_791_797 (cons (+ _m_788 _n_785) '()))) (let () (cons _t1_791_794 _t2_791_797)))) (newline)) (unspecified)) (unspecified)) (if _m_788 (hashtable-put! _local-variables_16 _sym_785 (+ _m_788 _n_785)) (unspecified)))))) (set! _used-local-variable!_16 (lambda (_sym_802) (_adjust-local-variable!_16 _sym_802 1))) (set! _record-local-variable!_16 (lambda (_sym_803) (hashtable-put! _local-variables_16 _sym_803 0))) (set! _local-variable-used-once?_16 (lambda (_sym_804) (= 1 (hashtable-fetch _local-variables_16 _sym_804 0)))) (set! _local-variable-not-used?_16 (lambda (_sym_805) (= 0 (hashtable-fetch _local-variables_16 _sym_805 -1)))) (set! _local-variable?_16 (lambda (_sym_806) (hashtable-get _local-variables_16 _sym_806))) (set! _local-variables_16 (make-hashtable symbol-hash assq)) (call-with-values (lambda () (_scan_16 _e_15 _env_15 _available_15)) (lambda (_e_808 _f_808 _regbindings_808) (call-with-values (lambda () (wrap-with-register-bindings _regbindings_808 _e_808 _f_808)) (lambda (_e_810 _f_810) (values _e_810 _f_810 '()))))))))) (set! _error_14 (lambda _stuff_811 (begin (display "Bug detected during intraprocedural optimization") (newline) (let ((_f_812_815_818 (lambda (_s_838) (begin (display _s_838) (newline))))) (let () (let ((_loop_820_822_825 (unspecified))) (begin (set! _loop_820_822_825 (lambda (_y1_812_813_826) (if (null? _y1_812_813_826) (if #f #f (unspecified)) (begin (begin #t (_f_812_815_818 (let ((_x_830_833 _y1_812_813_826)) (begin (_check! (pair? _x_830_833) 0 _x_830_833) (car:pair _x_830_833))))) (_loop_820_822_825 (let ((_x_834_837 _y1_812_813_826)) (begin (_check! (pair? _x_834_837) 1 _x_834_837) (cdr:pair _x_834_837)))))))) (_loop_820_822_825 _stuff_811))))) (_return_13 (make-constant #f))))) (call-with-values (lambda () (_scan-body_14 _e_1 (make-hashtree symbol-hash assq) (make-available-table) '())) (lambda (_e_840 _f_840 _regbindings_840) (begin (if (not (null? _regbindings_840)) (_error_14 'scan-body) (unspecified)) _e_840))))))))))) 'intraprocedural-commoning))
(let () (begin (set! representation-analysis (lambda (_exp_1) (let ((_representation-analysis_2 0)) (begin (set! _representation-analysis_2 (lambda (_exp_3) (let* ((_debugging?_6 #f) (_integrate-usual?_9 (integrate-usual-procedures)) (_known_12 (make-hashtable symbol-hash assq)) (_types_15 (make-hashtable symbol-hash assq)) (_g_18 (callgraph _exp_3)) (_schedule_21 (cons (callgraphnode_code (let ((_x_734_737 _g_18)) (begin (_check! (pair? _x_734_737) 0 _x_734_737) (car:pair _x_734_737)))) '())) (_changed?_24 #f) (_mutate?_27 #f)) (let () (let ((_display-all-types_31 (unspecified)) (_display-types_31 (unspecified)) (_analyze-unknown-lambda_31 (unspecified)) (_analyze-known-local-procedure_31 (unspecified)) (_analyze-unknown-call_31 (unspecified)) (_analyze-known-call_31 (unspecified)) (_analyze-primop-call_31 (unspecified)) (_analyze-let1_31 (unspecified)) (_analyze-let0_31 (unspecified)) (_analyze_31 (unspecified)) (_lookup-node_31 (unspecified)) (_lookup-code_31 (unspecified)) (_update-typevar!_31 (unspecified)) (_known-procedure-is-callable?_31 (unspecified)) (_schedule-local-procedures!_31 (unspecified)) (_schedule-callers!_31 (unspecified)) (_schedule-known-procedure!_31 (unspecified)) (_schedule!_31 (unspecified))) (begin (set! _display-all-types_31 (lambda () (let* ((_vars_35 (hashtable-map (lambda (_x_70 _type_70) _x_70) _types_15)) (_vars_38 (twobit-sort (lambda (_var1_69 _var2_69) (string<=? (symbol->string _var1_69) (symbol->string _var2_69))) _vars_35))) (let () (let ((_f_42_45_48 (lambda (_x_68) (begin (write _x_68) (display ": ") (write (rep->symbol (hashtable-get _types_15 _x_68))) (newline))))) (let () (let ((_loop_50_52_55 (unspecified))) (begin (set! _loop_50_52_55 (lambda (_y1_42_43_56) (if (null? _y1_42_43_56) (if #f #f (unspecified)) (begin (begin #t (_f_42_45_48 (let ((_x_60_63 _y1_42_43_56)) (begin (_check! (pair? _x_60_63) 0 _x_60_63) (car:pair _x_60_63))))) (_loop_50_52_55 (let ((_x_64_67 _y1_42_43_56)) (begin (_check! (pair? _x_64_67) 1 _x_64_67) (cdr:pair _x_64_67)))))))) (_loop_50_52_55 _vars_38))))))))) (set! _display-types_31 (lambda () (hashtable-for-each (lambda (_f_72 _vars_72) (begin (write _f_72) (display " : returns ") (write (rep->symbol (hashtable-get _types_15 _f_72))) (newline) (let ((_f_73_76_79 (lambda (_x_99) (begin (display "  ") (write _x_99) (display ": ") (write (rep->symbol (hashtable-get _types_15 _x_99))) (newline))))) (let () (let ((_loop_81_83_86 (unspecified))) (begin (set! _loop_81_83_86 (lambda (_y1_73_74_87) (if (null? _y1_73_74_87) (if #f #f (unspecified)) (begin (begin #t (_f_73_76_79 (let ((_x_91_94 _y1_73_74_87)) (begin (_check! (pair? _x_91_94) 0 _x_91_94) (car:pair _x_91_94))))) (_loop_81_83_86 (let ((_x_95_98 _y1_73_74_87)) (begin (_check! (pair? _x_95_98) 1 _x_95_98) (cdr:pair _x_95_98)))))))) (_loop_81_83_86 _vars_72))))))) _known_12))) (set! _analyze-unknown-lambda_31 (lambda (_l_100) (begin (if _debugging?_6 (begin (display "Analyzing escaping lambda expression") (newline)) (unspecified)) (_schedule-local-procedures!_31 _l_100) (let ((_vars_103 (make-null-terminated (lambda_args _l_100)))) (begin (let () (let ((_loop_109_111_114 (unspecified))) (begin (set! _loop_109_111_114 (lambda (_y1_104_105_115) (if (null? _y1_104_105_115) (if #f #f (unspecified)) (begin (begin #t (let ((_var_119 (let ((_x_120_123 _y1_104_105_115)) (begin (_check! (pair? _x_120_123) 0 _x_120_123) (car:pair _x_120_123))))) (hashtable-put! _types_15 _var_119 rep:object))) (_loop_109_111_114 (let ((_x_124_127 _y1_104_105_115)) (begin (_check! (pair? _x_124_127) 1 _x_124_127) (cdr:pair _x_124_127)))))))) (_loop_109_111_114 _vars_103)))) (_analyze_31 (lambda_body _l_100) (make-constraints-table))))))) (set! _analyze-known-local-procedure_31 (lambda (_name_128) (begin (if _debugging?_6 (begin (display "Analyzing ") (display _name_128) (newline)) (unspecified)) (let ((_l_131 (_lookup-code_31 _name_128)) (_constraints_131 (make-constraints-table))) (begin (_schedule-local-procedures!_31 _l_131) (let ((_type_134 (_analyze_31 (lambda_body _l_131) _constraints_131))) (begin (if (_update-typevar!_31 _name_128 _type_134) (_schedule-callers!_31 _name_128) (unspecified)) _type_134))))))) (set! _analyze-unknown-call_31 (lambda (_exp_135 _constraints_135) (begin (_analyze_31 (call_proc _exp_135) _constraints_135) (let () (let ((_loop_141_143_146 (unspecified))) (begin (set! _loop_141_143_146 (lambda (_y1_136_137_147) (if (null? _y1_136_137_147) (if #f #f (unspecified)) (begin (begin #t (let ((_arg_151 (let ((_x_152_155 _y1_136_137_147)) (begin (_check! (pair? _x_152_155) 0 _x_152_155) (car:pair _x_152_155))))) (_analyze_31 _arg_151 _constraints_135))) (_loop_141_143_146 (let ((_x_156_159 _y1_136_137_147)) (begin (_check! (pair? _x_156_159) 1 _x_156_159) (cdr:pair _x_156_159)))))))) (_loop_141_143_146 (call_args _exp_135))))) (constraints-kill! _constraints_135 available:killer:all) rep:object))) (set! _analyze-known-call_31 (lambda (_exp_160 _constraints_160 _vars_160) (let* ((_procname_163 (variable_name (call_proc _exp_160))) (_args_166 (call_args _exp_160)) (_argtypes_169 (let () (let ((_loop_216_219_222 (unspecified))) (begin (set! _loop_216_219_222 (lambda (_y1_211_212_223 _results_211_215_223) (if (null? _y1_211_212_223) (reverse _results_211_215_223) (begin #t (_loop_216_219_222 (let ((_x_227_230 _y1_211_212_223)) (begin (_check! (pair? _x_227_230) 1 _x_227_230) (cdr:pair _x_227_230))) (cons (let ((_arg_231 (let ((_x_232_235 _y1_211_212_223)) (begin (_check! (pair? _x_232_235) 0 _x_232_235) (car:pair _x_232_235))))) (_analyze_31 _arg_231 _constraints_160)) _results_211_215_223)))))) (_loop_216_219_222 _args_166 '())))))) (let () (begin (if (not (_known-procedure-is-callable?_31 _procname_163)) (_schedule-known-procedure!_31 _procname_163) (unspecified)) (let () (let ((_loop_179_182_185 (unspecified))) (begin (set! _loop_179_182_185 (lambda (_y1_173_175_186 _y1_173_174_186) (if (let ((_temp_188_191 (null? _y1_173_175_186))) (if _temp_188_191 _temp_188_191 (null? _y1_173_174_186))) (if #f #f (unspecified)) (begin (begin #t (let ((_var_194 (let ((_x_195_198 _y1_173_175_186)) (begin (_check! (pair? _x_195_198) 0 _x_195_198) (car:pair _x_195_198)))) (_type_194 (let ((_x_199_202 _y1_173_174_186)) (begin (_check! (pair? _x_199_202) 0 _x_199_202) (car:pair _x_199_202))))) (if (_update-typevar!_31 _var_194 _type_194) (_schedule-known-procedure!_31 _procname_163) (unspecified)))) (_loop_179_182_185 (let ((_x_203_206 _y1_173_175_186)) (begin (_check! (pair? _x_203_206) 1 _x_203_206) (cdr:pair _x_203_206))) (let ((_x_207_210 _y1_173_174_186)) (begin (_check! (pair? _x_207_210) 1 _x_207_210) (cdr:pair _x_207_210)))))))) (_loop_179_182_185 _vars_160 _argtypes_169)))) (constraints-kill! _constraints_160 available:killer:all) (hashtable-get _types_15 _procname_163)))))) (set! _analyze-primop-call_31 (lambda (_exp_236 _constraints_236 _entry_236) (let* ((_op_239 (prim-opcodename _entry_236)) (_args_242 (call_args _exp_236)) (_argtypes_245 (let () (let ((_loop_293_296_299 (unspecified))) (begin (set! _loop_293_296_299 (lambda (_y1_288_289_300 _results_288_292_300) (if (null? _y1_288_289_300) (reverse _results_288_292_300) (begin #t (_loop_293_296_299 (let ((_x_304_307 _y1_288_289_300)) (begin (_check! (pair? _x_304_307) 1 _x_304_307) (cdr:pair _x_304_307))) (cons (let ((_arg_308 (let ((_x_309_312 _y1_288_289_300)) (begin (_check! (pair? _x_309_312) 0 _x_309_312) (car:pair _x_309_312))))) (_analyze_31 _arg_308 _constraints_236)) _results_288_292_300)))))) (_loop_293_296_299 _args_242 '()))))) (_type_248 (rep-result? _op_239 _argtypes_245))) (let () (begin (constraints-kill! _constraints_236 (prim-kills _entry_236)) (if (if (eq? _op_239 'check!) (variable? (let ((_x_255_258 _args_242)) (begin (_check! (pair? _x_255_258) 0 _x_255_258) (car:pair _x_255_258)))) #f) (let ((_varname_261 (variable_name (let ((_x_272_275 _args_242)) (begin (_check! (pair? _x_272_275) 0 _x_272_275) (car:pair _x_272_275)))))) (begin (if (if _mutate?_27 (representation-subtype? (let ((_x_264_267 _argtypes_245)) (begin (_check! (pair? _x_264_267) 0 _x_264_267) (car:pair _x_264_267))) rep:true) #f) (call_args-set! _exp_236 (cons (make-constant #t) (let ((_x_268_271 _args_242)) (begin (_check! (pair? _x_268_271) 1 _x_268_271) (cdr:pair _x_268_271))))) (unspecified)) (constraints-add! _types_15 _constraints_236 (make-type-constraint _varname_261 rep:true available:killer:immortal)))) (let ((_temp_276_279 (if _mutate?_27 (rep-specific? _op_239 _argtypes_245) #f))) (if _temp_276_279 (let ((_newop_280 _temp_276_279)) (call_proc-set! _exp_236 (make-variable _newop_280))) (unspecified)))) (let ((_temp_283_286 _type_248)) (if _temp_283_286 _temp_283_286 rep:object))))))) (set! _analyze-let1_31 (lambda (_exp_313 _constraints_313) (let* ((_proc_316 (call_proc _exp_313)) (_vars_319 (lambda_args _proc_316))) (let () (begin (_schedule-local-procedures!_31 _proc_316) (if (if (pair? _vars_319) (null? (let ((_x_325_328 _vars_319)) (begin (_check! (pair? _x_325_328) 1 _x_325_328) (cdr:pair _x_325_328)))) #f) (let* ((_t1_331 (let ((_x_359_362 _vars_319)) (begin (_check! (pair? _x_359_362) 0 _x_359_362) (car:pair _x_359_362)))) (_e1_334 (let ((_x_355_358 (call_args _exp_313))) (begin (_check! (pair? _x_355_358) 0 _x_355_358) (car:pair _x_355_358))))) (let () (begin (if (if _integrate-usual?_9 (call? _e1_334) #f) (let ((_proc_342 (call_proc _e1_334)) (_args_342 (call_args _e1_334))) (if (variable? _proc_342) (let* ((_op_345 (variable_name _proc_342)) (_entry_348 (prim-entry _op_345)) (_k1_351 (if _entry_348 (prim-lives-until _entry_348) available:killer:dead))) (let () (if (not (= _k1_351 available:killer:dead)) (constraints-add! _types_15 _constraints_313 (make-constraint _t1_331 (make-call _proc_342 _args_342) _k1_351)) (unspecified)))) (unspecified))) (unspecified)) (_update-typevar!_31 _t1_331 (_analyze_31 _e1_334 _constraints_313)) (_analyze_31 (lambda_body _proc_316) _constraints_313)))) (_analyze-unknown-call_31 _exp_313 _constraints_313))))))) (set! _analyze-let0_31 (lambda (_exp_363 _constraints_363) (let ((_proc_366 (call_proc _exp_363))) (begin (_schedule-local-procedures!_31 _proc_366) (if (null? (lambda_args _proc_366)) (_analyze_31 (lambda_body _exp_363) _constraints_363) (_analyze-unknown-call_31 _exp_363 _constraints_363)))))) (set! _analyze_31 (lambda (_exp_367 _constraints_367) (begin (if (if #f _debugging?_6 #f) (begin (display "Analyzing: ") (newline) (pretty-print (make-readable _exp_367 #t)) (newline)) (unspecified)) (let ((_temp_370_373 (let ((_x_463_466 _exp_367)) (begin (_check! (pair? _x_463_466) 0 _x_463_466) (car:pair _x_463_466))))) (if (memv _temp_370_373 '(quote)) (representation-of-value (constant_value _exp_367)) (if (memv _temp_370_373 '(begin)) (let ((_name_378 (variable_name _exp_367))) (let () (representation-typeof _name_378 _types_15 _constraints_367))) (if (memv _temp_370_373 '(lambda)) (begin (_schedule!_31 _exp_367) rep:procedure) (if (memv _temp_370_373 '(set!)) (begin (_analyze_31 (assignment_rhs _exp_367) _constraints_367) (constraints-kill! _constraints_367 available:killer:globals) rep:object) (if (memv _temp_370_373 '(if)) (let* ((_e0_387 (if_test _exp_367)) (_e1_390 (if_then _exp_367)) (_e2_393 (if_else _exp_367)) (_type0_396 (_analyze_31 _e0_387 _constraints_367))) (let () (begin (if _mutate?_27 (if (representation-subtype? _type0_396 rep:true) (if_test-set! _exp_367 (make-constant #t)) (if (representation-subtype? _type0_396 rep:false) (if_test-set! _exp_367 (make-constant #f)) (unspecified))) (unspecified)) (if (representation-subtype? _type0_396 rep:true) (_analyze_31 _e1_390 _constraints_367) (if (representation-subtype? _type0_396 rep:false) (_analyze_31 _e2_393 _constraints_367) (if (variable? _e0_387) (let* ((_t0_407 (variable_name _e0_387)) (_ignored_410 (_analyze_31 _e0_387 _constraints_367)) (_constraints1_413 (copy-constraints-table _constraints_367)) (_constraints2_416 (copy-constraints-table _constraints_367))) (let () (begin (constraints-add! _types_15 _constraints1_413 (make-type-constraint _t0_407 rep:true available:killer:immortal)) (constraints-add! _types_15 _constraints2_416 (make-type-constraint _t0_407 rep:false available:killer:immortal)) (let* ((_type1_422 (_analyze_31 _e1_390 _constraints1_413)) (_type2_425 (_analyze_31 _e2_393 _constraints2_416)) (_type_428 (representation-union _type1_422 _type2_425))) (let () (begin (constraints-intersect! _constraints_367 _constraints1_413 _constraints2_416) _type_428)))))) (representation-error "Bad ANF" (make-readable _exp_367 #t)))))))) (let ((_proc_436 (call_proc _exp_367)) (_args_436 (call_args _exp_367))) (if (lambda? _proc_436) (if (null? _args_436) (_analyze-let0_31 _exp_367 _constraints_367) (if (null? (let ((_x_440_443 _args_436)) (begin (_check! (pair? _x_440_443) 1 _x_440_443) (cdr:pair _x_440_443)))) (_analyze-let1_31 _exp_367 _constraints_367) (error "Compiler bug: pass3rep"))) (if (variable? _proc_436) (let ((_procname_448 (variable_name _proc_436))) (let () (let ((_temp_452_455 (hashtable-get _known_12 _procname_448))) (if _temp_452_455 (let ((_vars_456 _temp_452_455)) (_analyze-known-call_31 _exp_367 _constraints_367 _vars_456)) (if _integrate-usual?_9 (let ((_entry_460 (prim-entry _procname_448))) (if _entry_460 (_analyze-primop-call_31 _exp_367 _constraints_367 _entry_460) (_analyze-unknown-call_31 _exp_367 _constraints_367))) (_analyze-unknown-call_31 _exp_367 _constraints_367)))))) (_analyze-unknown-call_31 _exp_367 _constraints_367))))))))))))) (set! _lookup-node_31 (lambda (_l_467) (let ((_g_470 _g_18)) (let () (let ((_loop_473 (unspecified))) (begin (set! _loop_473 (lambda (_g_474) (if (null? _g_474) (error "Unknown lambda expression" (make-readable _l_467 #t)) (if (eq? _l_467 (callgraphnode_code (let ((_x_477_480 _g_474)) (begin (_check! (pair? _x_477_480) 0 _x_477_480) (car:pair _x_477_480))))) (let ((_x_481_484 _g_474)) (begin (_check! (pair? _x_481_484) 0 _x_481_484) (car:pair _x_481_484))) (_loop_473 (let ((_x_486_489 _g_474)) (begin (_check! (pair? _x_486_489) 1 _x_486_489) (cdr:pair _x_486_489)))))))) (_loop_473 _g_470))))))) (set! _lookup-code_31 (lambda (_name_490) (callgraphnode_code (assq _name_490 _g_18)))) (set! _update-typevar!_31 (lambda (_tv_491 _type_491) (let* ((_type0_494 (hashtable-get _types_15 _tv_491)) (_type0_497 (let ((_temp_506_509 _type0_494)) (if _temp_506_509 _temp_506_509 (begin (hashtable-put! _types_15 _tv_491 rep:bottom) rep:bottom)))) (_type1_500 (representation-union _type0_497 _type_491))) (let () (if (eq? _type0_497 _type1_500) #f (begin (hashtable-put! _types_15 _tv_491 _type1_500) (set! _changed?_24 #t) (if (if _debugging?_6 _mutate?_27 #f) (begin (display "******** Changing type of ") (display _tv_491) (display " from ") (display (rep->symbol _type0_497)) (display " to ") (display (rep->symbol _type1_500)) (newline)) (unspecified)) #t)))))) (set! _known-procedure-is-callable?_31 (lambda (_name_511) (callgraphnode_info (assq _name_511 _g_18)))) (set! _schedule-local-procedures!_31 (lambda (_l_512) (let () (let ((_loop_518_520_523 (unspecified))) (begin (set! _loop_518_520_523 (lambda (_y1_513_514_524) (if (null? _y1_513_514_524) (if #f #f (unspecified)) (begin (begin #t (let* ((_def_528 (let ((_x_532_535 _y1_513_514_524)) (begin (_check! (pair? _x_532_535) 0 _x_532_535) (car:pair _x_532_535)))) (_name_531 (def_lhs _def_528))) (if (_known-procedure-is-callable?_31 _name_531) (_schedule!_31 _name_531) (unspecified)))) (_loop_518_520_523 (let ((_x_536_539 _y1_513_514_524)) (begin (_check! (pair? _x_536_539) 1 _x_536_539) (cdr:pair _x_536_539)))))))) (_loop_518_520_523 (lambda_defs _l_512))))))) (set! _schedule-callers!_31 (lambda (_name_540) (let () (let ((_loop_546_548_551 (unspecified))) (begin (set! _loop_546_548_551 (lambda (_y1_541_542_552) (if (null? _y1_541_542_552) (if #f #f (unspecified)) (begin (begin #t (let ((_node_556 (let ((_x_567_570 _y1_541_542_552)) (begin (_check! (pair? _x_567_570) 0 _x_567_570) (car:pair _x_567_570))))) (if (if (callgraphnode_info _node_556) (let ((_temp_559_562 (memq _name_540 (callgraphnode_tailcalls _node_556)))) (if _temp_559_562 _temp_559_562 (memq _name_540 (callgraphnode_nontailcalls _node_556)))) #f) (let ((_caller_566 (callgraphnode_name _node_556))) (if _caller_566 (_schedule!_31 _caller_566) (_schedule!_31 (callgraphnode_code _node_556)))) (unspecified)))) (_loop_546_548_551 (let ((_x_571_574 _y1_541_542_552)) (begin (_check! (pair? _x_571_574) 1 _x_571_574) (cdr:pair _x_571_574)))))))) (_loop_546_548_551 _g_18)))))) (set! _schedule-known-procedure!_31 (lambda (_name_575) (begin (callgraphnode_info! (assq _name_575 _g_18) #t) (_schedule!_31 _name_575)))) (set! _schedule!_31 (lambda (_job_576) (if (not (memq _job_576 _schedule_21)) (begin (set! _schedule_21 (cons _job_576 _schedule_21)) (if (not (symbol? _job_576)) (callgraphnode_info! (_lookup-node_31 _job_576) #t) (unspecified))) (unspecified)))) '(if debugging? (begin (pretty-print (make-readable (car schedule) #t)) (newline))) (if _debugging?_6 (view-callgraph _g_18) (unspecified)) (let () (let ((_loop_582_584_587 (unspecified))) (begin (set! _loop_582_584_587 (lambda (_y1_577_578_588) (if (null? _y1_577_578_588) (if #f #f (unspecified)) (begin (begin #t (let* ((_node_592 (let ((_x_635_638 _y1_577_578_588)) (begin (_check! (pair? _x_635_638) 0 _x_635_638) (car:pair _x_635_638)))) (_name_595 (callgraphnode_name _node_592)) (_code_598 (callgraphnode_code _node_592)) (_vars_601 (make-null-terminated (lambda_args _code_598))) (_known?_604 (symbol? _name_595)) (_rep_607 (if _known?_604 rep:bottom rep:object))) (let () (begin (callgraphnode_info! _node_592 #f) (if _known?_604 (begin (hashtable-put! _known_12 _name_595 _vars_601) (hashtable-put! _types_15 _name_595 _rep_607)) (unspecified)) (let () (let ((_loop_616_618_621 (unspecified))) (begin (set! _loop_616_618_621 (lambda (_y1_611_612_622) (if (null? _y1_611_612_622) (if #f #f (unspecified)) (begin (begin #t (let ((_var_626 (let ((_x_627_630 _y1_611_612_622)) (begin (_check! (pair? _x_627_630) 0 _x_627_630) (car:pair _x_627_630))))) (hashtable-put! _types_15 _var_626 _rep_607))) (_loop_616_618_621 (let ((_x_631_634 _y1_611_612_622)) (begin (_check! (pair? _x_631_634) 1 _x_631_634) (cdr:pair _x_631_634)))))))) (_loop_616_618_621 _vars_601)))))))) (_loop_582_584_587 (let ((_x_639_642 _y1_577_578_588)) (begin (_check! (pair? _x_639_642) 1 _x_639_642) (cdr:pair _x_639_642)))))))) (_loop_582_584_587 _g_18)))) (let () (let () (let ((_loop_648 (unspecified))) (begin (set! _loop_648 (lambda () (if (not (null? _schedule_21)) (let ((_job_653 (let ((_x_658_661 _schedule_21)) (begin (_check! (pair? _x_658_661) 0 _x_658_661) (car:pair _x_658_661))))) (begin (set! _schedule_21 (let ((_x_654_657 _schedule_21)) (begin (_check! (pair? _x_654_657) 1 _x_654_657) (cdr:pair _x_654_657)))) (if (symbol? _job_653) (_analyze-known-local-procedure_31 _job_653) (_analyze-unknown-lambda_31 _job_653)) (_loop_648))) (if _changed?_24 (begin (set! _changed?_24 #f) (set! _schedule_21 (cons (callgraphnode_code (let ((_x_664_667 _g_18)) (begin (_check! (pair? _x_664_667) 0 _x_664_667) (car:pair _x_664_667)))) '())) (if _debugging?_6 (begin (_display-all-types_31) (newline)) (unspecified)) (_loop_648)) (unspecified))))) (_loop_648))))) (if _debugging?_6 (_display-types_31) (unspecified)) (set! _mutate?_27 #t) (set! _schedule_21 (cons (callgraphnode_code (let ((_x_668_671 _g_18)) (begin (_check! (pair? _x_668_671) 0 _x_668_671) (car:pair _x_668_671)))) (let () (let ((_loop_677_680_683 (unspecified))) (begin (set! _loop_677_680_683 (lambda (_y1_672_673_684 _results_672_676_684) (if (null? _y1_672_673_684) (reverse _results_672_676_684) (begin #t (_loop_677_680_683 (let ((_x_688_691 _y1_672_673_684)) (begin (_check! (pair? _x_688_691) 1 _x_688_691) (cdr:pair _x_688_691))) (cons (callgraphnode_name (let ((_x_692_695 _y1_672_673_684)) (begin (_check! (pair? _x_692_695) 0 _x_692_695) (car:pair _x_692_695)))) _results_672_676_684)))))) (_loop_677_680_683 (filter (lambda (_node_696) (let* ((_name_699 (callgraphnode_name _node_696)) (_known?_702 (symbol? _name_699)) (_marked?_705 (_known-procedure-is-callable?_31 _name_699))) (let () (begin (callgraphnode_info! _node_696 #f) (if _known?_702 _marked?_705 #f))))) _g_18) '())))))) (let () (let () (let ((_loop_716 (unspecified))) (begin (set! _loop_716 (lambda () (if (not (null? _schedule_21)) (let ((_job_720 (let ((_x_725_728 _schedule_21)) (begin (_check! (pair? _x_725_728) 0 _x_725_728) (car:pair _x_725_728))))) (begin (set! _schedule_21 (let ((_x_721_724 _schedule_21)) (begin (_check! (pair? _x_721_724) 1 _x_721_724) (cdr:pair _x_721_724)))) (if (symbol? _job_720) (_analyze-known-local-procedure_31 _job_720) (_analyze-unknown-lambda_31 _job_720)) (_loop_716))) (unspecified)))) (_loop_716))))) (if _changed?_24 (error "Compiler bug in representation inference") (unspecified)) (if _debugging?_6 (pretty-print (make-readable (callgraphnode_code (let ((_x_729_732 _g_18)) (begin (_check! (pair? _x_729_732) 0 _x_729_732) (car:pair _x_729_732)))) #t)) (unspecified)) _exp_3)))))) (_representation-analysis_2 _exp_1))))) 'representation-analysis))
(let () (begin (set! pass3 (lambda (_exp_1) (let ((_pass3_2 0)) (begin (set! _pass3_2 (lambda (_exp_3) (let ((_verify_4 (unspecified)) (_finish_4 (unspecified)) (_phase4_4 (unspecified)) (_phase3_4 (unspecified)) (_phase2_4 (unspecified)) (_phase1_4 (unspecified))) (begin (set! _verify_4 (lambda (_exp_5) (begin (check-referencing-invariants _exp_5 'free) _exp_5))) (set! _finish_4 (lambda (_exp_6) (if (if (not (interprocedural-constant-propagation)) (not (common-subexpression-elimination)) #f) (begin (compute-free-variables! _exp_6) _exp_6) _exp_6))) (set! _phase4_4 (lambda (_exp_9) (if (representation-inference) (let ((_exp_12 (if (common-subexpression-elimination) _exp_9 (if (interprocedural-constant-propagation) (a-normal-form _exp_9) (a-normal-form (copy-exp _exp_9)))))) (intraprocedural-commoning (representation-analysis _exp_12))) _exp_9))) (set! _phase3_4 (lambda (_exp_16) (if (common-subexpression-elimination) (let* ((_exp_19 (if (interprocedural-constant-propagation) _exp_16 (copy-exp _exp_16))) (_exp_22 (a-normal-form _exp_19))) (let () (if (representation-inference) (intraprocedural-commoning _exp_22 'commoning) (intraprocedural-commoning _exp_22)))) _exp_16))) (set! _phase2_4 (lambda (_exp_26) (if (interprocedural-constant-propagation) (constant-propagation (copy-exp _exp_26)) _exp_26))) (set! _phase1_4 (lambda (_exp_27) (if (interprocedural-inlining) (let ((_g_30 (callgraph _exp_27))) (begin (inline-using-callgraph! _g_30) _exp_27)) _exp_27))) (if (global-optimization) (_verify_4 (_finish_4 (_phase4_4 (_phase3_4 (_phase2_4 (_phase1_4 _exp_3)))))) (begin (compute-free-variables! _exp_3) (_verify_4 _exp_3))))))) (_pass3_2 _exp_1))))) 'pass3))
(let () (begin (set! init-labels (lambda () (let ((_init-labels_2 0)) (begin (set! _init-labels_2 (lambda () (set! cg-label-counter 1000))) (_init-labels_2))))) 'init-labels))
(let () (begin (set! make-label (lambda () (let ((_make-label_2 0)) (begin (set! _make-label_2 (lambda () (begin (set! cg-label-counter (+ cg-label-counter 1)) cg-label-counter))) (_make-label_2))))) 'make-label))
(let () (begin (set! cg-label-counter 1000) 'cg-label-counter))
(let () (begin (set! make-assembly-stream (lambda () (let ((_make-assembly-stream_2 0)) (begin (set! _make-assembly-stream_2 (lambda () (let ((_code_6 (cons (cons 0 '()) '()))) (begin (set-cdr! _code_6 (let ((_x_7_10 _code_6)) (begin (_check! (pair? _x_7_10) 0 _x_7_10) (car:pair _x_7_10)))) (let* ((_t1_11_14 _code_6) (_t2_11_17 (cons #f '()))) (let () (cons _t1_11_14 _t2_11_17))))))) (_make-assembly-stream_2))))) 'make-assembly-stream))
(let () (begin (set! assembly-stream-code (lambda (_output_1) (let ((_assembly-stream-code_2 0)) (begin (set! _assembly-stream-code_2 (lambda (_output_3) (if (local-optimizations) (filter-basic-blocks (let ((_x_5_8 (let ((_x_9_12 (let ((_x_13_16 _output_3)) (begin (_check! (pair? _x_13_16) 0 _x_13_16) (car:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 0 _x_9_12) (car:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 1 _x_5_8) (cdr:pair _x_5_8)))) (let ((_x_18_21 (let ((_x_22_25 (let ((_x_26_29 _output_3)) (begin (_check! (pair? _x_26_29) 0 _x_26_29) (car:pair _x_26_29))))) (begin (_check! (pair? _x_22_25) 0 _x_22_25) (car:pair _x_22_25))))) (begin (_check! (pair? _x_18_21) 1 _x_18_21) (cdr:pair _x_18_21)))))) (_assembly-stream-code_2 _output_1))))) 'assembly-stream-code))
(let () (begin (set! assembly-stream-info (lambda (_output_1) (let ((_assembly-stream-info_2 0)) (begin (set! _assembly-stream-info_2 (lambda (_output_3) (let ((_x_5_8 (let ((_x_9_12 _output_3)) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))))) (_assembly-stream-info_2 _output_1))))) 'assembly-stream-info))
(let () (begin (set! assembly-stream-info! (lambda (_output_1 _x_1) (let ((_assembly-stream-info!_2 0)) (begin (set! _assembly-stream-info!_2 (lambda (_output_3 _x_3) (begin (set-car! (let ((_x_4_7 _output_3)) (begin (_check! (pair? _x_4_7) 1 _x_4_7) (cdr:pair _x_4_7))) _x_3) #f))) (_assembly-stream-info!_2 _output_1 _x_1))))) 'assembly-stream-info!))
(let () (begin (set! gen-instruction! (lambda (_output_1 _instruction_1) (let ((_gen-instruction!_2 0)) (begin (set! _gen-instruction!_2 (lambda (_output_3 _instruction_3) (let ((_pair_6 (cons _instruction_3 '())) (_code_6 (let ((_x_12_15 _output_3)) (begin (_check! (pair? _x_12_15) 0 _x_12_15) (car:pair _x_12_15))))) (begin (set-cdr! (let ((_x_7_10 _code_6)) (begin (_check! (pair? _x_7_10) 1 _x_7_10) (cdr:pair _x_7_10))) _pair_6) (set-cdr! _code_6 _pair_6) _output_3)))) (_gen-instruction!_2 _output_1 _instruction_1))))) 'gen-instruction!))
(let () (begin (set! gen! (lambda (_output_1 _ _instruction_1) (gen-instruction! _output_1 _instruction_1))) 'gen!))
(let () (begin (set! gen-save! (lambda (_output_1 _frame_1 _t0_1) (let ((_gen-save!_2 0)) (begin (set! _gen-save!_2 (lambda (_output_3 _frame_3 _t0_3) (let ((_size_6 (cgframe-size-cell _frame_3))) (begin (gen-instruction! _output_3 (cons $save _size_6)) (gen-store! _output_3 _frame_3 0 _t0_3) (cgframe:stale-set! _frame_3 '()))))) (_gen-save!_2 _output_1 _frame_1 _t0_1))))) 'gen-save!))
(let () (begin (set! gen-restore! (lambda (_output_1 _frame_1) (let ((_gen-restore!_2 0)) (begin (set! _gen-restore!_2 (lambda (_output_3 _frame_3) (let ((_size_6 (cgframe-size-cell _frame_3))) (gen-instruction! _output_3 (cons $restore _size_6))))) (_gen-restore!_2 _output_1 _frame_1))))) 'gen-restore!))
(let () (begin (set! gen-pop! (lambda (_output_1 _frame_1) (let ((_gen-pop!_2 0)) (begin (set! _gen-pop!_2 (lambda (_output_3 _frame_3) (let ((_size_6 (cgframe-size-cell _frame_3))) (gen-instruction! _output_3 (cons $pop _size_6))))) (_gen-pop!_2 _output_1 _frame_1))))) 'gen-pop!))
(let () (begin (set! gen-setstk! (lambda (_output_1 _frame_1 _tempname_1) (let ((_gen-setstk!_2 0)) (begin (set! _gen-setstk!_2 (lambda (_output_3 _frame_3 _tempname_3) (let ((_instruction_6 (let* ((_t1_7_10 $nop) (_t2_7_13 (let* ((_t1_17_20 $setstk) (_t2_17_23 (cons -1 '()))) (let () (cons _t1_17_20 _t2_17_23))))) (let () (cons _t1_7_10 _t2_7_13))))) (begin (cgframe-bind! _frame_3 _tempname_3 _instruction_6) (gen-instruction! _output_3 _instruction_6))))) (_gen-setstk!_2 _output_1 _frame_1 _tempname_1))))) 'gen-setstk!))
(let () (begin (set! gen-store! (lambda (_output_1 _frame_1 _r_1 _tempname_1) (let ((_gen-store!_2 0)) (begin (set! _gen-store!_2 (lambda (_output_3 _frame_3 _r_3 _tempname_3) (let ((_instruction_6 (let* ((_t1_7_10 $nop) (_t2_7_13 (let* ((_t1_17_20 $store) (_t2_17_23 (let* ((_t1_27_30 _r_3) (_t2_27_33 (cons -1 '()))) (let () (cons _t1_27_30 _t2_27_33))))) (let () (cons _t1_17_20 _t2_17_23))))) (let () (cons _t1_7_10 _t2_7_13))))) (begin (cgframe-bind! _frame_3 _tempname_3 _instruction_6) (gen-instruction! _output_3 _instruction_6))))) (_gen-store!_2 _output_1 _frame_1 _r_1 _tempname_1))))) 'gen-store!))
(let () (begin (set! gen-load! (lambda (_output_1 _frame_1 _r_1 _tempname_1) (let ((_gen-load!_2 0)) (begin (set! _gen-load!_2 (lambda (_output_3 _frame_3 _r_3 _tempname_3) (begin (cgframe-touch! _frame_3 _tempname_3) (let ((_n_6 (entry_slotnum (cgframe-lookup _frame_3 _tempname_3)))) (gen! _output_3 $load _r_3 _n_6))))) (_gen-load!_2 _output_1 _frame_1 _r_1 _tempname_1))))) 'gen-load!))
(let () (begin (set! gen-stack! (lambda (_output_1 _frame_1 _tempname_1) (let ((_gen-stack!_2 0)) (begin (set! _gen-stack!_2 (lambda (_output_3 _frame_3 _tempname_3) (begin (cgframe-touch! _frame_3 _tempname_3) (let ((_n_6 (entry_slotnum (cgframe-lookup _frame_3 _tempname_3)))) (gen! _output_3 $stack _n_6))))) (_gen-stack!_2 _output_1 _frame_1 _tempname_1))))) 'gen-stack!))
(let () (begin (set! init-temps (lambda () (let ((_init-temps_2 0)) (begin (set! _init-temps_2 (lambda () (set! newtemp-counter 5000))) (_init-temps_2))))) 'init-temps))
(let () (begin (set! newtemp (lambda () (let ((_newtemp_2 0)) (begin (set! _newtemp_2 (lambda () (begin (set! newtemp-counter (+ newtemp-counter 1)) newtemp-counter))) (_newtemp_2))))) 'newtemp))
(let () (begin (set! newtemp-counter 5000) 'newtemp-counter))
(let () (begin (set! newtemps (lambda (_n_1) (let ((_newtemps_2 0)) (begin (set! _newtemps_2 (lambda (_n_3) (if (zero? _n_3) '() (cons (newtemp) (_newtemps_2 (- _n_3 1)))))) (_newtemps_2 _n_1))))) 'newtemps))
(let () (begin (set! cgreg-makeregs (lambda (_n_1 _v1_1 _v2_1) (let ((_cgreg-makeregs_2 0)) (begin (set! _cgreg-makeregs_2 (lambda (_n_3 _v1_3 _v2_3) (let* ((_t1_4_7 _n_3) (_t2_4_10 (let* ((_t1_14_17 _v1_3) (_t2_14_20 (cons _v2_3 '()))) (let () (cons _t1_14_17 _t2_14_20))))) (let () (cons _t1_4_7 _t2_4_10))))) (_cgreg-makeregs_2 _n_1 _v1_1 _v2_1))))) 'cgreg-makeregs))
(let () (begin (set! cgreg-liveregs (lambda (_regs_1) (let ((_cgreg-liveregs_2 0)) (begin (set! _cgreg-liveregs_2 (lambda (_regs_3) (let ((_x_4_7 _regs_3)) (begin (_check! (pair? _x_4_7) 0 _x_4_7) (car:pair _x_4_7))))) (_cgreg-liveregs_2 _regs_1))))) 'cgreg-liveregs))
(let () (begin (set! cgreg-contents (lambda (_regs_1) (let ((_cgreg-contents_2 0)) (begin (set! _cgreg-contents_2 (lambda (_regs_3) (let ((_x_5_8 (let ((_x_9_12 _regs_3)) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))))) (_cgreg-contents_2 _regs_1))))) 'cgreg-contents))
(let () (begin (set! cgreg-stale (lambda (_regs_1) (let ((_cgreg-stale_2 0)) (begin (set! _cgreg-stale_2 (lambda (_regs_3) (let ((_x_5_8 (let ((_x_9_12 (let ((_x_13_16 _regs_3)) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))))) (_cgreg-stale_2 _regs_1))))) 'cgreg-stale))
(let () (begin (set! cgreg-liveregs-set! (lambda (_regs_1 _n_1) (let ((_cgreg-liveregs-set!_2 0)) (begin (set! _cgreg-liveregs-set!_2 (lambda (_regs_3 _n_3) (begin (set-car! _regs_3 _n_3) _regs_3))) (_cgreg-liveregs-set!_2 _regs_1 _n_1))))) 'cgreg-liveregs-set!))
(let () (begin (set! cgreg-initial (lambda () (let ((_cgreg-initial_2 0)) (begin (set! _cgreg-initial_2 (lambda () (let ((_v1_6 (make-vector *nregs* #f)) (_v2_6 (make-vector *nregs* #f))) (cgreg-makeregs 0 _v1_6 _v2_6)))) (_cgreg-initial_2))))) 'cgreg-initial))
(let () (begin (set! cgreg-copy (lambda (_regs_1) (let ((_cgreg-copy_2 0)) (begin (set! _cgreg-copy_2 (lambda (_regs_3) (let* ((_newregs_6 (cgreg-initial)) (_v1a_9 (cgreg-contents _regs_3)) (_v2a_12 (cgreg-stale _regs_3)) (_v1_15 (cgreg-contents _newregs_6)) (_v2_18 (cgreg-stale _newregs_6)) (_n_21 (let ((_v_50_53 _v1a_9)) (begin (_check! (vector? _v_50_53) 42 _v_50_53) (vector-length:vec _v_50_53))))) (let () (begin (cgreg-liveregs-set! _newregs_6 (cgreg-liveregs _regs_3)) (let () (let ((_loop_25_27_30 (unspecified))) (begin (set! _loop_25_27_30 (lambda (_i_31) (if (= _i_31 _n_21) _newregs_6 (begin (begin #t (let ((_v_34_37 _v1_15) (_i_34_37 _i_31) (_x_34_37 (let ((_v_38_41 _v1a_9) (_i_38_41 _i_31)) (begin (_check! (fixnum? _i_38_41) 40 _v_38_41 _i_38_41) (_check! (vector? _v_38_41) 40 _v_38_41 _i_38_41) (_check! (<:fix:fix _i_38_41 (vector-length:vec _v_38_41)) 40 _v_38_41 _i_38_41) (_check! (>=:fix:fix _i_38_41 0) 40 _v_38_41 _i_38_41) (vector-ref:trusted _v_38_41 _i_38_41))))) (begin (_check! (fixnum? _i_34_37) 41 _v_34_37 _i_34_37 _x_34_37) (_check! (vector? _v_34_37) 41 _v_34_37 _i_34_37 _x_34_37) (_check! (<:fix:fix _i_34_37 (vector-length:vec _v_34_37)) 41 _v_34_37 _i_34_37 _x_34_37) (_check! (>=:fix:fix _i_34_37 0) 41 _v_34_37 _i_34_37 _x_34_37) (vector-set!:trusted _v_34_37 _i_34_37 _x_34_37))) (let ((_v_42_45 _v2_18) (_i_42_45 _i_31) (_x_42_45 (let ((_v_46_49 _v2a_12) (_i_46_49 _i_31)) (begin (_check! (fixnum? _i_46_49) 40 _v_46_49 _i_46_49) (_check! (vector? _v_46_49) 40 _v_46_49 _i_46_49) (_check! (<:fix:fix _i_46_49 (vector-length:vec _v_46_49)) 40 _v_46_49 _i_46_49) (_check! (>=:fix:fix _i_46_49 0) 40 _v_46_49 _i_46_49) (vector-ref:trusted _v_46_49 _i_46_49))))) (begin (_check! (fixnum? _i_42_45) 41 _v_42_45 _i_42_45 _x_42_45) (_check! (vector? _v_42_45) 41 _v_42_45 _i_42_45 _x_42_45) (_check! (<:fix:fix _i_42_45 (vector-length:vec _v_42_45)) 41 _v_42_45 _i_42_45 _x_42_45) (_check! (>=:fix:fix _i_42_45 0) 41 _v_42_45 _i_42_45 _x_42_45) (vector-set!:trusted _v_42_45 _i_42_45 _x_42_45)))) (_loop_25_27_30 (+ _i_31 1)))))) (_loop_25_27_30 0))))))))) (_cgreg-copy_2 _regs_1))))) 'cgreg-copy))
(let () (begin (set! cgreg-tos (lambda (_regs_1) (let ((_cgreg-tos_2 0)) (begin (set! _cgreg-tos_2 (lambda (_regs_3) (- (cgreg-liveregs _regs_3) 1))) (_cgreg-tos_2 _regs_1))))) 'cgreg-tos))
(let () (begin (set! cgreg-live (lambda (_regs_1 _r_1) (let ((_cgreg-live_2 0)) (begin (set! _cgreg-live_2 (lambda (_regs_3 _r_3) (if (eq? _r_3 'result) (cgreg-tos _regs_3) (max _r_3 (cgreg-tos _regs_3))))) (_cgreg-live_2 _regs_1 _r_1))))) 'cgreg-live))
(let () (begin (set! cgreg-vars (lambda (_regs_1) (let ((_cgreg-vars_2 0)) (begin (set! _cgreg-vars_2 (lambda (_regs_3) (let ((_m_6 (cgreg-liveregs _regs_3)) (_v_6 (cgreg-contents _regs_3))) (let () (let ((_loop_7_10_13 (unspecified))) (begin (set! _loop_7_10_13 (lambda (_i_14 _vars_14) (if (< _i_14 0) _vars_14 (begin #t (_loop_7_10_13 (- _i_14 1) (cons (let ((_v_17_20 _v_6) (_i_17_20 _i_14)) (begin (_check! (fixnum? _i_17_20) 40 _v_17_20 _i_17_20) (_check! (vector? _v_17_20) 40 _v_17_20 _i_17_20) (_check! (<:fix:fix _i_17_20 (vector-length:vec _v_17_20)) 40 _v_17_20 _i_17_20) (_check! (>=:fix:fix _i_17_20 0) 40 _v_17_20 _i_17_20) (vector-ref:trusted _v_17_20 _i_17_20))) _vars_14)))))) (_loop_7_10_13 (- _m_6 1) '()))))))) (_cgreg-vars_2 _regs_1))))) 'cgreg-vars))
(let () (begin (set! cgreg-bind! (lambda (_regs_1 _r_1 _t_1) (let ((_cgreg-bind!_2 0)) (begin (set! _cgreg-bind!_2 (lambda (_regs_3 _r_3 _t_3) (let ((_m_6 (cgreg-liveregs _regs_3)) (_v_6 (cgreg-contents _regs_3))) (begin (let ((_v_7_10 _v_6) (_i_7_10 _r_3) (_x_7_10 _t_3)) (begin (_check! (fixnum? _i_7_10) 41 _v_7_10 _i_7_10 _x_7_10) (_check! (vector? _v_7_10) 41 _v_7_10 _i_7_10 _x_7_10) (_check! (<:fix:fix _i_7_10 (vector-length:vec _v_7_10)) 41 _v_7_10 _i_7_10 _x_7_10) (_check! (>=:fix:fix _i_7_10 0) 41 _v_7_10 _i_7_10 _x_7_10) (vector-set!:trusted _v_7_10 _i_7_10 _x_7_10))) (if (>= _r_3 _m_6) (cgreg-liveregs-set! _regs_3 (+ _r_3 1)) (unspecified)))))) (_cgreg-bind!_2 _regs_1 _r_1 _t_1))))) 'cgreg-bind!))
(let () (begin (set! cgreg-bindregs! (lambda (_regs_1 _vars_1) (let ((_cgreg-bindregs!_2 0)) (begin (set! _cgreg-bindregs!_2 (lambda (_regs_3 _vars_3) (let () (let ((_loop_4_8_11 (unspecified))) (begin (set! _loop_4_8_11 (lambda (_m_12 _v_12 _vars_12) (if (null? _vars_12) (begin (cgreg-liveregs-set! _regs_3 _m_12) _regs_3) (begin (begin #t (let ((_v_15_18 _v_12) (_i_15_18 _m_12) (_x_15_18 (let ((_x_19_22 _vars_12)) (begin (_check! (pair? _x_19_22) 0 _x_19_22) (car:pair _x_19_22))))) (begin (_check! (fixnum? _i_15_18) 41 _v_15_18 _i_15_18 _x_15_18) (_check! (vector? _v_15_18) 41 _v_15_18 _i_15_18 _x_15_18) (_check! (<:fix:fix _i_15_18 (vector-length:vec _v_15_18)) 41 _v_15_18 _i_15_18 _x_15_18) (_check! (>=:fix:fix _i_15_18 0) 41 _v_15_18 _i_15_18 _x_15_18) (vector-set!:trusted _v_15_18 _i_15_18 _x_15_18)))) (_loop_4_8_11 (+ _m_12 1) _v_12 (let ((_x_23_26 _vars_12)) (begin (_check! (pair? _x_23_26) 1 _x_23_26) (cdr:pair _x_23_26)))))))) (_loop_4_8_11 (cgreg-liveregs _regs_3) (cgreg-contents _regs_3) _vars_3)))))) (_cgreg-bindregs!_2 _regs_1 _vars_1))))) 'cgreg-bindregs!))
(let () (begin (set! cgreg-rename! (lambda (_regs_1 _alist_1) (let ((_cgreg-rename!_2 0)) (begin (set! _cgreg-rename!_2 (lambda (_regs_3 _alist_3) (let () (let ((_loop_5_8_11 (unspecified))) (begin (set! _loop_5_8_11 (lambda (_i_12 _v_12) (if (< _i_12 0) (if #f #f (unspecified)) (begin (begin #t (let ((_var_18 (let ((_v_31_34 _v_12) (_i_31_34 _i_12)) (begin (_check! (fixnum? _i_31_34) 40 _v_31_34 _i_31_34) (_check! (vector? _v_31_34) 40 _v_31_34 _i_31_34) (_check! (<:fix:fix _i_31_34 (vector-length:vec _v_31_34)) 40 _v_31_34 _i_31_34) (_check! (>=:fix:fix _i_31_34 0) 40 _v_31_34 _i_31_34) (vector-ref:trusted _v_31_34 _i_31_34))))) (if _var_18 (let ((_probe_21 (assv _var_18 _alist_3))) (if _probe_21 (let ((_v_22_25 _v_12) (_i_22_25 _i_12) (_x_22_25 (let ((_x_26_29 _probe_21)) (begin (_check! (pair? _x_26_29) 1 _x_26_29) (cdr:pair _x_26_29))))) (begin (_check! (fixnum? _i_22_25) 41 _v_22_25 _i_22_25 _x_22_25) (_check! (vector? _v_22_25) 41 _v_22_25 _i_22_25 _x_22_25) (_check! (<:fix:fix _i_22_25 (vector-length:vec _v_22_25)) 41 _v_22_25 _i_22_25 _x_22_25) (_check! (>=:fix:fix _i_22_25 0) 41 _v_22_25 _i_22_25 _x_22_25) (vector-set!:trusted _v_22_25 _i_22_25 _x_22_25))) (unspecified))) (unspecified)))) (_loop_5_8_11 (- _i_12 1) _v_12))))) (_loop_5_8_11 (- (cgreg-liveregs _regs_3) 1) (cgreg-contents _regs_3))))))) (_cgreg-rename!_2 _regs_1 _alist_1))))) 'cgreg-rename!))
(let () (begin (set! cgreg-release! (lambda (_regs_1 _r_1) (let ((_cgreg-release!_2 0)) (begin (set! _cgreg-release!_2 (lambda (_regs_3 _r_3) (let ((_m_6 (cgreg-liveregs _regs_3)) (_v_6 (cgreg-contents _regs_3))) (begin (let ((_v_7_10 _v_6) (_i_7_10 _r_3) (_x_7_10 #f)) (begin (_check! (fixnum? _i_7_10) 41 _v_7_10 _i_7_10 _x_7_10) (_check! (vector? _v_7_10) 41 _v_7_10 _i_7_10 _x_7_10) (_check! (<:fix:fix _i_7_10 (vector-length:vec _v_7_10)) 41 _v_7_10 _i_7_10 _x_7_10) (_check! (>=:fix:fix _i_7_10 0) 41 _v_7_10 _i_7_10 _x_7_10) (vector-set!:trusted _v_7_10 _i_7_10 _x_7_10))) (let ((_v_11_14 (cgreg-stale _regs_3)) (_i_11_14 _r_3) (_x_11_14 #t)) (begin (_check! (fixnum? _i_11_14) 41 _v_11_14 _i_11_14 _x_11_14) (_check! (vector? _v_11_14) 41 _v_11_14 _i_11_14 _x_11_14) (_check! (<:fix:fix _i_11_14 (vector-length:vec _v_11_14)) 41 _v_11_14 _i_11_14 _x_11_14) (_check! (>=:fix:fix _i_11_14 0) 41 _v_11_14 _i_11_14 _x_11_14) (vector-set!:trusted _v_11_14 _i_11_14 _x_11_14))) (if (= _r_3 (- _m_6 1)) (let () (let ((_loop_15_17_20 (unspecified))) (begin (set! _loop_15_17_20 (lambda (_m_21) (if (let ((_temp_23_26 (< _m_21 0))) (if _temp_23_26 _temp_23_26 (let ((_v_28_31 _v_6) (_i_28_31 _m_21)) (begin (_check! (fixnum? _i_28_31) 40 _v_28_31 _i_28_31) (_check! (vector? _v_28_31) 40 _v_28_31 _i_28_31) (_check! (<:fix:fix _i_28_31 (vector-length:vec _v_28_31)) 40 _v_28_31 _i_28_31) (_check! (>=:fix:fix _i_28_31 0) 40 _v_28_31 _i_28_31) (vector-ref:trusted _v_28_31 _i_28_31))))) (cgreg-liveregs-set! _regs_3 (+ _m_21 1)) (begin #t (_loop_15_17_20 (- _m_21 1)))))) (_loop_15_17_20 _r_3)))) (unspecified)))))) (_cgreg-release!_2 _regs_1 _r_1))))) 'cgreg-release!))
(let () (begin (set! cgreg-release-except! (lambda (_regs_1 _vars_1) (let ((_cgreg-release-except!_2 0)) (begin (set! _cgreg-release-except!_2 (lambda (_regs_3 _vars_3) (let () (let ((_loop_5_8_11 (unspecified))) (begin (set! _loop_5_8_11 (lambda (_i_12 _v_12) (if (< _i_12 0) (if #f #f (unspecified)) (begin (begin #t (let ((_var_18 (let ((_v_21_24 _v_12) (_i_21_24 _i_12)) (begin (_check! (fixnum? _i_21_24) 40 _v_21_24 _i_21_24) (_check! (vector? _v_21_24) 40 _v_21_24 _i_21_24) (_check! (<:fix:fix _i_21_24 (vector-length:vec _v_21_24)) 40 _v_21_24 _i_21_24) (_check! (>=:fix:fix _i_21_24 0) 40 _v_21_24 _i_21_24) (vector-ref:trusted _v_21_24 _i_21_24))))) (if (if _var_18 (not (memq _var_18 _vars_3)) #f) (cgreg-release! _regs_3 _i_12) (unspecified)))) (_loop_5_8_11 (- _i_12 1) _v_12))))) (_loop_5_8_11 (- (cgreg-liveregs _regs_3) 1) (cgreg-contents _regs_3))))))) (_cgreg-release-except!_2 _regs_1 _vars_1))))) 'cgreg-release-except!))
(let () (begin (set! cgreg-clear! (lambda (_regs_1) (let ((_cgreg-clear!_2 0)) (begin (set! _cgreg-clear!_2 (lambda (_regs_3) (let ((_m_6 (cgreg-liveregs _regs_3)) (_v1_6 (cgreg-contents _regs_3)) (_v2_6 (cgreg-stale _regs_3))) (let () (let ((_loop_7_9_12 (unspecified))) (begin (set! _loop_7_9_12 (lambda (_r_13) (if (= _r_13 _m_6) (cgreg-liveregs-set! _regs_3 0) (begin (begin #t (let ((_v_16_19 _v1_6) (_i_16_19 _r_13) (_x_16_19 #f)) (begin (_check! (fixnum? _i_16_19) 41 _v_16_19 _i_16_19 _x_16_19) (_check! (vector? _v_16_19) 41 _v_16_19 _i_16_19 _x_16_19) (_check! (<:fix:fix _i_16_19 (vector-length:vec _v_16_19)) 41 _v_16_19 _i_16_19 _x_16_19) (_check! (>=:fix:fix _i_16_19 0) 41 _v_16_19 _i_16_19 _x_16_19) (vector-set!:trusted _v_16_19 _i_16_19 _x_16_19))) (let ((_v_20_23 _v2_6) (_i_20_23 _r_13) (_x_20_23 #t)) (begin (_check! (fixnum? _i_20_23) 41 _v_20_23 _i_20_23 _x_20_23) (_check! (vector? _v_20_23) 41 _v_20_23 _i_20_23 _x_20_23) (_check! (<:fix:fix _i_20_23 (vector-length:vec _v_20_23)) 41 _v_20_23 _i_20_23 _x_20_23) (_check! (>=:fix:fix _i_20_23 0) 41 _v_20_23 _i_20_23 _x_20_23) (vector-set!:trusted _v_20_23 _i_20_23 _x_20_23)))) (_loop_7_9_12 (+ _r_13 1)))))) (_loop_7_9_12 0))))))) (_cgreg-clear!_2 _regs_1))))) 'cgreg-clear!))
(let () (begin (set! cgreg-lookup (lambda (_regs_1 _var_1) (let ((_cgreg-lookup_2 0)) (begin (set! _cgreg-lookup_2 (lambda (_regs_3 _var_3) (let ((_m_6 (cgreg-liveregs _regs_3)) (_v_6 (cgreg-contents _regs_3))) (let ((_loop_7 (unspecified))) (begin (set! _loop_7 (lambda (_i_8) (if (< _i_8 0) #f (if (eq? _var_3 (let ((_v_11_14 _v_6) (_i_11_14 _i_8)) (begin (_check! (fixnum? _i_11_14) 40 _v_11_14 _i_11_14) (_check! (vector? _v_11_14) 40 _v_11_14 _i_11_14) (_check! (<:fix:fix _i_11_14 (vector-length:vec _v_11_14)) 40 _v_11_14 _i_11_14) (_check! (>=:fix:fix _i_11_14 0) 40 _v_11_14 _i_11_14) (vector-ref:trusted _v_11_14 _i_11_14)))) (let* ((_t1_15_18 _var_3) (_t2_15_21 (let* ((_t1_25_28 'register) (_t2_25_31 (let* ((_t1_35_38 _i_8) (_t2_35_41 (cons '(object) '()))) (let () (cons _t1_35_38 _t2_35_41))))) (let () (cons _t1_25_28 _t2_25_31))))) (let () (cons _t1_15_18 _t2_15_21))) (_loop_7 (- _i_8 1)))))) (_loop_7 (- _m_6 1))))))) (_cgreg-lookup_2 _regs_1 _var_1))))) 'cgreg-lookup))
(let () (begin (set! cgreg-lookup-reg (lambda (_regs_1 _r_1) (let ((_cgreg-lookup-reg_2 0)) (begin (set! _cgreg-lookup-reg_2 (lambda (_regs_3 _r_3) (let ((_m_6 (cgreg-liveregs _regs_3)) (_v_6 (cgreg-contents _regs_3))) (if (<= _m_6 _r_3) #f (let ((_v_7_10 _v_6) (_i_7_10 _r_3)) (begin (_check! (fixnum? _i_7_10) 40 _v_7_10 _i_7_10) (_check! (vector? _v_7_10) 40 _v_7_10 _i_7_10) (_check! (<:fix:fix _i_7_10 (vector-length:vec _v_7_10)) 40 _v_7_10 _i_7_10) (_check! (>=:fix:fix _i_7_10 0) 40 _v_7_10 _i_7_10) (vector-ref:trusted _v_7_10 _i_7_10))))))) (_cgreg-lookup-reg_2 _regs_1 _r_1))))) 'cgreg-lookup-reg))
(let () (begin (set! cgreg-join! (lambda (_regs1_1 _regs2_1) (let ((_cgreg-join!_2 0)) (begin (set! _cgreg-join!_2 (lambda (_regs1_3 _regs2_3) (let ((_m1_6 (cgreg-liveregs _regs1_3)) (_m2_6 (cgreg-liveregs _regs2_3)) (_v1_6 (cgreg-contents _regs1_3)) (_v2_6 (cgreg-contents _regs2_3)) (_stale1_6 (cgreg-stale _regs1_3))) (let () (let ((_loop_7_9_12 (unspecified))) (begin (set! _loop_7_9_12 (lambda (_i_13) (if (< _i_13 0) (cgreg-liveregs-set! _regs1_3 (min _m1_6 _m2_6)) (begin (begin #t (let ((_x1_18 (let ((_v_34_37 _v1_6) (_i_34_37 _i_13)) (begin (_check! (fixnum? _i_34_37) 40 _v_34_37 _i_34_37) (_check! (vector? _v_34_37) 40 _v_34_37 _i_34_37) (_check! (<:fix:fix _i_34_37 (vector-length:vec _v_34_37)) 40 _v_34_37 _i_34_37) (_check! (>=:fix:fix _i_34_37 0) 40 _v_34_37 _i_34_37) (vector-ref:trusted _v_34_37 _i_34_37)))) (_x2_18 (let ((_v_38_41 _v2_6) (_i_38_41 _i_13)) (begin (_check! (fixnum? _i_38_41) 40 _v_38_41 _i_38_41) (_check! (vector? _v_38_41) 40 _v_38_41 _i_38_41) (_check! (<:fix:fix _i_38_41 (vector-length:vec _v_38_41)) 40 _v_38_41 _i_38_41) (_check! (>=:fix:fix _i_38_41 0) 40 _v_38_41 _i_38_41) (vector-ref:trusted _v_38_41 _i_38_41))))) (if (eq? _x1_18 _x2_18) #t (if (not _x1_18) (if _x2_18 (let ((_v_21_24 _stale1_6) (_i_21_24 _i_13) (_x_21_24 #t)) (begin (_check! (fixnum? _i_21_24) 41 _v_21_24 _i_21_24 _x_21_24) (_check! (vector? _v_21_24) 41 _v_21_24 _i_21_24 _x_21_24) (_check! (<:fix:fix _i_21_24 (vector-length:vec _v_21_24)) 41 _v_21_24 _i_21_24 _x_21_24) (_check! (>=:fix:fix _i_21_24 0) 41 _v_21_24 _i_21_24 _x_21_24) (vector-set!:trusted _v_21_24 _i_21_24 _x_21_24))) (unspecified)) (begin (let ((_v_26_29 _v1_6) (_i_26_29 _i_13) (_x_26_29 #f)) (begin (_check! (fixnum? _i_26_29) 41 _v_26_29 _i_26_29 _x_26_29) (_check! (vector? _v_26_29) 41 _v_26_29 _i_26_29 _x_26_29) (_check! (<:fix:fix _i_26_29 (vector-length:vec _v_26_29)) 41 _v_26_29 _i_26_29 _x_26_29) (_check! (>=:fix:fix _i_26_29 0) 41 _v_26_29 _i_26_29 _x_26_29) (vector-set!:trusted _v_26_29 _i_26_29 _x_26_29))) (let ((_v_30_33 _stale1_6) (_i_30_33 _i_13) (_x_30_33 #t)) (begin (_check! (fixnum? _i_30_33) 41 _v_30_33 _i_30_33 _x_30_33) (_check! (vector? _v_30_33) 41 _v_30_33 _i_30_33 _x_30_33) (_check! (<:fix:fix _i_30_33 (vector-length:vec _v_30_33)) 41 _v_30_33 _i_30_33 _x_30_33) (_check! (>=:fix:fix _i_30_33 0) 41 _v_30_33 _i_30_33 _x_30_33) (vector-set!:trusted _v_30_33 _i_30_33 _x_30_33)))))))) (_loop_7_9_12 (- _i_13 1)))))) (_loop_7_9_12 (- (max _m1_6 _m2_6) 1)))))))) (_cgreg-join!_2 _regs1_1 _regs2_1))))) 'cgreg-join!))
(let () (begin (set! cgframe:slots car) 'cgframe:slots))
(let () (begin (set! cgframe:stale cadr) 'cgframe:stale))
(let () (begin (set! cgframe:livevars caddr) 'cgframe:livevars))
(let () (begin (set! cgframe:slot_name car) 'cgframe:slot_name))
(let () (begin (set! cgframe:slot_offset cadr) 'cgframe:slot_offset))
(let () (begin (set! cgframe:slot_instruction caddr) 'cgframe:slot_instruction))
(let () (begin (set! cgframe:slot_stale cadddr) 'cgframe:slot_stale))
(let () (begin (set! cgframe:slots-set! set-car!) 'cgframe:slots-set!))
(let () (begin (set! cgframe:stale-set! (lambda (_frame_1 _stale_1) (let ((_cgframe:stale-set!_2 0)) (begin (set! _cgframe:stale-set!_2 (lambda (_frame_3 _stale_3) (set-car! (let ((_x_4_7 _frame_3)) (begin (_check! (pair? _x_4_7) 1 _x_4_7) (cdr:pair _x_4_7))) _stale_3))) (_cgframe:stale-set!_2 _frame_1 _stale_1))))) 'cgframe:stale-set!))
(let () (begin (set! cgframe:livevars-set! (lambda (_frame_1 _vars_1) (let ((_cgframe:livevars-set!_2 0)) (begin (set! _cgframe:livevars-set!_2 (lambda (_frame_3 _vars_3) (set-car! (let ((_x_5_8 (let ((_x_9_12 _frame_3)) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 1 _x_5_8) (cdr:pair _x_5_8))) _vars_3))) (_cgframe:livevars-set!_2 _frame_1 _vars_1))))) 'cgframe:livevars-set!))
(let () (begin (set! cgframe:slot_name-set! set-car!) 'cgframe:slot_name-set!))
(let () (begin (set! cgframe:slot_offset-set! (lambda (_entry_1 _n_1) (let ((_cgframe:slot_offset-set!_2 0)) (begin (set! _cgframe:slot_offset-set!_2 (lambda (_entry_3 _n_3) (let ((_instruction_6 (let ((_x_65_68 (let ((_x_69_72 (let ((_x_73_76 _entry_3)) (begin (_check! (pair? _x_73_76) 1 _x_73_76) (cdr:pair _x_73_76))))) (begin (_check! (pair? _x_69_72) 1 _x_69_72) (cdr:pair _x_69_72))))) (begin (_check! (pair? _x_65_68) 0 _x_65_68) (car:pair _x_65_68))))) (if (let ((_temp_7_10 (not (eq? #f (let ((_x_17_20 (let ((_x_21_24 _entry_3)) (begin (_check! (pair? _x_21_24) 1 _x_21_24) (cdr:pair _x_21_24))))) (begin (_check! (pair? _x_17_20) 0 _x_17_20) (car:pair _x_17_20))))))) (if _temp_7_10 _temp_7_10 (not (eq? $nop (let ((_x_12_15 _instruction_6)) (begin (_check! (pair? _x_12_15) 0 _x_12_15) (car:pair _x_12_15))))))) (error "Compiler bug: cgframe" _entry_3) (begin (set-car! (let ((_x_25_28 _entry_3)) (begin (_check! (pair? _x_25_28) 1 _x_25_28) (cdr:pair _x_25_28))) _n_3) (set-car! _instruction_6 (let ((_x_30_33 (let ((_x_34_37 _instruction_6)) (begin (_check! (pair? _x_34_37) 1 _x_34_37) (cdr:pair _x_34_37))))) (begin (_check! (pair? _x_30_33) 0 _x_30_33) (car:pair _x_30_33)))) (set-cdr! _instruction_6 (let ((_x_39_42 (let ((_x_43_46 _instruction_6)) (begin (_check! (pair? _x_43_46) 1 _x_43_46) (cdr:pair _x_43_46))))) (begin (_check! (pair? _x_39_42) 1 _x_39_42) (cdr:pair _x_39_42)))) (if (eq? $setstk (let ((_x_47_50 _instruction_6)) (begin (_check! (pair? _x_47_50) 0 _x_47_50) (car:pair _x_47_50)))) (set-car! (let ((_x_51_54 _instruction_6)) (begin (_check! (pair? _x_51_54) 1 _x_51_54) (cdr:pair _x_51_54))) _n_3) (set-car! (let ((_x_56_59 (let ((_x_60_63 _instruction_6)) (begin (_check! (pair? _x_60_63) 1 _x_60_63) (cdr:pair _x_60_63))))) (begin (_check! (pair? _x_56_59) 1 _x_56_59) (cdr:pair _x_56_59))) _n_3))))))) (_cgframe:slot_offset-set!_2 _entry_1 _n_1))))) 'cgframe:slot_offset-set!))
(let () (begin (set! cgframe:unused-slot (lambda (_frame_1 _entry_1) (let ((_cgframe:unused-slot_2 0)) (begin (set! _cgframe:unused-slot_2 (lambda (_frame_3 _entry_3) (let* ((_stale_6 (cgframe:slot_stale _entry_3)) (_probe_9 (assq #t _stale_6))) (let () (if _probe_9 (let ((_n_15 (let ((_x_16_19 _probe_9)) (begin (_check! (pair? _x_16_19) 1 _x_16_19) (cdr:pair _x_16_19))))) (begin (if (zero? _n_15) (cgframe-used! _frame_3) (unspecified)) (set-car! _probe_9 #f) _n_15)) (let* ((_cell_22 (cgframe-size-cell _frame_3)) (_n_25 (+ 1 (let ((_x_29_32 _cell_22)) (begin (_check! (pair? _x_29_32) 0 _x_29_32) (car:pair _x_29_32)))))) (let () (begin (set-car! _cell_22 _n_25) (if (zero? _n_25) (_cgframe:unused-slot_2 _frame_3 _entry_3) _n_25))))))))) (_cgframe:unused-slot_2 _frame_1 _entry_1))))) 'cgframe:unused-slot))
(let () (begin (set! cgframe-initial (lambda () (let ((_cgframe-initial_2 0)) (begin (set! _cgframe-initial_2 (lambda () (let* ((_t1_4_7 '()) (_t2_4_10 (let* ((_t1_14_17 (cons (cons #t 0) '())) (_t2_14_20 (let* ((_t1_24_27 #f) (_t2_24_30 (cons -1 '()))) (let () (cons _t1_24_27 _t2_24_30))))) (let () (cons _t1_14_17 _t2_14_20))))) (let () (cons _t1_4_7 _t2_4_10))))) (_cgframe-initial_2))))) 'cgframe-initial))
(let () (begin (set! cgframe-livevars cgframe:livevars) 'cgframe-livevars))
(let () (begin (set! cgframe-livevars-set! cgframe:livevars-set!) 'cgframe-livevars-set!))
(let () (begin (set! cgframe-size-cell (lambda (_frame_1) (let ((_cgframe-size-cell_2 0)) (begin (set! _cgframe-size-cell_2 (lambda (_frame_3) (let ((_x_5_8 (let ((_x_9_12 (let ((_x_13_16 _frame_3)) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 1 _x_5_8) (cdr:pair _x_5_8))))) (_cgframe-size-cell_2 _frame_1))))) 'cgframe-size-cell))
(let () (begin (set! cgframe-size (lambda (_frame_1) (let ((_cgframe-size_2 0)) (begin (set! _cgframe-size_2 (lambda (_frame_3) (let ((_x_4_7 (cgframe-size-cell _frame_3))) (begin (_check! (pair? _x_4_7) 0 _x_4_7) (car:pair _x_4_7))))) (_cgframe-size_2 _frame_1))))) 'cgframe-size))
(let () (begin (set! cgframe-used! (lambda (_frame_1) (let ((_cgframe-used!_2 0)) (begin (set! _cgframe-used!_2 (lambda (_frame_3) (if (< (cgframe-size _frame_3) 0) (set-car! (cgframe-size-cell _frame_3) 0) (unspecified)))) (_cgframe-used!_2 _frame_1))))) 'cgframe-used!))
(let () (begin (set! cgframe-bind! (lambda (_frame_1 _var_1 _instruction_1) (let ((_cgframe-bind!_2 0)) (begin (set! _cgframe-bind!_2 (lambda (_frame_3 _var_3 _instruction_3) (cgframe:slots-set! _frame_3 (cons (let* ((_t1_4_7 _var_3) (_t2_4_10 (let* ((_t1_14_17 #f) (_t2_14_20 (let* ((_t1_24_27 _instruction_3) (_t2_24_30 (cons (cgframe:stale _frame_3) '()))) (let () (cons _t1_24_27 _t2_24_30))))) (let () (cons _t1_14_17 _t2_14_20))))) (let () (cons _t1_4_7 _t2_4_10))) (cgframe:slots _frame_3))))) (_cgframe-bind!_2 _frame_1 _var_1 _instruction_1))))) 'cgframe-bind!))
(let () (begin (set! cgframe-touch! (lambda (_frame_1 _var_1) (let ((_cgframe-touch!_2 0)) (begin (set! _cgframe-touch!_2 (lambda (_frame_3 _var_3) (let ((_entry_6 (assq _var_3 (cgframe:slots _frame_3)))) (if _entry_6 (let ((_n_9 (cgframe:slot_offset _entry_6))) (if (eq? #f _n_9) (let ((_n_12 (cgframe:unused-slot _frame_3 _entry_6))) (cgframe:slot_offset-set! _entry_6 _n_12)) (unspecified))) (error "Compiler bug: cgframe-touch!" _frame_3 _var_3))))) (_cgframe-touch!_2 _frame_1 _var_1))))) 'cgframe-touch!))
(let () (begin (set! cgframe-rename! (lambda (_frame_1 _alist_1) (let ((_cgframe-rename!_2 0)) (begin (set! _cgframe-rename!_2 (lambda (_frame_3 _alist_3) (let () (let ((_loop_9_11_14 (unspecified))) (begin (set! _loop_9_11_14 (lambda (_y1_4_5_15) (if (null? _y1_4_5_15) (if #f #f (unspecified)) (begin (begin #t (let* ((_entry_19 (let ((_x_27_30 _y1_4_5_15)) (begin (_check! (pair? _x_27_30) 0 _x_27_30) (car:pair _x_27_30)))) (_probe_22 (assq (cgframe:slot_name _entry_19) _alist_3))) (if _probe_22 (cgframe:slot_name-set! _entry_19 (let ((_x_23_26 _probe_22)) (begin (_check! (pair? _x_23_26) 1 _x_23_26) (cdr:pair _x_23_26)))) (unspecified)))) (_loop_9_11_14 (let ((_x_31_34 _y1_4_5_15)) (begin (_check! (pair? _x_31_34) 1 _x_31_34) (cdr:pair _x_31_34)))))))) (_loop_9_11_14 (cgframe:slots _frame_3))))))) (_cgframe-rename!_2 _frame_1 _alist_1))))) 'cgframe-rename!))
(let () (begin (set! cgframe-release! (lambda (_frame_1 _var_1) (let ((_cgframe-release!_2 0)) (begin (set! _cgframe-release!_2 (lambda (_frame_3 _var_3) (let* ((_slots_6 (cgframe:slots _frame_3)) (_entry_9 (assq _var_3 _slots_6))) (let () (if _entry_9 (begin (cgframe:slots-set! _frame_3 (remq _entry_9 _slots_6)) (let ((_n_15 (cgframe:slot_offset _entry_9))) (if (if (not (eq? #f _n_15)) (not (zero? _n_15)) #f) (cgframe:stale-set! _frame_3 (cons (cons #t _n_15) (cgframe:stale _frame_3))) (unspecified)))) (unspecified)))))) (_cgframe-release!_2 _frame_1 _var_1))))) 'cgframe-release!))
(let () (begin (set! cgframe-release-except! (lambda (_frame_1 _vars_1) (let ((_cgframe-release-except!_2 0)) (begin (set! _cgframe-release-except!_2 (lambda (_frame_3 _vars_3) (let ((_slots_6 (reverse (cgframe:slots _frame_3))) (_newslots_6 '()) (_stale_6 (cgframe:stale _frame_3))) (let () (let ((_loop_9 (unspecified))) (begin (set! _loop_9 (lambda (_slots_10 _newslots_10 _stale_10) (if (null? _slots_10) (begin (cgframe:slots-set! _frame_3 _newslots_10) (cgframe:stale-set! _frame_3 _stale_10)) (let ((_slot_13 (let ((_x_36_39 _slots_10)) (begin (_check! (pair? _x_36_39) 0 _x_36_39) (car:pair _x_36_39))))) (if (memq (cgframe:slot_name _slot_13) _vars_3) (_loop_9 (let ((_x_14_17 _slots_10)) (begin (_check! (pair? _x_14_17) 1 _x_14_17) (cdr:pair _x_14_17))) (cons _slot_13 _newslots_10) _stale_10) (let ((_n_20 (cgframe:slot_offset _slot_13))) (if (eq? _n_20 #f) (_loop_9 (let ((_x_22_25 _slots_10)) (begin (_check! (pair? _x_22_25) 1 _x_22_25) (cdr:pair _x_22_25))) _newslots_10 _stale_10) (if (zero? _n_20) (_loop_9 (let ((_x_27_30 _slots_10)) (begin (_check! (pair? _x_27_30) 1 _x_27_30) (cdr:pair _x_27_30))) (cons _slot_13 _newslots_10) _stale_10) (_loop_9 (let ((_x_32_35 _slots_10)) (begin (_check! (pair? _x_32_35) 1 _x_32_35) (cdr:pair _x_32_35))) _newslots_10 (cons (cons #t _n_20) _stale_10)))))))))) (_loop_9 _slots_6 _newslots_6 _stale_6))))))) (_cgframe-release-except!_2 _frame_1 _vars_1))))) 'cgframe-release-except!))
(let () (begin (set! cgframe-lookup (lambda (_frame_1 _var_1) (let ((_cgframe-lookup_2 0)) (begin (set! _cgframe-lookup_2 (lambda (_frame_3 _var_3) (let ((_entry_6 (assq _var_3 (cgframe:slots _frame_3)))) (if _entry_6 (let ((_n_9 (cgframe:slot_offset _entry_6))) (begin (if (eq? #f _n_9) (cgframe-touch! _frame_3 _var_3) (unspecified)) (let* ((_t1_10_13 _var_3) (_t2_10_16 (let* ((_t1_20_23 'frame) (_t2_20_26 (let* ((_t1_30_33 (cgframe:slot_offset _entry_6)) (_t2_30_36 (cons '(object) '()))) (let () (cons _t1_30_33 _t2_30_36))))) (let () (cons _t1_20_23 _t2_20_26))))) (let () (cons _t1_10_13 _t2_10_16))))) #f)))) (_cgframe-lookup_2 _frame_1 _var_1))))) 'cgframe-lookup))
(let () (begin (set! cgframe-spilled? (lambda (_frame_1 _var_1) (let ((_cgframe-spilled?_2 0)) (begin (set! _cgframe-spilled?_2 (lambda (_frame_3 _var_3) (let ((_entry_6 (assq _var_3 (cgframe:slots _frame_3)))) (if _entry_6 (let ((_n_9 (cgframe:slot_offset _entry_6))) (not (eq? #f _n_9))) #f)))) (_cgframe-spilled?_2 _frame_1 _var_1))))) 'cgframe-spilled?))
(let () (begin (set! cgframe-copy (lambda (_frame_1) (let ((_cgframe-copy_2 0)) (begin (set! _cgframe-copy_2 (lambda (_frame_3) (cons (let ((_x_4_7 _frame_3)) (begin (_check! (pair? _x_4_7) 0 _x_4_7) (car:pair _x_4_7))) (cons (let ((_x_9_12 (let ((_x_13_16 _frame_3)) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 0 _x_9_12) (car:pair _x_9_12))) (cons (let ((_x_18_21 (let ((_x_22_25 (let ((_x_26_29 _frame_3)) (begin (_check! (pair? _x_26_29) 1 _x_26_29) (cdr:pair _x_26_29))))) (begin (_check! (pair? _x_22_25) 1 _x_22_25) (cdr:pair _x_22_25))))) (begin (_check! (pair? _x_18_21) 0 _x_18_21) (car:pair _x_18_21))) (let ((_x_31_34 (let ((_x_35_38 (let ((_x_39_42 _frame_3)) (begin (_check! (pair? _x_39_42) 1 _x_39_42) (cdr:pair _x_39_42))))) (begin (_check! (pair? _x_35_38) 1 _x_35_38) (cdr:pair _x_35_38))))) (begin (_check! (pair? _x_31_34) 1 _x_31_34) (cdr:pair _x_31_34)))))))) (_cgframe-copy_2 _frame_1))))) 'cgframe-copy))
(let () (begin (set! cgframe-update-stale! (lambda (_frame_1) (let ((_cgframe-update-stale!_2 0)) (begin (set! _cgframe-update-stale!_2 (lambda (_frame_3) (let* ((_n_6 (cgframe-size _frame_3)) (_v_9 (make-vector (+ 1 _n_6) #t)) (_stale_12 (cgframe:stale _frame_3))) (let () (begin (let () (let ((_loop_21_23_26 (unspecified))) (begin (set! _loop_21_23_26 (lambda (_y1_16_17_27) (if (null? _y1_16_17_27) (if #f #f (unspecified)) (begin (begin #t (let ((_x_31 (let ((_x_47_50 _y1_16_17_27)) (begin (_check! (pair? _x_47_50) 0 _x_47_50) (car:pair _x_47_50))))) (if (let ((_x_32_35 _x_31)) (begin (_check! (pair? _x_32_35) 0 _x_32_35) (car:pair _x_32_35))) (let ((_i_38 (let ((_x_43_46 _x_31)) (begin (_check! (pair? _x_43_46) 1 _x_43_46) (cdr:pair _x_43_46))))) (if (<= _i_38 _n_6) (let ((_v_39_42 _v_9) (_i_39_42 _i_38) (_x_39_42 #f)) (begin (_check! (fixnum? _i_39_42) 41 _v_39_42 _i_39_42 _x_39_42) (_check! (vector? _v_39_42) 41 _v_39_42 _i_39_42 _x_39_42) (_check! (<:fix:fix _i_39_42 (vector-length:vec _v_39_42)) 41 _v_39_42 _i_39_42 _x_39_42) (_check! (>=:fix:fix _i_39_42 0) 41 _v_39_42 _i_39_42 _x_39_42) (vector-set!:trusted _v_39_42 _i_39_42 _x_39_42))) (unspecified))) (unspecified)))) (_loop_21_23_26 (let ((_x_51_54 _y1_16_17_27)) (begin (_check! (pair? _x_51_54) 1 _x_51_54) (cdr:pair _x_51_54)))))))) (_loop_21_23_26 _stale_12)))) (let () (let ((_loop_60_62_65 (unspecified))) (begin (set! _loop_60_62_65 (lambda (_y1_55_56_66) (if (null? _y1_55_56_66) (if #f #f (unspecified)) (begin (begin #t (let* ((_slot_70 (let ((_x_117_120 _y1_55_56_66)) (begin (_check! (pair? _x_117_120) 0 _x_117_120) (car:pair _x_117_120)))) (_offset_73 (cgframe:slot_offset _slot_70))) (if _offset_73 (let ((_v_74_77 _v_9) (_i_74_77 _offset_73) (_x_74_77 #f)) (begin (_check! (fixnum? _i_74_77) 41 _v_74_77 _i_74_77 _x_74_77) (_check! (vector? _v_74_77) 41 _v_74_77 _i_74_77 _x_74_77) (_check! (<:fix:fix _i_74_77 (vector-length:vec _v_74_77)) 41 _v_74_77 _i_74_77 _x_74_77) (_check! (>=:fix:fix _i_74_77 0) 41 _v_74_77 _i_74_77 _x_74_77) (vector-set!:trusted _v_74_77 _i_74_77 _x_74_77))) (let () (let ((_loop_83_85_88 (unspecified))) (begin (set! _loop_83_85_88 (lambda (_y1_78_79_89) (if (null? _y1_78_79_89) (if #f #f (unspecified)) (begin (begin #t (let ((_stale_93 (let ((_x_109_112 _y1_78_79_89)) (begin (_check! (pair? _x_109_112) 0 _x_109_112) (car:pair _x_109_112))))) (if (let ((_x_94_97 _stale_93)) (begin (_check! (pair? _x_94_97) 0 _x_94_97) (car:pair _x_94_97))) (let ((_i_100 (let ((_x_105_108 _stale_93)) (begin (_check! (pair? _x_105_108) 1 _x_105_108) (cdr:pair _x_105_108))))) (if (< _i_100 _n_6) (let ((_v_101_104 _v_9) (_i_101_104 _i_100) (_x_101_104 #f)) (begin (_check! (fixnum? _i_101_104) 41 _v_101_104 _i_101_104 _x_101_104) (_check! (vector? _v_101_104) 41 _v_101_104 _i_101_104 _x_101_104) (_check! (<:fix:fix _i_101_104 (vector-length:vec _v_101_104)) 41 _v_101_104 _i_101_104 _x_101_104) (_check! (>=:fix:fix _i_101_104 0) 41 _v_101_104 _i_101_104 _x_101_104) (vector-set!:trusted _v_101_104 _i_101_104 _x_101_104))) (unspecified))) (unspecified)))) (_loop_83_85_88 (let ((_x_113_116 _y1_78_79_89)) (begin (_check! (pair? _x_113_116) 1 _x_113_116) (cdr:pair _x_113_116)))))))) (_loop_83_85_88 (cgframe:slot_stale _slot_70)))))))) (_loop_60_62_65 (let ((_x_121_124 _y1_55_56_66)) (begin (_check! (pair? _x_121_124) 1 _x_121_124) (cdr:pair _x_121_124)))))))) (_loop_60_62_65 (cgframe:slots _frame_3))))) (let () (let ((_loop_125_128_131 (unspecified))) (begin (set! _loop_125_128_131 (lambda (_i_132 _stale_132) (if (<= _i_132 0) (cgframe:stale-set! _frame_3 _stale_132) (begin #t (_loop_125_128_131 (- _i_132 1) (if (let ((_v_135_138 _v_9) (_i_135_138 _i_132)) (begin (_check! (fixnum? _i_135_138) 40 _v_135_138 _i_135_138) (_check! (vector? _v_135_138) 40 _v_135_138 _i_135_138) (_check! (<:fix:fix _i_135_138 (vector-length:vec _v_135_138)) 40 _v_135_138 _i_135_138) (_check! (>=:fix:fix _i_135_138 0) 40 _v_135_138 _i_135_138) (vector-ref:trusted _v_135_138 _i_135_138))) (cons (cons #t _i_132) _stale_132) _stale_132)))))) (_loop_125_128_131 _n_6 (filter car _stale_12)))))))))) (_cgframe-update-stale!_2 _frame_1))))) 'cgframe-update-stale!))
(let () (begin (set! cgframe-join! (lambda (_frame1_1 _frame2_1) (let ((_cgframe-join!_2 0)) (begin (set! _cgframe-join!_2 (lambda (_frame1_3 _frame2_3) (let* ((_slots1_6 (cgframe:slots _frame1_3)) (_slots2_9 (cgframe:slots _frame2_3)) (_slots_12 (intersection _slots1_6 _slots2_9)) (_deadslots_15 (append (difference _slots1_6 _slots_12) (difference _slots2_9 _slots_12))) (_deadoffsets_18 (make-set (filter (lambda (_x_59) (not (eq? _x_59 #f))) (let () (let ((_loop_65_68_71 (unspecified))) (begin (set! _loop_65_68_71 (lambda (_y1_60_61_72 _results_60_64_72) (if (null? _y1_60_61_72) (reverse _results_60_64_72) (begin #t (_loop_65_68_71 (let ((_x_76_79 _y1_60_61_72)) (begin (_check! (pair? _x_76_79) 1 _x_76_79) (cdr:pair _x_76_79))) (cons (cgframe:slot_offset (let ((_x_80_83 _y1_60_61_72)) (begin (_check! (pair? _x_80_83) 0 _x_80_83) (car:pair _x_80_83)))) _results_60_64_72)))))) (_loop_65_68_71 _deadslots_15 '()))))))) (_stale1_21 (cgframe:stale _frame1_3)) (_stale2_24 (cgframe:stale _frame2_3)) (_stale_27 (intersection _stale1_21 _stale2_24)) (_stale_30 (append (let () (let ((_loop_39_42_45 (unspecified))) (begin (set! _loop_39_42_45 (lambda (_y1_34_35_46 _results_34_38_46) (if (null? _y1_34_35_46) (reverse _results_34_38_46) (begin #t (_loop_39_42_45 (let ((_x_50_53 _y1_34_35_46)) (begin (_check! (pair? _x_50_53) 1 _x_50_53) (cdr:pair _x_50_53))) (cons (let ((_n_54 (let ((_x_55_58 _y1_34_35_46)) (begin (_check! (pair? _x_55_58) 0 _x_55_58) (car:pair _x_55_58))))) (cons #t _n_54)) _results_34_38_46)))))) (_loop_39_42_45 _deadoffsets_18 '())))) _stale_27))) (let () (begin (cgframe:slots-set! _frame1_3 _slots_12) (cgframe:stale-set! _frame1_3 _stale_30)))))) (_cgframe-join!_2 _frame1_1 _frame2_1))))) 'cgframe-join!))
(let () (begin (set! entry_name car) 'entry_name))
(let () (begin (set! entry_kind cadr) 'entry_kind))
(let () (begin (set! entry_rib caddr) 'entry_rib))
(let () (begin (set! entry_offset cadddr) 'entry_offset))
(let () (begin (set! entry_label cadddr) 'entry_label))
(let () (begin (set! entry_regnum caddr) 'entry_regnum))
(let () (begin (set! entry_slotnum caddr) 'entry_slotnum))
(let () (begin (set! entry_arity caddr) 'entry_arity))
(let () (begin (set! entry_op cadddr) 'entry_op))
(let () (begin (set! entry_imm (lambda (_entry_1) (let ((_entry_imm_2 0)) (begin (set! _entry_imm_2 (lambda (_entry_3) (let ((_x_4_7 (let ((_x_9_12 (let ((_x_13_16 (let ((_x_17_20 (let ((_x_21_24 _entry_3)) (begin (_check! (pair? _x_21_24) 1 _x_21_24) (cdr:pair _x_21_24))))) (begin (_check! (pair? _x_17_20) 1 _x_17_20) (cdr:pair _x_17_20))))) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_4_7) 0 _x_4_7) (car:pair _x_4_7))))) (_entry_imm_2 _entry_1))))) 'entry_imm))
(let () (begin (set! cgenv-initial (lambda (_integrable_1) (let ((_cgenv-initial_2 0)) (begin (set! _cgenv-initial_2 (lambda (_integrable_3) (cons (let () (let ((_loop_10_13_16 (unspecified))) (begin (set! _loop_10_13_16 (lambda (_y1_5_6_17 _results_5_9_17) (if (null? _y1_5_6_17) (reverse _results_5_9_17) (begin #t (_loop_10_13_16 (let ((_x_21_24 _y1_5_6_17)) (begin (_check! (pair? _x_21_24) 1 _x_21_24) (cdr:pair _x_21_24))) (cons (let* ((_x_25 (let ((_x_120_123 _y1_5_6_17)) (begin (_check! (pair? _x_120_123) 0 _x_120_123) (car:pair _x_120_123)))) (_t1_26_29 (let ((_x_116_119 _x_25)) (begin (_check! (pair? _x_116_119) 0 _x_116_119) (car:pair _x_116_119)))) (_t2_26_32 (let* ((_t1_36_39 'integrable) (_t2_36_42 (let* ((_t1_46_49 (let ((_x_108_111 (let ((_x_112_115 _x_25)) (begin (_check! (pair? _x_112_115) 1 _x_112_115) (cdr:pair _x_112_115))))) (begin (_check! (pair? _x_108_111) 0 _x_108_111) (car:pair _x_108_111)))) (_t2_46_52 (let* ((_t1_56_59 (let ((_x_95_98 (let ((_x_99_102 (let ((_x_103_106 _x_25)) (begin (_check! (pair? _x_103_106) 1 _x_103_106) (cdr:pair _x_103_106))))) (begin (_check! (pair? _x_99_102) 1 _x_99_102) (cdr:pair _x_99_102))))) (begin (_check! (pair? _x_95_98) 0 _x_95_98) (car:pair _x_95_98)))) (_t2_56_62 (let* ((_t1_66_69 (let ((_x_78_81 (let ((_x_82_85 (let ((_x_86_89 (let ((_x_90_93 _x_25)) (begin (_check! (pair? _x_90_93) 1 _x_90_93) (cdr:pair _x_90_93))))) (begin (_check! (pair? _x_86_89) 1 _x_86_89) (cdr:pair _x_86_89))))) (begin (_check! (pair? _x_82_85) 1 _x_82_85) (cdr:pair _x_82_85))))) (begin (_check! (pair? _x_78_81) 0 _x_78_81) (car:pair _x_78_81)))) (_t2_66_72 (cons '(object) '()))) (let () (cons _t1_66_69 _t2_66_72))))) (let () (cons _t1_56_59 _t2_56_62))))) (let () (cons _t1_46_49 _t2_46_52))))) (let () (cons _t1_36_39 _t2_36_42))))) (let () (cons _t1_26_29 _t2_26_32))) _results_5_9_17)))))) (_loop_10_13_16 _integrable_3 '())))) '()))) (_cgenv-initial_2 _integrable_1))))) 'cgenv-initial))
(let () (begin (set! cgenv-lookup (lambda (_env_1 _id_1) (let ((_cgenv-lookup_2 0)) (begin (set! _cgenv-lookup_2 (lambda (_env_3 _id_3) (let ((_loop_4 (unspecified))) (begin (set! _loop_4 (lambda (_ribs_5 _m_5) (if (null? _ribs_5) (cons _id_3 '(global (object))) (let ((_x_8 (assq _id_3 (let ((_x_66_69 _ribs_5)) (begin (_check! (pair? _x_66_69) 0 _x_66_69) (car:pair _x_66_69)))))) (if _x_8 (let ((_temp_9_12 (let ((_x_54_57 (let ((_x_58_61 _x_8)) (begin (_check! (pair? _x_58_61) 1 _x_58_61) (cdr:pair _x_58_61))))) (begin (_check! (pair? _x_54_57) 0 _x_54_57) (car:pair _x_54_57))))) (if (memv _temp_9_12 '(lexical)) (cons _id_3 (cons (let ((_x_15_18 (let ((_x_19_22 _x_8)) (begin (_check! (pair? _x_19_22) 1 _x_19_22) (cdr:pair _x_19_22))))) (begin (_check! (pair? _x_15_18) 0 _x_15_18) (car:pair _x_15_18))) (cons _m_5 (let ((_x_24_27 (let ((_x_28_31 _x_8)) (begin (_check! (pair? _x_28_31) 1 _x_28_31) (cdr:pair _x_28_31))))) (begin (_check! (pair? _x_24_27) 1 _x_24_27) (cdr:pair _x_24_27)))))) (if (memv _temp_9_12 '(procedure)) (cons _id_3 (cons (let ((_x_34_37 (let ((_x_38_41 _x_8)) (begin (_check! (pair? _x_38_41) 1 _x_38_41) (cdr:pair _x_38_41))))) (begin (_check! (pair? _x_34_37) 0 _x_34_37) (car:pair _x_34_37))) (cons _m_5 (let ((_x_43_46 (let ((_x_47_50 _x_8)) (begin (_check! (pair? _x_47_50) 1 _x_47_50) (cdr:pair _x_47_50))))) (begin (_check! (pair? _x_43_46) 1 _x_43_46) (cdr:pair _x_43_46)))))) (if (memv _temp_9_12 '(integrable)) (if (integrate-usual-procedures) _x_8 (_loop_4 '() _m_5)) ???)))) (_loop_4 (let ((_x_62_65 _ribs_5)) (begin (_check! (pair? _x_62_65) 1 _x_62_65) (cdr:pair _x_62_65))) (+ _m_5 1))))))) (_loop_4 _env_3 0))))) (_cgenv-lookup_2 _env_1 _id_1))))) 'cgenv-lookup))
(let () (begin (set! cgenv-extend (lambda (_env_1 _vars_1 _procs_1) (let ((_cgenv-extend_2 0)) (begin (set! _cgenv-extend_2 (lambda (_env_3 _vars_3 _procs_3) (cons (let () (let ((_loop_4_8_11 (unspecified))) (begin (set! _loop_4_8_11 (lambda (_n_12 _vars_12 _rib_12) (if (null? _vars_12) _rib_12 (begin #t (_loop_4_8_11 (+ _n_12 1) (let ((_x_15_18 _vars_12)) (begin (_check! (pair? _x_15_18) 1 _x_15_18) (cdr:pair _x_15_18))) (cons (let* ((_t1_19_22 (let ((_x_50_53 _vars_12)) (begin (_check! (pair? _x_50_53) 0 _x_50_53) (car:pair _x_50_53)))) (_t2_19_25 (let* ((_t1_29_32 'lexical) (_t2_29_35 (let* ((_t1_39_42 _n_12) (_t2_39_45 (cons '(object) '()))) (let () (cons _t1_39_42 _t2_39_45))))) (let () (cons _t1_29_32 _t2_29_35))))) (let () (cons _t1_19_22 _t2_19_25))) _rib_12)))))) (_loop_4_8_11 0 _vars_3 (let () (let ((_loop_59_62_65 (unspecified))) (begin (set! _loop_59_62_65 (lambda (_y1_54_55_66 _results_54_58_66) (if (null? _y1_54_55_66) (reverse _results_54_58_66) (begin #t (_loop_59_62_65 (let ((_x_70_73 _y1_54_55_66)) (begin (_check! (pair? _x_70_73) 1 _x_70_73) (cdr:pair _x_70_73))) (cons (let* ((_id_74 (let ((_x_106_109 _y1_54_55_66)) (begin (_check! (pair? _x_106_109) 0 _x_106_109) (car:pair _x_106_109)))) (_t1_75_78 _id_74) (_t2_75_81 (let* ((_t1_85_88 'procedure) (_t2_85_91 (let* ((_t1_95_98 (make-label)) (_t2_95_101 (cons '(object) '()))) (let () (cons _t1_95_98 _t2_95_101))))) (let () (cons _t1_85_88 _t2_85_91))))) (let () (cons _t1_75_78 _t2_75_81))) _results_54_58_66)))))) (_loop_59_62_65 _procs_3 '())))))))) _env_3))) (_cgenv-extend_2 _env_1 _vars_1 _procs_1))))) 'cgenv-extend))
(let () (begin (set! cgenv-bindprocs (lambda (_env_1 _procs_1) (let ((_cgenv-bindprocs_2 0)) (begin (set! _cgenv-bindprocs_2 (lambda (_env_3 _procs_3) (cons (append (let () (let ((_loop_9_12_15 (unspecified))) (begin (set! _loop_9_12_15 (lambda (_y1_4_5_16 _results_4_8_16) (if (null? _y1_4_5_16) (reverse _results_4_8_16) (begin #t (_loop_9_12_15 (let ((_x_20_23 _y1_4_5_16)) (begin (_check! (pair? _x_20_23) 1 _x_20_23) (cdr:pair _x_20_23))) (cons (let* ((_id_24 (let ((_x_56_59 _y1_4_5_16)) (begin (_check! (pair? _x_56_59) 0 _x_56_59) (car:pair _x_56_59)))) (_t1_25_28 _id_24) (_t2_25_31 (let* ((_t1_35_38 'procedure) (_t2_35_41 (let* ((_t1_45_48 (make-label)) (_t2_45_51 (cons '(object) '()))) (let () (cons _t1_45_48 _t2_45_51))))) (let () (cons _t1_35_38 _t2_35_41))))) (let () (cons _t1_25_28 _t2_25_31))) _results_4_8_16)))))) (_loop_9_12_15 _procs_3 '())))) (let ((_x_60_63 _env_3)) (begin (_check! (pair? _x_60_63) 0 _x_60_63) (car:pair _x_60_63)))) (let ((_x_64_67 _env_3)) (begin (_check! (pair? _x_64_67) 1 _x_64_67) (cdr:pair _x_64_67)))))) (_cgenv-bindprocs_2 _env_1 _procs_1))))) 'cgenv-bindprocs))
(let () (begin (set! var-lookup (lambda (_var_1 _regs_1 _frame_1 _env_1) (let ((_var-lookup_2 0)) (begin (set! _var-lookup_2 (lambda (_var_3 _regs_3 _frame_3 _env_3) (let ((_temp_4_7 (cgreg-lookup _regs_3 _var_3))) (if _temp_4_7 _temp_4_7 (let ((_temp_8_11 (cgframe-lookup _frame_3 _var_3))) (if _temp_8_11 _temp_8_11 (cgenv-lookup _env_3 _var_3))))))) (_var-lookup_2 _var_1 _regs_1 _frame_1 _env_1))))) 'var-lookup))
(let () (begin (set! compile (lambda (_x_1) (pass4 (pass3 (pass2 (pass1 _x_1))) $usual-integrable-procedures$))) 'compile))
(let () (begin (set! compile-block (lambda (_x_1) (pass4 (pass3 (pass2 (pass1-block _x_1))) $usual-integrable-procedures$))) 'compile-block))
(let () (begin (set! foo (lambda (_x_1) (pretty-print (compile _x_1)))) 'foo))
(let () (begin (set! minregs (lambda (_x_1) (let ((_minregs_2 0)) (begin (set! _minregs_2 (lambda (_x_3) (let ((_defregs_4 (unspecified))) (begin (set! _defregs_4 (lambda (_r_5) (begin (set! *nregs* _r_5) (set! *lastreg* (- *nregs* 1)) (set! *fullregs* (quotient *nregs* 2))))) (_defregs_4 32) (let* ((_code_8 (assemble (compile _x_3))) (_binary-search_9 (unspecified))) (begin (set! _binary-search_9 (lambda (_m1_10 _m2_10) (if (= (+ _m1_10 1) _m2_10) _m2_10 (let ((_midpt_13 (quotient (+ _m1_10 _m2_10) 2))) (begin (_defregs_4 _midpt_13) (if (equal? _code_8 (assemble (compile _x_3))) (_binary-search_9 _m1_10 _midpt_13) (_binary-search_9 _midpt_13 _m2_10))))))) (_defregs_4 4) (let ((_newcode_16 (assemble (compile _x_3)))) (if (equal? _code_8 _newcode_16) 4 (_binary-search_9 4 32))))))))) (_minregs_2 _x_1))))) 'minregs))
(let () (begin (set! pass4 (lambda (_exp_1 _integrable_1) (let ((_pass4_2 0)) (begin (set! _pass4_2 (lambda (_exp_3 _integrable_3) (begin (init-labels) (init-temps) (let ((_output_6 (make-assembly-stream)) (_frame_6 (cgframe-initial)) (_regs_6 (cgreg-initial)) (_t0_6 (newtemp))) (begin (assembly-stream-info! _output_6 (make-hashtable equal-hash assoc)) (cgreg-bind! _regs_6 0 _t0_6) (gen-save! _output_6 _frame_6 _t0_6) (cg0 _output_6 _exp_3 'result _regs_6 _frame_6 (cgenv-initial _integrable_3) #t) (pass4-code _output_6)))))) (_pass4_2 _exp_1 _integrable_1))))) 'pass4))
(let () (begin (set! pass4-code (lambda (_output_1) (let ((_pass4-code_2 0)) (begin (set! _pass4-code_2 (lambda (_output_3) (begin (hashtable-for-each (lambda (_situation_4 _label_4) (cg-trap _output_3 _situation_4 _label_4)) (assembly-stream-info _output_3)) (assembly-stream-code _output_3)))) (_pass4-code_2 _output_1))))) 'pass4-code))
(let () (begin (set! cg0 (lambda (_output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1) (let ((_cg0_2 0)) (begin (set! _cg0_2 (lambda (_output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (let ((_temp_4_7 (let ((_x_14_17 _exp_3)) (begin (_check! (pair? _x_14_17) 0 _x_14_17) (car:pair _x_14_17))))) (if (memv _temp_4_7 '(quote)) (begin (gen! _output_3 $const (constant_value _exp_3)) (if _tail?_3 (begin (gen-pop! _output_3 _frame_3) (gen! _output_3 $return) 'result) (cg-move _output_3 _frame_3 _regs_3 'result _target_3))) (if (memv _temp_4_7 '(lambda)) (begin (cg-lambda _output_3 _exp_3 _regs_3 _frame_3 _env_3) (if _tail?_3 (begin (gen-pop! _output_3 _frame_3) (gen! _output_3 $return) 'result) (cg-move _output_3 _frame_3 _regs_3 'result _target_3))) (if (memv _temp_4_7 '(set!)) (begin (_cg0_2 _output_3 (assignment_rhs _exp_3) 'result _regs_3 _frame_3 _env_3 #f) (cg-assignment-result _output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3)) (if (memv _temp_4_7 '(if)) (cg-if _output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (if (memv _temp_4_7 '(begin)) (if (variable? _exp_3) (cg-variable _output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (cg-sequential _output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3)) (cg-call _output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3))))))))) (_cg0_2 _output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1))))) 'cg0))
(let () (begin (set! cg-lambda (lambda (_output_1 _exp_1 _regs_1 _frame_1 _env_1) (let ((_cg-lambda_2 0)) (begin (set! _cg-lambda_2 (lambda (_output_3 _exp_3 _regs_3 _frame_3 _env_3) (let* ((_args_6 (lambda_args _exp_3)) (_vars_9 (make-null-terminated _args_6)) (_free_12 (difference (lambda_f _exp_3) _vars_9)) (_free_15 (cg-sort-vars _free_12 _regs_3 _frame_3 _env_3)) (_newenv_18 (cgenv-extend _env_3 (cons #t _free_15) '())) (_newoutput_21 (make-assembly-stream))) (let () (begin (assembly-stream-info! _newoutput_21 (make-hashtable equal-hash assoc)) (gen! _newoutput_21 $_proc) (if (list? _args_6) (gen! _newoutput_21 $args= (length _args_6)) (gen! _newoutput_21 $args>= (- (length _vars_9) 1))) (cg-known-lambda _newoutput_21 _exp_3 _newenv_18) (cg-eval-vars _output_3 _free_15 _regs_3 _frame_3 _env_3) '(if (not (ignore-space-leaks)) (begin (gen! output $const #f) (gen! output $setreg 0))) (gen! _output_3 $lambda (pass4-code _newoutput_21) (length _free_15) (lambda_doc _exp_3)) '(if (not (ignore-space-leaks)) (gen-load! output frame 0 (cgreg-lookup-reg regs 0)))))))) (_cg-lambda_2 _output_1 _exp_1 _regs_1 _frame_1 _env_1))))) 'cg-lambda))
(let () (begin (set! cg-sort-vars (lambda (_free_1 _regs_1 _frame_1 _env_1) (let ((_cg-sort-vars_2 0)) (begin (set! _cg-sort-vars_2 (lambda (_free_3 _regs_3 _frame_3 _env_3) (let* ((_free_6 (filter (lambda (_var_74) (let ((_temp_75_78 (entry_kind (var-lookup _var_74 _regs_3 _frame_3 _env_3)))) (if (memv _temp_75_78 '(register frame)) #t (if (memv _temp_75_78 '(lexical)) (not (ignore-space-leaks)) #f)))) _free_3)) (_n_9 (length _free_6)) (_m_12 (min _n_9 (- *nregs* 1))) (_vec_15 (make-vector _m_12 #f))) (let () (let ((_loop2_19 (unspecified)) (_loop1_19 (unspecified))) (begin (set! _loop2_19 (lambda (_i_20 _free_20) (if (null? _free_20) (vector->list _vec_15) (if (= _i_20 _m_12) (append (vector->list _vec_15) _free_20) (if (let ((_v_24_27 _vec_15) (_i_24_27 _i_20)) (begin (_check! (fixnum? _i_24_27) 40 _v_24_27 _i_24_27) (_check! (vector? _v_24_27) 40 _v_24_27 _i_24_27) (_check! (<:fix:fix _i_24_27 (vector-length:vec _v_24_27)) 40 _v_24_27 _i_24_27) (_check! (>=:fix:fix _i_24_27 0) 40 _v_24_27 _i_24_27) (vector-ref:trusted _v_24_27 _i_24_27))) (_loop2_19 (+ _i_20 1) _free_20) (begin (let ((_v_29_32 _vec_15) (_i_29_32 _i_20) (_x_29_32 (let ((_x_33_36 _free_20)) (begin (_check! (pair? _x_33_36) 0 _x_33_36) (car:pair _x_33_36))))) (begin (_check! (fixnum? _i_29_32) 41 _v_29_32 _i_29_32 _x_29_32) (_check! (vector? _v_29_32) 41 _v_29_32 _i_29_32 _x_29_32) (_check! (<:fix:fix _i_29_32 (vector-length:vec _v_29_32)) 41 _v_29_32 _i_29_32 _x_29_32) (_check! (>=:fix:fix _i_29_32 0) 41 _v_29_32 _i_29_32 _x_29_32) (vector-set!:trusted _v_29_32 _i_29_32 _x_29_32))) (_loop2_19 (+ _i_20 1) (let ((_x_37_40 _free_20)) (begin (_check! (pair? _x_37_40) 1 _x_37_40) (cdr:pair _x_37_40)))))))))) (set! _loop1_19 (lambda (_free_41 _free-notregister_41) (if (null? _free_41) (_loop2_19 0 _free-notregister_41) (let* ((_var_44 (let ((_x_70_73 _free_41)) (begin (_check! (pair? _x_70_73) 0 _x_70_73) (car:pair _x_70_73)))) (_entry_47 (cgreg-lookup _regs_3 _var_44))) (let () (if _entry_47 (let ((_r_53 (entry_regnum _entry_47))) (if (<= _r_53 _n_9) (begin (let ((_v_54_57 _vec_15) (_i_54_57 (- _r_53 1)) (_x_54_57 _var_44)) (begin (_check! (fixnum? _i_54_57) 41 _v_54_57 _i_54_57 _x_54_57) (_check! (vector? _v_54_57) 41 _v_54_57 _i_54_57 _x_54_57) (_check! (<:fix:fix _i_54_57 (vector-length:vec _v_54_57)) 41 _v_54_57 _i_54_57 _x_54_57) (_check! (>=:fix:fix _i_54_57 0) 41 _v_54_57 _i_54_57 _x_54_57) (vector-set!:trusted _v_54_57 _i_54_57 _x_54_57))) (_loop1_19 (let ((_x_58_61 _free_41)) (begin (_check! (pair? _x_58_61) 1 _x_58_61) (cdr:pair _x_58_61))) _free-notregister_41)) (_loop1_19 (let ((_x_62_65 _free_41)) (begin (_check! (pair? _x_62_65) 1 _x_62_65) (cdr:pair _x_62_65))) (cons _var_44 _free-notregister_41)))) (_loop1_19 (let ((_x_66_69 _free_41)) (begin (_check! (pair? _x_66_69) 1 _x_66_69) (cdr:pair _x_66_69))) (cons _var_44 _free-notregister_41)))))))) (_loop1_19 _free_6 '()))))))) (_cg-sort-vars_2 _free_1 _regs_1 _frame_1 _env_1))))) 'cg-sort-vars))
(let () (begin (set! cg-eval-vars (lambda (_output_1 _free_1 _regs_1 _frame_1 _env_1) (let ((_cg-eval-vars_2 0)) (begin (set! _cg-eval-vars_2 (lambda (_output_3 _free_3 _regs_3 _frame_3 _env_3) (let ((_n_6 (length _free_3)) (_r-1_6 (- *nregs* 1))) (begin (if (>= _n_6 _r-1_6) (begin (gen! _output_3 $const '()) (gen! _output_3 $setreg _r-1_6) (cgreg-release! _regs_3 _r-1_6)) (unspecified)) (let () (let ((_loop_8_11_14 (unspecified))) (begin (set! _loop_8_11_14 (lambda (_r_15 _vars_15) (if (zero? _r_15) (if #f #f (unspecified)) (begin (begin #t (let* ((_v_20 (let ((_x_39_42 _vars_15)) (begin (_check! (pair? _x_39_42) 0 _x_39_42) (car:pair _x_39_42)))) (_entry_23 (var-lookup _v_20 _regs_3 _frame_3 _env_3))) (let () (begin (let ((_temp_27_30 (entry_kind _entry_23))) (if (memv _temp_27_30 '(register)) (let ((_r1_34 (entry_regnum _entry_23))) (if (not (eqv? _r_15 _r1_34)) (if (< _r_15 _r-1_6) (begin (gen! _output_3 $movereg _r1_34 _r_15) (cgreg-bind! _regs_3 _r_15 _v_20)) (gen! _output_3 $reg _r1_34 _v_20)) (unspecified))) (if (memv _temp_27_30 '(frame)) (if (< _r_15 _r-1_6) (begin (gen-load! _output_3 _frame_3 _r_15 _v_20) (cgreg-bind! _regs_3 _r_15 _v_20)) (gen-stack! _output_3 _frame_3 _v_20)) (if (memv _temp_27_30 '(lexical)) (begin (gen! _output_3 $lexical (entry_rib _entry_23) (entry_offset _entry_23) _v_20) (if (< _r_15 _r-1_6) (begin (gen! _output_3 $setreg _r_15) (cgreg-bind! _regs_3 _r_15 _v_20) (gen-store! _output_3 _frame_3 _r_15 _v_20)) (unspecified))) (error "Bug in cg-close-lambda"))))) (if (>= _r_15 _r-1_6) (begin (gen! _output_3 $op2 $cons _r-1_6) (gen! _output_3 $setreg _r-1_6)) (unspecified)))))) (_loop_8_11_14 (- _r_15 1) (let ((_x_43_46 _vars_15)) (begin (_check! (pair? _x_43_46) 1 _x_43_46) (cdr:pair _x_43_46)))))))) (_loop_8_11_14 _n_6 (reverse _free_3))))))))) (_cg-eval-vars_2 _output_1 _free_1 _regs_1 _frame_1 _env_1))))) 'cg-eval-vars))
(let () (begin (set! cg-known-lambda (lambda (_output_1 _exp_1 _env_1) (let ((_cg-known-lambda_2 0)) (begin (set! _cg-known-lambda_2 (lambda (_output_3 _exp_3 _env_3) (let* ((_vars_6 (make-null-terminated (lambda_args _exp_3))) (_regs_9 (cgreg-initial)) (_frame_12 (cgframe-initial)) (_t0_15 (newtemp))) (let () (begin (if (member a-normal-form-declaration (lambda_decls _exp_3)) (cgframe-livevars-set! _frame_12 '()) (unspecified)) (cgreg-bind! _regs_9 0 _t0_15) (gen-save! _output_3 _frame_12 _t0_15) (let () (let ((_loop_19_22_25 (unspecified))) (begin (set! _loop_19_22_25 (lambda (_r_26 _vars_26) (if (let ((_temp_28_31 (null? _vars_26))) (if _temp_28_31 _temp_28_31 (= _r_26 *lastreg*))) (if (not (null? _vars_26)) (begin (gen! _output_3 $movereg *lastreg* 1) (cgreg-release! _regs_9 1) (let () (let ((_loop_34_36_39 (unspecified))) (begin (set! _loop_34_36_39 (lambda (_vars_40) (if (null? _vars_40) (if #f #f (unspecified)) (begin (begin #t (gen! _output_3 $reg 1) (gen! _output_3 $op1 $car:pair) (gen-setstk! _output_3 _frame_12 (let ((_x_43_46 _vars_40)) (begin (_check! (pair? _x_43_46) 0 _x_43_46) (car:pair _x_43_46)))) (gen! _output_3 $reg 1) (gen! _output_3 $op1 $cdr:pair) (gen! _output_3 $setreg 1)) (_loop_34_36_39 (let ((_x_47_50 _vars_40)) (begin (_check! (pair? _x_47_50) 1 _x_47_50) (cdr:pair _x_47_50)))))))) (_loop_34_36_39 _vars_26))))) (unspecified)) (begin (begin #t (cgreg-bind! _regs_9 _r_26 (let ((_x_52_55 _vars_26)) (begin (_check! (pair? _x_52_55) 0 _x_52_55) (car:pair _x_52_55)))) (gen-store! _output_3 _frame_12 _r_26 (let ((_x_56_59 _vars_26)) (begin (_check! (pair? _x_56_59) 0 _x_56_59) (car:pair _x_56_59))))) (_loop_19_22_25 (+ _r_26 1) (let ((_x_60_63 _vars_26)) (begin (_check! (pair? _x_60_63) 1 _x_60_63) (cdr:pair _x_60_63)))))))) (_loop_19_22_25 1 _vars_6)))) (cg-body _output_3 _exp_3 'result _regs_9 _frame_12 _env_3 #t)))))) (_cg-known-lambda_2 _output_1 _exp_1 _env_1))))) 'cg-known-lambda))
(let () (begin (set! cg-body (lambda (_output_1 _l_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1) (let ((_cg-body_2 0)) (begin (set! _cg-body_2 (lambda (_output_3 _l_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (let* ((_exp_6 (lambda_body _l_3)) (_defs_9 (lambda_defs _l_3)) (_free_12 (apply-union (let () (let ((_loop_153_156_159 (unspecified))) (begin (set! _loop_153_156_159 (lambda (_y1_148_149_160 _results_148_152_160) (if (null? _y1_148_149_160) (reverse _results_148_152_160) (begin #t (_loop_153_156_159 (let ((_x_164_167 _y1_148_149_160)) (begin (_check! (pair? _x_164_167) 1 _x_164_167) (cdr:pair _x_164_167))) (cons (let* ((_def_168 (let ((_x_172_175 _y1_148_149_160)) (begin (_check! (pair? _x_172_175) 0 _x_172_175) (car:pair _x_172_175)))) (_l_171 (def_rhs _def_168))) (difference (lambda_f _l_171) (lambda_args _l_171))) _results_148_152_160)))))) (_loop_153_156_159 _defs_9 '()))))))) (let () (if (let ((_temp_17_20 (null? _defs_9))) (if _temp_17_20 _temp_17_20 (let ((_temp_21_24 (constant? _exp_6))) (if _temp_21_24 _temp_21_24 (variable? _exp_6))))) (cg0 _output_3 _exp_6 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (if (lambda? _exp_6) (let* ((_free_29 (cg-sort-vars (union _free_12 (difference (lambda_f _exp_6) (make-null-terminated (lambda_args _exp_6)))) _regs_3 _frame_3 _env_3)) (_newenv1_32 (cgenv-extend _env_3 (cons #t _free_29) (let () (let ((_loop_50_53_56 (unspecified))) (begin (set! _loop_50_53_56 (lambda (_y1_45_46_57 _results_45_49_57) (if (null? _y1_45_46_57) (reverse _results_45_49_57) (begin #t (_loop_50_53_56 (let ((_x_61_64 _y1_45_46_57)) (begin (_check! (pair? _x_61_64) 1 _x_61_64) (cdr:pair _x_61_64))) (cons (def_lhs (let ((_x_65_68 _y1_45_46_57)) (begin (_check! (pair? _x_65_68) 0 _x_65_68) (car:pair _x_65_68)))) _results_45_49_57)))))) (_loop_50_53_56 _defs_9 '())))))) (_args_35 (lambda_args _exp_6)) (_vars_38 (make-null-terminated _args_35)) (_newoutput_41 (make-assembly-stream))) (let () (begin (assembly-stream-info! _newoutput_41 (make-hashtable equal-hash assoc)) (gen! _newoutput_41 $_proc) (if (list? _args_35) (gen! _newoutput_41 $args= (length _args_35)) (gen! _newoutput_41 $args>= (- (length _vars_38) 1))) (cg-known-lambda _newoutput_41 _exp_6 _newenv1_32) (cg-defs _newoutput_41 _defs_9 _newenv1_32) (cg-eval-vars _output_3 _free_29 _regs_3 _frame_3 _env_3) (gen! _output_3 $lambda (pass4-code _newoutput_41) (length _free_29) (lambda_doc _exp_6)) (if _tail?_3 (begin (gen-pop! _output_3 _frame_3) (gen! _output_3 $return) 'result) (cg-move _output_3 _frame_3 _regs_3 'result _target_3))))) (if (every? (lambda (_def_70) (every? (lambda (_v_71) (let ((_temp_72_75 (entry_kind (var-lookup _v_71 _regs_3 _frame_3 _env_3)))) (if (memv _temp_72_75 '(register frame)) #f #t))) (let ((_ldef_80 (def_rhs _def_70))) (difference (lambda_f _ldef_80) (lambda_args _ldef_80))))) _defs_9) (let* ((_newenv_83 (cgenv-bindprocs _env_3 (let () (let ((_loop_98_101_104 (unspecified))) (begin (set! _loop_98_101_104 (lambda (_y1_93_94_105 _results_93_97_105) (if (null? _y1_93_94_105) (reverse _results_93_97_105) (begin #t (_loop_98_101_104 (let ((_x_109_112 _y1_93_94_105)) (begin (_check! (pair? _x_109_112) 1 _x_109_112) (cdr:pair _x_109_112))) (cons (def_lhs (let ((_x_113_116 _y1_93_94_105)) (begin (_check! (pair? _x_113_116) 0 _x_113_116) (car:pair _x_113_116)))) _results_93_97_105)))))) (_loop_98_101_104 _defs_9 '())))))) (_l_86 (make-label)) (_r_89 (cg0 _output_3 _exp_6 _target_3 _regs_3 _frame_3 _newenv_83 _tail?_3))) (let () (begin (if (not _tail?_3) (gen! _output_3 $skip _l_86 (cgreg-live _regs_3 _r_89)) (unspecified)) (cg-defs _output_3 _defs_9 _newenv_83) (if (not _tail?_3) (gen! _output_3 $_label _l_86) (unspecified)) _r_89))) (let ((_free_120 (cg-sort-vars _free_12 _regs_3 _frame_3 _env_3))) (begin (cg-eval-vars _output_3 _free_120 _regs_3 _frame_3 _env_3) '(if (not (ignore-space-leaks)) (begin (gen! output $const #f) (gen! output $setreg 0))) (let ((_t0_123 (cgreg-lookup-reg _regs_3 0)) (_t1_123 (newtemp)) (_newenv_123 (cgenv-extend _env_3 (cons #t _free_120) (let () (let ((_loop_129_132_135 (unspecified))) (begin (set! _loop_129_132_135 (lambda (_y1_124_125_136 _results_124_128_136) (if (null? _y1_124_125_136) (reverse _results_124_128_136) (begin #t (_loop_129_132_135 (let ((_x_140_143 _y1_124_125_136)) (begin (_check! (pair? _x_140_143) 1 _x_140_143) (cdr:pair _x_140_143))) (cons (def_lhs (let ((_x_144_147 _y1_124_125_136)) (begin (_check! (pair? _x_144_147) 0 _x_144_147) (car:pair _x_144_147)))) _results_124_128_136)))))) (_loop_129_132_135 _defs_9 '())))))) (_l_123 (make-label))) (begin (gen! _output_3 $lexes (length _free_120) _free_120) (gen! _output_3 $setreg 0) (cgreg-bind! _regs_3 0 _t1_123) (if _tail?_3 (begin (cgframe-release! _frame_3 _t0_123) (gen-store! _output_3 _frame_3 0 _t1_123) (cg0 _output_3 _exp_6 'result _regs_3 _frame_3 _newenv_123 #t) (cg-defs _output_3 _defs_9 _newenv_123) 'result) (begin (gen-store! _output_3 _frame_3 0 _t1_123) (cg0 _output_3 _exp_6 'result _regs_3 _frame_3 _newenv_123 #f) (gen! _output_3 $skip _l_123 (cgreg-tos _regs_3)) (cg-defs _output_3 _defs_9 _newenv_123) (gen! _output_3 $_label _l_123) (gen-load! _output_3 _frame_3 0 _t0_123) (cgreg-bind! _regs_3 0 _t0_123) (cgframe-release! _frame_3 _t1_123) (cg-move _output_3 _frame_3 _regs_3 'result _target_3)))))))))))))) (_cg-body_2 _output_1 _l_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1))))) 'cg-body))
(let () (begin (set! cg-defs (lambda (_output_1 _defs_1 _env_1) (let ((_cg-defs_2 0)) (begin (set! _cg-defs_2 (lambda (_output_3 _defs_3 _env_3) (let ((_f_4_7_10 (lambda (_def_30) (begin (gen! _output_3 $_align 4) (gen! _output_3 $_label (entry_label (cgenv-lookup _env_3 (def_lhs _def_30)))) (gen! _output_3 $_proc) (gen! _output_3 $_proc-doc (lambda_doc (def_rhs _def_30))) (cg-known-lambda _output_3 (def_rhs _def_30) _env_3))))) (let () (let ((_loop_12_14_17 (unspecified))) (begin (set! _loop_12_14_17 (lambda (_y1_4_5_18) (if (null? _y1_4_5_18) (if #f #f (unspecified)) (begin (begin #t (_f_4_7_10 (let ((_x_22_25 _y1_4_5_18)) (begin (_check! (pair? _x_22_25) 0 _x_22_25) (car:pair _x_22_25))))) (_loop_12_14_17 (let ((_x_26_29 _y1_4_5_18)) (begin (_check! (pair? _x_26_29) 1 _x_26_29) (cdr:pair _x_26_29)))))))) (_loop_12_14_17 _defs_3))))))) (_cg-defs_2 _output_1 _defs_1 _env_1))))) 'cg-defs))
(let () (begin (set! cg-assignment-result (lambda (_output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1) (let ((_cg-assignment-result_2 0)) (begin (set! _cg-assignment-result_2 (lambda (_output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (begin (gen! _output_3 $setglbl (assignment_lhs _exp_3)) (if _tail?_3 (begin (gen-pop! _output_3 _frame_3) (gen! _output_3 $return) 'result) (cg-move _output_3 _frame_3 _regs_3 'result _target_3))))) (_cg-assignment-result_2 _output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1))))) 'cg-assignment-result))
(let () (begin (set! cg-if (lambda (_output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1) (let ((_cg-if_2 0)) (begin (set! _cg-if_2 (lambda (_output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (if (constant? (if_test _exp_3)) (cg0 _output_3 (if (constant_value (if_test _exp_3)) (if_then _exp_3) (if_else _exp_3)) _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (begin (cg0 _output_3 (if_test _exp_3) 'result _regs_3 _frame_3 _env_3 #f) (cg-if-result _output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3))))) (_cg-if_2 _output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1))))) 'cg-if))
(let () (begin (set! cg-if-result (lambda (_output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1) (let ((_cg-if-result_2 0)) (begin (set! _cg-if-result_2 (lambda (_output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (let ((_l1_6 (make-label)) (_l2_6 (make-label))) (begin (gen! _output_3 $branchf _l1_6 (cgreg-tos _regs_3)) (let* ((_regs2_9 (cgreg-copy _regs_3)) (_frame1_12 (if (if _tail?_3 (< (cgframe-size _frame_3) 0) #f) (cgframe-initial) _frame_3)) (_frame2_15 (if (eq? _frame_3 _frame1_12) (cgframe-copy _frame1_12) (cgframe-initial))) (_t0_18 (cgreg-lookup-reg _regs_3 0))) (let () (begin (if (not (eq? _frame_3 _frame1_12)) (let ((_live_24 (cgframe-livevars _frame_3))) (begin (cgframe-livevars-set! _frame1_12 _live_24) (cgframe-livevars-set! _frame2_15 _live_24) (gen-save! _output_3 _frame1_12 _t0_18) (cg-saveregs _output_3 _regs_3 _frame1_12))) (unspecified)) (let ((_r_27 (cg0 _output_3 (if_then _exp_3) _target_3 _regs_3 _frame1_12 _env_3 _tail?_3))) (begin (if (not _tail?_3) (gen! _output_3 $skip _l2_6 (cgreg-live _regs_3 _r_27)) (unspecified)) (gen! _output_3 $_label _l1_6) (if (not (eq? _frame_3 _frame1_12)) (begin (gen-save! _output_3 _frame2_15 _t0_18) (cg-saveregs _output_3 _regs2_9 _frame2_15)) (cgframe-update-stale! _frame2_15)) (cg0 _output_3 (if_else _exp_3) _r_27 _regs2_9 _frame2_15 _env_3 _tail?_3) (if (not _tail?_3) (begin (gen! _output_3 $_label _l2_6) (cgreg-join! _regs_3 _regs2_9) (cgframe-join! _frame1_12 _frame2_15)) (unspecified)) (if (if (not _target_3) (if (not (eq? _r_27 'result)) (not (cgreg-lookup-reg _regs_3 _r_27)) #f) #f) (cg-move _output_3 _frame_3 _regs_3 _r_27 'result) _r_27)))))))))) (_cg-if-result_2 _output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1))))) 'cg-if-result))
(let () (begin (set! cg-variable (lambda (_output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1) (let ((_cg-variable_2 0)) (begin (set! _cg-variable_2 (lambda (_output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (let ((_return-nostore_6 (unspecified)) (_return_6 (unspecified))) (begin (set! _return-nostore_6 (lambda (_id_7) (if _tail?_3 (begin (gen-pop! _output_3 _frame_3) (gen! _output_3 $return) 'result) (if (if _target_3 (not (eq? 'result _target_3)) #f) (begin (gen! _output_3 $setreg _target_3) (cgreg-bind! _regs_3 _target_3 _id_7) _target_3) 'result)))) (set! _return_6 (lambda (_id_10) (if _tail?_3 (begin (gen-pop! _output_3 _frame_3) (gen! _output_3 $return) 'result) (if (if _target_3 (not (eq? 'result _target_3)) #f) (begin (gen! _output_3 $setreg _target_3) (cgreg-bind! _regs_3 _target_3 _id_10) (gen-store! _output_3 _frame_3 _target_3 _id_10) _target_3) 'result)))) (let* ((_id_13 (variable_name _exp_3)) (_entry_16 (var-lookup _id_13 _regs_3 _frame_3 _env_3))) (let () (let ((_temp_20_23 (entry_kind _entry_16))) (if (memv _temp_20_23 '(global integrable)) (begin (gen! _output_3 $global _id_13) (_return_6 (newtemp))) (if (memv _temp_20_23 '(lexical)) (let ((_m_28 (entry_rib _entry_16)) (_n_28 (entry_offset _entry_16))) (begin (gen! _output_3 $lexical _m_28 _n_28 _id_13) (if (let ((_temp_29_32 (zero? _m_28))) (if _temp_29_32 _temp_29_32 (< (cgframe-size _frame_3) 0))) (_return-nostore_6 _id_13) (_return_6 _id_13)))) (if (memv _temp_20_23 '(procedure)) (error "Bug in cg-variable" _exp_3) (if (memv _temp_20_23 '(register)) (let ((_r_39 (entry_regnum _entry_16))) (if (let ((_temp_40_43 _tail?_3)) (if _temp_40_43 _temp_40_43 (if _target_3 (not (eqv? _target_3 _r_39)) #f))) (begin (gen! _output_3 $reg (entry_regnum _entry_16) _id_13) (_return-nostore_6 _id_13)) _r_39)) (if (memv _temp_20_23 '(frame)) (if (eq? _target_3 'result) (begin (gen-stack! _output_3 _frame_3 _id_13) (_return_6 _id_13)) (if _target_3 (begin (gen-load! _output_3 _frame_3 _target_3 _id_13) (cgreg-bind! _regs_3 _target_3 _id_13) _target_3) (let ((_r_54 (choose-register _regs_3 _frame_3))) (begin (gen-load! _output_3 _frame_3 _r_54 _id_13) (cgreg-bind! _regs_3 _r_54 _id_13) _r_54)))) (error "Bug in cg-variable" _exp_3))))))))))))) (_cg-variable_2 _output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1))))) 'cg-variable))
(let () (begin (set! cg-sequential (lambda (_output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1) (let ((_cg-sequential_2 0)) (begin (set! _cg-sequential_2 (lambda (_output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (cg-sequential-loop _output_3 (begin_exprs _exp_3) _target_3 _regs_3 _frame_3 _env_3 _tail?_3))) (_cg-sequential_2 _output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1))))) 'cg-sequential))
(let () (begin (set! cg-sequential-loop (lambda (_output_1 _exprs_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1) (let ((_cg-sequential-loop_2 0)) (begin (set! _cg-sequential-loop_2 (lambda (_output_3 _exprs_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (if (null? _exprs_3) (begin (gen! _output_3 $const unspecified) (if _tail?_3 (begin (gen-pop! _output_3 _frame_3) (gen! _output_3 $return) 'result) (cg-move _output_3 _frame_3 _regs_3 'result _target_3))) (if (null? (let ((_x_6_9 _exprs_3)) (begin (_check! (pair? _x_6_9) 1 _x_6_9) (cdr:pair _x_6_9)))) (cg0 _output_3 (let ((_x_10_13 _exprs_3)) (begin (_check! (pair? _x_10_13) 0 _x_10_13) (car:pair _x_10_13))) _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (begin (cg0 _output_3 (let ((_x_15_18 _exprs_3)) (begin (_check! (pair? _x_15_18) 0 _x_15_18) (car:pair _x_15_18))) #f _regs_3 _frame_3 _env_3 #f) (_cg-sequential-loop_2 _output_3 (let ((_x_19_22 _exprs_3)) (begin (_check! (pair? _x_19_22) 1 _x_19_22) (cdr:pair _x_19_22))) _target_3 _regs_3 _frame_3 _env_3 _tail?_3)))))) (_cg-sequential-loop_2 _output_1 _exprs_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1))))) 'cg-sequential-loop))
(let () (begin (set! cg-saveregs (lambda (_output_1 _regs_1 _frame_1) (let ((_cg-saveregs_2 0)) (begin (set! _cg-saveregs_2 (lambda (_output_3 _regs_3 _frame_3) (let () (let ((_loop_5_8_11 (unspecified))) (begin (set! _loop_5_8_11 (lambda (_i_12 _vars_12) (if (null? _vars_12) (if #f #f (unspecified)) (begin (begin #t (let ((_t_17 (let ((_x_18_21 _vars_12)) (begin (_check! (pair? _x_18_21) 0 _x_18_21) (car:pair _x_18_21))))) (if _t_17 (gen-store! _output_3 _frame_3 _i_12 _t_17) (unspecified)))) (_loop_5_8_11 (+ _i_12 1) (let ((_x_22_25 _vars_12)) (begin (_check! (pair? _x_22_25) 1 _x_22_25) (cdr:pair _x_22_25)))))))) (_loop_5_8_11 1 (let ((_x_26_29 (cgreg-vars _regs_3))) (begin (_check! (pair? _x_26_29) 1 _x_26_29) (cdr:pair _x_26_29))))))))) (_cg-saveregs_2 _output_1 _regs_1 _frame_1))))) 'cg-saveregs))
(let () (begin (set! cg-move (lambda (_output_1 _frame_1 _regs_1 _src_1 _dst_1) (let ((_cg-move_2 0)) (begin (set! _cg-move_2 (lambda (_output_3 _frame_3 _regs_3 _src_3 _dst_3) (let ((_bind_5 (unspecified))) (begin (set! _bind_5 (lambda (_dst_6) (let ((_temp_9 (newtemp))) (begin (cgreg-bind! _regs_3 _dst_6 _temp_9) (gen-store! _output_3 _frame_3 _dst_6 _temp_9) _dst_6)))) (if (not _dst_3) _src_3 (if (eqv? _src_3 _dst_3) _dst_3 (if (eq? _dst_3 'result) (begin (gen! _output_3 $reg _src_3) _dst_3) (if (eq? _src_3 'result) (begin (gen! _output_3 $setreg _dst_3) (_bind_5 _dst_3)) (if (if (not (zero? _src_3)) (not (zero? _dst_3)) #f) (begin (gen! _output_3 $movereg _src_3 _dst_3) (_bind_5 _dst_3)) (begin (gen! _output_3 $reg _src_3) (gen! _output_3 $setreg _dst_3) (_bind_5 _dst_3))))))))))) (_cg-move_2 _output_1 _frame_1 _regs_1 _src_1 _dst_1))))) 'cg-move))
(let () (begin (set! choose-register (lambda (_regs_1 _frame_1) (let ((_choose-register_2 0)) (begin (set! _choose-register_2 (lambda (_regs_3 _frame_3) (let ((_x_4_7 (choose-registers _regs_3 _frame_3 1))) (begin (_check! (pair? _x_4_7) 0 _x_4_7) (car:pair _x_4_7))))) (_choose-register_2 _regs_1 _frame_1))))) 'choose-register))
(let () (begin (set! choose-registers (lambda (_regs_1 _frame_1 _n_1) (let ((_choose-registers_2 0)) (begin (set! _choose-registers_2 (lambda (_regs_3 _frame_3 _n_3) (let ((_hardcase_4 (unspecified)) (_loop2_4 (unspecified)) (_loop1_4 (unspecified))) (begin (set! _hardcase_4 (lambda () (let* ((_frame-exists?_8 (not (< (cgframe-size _frame_3) 0))) (_stufftosort_11 (let () (let ((_loop_172_175_178 (unspecified))) (begin (set! _loop_172_175_178 (lambda (_y1_167_168_179 _results_167_171_179) (if (null? _y1_167_168_179) (reverse _results_167_171_179) (begin #t (_loop_172_175_178 (let ((_x_183_186 _y1_167_168_179)) (begin (_check! (pair? _x_183_186) 1 _x_183_186) (cdr:pair _x_183_186))) (cons (let* ((_r_187 (let ((_x_220_223 _y1_167_168_179)) (begin (_check! (pair? _x_220_223) 0 _x_220_223) (car:pair _x_220_223)))) (_t_190 (cgreg-lookup-reg _regs_3 _r_187)) (_spilled?_193 (if _t_190 (cgframe-spilled? _frame_3 _t_190) #f))) (let () (let* ((_t1_197_200 _r_187) (_t2_197_203 (let* ((_t1_207_210 _t_190) (_t2_207_213 (cons _spilled?_193 '()))) (let () (cons _t1_207_210 _t2_207_213))))) (let () (cons _t1_197_200 _t2_197_203))))) _results_167_171_179)))))) (_loop_172_175_178 (let ((_x_224_227 (iota *nregs*))) (begin (_check! (pair? _x_224_227) 1 _x_224_227) (cdr:pair _x_224_227))) '()))))) (_registers_14 (twobit-sort (lambda (_x1_65 _x2_65) (let ((_r1_68 (let ((_x_141_144 _x1_65)) (begin (_check! (pair? _x_141_144) 0 _x_141_144) (car:pair _x_141_144)))) (_r2_68 (let ((_x_145_148 _x2_65)) (begin (_check! (pair? _x_145_148) 0 _x_145_148) (car:pair _x_145_148)))) (_t1_68 (let ((_x_150_153 (let ((_x_154_157 _x1_65)) (begin (_check! (pair? _x_154_157) 1 _x_154_157) (cdr:pair _x_154_157))))) (begin (_check! (pair? _x_150_153) 0 _x_150_153) (car:pair _x_150_153)))) (_t2_68 (let ((_x_159_162 (let ((_x_163_166 _x2_65)) (begin (_check! (pair? _x_163_166) 1 _x_163_166) (cdr:pair _x_163_166))))) (begin (_check! (pair? _x_159_162) 0 _x_159_162) (car:pair _x_159_162))))) (if (< _r1_68 *nhwregs*) (if (not _t1_68) #t (if (< _r2_68 *nhwregs*) (if (not _t2_68) #f (if (let ((_x_75_78 (let ((_x_79_82 (let ((_x_83_86 _x1_65)) (begin (_check! (pair? _x_83_86) 1 _x_83_86) (cdr:pair _x_83_86))))) (begin (_check! (pair? _x_79_82) 1 _x_79_82) (cdr:pair _x_79_82))))) (begin (_check! (pair? _x_75_78) 0 _x_75_78) (car:pair _x_75_78))) #t (if (let ((_x_89_92 (let ((_x_93_96 (let ((_x_97_100 _x2_65)) (begin (_check! (pair? _x_97_100) 1 _x_97_100) (cdr:pair _x_97_100))))) (begin (_check! (pair? _x_93_96) 1 _x_93_96) (cdr:pair _x_93_96))))) (begin (_check! (pair? _x_89_92) 0 _x_89_92) (car:pair _x_89_92))) #f #t))) (if _frame-exists?_8 #t (if _t2_68 #t #f)))) (if (< _r2_68 *nhwregs*) (if _frame-exists?_8 #f (if _t1_68 #f (if _t2_68 #t #f))) (if _t1_68 (if (if (let ((_x_113_116 (let ((_x_117_120 (let ((_x_121_124 _x1_65)) (begin (_check! (pair? _x_121_124) 1 _x_121_124) (cdr:pair _x_121_124))))) (begin (_check! (pair? _x_117_120) 1 _x_117_120) (cdr:pair _x_117_120))))) (begin (_check! (pair? _x_113_116) 0 _x_113_116) (car:pair _x_113_116))) (if _t2_68 (not (let ((_x_128_131 (let ((_x_132_135 (let ((_x_136_139 _x2_65)) (begin (_check! (pair? _x_136_139) 1 _x_136_139) (cdr:pair _x_136_139))))) (begin (_check! (pair? _x_132_135) 1 _x_132_135) (cdr:pair _x_132_135))))) (begin (_check! (pair? _x_128_131) 0 _x_128_131) (car:pair _x_128_131)))) #f) #f) #t #f) #t))))) _stufftosort_11))) (let () (begin '(for-each (lambda (register) (let ((t (cadr register)) (spilled? (caddr register))) (if (and t (not spilled?)) (cgframe-touch! frame t)))) registers) (let () (let ((_loop_18_22_25 (unspecified))) (begin (set! _loop_18_22_25 (lambda (_sorted_26 _rs_26 _n_26) (if (zero? _n_26) (reverse _rs_26) (begin #t (_loop_18_22_25 (let ((_x_29_32 _sorted_26)) (begin (_check! (pair? _x_29_32) 1 _x_29_32) (cdr:pair _x_29_32))) (cons (let ((_x_33_36 _sorted_26)) (begin (_check! (pair? _x_33_36) 0 _x_33_36) (car:pair _x_33_36))) _rs_26) (- _n_26 1)))))) (_loop_18_22_25 (let () (let ((_loop_42_45_48 (unspecified))) (begin (set! _loop_42_45_48 (lambda (_y1_37_38_49 _results_37_41_49) (if (null? _y1_37_38_49) (reverse _results_37_41_49) (begin #t (_loop_42_45_48 (let ((_x_53_56 _y1_37_38_49)) (begin (_check! (pair? _x_53_56) 1 _x_53_56) (cdr:pair _x_53_56))) (cons (let ((_x_57_60 (let ((_x_61_64 _y1_37_38_49)) (begin (_check! (pair? _x_61_64) 0 _x_61_64) (car:pair _x_61_64))))) (begin (_check! (pair? _x_57_60) 0 _x_57_60) (car:pair _x_57_60))) _results_37_41_49)))))) (_loop_42_45_48 _registers_14 '())))) '() _n_3))))))))) (set! _loop2_4 (lambda (_i_229 _n_229 _good_229) (if (zero? _n_229) _good_229 (if (zero? _i_229) (_hardcase_4) (let ((_t_235 (cgreg-lookup-reg _regs_3 _i_229))) (if (if _t_235 (cgframe-spilled? _frame_3 _t_235) #f) (_loop2_4 (- _i_229 1) (- _n_229 1) (cons _i_229 _good_229)) (_loop2_4 (- _i_229 1) _n_229 _good_229))))))) (set! _loop1_4 (lambda (_i_238 _n_238 _good_238) (if (zero? _n_238) _good_238 (if (zero? _i_238) (if (< (cgframe-size _frame_3) 0) (_hardcase_4) (_loop2_4 (- *nhwregs* 1) _n_238 _good_238)) (if (cgreg-lookup-reg _regs_3 _i_238) (_loop1_4 (- _i_238 1) _n_238 _good_238) (_loop1_4 (- _i_238 1) (- _n_238 1) (cons _i_238 _good_238))))))) (if (< _n_3 *nregs*) (_loop1_4 (- *nhwregs* 1) _n_3 '()) (error (string-append "Compiler bug: can't allocate " (number->string _n_3) " registers on this target_"))))))) (_choose-registers_2 _regs_1 _frame_1 _n_1))))) 'choose-registers))
(let () (begin (set! cg-call (lambda (_output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1) (let ((_cg-call_2 0)) (begin (set! _cg-call_2 (lambda (_output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (let ((_proc_6 (call_proc _exp_3))) (if (if (lambda? _proc_6) (list? (lambda_args _proc_6)) #f) (cg-let _output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (if (not (variable? _proc_6)) (cg-unknown-call _output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (let* ((_entry_14 (var-lookup (variable_name _proc_6) _regs_3 _frame_3 _env_3)) (_temp_15_18 (entry_kind _entry_14))) (if (memv _temp_15_18 '(global lexical frame register)) (cg-unknown-call _output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (if (memv _temp_15_18 '(integrable)) (cg-integrable-call _output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (if (memv _temp_15_18 '(procedure)) (cg-known-call _output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (error "Bug in cg-call" _exp_3)))))))))) (_cg-call_2 _output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1))))) 'cg-call))
(let () (begin (set! cg-unknown-call (lambda (_output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1) (let ((_cg-unknown-call_2 0)) (begin (set! _cg-unknown-call_2 (lambda (_output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (let* ((_proc_6 (call_proc _exp_3)) (_args_9 (call_args _exp_3)) (_n_12 (length _args_9)) (_l_15 (make-label))) (let () (if (>= (+ _n_12 1) *lastreg*) (cg-big-call _output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (let ((_r0_23 (cgreg-lookup-reg _regs_3 0))) (begin (if (variable? _proc_6) (let ((_entry_26 (cgreg-lookup _regs_3 (variable_name _proc_6)))) (begin (if (if _entry_26 (<= (entry_regnum _entry_26) _n_12) #f) (begin (cg-arguments _output_3 (iota1 (+ _n_12 1)) (append _args_9 (cons _proc_6 '())) _regs_3 _frame_3 _env_3) (gen! _output_3 $reg (+ _n_12 1))) (begin (cg-arguments _output_3 (iota1 _n_12) _args_9 _regs_3 _frame_3 _env_3) (cg0 _output_3 _proc_6 'result _regs_3 _frame_3 _env_3 #f))) (if _tail?_3 (gen-pop! _output_3 _frame_3) (begin (cgframe-used! _frame_3) (gen! _output_3 $setrtn _l_15))) (gen! _output_3 $invoke _n_12))) (begin (cg-arguments _output_3 (iota1 (+ _n_12 1)) (append _args_9 (cons _proc_6 '())) _regs_3 _frame_3 _env_3) (gen! _output_3 $reg (+ _n_12 1)) (if _tail?_3 (gen-pop! _output_3 _frame_3) (begin (cgframe-used! _frame_3) (gen! _output_3 $setrtn _l_15))) (gen! _output_3 $invoke _n_12))) (if _tail?_3 'result (begin (gen! _output_3 $_align 4) (gen! _output_3 $_label _l_15) (gen! _output_3 $_cont) (cgreg-clear! _regs_3) (cgreg-bind! _regs_3 0 _r0_23) (gen-load! _output_3 _frame_3 0 _r0_23) (cg-move _output_3 _frame_3 _regs_3 'result _target_3)))))))))) (_cg-unknown-call_2 _output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1))))) 'cg-unknown-call))
(let () (begin (set! cg-known-call (lambda (_output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1) (let ((_cg-known-call_2 0)) (begin (set! _cg-known-call_2 (lambda (_output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (let* ((_args_6 (call_args _exp_3)) (_n_9 (length _args_6)) (_l_12 (make-label))) (let () (if (>= (+ _n_9 1) *lastreg*) (cg-big-call _output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (let ((_r0_20 (cgreg-lookup-reg _regs_3 0))) (begin (cg-arguments _output_3 (iota1 _n_9) _args_6 _regs_3 _frame_3 _env_3) (if _tail?_3 (gen-pop! _output_3 _frame_3) (begin (cgframe-used! _frame_3) (gen! _output_3 $setrtn _l_12))) (let* ((_entry_23 (cgenv-lookup _env_3 (variable_name (call_proc _exp_3)))) (_label_26 (entry_label _entry_23)) (_m_29 (entry_rib _entry_23))) (let () (if (zero? _m_29) (gen! _output_3 $branch _label_26 _n_9) (gen! _output_3 $jump _m_29 _label_26 _n_9)))) (if _tail?_3 'result (begin (gen! _output_3 $_align 4) (gen! _output_3 $_label _l_12) (gen! _output_3 $_cont) (cgreg-clear! _regs_3) (cgreg-bind! _regs_3 0 _r0_20) (gen-load! _output_3 _frame_3 0 _r0_20) (cg-move _output_3 _frame_3 _regs_3 'result _target_3)))))))))) (_cg-known-call_2 _output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1))))) 'cg-known-call))
(let () (begin (set! cg-big-call (lambda (_output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1) (let ((_cg-big-call_2 0)) (begin (set! _cg-big-call_2 (lambda (_output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (let* ((_proc_6 (call_proc _exp_3)) (_args_9 (call_args _exp_3)) (_n_12 (length _args_9)) (_argslots_15 (newtemps _n_12)) (_procslot_18 (newtemp)) (_r0_21 (cgreg-lookup-reg _regs_3 0)) (_r-1_24 (- *nregs* 1)) (_entry_27 (if (variable? _proc_6) (let ((_entry_103 (var-lookup (variable_name _proc_6) _regs_3 _frame_3 _env_3))) (if (eq? (entry_kind _entry_103) 'procedure) _entry_103 #f)) #f)) (_l_30 (make-label))) (let () (begin (if (not _entry_27) (begin (cg0 _output_3 _proc_6 'result _regs_3 _frame_3 _env_3 #f) (gen-setstk! _output_3 _frame_3 _procslot_18)) (unspecified)) (let ((_f_34_38_41 (lambda (_arg_74 _argslot_74) (begin (cg0 _output_3 _arg_74 'result _regs_3 _frame_3 _env_3 #f) (gen-setstk! _output_3 _frame_3 _argslot_74))))) (let () (let ((_loop_43_46_49 (unspecified))) (begin (set! _loop_43_46_49 (lambda (_y1_34_36_50 _y1_34_35_50) (if (let ((_temp_52_55 (null? _y1_34_36_50))) (if _temp_52_55 _temp_52_55 (null? _y1_34_35_50))) (if #f #f (unspecified)) (begin (begin #t (_f_34_38_41 (let ((_x_58_61 _y1_34_36_50)) (begin (_check! (pair? _x_58_61) 0 _x_58_61) (car:pair _x_58_61))) (let ((_x_62_65 _y1_34_35_50)) (begin (_check! (pair? _x_62_65) 0 _x_62_65) (car:pair _x_62_65))))) (_loop_43_46_49 (let ((_x_66_69 _y1_34_36_50)) (begin (_check! (pair? _x_66_69) 1 _x_66_69) (cdr:pair _x_66_69))) (let ((_x_70_73 _y1_34_35_50)) (begin (_check! (pair? _x_70_73) 1 _x_70_73) (cdr:pair _x_70_73)))))))) (_loop_43_46_49 _args_9 _argslots_15))))) (cgreg-clear! _regs_3) (gen! _output_3 $const '()) (gen! _output_3 $setreg _r-1_24) (let () (let ((_loop_76_79_82 (unspecified))) (begin (set! _loop_76_79_82 (lambda (_i_83 _slots_83) (if (zero? _i_83) (if #f #f (unspecified)) (begin (begin #t (if (< _i_83 _r-1_24) (gen-load! _output_3 _frame_3 _i_83 (let ((_x_86_89 _slots_83)) (begin (_check! (pair? _x_86_89) 0 _x_86_89) (car:pair _x_86_89)))) (begin (gen-stack! _output_3 _frame_3 (let ((_x_90_93 _slots_83)) (begin (_check! (pair? _x_90_93) 0 _x_90_93) (car:pair _x_90_93)))) (gen! _output_3 $op2 $cons _r-1_24) (gen! _output_3 $setreg _r-1_24)))) (_loop_76_79_82 (- _i_83 1) (let ((_x_94_97 _slots_83)) (begin (_check! (pair? _x_94_97) 1 _x_94_97) (cdr:pair _x_94_97)))))))) (_loop_76_79_82 _n_12 (reverse _argslots_15))))) (if (not _entry_27) (gen-stack! _output_3 _frame_3 _procslot_18) (unspecified)) (if _tail?_3 (gen-pop! _output_3 _frame_3) (begin (cgframe-used! _frame_3) (gen! _output_3 $setrtn _l_30))) (if _entry_27 (let ((_label_100 (entry_label _entry_27)) (_m_100 (entry_rib _entry_27))) (if (zero? _m_100) (gen! _output_3 $branch _label_100 _n_12) (gen! _output_3 $jump _m_100 _label_100 _n_12))) (gen! _output_3 $invoke _n_12)) (if _tail?_3 'result (begin (gen! _output_3 $_align 4) (gen! _output_3 $_label _l_30) (gen! _output_3 $_cont) (cgreg-clear! _regs_3) (cgreg-bind! _regs_3 0 _r0_21) (gen-load! _output_3 _frame_3 0 _r0_21) (cg-move _output_3 _frame_3 _regs_3 'result _target_3)))))))) (_cg-big-call_2 _output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1))))) 'cg-big-call))
(let () (begin (set! cg-integrable-call (lambda (_output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1) (let ((_cg-integrable-call_2 0)) (begin (set! _cg-integrable-call_2 (lambda (_output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (let ((_args_6 (call_args _exp_3)) (_entry_6 (var-lookup (variable_name (call_proc _exp_3)) _regs_3 _frame_3 _env_3))) (if (= (entry_arity _entry_6) (length _args_6)) (begin (let ((_temp_7_10 (entry_arity _entry_6))) (if (memv _temp_7_10 '(0)) (gen! _output_3 $op1 (entry_op _entry_6)) (if (memv _temp_7_10 '(1)) (begin (cg0 _output_3 (let ((_x_13_16 _args_6)) (begin (_check! (pair? _x_13_16) 0 _x_13_16) (car:pair _x_13_16))) 'result _regs_3 _frame_3 _env_3 #f) (gen! _output_3 $op1 (entry_op _entry_6))) (if (memv _temp_7_10 '(2)) (cg-integrable-call2 _output_3 _entry_6 _args_6 _regs_3 _frame_3 _env_3) (if (memv _temp_7_10 '(3)) (cg-integrable-call3 _output_3 _entry_6 _args_6 _regs_3 _frame_3 _env_3) (error "Bug detected by cg-integrable-call" (make-readable _exp_3))))))) (if _tail?_3 (begin (gen-pop! _output_3 _frame_3) (gen! _output_3 $return) 'result) (cg-move _output_3 _frame_3 _regs_3 'result _target_3))) (if (< (entry_arity _entry_6) 0) (cg-special _output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (error "Wrong number of arguments to integrable procedure" (make-readable _exp_3))))))) (_cg-integrable-call_2 _output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1))))) 'cg-integrable-call))
(let () (begin (set! cg-integrable-call2 (lambda (_output_1 _entry_1 _args_1 _regs_1 _frame_1 _env_1) (let ((_cg-integrable-call2_2 0)) (begin (set! _cg-integrable-call2_2 (lambda (_output_3 _entry_3 _args_3 _regs_3 _frame_3 _env_3) (begin (let ((_op_6 (entry_op _entry_3))) (if (if (entry_imm _entry_3) (if (constant? (let ((_x_10_13 (let ((_x_14_17 _args_3)) (begin (_check! (pair? _x_14_17) 1 _x_14_17) (cdr:pair _x_14_17))))) (begin (_check! (pair? _x_10_13) 0 _x_10_13) (car:pair _x_10_13)))) ((entry_imm _entry_3) (constant_value (let ((_x_20_23 (let ((_x_24_27 _args_3)) (begin (_check! (pair? _x_24_27) 1 _x_24_27) (cdr:pair _x_24_27))))) (begin (_check! (pair? _x_20_23) 0 _x_20_23) (car:pair _x_20_23))))) #f) #f) (begin (cg0 _output_3 (let ((_x_28_31 _args_3)) (begin (_check! (pair? _x_28_31) 0 _x_28_31) (car:pair _x_28_31))) 'result _regs_3 _frame_3 _env_3 #f) (gen! _output_3 $op2imm _op_6 (constant_value (let ((_x_33_36 (let ((_x_37_40 _args_3)) (begin (_check! (pair? _x_37_40) 1 _x_37_40) (cdr:pair _x_37_40))))) (begin (_check! (pair? _x_33_36) 0 _x_33_36) (car:pair _x_33_36)))))) (let* ((_reg2_43 (cg0 _output_3 (let ((_x_78_81 (let ((_x_82_85 _args_3)) (begin (_check! (pair? _x_82_85) 1 _x_82_85) (cdr:pair _x_82_85))))) (begin (_check! (pair? _x_78_81) 0 _x_78_81) (car:pair _x_78_81))) #f _regs_3 _frame_3 _env_3 #f)) (_r2_46 (choose-register _regs_3 _frame_3)) (_t2_49 (if (eq? _reg2_43 'result) (let ((_t2_76 (newtemp))) (begin (gen! _output_3 $setreg _r2_46) (cgreg-bind! _regs_3 _r2_46 _t2_76) (gen-store! _output_3 _frame_3 _r2_46 _t2_76) _t2_76)) (cgreg-lookup-reg _regs_3 _reg2_43)))) (let () (begin (cg0 _output_3 (let ((_x_53_56 _args_3)) (begin (_check! (pair? _x_53_56) 0 _x_53_56) (car:pair _x_53_56))) 'result _regs_3 _frame_3 _env_3 #f) (let ((_r2_59 (let ((_temp_63_66 (let ((_entry_73 (cgreg-lookup _regs_3 _t2_49))) (if _entry_73 (entry_regnum _entry_73) #f)))) (if _temp_63_66 _temp_63_66 (let ((_r2_70 (choose-register _regs_3 _frame_3))) (begin (cgreg-bind! _regs_3 _r2_70 _t2_49) (gen-load! _output_3 _frame_3 _r2_70 _t2_49) _r2_70)))))) (let () (begin (gen! _output_3 $op2 (entry_op _entry_3) _r2_59) (if (eq? _reg2_43 'result) (begin (cgreg-release! _regs_3 _r2_59) (cgframe-release! _frame_3 _t2_49)) (unspecified)))))))))) 'result))) (_cg-integrable-call2_2 _output_1 _entry_1 _args_1 _regs_1 _frame_1 _env_1))))) 'cg-integrable-call2))
(let () (begin (set! cg-integrable-call3 (lambda (_output_1 _entry_1 _args_1 _regs_1 _frame_1 _env_1) (let ((_cg-integrable-call3_2 0)) (begin (set! _cg-integrable-call3_2 (lambda (_output_3 _entry_3 _args_3 _regs_3 _frame_3 _env_3) (begin (let* ((_reg2_6 (cg0 _output_3 (let ((_x_121_124 (let ((_x_125_128 _args_3)) (begin (_check! (pair? _x_125_128) 1 _x_125_128) (cdr:pair _x_125_128))))) (begin (_check! (pair? _x_121_124) 0 _x_121_124) (car:pair _x_121_124))) #f _regs_3 _frame_3 _env_3 #f)) (_r2_9 (choose-register _regs_3 _frame_3)) (_t2_12 (if (eq? _reg2_6 'result) (let ((_t2_119 (newtemp))) (begin (gen! _output_3 $setreg _r2_9) (cgreg-bind! _regs_3 _r2_9 _t2_119) (gen-store! _output_3 _frame_3 _r2_9 _t2_119) _t2_119)) (cgreg-lookup-reg _regs_3 _reg2_6))) (_reg3_15 (cg0 _output_3 (let ((_x_105_108 (let ((_x_109_112 (let ((_x_113_116 _args_3)) (begin (_check! (pair? _x_113_116) 1 _x_113_116) (cdr:pair _x_113_116))))) (begin (_check! (pair? _x_109_112) 1 _x_109_112) (cdr:pair _x_109_112))))) (begin (_check! (pair? _x_105_108) 0 _x_105_108) (car:pair _x_105_108))) #f _regs_3 _frame_3 _env_3 #f)) (_spillregs_18 (choose-registers _regs_3 _frame_3 2)) (_t3_21 (if (eq? _reg3_15 'result) (let ((_t3_86 (newtemp)) (_r3_86 (if (eq? _t2_12 (cgreg-lookup-reg _regs_3 (let ((_x_87_90 _spillregs_18)) (begin (_check! (pair? _x_87_90) 0 _x_87_90) (car:pair _x_87_90))))) (let ((_x_92_95 (let ((_x_96_99 _spillregs_18)) (begin (_check! (pair? _x_96_99) 1 _x_96_99) (cdr:pair _x_96_99))))) (begin (_check! (pair? _x_92_95) 0 _x_92_95) (car:pair _x_92_95))) (let ((_x_100_103 _spillregs_18)) (begin (_check! (pair? _x_100_103) 0 _x_100_103) (car:pair _x_100_103)))))) (begin (gen! _output_3 $setreg _r3_86) (cgreg-bind! _regs_3 _r3_86 _t3_86) (gen-store! _output_3 _frame_3 _r3_86 _t3_86) _t3_86)) (cgreg-lookup-reg _regs_3 _reg3_15)))) (let () (begin (cg0 _output_3 (let ((_x_25_28 _args_3)) (begin (_check! (pair? _x_25_28) 0 _x_25_28) (car:pair _x_25_28))) 'result _regs_3 _frame_3 _env_3 #f) (let* ((_spillregs_31 (choose-registers _regs_3 _frame_3 2)) (_r2_34 (let ((_temp_69_72 (let ((_entry_83 (cgreg-lookup _regs_3 _t2_12))) (if _entry_83 (entry_regnum _entry_83) #f)))) (if _temp_69_72 _temp_69_72 (let ((_r2_76 (let ((_x_77_80 _spillregs_31)) (begin (_check! (pair? _x_77_80) 0 _x_77_80) (car:pair _x_77_80))))) (begin (cgreg-bind! _regs_3 _r2_76 _t2_12) (gen-load! _output_3 _frame_3 _r2_76 _t2_12) _r2_76))))) (_r3_37 (let ((_temp_41_44 (let ((_entry_68 (cgreg-lookup _regs_3 _t3_21))) (if _entry_68 (entry_regnum _entry_68) #f)))) (if _temp_41_44 _temp_41_44 (let ((_r3_48 (if (eq? _r2_34 (let ((_x_49_52 _spillregs_31)) (begin (_check! (pair? _x_49_52) 0 _x_49_52) (car:pair _x_49_52)))) (let ((_x_54_57 (let ((_x_58_61 _spillregs_31)) (begin (_check! (pair? _x_58_61) 1 _x_58_61) (cdr:pair _x_58_61))))) (begin (_check! (pair? _x_54_57) 0 _x_54_57) (car:pair _x_54_57))) (let ((_x_62_65 _spillregs_31)) (begin (_check! (pair? _x_62_65) 0 _x_62_65) (car:pair _x_62_65)))))) (begin (cgreg-bind! _regs_3 _r3_48 _t3_21) (gen-load! _output_3 _frame_3 _r3_48 _t3_21) _r3_48)))))) (let () (begin (gen! _output_3 $op3 (entry_op _entry_3) _r2_34 _r3_37) (if (eq? _reg2_6 'result) (begin (cgreg-release! _regs_3 _r2_34) (cgframe-release! _frame_3 _t2_12)) (unspecified)) (if (eq? _reg3_15 'result) (begin (cgreg-release! _regs_3 _r3_37) (cgframe-release! _frame_3 _t3_21)) (unspecified)))))))) 'result))) (_cg-integrable-call3_2 _output_1 _entry_1 _args_1 _regs_1 _frame_1 _env_1))))) 'cg-integrable-call3))
(let () (begin (set! cg-primop-args (lambda (_output_1 _args_1 _regs_1 _frame_1 _env_1) (let ((_cg-primop-args_2 0)) (begin (set! _cg-primop-args_2 (lambda (_output_3 _args_3 _regs_3 _frame_3 _env_3) (let ((_finish-loop_4 (unspecified)) (_eval-first-into-result_4 (unspecified)) (_eval-loop_4 (unspecified))) (begin (set! _finish-loop_4 (lambda (_disjoint_5 _temps_5 _mask_5 _registers_5) (if (null? _temps_5) _registers_5 (let* ((_t_8 (let ((_x_54_57 _temps_5)) (begin (_check! (pair? _x_54_57) 0 _x_54_57) (car:pair _x_54_57)))) (_entry_11 (cgreg-lookup _regs_3 _t_8))) (let () (if _entry_11 (let ((_r_17 (entry_regnum _entry_11))) (begin (if (let ((_x_18_21 _mask_5)) (begin (_check! (pair? _x_18_21) 0 _x_18_21) (car:pair _x_18_21))) (begin (cgreg-release! _regs_3 _r_17) (cgframe-release! _frame_3 _t_8)) (unspecified)) (_finish-loop_4 _disjoint_5 (let ((_x_22_25 _temps_5)) (begin (_check! (pair? _x_22_25) 1 _x_22_25) (cdr:pair _x_22_25))) (let ((_x_26_29 _mask_5)) (begin (_check! (pair? _x_26_29) 1 _x_26_29) (cdr:pair _x_26_29))) (cons _r_17 _registers_5)))) (let ((_r_32 (let ((_x_50_53 _disjoint_5)) (begin (_check! (pair? _x_50_53) 0 _x_50_53) (car:pair _x_50_53))))) (if (memv _r_32 _registers_5) (_finish-loop_4 (let ((_x_34_37 _disjoint_5)) (begin (_check! (pair? _x_34_37) 1 _x_34_37) (cdr:pair _x_34_37))) _temps_5 _mask_5 _registers_5) (begin (gen-load! _output_3 _frame_3 _r_32 _t_8) (cgreg-bind! _regs_3 _r_32 _t_8) (if (let ((_x_38_41 _mask_5)) (begin (_check! (pair? _x_38_41) 0 _x_38_41) (car:pair _x_38_41))) (begin (cgreg-release! _regs_3 _r_32) (cgframe-release! _frame_3 _t_8)) (unspecified)) (_finish-loop_4 _disjoint_5 (let ((_x_42_45 _temps_5)) (begin (_check! (pair? _x_42_45) 1 _x_42_45) (cdr:pair _x_42_45))) (let ((_x_46_49 _mask_5)) (begin (_check! (pair? _x_46_49) 1 _x_46_49) (cdr:pair _x_46_49))) (cons _r_32 _registers_5))))))))))) (set! _eval-first-into-result_4 (lambda (_temps_58 _mask_58) (begin (cg0 _output_3 (let ((_x_59_62 _args_3)) (begin (_check! (pair? _x_59_62) 0 _x_59_62) (car:pair _x_59_62))) 'result _regs_3 _frame_3 _env_3 #f) (_finish-loop_4 (choose-registers _regs_3 _frame_3 (length _temps_58)) _temps_58 _mask_58 '())))) (set! _eval-loop_4 (lambda (_args_63 _temps_63 _mask_63) (if (null? _args_63) (_eval-first-into-result_4 _temps_63 _mask_63) (let ((_reg_66 (cg0 _output_3 (let ((_x_84_87 _args_63)) (begin (_check! (pair? _x_84_87) 0 _x_84_87) (car:pair _x_84_87))) #f _regs_3 _frame_3 _env_3 #f))) (if (eq? _reg_66 'result) (let* ((_r_69 (choose-register _regs_3 _frame_3)) (_t_72 (newtemp))) (let () (begin (gen! _output_3 $setreg _r_69) (cgreg-bind! _regs_3 _r_69 _t_72) (gen-store! _output_3 _frame_3 _r_69 _t_72) (_eval-loop_4 (let ((_x_76_79 _args_63)) (begin (_check! (pair? _x_76_79) 1 _x_76_79) (cdr:pair _x_76_79))) (cons _t_72 _temps_63) (cons #t _mask_63))))) (_eval-loop_4 (let ((_x_80_83 _args_63)) (begin (_check! (pair? _x_80_83) 1 _x_80_83) (cdr:pair _x_80_83))) (cons (cgreg-lookup-reg _regs_3 _reg_66) _temps_63) (cons #f _mask_63))))))) (if (< (length _args_3) *nregs*) (_eval-loop_4 (let ((_x_88_91 _args_3)) (begin (_check! (pair? _x_88_91) 1 _x_88_91) (cdr:pair _x_88_91))) '() '()) (error "Bug detected by cg-primop-args" _args_3)))))) (_cg-primop-args_2 _output_1 _args_1 _regs_1 _frame_1 _env_1))))) 'cg-primop-args))
(let () (begin (set! cg-arguments (lambda (_output_1 _targets_1 _args_1 _regs_1 _frame_1 _env_1) (let ((_cg-arguments_2 0)) (begin (set! _cg-arguments_2 (lambda (_output_3 _targets_3 _args_3 _regs_3 _frame_3 _env_3) (let ((_evalargs0_4 (unspecified)) (_evalargs_4 (unspecified)) (_sortargs_4 (unspecified))) (begin (set! _evalargs0_4 (lambda (_targets_5 _args_5 _temps_5) (if (not (null? _targets_5)) (let ((_para_8 (let ((_regvars_92 (let () (let ((_loop_139_142_145 (unspecified))) (begin (set! _loop_139_142_145 (lambda (_y1_134_135_146 _results_134_138_146) (if (null? _y1_134_135_146) (reverse _results_134_138_146) (begin #t (_loop_139_142_145 (let ((_x_150_153 _y1_134_135_146)) (begin (_check! (pair? _x_150_153) 1 _x_150_153) (cdr:pair _x_150_153))) (cons (let ((_reg_154 (let ((_x_155_158 _y1_134_135_146)) (begin (_check! (pair? _x_155_158) 0 _x_155_158) (car:pair _x_155_158))))) (cgreg-lookup-reg _regs_3 _reg_154)) _results_134_138_146)))))) (_loop_139_142_145 _targets_5 '())))))) (let () (parallel-assignment _targets_5 (let () (let ((_loop_102_106_109 (unspecified))) (begin (set! _loop_102_106_109 (lambda (_y1_96_98_110 _y1_96_97_110 _results_96_101_110) (if (let ((_temp_112_115 (null? _y1_96_98_110))) (if _temp_112_115 _temp_112_115 (null? _y1_96_97_110))) (reverse _results_96_101_110) (begin #t (_loop_102_106_109 (let ((_x_118_121 _y1_96_98_110)) (begin (_check! (pair? _x_118_121) 1 _x_118_121) (cdr:pair _x_118_121))) (let ((_x_122_125 _y1_96_97_110)) (begin (_check! (pair? _x_122_125) 1 _x_122_125) (cdr:pair _x_122_125))) (cons (cons (let ((_x_126_129 _y1_96_98_110)) (begin (_check! (pair? _x_126_129) 0 _x_126_129) (car:pair _x_126_129))) (let ((_x_130_133 _y1_96_97_110)) (begin (_check! (pair? _x_130_133) 0 _x_130_133) (car:pair _x_130_133)))) _results_96_101_110)))))) (_loop_102_106_109 _regvars_92 _targets_5 '())))) _args_5))))) (if _para_8 (let ((_targets_11 _para_8) (_args_11 (cg-permute _args_5 _targets_5 _para_8)) (_temps_11 (cg-permute _temps_5 _targets_5 _para_8))) (let ((_f_12_17_20 (lambda (_arg_66 _r_66 _t_66) (begin (cg0 _output_3 _arg_66 _r_66 _regs_3 _frame_3 _env_3 #f) (cgreg-bind! _regs_3 _r_66 _t_66) (gen-store! _output_3 _frame_3 _r_66 _t_66))))) (let () (let ((_loop_22_26_29 (unspecified))) (begin (set! _loop_22_26_29 (lambda (_y1_12_15_30 _y1_12_14_30 _y1_12_13_30) (if (let ((_temp_32_35 (null? _y1_12_15_30))) (if _temp_32_35 _temp_32_35 (let ((_temp_36_39 (null? _y1_12_14_30))) (if _temp_36_39 _temp_36_39 (null? _y1_12_13_30))))) (if #f #f (unspecified)) (begin (begin #t (_f_12_17_20 (let ((_x_42_45 _y1_12_15_30)) (begin (_check! (pair? _x_42_45) 0 _x_42_45) (car:pair _x_42_45))) (let ((_x_46_49 _y1_12_14_30)) (begin (_check! (pair? _x_46_49) 0 _x_46_49) (car:pair _x_46_49))) (let ((_x_50_53 _y1_12_13_30)) (begin (_check! (pair? _x_50_53) 0 _x_50_53) (car:pair _x_50_53))))) (_loop_22_26_29 (let ((_x_54_57 _y1_12_15_30)) (begin (_check! (pair? _x_54_57) 1 _x_54_57) (cdr:pair _x_54_57))) (let ((_x_58_61 _y1_12_14_30)) (begin (_check! (pair? _x_58_61) 1 _x_58_61) (cdr:pair _x_58_61))) (let ((_x_62_65 _y1_12_13_30)) (begin (_check! (pair? _x_62_65) 1 _x_62_65) (cdr:pair _x_62_65)))))))) (_loop_22_26_29 _args_11 _para_8 _temps_11)))))) (let ((_r_69 (choose-register _regs_3 _frame_3)) (_t_69 (let ((_x_86_89 _temps_5)) (begin (_check! (pair? _x_86_89) 0 _x_86_89) (car:pair _x_86_89))))) (begin (cg0 _output_3 (let ((_x_70_73 _args_5)) (begin (_check! (pair? _x_70_73) 0 _x_70_73) (car:pair _x_70_73))) _r_69 _regs_3 _frame_3 _env_3 #f) (cgreg-bind! _regs_3 _r_69 _t_69) (gen-store! _output_3 _frame_3 _r_69 _t_69) (_evalargs0_4 (let ((_x_74_77 _targets_5)) (begin (_check! (pair? _x_74_77) 1 _x_74_77) (cdr:pair _x_74_77))) (let ((_x_78_81 _args_5)) (begin (_check! (pair? _x_78_81) 1 _x_78_81) (cdr:pair _x_78_81))) (let ((_x_82_85 _temps_5)) (begin (_check! (pair? _x_82_85) 1 _x_82_85) (cdr:pair _x_82_85)))))))) (unspecified)))) (set! _evalargs_4 (lambda (_targets1_159 _args1_159 _targets2_159 _args2_159) (let* ((_temps1_162 (newtemps (length _targets1_159))) (_temps2_165 (newtemps (length _targets2_159)))) (let () (begin (if (not (null? _args1_159)) (let ((_f_169_173_176 (lambda (_arg_217 _temp_217) (begin (cg0 _output_3 _arg_217 'result _regs_3 _frame_3 _env_3 #f) (gen-setstk! _output_3 _frame_3 _temp_217))))) (let () (let ((_loop_178_181_184 (unspecified))) (begin (set! _loop_178_181_184 (lambda (_y1_169_171_185 _y1_169_170_185) (if (let ((_temp_187_190 (null? _y1_169_171_185))) (if _temp_187_190 _temp_187_190 (null? _y1_169_170_185))) (if #f #f (unspecified)) (begin (begin #t (_f_169_173_176 (let ((_x_193_196 _y1_169_171_185)) (begin (_check! (pair? _x_193_196) 0 _x_193_196) (car:pair _x_193_196))) (let ((_x_197_200 _y1_169_170_185)) (begin (_check! (pair? _x_197_200) 0 _x_197_200) (car:pair _x_197_200))))) (_loop_178_181_184 (let ((_x_201_204 _y1_169_171_185)) (begin (_check! (pair? _x_201_204) 1 _x_201_204) (cdr:pair _x_201_204))) (let ((_x_205_208 _y1_169_170_185)) (begin (_check! (pair? _x_205_208) 1 _x_205_208) (cdr:pair _x_205_208)))))))) (_loop_178_181_184 (let ((_x_209_212 _args1_159)) (begin (_check! (pair? _x_209_212) 1 _x_209_212) (cdr:pair _x_209_212))) (let ((_x_213_216 _temps1_162)) (begin (_check! (pair? _x_213_216) 1 _x_213_216) (cdr:pair _x_213_216)))))))) (unspecified)) (if (not (null? _args1_159)) (_evalargs0_4 (cons (let ((_x_218_221 _targets1_159)) (begin (_check! (pair? _x_218_221) 0 _x_218_221) (car:pair _x_218_221))) _targets2_159) (cons (let ((_x_222_225 _args1_159)) (begin (_check! (pair? _x_222_225) 0 _x_222_225) (car:pair _x_222_225))) _args2_159) (cons (let ((_x_226_229 _temps1_162)) (begin (_check! (pair? _x_226_229) 0 _x_226_229) (car:pair _x_226_229))) _temps2_165)) (_evalargs0_4 _targets2_159 _args2_159 _temps2_165)) (let () (let ((_loop_236_239_242 (unspecified))) (begin (set! _loop_236_239_242 (lambda (_y1_230_232_243 _y1_230_231_243) (if (let ((_temp_245_248 (null? _y1_230_232_243))) (if _temp_245_248 _temp_245_248 (null? _y1_230_231_243))) (if #f #f (unspecified)) (begin (begin #t (let ((_r_251 (let ((_x_264_267 _y1_230_232_243)) (begin (_check! (pair? _x_264_267) 0 _x_264_267) (car:pair _x_264_267)))) (_t_251 (let ((_x_268_271 _y1_230_231_243)) (begin (_check! (pair? _x_268_271) 0 _x_268_271) (car:pair _x_268_271))))) (let ((_temp_254 (cgreg-lookup-reg _regs_3 _r_251))) (begin (if (not (eq? _temp_254 _t_251)) (let ((_entry_257 (var-lookup _t_251 _regs_3 _frame_3 _env_3))) (begin (let ((_temp_258_261 (entry_kind _entry_257))) (if (memv _temp_258_261 '(register)) (gen! _output_3 $movereg (entry_regnum _entry_257) _r_251) (if (memv _temp_258_261 '(frame)) (gen-load! _output_3 _frame_3 _r_251 _t_251) (unspecified)))) (cgreg-bind! _regs_3 _r_251 _t_251))) (unspecified)) (cgframe-release! _frame_3 _t_251))))) (_loop_236_239_242 (let ((_x_272_275 _y1_230_232_243)) (begin (_check! (pair? _x_272_275) 1 _x_272_275) (cdr:pair _x_272_275))) (let ((_x_276_279 _y1_230_231_243)) (begin (_check! (pair? _x_276_279) 1 _x_276_279) (cdr:pair _x_276_279)))))))) (_loop_236_239_242 (append _targets1_159 _targets2_159) (append _temps1_162 _temps2_165)))))))))) (set! _sortargs_4 (lambda (_targets_280 _args_280 _targets1_280 _args1_280 _targets2_280 _args2_280) (if (null? _args_280) (_evalargs_4 _targets1_280 _args1_280 _targets2_280 _args2_280) (let ((_target_283 (let ((_x_284_287 _targets_280)) (begin (_check! (pair? _x_284_287) 0 _x_284_287) (car:pair _x_284_287)))) (_arg_283 (let ((_x_288_291 _args_280)) (begin (_check! (pair? _x_288_291) 0 _x_288_291) (car:pair _x_288_291)))) (_targets_283 (let ((_x_292_295 _targets_280)) (begin (_check! (pair? _x_292_295) 1 _x_292_295) (cdr:pair _x_292_295)))) (_args_283 (let ((_x_296_299 _args_280)) (begin (_check! (pair? _x_296_299) 1 _x_296_299) (cdr:pair _x_296_299))))) (if (complicated? _arg_283 _env_3) (_sortargs_4 _targets_283 _args_283 (cons _target_283 _targets1_280) (cons _arg_283 _args1_280) _targets2_280 _args2_280) (_sortargs_4 _targets_283 _args_283 _targets1_280 _args1_280 (cons _target_283 _targets2_280) (cons _arg_283 _args2_280))))))) (if (parallel-assignment-optimization) (_sortargs_4 (reverse _targets_3) (reverse _args_3) '() '() '() '()) (cg-evalargs _output_3 _targets_3 _args_3 _regs_3 _frame_3 _env_3)))))) (_cg-arguments_2 _output_1 _targets_1 _args_1 _regs_1 _frame_1 _env_1))))) 'cg-arguments))
(let () (begin (set! cg-evalargs (lambda (_output_1 _targets_1 _args_1 _regs_1 _frame_1 _env_1) (let ((_cg-evalargs_2 0)) (begin (set! _cg-evalargs_2 (lambda (_output_3 _targets_3 _args_3 _regs_3 _frame_3 _env_3) (let ((_temps_6 (newtemps (length _targets_3)))) (begin (let ((_f_7_12_15 (lambda (_arg_61 _r_61 _t_61) (begin (cg0 _output_3 _arg_61 _r_61 _regs_3 _frame_3 _env_3 #f) (cgreg-bind! _regs_3 _r_61 _t_61) (gen-store! _output_3 _frame_3 _r_61 _t_61))))) (let () (let ((_loop_17_21_24 (unspecified))) (begin (set! _loop_17_21_24 (lambda (_y1_7_10_25 _y1_7_9_25 _y1_7_8_25) (if (let ((_temp_27_30 (null? _y1_7_10_25))) (if _temp_27_30 _temp_27_30 (let ((_temp_31_34 (null? _y1_7_9_25))) (if _temp_31_34 _temp_31_34 (null? _y1_7_8_25))))) (if #f #f (unspecified)) (begin (begin #t (_f_7_12_15 (let ((_x_37_40 _y1_7_10_25)) (begin (_check! (pair? _x_37_40) 0 _x_37_40) (car:pair _x_37_40))) (let ((_x_41_44 _y1_7_9_25)) (begin (_check! (pair? _x_41_44) 0 _x_41_44) (car:pair _x_41_44))) (let ((_x_45_48 _y1_7_8_25)) (begin (_check! (pair? _x_45_48) 0 _x_45_48) (car:pair _x_45_48))))) (_loop_17_21_24 (let ((_x_49_52 _y1_7_10_25)) (begin (_check! (pair? _x_49_52) 1 _x_49_52) (cdr:pair _x_49_52))) (let ((_x_53_56 _y1_7_9_25)) (begin (_check! (pair? _x_53_56) 1 _x_53_56) (cdr:pair _x_53_56))) (let ((_x_57_60 _y1_7_8_25)) (begin (_check! (pair? _x_57_60) 1 _x_57_60) (cdr:pair _x_57_60)))))))) (_loop_17_21_24 _args_3 _targets_3 _temps_6))))) (let () (let ((_loop_68_71_74 (unspecified))) (begin (set! _loop_68_71_74 (lambda (_y1_62_64_75 _y1_62_63_75) (if (let ((_temp_77_80 (null? _y1_62_64_75))) (if _temp_77_80 _temp_77_80 (null? _y1_62_63_75))) (if #f #f (unspecified)) (begin (begin #t (let ((_r_83 (let ((_x_87_90 _y1_62_64_75)) (begin (_check! (pair? _x_87_90) 0 _x_87_90) (car:pair _x_87_90)))) (_t_83 (let ((_x_91_94 _y1_62_63_75)) (begin (_check! (pair? _x_91_94) 0 _x_91_94) (car:pair _x_91_94))))) (let ((_temp_86 (cgreg-lookup-reg _regs_3 _r_83))) (begin (if (not (eq? _temp_86 _t_83)) (begin (gen-load! _output_3 _frame_3 _r_83 _t_83) (cgreg-bind! _regs_3 _r_83 _t_83)) (unspecified)) (cgframe-release! _frame_3 _t_83))))) (_loop_68_71_74 (let ((_x_95_98 _y1_62_64_75)) (begin (_check! (pair? _x_95_98) 1 _x_95_98) (cdr:pair _x_95_98))) (let ((_x_99_102 _y1_62_63_75)) (begin (_check! (pair? _x_99_102) 1 _x_99_102) (cdr:pair _x_99_102)))))))) (_loop_68_71_74 _targets_3 _temps_6)))))))) (_cg-evalargs_2 _output_1 _targets_1 _args_1 _regs_1 _frame_1 _env_1))))) 'cg-evalargs))
(let () (begin (set! complicated? (lambda (_exp_1 _env_1) (let ((_complicated?_2 0)) (begin (set! _complicated?_2 (lambda (_exp_3 _env_3) (let ((_temp_4_7 (let ((_x_33_36 _exp_3)) (begin (_check! (pair? _x_33_36) 0 _x_33_36) (car:pair _x_33_36))))) (if (memv _temp_4_7 '(quote)) #f (if (memv _temp_4_7 '(lambda)) #t (if (memv _temp_4_7 '(set!)) (_complicated?_2 (assignment_rhs _exp_3) _env_3) (if (memv _temp_4_7 '(if)) (let ((_temp_12_15 (_complicated?_2 (if_test _exp_3) _env_3))) (if _temp_12_15 _temp_12_15 (let ((_temp_16_19 (_complicated?_2 (if_then _exp_3) _env_3))) (if _temp_16_19 _temp_16_19 (_complicated?_2 (if_else _exp_3) _env_3))))) (if (memv _temp_4_7 '(begin)) (if (variable? _exp_3) #f (some? (lambda (_exp_22) (_complicated?_2 _exp_22 _env_3)) (begin_exprs _exp_3))) (let ((_proc_26 (call_proc _exp_3))) (if (if (variable? _proc_26) (let ((_entry_31 (cgenv-lookup _env_3 (variable_name _proc_26)))) (eq? (entry_kind _entry_31) 'integrable)) #f) (some? (lambda (_exp_32) (_complicated?_2 _exp_32 _env_3)) (call_args _exp_3)) #t)))))))))) (_complicated?_2 _exp_1 _env_1))))) 'complicated?))
(let () (begin (set! cg-permute (lambda (_src_1 _key_1 _newkey_1) (let ((_cg-permute_2 0)) (begin (set! _cg-permute_2 (lambda (_src_3 _key_3 _newkey_3) (let ((_alist_6 (let () (let ((_loop_35_39_42 (unspecified))) (begin (set! _loop_35_39_42 (lambda (_y1_29_31_43 _y1_29_30_43 _results_29_34_43) (if (let ((_temp_45_48 (null? _y1_29_31_43))) (if _temp_45_48 _temp_45_48 (null? _y1_29_30_43))) (reverse _results_29_34_43) (begin #t (_loop_35_39_42 (let ((_x_51_54 _y1_29_31_43)) (begin (_check! (pair? _x_51_54) 1 _x_51_54) (cdr:pair _x_51_54))) (let ((_x_55_58 _y1_29_30_43)) (begin (_check! (pair? _x_55_58) 1 _x_55_58) (cdr:pair _x_55_58))) (cons (cons (let ((_x_59_62 _y1_29_31_43)) (begin (_check! (pair? _x_59_62) 0 _x_59_62) (car:pair _x_59_62))) (let ((_x_63_66 _y1_29_30_43)) (begin (_check! (pair? _x_63_66) 0 _x_63_66) (car:pair _x_63_66)))) _results_29_34_43)))))) (_loop_35_39_42 _key_3 (iota (length _key_3)) '())))))) (let () (let ((_loop_7_10_13 (unspecified))) (begin (set! _loop_7_10_13 (lambda (_newkey_14 _dest_14) (if (null? _newkey_14) (reverse _dest_14) (begin #t (_loop_7_10_13 (let ((_x_17_20 _newkey_14)) (begin (_check! (pair? _x_17_20) 1 _x_17_20) (cdr:pair _x_17_20))) (cons (list-ref _src_3 (let ((_x_21_24 (assq (let ((_x_25_28 _newkey_14)) (begin (_check! (pair? _x_25_28) 0 _x_25_28) (car:pair _x_25_28))) _alist_6))) (begin (_check! (pair? _x_21_24) 1 _x_21_24) (cdr:pair _x_21_24)))) _dest_14)))))) (_loop_7_10_13 _newkey_3 '()))))))) (_cg-permute_2 _src_1 _key_1 _newkey_1))))) 'cg-permute))
(let () (begin (set! parallel-assignment (lambda (_regnums_1 _alist_1 _exps_1) (if (null? _regnums_1) #t (let ((_x_4 (toposort (dependency-graph _regnums_1 _alist_1 _exps_1)))) (if _x_4 (reverse _x_4) #f))))) 'parallel-assignment))
(let () (begin (set! dependency-graph (lambda (_regnums_1 _alist_1 _exps_1) (let ((_names_4 (let () (let ((_loop_66_69_72 (unspecified))) (begin (set! _loop_66_69_72 (lambda (_y1_61_62_73 _results_61_65_73) (if (null? _y1_61_62_73) (reverse _results_61_65_73) (begin #t (_loop_66_69_72 (let ((_x_77_80 _y1_61_62_73)) (begin (_check! (pair? _x_77_80) 1 _x_77_80) (cdr:pair _x_77_80))) (cons (let ((_x_81_84 (let ((_x_85_88 _y1_61_62_73)) (begin (_check! (pair? _x_85_88) 0 _x_85_88) (car:pair _x_85_88))))) (begin (_check! (pair? _x_81_84) 0 _x_81_84) (car:pair _x_81_84))) _results_61_65_73)))))) (_loop_66_69_72 _alist_1 '())))))) (let () (let ((_loop_5_9_12 (unspecified))) (begin (set! _loop_5_9_12 (lambda (_regnums_13 _exps_13 _l_13) (if (null? _regnums_13) _l_13 (begin #t (_loop_5_9_12 (let ((_x_16_19 _regnums_13)) (begin (_check! (pair? _x_16_19) 1 _x_16_19) (cdr:pair _x_16_19))) (let ((_x_20_23 _exps_13)) (begin (_check! (pair? _x_20_23) 1 _x_20_23) (cdr:pair _x_20_23))) (cons (cons (let ((_x_24_27 _regnums_13)) (begin (_check! (pair? _x_24_27) 0 _x_24_27) (car:pair _x_24_27))) (let () (let ((_loop_33_36_39 (unspecified))) (begin (set! _loop_33_36_39 (lambda (_y1_28_29_40 _results_28_32_40) (if (null? _y1_28_29_40) (reverse _results_28_32_40) (begin #t (_loop_33_36_39 (let ((_x_44_47 _y1_28_29_40)) (begin (_check! (pair? _x_44_47) 1 _x_44_47) (cdr:pair _x_44_47))) (cons (let* ((_var_48 (let ((_x_53_56 _y1_28_29_40)) (begin (_check! (pair? _x_53_56) 0 _x_53_56) (car:pair _x_53_56)))) (_x_49_52 (assq _var_48 _alist_1))) (begin (_check! (pair? _x_49_52) 1 _x_49_52) (cdr:pair _x_49_52))) _results_28_32_40)))))) (_loop_33_36_39 (intersection (freevariables (let ((_x_57_60 _exps_13)) (begin (_check! (pair? _x_57_60) 0 _x_57_60) (car:pair _x_57_60)))) _names_4) '()))))) _l_13)))))) (_loop_5_9_12 _regnums_1 _exps_1 '()))))))) 'dependency-graph))
(let () (begin (set! toposort (lambda (_graph_1) (if (null? (let ((_x_3_6 _graph_1)) (begin (_check! (pair? _x_3_6) 1 _x_3_6) (cdr:pair _x_3_6)))) (cons (let ((_x_9_12 (let ((_x_13_16 _graph_1)) (begin (_check! (pair? _x_13_16) 0 _x_13_16) (car:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 0 _x_9_12) (car:pair _x_9_12))) '()) (toposort2 _graph_1 '())))) 'toposort))
(let () (begin (set! toposort2 (lambda (_totry_1 _tried_1) (if (null? _totry_1) #f (if (let ((_temp_4_7 (null? (let ((_x_45_48 (let ((_x_49_52 _totry_1)) (begin (_check! (pair? _x_49_52) 0 _x_49_52) (car:pair _x_49_52))))) (begin (_check! (pair? _x_45_48) 1 _x_45_48) (cdr:pair _x_45_48)))))) (if _temp_4_7 _temp_4_7 (if (null? (let ((_x_11_14 (let ((_x_15_18 (let ((_x_19_22 _totry_1)) (begin (_check! (pair? _x_19_22) 0 _x_19_22) (car:pair _x_19_22))))) (begin (_check! (pair? _x_15_18) 1 _x_15_18) (cdr:pair _x_15_18))))) (begin (_check! (pair? _x_11_14) 1 _x_11_14) (cdr:pair _x_11_14)))) (eq? (let ((_x_25_28 (let ((_x_29_32 (let ((_x_33_36 _totry_1)) (begin (_check! (pair? _x_33_36) 0 _x_33_36) (car:pair _x_33_36))))) (begin (_check! (pair? _x_29_32) 1 _x_29_32) (cdr:pair _x_29_32))))) (begin (_check! (pair? _x_25_28) 0 _x_25_28) (car:pair _x_25_28))) (let ((_x_37_40 (let ((_x_41_44 _totry_1)) (begin (_check! (pair? _x_41_44) 0 _x_41_44) (car:pair _x_41_44))))) (begin (_check! (pair? _x_37_40) 0 _x_37_40) (car:pair _x_37_40)))) #f))) (if (if (null? (let ((_x_54_57 _totry_1)) (begin (_check! (pair? _x_54_57) 1 _x_54_57) (cdr:pair _x_54_57)))) (null? _tried_1) #f) (cons (let ((_x_61_64 (let ((_x_65_68 _totry_1)) (begin (_check! (pair? _x_65_68) 0 _x_65_68) (car:pair _x_65_68))))) (begin (_check! (pair? _x_61_64) 0 _x_61_64) (car:pair _x_61_64))) '()) (let* ((_node_71 (let ((_x_116_119 (let ((_x_120_123 _totry_1)) (begin (_check! (pair? _x_120_123) 0 _x_120_123) (car:pair _x_120_123))))) (begin (_check! (pair? _x_116_119) 0 _x_116_119) (car:pair _x_116_119)))) (_x_74 (toposort2 (let () (let ((_loop_83_86_89 (unspecified))) (begin (set! _loop_83_86_89 (lambda (_y1_78_79_90 _results_78_82_90) (if (null? _y1_78_79_90) (reverse _results_78_82_90) (begin #t (_loop_83_86_89 (let ((_x_94_97 _y1_78_79_90)) (begin (_check! (pair? _x_94_97) 1 _x_94_97) (cdr:pair _x_94_97))) (cons (let ((_y_98 (let ((_x_107_110 _y1_78_79_90)) (begin (_check! (pair? _x_107_110) 0 _x_107_110) (car:pair _x_107_110))))) (cons (let ((_x_99_102 _y_98)) (begin (_check! (pair? _x_99_102) 0 _x_99_102) (car:pair _x_99_102))) (remove _node_71 (let ((_x_103_106 _y_98)) (begin (_check! (pair? _x_103_106) 1 _x_103_106) (cdr:pair _x_103_106)))))) _results_78_82_90)))))) (_loop_83_86_89 (append (let ((_x_111_114 _totry_1)) (begin (_check! (pair? _x_111_114) 1 _x_111_114) (cdr:pair _x_111_114))) _tried_1) '())))) '()))) (let () (if _x_74 (cons _node_71 _x_74) #f)))) (toposort2 (let ((_x_125_128 _totry_1)) (begin (_check! (pair? _x_125_128) 1 _x_125_128) (cdr:pair _x_125_128))) (cons (let ((_x_129_132 _totry_1)) (begin (_check! (pair? _x_129_132) 0 _x_129_132) (car:pair _x_129_132))) _tried_1)))))) 'toposort2))
(let () (begin (set! iota (lambda (_n_1) (iota2 _n_1 '()))) 'iota))
(let () (begin (set! iota1 (lambda (_n_1) (let ((_x_2_5 (iota2 (+ _n_1 1) '()))) (begin (_check! (pair? _x_2_5) 1 _x_2_5) (cdr:pair _x_2_5))))) 'iota1))
(let () (begin (set! iota2 (lambda (_n_1 _l_1) (if (zero? _n_1) _l_1 (let ((_n_4 (- _n_1 1))) (iota2 _n_4 (cons _n_4 _l_1)))))) 'iota2))
(let () (begin (set! freevariables (lambda (_exp_1) (let ((_freevariables_2 0)) (begin (set! _freevariables_2 (lambda (_exp_3) (freevars2 _exp_3 '()))) (_freevariables_2 _exp_1))))) 'freevariables))
(let () (begin (set! freevars2 (lambda (_exp_1 _env_1) (let ((_freevars2_2 0)) (begin (set! _freevars2_2 (lambda (_exp_3 _env_3) (if (symbol? _exp_3) (if (memq _exp_3 _env_3) '() (cons _exp_3 '())) (if (not (pair? _exp_3)) '() (let ((_keyword_10 (let ((_x_145_148 _exp_3)) (begin (_check! (pair? _x_145_148) 0 _x_145_148) (car:pair _x_145_148))))) (if (eq? _keyword_10 'quote) '() (if (eq? _keyword_10 'lambda) (let ((_env_15 (append (make-null-terminated (let ((_x_51_54 (let ((_x_55_58 _exp_3)) (begin (_check! (pair? _x_55_58) 1 _x_55_58) (cdr:pair _x_55_58))))) (begin (_check! (pair? _x_51_54) 0 _x_51_54) (car:pair _x_51_54)))) _env_3))) (apply-union (let () (let ((_loop_21_24_27 (unspecified))) (begin (set! _loop_21_24_27 (lambda (_y1_16_17_28 _results_16_20_28) (if (null? _y1_16_17_28) (reverse _results_16_20_28) (begin #t (_loop_21_24_27 (let ((_x_32_35 _y1_16_17_28)) (begin (_check! (pair? _x_32_35) 1 _x_32_35) (cdr:pair _x_32_35))) (cons (let ((_x_36 (let ((_x_37_40 _y1_16_17_28)) (begin (_check! (pair? _x_37_40) 0 _x_37_40) (car:pair _x_37_40))))) (_freevars2_2 _x_36 _env_15)) _results_16_20_28)))))) (_loop_21_24_27 (let ((_x_42_45 (let ((_x_46_49 _exp_3)) (begin (_check! (pair? _x_46_49) 1 _x_46_49) (cdr:pair _x_46_49))))) (begin (_check! (pair? _x_42_45) 1 _x_42_45) (cdr:pair _x_42_45))) '())))))) (if (let ((_t0_60_61_64 _keyword_10) (_t1_60_61_64 '(if set! begin))) (if (eq? _t0_60_61_64 'if) _t1_60_61_64 (let ((_t1_60_61_68 (let ((_x_86_89 _t1_60_61_64)) (begin (_check! (pair? _x_86_89) 1 _x_86_89) (cdr:pair _x_86_89))))) (if (eq? _t0_60_61_64 'set!) _t1_60_61_68 (let ((_t1_60_61_72 (let ((_x_82_85 _t1_60_61_68)) (begin (_check! (pair? _x_82_85) 1 _x_82_85) (cdr:pair _x_82_85))))) (if (eq? _t0_60_61_64 'begin) _t1_60_61_72 (let ((_t1_60_61_76 (let ((_x_78_81 _t1_60_61_72)) (begin (_check! (pair? _x_78_81) 1 _x_78_81) (cdr:pair _x_78_81))))) #f))))))) (apply-union (let () (let ((_loop_95_98_101 (unspecified))) (begin (set! _loop_95_98_101 (lambda (_y1_90_91_102 _results_90_94_102) (if (null? _y1_90_91_102) (reverse _results_90_94_102) (begin #t (_loop_95_98_101 (let ((_x_106_109 _y1_90_91_102)) (begin (_check! (pair? _x_106_109) 1 _x_106_109) (cdr:pair _x_106_109))) (cons (let ((_x_110 (let ((_x_111_114 _y1_90_91_102)) (begin (_check! (pair? _x_111_114) 0 _x_111_114) (car:pair _x_111_114))))) (_freevars2_2 _x_110 _env_3)) _results_90_94_102)))))) (_loop_95_98_101 (let ((_x_115_118 _exp_3)) (begin (_check! (pair? _x_115_118) 1 _x_115_118) (cdr:pair _x_115_118))) '()))))) (apply-union (let () (let ((_loop_125_128_131 (unspecified))) (begin (set! _loop_125_128_131 (lambda (_y1_120_121_132 _results_120_124_132) (if (null? _y1_120_121_132) (reverse _results_120_124_132) (begin #t (_loop_125_128_131 (let ((_x_136_139 _y1_120_121_132)) (begin (_check! (pair? _x_136_139) 1 _x_136_139) (cdr:pair _x_136_139))) (cons (let ((_x_140 (let ((_x_141_144 _y1_120_121_132)) (begin (_check! (pair? _x_141_144) 0 _x_141_144) (car:pair _x_141_144))))) (_freevars2_2 _x_140 _env_3)) _results_120_124_132)))))) (_loop_125_128_131 _exp_3 '()))))))))))))) (_freevars2_2 _exp_1 _env_1))))) 'freevars2))
(let () (begin (set! cg-let (lambda (_output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1) (let ((_cg-let_2 0)) (begin (set! _cg-let_2 (lambda (_output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (let* ((_proc_6 (call_proc _exp_3)) (_vars_9 (lambda_args _proc_6)) (_n_12 (length _vars_9)) (_free_15 (lambda_f _proc_6)) (_live_18 (cgframe-livevars _frame_3))) (let () (if (if (null? (lambda_defs _proc_6)) (= _n_12 1) #f) (cg-let1 _output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (let* ((_args_26 (call_args _exp_3)) (_temps_29 (newtemps _n_12)) (_alist_32 (let () (let ((_loop_83_87_90 (unspecified))) (begin (set! _loop_83_87_90 (lambda (_y1_77_79_91 _y1_77_78_91 _results_77_82_91) (if (let ((_temp_93_96 (null? _y1_77_79_91))) (if _temp_93_96 _temp_93_96 (null? _y1_77_78_91))) (reverse _results_77_82_91) (begin #t (_loop_83_87_90 (let ((_x_99_102 _y1_77_79_91)) (begin (_check! (pair? _x_99_102) 1 _x_99_102) (cdr:pair _x_99_102))) (let ((_x_103_106 _y1_77_78_91)) (begin (_check! (pair? _x_103_106) 1 _x_103_106) (cdr:pair _x_103_106))) (cons (cons (let ((_x_107_110 _y1_77_79_91)) (begin (_check! (pair? _x_107_110) 0 _x_107_110) (car:pair _x_107_110))) (let ((_x_111_114 _y1_77_78_91)) (begin (_check! (pair? _x_111_114) 0 _x_111_114) (car:pair _x_111_114)))) _results_77_82_91)))))) (_loop_83_87_90 _temps_29 _vars_9 '())))))) (let () (begin (let () (let ((_loop_42_45_48 (unspecified))) (begin (set! _loop_42_45_48 (lambda (_y1_36_38_49 _y1_36_37_49) (if (let ((_temp_51_54 (null? _y1_36_38_49))) (if _temp_51_54 _temp_51_54 (null? _y1_36_37_49))) (if #f #f (unspecified)) (begin (begin #t (let ((_arg_57 (let ((_x_61_64 _y1_36_38_49)) (begin (_check! (pair? _x_61_64) 0 _x_61_64) (car:pair _x_61_64)))) (_t_57 (let ((_x_65_68 _y1_36_37_49)) (begin (_check! (pair? _x_65_68) 0 _x_65_68) (car:pair _x_65_68))))) (let ((_r_60 (choose-register _regs_3 _frame_3))) (begin (cg0 _output_3 _arg_57 _r_60 _regs_3 _frame_3 _env_3 #f) (cgreg-bind! _regs_3 _r_60 _t_57) (gen-store! _output_3 _frame_3 _r_60 _t_57))))) (_loop_42_45_48 (let ((_x_69_72 _y1_36_38_49)) (begin (_check! (pair? _x_69_72) 1 _x_69_72) (cdr:pair _x_69_72))) (let ((_x_73_76 _y1_36_37_49)) (begin (_check! (pair? _x_73_76) 1 _x_73_76) (cdr:pair _x_73_76)))))))) (_loop_42_45_48 _args_26 _temps_29)))) (cgreg-rename! _regs_3 _alist_32) (cgframe-rename! _frame_3 _alist_32) (cg-let-release! _free_15 _live_18 _regs_3 _frame_3 _tail?_3) (cg-let-body _output_3 _proc_6 _target_3 _regs_3 _frame_3 _env_3 _tail?_3))))))))) (_cg-let_2 _output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1))))) 'cg-let))
(let () (begin (set! cg-let-release! (lambda (_free_1 _live_1 _regs_1 _frame_1 _tail?_1) (let ((_cg-let-release!_2 0)) (begin (set! _cg-let-release!_2 (lambda (_free_3 _live_3 _regs_3 _frame_3 _tail?_3) (if _tail?_3 (let ((_keepers_7 (cons (cgreg-lookup-reg _regs_3 0) _free_3))) (begin (cgreg-release-except! _regs_3 _keepers_7) (cgframe-release-except! _frame_3 _keepers_7))) (if _live_3 (let ((_keepers_11 (cons (cgreg-lookup-reg _regs_3 0) (union _live_3 _free_3)))) (begin (cgreg-release-except! _regs_3 _keepers_11) (cgframe-release-except! _frame_3 _keepers_11))) (unspecified))))) (_cg-let-release!_2 _free_1 _live_1 _regs_1 _frame_1 _tail?_1))))) 'cg-let-release!))
(let () (begin (set! cg-let-body (lambda (_output_1 _l_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1) (let ((_cg-let-body_2 0)) (begin (set! _cg-let-body_2 (lambda (_output_3 _l_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (let ((_vars_6 (lambda_args _l_3)) (_free_6 (lambda_f _l_3)) (_live_6 (cgframe-livevars _frame_3))) (let ((_r_9 (cg-body _output_3 _l_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3))) (begin (let () (let ((_loop_15_17_20 (unspecified))) (begin (set! _loop_15_17_20 (lambda (_y1_10_11_21) (if (null? _y1_10_11_21) (if #f #f (unspecified)) (begin (begin #t (let* ((_v_25 (let ((_x_29_32 _y1_10_11_21)) (begin (_check! (pair? _x_29_32) 0 _x_29_32) (car:pair _x_29_32)))) (_entry_28 (cgreg-lookup _regs_3 _v_25))) (begin (if _entry_28 (cgreg-release! _regs_3 (entry_regnum _entry_28)) (unspecified)) (cgframe-release! _frame_3 _v_25)))) (_loop_15_17_20 (let ((_x_33_36 _y1_10_11_21)) (begin (_check! (pair? _x_33_36) 1 _x_33_36) (cdr:pair _x_33_36)))))))) (_loop_15_17_20 _vars_6)))) (if (if (not _target_3) (if (not (eq? _r_9 'result)) (not (cgreg-lookup-reg _regs_3 _r_9)) #f) #f) (cg-move _output_3 _frame_3 _regs_3 _r_9 'result) _r_9)))))) (_cg-let-body_2 _output_1 _l_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1))))) 'cg-let-body))
(let () (begin (set! cg-let1 (lambda (_output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1) (let ((_cg-let1_2 0)) (begin (set! _cg-let1_2 (lambda (_output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (let* ((_proc_6 (call_proc _exp_3)) (_v_9 (let ((_x_41_44 (lambda_args _proc_6))) (begin (_check! (pair? _x_41_44) 0 _x_41_44) (car:pair _x_41_44)))) (_arg_12 (let ((_x_37_40 (call_args _exp_3))) (begin (_check! (pair? _x_37_40) 0 _x_37_40) (car:pair _x_37_40)))) (_free_15 (lambda_f _proc_6)) (_live_18 (cgframe-livevars _frame_3)) (_body_21 (lambda_body _proc_6))) (let () (let ((_finish_25 (unspecified)) (_release-registers!_25 (unspecified)) (_evaluate-into-register_25 (unspecified))) (begin (set! _finish_25 (lambda () (begin (_release-registers!_25) (cg-let-body _output_3 _proc_6 _target_3 _regs_3 _frame_3 _env_3 _tail?_3)))) (set! _release-registers!_25 (lambda () (begin (cgframe-livevars-set! _frame_3 _live_18) (cg-let-release! _free_15 _live_18 _regs_3 _frame_3 _tail?_3)))) (set! _evaluate-into-register_25 (lambda (_r_28) (begin (cg0 _output_3 _arg_12 _r_28 _regs_3 _frame_3 _env_3 #f) (cgreg-bind! _regs_3 _r_28 _v_9) (gen-store! _output_3 _frame_3 _r_28 _v_9) _r_28))) (if _live_18 (cgframe-livevars-set! _frame_3 (union _live_18 _free_15)) (unspecified)) (if (assq _v_9 *regnames*) (begin (_evaluate-into-register_25 (let ((_x_30_33 (assq _v_9 *regnames*))) (begin (_check! (pair? _x_30_33) 1 _x_30_33) (cdr:pair _x_30_33)))) (_finish_25)) (if (not (memq _v_9 _free_15)) (begin (cg0 _output_3 _arg_12 #f _regs_3 _frame_3 _env_3 #f) (_finish_25)) (if _live_18 (begin (cg0 _output_3 _arg_12 'result _regs_3 _frame_3 _env_3 #f) (_release-registers!_25) (cg-let1-result _output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3)) (begin (_evaluate-into-register_25 (choose-register _regs_3 _frame_3)) (_finish_25))))))))))) (_cg-let1_2 _output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1))))) 'cg-let1))
(let () (begin (set! cg-let1-result (lambda (_output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1) (let ((_cg-let1-result_2 0)) (begin (set! _cg-let1-result_2 (lambda (_output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (let* ((_proc_6 (call_proc _exp_3)) (_v_9 (let ((_x_63_66 (lambda_args _proc_6))) (begin (_check! (pair? _x_63_66) 0 _x_63_66) (car:pair _x_63_66)))) (_free_12 (lambda_f _proc_6)) (_live_15 (cgframe-livevars _frame_3)) (_body_18 (lambda_body _proc_6)) (_pattern_21 (cg-let-used-once _v_9 _body_18))) (let () (let ((_release-registers!_26 (unspecified)) (_move-to-register_26 (unspecified))) (begin (set! _release-registers!_26 (lambda () (begin (cgframe-livevars-set! _frame_3 _live_15) (cg-let-release! _free_12 _live_15 _regs_3 _frame_3 _tail?_3)))) (set! _move-to-register_26 (lambda (_r_28) (begin (gen! _output_3 $setreg _r_28) (cgreg-bind! _regs_3 _r_28 _v_9) (gen-store! _output_3 _frame_3 _r_28 _v_9) _r_28))) (let ((_temp_25_31 _pattern_21)) (if (memv _temp_25_31 '(if)) (cg-if-result _output_3 _body_18 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (if (memv _temp_25_31 '(let-if)) (begin (if _live_15 (cgframe-livevars-set! _frame_3 (union _live_15 _free_12)) (unspecified)) (cg-if-result _output_3 (let ((_x_34_37 (call_args _body_18))) (begin (_check! (pair? _x_34_37) 0 _x_34_37) (car:pair _x_34_37))) 'result _regs_3 _frame_3 _env_3 #f) (_release-registers!_26) (_cg-let1-result_2 _output_3 _body_18 _target_3 _regs_3 _frame_3 _env_3 _tail?_3)) (if (memv _temp_25_31 '(set!)) (cg-assignment-result _output_3 _body_18 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (if (memv _temp_25_31 '(let-set!)) (begin (cg-assignment-result _output_3 (let ((_x_40_43 (call_args _body_18))) (begin (_check! (pair? _x_40_43) 0 _x_40_43) (car:pair _x_40_43))) 'result _regs_3 _frame_3 _env_3 #f) (_cg-let1-result_2 _output_3 _body_18 _target_3 _regs_3 _frame_3 _env_3 _tail?_3)) (if (memv _temp_25_31 '(primop)) (cg-primop-result _output_3 _body_18 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (if (memv _temp_25_31 '(let-primop)) (begin (cg-primop-result _output_3 (let ((_x_46_49 (call_args _body_18))) (begin (_check! (pair? _x_46_49) 0 _x_46_49) (car:pair _x_46_49))) 'result _regs_3 _frame_3 _env_3 #f) (_cg-let1-result_2 _output_3 _body_18 _target_3 _regs_3 _frame_3 _env_3 _tail?_3)) (if (memv _temp_25_31 '(_called)) (cg-call-result _output_3 _body_18 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (if (memv _temp_25_31 '(_let-called)) (begin (cg-call-result _output_3 (let ((_x_52_55 (call_args _body_18))) (begin (_check! (pair? _x_52_55) 0 _x_52_55) (car:pair _x_52_55))) 'result _regs_3 _frame_3 _env_3 #f) (_cg-let1-result_2 _output_3 _body_18 _target_3 _regs_3 _frame_3 _env_3 _tail?_3)) (begin (if (assq _v_9 *regnames*) (_move-to-register_26 (let ((_x_58_61 (assq _v_9 *regnames*))) (begin (_check! (pair? _x_58_61) 1 _x_58_61) (cdr:pair _x_58_61)))) (if (memq _v_9 _free_12) (_move-to-register_26 (choose-register _regs_3 _frame_3)) (unspecified))) (cg-let-body _output_3 _proc_6 _target_3 _regs_3 _frame_3 _env_3 _tail?_3))))))))))))))))) (_cg-let1-result_2 _output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1))))) 'cg-let1-result))
(let () (begin (set! cg-primop-result (lambda (_output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1) (let ((_cg-primop-result_2 0)) (begin (set! _cg-primop-result_2 (lambda (_output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (let ((_args_6 (call_args _exp_3)) (_entry_6 (var-lookup (variable_name (call_proc _exp_3)) _regs_3 _frame_3 _env_3))) (if (= (entry_arity _entry_6) (length _args_6)) (begin (let ((_temp_7_10 (entry_arity _entry_6))) (if (memv _temp_7_10 '(0)) (gen! _output_3 $op1 (entry_op _entry_6)) (if (memv _temp_7_10 '(1)) (gen! _output_3 $op1 (entry_op _entry_6)) (if (memv _temp_7_10 '(2)) (cg-primop2-result! _output_3 _entry_6 _args_6 _regs_3 _frame_3 _env_3) (if (memv _temp_7_10 '(3)) (let ((_rs_17 (cg-result-args _output_3 _args_6 _regs_3 _frame_3 _env_3))) (gen! _output_3 $op3 (entry_op _entry_6) (let ((_x_18_21 _rs_17)) (begin (_check! (pair? _x_18_21) 0 _x_18_21) (car:pair _x_18_21))) (let ((_x_23_26 (let ((_x_27_30 _rs_17)) (begin (_check! (pair? _x_27_30) 1 _x_27_30) (cdr:pair _x_27_30))))) (begin (_check! (pair? _x_23_26) 0 _x_23_26) (car:pair _x_23_26))))) (error "Bug detected by cg-primop-result" (make-readable _exp_3))))))) (if _tail?_3 (begin (gen-pop! _output_3 _frame_3) (gen! _output_3 $return) 'result) (cg-move _output_3 _frame_3 _regs_3 'result _target_3))) (if (< (entry_arity _entry_6) 0) (cg-special-result _output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (error "Wrong number of arguments to integrable procedure" (make-readable _exp_3))))))) (_cg-primop-result_2 _output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1))))) 'cg-primop-result))
(let () (begin (set! cg-primop2-result! (lambda (_output_1 _entry_1 _args_1 _regs_1 _frame_1 _env_1) (let ((_cg-primop2-result!_2 0)) (begin (set! _cg-primop2-result!_2 (lambda (_output_3 _entry_3 _args_3 _regs_3 _frame_3 _env_3) (let ((_op_6 (entry_op _entry_3)) (_arg2_6 (let ((_x_18_21 (let ((_x_22_25 _args_3)) (begin (_check! (pair? _x_22_25) 1 _x_22_25) (cdr:pair _x_22_25))))) (begin (_check! (pair? _x_18_21) 0 _x_18_21) (car:pair _x_18_21))))) (if (if (constant? _arg2_6) (if (entry_imm _entry_3) ((entry_imm _entry_3) (constant_value _arg2_6)) #f) #f) (gen! _output_3 $op2imm _op_6 (constant_value _arg2_6)) (let ((_rs_12 (cg-result-args _output_3 _args_3 _regs_3 _frame_3 _env_3))) (gen! _output_3 $op2 _op_6 (let ((_x_13_16 _rs_12)) (begin (_check! (pair? _x_13_16) 0 _x_13_16) (car:pair _x_13_16))))))))) (_cg-primop2-result!_2 _output_1 _entry_1 _args_1 _regs_1 _frame_1 _env_1))))) 'cg-primop2-result!))
(let () (begin (set! cg-result-args (lambda (_output_1 _args_1 _regs_1 _frame_1 _env_1) (let ((_cg-result-args_2 0)) (begin (set! _cg-result-args_2 (lambda (_output_3 _args_3 _regs_3 _frame_3 _env_3) (let ((_save-result!_4 (unspecified)) (_loop_4 (unspecified))) (begin (set! _save-result!_4 (lambda (_args_5 _registers_5 _rr_5 _rs_5 _temps_5) (let ((_r_8 (let ((_x_13_16 _registers_5)) (begin (_check! (pair? _x_13_16) 0 _x_13_16) (car:pair _x_13_16))))) (begin (gen! _output_3 $setreg _r_8) (_loop_4 _args_5 (let ((_x_9_12 _registers_5)) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))) _r_8 _rs_5 _temps_5))))) (set! _loop_4 (lambda (_args_17 _registers_17 _rr_17 _rs_17 _temps_17) (if (null? _args_17) (begin (if (not (eq? _rr_17 'result)) (gen! _output_3 $reg _rr_17) (unspecified)) (let () (let ((_loop_23_25_28 (unspecified))) (begin (set! _loop_23_25_28 (lambda (_y1_18_19_29) (if (null? _y1_18_19_29) (if #f #f (unspecified)) (begin (begin #t (let ((_r_33 (let ((_x_34_37 _y1_18_19_29)) (begin (_check! (pair? _x_34_37) 0 _x_34_37) (car:pair _x_34_37))))) (cgreg-release! _regs_3 _r_33))) (_loop_23_25_28 (let ((_x_38_41 _y1_18_19_29)) (begin (_check! (pair? _x_38_41) 1 _x_38_41) (cdr:pair _x_38_41)))))))) (_loop_23_25_28 _temps_17)))) (reverse _rs_17)) (let ((_arg_44 (let ((_x_134_137 _args_17)) (begin (_check! (pair? _x_134_137) 0 _x_134_137) (car:pair _x_134_137))))) (if (constant? _arg_44) (let ((_r_48 (let ((_x_57_60 _registers_17)) (begin (_check! (pair? _x_57_60) 0 _x_57_60) (car:pair _x_57_60))))) (begin (gen! _output_3 $const/setreg (constant_value _arg_44) _r_48) (cgreg-bind! _regs_3 _r_48 #t) (_loop_4 (let ((_x_49_52 _args_17)) (begin (_check! (pair? _x_49_52) 1 _x_49_52) (cdr:pair _x_49_52))) (let ((_x_53_56 _registers_17)) (begin (_check! (pair? _x_53_56) 1 _x_53_56) (cdr:pair _x_53_56))) _rr_17 (cons _r_48 _rs_17) (cons _r_48 _temps_17)))) (if (variable? _arg_44) (let* ((_id_64 (variable_name _arg_44)) (_entry_67 (var-lookup _id_64 _regs_3 _frame_3 _env_3))) (let () (let ((_temp_71_74 (entry_kind _entry_67))) (if (memv _temp_71_74 '(global integrable)) (if (eq? _rr_17 'result) (_save-result!_4 _args_17 _registers_17 _rr_17 _rs_17 _temps_17) (let ((_r_78 (let ((_x_87_90 _registers_17)) (begin (_check! (pair? _x_87_90) 0 _x_87_90) (car:pair _x_87_90))))) (begin (gen! _output_3 $global _id_64) (gen! _output_3 $setreg _r_78) (cgreg-bind! _regs_3 _r_78 _id_64) (_loop_4 (let ((_x_79_82 _args_17)) (begin (_check! (pair? _x_79_82) 1 _x_79_82) (cdr:pair _x_79_82))) (let ((_x_83_86 _registers_17)) (begin (_check! (pair? _x_83_86) 1 _x_83_86) (cdr:pair _x_83_86))) _rr_17 (cons _r_78 _rs_17) (cons _r_78 _temps_17))))) (if (memv _temp_71_74 '(lexical)) (if (eq? _rr_17 'result) (_save-result!_4 _args_17 _registers_17 _rr_17 _rs_17 _temps_17) (let ((_m_94 (entry_rib _entry_67)) (_n_94 (entry_offset _entry_67)) (_r_94 (let ((_x_103_106 _registers_17)) (begin (_check! (pair? _x_103_106) 0 _x_103_106) (car:pair _x_103_106))))) (begin (gen! _output_3 $lexical _m_94 _n_94 _id_64) (gen! _output_3 $setreg _r_94) (cgreg-bind! _regs_3 _r_94 _id_64) (_loop_4 (let ((_x_95_98 _args_17)) (begin (_check! (pair? _x_95_98) 1 _x_95_98) (cdr:pair _x_95_98))) (let ((_x_99_102 _registers_17)) (begin (_check! (pair? _x_99_102) 1 _x_99_102) (cdr:pair _x_99_102))) _rr_17 (cons _r_94 _rs_17) (cons _r_94 _temps_17))))) (if (memv _temp_71_74 '(procedure)) (error "Bug in cg-variable" _arg_44) (if (memv _temp_71_74 '(register)) (let ((_r_111 (entry_regnum _entry_67))) (_loop_4 (let ((_x_112_115 _args_17)) (begin (_check! (pair? _x_112_115) 1 _x_112_115) (cdr:pair _x_112_115))) _registers_17 _rr_17 (cons _r_111 _rs_17) _temps_17)) (if (memv _temp_71_74 '(frame)) (let ((_r_119 (let ((_x_128_131 _registers_17)) (begin (_check! (pair? _x_128_131) 0 _x_128_131) (car:pair _x_128_131))))) (begin (gen-load! _output_3 _frame_3 _r_119 _id_64) (cgreg-bind! _regs_3 _r_119 _id_64) (_loop_4 (let ((_x_120_123 _args_17)) (begin (_check! (pair? _x_120_123) 1 _x_120_123) (cdr:pair _x_120_123))) (let ((_x_124_127 _registers_17)) (begin (_check! (pair? _x_124_127) 1 _x_124_127) (cdr:pair _x_124_127))) _rr_17 (cons _r_119 _rs_17) (cons _r_119 _temps_17)))) (error "Bug in cg-result-args" _arg_44))))))))) (error "Bug in cg-result-args"))))))) (_loop_4 (let ((_x_138_141 _args_3)) (begin (_check! (pair? _x_138_141) 1 _x_138_141) (cdr:pair _x_138_141))) (choose-registers _regs_3 _frame_3 (length _args_3)) 'result '() '()))))) (_cg-result-args_2 _output_1 _args_1 _regs_1 _frame_1 _env_1))))) 'cg-result-args))
(let () (begin (set! cg-let-used-once (lambda (_t1_1 _exp_1) (let ((_cg-let-used-once_2 0)) (begin (set! _cg-let-used-once_2 (lambda (_t1_3 _exp_3) (let ((_cg-let-used-once_4 (unspecified)) (_budget_4 (unspecified))) (begin (set! _cg-let-used-once_4 (lambda (_t1_5 _exp_5) (let ((_used-in-args?_6 (unspecified)) (_used?_6 (unspecified))) (begin (set! _used-in-args?_6 (lambda (_t1_7 _args_7) (if (null? _args_7) #f (let ((_temp_8_11 (_used?_6 _t1_7 (let ((_x_17_20 _args_7)) (begin (_check! (pair? _x_17_20) 0 _x_17_20) (car:pair _x_17_20)))))) (if _temp_8_11 _temp_8_11 (_used-in-args?_6 _t1_7 (let ((_x_13_16 _args_7)) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))))))) (set! _used?_6 (lambda (_t1_21 _exp_21) (begin (set! _budget_4 (- _budget_4 1)) (if (< _budget_4 0) #t (if (constant? _exp_21) #f (if (variable? _exp_21) (eq? _t1_21 (variable_name _exp_21)) (if (lambda? _exp_21) (memq _t1_21 (lambda_f _exp_21)) (if (assignment? _exp_21) (_used?_6 _t1_21 (assignment_rhs _exp_21)) (if (call? _exp_21) (let ((_temp_29_32 (_used?_6 _t1_21 (call_proc _exp_21)))) (if _temp_29_32 _temp_29_32 (_used-in-args?_6 _t1_21 (call_args _exp_21)))) (if (conditional? _exp_21) (let ((_temp_35_38 (_used?_6 _t1_21 (if_test _exp_21)))) (if _temp_35_38 _temp_35_38 (let ((_temp_39_42 (_used?_6 _t1_21 (if_then _exp_21)))) (if _temp_39_42 _temp_39_42 (_used?_6 _t1_21 (if_else _exp_21)))))) #t)))))))))) (set! _budget_4 (- _budget_4 1)) (if (< _budget_4 0) #f (if (call? _exp_5) (let ((_proc_50 (call_proc _exp_5)) (_args_50 (call_args _exp_5))) (if (variable? _proc_50) (let ((_f_54 (variable_name _proc_50))) (if (eq? _f_54 _t1_5) (if (not (_used-in-args?_6 _t1_5 _args_50)) 'called #f) (if (if (integrable? _f_54) (if (not (null? _args_50)) (if (variable? (let ((_x_62_65 _args_50)) (begin (_check! (pair? _x_62_65) 0 _x_62_65) (car:pair _x_62_65)))) (eq? _t1_5 (variable_name (let ((_x_67_70 _args_50)) (begin (_check! (pair? _x_67_70) 0 _x_67_70) (car:pair _x_67_70))))) #f) #f) #f) (if (not (_used-in-args?_6 _t1_5 (let ((_x_72_75 _args_50)) (begin (_check! (pair? _x_72_75) 1 _x_72_75) (cdr:pair _x_72_75))))) 'primop #f) #f))) (if (lambda? _proc_50) (if (not (memq _t1_5 (lambda_f _proc_50))) (if (not (null? _args_50)) (if (null? (let ((_x_82_85 _args_50)) (begin (_check! (pair? _x_82_85) 1 _x_82_85) (cdr:pair _x_82_85)))) (let ((_temp_87_90 (_cg-let-used-once_4 _t1_5 (let ((_x_96_99 _args_50)) (begin (_check! (pair? _x_96_99) 0 _x_96_99) (car:pair _x_96_99)))))) (if (memv _temp_87_90 '(if)) 'let-if (if (memv _temp_87_90 '(primop)) 'let-primop (if (memv _temp_87_90 '(called)) 'let-called (if (memv _temp_87_90 '(set!)) 'let-set! #f))))) #f) #f) #f) #f))) (if (conditional? _exp_5) (let ((_e0_104 (if_test _exp_5))) (if (variable? _e0_104) (if (eq? _t1_5 (variable_name _e0_104)) (if (not (_used?_6 _t1_5 (if_then _exp_5))) (if (not (_used?_6 _t1_5 (if_else _exp_5))) 'if #f) #f) #f) #f)) (if (assignment? _exp_5) (let ((_rhs_113 (assignment_rhs _exp_5))) (if (variable? _rhs_113) (if (eq? _t1_5 (variable_name _rhs_113)) 'set! #f) #f)) #f)))))))) (set! _budget_4 20) (_cg-let-used-once_4 _t1_3 _exp_3))))) (_cg-let-used-once_2 _t1_1 _exp_1))))) 'cg-let-used-once))
(let () (begin (set! cg-let-transform (lambda (_pattern_1 _exp_1 _e1_1) (let ((_cg-let-transform_2 0)) (begin (set! _cg-let-transform_2 (lambda (_pattern_3 _exp_3 _e1_3) (let ((_temp_4_7 _pattern_3)) (if (memv _temp_4_7 '(if)) (make-conditional _e1_3 (if_then _exp_3) (if_else _exp_3)) (if (memv _temp_4_7 '(primop)) (make-call (call_proc _exp_3) (cons _e1_3 (let ((_x_10_13 (call_args _exp_3))) (begin (_check! (pair? _x_10_13) 1 _x_10_13) (cdr:pair _x_10_13))))) (if (memv _temp_4_7 '(called)) (make-call _e1_3 (call_args _exp_3)) (if (memv _temp_4_7 '(set!)) (make-assignment (assignment_lhs _exp_3) _e1_3) (if (memv _temp_4_7 '(let-if let-primop let-called let-set!)) (make-call (call_proc _exp_3) (cons (_cg-let-transform_2 (let ((_temp_18_21 _pattern_3)) (if (memv _temp_18_21 '(let-if)) 'if (if (memv _temp_18_21 '(let-primop)) 'primop (if (memv _temp_18_21 '(let-called)) 'called (if (memv _temp_18_21 '(let-set!)) 'set! (unspecified)))))) (let ((_x_26_29 (call_args _exp_3))) (begin (_check! (pair? _x_26_29) 0 _x_26_29) (car:pair _x_26_29))) _e1_3) '())) (error "Unrecognized pattern in cg-let-transform" _pattern_3))))))))) (_cg-let-transform_2 _pattern_1 _exp_1 _e1_1))))) 'cg-let-transform))
(let () (begin (set! cg-special (lambda (_output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1) (let ((_cg-special_2 0)) (begin (set! _cg-special_2 (lambda (_output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (let ((_name_6 (variable_name (call_proc _exp_3)))) (if (eq? _name_6 name:check!) (if (runtime-safety-checking) (cg-check _output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (unspecified)) (error "Compiler bug: cg-special" (make-readable _exp_3)))))) (_cg-special_2 _output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1))))) 'cg-special))
(let () (begin (set! cg-special-result (lambda (_output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1) (let ((_cg-special-result_2 0)) (begin (set! _cg-special-result_2 (lambda (_output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (let ((_name_6 (variable_name (call_proc _exp_3)))) (if (eq? _name_6 name:check!) (if (runtime-safety-checking) (cg-check-result _output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (unspecified)) (error "Compiler bug: cg-special" (make-readable _exp_3)))))) (_cg-special-result_2 _output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1))))) 'cg-special-result))
(let () (begin (set! cg-check (lambda (_output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1) (let ((_cg-check_2 0)) (begin (set! _cg-check_2 (lambda (_output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (begin (cg0 _output_3 (let ((_x_4_7 (call_args _exp_3))) (begin (_check! (pair? _x_4_7) 0 _x_4_7) (car:pair _x_4_7))) 'result _regs_3 _frame_3 _env_3 #f) (cg-check-result _output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3)))) (_cg-check_2 _output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1))))) 'cg-check))
(let () (begin (set! cg-check-result (lambda (_output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1) (let ((_cg-check-result_2 0)) (begin (set! _cg-check-result_2 (lambda (_output_3 _exp_3 _target_3 _regs_3 _frame_3 _env_3 _tail?_3) (let* ((_args_6 (call_args _exp_3)) (_nargs_9 (length _args_6)) (_valexps_12 (let ((_x_173_176 (let ((_x_177_180 _args_6)) (begin (_check! (pair? _x_177_180) 1 _x_177_180) (cdr:pair _x_177_180))))) (begin (_check! (pair? _x_173_176) 1 _x_173_176) (cdr:pair _x_173_176))))) (let () (if (if (let ((_t_17_20 _nargs_9)) (if (<= 2 _t_17_20) (<= _t_17_20 5) #f)) (if (constant? (let ((_x_25_28 (let ((_x_29_32 _args_6)) (begin (_check! (pair? _x_29_32) 1 _x_29_32) (cdr:pair _x_29_32))))) (begin (_check! (pair? _x_25_28) 0 _x_25_28) (car:pair _x_25_28)))) (every? (lambda (_exp_34) (let ((_temp_35_38 (constant? _exp_34))) (if _temp_35_38 _temp_35_38 (variable? _exp_34)))) _valexps_12) #f) #f) (let* ((_exn_42 (constant_value (let ((_x_164_167 (let ((_x_168_171 _args_6)) (begin (_check! (pair? _x_168_171) 1 _x_168_171) (cdr:pair _x_168_171))))) (begin (_check! (pair? _x_164_167) 0 _x_164_167) (car:pair _x_164_167))))) (_vars_45 (filter variable? _valexps_12)) (_rs_48 (cg-result-args _output_3 (cons (let ((_x_159_162 _args_6)) (begin (_check! (pair? _x_159_162) 0 _x_159_162) (car:pair _x_159_162))) _vars_45) _regs_3 _frame_3 _env_3))) (let () (let ((_registers_54 _rs_48) (_exps_54 _valexps_12) (_operands_54 '())) (let () (let ((_loop_57 (unspecified))) (begin (set! _loop_57 (lambda (_registers_58 _exps_58 _operands_58) (if (null? _exps_58) (let* ((_situation_62 (cons _exn_42 (reverse _operands_58))) (_ht_65 (assembly-stream-info _output_3)) (_l1_68 (let ((_temp_125_128 (hashtable-get _ht_65 _situation_62))) (if _temp_125_128 _temp_125_128 (let ((_l1_132 (make-label))) (begin (hashtable-put! _ht_65 _situation_62 _l1_132) _l1_132)))))) (let () (let ((_translate_73 (unspecified))) (begin (set! _translate_73 (lambda (_r_74) (if (number? _r_74) _r_74 0))) (let ((_temp_72_77 (length _operands_58))) (if (memv _temp_72_77 '(0)) (gen! _output_3 $check 0 0 0 _l1_68) (if (memv _temp_72_77 '(1)) (gen! _output_3 $check (_translate_73 (let ((_x_80_83 _operands_58)) (begin (_check! (pair? _x_80_83) 0 _x_80_83) (car:pair _x_80_83)))) 0 0 _l1_68) (if (memv _temp_72_77 '(2)) (gen! _output_3 $check (_translate_73 (let ((_x_85_88 _operands_58)) (begin (_check! (pair? _x_85_88) 0 _x_85_88) (car:pair _x_85_88)))) (_translate_73 (let ((_x_90_93 (let ((_x_94_97 _operands_58)) (begin (_check! (pair? _x_94_97) 1 _x_94_97) (cdr:pair _x_94_97))))) (begin (_check! (pair? _x_90_93) 0 _x_90_93) (car:pair _x_90_93)))) 0 _l1_68) (if (memv _temp_72_77 '(3)) (gen! _output_3 $check (_translate_73 (let ((_x_99_102 _operands_58)) (begin (_check! (pair? _x_99_102) 0 _x_99_102) (car:pair _x_99_102)))) (_translate_73 (let ((_x_104_107 (let ((_x_108_111 _operands_58)) (begin (_check! (pair? _x_108_111) 1 _x_108_111) (cdr:pair _x_108_111))))) (begin (_check! (pair? _x_104_107) 0 _x_104_107) (car:pair _x_104_107)))) (_translate_73 (let ((_x_113_116 (let ((_x_117_120 (let ((_x_121_124 _operands_58)) (begin (_check! (pair? _x_121_124) 1 _x_121_124) (cdr:pair _x_121_124))))) (begin (_check! (pair? _x_117_120) 1 _x_117_120) (cdr:pair _x_117_120))))) (begin (_check! (pair? _x_113_116) 0 _x_113_116) (car:pair _x_113_116)))) _l1_68) (unspecified)))))))))) (if (constant? (let ((_x_134_137 _exps_58)) (begin (_check! (pair? _x_134_137) 0 _x_134_137) (car:pair _x_134_137)))) (_loop_57 _registers_58 (let ((_x_138_141 _exps_58)) (begin (_check! (pair? _x_138_141) 1 _x_138_141) (cdr:pair _x_138_141))) (cons (let ((_x_142_145 _exps_58)) (begin (_check! (pair? _x_142_145) 0 _x_142_145) (car:pair _x_142_145))) _operands_58)) (_loop_57 (let ((_x_147_150 _registers_58)) (begin (_check! (pair? _x_147_150) 1 _x_147_150) (cdr:pair _x_147_150))) (let ((_x_151_154 _exps_58)) (begin (_check! (pair? _x_151_154) 1 _x_151_154) (cdr:pair _x_151_154))) (cons (let ((_x_155_158 _registers_58)) (begin (_check! (pair? _x_155_158) 0 _x_155_158) (car:pair _x_155_158))) _operands_58)))))) (_loop_57 _registers_54 _exps_54 _operands_54))))))) (error "Compiler bug: runtime check" (make-readable _exp_3))))))) (_cg-check-result_2 _output_1 _exp_1 _target_1 _regs_1 _frame_1 _env_1 _tail?_1))))) 'cg-check-result))
(let () (begin (set! cg-trap (lambda (_output_1 _situation_1 _l1_1) (let ((_cg-trap_2 0)) (begin (set! _cg-trap_2 (lambda (_output_3 _situation_3 _l1_3) (let* ((_exn_6 (let ((_x_99_102 _situation_3)) (begin (_check! (pair? _x_99_102) 0 _x_99_102) (car:pair _x_99_102)))) (_operands_9 (let ((_x_95_98 _situation_3)) (begin (_check! (pair? _x_95_98) 1 _x_95_98) (cdr:pair _x_95_98))))) (let () (begin (gen! _output_3 $_label _l1_3) (let* ((_liveregs_15 (filter number? _operands_9)) (_loop_16 (unspecified))) (begin (set! _loop_16 (lambda (_operands_17 _registers_17 _r_17) (if (null? _operands_17) (let ((_temp_19_22 (length _registers_17))) (if (memv _temp_19_22 '(0)) (gen! _output_3 $trap 0 0 0 _exn_6) (if (memv _temp_19_22 '(1)) (gen! _output_3 $trap (let ((_x_25_28 _registers_17)) (begin (_check! (pair? _x_25_28) 0 _x_25_28) (car:pair _x_25_28))) 0 0 _exn_6) (if (memv _temp_19_22 '(2)) (gen! _output_3 $trap (let ((_x_30_33 _registers_17)) (begin (_check! (pair? _x_30_33) 0 _x_30_33) (car:pair _x_30_33))) (let ((_x_35_38 (let ((_x_39_42 _registers_17)) (begin (_check! (pair? _x_39_42) 1 _x_39_42) (cdr:pair _x_39_42))))) (begin (_check! (pair? _x_35_38) 0 _x_35_38) (car:pair _x_35_38))) 0 _exn_6) (if (memv _temp_19_22 '(3)) (gen! _output_3 $trap (let ((_x_44_47 _registers_17)) (begin (_check! (pair? _x_44_47) 0 _x_44_47) (car:pair _x_44_47))) (let ((_x_49_52 (let ((_x_53_56 _registers_17)) (begin (_check! (pair? _x_53_56) 1 _x_53_56) (cdr:pair _x_53_56))))) (begin (_check! (pair? _x_49_52) 0 _x_49_52) (car:pair _x_49_52))) (let ((_x_58_61 (let ((_x_62_65 (let ((_x_66_69 _registers_17)) (begin (_check! (pair? _x_66_69) 1 _x_66_69) (cdr:pair _x_66_69))))) (begin (_check! (pair? _x_62_65) 1 _x_62_65) (cdr:pair _x_62_65))))) (begin (_check! (pair? _x_58_61) 0 _x_58_61) (car:pair _x_58_61))) _exn_6) "Compiler bug: trap"))))) (if (number? (let ((_x_72_75 _operands_17)) (begin (_check! (pair? _x_72_75) 0 _x_72_75) (car:pair _x_72_75)))) (_loop_16 (let ((_x_76_79 _operands_17)) (begin (_check! (pair? _x_76_79) 1 _x_76_79) (cdr:pair _x_76_79))) (cons (let ((_x_80_83 _operands_17)) (begin (_check! (pair? _x_80_83) 0 _x_80_83) (car:pair _x_80_83))) _registers_17) _r_17) (if (memv _r_17 _liveregs_15) (_loop_16 _operands_17 _registers_17 (+ _r_17 1)) (begin (gen! _output_3 $const (constant_value (let ((_x_87_90 _operands_17)) (begin (_check! (pair? _x_87_90) 0 _x_87_90) (car:pair _x_87_90))))) (gen! _output_3 $setreg _r_17) (_loop_16 (let ((_x_91_94 _operands_17)) (begin (_check! (pair? _x_91_94) 1 _x_91_94) (cdr:pair _x_91_94))) (cons _r_17 _registers_17) (+ _r_17 1)))))))) (_loop_16 (reverse _operands_9) '() 1)))))))) (_cg-trap_2 _output_1 _situation_1 _l1_1))))) 'cg-trap))
(let () (begin (set! cg-check-args (lambda (_output_1 _args_1 _regs_1 _frame_1 _env_1) (let ((_cg-check-args_2 0)) (begin (set! _cg-check-args_2 (lambda (_output_3 _args_3 _regs_3 _frame_3 _env_3) (let ((_finish-loop_4 (unspecified)) (_eval-first-into-result_4 (unspecified)) (_eval-loop_4 (unspecified))) (begin (set! _finish-loop_4 (lambda (_disjoint_5 _temps_5 _mask_5 _registers_5) (if (null? _temps_5) _registers_5 (let* ((_t_8 (let ((_x_54_57 _temps_5)) (begin (_check! (pair? _x_54_57) 0 _x_54_57) (car:pair _x_54_57)))) (_entry_11 (cgreg-lookup _regs_3 _t_8))) (let () (if _entry_11 (let ((_r_17 (entry_regnum _entry_11))) (begin (if (let ((_x_18_21 _mask_5)) (begin (_check! (pair? _x_18_21) 0 _x_18_21) (car:pair _x_18_21))) (begin (cgreg-release! _regs_3 _r_17) (cgframe-release! _frame_3 _t_8)) (unspecified)) (_finish-loop_4 _disjoint_5 (let ((_x_22_25 _temps_5)) (begin (_check! (pair? _x_22_25) 1 _x_22_25) (cdr:pair _x_22_25))) (let ((_x_26_29 _mask_5)) (begin (_check! (pair? _x_26_29) 1 _x_26_29) (cdr:pair _x_26_29))) (cons _r_17 _registers_5)))) (let ((_r_32 (let ((_x_50_53 _disjoint_5)) (begin (_check! (pair? _x_50_53) 0 _x_50_53) (car:pair _x_50_53))))) (if (memv _r_32 _registers_5) (_finish-loop_4 (let ((_x_34_37 _disjoint_5)) (begin (_check! (pair? _x_34_37) 1 _x_34_37) (cdr:pair _x_34_37))) _temps_5 _mask_5 _registers_5) (begin (gen-load! _output_3 _frame_3 _r_32 _t_8) (cgreg-bind! _regs_3 _r_32 _t_8) (if (let ((_x_38_41 _mask_5)) (begin (_check! (pair? _x_38_41) 0 _x_38_41) (car:pair _x_38_41))) (begin (cgreg-release! _regs_3 _r_32) (cgframe-release! _frame_3 _t_8)) (unspecified)) (_finish-loop_4 _disjoint_5 (let ((_x_42_45 _temps_5)) (begin (_check! (pair? _x_42_45) 1 _x_42_45) (cdr:pair _x_42_45))) (let ((_x_46_49 _mask_5)) (begin (_check! (pair? _x_46_49) 1 _x_46_49) (cdr:pair _x_46_49))) (cons _r_32 _registers_5))))))))))) (set! _eval-first-into-result_4 (lambda (_temps_58 _mask_58) (begin (cg0 _output_3 (let ((_x_59_62 _args_3)) (begin (_check! (pair? _x_59_62) 0 _x_59_62) (car:pair _x_59_62))) 'result _regs_3 _frame_3 _env_3 #f) (_finish-loop_4 (choose-registers _regs_3 _frame_3 (length _temps_58)) _temps_58 _mask_58 '())))) (set! _eval-loop_4 (lambda (_args_63 _temps_63 _mask_63) (if (null? _args_63) (_eval-first-into-result_4 _temps_63 _mask_63) (let ((_reg_66 (cg0 _output_3 (let ((_x_84_87 _args_63)) (begin (_check! (pair? _x_84_87) 0 _x_84_87) (car:pair _x_84_87))) #f _regs_3 _frame_3 _env_3 #f))) (if (eq? _reg_66 'result) (let* ((_r_69 (choose-register _regs_3 _frame_3)) (_t_72 (newtemp))) (let () (begin (gen! _output_3 $setreg _r_69) (cgreg-bind! _regs_3 _r_69 _t_72) (gen-store! _output_3 _frame_3 _r_69 _t_72) (_eval-loop_4 (let ((_x_76_79 _args_63)) (begin (_check! (pair? _x_76_79) 1 _x_76_79) (cdr:pair _x_76_79))) (cons _t_72 _temps_63) (cons #t _mask_63))))) (_eval-loop_4 (let ((_x_80_83 _args_63)) (begin (_check! (pair? _x_80_83) 1 _x_80_83) (cdr:pair _x_80_83))) (cons (cgreg-lookup-reg _regs_3 _reg_66) _temps_63) (cons #f _mask_63))))))) (if (< (length _args_3) *nregs*) (_eval-loop_4 (let ((_x_88_91 _args_3)) (begin (_check! (pair? _x_88_91) 1 _x_88_91) (cdr:pair _x_88_91))) '() '()) (error "Bug detected by cg-primop-args" _args_3)))))) (_cg-check-args_2 _output_1 _args_1 _regs_1 _frame_1 _env_1))))) 'cg-check-args))
(let () (begin (set! filter-basic-blocks (let* ((_suppression-message_3 "Local optimization detected a useless instruction_") (_forward:normal_6 0) (_forward:nop_9 1) (_forward:ends-block_12 2) (_forward:interesting_15 3) (_forward:kills-all-registers_18 4) (_forward:nop-if-arg1-is-negative_21 5) (_backward:normal_24 0) (_backward:ends-block_27 1) (_backward:begins-block_30 2) (_backward:uses-arg1_33 4) (_backward:uses-arg2_36 8) (_backward:uses-arg3_39 16) (_backward:kills-arg1_42 32) (_backward:kills-arg2_45 64) (_backward:uses-many_48 128) (_dispatch-table-size_51 *number-of-mnemonics*) (_forward-table_54 (make-bytevector _dispatch-table-size_51)) (_backward-table_57 (make-bytevector _dispatch-table-size_51))) (let () (begin (let () (let ((_loop_62_64_67 (unspecified))) (begin (set! _loop_62_64_67 (lambda (_i_68) (if (= _i_68 _dispatch-table-size_51) (if #f #f (unspecified)) (begin (begin #t (bytevector-set! _forward-table_54 _i_68 _forward:normal_6) (bytevector-set! _backward-table_57 _i_68 _backward:normal_24)) (_loop_62_64_67 (+ _i_68 1)))))) (_loop_62_64_67 0)))) (bytevector-set! _forward-table_54 $nop _forward:nop_9) (bytevector-set! _forward-table_54 $invoke _forward:ends-block_12) (bytevector-set! _forward-table_54 $return _forward:ends-block_12) (bytevector-set! _forward-table_54 $skip _forward:ends-block_12) (bytevector-set! _forward-table_54 $branch _forward:ends-block_12) (bytevector-set! _forward-table_54 $branchf _forward:ends-block_12) (bytevector-set! _forward-table_54 $jump _forward:ends-block_12) (bytevector-set! _forward-table_54 $_align _forward:ends-block_12) (bytevector-set! _forward-table_54 $_proc _forward:ends-block_12) (bytevector-set! _forward-table_54 $_cont _forward:ends-block_12) (bytevector-set! _forward-table_54 $_label _forward:ends-block_12) (bytevector-set! _forward-table_54 $store _forward:interesting_15) (bytevector-set! _forward-table_54 $load _forward:interesting_15) (bytevector-set! _forward-table_54 $setstk _forward:interesting_15) (bytevector-set! _forward-table_54 $setreg _forward:interesting_15) (bytevector-set! _forward-table_54 $movereg _forward:interesting_15) (bytevector-set! _forward-table_54 $const/setreg _forward:interesting_15) (bytevector-set! _forward-table_54 $args>= _forward:kills-all-registers_18) (bytevector-set! _forward-table_54 $popstk _forward:kills-all-registers_18) (bytevector-set! _forward-table_54 $save _forward:nop-if-arg1-is-negative_21) (bytevector-set! _forward-table_54 $restore _forward:nop-if-arg1-is-negative_21) (bytevector-set! _forward-table_54 $pop _forward:nop-if-arg1-is-negative_21) (bytevector-set! _backward-table_57 $invoke _backward:ends-block_27) (bytevector-set! _backward-table_57 $return _backward:ends-block_27) (bytevector-set! _backward-table_57 $skip _backward:ends-block_27) (bytevector-set! _backward-table_57 $branch _backward:ends-block_27) (bytevector-set! _backward-table_57 $branchf _backward:ends-block_27) (bytevector-set! _backward-table_57 $jump _backward:begins-block_30) (bytevector-set! _backward-table_57 $_align _backward:begins-block_30) (bytevector-set! _backward-table_57 $_proc _backward:begins-block_30) (bytevector-set! _backward-table_57 $_cont _backward:begins-block_30) (bytevector-set! _backward-table_57 $_label _backward:begins-block_30) (bytevector-set! _backward-table_57 $op2 _backward:uses-arg2_36) (bytevector-set! _backward-table_57 $op3 (logior _backward:uses-arg2_36 _backward:uses-arg3_39)) (bytevector-set! _backward-table_57 $check (logior _backward:uses-arg1_33 (logior _backward:uses-arg2_36 _backward:uses-arg3_39))) (bytevector-set! _backward-table_57 $trap (logior _backward:uses-arg1_33 (logior _backward:uses-arg2_36 _backward:uses-arg3_39))) (bytevector-set! _backward-table_57 $store _backward:uses-arg1_33) (bytevector-set! _backward-table_57 $reg _backward:uses-arg1_33) (bytevector-set! _backward-table_57 $load _backward:kills-arg1_42) (bytevector-set! _backward-table_57 $setreg _backward:kills-arg1_42) (bytevector-set! _backward-table_57 $movereg (logior _backward:uses-arg1_33 _backward:kills-arg2_45)) (bytevector-set! _backward-table_57 $const/setreg _backward:kills-arg2_45) (bytevector-set! _backward-table_57 $lambda _backward:uses-many_48) (bytevector-set! _backward-table_57 $lexes _backward:uses-many_48) (bytevector-set! _backward-table_57 $args>= _backward:uses-many_48) (lambda (_instructions_71) (let* ((_*nregs*_74 *nregs*) (_registers_77 (make-vector _*nregs*_74 #f)) (_label-table_80 (make-hashtable (lambda (_n_532) _n_532) assv))) (let () (let ((_local-optimization-error_84 (unspecified)) (_suppress-backwards_84 (unspecified)) (_suppress-forwards_84 (unspecified)) (_backwards0_84 (unspecified)) (_backwards_84 (unspecified)) (_forwards-label_84 (unspecified)) (_forwards_84 (unspecified)) (_kill-stack!_84 (unspecified)) (_subvector-fill!_84 (unspecified)) (_vector-fill!_84 (unspecified)) (_lookup-label_84 (unspecified)) (_compute-transitive-closure!_84 (unspecified))) (begin (set! _local-optimization-error_84 (lambda (_op_85) (error "Compiler bug: local optimization" _op_85))) (set! _suppress-backwards_84 (lambda (_instruction_86 _instructions_86 _filtered_86) (begin (if (issue-warnings) '(begin (display suppression-message) (newline)) (unspecified)) (_backwards_84 _instructions_86 _filtered_86)))) (set! _suppress-forwards_84 (lambda (_instruction_87 _instructions_87 _filtered_87) (begin (if (issue-warnings) '(begin (display suppression-message) (newline)) (unspecified)) (_forwards_84 _instructions_87 _filtered_87)))) (set! _backwards0_84 (lambda (_instructions_88 _filtered_88) (if (null? _instructions_88) _filtered_88 (let* ((_instruction_91 (let ((_x_233_236 _instructions_88)) (begin (_check! (pair? _x_233_236) 0 _x_233_236) (car:pair _x_233_236)))) (_mnemonic_94 (instruction_op _instruction_91))) (let () (if (let ((_temp_99_102 (eqv? _mnemonic_94 $_label))) (if _temp_99_102 _temp_99_102 (let ((_temp_103_106 (eqv? _mnemonic_94 $_proc))) (if _temp_103_106 _temp_103_106 (let ((_temp_107_110 (eqv? _mnemonic_94 $_cont))) (if _temp_107_110 _temp_107_110 (eqv? _mnemonic_94 $_align))))))) (_backwards0_84 (let ((_x_116_119 _instructions_88)) (begin (_check! (pair? _x_116_119) 1 _x_116_119) (cdr:pair _x_116_119))) (cons _instruction_91 _filtered_88)) (if (eqv? _mnemonic_94 $return) (begin (_vector-fill!_84 _registers_77 #f) (let ((_v_122_125 _registers_77) (_i_122_125 0) (_x_122_125 #t)) (begin (_check! (fixnum? _i_122_125) 41 _v_122_125 _i_122_125 _x_122_125) (_check! (vector? _v_122_125) 41 _v_122_125 _i_122_125 _x_122_125) (_check! (<:fix:fix _i_122_125 (vector-length:vec _v_122_125)) 41 _v_122_125 _i_122_125 _x_122_125) (_check! (>=:fix:fix _i_122_125 0) 41 _v_122_125 _i_122_125 _x_122_125) (vector-set!:trusted _v_122_125 _i_122_125 _x_122_125))) (_backwards_84 (let ((_x_126_129 _instructions_88)) (begin (_check! (pair? _x_126_129) 1 _x_126_129) (cdr:pair _x_126_129))) (cons _instruction_91 _filtered_88))) (if (eqv? _mnemonic_94 $invoke) (let ((_n+1_134 (min _*nregs*_74 (+ (instruction_arg1 _instruction_91) 1)))) (begin (_subvector-fill!_84 _registers_77 0 _n+1_134 #t) (_subvector-fill!_84 _registers_77 _n+1_134 _*nregs*_74 #f) (_backwards_84 (let ((_x_135_138 _instructions_88)) (begin (_check! (pair? _x_135_138) 1 _x_135_138) (cdr:pair _x_135_138))) (cons _instruction_91 _filtered_88)))) (if (let ((_temp_140_143 (eqv? _mnemonic_94 $skip))) (if _temp_140_143 _temp_140_143 (eqv? _mnemonic_94 $branch))) (let* ((_live_149 (instruction_arg2 _instruction_91)) (_n+1_152 (min _*nregs*_74 (+ _live_149 1)))) (let () (begin (_subvector-fill!_84 _registers_77 0 _n+1_152 #t) (_subvector-fill!_84 _registers_77 _n+1_152 _*nregs*_74 #f) (let ((_instruction_158 (let* ((_t1_163_166 _mnemonic_94) (_t2_163_169 (let* ((_t1_173_176 (_lookup-label_84 (instruction_arg1 _instruction_91))) (_t2_173_179 (cons _live_149 '()))) (let () (cons _t1_173_176 _t2_173_179))))) (let () (cons _t1_163_166 _t2_163_169))))) (_backwards_84 (let ((_x_159_162 _instructions_88)) (begin (_check! (pair? _x_159_162) 1 _x_159_162) (cdr:pair _x_159_162))) (cons _instruction_158 _filtered_88)))))) (if (eqv? _mnemonic_94 $jump) (let ((_n+1_188 (min _*nregs*_74 (+ (instruction_arg3 _instruction_91) 1)))) (begin (_subvector-fill!_84 _registers_77 0 _n+1_188 #t) (_subvector-fill!_84 _registers_77 _n+1_188 _*nregs*_74 #f) (_backwards_84 (let ((_x_189_192 _instructions_88)) (begin (_check! (pair? _x_189_192) 1 _x_189_192) (cdr:pair _x_189_192))) (cons _instruction_91 _filtered_88)))) (if (eqv? _mnemonic_94 $branchf) (let* ((_live_197 (instruction_arg2 _instruction_91)) (_n+1_200 (min _*nregs*_74 (+ _live_197 1)))) (let () (begin (_subvector-fill!_84 _registers_77 0 _n+1_200 #t) (let ((_instruction_206 (let* ((_t1_211_214 _mnemonic_94) (_t2_211_217 (let* ((_t1_221_224 (_lookup-label_84 (instruction_arg1 _instruction_91))) (_t2_221_227 (cons _live_197 '()))) (let () (cons _t1_221_224 _t2_221_227))))) (let () (cons _t1_211_214 _t2_211_217))))) (_backwards_84 (let ((_x_207_210 _instructions_88)) (begin (_check! (pair? _x_207_210) 1 _x_207_210) (cdr:pair _x_207_210))) (cons _instruction_206 _filtered_88)))))) (_backwards_84 _instructions_88 _filtered_88)))))))))))) (set! _backwards_84 (lambda (_instructions_237 _filtered_237) (if (null? _instructions_237) _filtered_237 (let* ((_instruction_240 (let ((_x_329_332 _instructions_237)) (begin (_check! (pair? _x_329_332) 0 _x_329_332) (car:pair _x_329_332)))) (_instructions_243 (let ((_x_325_328 _instructions_237)) (begin (_check! (pair? _x_325_328) 1 _x_325_328) (cdr:pair _x_325_328)))) (_op_246 (instruction_op _instruction_240)) (_flags_249 (bytevector-ref _backward-table_57 _op_246))) (let () (if (eqv? _flags_249 _backward:normal_24) (_backwards_84 _instructions_243 (cons _instruction_240 _filtered_237)) (if (eqv? _flags_249 _backward:ends-block_27) (_backwards0_84 (cons _instruction_240 _instructions_243) _filtered_237) (if (eqv? _flags_249 _backward:begins-block_30) (_backwards0_84 _instructions_243 (cons _instruction_240 _filtered_237)) (if (eqv? _flags_249 _backward:uses-many_48) (if (let ((_temp_262_265 (eqv? _op_246 $lambda))) (if _temp_262_265 _temp_262_265 (eqv? _op_246 $lexes))) (let ((_live_271 (if (eqv? _op_246 $lexes) (instruction_arg1 _instruction_240) (instruction_arg2 _instruction_240)))) (begin (_subvector-fill!_84 _registers_77 0 (min _*nregs*_74 (+ 1 _live_271)) #t) (_backwards_84 _instructions_243 (cons _instruction_240 _filtered_237)))) (if (eqv? _op_246 $args>=) (begin (_vector-fill!_84 _registers_77 #t) (_backwards_84 _instructions_243 (cons _instruction_240 _filtered_237))) (_local-optimization-error_84 _op_246))) (if (if (eqv? (logand _flags_249 _backward:kills-arg1_42) _backward:kills-arg1_42) (not (let ((_v_280_283 _registers_77) (_i_280_283 (instruction_arg1 _instruction_240))) (begin (_check! (fixnum? _i_280_283) 40 _v_280_283 _i_280_283) (_check! (vector? _v_280_283) 40 _v_280_283 _i_280_283) (_check! (<:fix:fix _i_280_283 (vector-length:vec _v_280_283)) 40 _v_280_283 _i_280_283) (_check! (>=:fix:fix _i_280_283 0) 40 _v_280_283 _i_280_283) (vector-ref:trusted _v_280_283 _i_280_283)))) #f) (_suppress-backwards_84 _instruction_240 _instructions_243 _filtered_237) (if (if (eqv? (logand _flags_249 _backward:kills-arg2_45) _backward:kills-arg2_45) (not (let ((_v_288_291 _registers_77) (_i_288_291 (instruction_arg2 _instruction_240))) (begin (_check! (fixnum? _i_288_291) 40 _v_288_291 _i_288_291) (_check! (vector? _v_288_291) 40 _v_288_291 _i_288_291) (_check! (<:fix:fix _i_288_291 (vector-length:vec _v_288_291)) 40 _v_288_291 _i_288_291) (_check! (>=:fix:fix _i_288_291 0) 40 _v_288_291 _i_288_291) (vector-ref:trusted _v_288_291 _i_288_291)))) #f) (_suppress-backwards_84 _instruction_240 _instructions_243 _filtered_237) (if (if (eqv? _op_246 $movereg) (= (instruction_arg1 _instruction_240) (instruction_arg2 _instruction_240)) #f) (_backwards_84 _instructions_243 _filtered_237) (let ((_filtered_299 (cons _instruction_240 _filtered_237))) (begin (if (eqv? (logand _flags_249 _backward:kills-arg1_42) _backward:kills-arg1_42) (let ((_v_301_304 _registers_77) (_i_301_304 (instruction_arg1 _instruction_240)) (_x_301_304 #f)) (begin (_check! (fixnum? _i_301_304) 41 _v_301_304 _i_301_304 _x_301_304) (_check! (vector? _v_301_304) 41 _v_301_304 _i_301_304 _x_301_304) (_check! (<:fix:fix _i_301_304 (vector-length:vec _v_301_304)) 41 _v_301_304 _i_301_304 _x_301_304) (_check! (>=:fix:fix _i_301_304 0) 41 _v_301_304 _i_301_304 _x_301_304) (vector-set!:trusted _v_301_304 _i_301_304 _x_301_304))) (unspecified)) (if (eqv? (logand _flags_249 _backward:kills-arg2_45) _backward:kills-arg2_45) (let ((_v_306_309 _registers_77) (_i_306_309 (instruction_arg2 _instruction_240)) (_x_306_309 #f)) (begin (_check! (fixnum? _i_306_309) 41 _v_306_309 _i_306_309 _x_306_309) (_check! (vector? _v_306_309) 41 _v_306_309 _i_306_309 _x_306_309) (_check! (<:fix:fix _i_306_309 (vector-length:vec _v_306_309)) 41 _v_306_309 _i_306_309 _x_306_309) (_check! (>=:fix:fix _i_306_309 0) 41 _v_306_309 _i_306_309 _x_306_309) (vector-set!:trusted _v_306_309 _i_306_309 _x_306_309))) (unspecified)) (if (eqv? (logand _flags_249 _backward:uses-arg1_33) _backward:uses-arg1_33) (let ((_v_311_314 _registers_77) (_i_311_314 (instruction_arg1 _instruction_240)) (_x_311_314 #t)) (begin (_check! (fixnum? _i_311_314) 41 _v_311_314 _i_311_314 _x_311_314) (_check! (vector? _v_311_314) 41 _v_311_314 _i_311_314 _x_311_314) (_check! (<:fix:fix _i_311_314 (vector-length:vec _v_311_314)) 41 _v_311_314 _i_311_314 _x_311_314) (_check! (>=:fix:fix _i_311_314 0) 41 _v_311_314 _i_311_314 _x_311_314) (vector-set!:trusted _v_311_314 _i_311_314 _x_311_314))) (unspecified)) (if (eqv? (logand _flags_249 _backward:uses-arg2_36) _backward:uses-arg2_36) (let ((_v_316_319 _registers_77) (_i_316_319 (instruction_arg2 _instruction_240)) (_x_316_319 #t)) (begin (_check! (fixnum? _i_316_319) 41 _v_316_319 _i_316_319 _x_316_319) (_check! (vector? _v_316_319) 41 _v_316_319 _i_316_319 _x_316_319) (_check! (<:fix:fix _i_316_319 (vector-length:vec _v_316_319)) 41 _v_316_319 _i_316_319 _x_316_319) (_check! (>=:fix:fix _i_316_319 0) 41 _v_316_319 _i_316_319 _x_316_319) (vector-set!:trusted _v_316_319 _i_316_319 _x_316_319))) (unspecified)) (if (eqv? (logand _flags_249 _backward:uses-arg3_39) _backward:uses-arg3_39) (let ((_v_321_324 _registers_77) (_i_321_324 (instruction_arg3 _instruction_240)) (_x_321_324 #t)) (begin (_check! (fixnum? _i_321_324) 41 _v_321_324 _i_321_324 _x_321_324) (_check! (vector? _v_321_324) 41 _v_321_324 _i_321_324 _x_321_324) (_check! (<:fix:fix _i_321_324 (vector-length:vec _v_321_324)) 41 _v_321_324 _i_321_324 _x_321_324) (_check! (>=:fix:fix _i_321_324 0) 41 _v_321_324 _i_321_324 _x_321_324) (vector-set!:trusted _v_321_324 _i_321_324 _x_321_324))) (unspecified)) (_backwards_84 _instructions_243 _filtered_299))))))))))))))) (set! _forwards-label_84 (lambda (_instruction1_333 _instructions_333 _filtered_333) (let ((_label1_336 (instruction_arg1 _instruction1_333))) (if (null? _instructions_333) (_forwards_84 _instructions_333 (let ((_x_337_340 _filtered_333)) (begin (_check! (pair? _x_337_340) 1 _x_337_340) (cdr:pair _x_337_340)))) (let ((_instructions_343 _instructions_333) (_filtered_343 (cons _instruction1_333 _filtered_333))) (let () (let ((_loop_346 (unspecified))) (begin (set! _loop_346 (lambda (_instructions_347 _filtered_347) (let* ((_instruction_350 (let ((_x_398_401 _instructions_347)) (begin (_check! (pair? _x_398_401) 0 _x_398_401) (car:pair _x_398_401)))) (_op_353 (instruction_op _instruction_350)) (_flags_356 (bytevector-ref _forward-table_54 _op_353))) (let () (if (eqv? _flags_356 _forward:nop_9) (_loop_346 (let ((_x_362_365 _instructions_347)) (begin (_check! (pair? _x_362_365) 1 _x_362_365) (cdr:pair _x_362_365))) _filtered_347) (if (if (eqv? _flags_356 _forward:nop-if-arg1-is-negative_21) (< (instruction_arg1 _instruction_350) 0) #f) (_loop_346 (let ((_x_371_374 _instructions_347)) (begin (_check! (pair? _x_371_374) 1 _x_371_374) (cdr:pair _x_371_374))) _filtered_347) (if (eqv? _op_353 $_label) (let ((_label2_379 (instruction_arg1 _instruction_350))) (begin (hashtable-put! _label-table_80 _label1_336 _label2_379) (_forwards-label_84 _instruction_350 (let ((_x_380_383 _instructions_347)) (begin (_check! (pair? _x_380_383) 1 _x_380_383) (cdr:pair _x_380_383))) (let ((_x_384_387 _filtered_347)) (begin (_check! (pair? _x_384_387) 1 _x_384_387) (cdr:pair _x_384_387)))))) (if (eqv? _op_353 $skip) (let ((_label2_392 (instruction_arg1 _instruction_350))) (begin (hashtable-put! _label-table_80 _label1_336 _label2_392) (_forwards_84 _instructions_347 (let ((_x_393_396 _filtered_347)) (begin (_check! (pair? _x_393_396) 1 _x_393_396) (cdr:pair _x_393_396)))))) (_forwards_84 _instructions_347 _filtered_347))))))))) (_loop_346 _instructions_343 _filtered_343))))))))) (set! _forwards_84 (lambda (_instructions_402 _filtered_402) (if (null? _instructions_402) (begin (_vector-fill!_84 _registers_77 #f) (let ((_v_403_406 _registers_77) (_i_403_406 0) (_x_403_406 #t)) (begin (_check! (fixnum? _i_403_406) 41 _v_403_406 _i_403_406 _x_403_406) (_check! (vector? _v_403_406) 41 _v_403_406 _i_403_406 _x_403_406) (_check! (<:fix:fix _i_403_406 (vector-length:vec _v_403_406)) 41 _v_403_406 _i_403_406 _x_403_406) (_check! (>=:fix:fix _i_403_406 0) 41 _v_403_406 _i_403_406 _x_403_406) (vector-set!:trusted _v_403_406 _i_403_406 _x_403_406))) (_compute-transitive-closure!_84) (_backwards0_84 _filtered_402 '())) (let* ((_instruction_409 (let ((_x_486_489 _instructions_402)) (begin (_check! (pair? _x_486_489) 0 _x_486_489) (car:pair _x_486_489)))) (_instructions_412 (let ((_x_482_485 _instructions_402)) (begin (_check! (pair? _x_482_485) 1 _x_482_485) (cdr:pair _x_482_485)))) (_op_415 (instruction_op _instruction_409)) (_flags_418 (bytevector-ref _forward-table_54 _op_415))) (let () (if (eqv? _flags_418 _forward:normal_6) (_forwards_84 _instructions_412 (cons _instruction_409 _filtered_402)) (if (eqv? _flags_418 _forward:nop_9) (_forwards_84 _instructions_412 _filtered_402) (if (eqv? _flags_418 _forward:nop-if-arg1-is-negative_21) (if (< (instruction_arg1 _instruction_409) 0) (_forwards_84 _instructions_412 _filtered_402) (begin (_vector-fill!_84 _registers_77 #f) (_forwards_84 _instructions_412 (cons _instruction_409 _filtered_402)))) (if (eqv? _flags_418 _forward:kills-all-registers_18) (begin (_vector-fill!_84 _registers_77 #f) (_forwards_84 _instructions_412 (cons _instruction_409 _filtered_402))) (if (eqv? _flags_418 _forward:ends-block_12) (begin (_vector-fill!_84 _registers_77 #f) (if (eqv? _op_415 $_label) (_forwards-label_84 _instruction_409 _instructions_412 _filtered_402) (_forwards_84 _instructions_412 (cons _instruction_409 _filtered_402)))) (if (eqv? _flags_418 _forward:interesting_15) (if (eqv? _op_415 $setreg) (begin (let ((_v_438_441 _registers_77) (_i_438_441 (instruction_arg1 _instruction_409)) (_x_438_441 #f)) (begin (_check! (fixnum? _i_438_441) 41 _v_438_441 _i_438_441 _x_438_441) (_check! (vector? _v_438_441) 41 _v_438_441 _i_438_441 _x_438_441) (_check! (<:fix:fix _i_438_441 (vector-length:vec _v_438_441)) 41 _v_438_441 _i_438_441 _x_438_441) (_check! (>=:fix:fix _i_438_441 0) 41 _v_438_441 _i_438_441 _x_438_441) (vector-set!:trusted _v_438_441 _i_438_441 _x_438_441))) (_forwards_84 _instructions_412 (cons _instruction_409 _filtered_402))) (if (eqv? _op_415 $const/setreg) (begin (let ((_v_444_447 _registers_77) (_i_444_447 (instruction_arg2 _instruction_409)) (_x_444_447 #f)) (begin (_check! (fixnum? _i_444_447) 41 _v_444_447 _i_444_447 _x_444_447) (_check! (vector? _v_444_447) 41 _v_444_447 _i_444_447 _x_444_447) (_check! (<:fix:fix _i_444_447 (vector-length:vec _v_444_447)) 41 _v_444_447 _i_444_447 _x_444_447) (_check! (>=:fix:fix _i_444_447 0) 41 _v_444_447 _i_444_447 _x_444_447) (vector-set!:trusted _v_444_447 _i_444_447 _x_444_447))) (_forwards_84 _instructions_412 (cons _instruction_409 _filtered_402))) (if (eqv? _op_415 $movereg) (begin (let ((_v_450_453 _registers_77) (_i_450_453 (instruction_arg2 _instruction_409)) (_x_450_453 #f)) (begin (_check! (fixnum? _i_450_453) 41 _v_450_453 _i_450_453 _x_450_453) (_check! (vector? _v_450_453) 41 _v_450_453 _i_450_453 _x_450_453) (_check! (<:fix:fix _i_450_453 (vector-length:vec _v_450_453)) 41 _v_450_453 _i_450_453 _x_450_453) (_check! (>=:fix:fix _i_450_453 0) 41 _v_450_453 _i_450_453 _x_450_453) (vector-set!:trusted _v_450_453 _i_450_453 _x_450_453))) (_forwards_84 _instructions_412 (cons _instruction_409 _filtered_402))) (if (eqv? _op_415 $setstk) (begin (_kill-stack!_84 (instruction_arg1 _instruction_409)) (_forwards_84 _instructions_412 (cons _instruction_409 _filtered_402))) (if (eqv? _op_415 $load) (let ((_i_460 (instruction_arg1 _instruction_409)) (_j_460 (instruction_arg2 _instruction_409))) (if (eqv? (let ((_v_462_465 _registers_77) (_i_462_465 _i_460)) (begin (_check! (fixnum? _i_462_465) 40 _v_462_465 _i_462_465) (_check! (vector? _v_462_465) 40 _v_462_465 _i_462_465) (_check! (<:fix:fix _i_462_465 (vector-length:vec _v_462_465)) 40 _v_462_465 _i_462_465) (_check! (>=:fix:fix _i_462_465 0) 40 _v_462_465 _i_462_465) (vector-ref:trusted _v_462_465 _i_462_465))) _j_460) (_suppress-forwards_84 _instruction_409 _instructions_412 _filtered_402) (begin (let ((_v_466_469 _registers_77) (_i_466_469 _i_460) (_x_466_469 _j_460)) (begin (_check! (fixnum? _i_466_469) 41 _v_466_469 _i_466_469 _x_466_469) (_check! (vector? _v_466_469) 41 _v_466_469 _i_466_469 _x_466_469) (_check! (<:fix:fix _i_466_469 (vector-length:vec _v_466_469)) 41 _v_466_469 _i_466_469 _x_466_469) (_check! (>=:fix:fix _i_466_469 0) 41 _v_466_469 _i_466_469 _x_466_469) (vector-set!:trusted _v_466_469 _i_466_469 _x_466_469))) (_forwards_84 _instructions_412 (cons _instruction_409 _filtered_402))))) (if (eqv? _op_415 $store) (let ((_i_474 (instruction_arg1 _instruction_409)) (_j_474 (instruction_arg2 _instruction_409))) (if (eqv? (let ((_v_476_479 _registers_77) (_i_476_479 _i_474)) (begin (_check! (fixnum? _i_476_479) 40 _v_476_479 _i_476_479) (_check! (vector? _v_476_479) 40 _v_476_479 _i_476_479) (_check! (<:fix:fix _i_476_479 (vector-length:vec _v_476_479)) 40 _v_476_479 _i_476_479) (_check! (>=:fix:fix _i_476_479 0) 40 _v_476_479 _i_476_479) (vector-ref:trusted _v_476_479 _i_476_479))) _j_474) (_suppress-forwards_84 _instruction_409 _instructions_412 _filtered_402) (begin (_kill-stack!_84 _j_474) (_forwards_84 _instructions_412 (cons _instruction_409 _filtered_402))))) (_local-optimization-error_84 _op_415))))))) (_local-optimization-error_84 _op_415)))))))))))) (set! _kill-stack!_84 (lambda (_j_490) (let () (let ((_loop_492_494_497 (unspecified))) (begin (set! _loop_492_494_497 (lambda (_i_498) (if (= _i_498 _*nregs*_74) (if #f #f (unspecified)) (begin (begin #t (let ((_x_503 (let ((_v_510_513 _registers_77) (_i_510_513 _i_498)) (begin (_check! (fixnum? _i_510_513) 40 _v_510_513 _i_510_513) (_check! (vector? _v_510_513) 40 _v_510_513 _i_510_513) (_check! (<:fix:fix _i_510_513 (vector-length:vec _v_510_513)) 40 _v_510_513 _i_510_513) (_check! (>=:fix:fix _i_510_513 0) 40 _v_510_513 _i_510_513) (vector-ref:trusted _v_510_513 _i_510_513))))) (if (if _x_503 (= _x_503 _j_490) #f) (let ((_v_506_509 _registers_77) (_i_506_509 _i_498) (_x_506_509 #f)) (begin (_check! (fixnum? _i_506_509) 41 _v_506_509 _i_506_509 _x_506_509) (_check! (vector? _v_506_509) 41 _v_506_509 _i_506_509 _x_506_509) (_check! (<:fix:fix _i_506_509 (vector-length:vec _v_506_509)) 41 _v_506_509 _i_506_509 _x_506_509) (_check! (>=:fix:fix _i_506_509 0) 41 _v_506_509 _i_506_509 _x_506_509) (vector-set!:trusted _v_506_509 _i_506_509 _x_506_509))) (unspecified)))) (_loop_492_494_497 (+ _i_498 1)))))) (_loop_492_494_497 0)))))) (set! _subvector-fill!_84 (lambda (_v_514 _i_514 _j_514 _x_514) (if (< _i_514 _j_514) (begin (let ((_v_515_518 _v_514) (_i_515_518 _i_514) (_x_515_518 _x_514)) (begin (_check! (fixnum? _i_515_518) 41 _v_515_518 _i_515_518 _x_515_518) (_check! (vector? _v_515_518) 41 _v_515_518 _i_515_518 _x_515_518) (_check! (<:fix:fix _i_515_518 (vector-length:vec _v_515_518)) 41 _v_515_518 _i_515_518 _x_515_518) (_check! (>=:fix:fix _i_515_518 0) 41 _v_515_518 _i_515_518 _x_515_518) (vector-set!:trusted _v_515_518 _i_515_518 _x_515_518))) (_subvector-fill!_84 _v_514 (+ _i_514 1) _j_514 _x_514)) (unspecified)))) (set! _vector-fill!_84 (lambda (_v_519 _x_519) (_subvector-fill!_84 _v_519 0 (let ((_v_520_523 _v_519)) (begin (_check! (vector? _v_520_523) 42 _v_520_523) (vector-length:vec _v_520_523))) _x_519))) (set! _lookup-label_84 (lambda (_x_524) (hashtable-fetch _label-table_80 _x_524 _x_524))) (set! _compute-transitive-closure!_84 (lambda () (let ((_lookup_526 (unspecified))) (begin (set! _lookup_526 (lambda (_x_527) (let ((_y_530 (hashtable-get _label-table_80 _x_527))) (if _y_530 (_lookup_526 _y_530) _x_527)))) (hashtable-for-each (lambda (_x_531 _y_531) (hashtable-put! _label-table_80 _x_531 (_lookup_526 _y_531))) _label-table_80))))) (_vector-fill!_84 _registers_77 #f) (_forwards_84 _instructions_71 '())))))))))) 'filter-basic-blocks))
(let () (begin (set! *scheme-file-types* '("_sch" "_scm")) '*scheme-file-types*))
(let () (begin (set! *lap-file-type* "_lap") '*lap-file-type*))
(let () (begin (set! *mal-file-type* "_mal") '*mal-file-type*))
(let () (begin (set! *lop-file-type* "_lop") '*lop-file-type*))
(let () (begin (set! *fasl-file-type* "_fasl") '*fasl-file-type*))
(let () (begin (set! compile-file (lambda (_infilename_1 _ _rest_1) (let ((_doit_2 (unspecified))) (begin (set! _doit_2 (lambda () (let ((_outfilename_6 (if (not (null? _rest_1)) (let ((_x_11_14 _rest_1)) (begin (_check! (pair? _x_11_14) 0 _x_11_14) (car:pair _x_11_14))) (rewrite-file-type _infilename_1 *scheme-file-types* *fasl-file-type*))) (_user_6 (assembly-user-data))) (begin (if (if (not (integrate-usual-procedures)) (issue-warnings) #f) (begin (display "WARNING from compiler: ") (display "integrate-usual-procedures is turned off") (newline) (display "Performance is likely to be poor_") (newline)) (unspecified)) (if (benchmark-block-mode) (process-file-block _infilename_1 _outfilename_6 dump-fasl-segment-to-port (lambda (_forms_9) (assemble (compile-block _forms_9) _user_6))) (process-file _infilename_1 _outfilename_6 dump-fasl-segment-to-port (lambda (_expr_10) (assemble (compile _expr_10) _user_6)))) (unspecified))))) (if (eq? (nbuild-parameter 'target-machine) 'standard-c) (error "Compile-file not supported on this target architecture_") (_doit_2)))))) 'compile-file))
(let () (begin (set! assemble-file (lambda (_infilename_1 _ _rest_1) (let ((_doit_2 (unspecified))) (begin (set! _doit_2 (lambda () (let ((_outfilename_6 (if (not (null? _rest_1)) (let ((_x_8_11 _rest_1)) (begin (_check! (pair? _x_8_11) 0 _x_8_11) (car:pair _x_8_11))) (rewrite-file-type _infilename_1 (let* ((_t1_12_15 *lap-file-type*) (_t2_12_18 (cons *mal-file-type* '()))) (let () (cons _t1_12_15 _t2_12_18))) *fasl-file-type*))) (_malfile?_6 (file-type=? _infilename_1 *mal-file-type*)) (_user_6 (assembly-user-data))) (begin (process-file _infilename_1 _outfilename_6 dump-fasl-segment-to-port (lambda (_x_7) (assemble (if _malfile?_6 (eval _x_7) _x_7) _user_6))) (unspecified))))) (if (eq? (nbuild-parameter 'target-machine) 'standard-c) (error "Assemble-file not supported on this target architecture_") (_doit_2)))))) 'assemble-file))
(let () (begin (set! compile-expression (let () (let ((_compile-expression_4 (unspecified))) (begin (set! _compile-expression_4 (lambda (_expr_5 _env_5) (let* ((_syntax-env_8 (let ((_temp_15_18 (environment-tag _env_5))) (if (memv _temp_15_18 '(0 1)) (make-standard-syntactic-environment) (if (memv _temp_15_18 '(2)) global-syntactic-environment (begin (error "Invalid environment for compile-expression: " _env_5) #t))))) (_current-env_11 global-syntactic-environment)) (dynamic-wind (lambda () (set! global-syntactic-environment _syntax-env_8)) (lambda () (assemble (compile _expr_5))) (lambda () (set! global-syntactic-environment _current-env_11)))))) _compile-expression_4)))) 'compile-expression))
(let () (begin (set! macro-expand-expression (let () (let ((_macro-expand-expression_4 (unspecified))) (begin (set! _macro-expand-expression_4 (lambda (_expr_5 _env_5) (let* ((_syntax-env_8 (let ((_temp_15_18 (environment-tag _env_5))) (if (memv _temp_15_18 '(0 1)) (make-standard-syntactic-environment) (if (memv _temp_15_18 '(2)) global-syntactic-environment (begin (error "Invalid environment for compile-expression: " _env_5) #t))))) (_current-env_11 global-syntactic-environment)) (dynamic-wind (lambda () (set! global-syntactic-environment _syntax-env_8)) (lambda () (make-readable (macro-expand _expr_5))) (lambda () (set! global-syntactic-environment _current-env_11)))))) _macro-expand-expression_4)))) 'macro-expand-expression))
(let () (begin (set! compile313 (lambda (_infilename_1 _ _rest_1) (let ((_outfilename_4 (if (not (null? _rest_1)) (let ((_x_5_8 _rest_1)) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))) (rewrite-file-type _infilename_1 *scheme-file-types* *lap-file-type*))) (_write-lap_4 (lambda (_item_9 _port_9) (begin (write _item_9 _port_9) (newline _port_9) (newline _port_9))))) (begin (if (benchmark-block-mode) (process-file-block _infilename_1 _outfilename_4 _write-lap_4 compile-block) (process-file _infilename_1 _outfilename_4 _write-lap_4 compile)) (unspecified))))) 'compile313))
(let () (begin (set! assemble313 (lambda (_file_1 _ _rest_1) (let ((_outputfile_4 (if (not (null? _rest_1)) (let ((_x_6_9 _rest_1)) (begin (_check! (pair? _x_6_9) 0 _x_6_9) (car:pair _x_6_9))) (rewrite-file-type _file_1 (let* ((_t1_10_13 *lap-file-type*) (_t2_10_16 (cons *mal-file-type* '()))) (let () (cons _t1_10_13 _t2_10_16))) *lop-file-type*))) (_malfile?_4 (file-type=? _file_1 *mal-file-type*)) (_user_4 (assembly-user-data))) (begin (process-file _file_1 _outputfile_4 write-lop (lambda (_x_5) (assemble (if _malfile?_4 (eval _x_5) _x_5) _user_4))) (unspecified))))) 'assemble313))
(let () (begin (set! compile-and-assemble313 (lambda (_input-file_1 _ _rest_1) (let ((_output-file_4 (if (not (null? _rest_1)) (let ((_x_7_10 _rest_1)) (begin (_check! (pair? _x_7_10) 0 _x_7_10) (car:pair _x_7_10))) (rewrite-file-type _input-file_1 *scheme-file-types* *lop-file-type*))) (_user_4 (assembly-user-data))) (begin (if (benchmark-block-mode) (process-file-block _input-file_1 _output-file_4 write-lop (lambda (_x_5) (assemble (compile-block _x_5) _user_4))) (process-file _input-file_1 _output-file_4 write-lop (lambda (_x_6) (assemble (compile _x_6) _user_4)))) (unspecified))))) 'compile-and-assemble313))
(let () (begin (set! make-fasl (lambda (_infilename_1 _ _rest_1) (let ((_doit_2 (unspecified))) (begin (set! _doit_2 (lambda () (let ((_outfilename_6 (if (not (null? _rest_1)) (let ((_x_8_11 _rest_1)) (begin (_check! (pair? _x_8_11) 0 _x_8_11) (car:pair _x_8_11))) (rewrite-file-type _infilename_1 *lop-file-type* *fasl-file-type*)))) (begin (process-file _infilename_1 _outfilename_6 dump-fasl-segment-to-port (lambda (_x_7) _x_7)) (unspecified))))) (if (eq? (nbuild-parameter 'target-machine) 'standard-c) (error "Make-fasl not supported on this target architecture_") (_doit_2)))))) 'make-fasl))
(let () (begin (set! disassemble (lambda (_item_1 _ _rest_1) (let ((_output-port_4 (if (null? _rest_1) (current-output-port) (let ((_x_5_8 _rest_1)) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8)))))) (begin (disassemble-item _item_1 #f _output-port_4) (unspecified))))) 'disassemble))
(let () (begin (set! disassemble-item (lambda (_item_1 _segment-no_1 _port_1) (let ((_disassemble-item_2 0)) (begin (set! _disassemble-item_2 (lambda (_item_3 _segment-no_3 _port_3) (let ((_print-segment_5 (unspecified)) (_print-constvector_5 (unspecified)) (_print_5 (unspecified))) (begin (set! _print-segment_5 (lambda (_segment_6) (begin (_print_5 "Segment # " _segment-no_3) (print-instructions (disassemble-codevector (let ((_x_7_10 _segment_6)) (begin (_check! (pair? _x_7_10) 0 _x_7_10) (car:pair _x_7_10)))) _port_3) (_print-constvector_5 (let ((_x_11_14 _segment_6)) (begin (_check! (pair? _x_11_14) 1 _x_11_14) (cdr:pair _x_11_14)))) (_print_5 "========================================")))) (set! _print-constvector_5 (lambda (_cv_15) (let () (let ((_loop_17_19_22 (unspecified))) (begin (set! _loop_17_19_22 (lambda (_i_23) (if (= _i_23 (let ((_v_25_28 _cv_15)) (begin (_check! (vector? _v_25_28) 42 _v_25_28) (vector-length:vec _v_25_28)))) (if #f #f (unspecified)) (begin (begin #t (_print_5 "------------------------------------------") (_print_5 "Constant vector element # " _i_23) (let ((_temp_30_33 (let ((_x_90_93 (let ((_v_94_97 _cv_15) (_i_94_97 _i_23)) (begin (_check! (fixnum? _i_94_97) 40 _v_94_97 _i_94_97) (_check! (vector? _v_94_97) 40 _v_94_97 _i_94_97) (_check! (<:fix:fix _i_94_97 (vector-length:vec _v_94_97)) 40 _v_94_97 _i_94_97) (_check! (>=:fix:fix _i_94_97 0) 40 _v_94_97 _i_94_97) (vector-ref:trusted _v_94_97 _i_94_97))))) (begin (_check! (pair? _x_90_93) 0 _x_90_93) (car:pair _x_90_93))))) (if (memv _temp_30_33 '(codevector)) (begin (_print_5 "Code vector") (print-instructions (disassemble-codevector (let ((_x_36_39 (let ((_x_40_43 (let ((_v_44_47 _cv_15) (_i_44_47 _i_23)) (begin (_check! (fixnum? _i_44_47) 40 _v_44_47 _i_44_47) (_check! (vector? _v_44_47) 40 _v_44_47 _i_44_47) (_check! (<:fix:fix _i_44_47 (vector-length:vec _v_44_47)) 40 _v_44_47 _i_44_47) (_check! (>=:fix:fix _i_44_47 0) 40 _v_44_47 _i_44_47) (vector-ref:trusted _v_44_47 _i_44_47))))) (begin (_check! (pair? _x_40_43) 1 _x_40_43) (cdr:pair _x_40_43))))) (begin (_check! (pair? _x_36_39) 0 _x_36_39) (car:pair _x_36_39)))) _port_3)) (if (memv _temp_30_33 '(constantvector)) (begin (_print_5 "Constant vector") (_print-constvector_5 (let ((_x_50_53 (let ((_x_54_57 (let ((_v_58_61 _cv_15) (_i_58_61 _i_23)) (begin (_check! (fixnum? _i_58_61) 40 _v_58_61 _i_58_61) (_check! (vector? _v_58_61) 40 _v_58_61 _i_58_61) (_check! (<:fix:fix _i_58_61 (vector-length:vec _v_58_61)) 40 _v_58_61 _i_58_61) (_check! (>=:fix:fix _i_58_61 0) 40 _v_58_61 _i_58_61) (vector-ref:trusted _v_58_61 _i_58_61))))) (begin (_check! (pair? _x_54_57) 1 _x_54_57) (cdr:pair _x_54_57))))) (begin (_check! (pair? _x_50_53) 0 _x_50_53) (car:pair _x_50_53))))) (if (memv _temp_30_33 '(global)) (_print_5 "Global: " (let ((_x_64_67 (let ((_x_68_71 (let ((_v_72_75 _cv_15) (_i_72_75 _i_23)) (begin (_check! (fixnum? _i_72_75) 40 _v_72_75 _i_72_75) (_check! (vector? _v_72_75) 40 _v_72_75 _i_72_75) (_check! (<:fix:fix _i_72_75 (vector-length:vec _v_72_75)) 40 _v_72_75 _i_72_75) (_check! (>=:fix:fix _i_72_75 0) 40 _v_72_75 _i_72_75) (vector-ref:trusted _v_72_75 _i_72_75))))) (begin (_check! (pair? _x_68_71) 1 _x_68_71) (cdr:pair _x_68_71))))) (begin (_check! (pair? _x_64_67) 0 _x_64_67) (car:pair _x_64_67)))) (if (memv _temp_30_33 '(data)) (_print_5 "Data: " (let ((_x_78_81 (let ((_x_82_85 (let ((_v_86_89 _cv_15) (_i_86_89 _i_23)) (begin (_check! (fixnum? _i_86_89) 40 _v_86_89 _i_86_89) (_check! (vector? _v_86_89) 40 _v_86_89 _i_86_89) (_check! (<:fix:fix _i_86_89 (vector-length:vec _v_86_89)) 40 _v_86_89 _i_86_89) (_check! (>=:fix:fix _i_86_89 0) 40 _v_86_89 _i_86_89) (vector-ref:trusted _v_86_89 _i_86_89))))) (begin (_check! (pair? _x_82_85) 1 _x_82_85) (cdr:pair _x_82_85))))) (begin (_check! (pair? _x_78_81) 0 _x_78_81) (car:pair _x_78_81)))) (unspecified))))))) (_loop_17_19_22 (+ _i_23 1)))))) (_loop_17_19_22 0)))))) (set! _print_5 (lambda _rest_98 (begin (let () (let ((_loop_104_106_109 (unspecified))) (begin (set! _loop_104_106_109 (lambda (_y1_99_100_110) (if (null? _y1_99_100_110) (if #f #f (unspecified)) (begin (begin #t (let ((_x_114 (let ((_x_115_118 _y1_99_100_110)) (begin (_check! (pair? _x_115_118) 0 _x_115_118) (car:pair _x_115_118))))) (display _x_114 _port_3))) (_loop_104_106_109 (let ((_x_119_122 _y1_99_100_110)) (begin (_check! (pair? _x_119_122) 1 _x_119_122) (cdr:pair _x_119_122)))))))) (_loop_104_106_109 _rest_98)))) (newline _port_3)))) (if (procedure? _item_3) (print-instructions (disassemble-codevector (procedure-ref _item_3 0)) _port_3) (if (if (pair? _item_3) (if (bytevector? (let ((_x_126_129 _item_3)) (begin (_check! (pair? _x_126_129) 0 _x_126_129) (car:pair _x_126_129)))) (vector? (let ((_x_131_134 _item_3)) (begin (_check! (pair? _x_131_134) 1 _x_131_134) (cdr:pair _x_131_134)))) #f) #f) (_print-segment_5 _item_3) (error "disassemble-item: " _item_3 " is not disassemblable_"))))))) (_disassemble-item_2 _item_1 _segment-no_1 _port_1))))) 'disassemble-item))
(let () (begin (set! disassemble-file (lambda (_file_1 _ _rest_1) (let ((_doit_2 (unspecified))) (begin (set! _doit_2 (lambda (_input-port_3 _output-port_3) (begin (display "; From " _output-port_3) (display _file_1 _output-port_3) (newline _output-port_3) (let () (let ((_loop_5_8_11 (unspecified))) (begin (set! _loop_5_8_11 (lambda (_segment-no_12 _segment_12) (if (eof-object? _segment_12) (if #f #f (unspecified)) (begin (begin #t (disassemble-item _segment_12 _segment-no_12 _output-port_3)) (_loop_5_8_11 (+ _segment-no_12 1) (read _input-port_3)))))) (_loop_5_8_11 0 (read _input-port_3)))))))) (call-with-input-file _file_1 (lambda (_input-port_15) (if (null? _rest_1) (_doit_2 _input-port_15 (current-output-port)) (begin (delete-file (let ((_x_16_19 _rest_1)) (begin (_check! (pair? _x_16_19) 0 _x_16_19) (car:pair _x_16_19)))) (call-with-output-file (let ((_x_20_23 _rest_1)) (begin (_check! (pair? _x_20_23) 0 _x_20_23) (car:pair _x_20_23))) (lambda (_output-port_24) (_doit_2 _input-port_15 _output-port_24))))))) (unspecified))))) 'disassemble-file))
(let () (begin (set! compiler-switches (lambda _rest_1 (let ((_fast-unsafe-code_3 (unspecified)) (_fast-safe-code_3 (unspecified)) (_standard-code_3 (unspecified)) (_slow-code_3 (unspecified))) (begin (set! _fast-unsafe-code_3 (lambda () (begin (set-compiler-flags! 'fast-unsafe) (set-assembler-flags! 'fast-unsafe)))) (set! _fast-safe-code_3 (lambda () (begin (set-compiler-flags! 'fast-safe) (set-assembler-flags! 'fast-safe)))) (set! _standard-code_3 (lambda () (begin (set-compiler-flags! 'standard) (set-assembler-flags! 'standard)))) (set! _slow-code_3 (lambda () (begin (set-compiler-flags! 'no-optimization) (set-assembler-flags! 'no-optimization)))) (if (null? _rest_1) (begin (display "Debugging:") (newline) (display-twobit-flags 'debugging) (display-assembler-flags 'debugging) (newline) (display "Safety:") (newline) (display-twobit-flags 'safety) (display-assembler-flags 'safety) (newline) (display "Speed:") (newline) (display-twobit-flags 'optimization) (display-assembler-flags 'optimization) (if #f #f (unspecified))) (if (null? (let ((_x_9_12 _rest_1)) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12)))) (begin (let ((_temp_13_16 (let ((_x_27_30 _rest_1)) (begin (_check! (pair? _x_27_30) 0 _x_27_30) (car:pair _x_27_30))))) (if (memv _temp_13_16 '(0 slow)) (_slow-code_3) (if (memv _temp_13_16 '(1 standard)) (_standard-code_3) (if (memv _temp_13_16 '(2 fast-safe)) (_fast-safe-code_3) (if (memv _temp_13_16 '(3 fast-unsafe)) (_fast-unsafe-code_3) (if (memv _temp_13_16 '(default factory-settings)) (begin (_fast-safe-code_3) (include-source-code #t) (benchmark-mode #f) (benchmark-block-mode #f) (common-subexpression-elimination #f) (representation-inference #f)) (error "Unrecognized flag " (let ((_x_23_26 _rest_1)) (begin (_check! (pair? _x_23_26) 0 _x_23_26) (car:pair _x_23_26))) " to compiler-switches_"))))))) (unspecified)) (error "Too many arguments to compiler-switches_"))))))) 'compiler-switches))
(let () (begin (set! process-file (lambda (_infilename_1 _outfilename_1 _writer_1 _processer_1) (let ((_process-file_2 0)) (begin (set! _process-file_2 (lambda (_infilename_3 _outfilename_3 _writer_3 _processer_3) (let ((_doit_6 (unspecified))) (begin (set! _doit_6 (lambda () (begin (delete-file _outfilename_3) (call-with-output-file _outfilename_3 (lambda (_outport_8) (call-with-input-file _infilename_3 (lambda (_inport_9) (let ((_x_12 (read _inport_9))) (let () (let ((_loop_15 (unspecified))) (begin (set! _loop_15 (lambda (_x_16) (if (eof-object? _x_16) #t (begin (_writer_3 (_processer_3 _x_16) _outport_8) (_loop_15 (read _inport_9)))))) (_loop_15 _x_12)))))))))))) (let ((_current-syntactic-environment_17 (syntactic-copy global-syntactic-environment))) (dynamic-wind (lambda () #t) (lambda () (_doit_6)) (lambda () (set! global-syntactic-environment _current-syntactic-environment_17)))))))) (_process-file_2 _infilename_1 _outfilename_1 _writer_1 _processer_1))))) 'process-file))
(let () (begin (set! process-file-block (lambda (_infilename_1 _outfilename_1 _writer_1 _processer_1) (let ((_process-file-block_2 0)) (begin (set! _process-file-block_2 (lambda (_infilename_3 _outfilename_3 _writer_3 _processer_3) (let ((_doit_6 (unspecified))) (begin (set! _doit_6 (lambda () (begin (delete-file _outfilename_3) (call-with-output-file _outfilename_3 (lambda (_outport_8) (call-with-input-file _infilename_3 (lambda (_inport_9) (let () (let ((_loop_10_13_16 (unspecified))) (begin (set! _loop_10_13_16 (lambda (_x_17 _forms_17) (if (eof-object? _x_17) (_writer_3 (_processer_3 (reverse _forms_17)) _outport_8) (begin #t (_loop_10_13_16 (read _inport_9) (cons _x_17 _forms_17)))))) (_loop_10_13_16 (read _inport_9) '()))))))))))) (let ((_current-syntactic-environment_20 (syntactic-copy global-syntactic-environment))) (dynamic-wind (lambda () #t) (lambda () (_doit_6)) (lambda () (set! global-syntactic-environment _current-syntactic-environment_20)))))))) (_process-file-block_2 _infilename_1 _outfilename_1 _writer_1 _processer_1))))) 'process-file-block))
(let () (begin (set! rewrite-file-type (lambda (_filename_1 _matches_1 _new_1) (let ((_rewrite-file-type_2 0)) (begin (set! _rewrite-file-type_2 (lambda (_filename_3 _matches_3 _new_3) (if (not (pair? _matches_3)) (_rewrite-file-type_2 _filename_3 (cons _matches_3 '()) _new_3) (let* ((_j_7 (string-length _filename_3)) (_m_10 _matches_3)) (let () (let ((_loop_13 (unspecified))) (begin (set! _loop_13 (lambda (_m_14) (if (null? _m_14) (string-append _filename_3 _new_3) (let* ((_n_19 (let ((_x_30_33 _m_14)) (begin (_check! (pair? _x_30_33) 0 _x_30_33) (car:pair _x_30_33)))) (_l_22 (string-length _n_19))) (let () (if (file-type=? _filename_3 _n_19) (string-append (substring _filename_3 0 (- _j_7 _l_22)) _new_3) (_loop_13 (let ((_x_26_29 _m_14)) (begin (_check! (pair? _x_26_29) 1 _x_26_29) (cdr:pair _x_26_29)))))))))) (_loop_13 _m_10)))))))) (_rewrite-file-type_2 _filename_1 _matches_1 _new_1))))) 'rewrite-file-type))
(let () (begin (set! file-type=? (lambda (_file-name_1 _type-name_1) (let ((_file-type=?_2 0)) (begin (set! _file-type=?_2 (lambda (_file-name_3 _type-name_3) (let ((_fl_6 (string-length _file-name_3)) (_tl_6 (string-length _type-name_3))) (if (>= _fl_6 _tl_6) (string-ci=? _type-name_3 (substring _file-name_3 (- _fl_6 _tl_6) _fl_6)) #f)))) (_file-type=?_2 _file-name_1 _type-name_1))))) 'file-type=?))
(let () (begin (set! readify-lap (lambda (_code_1) (let ((_readify-lap_2 0)) (begin (set! _readify-lap_2 (lambda (_code_3) (let () (let ((_loop_9_12_15 (unspecified))) (begin (set! _loop_9_12_15 (lambda (_y1_4_5_16 _results_4_8_16) (if (null? _y1_4_5_16) (reverse _results_4_8_16) (begin #t (_loop_9_12_15 (let ((_x_20_23 _y1_4_5_16)) (begin (_check! (pair? _x_20_23) 1 _x_20_23) (cdr:pair _x_20_23))) (cons (let* ((_x_24 (let ((_x_88_91 _y1_4_5_16)) (begin (_check! (pair? _x_88_91) 0 _x_88_91) (car:pair _x_88_91)))) (_iname_27 (let ((_x_79_82 (assv (let ((_x_84_87 _x_24)) (begin (_check! (pair? _x_84_87) 0 _x_84_87) (car:pair _x_84_87))) *mnemonic-names*))) (begin (_check! (pair? _x_79_82) 1 _x_79_82) (cdr:pair _x_79_82))))) (if (not (= (let ((_x_28_31 _x_24)) (begin (_check! (pair? _x_28_31) 0 _x_28_31) (car:pair _x_28_31))) $lambda)) (cons _iname_27 (let ((_x_32_35 _x_24)) (begin (_check! (pair? _x_32_35) 1 _x_32_35) (cdr:pair _x_32_35)))) (let* ((_t1_36_39 _iname_27) (_t2_36_42 (let* ((_t1_46_49 (_readify-lap_2 (let ((_x_71_74 (let ((_x_75_78 _x_24)) (begin (_check! (pair? _x_75_78) 1 _x_75_78) (cdr:pair _x_75_78))))) (begin (_check! (pair? _x_71_74) 0 _x_71_74) (car:pair _x_71_74))))) (_t2_46_52 (cons (let ((_x_58_61 (let ((_x_62_65 (let ((_x_66_69 _x_24)) (begin (_check! (pair? _x_66_69) 1 _x_66_69) (cdr:pair _x_66_69))))) (begin (_check! (pair? _x_62_65) 1 _x_62_65) (cdr:pair _x_62_65))))) (begin (_check! (pair? _x_58_61) 0 _x_58_61) (car:pair _x_58_61))) '()))) (let () (cons _t1_46_49 _t2_46_52))))) (let () (cons _t1_36_39 _t2_36_42))))) _results_4_8_16)))))) (_loop_9_12_15 _code_3 '())))))) (_readify-lap_2 _code_1))))) 'readify-lap))
(let () (begin (set! readify-file (lambda (_f_1 _ _o_1) (let ((_doit_2 (unspecified))) (begin (set! _doit_2 (lambda () (let* ((_i_6 (open-input-file _f_1)) (_x_9 (read _i_6))) (let () (let ((_loop_12 (unspecified))) (begin (set! _loop_12 (lambda (_x_13) (if (not (eof-object? _x_13)) (begin (pretty-print (readify-lap _x_13)) (_loop_12 (read _i_6))) (unspecified)))) (_loop_12 _x_9))))))) (if (null? _o_1) (_doit_2) (begin (delete-file (let ((_x_14_17 _o_1)) (begin (_check! (pair? _x_14_17) 0 _x_14_17) (car:pair _x_14_17)))) (with-output-to-file (let ((_x_18_21 _o_1)) (begin (_check! (pair? _x_18_21) 0 _x_18_21) (car:pair _x_18_21))) _doit_2))))))) 'readify-file))
(let () (begin (set! assembly-table (lambda () (let ((_assembly-table_2 0)) (begin (set! _assembly-table_2 (lambda () (error "No assembly table defined_"))) (_assembly-table_2))))) 'assembly-table))
(let () (begin (set! assembly-start (lambda (_as_1) (let ((_assembly-start_2 0)) (begin (set! _assembly-start_2 (lambda (_as_3) #t)) (_assembly-start_2 _as_1))))) 'assembly-start))
(let () (begin (set! assembly-end (lambda (_as_1 _segment_1) (let ((_assembly-end_2 0)) (begin (set! _assembly-end_2 (lambda (_as_3 _segment_3) _segment_3)) (_assembly-end_2 _as_1 _segment_1))))) 'assembly-end))
(let () (begin (set! assembly-user-data (lambda () (let ((_assembly-user-data_2 0)) (begin (set! _assembly-user-data_2 (lambda () #f)) (_assembly-user-data_2))))) 'assembly-user-data))
(let () (begin (set! assemble (lambda (_source_1 _ _rest_1) (let* ((_user_4 (if (null? _rest_1) (assembly-user-data) (let ((_x_15_18 _rest_1)) (begin (_check! (pair? _x_15_18) 0 _x_15_18) (car:pair _x_15_18))))) (_as_7 (make-assembly-structure _source_1 (assembly-table) _user_4))) (let () (begin (assembly-start _as_7) (assemble1 _as_7 (lambda (_as_11) (let ((_segment_14 (assemble-pasteup _as_11))) (begin (assemble-finalize! _as_11) (assembly-end _as_11 _segment_14)))) #f)))))) 'assemble))
(let () (begin (set! assemble-nested-lambda (lambda (_as_1 _source_1 _doc_1 _k_1 _ _rest_1) (let* ((_user_4 (if (null? _rest_1) #f (let ((_x_16_19 _rest_1)) (begin (_check! (pair? _x_16_19) 0 _x_16_19) (car:pair _x_16_19))))) (_nested-as_7 (make-assembly-structure _source_1 (as-table _as_1) _user_4))) (let () (begin (as-parent! _nested-as_7 _as_1) (as-nested! _as_1 (cons (lambda () (assemble1 _nested-as_7 (lambda (_nested-as_12) (let ((_segment_15 (assemble-pasteup _nested-as_12))) (begin (assemble-finalize! _nested-as_12) (_k_1 _nested-as_12 _segment_15)))) _doc_1)) (as-nested _as_1)))))))) 'assemble-nested-lambda))
(let () (begin (set! operand0 car) 'operand0))
(let () (begin (set! operand1 cadr) 'operand1))
(let () (begin (set! operand2 caddr) 'operand2))
(let () (begin (set! operand3 cadddr) 'operand3))
(let () (begin (set! operand4 (lambda (_i_1) (let ((_operand4_2 0)) (begin (set! _operand4_2 (lambda (_i_3) (let ((_x_4_7 (let ((_x_9_12 (let ((_x_13_16 (let ((_x_17_20 (let ((_x_21_24 _i_3)) (begin (_check! (pair? _x_21_24) 1 _x_21_24) (cdr:pair _x_21_24))))) (begin (_check! (pair? _x_17_20) 1 _x_17_20) (cdr:pair _x_17_20))))) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_4_7) 0 _x_4_7) (car:pair _x_4_7))))) (_operand4_2 _i_1))))) 'operand4))
(let () (begin (set! emit! (lambda (_as_1 _bv_1) (let ((_emit!_2 0)) (begin (set! _emit!_2 (lambda (_as_3 _bv_3) (begin (as-code! _as_3 (cons _bv_3 (as-code _as_3))) (as-lc! _as_3 (+ (as-lc _as_3) (bytevector-length _bv_3)))))) (_emit!_2 _as_1 _bv_1))))) 'emit!))
(let () (begin (set! emit-string! (lambda (_as_1 _s_1) (let ((_emit-string!_2 0)) (begin (set! _emit-string!_2 (lambda (_as_3 _s_3) (begin (as-code! _as_3 (cons _s_3 (as-code _as_3))) (as-lc! _as_3 (+ (as-lc _as_3) (string-length _s_3)))))) (_emit-string!_2 _as_1 _s_1))))) 'emit-string!))
(let () (begin (set! emit-constant (lambda (_as_1 _x_1) (let ((_emit-constant_2 0)) (begin (set! _emit-constant_2 (lambda (_as_3 _x_3) (let () (let ((_loop_4_7_10 (unspecified))) (begin (set! _loop_4_7_10 (lambda (_i_11 _y_11) (if (let ((_temp_13_16 (null? _y_11))) (if _temp_13_16 _temp_13_16 (equal? _x_3 (let ((_x_18_21 _y_11)) (begin (_check! (pair? _x_18_21) 0 _x_18_21) (car:pair _x_18_21)))))) (begin (if (null? _y_11) (as-constants! _as_3 (append! (as-constants _as_3) (cons _x_3 '()))) (unspecified)) _i_11) (begin #t (_loop_4_7_10 (+ _i_11 1) (let ((_x_24_27 _y_11)) (begin (_check! (pair? _x_24_27) 1 _x_24_27) (cdr:pair _x_24_27)))))))) (_loop_4_7_10 0 (as-constants _as_3))))))) (_emit-constant_2 _as_1 _x_1))))) 'emit-constant))
(let () (begin (set! emit-datum (lambda (_as_1 _x_1) (let ((_emit-datum_2 0)) (begin (set! _emit-datum_2 (lambda (_as_3 _x_3) (emit-constant _as_3 (let* ((_t1_4_7 'data) (_t2_4_10 (cons _x_3 '()))) (let () (cons _t1_4_7 _t2_4_10)))))) (_emit-datum_2 _as_1 _x_1))))) 'emit-datum))
(let () (begin (set! emit-global (lambda (_as_1 _x_1) (let ((_emit-global_2 0)) (begin (set! _emit-global_2 (lambda (_as_3 _x_3) (emit-constant _as_3 (let* ((_t1_4_7 'global) (_t2_4_10 (cons _x_3 '()))) (let () (cons _t1_4_7 _t2_4_10)))))) (_emit-global_2 _as_1 _x_1))))) 'emit-global))
(let () (begin (set! emit-codevector (lambda (_as_1 _x_1) (let ((_emit-codevector_2 0)) (begin (set! _emit-codevector_2 (lambda (_as_3 _x_3) (emit-constants _as_3 (let* ((_t1_4_7 'codevector) (_t2_4_10 (cons _x_3 '()))) (let () (cons _t1_4_7 _t2_4_10)))))) (_emit-codevector_2 _as_1 _x_1))))) 'emit-codevector))
(let () (begin (set! emit-constantvector (lambda (_as_1 _x_1) (let ((_emit-constantvector_2 0)) (begin (set! _emit-constantvector_2 (lambda (_as_3 _x_3) (emit-constants _as_3 (let* ((_t1_4_7 'constantvector) (_t2_4_10 (cons _x_3 '()))) (let () (cons _t1_4_7 _t2_4_10)))))) (_emit-constantvector_2 _as_1 _x_1))))) 'emit-constantvector))
(let () (begin (set! set-constant! (lambda (_as_1 _n_1 _datum_1) (let ((_set-constant!_2 0)) (begin (set! _set-constant!_2 (lambda (_as_3 _n_3 _datum_3) (let ((_pair_6 (list-ref (as-constants _as_3) _n_3))) (set-car! (let ((_x_7_10 _pair_6)) (begin (_check! (pair? _x_7_10) 1 _x_7_10) (cdr:pair _x_7_10))) _datum_3)))) (_set-constant!_2 _as_1 _n_1 _datum_1))))) 'set-constant!))
(let () (begin (set! emit-constants (lambda (_as_1 _x_1 _ _rest_1) (let* ((_constants_4 (as-constants _as_1)) (_i_7 (length _constants_4))) (let () (begin (as-constants! _as_1 (append! _constants_4 (cons _x_1 _rest_1))) _i_7))))) 'emit-constants))
(let () (begin (set! emit-label! (lambda (_as_1 _l_1) (let ((_emit-label!_2 0)) (begin (set! _emit-label!_2 (lambda (_as_3 _l_3) (set-cdr! _l_3 (as-lc _as_3)))) (_emit-label!_2 _as_1 _l_1))))) 'emit-label!))
(let () (begin (set! emit-fixup! (lambda (_as_1 _offset_1 _size_1 _n_1) (let ((_emit-fixup!_2 0)) (begin (set! _emit-fixup!_2 (lambda (_as_3 _offset_3 _size_3 _n_3) (as-fixups! _as_3 (cons (let* ((_t1_4_7 (+ _offset_3 (as-lc _as_3))) (_t2_4_10 (let* ((_t1_14_17 _size_3) (_t2_14_20 (cons _n_3 '()))) (let () (cons _t1_14_17 _t2_14_20))))) (let () (cons _t1_4_7 _t2_4_10))) (as-fixups _as_3))))) (_emit-fixup!_2 _as_1 _offset_1 _size_1 _n_1))))) 'emit-fixup!))
(let () (begin (set! emit-fixup-label! (lambda (_as_1 _offset_1 _size_1 _l_1) (let ((_emit-fixup-label!_2 0)) (begin (set! _emit-fixup-label!_2 (lambda (_as_3 _offset_3 _size_3 _l_3) (as-fixups! _as_3 (cons (let* ((_t1_4_7 (+ _offset_3 (as-lc _as_3))) (_t2_4_10 (let* ((_t1_14_17 _size_3) (_t2_14_20 (cons (cons _l_3 '()) '()))) (let () (cons _t1_14_17 _t2_14_20))))) (let () (cons _t1_4_7 _t2_4_10))) (as-fixups _as_3))))) (_emit-fixup-label!_2 _as_1 _offset_1 _size_1 _l_1))))) 'emit-fixup-label!))
(let () (begin (set! emit-fixup-proc! (lambda (_as_1 _proc_1) (let ((_emit-fixup-proc!_2 0)) (begin (set! _emit-fixup-proc!_2 (lambda (_as_3 _proc_3) (as-fixups! _as_3 (cons (let* ((_t1_4_7 (as-lc _as_3)) (_t2_4_10 (let* ((_t1_14_17 0) (_t2_14_20 (cons _proc_3 '()))) (let () (cons _t1_14_17 _t2_14_20))))) (let () (cons _t1_4_7 _t2_4_10))) (as-fixups _as_3))))) (_emit-fixup-proc!_2 _as_1 _proc_1))))) 'emit-fixup-proc!))
(let () (begin (set! here (lambda (_as_1) (let ((_here_2 0)) (begin (set! _here_2 (lambda (_as_3) (as-lc _as_3))) (_here_2 _as_1))))) 'here))
(let () (begin (set! make-asm-label (lambda (_as_1 _label_1) (let ((_make-asm-label_2 0)) (begin (set! _make-asm-label_2 (lambda (_as_3 _label_3) (let ((_probe_6 (find-label _as_3 _label_3))) (if _probe_6 _probe_6 (let ((_l_9 (cons _label_3 #f))) (begin (as-labels! _as_3 (cons _l_9 (as-labels _as_3))) _l_9)))))) (_make-asm-label_2 _as_1 _label_1))))) 'make-asm-label))
(let () (begin (set! find-label (lambda (_as_1 _l_1) (let ((_find-label_2 0)) (begin (set! _find-label_2 (lambda (_as_3 _l_3) (let ((_lookup-label-loop_4 (unspecified))) (begin (set! _lookup-label-loop_4 (lambda (_x_5 _labels_5 _parent_5) (let* ((_entry_8 (assq _x_5 _labels_5)) (_temp_10_13 _entry_8)) (if _temp_10_13 _temp_10_13 (if (not _parent_5) #f (_lookup-label-loop_4 _x_5 (as-labels _parent_5) (as-parent _parent_5))))))) (_lookup-label-loop_4 _l_3 (as-labels _as_3) (as-parent _as_3)))))) (_find-label_2 _as_1 _l_1))))) 'find-label))
(let () (begin (set! new-label (let ((_n_3 0)) (lambda () (begin (set! _n_3 (- _n_3 1)) (cons _n_3 #f))))) 'new-label))
(let () (begin (set! label-value (lambda (_as_1 _l_1) (let ((_label-value_2 0)) (begin (set! _label-value_2 (lambda (_as_3 _l_3) (let ((_x_4_7 _l_3)) (begin (_check! (pair? _x_4_7) 1 _x_4_7) (cdr:pair _x_4_7))))) (_label-value_2 _as_1 _l_1))))) 'label-value))
(let () (begin (set! next-instruction (lambda (_as_1) (let ((_next-instruction_2 0)) (begin (set! _next-instruction_2 (lambda (_as_3) (let ((_source_6 (as-source _as_3))) (if (null? _source_6) '(-1) (let ((_x_7_10 _source_6)) (begin (_check! (pair? _x_7_10) 0 _x_7_10) (car:pair _x_7_10))))))) (_next-instruction_2 _as_1))))) 'next-instruction))
(let () (begin (set! consume-next-instruction! (lambda (_as_1) (let ((_consume-next-instruction!_2 0)) (begin (set! _consume-next-instruction!_2 (lambda (_as_3) (as-source! _as_3 (let ((_x_4_7 (as-source _as_3))) (begin (_check! (pair? _x_4_7) 1 _x_4_7) (cdr:pair _x_4_7)))))) (_consume-next-instruction!_2 _as_1))))) 'consume-next-instruction!))
(let () (begin (set! push-instruction (lambda (_as_1 _instruction_1) (let ((_push-instruction_2 0)) (begin (set! _push-instruction_2 (lambda (_as_3 _instruction_3) (as-source! _as_3 (cons _instruction_3 (as-source _as_3))))) (_push-instruction_2 _as_1 _instruction_1))))) 'push-instruction))
(let () (begin (set! assembler-value (lambda (_as_1 _key_1) (let ((_assembler-value_2 0)) (begin (set! _assembler-value_2 (lambda (_as_3 _key_3) (let ((_probe_6 (assq _key_3 (as-values _as_3)))) (if _probe_6 (let ((_x_7_10 _probe_6)) (begin (_check! (pair? _x_7_10) 1 _x_7_10) (cdr:pair _x_7_10))) #f)))) (_assembler-value_2 _as_1 _key_1))))) 'assembler-value))
(let () (begin (set! assembler-value! (lambda (_as_1 _key_1 _value_1) (let ((_assembler-value!_2 0)) (begin (set! _assembler-value!_2 (lambda (_as_3 _key_3 _value_3) (let ((_probe_6 (assq _key_3 (as-values _as_3)))) (if _probe_6 (set-cdr! _probe_6 _value_3) (as-values! _as_3 (cons (cons _key_3 _value_3) (as-values _as_3))))))) (_assembler-value!_2 _as_1 _key_1 _value_1))))) 'assembler-value!))
(let () (begin (set! add-documentation (lambda (_as_1 _doc_1) (let ((_add-documentation_2 0)) (begin (set! _add-documentation_2 (lambda (_as_3 _doc_3) (let* ((_existing-constants_6 (let ((_x_47_50 (let ((_x_51_54 (let ((_x_55_58 (as-constants _as_3))) (begin (_check! (pair? _x_55_58) 0 _x_55_58) (car:pair _x_55_58))))) (begin (_check! (pair? _x_51_54) 1 _x_51_54) (cdr:pair _x_51_54))))) (begin (_check! (pair? _x_47_50) 0 _x_47_50) (car:pair _x_47_50)))) (_new-constants_9 (twobit-sort (lambda (_a_22 _b_22) (< (let ((_x_23_26 _a_22)) (begin (_check! (pair? _x_23_26) 0 _x_23_26) (car:pair _x_23_26))) (let ((_x_27_30 _b_22)) (begin (_check! (pair? _x_27_30) 0 _x_27_30) (car:pair _x_27_30))))) (if (not _existing-constants_6) (cons (cons (here _as_3) _doc_3) '()) (if (pair? _existing-constants_6) (cons (cons (here _as_3) _doc_3) _existing-constants_6) (let* ((_t1_35_38 (cons (here _as_3) _doc_3)) (_t2_35_41 (cons (cons 0 _existing-constants_6) '()))) (let () (cons _t1_35_38 _t2_35_41)))))))) (let () (set-car! (let ((_x_14_17 (let ((_x_18_21 (as-constants _as_3))) (begin (_check! (pair? _x_18_21) 0 _x_18_21) (car:pair _x_18_21))))) (begin (_check! (pair? _x_14_17) 1 _x_14_17) (cdr:pair _x_14_17))) _new-constants_9))))) (_add-documentation_2 _as_1 _doc_1))))) 'add-documentation))
(let () (begin (set! asm-value-too-large (lambda (_as_1 _info_1 _expr_1 _val_1) (let ((_asm-value-too-large_2 0)) (begin (set! _asm-value-too-large_2 (lambda (_as_3 _info_3 _expr_3 _val_3) (if (as-retry _as_3) ((as-retry _as_3)) (asm-error _info_3 ": Value too large: " _expr_3 " = " _val_3)))) (_asm-value-too-large_2 _as_1 _info_1 _expr_1 _val_1))))) 'asm-value-too-large))
(let () (begin (set! asm-error (lambda (_msg_1 _ _rest_1) (if (eq? host-system 'chez) (error 'assembler "~a" (let* ((_t1_3_6 _msg_1) (_t2_3_9 (cons _rest_1 '()))) (let () (cons _t1_3_6 _t2_3_9)))) (apply error _msg_1 _rest_1)))) 'asm-error))
(let () (begin (set! disasm-error (lambda (_msg_1 _ _rest_1) (if (eq? host-system 'chez) (error 'disassembler "~a" (let* ((_t1_3_6 _msg_1) (_t2_3_9 (cons _rest_1 '()))) (let () (cons _t1_3_6 _t2_3_9)))) (apply error _msg_1 _rest_1)))) 'disasm-error))
(let () (begin (set! label? (lambda (_x_1) (let ((_label?_2 0)) (begin (set! _label?_2 (lambda (_x_3) (if (pair? _x_3) (fixnum? (let ((_x_6_9 _x_3)) (begin (_check! (pair? _x_6_9) 0 _x_6_9) (car:pair _x_6_9)))) #f))) (_label?_2 _x_1))))) 'label?))
(let () (begin (set! label_ident car) 'label_ident))
(let () (begin (set! make-assembly-structure (lambda (_source_1 _table_1 _user-data_1) (let ((_make-assembly-structure_2 0)) (begin (set! _make-assembly-structure_2 (lambda (_source_3 _table_3 _user-data_3) (let* ((_t_4_16_21 _user-data_3) (_t_4_15_24 #f) (_t_4_14_27 #f) (_t_4_13_30 '()) (_t_4_12_33 '()) (_t_4_11_36 '()) (_t_4_10_39 '()) (_t_4_9_42 '()) (_t_4_8_45 '()) (_t_4_7_48 0) (_t_4_6_51 _source_3) (_t_4_5_54 _table_3) (_v_4_18_57 (make-vector 12 _t_4_16_21))) (let () (begin (let ((_v_61_64 _v_4_18_57) (_i_61_64 10) (_x_61_64 _t_4_15_24)) (begin (_check! (fixnum? _i_61_64) 41 _v_61_64 _i_61_64 _x_61_64) (_check! (vector? _v_61_64) 41 _v_61_64 _i_61_64 _x_61_64) (_check! (<:fix:fix _i_61_64 (vector-length:vec _v_61_64)) 41 _v_61_64 _i_61_64 _x_61_64) (_check! (>=:fix:fix _i_61_64 0) 41 _v_61_64 _i_61_64 _x_61_64) (vector-set!:trusted _v_61_64 _i_61_64 _x_61_64))) (let ((_v_65_68 _v_4_18_57) (_i_65_68 9) (_x_65_68 _t_4_14_27)) (begin (_check! (fixnum? _i_65_68) 41 _v_65_68 _i_65_68 _x_65_68) (_check! (vector? _v_65_68) 41 _v_65_68 _i_65_68 _x_65_68) (_check! (<:fix:fix _i_65_68 (vector-length:vec _v_65_68)) 41 _v_65_68 _i_65_68 _x_65_68) (_check! (>=:fix:fix _i_65_68 0) 41 _v_65_68 _i_65_68 _x_65_68) (vector-set!:trusted _v_65_68 _i_65_68 _x_65_68))) (let ((_v_69_72 _v_4_18_57) (_i_69_72 8) (_x_69_72 _t_4_13_30)) (begin (_check! (fixnum? _i_69_72) 41 _v_69_72 _i_69_72 _x_69_72) (_check! (vector? _v_69_72) 41 _v_69_72 _i_69_72 _x_69_72) (_check! (<:fix:fix _i_69_72 (vector-length:vec _v_69_72)) 41 _v_69_72 _i_69_72 _x_69_72) (_check! (>=:fix:fix _i_69_72 0) 41 _v_69_72 _i_69_72 _x_69_72) (vector-set!:trusted _v_69_72 _i_69_72 _x_69_72))) (let ((_v_73_76 _v_4_18_57) (_i_73_76 7) (_x_73_76 _t_4_12_33)) (begin (_check! (fixnum? _i_73_76) 41 _v_73_76 _i_73_76 _x_73_76) (_check! (vector? _v_73_76) 41 _v_73_76 _i_73_76 _x_73_76) (_check! (<:fix:fix _i_73_76 (vector-length:vec _v_73_76)) 41 _v_73_76 _i_73_76 _x_73_76) (_check! (>=:fix:fix _i_73_76 0) 41 _v_73_76 _i_73_76 _x_73_76) (vector-set!:trusted _v_73_76 _i_73_76 _x_73_76))) (let ((_v_77_80 _v_4_18_57) (_i_77_80 6) (_x_77_80 _t_4_11_36)) (begin (_check! (fixnum? _i_77_80) 41 _v_77_80 _i_77_80 _x_77_80) (_check! (vector? _v_77_80) 41 _v_77_80 _i_77_80 _x_77_80) (_check! (<:fix:fix _i_77_80 (vector-length:vec _v_77_80)) 41 _v_77_80 _i_77_80 _x_77_80) (_check! (>=:fix:fix _i_77_80 0) 41 _v_77_80 _i_77_80 _x_77_80) (vector-set!:trusted _v_77_80 _i_77_80 _x_77_80))) (let ((_v_81_84 _v_4_18_57) (_i_81_84 5) (_x_81_84 _t_4_10_39)) (begin (_check! (fixnum? _i_81_84) 41 _v_81_84 _i_81_84 _x_81_84) (_check! (vector? _v_81_84) 41 _v_81_84 _i_81_84 _x_81_84) (_check! (<:fix:fix _i_81_84 (vector-length:vec _v_81_84)) 41 _v_81_84 _i_81_84 _x_81_84) (_check! (>=:fix:fix _i_81_84 0) 41 _v_81_84 _i_81_84 _x_81_84) (vector-set!:trusted _v_81_84 _i_81_84 _x_81_84))) (let ((_v_85_88 _v_4_18_57) (_i_85_88 4) (_x_85_88 _t_4_9_42)) (begin (_check! (fixnum? _i_85_88) 41 _v_85_88 _i_85_88 _x_85_88) (_check! (vector? _v_85_88) 41 _v_85_88 _i_85_88 _x_85_88) (_check! (<:fix:fix _i_85_88 (vector-length:vec _v_85_88)) 41 _v_85_88 _i_85_88 _x_85_88) (_check! (>=:fix:fix _i_85_88 0) 41 _v_85_88 _i_85_88 _x_85_88) (vector-set!:trusted _v_85_88 _i_85_88 _x_85_88))) (let ((_v_89_92 _v_4_18_57) (_i_89_92 3) (_x_89_92 _t_4_8_45)) (begin (_check! (fixnum? _i_89_92) 41 _v_89_92 _i_89_92 _x_89_92) (_check! (vector? _v_89_92) 41 _v_89_92 _i_89_92 _x_89_92) (_check! (<:fix:fix _i_89_92 (vector-length:vec _v_89_92)) 41 _v_89_92 _i_89_92 _x_89_92) (_check! (>=:fix:fix _i_89_92 0) 41 _v_89_92 _i_89_92 _x_89_92) (vector-set!:trusted _v_89_92 _i_89_92 _x_89_92))) (let ((_v_93_96 _v_4_18_57) (_i_93_96 2) (_x_93_96 _t_4_7_48)) (begin (_check! (fixnum? _i_93_96) 41 _v_93_96 _i_93_96 _x_93_96) (_check! (vector? _v_93_96) 41 _v_93_96 _i_93_96 _x_93_96) (_check! (<:fix:fix _i_93_96 (vector-length:vec _v_93_96)) 41 _v_93_96 _i_93_96 _x_93_96) (_check! (>=:fix:fix _i_93_96 0) 41 _v_93_96 _i_93_96 _x_93_96) (vector-set!:trusted _v_93_96 _i_93_96 _x_93_96))) (let ((_v_97_100 _v_4_18_57) (_i_97_100 1) (_x_97_100 _t_4_6_51)) (begin (_check! (fixnum? _i_97_100) 41 _v_97_100 _i_97_100 _x_97_100) (_check! (vector? _v_97_100) 41 _v_97_100 _i_97_100 _x_97_100) (_check! (<:fix:fix _i_97_100 (vector-length:vec _v_97_100)) 41 _v_97_100 _i_97_100 _x_97_100) (_check! (>=:fix:fix _i_97_100 0) 41 _v_97_100 _i_97_100 _x_97_100) (vector-set!:trusted _v_97_100 _i_97_100 _x_97_100))) (let ((_v_101_104 _v_4_18_57) (_i_101_104 0) (_x_101_104 _t_4_5_54)) (begin (_check! (fixnum? _i_101_104) 41 _v_101_104 _i_101_104 _x_101_104) (_check! (vector? _v_101_104) 41 _v_101_104 _i_101_104 _x_101_104) (_check! (<:fix:fix _i_101_104 (vector-length:vec _v_101_104)) 41 _v_101_104 _i_101_104 _x_101_104) (_check! (>=:fix:fix _i_101_104 0) 41 _v_101_104 _i_101_104 _x_101_104) (vector-set!:trusted _v_101_104 _i_101_104 _x_101_104))) _v_4_18_57))))) (_make-assembly-structure_2 _source_1 _table_1 _user-data_1))))) 'make-assembly-structure))
(let () (begin (set! as-reset! (lambda (_as_1 _source_1) (let ((_as-reset!_2 0)) (begin (set! _as-reset!_2 (lambda (_as_3 _source_3) (begin (as-source! _as_3 _source_3) (as-lc! _as_3 0) (as-code! _as_3 '()) (as-constants! _as_3 '()) (as-labels! _as_3 '()) (as-fixups! _as_3 '()) (as-nested! _as_3 '()) (as-values! _as_3 '()) (as-retry! _as_3 #f)))) (_as-reset!_2 _as_1 _source_1))))) 'as-reset!))
(let () (begin (set! as-table (lambda (_as_1) (let ((_as-table_2 0)) (begin (set! _as-table_2 (lambda (_as_3) (let ((_v_4_7 _as_3) (_i_4_7 0)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_as-table_2 _as_1))))) 'as-table))
(let () (begin (set! as-source (lambda (_as_1) (let ((_as-source_2 0)) (begin (set! _as-source_2 (lambda (_as_3) (let ((_v_4_7 _as_3) (_i_4_7 1)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_as-source_2 _as_1))))) 'as-source))
(let () (begin (set! as-lc (lambda (_as_1) (let ((_as-lc_2 0)) (begin (set! _as-lc_2 (lambda (_as_3) (let ((_v_4_7 _as_3) (_i_4_7 2)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_as-lc_2 _as_1))))) 'as-lc))
(let () (begin (set! as-code (lambda (_as_1) (let ((_as-code_2 0)) (begin (set! _as-code_2 (lambda (_as_3) (let ((_v_4_7 _as_3) (_i_4_7 3)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_as-code_2 _as_1))))) 'as-code))
(let () (begin (set! as-constants (lambda (_as_1) (let ((_as-constants_2 0)) (begin (set! _as-constants_2 (lambda (_as_3) (let ((_v_4_7 _as_3) (_i_4_7 4)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_as-constants_2 _as_1))))) 'as-constants))
(let () (begin (set! as-labels (lambda (_as_1) (let ((_as-labels_2 0)) (begin (set! _as-labels_2 (lambda (_as_3) (let ((_v_4_7 _as_3) (_i_4_7 5)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_as-labels_2 _as_1))))) 'as-labels))
(let () (begin (set! as-fixups (lambda (_as_1) (let ((_as-fixups_2 0)) (begin (set! _as-fixups_2 (lambda (_as_3) (let ((_v_4_7 _as_3) (_i_4_7 6)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_as-fixups_2 _as_1))))) 'as-fixups))
(let () (begin (set! as-nested (lambda (_as_1) (let ((_as-nested_2 0)) (begin (set! _as-nested_2 (lambda (_as_3) (let ((_v_4_7 _as_3) (_i_4_7 7)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_as-nested_2 _as_1))))) 'as-nested))
(let () (begin (set! as-values (lambda (_as_1) (let ((_as-values_2 0)) (begin (set! _as-values_2 (lambda (_as_3) (let ((_v_4_7 _as_3) (_i_4_7 8)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_as-values_2 _as_1))))) 'as-values))
(let () (begin (set! as-parent (lambda (_as_1) (let ((_as-parent_2 0)) (begin (set! _as-parent_2 (lambda (_as_3) (let ((_v_4_7 _as_3) (_i_4_7 9)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_as-parent_2 _as_1))))) 'as-parent))
(let () (begin (set! as-retry (lambda (_as_1) (let ((_as-retry_2 0)) (begin (set! _as-retry_2 (lambda (_as_3) (let ((_v_4_7 _as_3) (_i_4_7 10)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_as-retry_2 _as_1))))) 'as-retry))
(let () (begin (set! as-user (lambda (_as_1) (let ((_as-user_2 0)) (begin (set! _as-user_2 (lambda (_as_3) (let ((_v_4_7 _as_3) (_i_4_7 11)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_as-user_2 _as_1))))) 'as-user))
(let () (begin (set! as-source! (lambda (_as_1 _x_1) (let ((_as-source!_2 0)) (begin (set! _as-source!_2 (lambda (_as_3 _x_3) (let ((_v_4_7 _as_3) (_i_4_7 1) (_x_4_7 _x_3)) (begin (_check! (fixnum? _i_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (vector? _v_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (>=:fix:fix _i_4_7 0) 41 _v_4_7 _i_4_7 _x_4_7) (vector-set!:trusted _v_4_7 _i_4_7 _x_4_7))))) (_as-source!_2 _as_1 _x_1))))) 'as-source!))
(let () (begin (set! as-lc! (lambda (_as_1 _x_1) (let ((_as-lc!_2 0)) (begin (set! _as-lc!_2 (lambda (_as_3 _x_3) (let ((_v_4_7 _as_3) (_i_4_7 2) (_x_4_7 _x_3)) (begin (_check! (fixnum? _i_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (vector? _v_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (>=:fix:fix _i_4_7 0) 41 _v_4_7 _i_4_7 _x_4_7) (vector-set!:trusted _v_4_7 _i_4_7 _x_4_7))))) (_as-lc!_2 _as_1 _x_1))))) 'as-lc!))
(let () (begin (set! as-code! (lambda (_as_1 _x_1) (let ((_as-code!_2 0)) (begin (set! _as-code!_2 (lambda (_as_3 _x_3) (let ((_v_4_7 _as_3) (_i_4_7 3) (_x_4_7 _x_3)) (begin (_check! (fixnum? _i_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (vector? _v_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (>=:fix:fix _i_4_7 0) 41 _v_4_7 _i_4_7 _x_4_7) (vector-set!:trusted _v_4_7 _i_4_7 _x_4_7))))) (_as-code!_2 _as_1 _x_1))))) 'as-code!))
(let () (begin (set! as-constants! (lambda (_as_1 _x_1) (let ((_as-constants!_2 0)) (begin (set! _as-constants!_2 (lambda (_as_3 _x_3) (let ((_v_4_7 _as_3) (_i_4_7 4) (_x_4_7 _x_3)) (begin (_check! (fixnum? _i_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (vector? _v_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (>=:fix:fix _i_4_7 0) 41 _v_4_7 _i_4_7 _x_4_7) (vector-set!:trusted _v_4_7 _i_4_7 _x_4_7))))) (_as-constants!_2 _as_1 _x_1))))) 'as-constants!))
(let () (begin (set! as-labels! (lambda (_as_1 _x_1) (let ((_as-labels!_2 0)) (begin (set! _as-labels!_2 (lambda (_as_3 _x_3) (let ((_v_4_7 _as_3) (_i_4_7 5) (_x_4_7 _x_3)) (begin (_check! (fixnum? _i_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (vector? _v_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (>=:fix:fix _i_4_7 0) 41 _v_4_7 _i_4_7 _x_4_7) (vector-set!:trusted _v_4_7 _i_4_7 _x_4_7))))) (_as-labels!_2 _as_1 _x_1))))) 'as-labels!))
(let () (begin (set! as-fixups! (lambda (_as_1 _x_1) (let ((_as-fixups!_2 0)) (begin (set! _as-fixups!_2 (lambda (_as_3 _x_3) (let ((_v_4_7 _as_3) (_i_4_7 6) (_x_4_7 _x_3)) (begin (_check! (fixnum? _i_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (vector? _v_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (>=:fix:fix _i_4_7 0) 41 _v_4_7 _i_4_7 _x_4_7) (vector-set!:trusted _v_4_7 _i_4_7 _x_4_7))))) (_as-fixups!_2 _as_1 _x_1))))) 'as-fixups!))
(let () (begin (set! as-nested! (lambda (_as_1 _x_1) (let ((_as-nested!_2 0)) (begin (set! _as-nested!_2 (lambda (_as_3 _x_3) (let ((_v_4_7 _as_3) (_i_4_7 7) (_x_4_7 _x_3)) (begin (_check! (fixnum? _i_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (vector? _v_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (>=:fix:fix _i_4_7 0) 41 _v_4_7 _i_4_7 _x_4_7) (vector-set!:trusted _v_4_7 _i_4_7 _x_4_7))))) (_as-nested!_2 _as_1 _x_1))))) 'as-nested!))
(let () (begin (set! as-values! (lambda (_as_1 _x_1) (let ((_as-values!_2 0)) (begin (set! _as-values!_2 (lambda (_as_3 _x_3) (let ((_v_4_7 _as_3) (_i_4_7 8) (_x_4_7 _x_3)) (begin (_check! (fixnum? _i_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (vector? _v_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (>=:fix:fix _i_4_7 0) 41 _v_4_7 _i_4_7 _x_4_7) (vector-set!:trusted _v_4_7 _i_4_7 _x_4_7))))) (_as-values!_2 _as_1 _x_1))))) 'as-values!))
(let () (begin (set! as-parent! (lambda (_as_1 _x_1) (let ((_as-parent!_2 0)) (begin (set! _as-parent!_2 (lambda (_as_3 _x_3) (let ((_v_4_7 _as_3) (_i_4_7 9) (_x_4_7 _x_3)) (begin (_check! (fixnum? _i_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (vector? _v_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (>=:fix:fix _i_4_7 0) 41 _v_4_7 _i_4_7 _x_4_7) (vector-set!:trusted _v_4_7 _i_4_7 _x_4_7))))) (_as-parent!_2 _as_1 _x_1))))) 'as-parent!))
(let () (begin (set! as-retry! (lambda (_as_1 _x_1) (let ((_as-retry!_2 0)) (begin (set! _as-retry!_2 (lambda (_as_3 _x_3) (let ((_v_4_7 _as_3) (_i_4_7 10) (_x_4_7 _x_3)) (begin (_check! (fixnum? _i_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (vector? _v_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (>=:fix:fix _i_4_7 0) 41 _v_4_7 _i_4_7 _x_4_7) (vector-set!:trusted _v_4_7 _i_4_7 _x_4_7))))) (_as-retry!_2 _as_1 _x_1))))) 'as-retry!))
(let () (begin (set! as-user! (lambda (_as_1 _x_1) (let ((_as-user!_2 0)) (begin (set! _as-user!_2 (lambda (_as_3 _x_3) (let ((_v_4_7 _as_3) (_i_4_7 11) (_x_4_7 _x_3)) (begin (_check! (fixnum? _i_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (vector? _v_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (>=:fix:fix _i_4_7 0) 41 _v_4_7 _i_4_7 _x_4_7) (vector-set!:trusted _v_4_7 _i_4_7 _x_4_7))))) (_as-user!_2 _as_1 _x_1))))) 'as-user!))
(let () (begin (set! assemble1 (lambda (_as_1 _finalize_1 _doc_1) (let ((_assemble1_2 0)) (begin (set! _assemble1_2 (lambda (_as_3 _finalize_3 _doc_3) (let ((_assembly-table_6 (as-table _as_3)) (_peep?_6 (peephole-optimization)) (_step?_6 (single-stepping)) (_step-instr_6 (cons $_singlestep '())) (_end-instr_6 (cons $_end '()))) (let ((_doit_9 (unspecified)) (_loop_9 (unspecified))) (begin (set! _doit_9 (lambda () (begin (emit-datum _as_3 _doc_3) (_loop_9)))) (set! _loop_9 (lambda () (let ((_source_14 (as-source _as_3))) (if (null? _source_14) (begin ((let ((_v_15_18 _assembly-table_6) (_i_15_18 $_end)) (begin (_check! (fixnum? _i_15_18) 40 _v_15_18 _i_15_18) (_check! (vector? _v_15_18) 40 _v_15_18 _i_15_18) (_check! (<:fix:fix _i_15_18 (vector-length:vec _v_15_18)) 40 _v_15_18 _i_15_18) (_check! (>=:fix:fix _i_15_18 0) 40 _v_15_18 _i_15_18) (vector-ref:trusted _v_15_18 _i_15_18))) _end-instr_6 _as_3) (_finalize_3 _as_3)) (begin (if _step?_6 ((let ((_v_19_22 _assembly-table_6) (_i_19_22 $_singlestep)) (begin (_check! (fixnum? _i_19_22) 40 _v_19_22 _i_19_22) (_check! (vector? _v_19_22) 40 _v_19_22 _i_19_22) (_check! (<:fix:fix _i_19_22 (vector-length:vec _v_19_22)) 40 _v_19_22 _i_19_22) (_check! (>=:fix:fix _i_19_22 0) 40 _v_19_22 _i_19_22) (vector-ref:trusted _v_19_22 _i_19_22))) _step-instr_6 _as_3) (unspecified)) (if _peep?_6 (let ((_src1_25 _source_14)) (let () (let ((_peeploop_28 (unspecified))) (begin (set! _peeploop_28 (lambda (_src1_29) (begin (peep _as_3) (let ((_src2_32 (as-source _as_3))) (if (not (eq? _src1_29 _src2_32)) (_peeploop_28 _src2_32) (unspecified)))))) (_peeploop_28 _src1_25))))) (unspecified)) (let ((_source_35 (as-source _as_3))) (begin (as-source! _as_3 (let ((_x_36_39 _source_35)) (begin (_check! (pair? _x_36_39) 1 _x_36_39) (cdr:pair _x_36_39)))) ((let ((_v_40_43 _assembly-table_6) (_i_40_43 (let ((_x_45_48 (let ((_x_49_52 _source_35)) (begin (_check! (pair? _x_49_52) 0 _x_49_52) (car:pair _x_49_52))))) (begin (_check! (pair? _x_45_48) 0 _x_45_48) (car:pair _x_45_48))))) (begin (_check! (fixnum? _i_40_43) 40 _v_40_43 _i_40_43) (_check! (vector? _v_40_43) 40 _v_40_43 _i_40_43) (_check! (<:fix:fix _i_40_43 (vector-length:vec _v_40_43)) 40 _v_40_43 _i_40_43) (_check! (>=:fix:fix _i_40_43 0) 40 _v_40_43 _i_40_43) (vector-ref:trusted _v_40_43 _i_40_43))) (let ((_x_53_56 _source_35)) (begin (_check! (pair? _x_53_56) 0 _x_53_56) (car:pair _x_53_56))) _as_3) (_loop_9)))))))) (let* ((_source_57 (as-source _as_3)) (_r_60 (call-with-current-continuation (lambda (_k_69) (begin (as-retry! _as_3 (lambda () (_k_69 'retry))) (_doit_9)))))) (let () (if (eq? _r_60 'retry) (let ((_old_66 (short-effective-addresses))) (begin (as-reset! _as_3 _source_57) (dynamic-wind (lambda () (short-effective-addresses #f)) _doit_9 (lambda () (short-effective-addresses _old_66))))) _r_60)))))))) (_assemble1_2 _as_1 _finalize_1 _doc_1))))) 'assemble1))
(let () (begin (set! assemble-pasteup (lambda (_as_1) (let ((_assemble-pasteup_2 0)) (begin (set! _assemble-pasteup_2 (lambda (_as_3) (let ((_pasteup-strings_4 (unspecified)) (_pasteup-code_4 (unspecified))) (begin (set! _pasteup-strings_4 (lambda () (let ((_code_8 (make-string (as-lc _as_3) #\space)) (_constants_8 (list->vector (as-constants _as_3)))) (let ((_paste-code!_9 (unspecified))) (begin (set! _paste-code!_9 (lambda (_strs_10 _i_10) (if (not (null? _strs_10)) (let* ((_s_13 (let ((_x_34_37 _strs_10)) (begin (_check! (pair? _x_34_37) 0 _x_34_37) (car:pair _x_34_37)))) (_n_16 (string-length _s_13))) (let () (let () (let ((_loop_20_23_26 (unspecified))) (begin (set! _loop_20_23_26 (lambda (_i_27 _j_27) (if (< _j_27 0) (_paste-code!_9 (let ((_x_29_32 _strs_10)) (begin (_check! (pair? _x_29_32) 1 _x_29_32) (cdr:pair _x_29_32))) _i_27) (begin (begin #t (string-set! _code_8 _i_27 (string-ref _s_13 _j_27))) (_loop_20_23_26 (- _i_27 1) (- _j_27 1)))))) (_loop_20_23_26 _i_10 (- _n_16 1))))))) (unspecified)))) (_paste-code!_9 (as-code _as_3) (- (as-lc _as_3) 1)) (as-code! _as_3 (cons _code_8 '())) (cons _code_8 _constants_8)))))) (set! _pasteup-code_4 (lambda () (let ((_code_43 (make-bytevector (as-lc _as_3))) (_constants_43 (list->vector (as-constants _as_3)))) (let ((_paste-code!_44 (unspecified))) (begin (set! _paste-code!_44 (lambda (_bvs_45 _i_45) (if (not (null? _bvs_45)) (let* ((_bv_48 (let ((_x_69_72 _bvs_45)) (begin (_check! (pair? _x_69_72) 0 _x_69_72) (car:pair _x_69_72)))) (_n_51 (bytevector-length _bv_48))) (let () (let () (let ((_loop_55_58_61 (unspecified))) (begin (set! _loop_55_58_61 (lambda (_i_62 _j_62) (if (< _j_62 0) (_paste-code!_44 (let ((_x_64_67 _bvs_45)) (begin (_check! (pair? _x_64_67) 1 _x_64_67) (cdr:pair _x_64_67))) _i_62) (begin (begin #t (bytevector-set! _code_43 _i_62 (bytevector-ref _bv_48 _j_62))) (_loop_55_58_61 (- _i_62 1) (- _j_62 1)))))) (_loop_55_58_61 _i_45 (- _n_51 1))))))) (unspecified)))) (_paste-code!_44 (as-code _as_3) (- (as-lc _as_3) 1)) (as-code! _as_3 (cons _code_43 '())) (cons _code_43 _constants_43)))))) (if (bytevector? (let ((_x_74_77 (as-code _as_3))) (begin (_check! (pair? _x_74_77) 0 _x_74_77) (car:pair _x_74_77)))) (_pasteup-code_4) (_pasteup-strings_4)))))) (_assemble-pasteup_2 _as_1))))) 'assemble-pasteup))
(let () (begin (set! assemble-finalize! (lambda (_as_1) (let ((_assemble-finalize!_2 0)) (begin (set! _assemble-finalize!_2 (lambda (_as_3) (let ((_code_6 (let ((_x_101_104 (as-code _as_3))) (begin (_check! (pair? _x_101_104) 0 _x_101_104) (car:pair _x_101_104))))) (let ((_lookup-label_7 (unspecified)) (_apply-fixups!_7 (unspecified))) (begin (set! _lookup-label_7 (lambda (_l_8) (let ((_temp_9_12 (label-value _as_3 (label_ident _l_8)))) (if _temp_9_12 _temp_9_12 (asm-error "Assembler error -- undefined label " _l_8))))) (set! _apply-fixups!_7 (lambda (_fixups_14) (if (not (null? _fixups_14)) (let* ((_fixup_17 (let ((_x_73_76 _fixups_14)) (begin (_check! (pair? _x_73_76) 0 _x_73_76) (car:pair _x_73_76)))) (_i_20 (let ((_x_69_72 _fixup_17)) (begin (_check! (pair? _x_69_72) 0 _x_69_72) (car:pair _x_69_72)))) (_size_23 (let ((_x_61_64 (let ((_x_65_68 _fixup_17)) (begin (_check! (pair? _x_65_68) 1 _x_65_68) (cdr:pair _x_65_68))))) (begin (_check! (pair? _x_61_64) 0 _x_61_64) (car:pair _x_61_64)))) (_adjustment_26 (let ((_x_48_51 (let ((_x_52_55 (let ((_x_56_59 _fixup_17)) (begin (_check! (pair? _x_56_59) 1 _x_56_59) (cdr:pair _x_56_59))))) (begin (_check! (pair? _x_52_55) 1 _x_52_55) (cdr:pair _x_52_55))))) (begin (_check! (pair? _x_48_51) 0 _x_48_51) (car:pair _x_48_51)))) (_n_29 (if (label? _adjustment_26) (_lookup-label_7 _adjustment_26) _adjustment_26))) (let () (begin (let ((_temp_33_36 _size_23)) (if (memv _temp_33_36 '(0)) (fixup-proc _code_6 _i_20 _n_29) (if (memv _temp_33_36 '(1)) (fixup1 _code_6 _i_20 _n_29) (if (memv _temp_33_36 '(2)) (fixup2 _code_6 _i_20 _n_29) (if (memv _temp_33_36 '(3)) (fixup3 _code_6 _i_20 _n_29) (if (memv _temp_33_36 '(4)) (fixup4 _code_6 _i_20 _n_29) ???)))))) (_apply-fixups!_7 (let ((_x_43_46 _fixups_14)) (begin (_check! (pair? _x_43_46) 1 _x_43_46) (cdr:pair _x_43_46))))))) (unspecified)))) (_apply-fixups!_7 (reverse! (as-fixups _as_3))) (let () (let ((_loop_82_84_87 (unspecified))) (begin (set! _loop_82_84_87 (lambda (_y1_77_78_88) (if (null? _y1_77_78_88) (if #f #f (unspecified)) (begin (begin #t (let ((_nested-as-proc_92 (let ((_x_93_96 _y1_77_78_88)) (begin (_check! (pair? _x_93_96) 0 _x_93_96) (car:pair _x_93_96))))) (_nested-as-proc_92))) (_loop_82_84_87 (let ((_x_97_100 _y1_77_78_88)) (begin (_check! (pair? _x_97_100) 1 _x_97_100) (cdr:pair _x_97_100)))))))) (_loop_82_84_87 (as-nested _as_3)))))))))) (_assemble-finalize!_2 _as_1))))) 'assemble-finalize!))
(let () (begin (set! fixup1 (lambda (_code_1 _i_1 _n_1) (let ((_fixup1_2 0)) (begin (set! _fixup1_2 (lambda (_code_3 _i_3 _n_3) (bytevector-set! _code_3 _i_3 (+ _n_3 (bytevector-ref _code_3 _i_3))))) (_fixup1_2 _code_1 _i_1 _n_1))))) 'fixup1))
(let () (begin (set! fixup2 (lambda (_code_1 _i_1 _n_1) (let ((_fixup2_2 0)) (begin (set! _fixup2_2 (lambda (_code_3 _i_3 _n_3) (let* ((_x_6 (+ (* 256 (bytevector-ref _code_3 _i_3)) (bytevector-ref _code_3 (+ _i_3 1)))) (_y_9 (+ _x_6 _n_3)) (_y0_12 (modulo _y_9 256)) (_y1_15 (modulo (quotient (- _y_9 _y0_12) 256) 256))) (let () (begin (bytevector-set! _code_3 _i_3 _y1_15) (bytevector-set! _code_3 (+ _i_3 1) _y0_12)))))) (_fixup2_2 _code_1 _i_1 _n_1))))) 'fixup2))
(let () (begin (set! fixup3 (lambda (_code_1 _i_1 _n_1) (let ((_fixup3_2 0)) (begin (set! _fixup3_2 (lambda (_code_3 _i_3 _n_3) (let* ((_x_6 (+ (+ (* 65536 (bytevector-ref _code_3 _i_3)) (* 256 (bytevector-ref _code_3 (+ _i_3 1)))) (bytevector-ref _code_3 (+ _i_3 2)))) (_y_9 (+ _x_6 _n_3)) (_y0_12 (modulo _y_9 256)) (_y1_15 (modulo (quotient (- _y_9 _y0_12) 256) 256)) (_y2_18 (modulo (quotient (- (- _y_9 (* 256 _y1_15)) _y0_12) 256) 256))) (let () (begin (bytevector-set! _code_3 _i_3 _y2_18) (bytevector-set! _code_3 (+ _i_3 1) _y1_15) (bytevector-set! _code_3 (+ _i_3 2) _y0_12)))))) (_fixup3_2 _code_1 _i_1 _n_1))))) 'fixup3))
(let () (begin (set! fixup4 (lambda (_code_1 _i_1 _n_1) (let ((_fixup4_2 0)) (begin (set! _fixup4_2 (lambda (_code_3 _i_3 _n_3) (let* ((_x_6 (+ (+ (+ (* 16777216 (bytevector-ref _code_3 _i_3)) (* 65536 (bytevector-ref _code_3 (+ _i_3 1)))) (* 256 (bytevector-ref _code_3 (+ _i_3 2)))) (bytevector-ref _code_3 (+ _i_3 3)))) (_y_9 (+ _x_6 _n_3)) (_y0_12 (modulo _y_9 256)) (_y1_15 (modulo (quotient (- _y_9 _y0_12) 256) 256)) (_y2_18 (modulo (quotient (- (- _y_9 (* 256 _y1_15)) _y0_12) 256) 256)) (_y3_21 (modulo (quotient (- (- (- _y_9 (* 65536 _y2_18)) (* 256 _y1_15)) _y0_12) 256) 256))) (let () (begin (bytevector-set! _code_3 _i_3 _y3_21) (bytevector-set! _code_3 (+ _i_3 1) _y2_18) (bytevector-set! _code_3 (+ _i_3 2) _y1_15) (bytevector-set! _code_3 (+ _i_3 3) _y0_12)))))) (_fixup4_2 _code_1 _i_1 _n_1))))) 'fixup4))
(let () (begin (set! fixup-proc (lambda (_code_1 _i_1 _p_1) (let ((_fixup-proc_2 0)) (begin (set! _fixup-proc_2 (lambda (_code_3 _i_3 _p_3) (_p_3 _code_3 _i_3))) (_fixup-proc_2 _code_1 _i_1 _p_1))))) 'fixup-proc))
(let () (begin (set! view-segment (lambda (_segment_1) (let ((_view-segment_2 0)) (begin (set! _view-segment_2 (lambda (_segment_3) (let ((_display-bytevector_4 (unspecified))) (begin (set! _display-bytevector_4 (lambda (_bv_5) (let ((_n_8 (bytevector-length _bv_5))) (let () (let ((_loop_10_12_15 (unspecified))) (begin (set! _loop_10_12_15 (lambda (_i_16) (if (= _i_16 _n_8) (if #f #f (unspecified)) (begin (begin #t (if (zero? (remainder _i_16 4)) (write-char #\space) (unspecified)) (if (zero? (remainder _i_16 8)) (write-char #\space) (unspecified)) (if (zero? (remainder _i_16 32)) (newline) (unspecified)) (let ((_byte_21 (bytevector-ref _bv_5 _i_16))) (begin (write-char (string-ref (number->string (quotient _byte_21 16) 16) 0)) (write-char (string-ref (number->string (remainder _byte_21 16) 16) 0))))) (_loop_10_12_15 (+ _i_16 1)))))) (_loop_10_12_15 0))))))) (if (if (pair? _segment_3) (if (bytevector? (let ((_x_24_27 _segment_3)) (begin (_check! (pair? _x_24_27) 0 _x_24_27) (car:pair _x_24_27)))) (vector? (let ((_x_29_32 _segment_3)) (begin (_check! (pair? _x_29_32) 1 _x_29_32) (cdr:pair _x_29_32)))) #f) #f) (begin (_display-bytevector_4 (let ((_x_33_36 _segment_3)) (begin (_check! (pair? _x_33_36) 0 _x_33_36) (car:pair _x_33_36)))) (newline) (write (let ((_x_37_40 _segment_3)) (begin (_check! (pair? _x_37_40) 1 _x_37_40) (cdr:pair _x_37_40)))) (newline) (let () (let ((_loop_42_44_47 (unspecified))) (begin (set! _loop_42_44_47 (lambda (_constants_48) (if (let ((_temp_50_53 (null? _constants_48))) (if _temp_50_53 _temp_50_53 (null? (let ((_x_55_58 _constants_48)) (begin (_check! (pair? _x_55_58) 1 _x_55_58) (cdr:pair _x_55_58)))))) (if #f #f (unspecified)) (begin (begin #t (if (if (bytevector? (let ((_x_61_64 _constants_48)) (begin (_check! (pair? _x_61_64) 0 _x_61_64) (car:pair _x_61_64)))) (vector? (let ((_x_67_70 (let ((_x_71_74 _constants_48)) (begin (_check! (pair? _x_71_74) 1 _x_71_74) (cdr:pair _x_71_74))))) (begin (_check! (pair? _x_67_70) 0 _x_67_70) (car:pair _x_67_70)))) #f) (_view-segment_2 (cons (let ((_x_75_78 _constants_48)) (begin (_check! (pair? _x_75_78) 0 _x_75_78) (car:pair _x_75_78))) (let ((_x_80_83 (let ((_x_84_87 _constants_48)) (begin (_check! (pair? _x_84_87) 1 _x_84_87) (cdr:pair _x_84_87))))) (begin (_check! (pair? _x_80_83) 0 _x_80_83) (car:pair _x_80_83))))) (unspecified))) (_loop_42_44_47 (let ((_x_88_91 _constants_48)) (begin (_check! (pair? _x_88_91) 1 _x_88_91) (cdr:pair _x_88_91)))))))) (_loop_42_44_47 (vector->list (let ((_x_92_95 _segment_3)) (begin (_check! (pair? _x_92_95) 1 _x_92_95) (cdr:pair _x_92_95))))))))) (unspecified)))))) (_view-segment_2 _segment_1))))) 'view-segment))
(let () (begin (set! test-asm (lambda (_emit_1) (let ((_test-asm_2 0)) (begin (set! _test-asm_2 (lambda (_emit_3) (let ((_as_6 (make-assembly-structure #f #f #f))) (begin (_emit_3 _as_6) (let ((_segment_9 (assemble-pasteup _as_6))) (begin (assemble-finalize! _as_6) (disassemble _segment_9))))))) (_test-asm_2 _emit_1))))) 'test-asm))
(let () (begin (set! compile&assemble (lambda (_x_1) (let ((_compile&assemble_2 0)) (begin (set! _compile&assemble_2 (lambda (_x_3) (view-segment (assemble (compile _x_3))))) (_compile&assemble_2 _x_1))))) 'compile&assemble))
(let () (begin (set! format-object (lambda (_x_1) (let ((_format-object_2 0)) (begin (set! _format-object_2 (lambda (_x_3) (let ((_format-improper-list_5 (unspecified)) (_format-list_5 (unspecified))) (begin (set! _format-improper-list_5 (lambda (_x_6) (let ((_loop_7 (unspecified))) (begin (set! _loop_7 (lambda (_x_8) (if (pair? (let ((_x_9_12 _x_8)) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12)))) (cons (_format-object_2 (let ((_x_13_16 _x_8)) (begin (_check! (pair? _x_13_16) 0 _x_13_16) (car:pair _x_13_16)))) (cons " " (_loop_7 (let ((_x_17_20 _x_8)) (begin (_check! (pair? _x_17_20) 1 _x_17_20) (cdr:pair _x_17_20)))))) (let* ((_t1_21_24 (_format-object_2 (let ((_x_56_59 _x_8)) (begin (_check! (pair? _x_56_59) 0 _x_56_59) (car:pair _x_56_59))))) (_t2_21_27 (let* ((_t1_31_34 " _ ") (_t2_31_37 (let* ((_t1_41_44 (_format-object_2 (let ((_x_52_55 _x_8)) (begin (_check! (pair? _x_52_55) 1 _x_52_55) (cdr:pair _x_52_55))))) (_t2_41_47 (cons ")" '()))) (let () (cons _t1_41_44 _t2_41_47))))) (let () (cons _t1_31_34 _t2_31_37))))) (let () (cons _t1_21_24 _t2_21_27)))))) (apply string-append (cons "(" (_loop_7 _x_6))))))) (set! _format-list_5 (lambda (_x_60) (let ((_loop_61 (unspecified))) (begin (set! _loop_61 (lambda (_x_62) (if (null? _x_62) '(")") (if (null? (let ((_x_65_68 _x_62)) (begin (_check! (pair? _x_65_68) 1 _x_65_68) (cdr:pair _x_65_68)))) (let* ((_t1_69_72 (_format-object_2 (let ((_x_80_83 _x_62)) (begin (_check! (pair? _x_80_83) 0 _x_80_83) (car:pair _x_80_83))))) (_t2_69_75 (cons ")" '()))) (let () (cons _t1_69_72 _t2_69_75))) (cons (_format-object_2 (let ((_x_85_88 _x_62)) (begin (_check! (pair? _x_85_88) 0 _x_85_88) (car:pair _x_85_88)))) (cons " " (_loop_61 (let ((_x_89_92 _x_62)) (begin (_check! (pair? _x_89_92) 1 _x_89_92) (cdr:pair _x_89_92)))))))))) (apply string-append (cons "(" (_loop_61 _x_60))))))) (if (null? _x_3) "()" (if (not _x_3) "#f" (if (eq? _x_3 #t) "#t" (if (symbol? _x_3) (symbol->string _x_3) (if (number? _x_3) (number->string _x_3) (if (char? _x_3) (string _x_3) (if (string? _x_3) _x_3 (if (procedure? _x_3) "#<procedure>" (if (bytevector? _x_3) "#<bytevector>" (if (eof-object? _x_3) "#<eof>" (if (port? _x_3) "#<port>" (if (eq? _x_3 (unspecified)) "#!unspecified" (if (eq? _x_3 (undefined)) "#!undefined" (if (vector? _x_3) (string-append "#" (_format-list_5 (vector->list _x_3))) (if (list? _x_3) (_format-list_5 _x_3) (if (pair? _x_3) (_format-improper-list_5 _x_3) "#<weird>")))))))))))))))))))) (_format-object_2 _x_1))))) 'format-object))
(let () (begin (set! asm:endianness 'big) 'asm:endianness))
(let () (begin (set! asm:bv (lambda (_n1_1 _n2_1 _n3_1 _n4_1) (let ((_asm:bv_2 0)) (begin (set! _asm:bv_2 (lambda (_n1_3 _n2_3 _n3_3 _n4_3) (let ((_bv_6 (make-bytevector 4))) (begin (bytevector-set! _bv_6 0 _n1_3) (bytevector-set! _bv_6 1 _n2_3) (bytevector-set! _bv_6 2 _n3_3) (bytevector-set! _bv_6 3 _n4_3) _bv_6)))) (_asm:bv_2 _n1_1 _n2_1 _n3_1 _n4_1))))) 'asm:bv))
(let () (begin (set! asm:bv->int (lambda (_bv_1) (let ((_asm:bv->int_2 0)) (begin (set! _asm:bv->int_2 (lambda (_bv_3) (let ((_i_6 (+ (* (+ (* (+ (* (bytevector-ref _bv_3 0) 256) (bytevector-ref _bv_3 1)) 256) (bytevector-ref _bv_3 2)) 256) (bytevector-ref _bv_3 3)))) (if (> (bytevector-ref _bv_3 0) 127) (- 0 _i_6) _i_6)))) (_asm:bv->int_2 _bv_1))))) 'asm:bv->int))
(let () (begin (set! asm:lsh (lambda (_m_1 _n_1) (let ((_asm:lsh_2 0)) (begin (set! _asm:lsh_2 (lambda (_m_3 _n_3) (if (not (bytevector? _m_3)) (_asm:lsh_2 (asm:int->bv _m_3) _n_3) (let ((_m_6 (bytevector-copy _m_3)) (_n_6 (remainder _n_3 33))) (begin (if (>= _n_6 8) (let ((_k_9 (quotient _n_6 8))) (let () (let ((_loop_10_12_15 (unspecified))) (begin (set! _loop_10_12_15 (lambda (_i_16) (if (= (+ _i_16 _k_9) 4) (let () (let ((_loop_19_21_24 (unspecified))) (begin (set! _loop_19_21_24 (lambda (_i_25) (if (= _i_25 4) (if #f #f (unspecified)) (begin (begin #t (bytevector-set! _m_6 _i_25 0)) (_loop_19_21_24 (+ _i_25 1)))))) (_loop_19_21_24 _i_16)))) (begin (begin #t (bytevector-set! _m_6 _i_16 (bytevector-ref _m_6 (+ _i_16 _k_9)))) (_loop_10_12_15 (+ _i_16 1)))))) (_loop_10_12_15 0))))) (unspecified)) (let* ((_d0_31 (bytevector-ref _m_6 0)) (_d1_34 (bytevector-ref _m_6 1)) (_d2_37 (bytevector-ref _m_6 2)) (_d3_40 (bytevector-ref _m_6 3)) (_n_43 (remainder _n_6 8)) (_n-_46 (- 8 _n_43))) (let () (asm:bv (logand (logior (lsh _d0_31 _n_43) (rshl _d1_34 _n-_46)) 255) (logand (logior (lsh _d1_34 _n_43) (rshl _d2_37 _n-_46)) 255) (logand (logior (lsh _d2_37 _n_43) (rshl _d3_40 _n-_46)) 255) (logand (lsh _d3_40 _n_43) 255))))))))) (_asm:lsh_2 _m_1 _n_1))))) 'asm:lsh))
(let () (begin (set! asm:rshl (lambda (_m_1 _n_1) (let ((_asm:rshl_2 0)) (begin (set! _asm:rshl_2 (lambda (_m_3 _n_3) (if (not (bytevector? _m_3)) (_asm:rshl_2 (asm:int->bv _m_3) _n_3) (let ((_m_6 (bytevector-copy _m_3)) (_n_6 (remainder _n_3 33))) (begin (if (>= _n_6 8) (let ((_k_9 (quotient _n_6 8))) (let () (let ((_loop_10_12_15 (unspecified))) (begin (set! _loop_10_12_15 (lambda (_i_16) (if (< (- _i_16 _k_9) 0) (let () (let ((_loop_19_21_24 (unspecified))) (begin (set! _loop_19_21_24 (lambda (_i_25) (if (< _i_25 0) (if #f #f (unspecified)) (begin (begin #t (bytevector-set! _m_6 _i_25 0)) (_loop_19_21_24 (- _i_25 1)))))) (_loop_19_21_24 _i_16)))) (begin (begin #t (bytevector-set! _m_6 _i_16 (bytevector-ref _m_6 (- _i_16 _k_9)))) (_loop_10_12_15 (- _i_16 1)))))) (_loop_10_12_15 3))))) (unspecified)) (let* ((_d0_31 (bytevector-ref _m_6 0)) (_d1_34 (bytevector-ref _m_6 1)) (_d2_37 (bytevector-ref _m_6 2)) (_d3_40 (bytevector-ref _m_6 3)) (_n_43 (remainder _n_6 8)) (_n-_46 (- 8 _n_43))) (let () (asm:bv (rshl _d0_31 _n_43) (logand (logior (rshl _d1_34 _n_43) (lsh _d0_31 _n-_46)) 255) (logand (logior (rshl _d2_37 _n_43) (lsh _d1_34 _n-_46)) 255) (logand (logior (rshl _d3_40 _n_43) (lsh _d2_37 _n-_46)) 255))))))))) (_asm:rshl_2 _m_1 _n_1))))) 'asm:rshl))
(let () (begin (set! asm:rsha (let ((_ones_3 (asm:bv 255 255 255 255))) (lambda (_m_4 _n_4) (let* ((_m_7 (if (bytevector? _m_4) _m_4 (asm:int->bv _m_4))) (_n_10 (remainder _n_4 33)) (_h_13 (rshl (bytevector-ref _m_7 0) 7)) (_k_16 (asm:rshl _m_7 _n_10))) (let () (if (zero? _h_13) _k_16 (asm:logior _k_16 (asm:lsh _ones_3 (- 32 _n_10))))))))) 'asm:rsha))
(let () (begin (set! asm:int->bv (let ((_two^32_3 (expt 2 32))) (lambda (_m_4) (let* ((_m_7 (if (< _m_4 0) (+ _two^32_3 _m_4) _m_4)) (_b0_10 (remainder _m_7 256)) (_m_13 (quotient _m_7 256)) (_b1_16 (remainder _m_13 256)) (_m_19 (quotient _m_13 256)) (_b2_22 (remainder _m_19 256)) (_m_25 (quotient _m_19 256)) (_b3_28 (remainder _m_25 256))) (let () (asm:bv _b3_28 _b2_22 _b1_16 _b0_10)))))) 'asm:int->bv))
(let () (begin (set! asm:logior (lambda _ops_1 (let ((_r_4 (asm:bv 0 0 0 0))) (let () (let ((_loop_5_7_10 (unspecified))) (begin (set! _loop_5_7_10 (lambda (_ops_11) (if (null? _ops_11) _r_4 (begin (begin #t (let* ((_op_16 (let ((_x_23_26 _ops_11)) (begin (_check! (pair? _x_23_26) 0 _x_23_26) (car:pair _x_23_26)))) (_op_19 (if (bytevector? _op_16) _op_16 (asm:int->bv _op_16)))) (let () (begin (bytevector-set! _r_4 0 (logior (bytevector-ref _r_4 0) (bytevector-ref _op_19 0))) (bytevector-set! _r_4 1 (logior (bytevector-ref _r_4 1) (bytevector-ref _op_19 1))) (bytevector-set! _r_4 2 (logior (bytevector-ref _r_4 2) (bytevector-ref _op_19 2))) (bytevector-set! _r_4 3 (logior (bytevector-ref _r_4 3) (bytevector-ref _op_19 3))))))) (_loop_5_7_10 (let ((_x_27_30 _ops_11)) (begin (_check! (pair? _x_27_30) 1 _x_27_30) (cdr:pair _x_27_30)))))))) (_loop_5_7_10 _ops_1))))))) 'asm:logior))
(let () (begin (set! asm:logand (lambda (_op1_1 _op2_1) (let ((_asm:logand_2 0)) (begin (set! _asm:logand_2 (lambda (_op1_3 _op2_3) (let ((_op1_6 (if (bytevector? _op1_3) _op1_3 (asm:int->bv _op1_3))) (_op2_6 (if (bytevector? _op2_3) _op2_3 (asm:int->bv _op2_3))) (_bv_6 (make-bytevector 4))) (begin (bytevector-set! _bv_6 0 (logand (bytevector-ref _op1_6 0) (bytevector-ref _op2_6 0))) (bytevector-set! _bv_6 1 (logand (bytevector-ref _op1_6 1) (bytevector-ref _op2_6 1))) (bytevector-set! _bv_6 2 (logand (bytevector-ref _op1_6 2) (bytevector-ref _op2_6 2))) (bytevector-set! _bv_6 3 (logand (bytevector-ref _op1_6 3) (bytevector-ref _op2_6 3))) _bv_6)))) (_asm:logand_2 _op1_1 _op2_1))))) 'asm:logand))
(let () (begin (set! asm:lobits (let ((_v_3 (make-vector 33 '()))) (begin (let () (let ((_loop_5_7_10 (unspecified))) (begin (set! _loop_5_7_10 (lambda (_i_11) (if (= _i_11 33) (if #f #f (unspecified)) (begin (begin #t (let ((_v_14_17 _v_3) (_i_14_17 _i_11) (_x_14_17 (asm:int->bv (- (expt 2 _i_11) 1)))) (begin (_check! (fixnum? _i_14_17) 41 _v_14_17 _i_14_17 _x_14_17) (_check! (vector? _v_14_17) 41 _v_14_17 _i_14_17 _x_14_17) (_check! (<:fix:fix _i_14_17 (vector-length:vec _v_14_17)) 41 _v_14_17 _i_14_17 _x_14_17) (_check! (>=:fix:fix _i_14_17 0) 41 _v_14_17 _i_14_17 _x_14_17) (vector-set!:trusted _v_14_17 _i_14_17 _x_14_17)))) (_loop_5_7_10 (+ _i_11 1)))))) (_loop_5_7_10 0)))) (lambda (_m_18 _n_18) (asm:logand _m_18 (let ((_v_19_22 _v_3) (_i_19_22 (remainder _n_18 33))) (begin (_check! (fixnum? _i_19_22) 40 _v_19_22 _i_19_22) (_check! (vector? _v_19_22) 40 _v_19_22 _i_19_22) (_check! (<:fix:fix _i_19_22 (vector-length:vec _v_19_22)) 40 _v_19_22 _i_19_22) (_check! (>=:fix:fix _i_19_22 0) 40 _v_19_22 _i_19_22) (vector-ref:trusted _v_19_22 _i_19_22)))))))) 'asm:lobits))
(let () (begin (set! asm:hibits (lambda (_m_1 _n_1) (let ((_asm:hibits_2 0)) (begin (set! _asm:hibits_2 (lambda (_m_3 _n_3) (asm:rshl _m_3 (- 32 (remainder _n_3 33))))) (_asm:hibits_2 _m_1 _n_1))))) 'asm:hibits))
(let () (begin (set! asm:fits? (let ((_v_3 (make-vector 33 '()))) (begin (let () (let ((_loop_5_7_10 (unspecified))) (begin (set! _loop_5_7_10 (lambda (_i_11) (if (= _i_11 33) (if #f #f (unspecified)) (begin (begin #t (let ((_v_14_17 _v_3) (_i_14_17 _i_11) (_x_14_17 (expt 2 _i_11))) (begin (_check! (fixnum? _i_14_17) 41 _v_14_17 _i_14_17 _x_14_17) (_check! (vector? _v_14_17) 41 _v_14_17 _i_14_17 _x_14_17) (_check! (<:fix:fix _i_14_17 (vector-length:vec _v_14_17)) 41 _v_14_17 _i_14_17 _x_14_17) (_check! (>=:fix:fix _i_14_17 0) 41 _v_14_17 _i_14_17 _x_14_17) (vector-set!:trusted _v_14_17 _i_14_17 _x_14_17)))) (_loop_5_7_10 (+ _i_11 1)))))) (_loop_5_7_10 0)))) (lambda (_m_18 _n_18) (let ((_t_19_22 _m_18)) (if (<= (- 0 (let ((_v_25_28 _v_3) (_i_25_28 (- _n_18 1))) (begin (_check! (fixnum? _i_25_28) 40 _v_25_28 _i_25_28) (_check! (vector? _v_25_28) 40 _v_25_28 _i_25_28) (_check! (<:fix:fix _i_25_28 (vector-length:vec _v_25_28)) 40 _v_25_28 _i_25_28) (_check! (>=:fix:fix _i_25_28 0) 40 _v_25_28 _i_25_28) (vector-ref:trusted _v_25_28 _i_25_28)))) _t_19_22) (<= _t_19_22 (- (let ((_v_30_33 _v_3) (_i_30_33 (- _n_18 1))) (begin (_check! (fixnum? _i_30_33) 40 _v_30_33 _i_30_33) (_check! (vector? _v_30_33) 40 _v_30_33 _i_30_33) (_check! (<:fix:fix _i_30_33 (vector-length:vec _v_30_33)) 40 _v_30_33 _i_30_33) (_check! (>=:fix:fix _i_30_33 0) 40 _v_30_33 _i_30_33) (vector-ref:trusted _v_30_33 _i_30_33))) 1)) #f)))))) 'asm:fits?))
(let () (begin (set! asm:fits-unsigned? (let ((_v_3 (make-vector 33 '()))) (begin (let () (let ((_loop_5_7_10 (unspecified))) (begin (set! _loop_5_7_10 (lambda (_i_11) (if (= _i_11 33) (if #f #f (unspecified)) (begin (begin #t (let ((_v_14_17 _v_3) (_i_14_17 _i_11) (_x_14_17 (expt 2 _i_11))) (begin (_check! (fixnum? _i_14_17) 41 _v_14_17 _i_14_17 _x_14_17) (_check! (vector? _v_14_17) 41 _v_14_17 _i_14_17 _x_14_17) (_check! (<:fix:fix _i_14_17 (vector-length:vec _v_14_17)) 41 _v_14_17 _i_14_17 _x_14_17) (_check! (>=:fix:fix _i_14_17 0) 41 _v_14_17 _i_14_17 _x_14_17) (vector-set!:trusted _v_14_17 _i_14_17 _x_14_17)))) (_loop_5_7_10 (+ _i_11 1)))))) (_loop_5_7_10 0)))) (lambda (_m_18 _n_18) (let ((_t_19_22 _m_18)) (if (<= 0 _t_19_22) (<= _t_19_22 (- (let ((_v_25_28 _v_3) (_i_25_28 _n_18)) (begin (_check! (fixnum? _i_25_28) 40 _v_25_28 _i_25_28) (_check! (vector? _v_25_28) 40 _v_25_28 _i_25_28) (_check! (<:fix:fix _i_25_28 (vector-length:vec _v_25_28)) 40 _v_25_28 _i_25_28) (_check! (>=:fix:fix _i_25_28 0) 40 _v_25_28 _i_25_28) (vector-ref:trusted _v_25_28 _i_25_28))) 1)) #f)))))) 'asm:fits-unsigned?))
(let () (begin (set! asm:add (lambda (_a_1 _b_1) (let ((_asm:add_2 0)) (begin (set! _asm:add_2 (lambda (_a_3 _b_3) (asm:int->bv (+ (if (bytevector? _a_3) (asm:bv->int _a_3) _a_3) (if (bytevector? _b_3) (asm:bv->int _b_3) _b_3))))) (_asm:add_2 _a_1 _b_1))))) 'asm:add))
(let () (begin (set! asm:signed (lambda (_n_1) (let ((_asm:signed_2 0)) (begin (set! _asm:signed_2 (lambda (_n_3) (if (< _n_3 2147483647) _n_3 (- _n_3 4294967296)))) (_asm:signed_2 _n_1))))) 'asm:signed))
(let () (begin (set! asm:print-bv (lambda (_bv_1) (let ((_asm:print-bv_2 0)) (begin (set! _asm:print-bv_2 (lambda (_bv_3) (let ((_pdig_4 (unspecified)) (_hex_4 (unspecified))) (begin (set! _pdig_4 (lambda (_k_5) (begin (display (string-ref _hex_4 (quotient _k_5 16))) (display (string-ref _hex_4 (remainder _k_5 16))) (display " ")))) (set! _hex_4 "0123456789abcdef") (if (eq? asm:endianness 'little) (let () (let ((_loop_7_9_12 (unspecified))) (begin (set! _loop_7_9_12 (lambda (_i_13) (if (< _i_13 0) (if #f #f (unspecified)) (begin (begin #t (_pdig_4 (bytevector-ref _bv_3 _i_13))) (_loop_7_9_12 (- _i_13 1)))))) (_loop_7_9_12 3)))) (let () (let ((_loop_17_19_22 (unspecified))) (begin (set! _loop_17_19_22 (lambda (_i_23) (if (= _i_23 4) (if #f #f (unspecified)) (begin (begin #t (_pdig_4 (bytevector-ref _bv_3 _i_23))) (_loop_17_19_22 (+ _i_23 1)))))) (_loop_17_19_22 0))))))))) (_asm:print-bv_2 _bv_1))))) 'asm:print-bv))
(let () (begin (set! dump-fasl-segment-to-port (lambda (_segment_1 _outp_1 _ _rest_1) (let* ((_omit-code?_4 (not (null? _rest_1))) (_controllify_7 (lambda (_char_154) (integer->char (- (char->integer _char_154) 64)))) (_ctrlp_10 (_controllify_7 #\P)) (_ctrlb_13 (_controllify_7 #\B)) (_ctrlg_16 (_controllify_7 #\G)) (_doublequote_19 34) (_backslash_22 92) (_len_25 1024)) (let () (let ((_dump-fasl-segment_29 (unspecified)) (_dump-constvec_29 (unspecified)) (_dump-codevec_29 (unspecified)) (_putd_29 (unspecified)) (_puts_29 (unspecified)) (_putb_29 (unspecified)) (_putc_29 (unspecified)) (_flush_29 (unspecified)) (_ptr_29 (unspecified)) (_buffer_29 (unspecified))) (begin (set! _dump-fasl-segment_29 (lambda (_segment_30) (begin (if (not _omit-code?_4) (_putc_29 #\() (unspecified)) (_putc_29 #\#) (_putc_29 _ctrlp_10) (_putc_29 #\() (_dump-codevec_29 (let ((_x_31_34 _segment_30)) (begin (_check! (pair? _x_31_34) 0 _x_31_34) (car:pair _x_31_34)))) (_putc_29 #\space) (_dump-constvec_29 (let ((_x_35_38 _segment_30)) (begin (_check! (pair? _x_35_38) 1 _x_35_38) (cdr:pair _x_35_38)))) (_puts_29 " #f)") (if (not _omit-code?_4) (_putc_29 #\)) (unspecified)) (_putc_29 #\newline)))) (set! _dump-constvec_29 (lambda (_cv_39) (begin (_puts_29 "#(") (let ((_f_40_43_46 (lambda (_const_66) (begin (_putc_29 #\space) (let ((_temp_67_70 (let ((_x_113_116 _const_66)) (begin (_check! (pair? _x_113_116) 0 _x_113_116) (car:pair _x_113_116))))) (if (memv _temp_67_70 '(data)) (_putd_29 (let ((_x_73_76 (let ((_x_77_80 _const_66)) (begin (_check! (pair? _x_77_80) 1 _x_77_80) (cdr:pair _x_77_80))))) (begin (_check! (pair? _x_73_76) 0 _x_73_76) (car:pair _x_73_76)))) (if (memv _temp_67_70 '(constantvector)) (_dump-constvec_29 (let ((_x_83_86 (let ((_x_87_90 _const_66)) (begin (_check! (pair? _x_87_90) 1 _x_87_90) (cdr:pair _x_87_90))))) (begin (_check! (pair? _x_83_86) 0 _x_83_86) (car:pair _x_83_86)))) (if (memv _temp_67_70 '(codevector)) (_dump-codevec_29 (let ((_x_93_96 (let ((_x_97_100 _const_66)) (begin (_check! (pair? _x_97_100) 1 _x_97_100) (cdr:pair _x_97_100))))) (begin (_check! (pair? _x_93_96) 0 _x_93_96) (car:pair _x_93_96)))) (if (memv _temp_67_70 '(global)) (begin (_putc_29 #\#) (_putc_29 _ctrlg_16) (_putd_29 (let ((_x_103_106 (let ((_x_107_110 _const_66)) (begin (_check! (pair? _x_107_110) 1 _x_107_110) (cdr:pair _x_107_110))))) (begin (_check! (pair? _x_103_106) 0 _x_103_106) (car:pair _x_103_106))))) (if (memv _temp_67_70 '(bits)) (error "BITS attribute is not supported in fasl files_") (error "Faulty _lop file_"))))))))))) (let () (let ((_loop_48_50_53 (unspecified))) (begin (set! _loop_48_50_53 (lambda (_y1_40_41_54) (if (null? _y1_40_41_54) (if #f #f (unspecified)) (begin (begin #t (_f_40_43_46 (let ((_x_58_61 _y1_40_41_54)) (begin (_check! (pair? _x_58_61) 0 _x_58_61) (car:pair _x_58_61))))) (_loop_48_50_53 (let ((_x_62_65 _y1_40_41_54)) (begin (_check! (pair? _x_62_65) 1 _x_62_65) (cdr:pair _x_62_65)))))))) (_loop_48_50_53 (vector->list _cv_39)))))) (_puts_29 ")") (_putc_29 #\newline)))) (set! _dump-codevec_29 (lambda (_bv_117) (if _omit-code?_4 (_puts_29 "#f") (begin (_putc_29 #\#) (_putc_29 _ctrlb_13) (_putc_29 #\") (let ((_limit_120 (bytevector-length _bv_117))) (let () (let ((_loop_121_123_126 (unspecified))) (begin (set! _loop_121_123_126 (lambda (_i_127) (if (= _i_127 _limit_120) (begin (_putc_29 #\") (_putc_29 #\newline)) (begin (begin #t (let ((_c_132 (bytevector-ref _bv_117 _i_127))) (begin (if (= _c_132 _doublequote_19) (_putc_29 #\\) (if (= _c_132 _backslash_22) (_putc_29 #\\) (unspecified))) (_putb_29 _c_132)))) (_loop_121_123_126 (+ _i_127 1)))))) (_loop_121_123_126 0))))))))) (set! _putd_29 (lambda (_d_135) (begin (_flush_29) (write-fasl-datum _d_135 _outp_1)))) (set! _puts_29 (lambda (_s_136) (let ((_ls_139 (string-length _s_136))) (if (>= (+ _ptr_29 _ls_139) _len_25) (begin (_flush_29) (write-bytevector-like _s_136 _outp_1)) (let () (let ((_loop_140_143_146 (unspecified))) (begin (set! _loop_140_143_146 (lambda (_i_147 _p_147) (if (< _i_147 0) (set! _ptr_29 (+ _ptr_29 _ls_139)) (begin (begin #t (string-set! _buffer_29 _p_147 (string-ref _s_136 _i_147))) (_loop_140_143_146 (- _i_147 1) (- _p_147 1)))))) (_loop_140_143_146 (- _ls_139 1) (+ (+ _ptr_29 _ls_139) -1))))))))) (set! _putb_29 (lambda (_b_151) (begin (if (= _ptr_29 _len_25) (_flush_29) (unspecified)) (string-set! _buffer_29 _ptr_29 (integer->char _b_151)) (set! _ptr_29 (+ _ptr_29 1))))) (set! _putc_29 (lambda (_c_152) (begin (if (= _ptr_29 _len_25) (_flush_29) (unspecified)) (string-set! _buffer_29 _ptr_29 _c_152) (set! _ptr_29 (+ _ptr_29 1))))) (set! _flush_29 (lambda () (begin (if (< _ptr_29 _len_25) (write-bytevector-like (substring _buffer_29 0 _ptr_29) _outp_1) (write-bytevector-like _buffer_29 _outp_1)) (set! _ptr_29 0)))) (set! _ptr_29 0) (set! _buffer_29 (make-string _len_25 #\&)) (_dump-fasl-segment_29 _segment_1) (_flush_29))))))) 'dump-fasl-segment-to-port))
(let () (begin (set! generate-global-symbols (make-twobit-flag 'generate-global-symbols)) 'generate-global-symbols))
(let () (generate-global-symbols #t))
(let () (begin (set! heap_version-number 9) 'heap_version-number))
(let () (begin (set! heap_root-names '(result argreg2 argreg3 reg0 reg1 reg2 reg3 reg3 reg5 reg6 reg7 reg8 reg9 reg10 reg11 reg12 reg13 reg14 reg15 reg16 reg17 reg18 reg19 reg20 reg21 reg22 reg23 reg24 reg25 reg26 reg27 reg28 reg29 reg30 reg31 cont startup callouts schcall-arg4 alloci-tmp)) 'heap_root-names))
(let () (begin (set! build-heap-image (lambda (_output-file_1 _input-files_1) (let ((_build-heap-image_2 0)) (begin (set! _build-heap-image_2 (lambda (_output-file_3 _input-files_3) (let ((_process-input-files_4 (unspecified)) (_tmp-file_4 (unspecified))) (begin (set! _process-input-files_4 (lambda (_heap_5) (let ((_files_8 _input-files_3) (_inits_8 '())) (let () (let ((_loop_11 (unspecified))) (begin (set! _loop_11 (lambda (_files_12 _inits_12) (if (null? _files_12) (heap_thunks! _heap_5 (apply append _inits_12)) (let ((_filename_17 (let ((_x_23_26 _files_12)) (begin (_check! (pair? _x_23_26) 0 _x_23_26) (car:pair _x_23_26))))) (begin (display "Loading ") (display _filename_17) (newline) (_loop_11 (let ((_x_18_21 _files_12)) (begin (_check! (pair? _x_18_21) 1 _x_18_21) (cdr:pair _x_18_21))) (append _inits_12 (cons (dump-file! _heap_5 _filename_17) '())))))))) (_loop_11 _files_8 _inits_8))))))) (set! _tmp-file_4 "HEAPDATA_dat") (delete-file _tmp-file_4) (let ((_heap_29 (make-heap #f (open-output-file _tmp-file_4)))) (begin (before-all-files _heap_29 _output-file_3 _input-files_3) (_process-input-files_4 _heap_29) (heap_set-root! _heap_29 'startup (dump-startup-procedure! _heap_29)) (heap_set-root! _heap_29 'callouts (dump-global! _heap_29 'millicode-support)) (write-header _heap_29 _output-file_3) (after-all-files _heap_29 _output-file_3 _input-files_3) (close-output-port (heap_output-port _heap_29)) (append-file-shell-command _tmp-file_4 _output-file_3) (load-map _heap_29) (unspecified))))))) (_build-heap-image_2 _output-file_1 _input-files_1))))) 'build-heap-image))
(let () (begin (set! before-all-files (lambda (_heap_1 _output-file-name_1 _input-file-names_1) (let ((_before-all-files_2 0)) (begin (set! _before-all-files_2 (lambda (_heap_3 _output-file-name_3 _input-file-names_3) #t)) (_before-all-files_2 _heap_1 _output-file-name_1 _input-file-names_1))))) 'before-all-files))
(let () (begin (set! after-all-files (lambda (_heap_1 _output-file-name_1 _input-file-names_1) (let ((_after-all-files_2 0)) (begin (set! _after-all-files_2 (lambda (_heap_3 _output-file-name_3 _input-file-names_3) #t)) (_after-all-files_2 _heap_1 _output-file-name_1 _input-file-names_1))))) 'after-all-files))
(let () (begin (set! make-heap (lambda (_extra_1 _output-port_1) (let ((_make-heap_2 0)) (begin (set! _make-heap_2 (lambda (_extra_3 _output-port_3) (let* ((_t_4_11_16 '()) (_t_4_10_19 _output-port_3) (_t_4_9_22 _extra_3) (_t_4_8_25 (make-heap-symbol-table)) (_t_4_7_28 0) (_t_4_6_31 '()) (_t_4_5_34 heap_version-number) (_v_4_13_37 (make-vector 7 _t_4_11_16))) (let () (begin (let ((_v_41_44 _v_4_13_37) (_i_41_44 5) (_x_41_44 _t_4_10_19)) (begin (_check! (fixnum? _i_41_44) 41 _v_41_44 _i_41_44 _x_41_44) (_check! (vector? _v_41_44) 41 _v_41_44 _i_41_44 _x_41_44) (_check! (<:fix:fix _i_41_44 (vector-length:vec _v_41_44)) 41 _v_41_44 _i_41_44 _x_41_44) (_check! (>=:fix:fix _i_41_44 0) 41 _v_41_44 _i_41_44 _x_41_44) (vector-set!:trusted _v_41_44 _i_41_44 _x_41_44))) (let ((_v_45_48 _v_4_13_37) (_i_45_48 4) (_x_45_48 _t_4_9_22)) (begin (_check! (fixnum? _i_45_48) 41 _v_45_48 _i_45_48 _x_45_48) (_check! (vector? _v_45_48) 41 _v_45_48 _i_45_48 _x_45_48) (_check! (<:fix:fix _i_45_48 (vector-length:vec _v_45_48)) 41 _v_45_48 _i_45_48 _x_45_48) (_check! (>=:fix:fix _i_45_48 0) 41 _v_45_48 _i_45_48 _x_45_48) (vector-set!:trusted _v_45_48 _i_45_48 _x_45_48))) (let ((_v_49_52 _v_4_13_37) (_i_49_52 3) (_x_49_52 _t_4_8_25)) (begin (_check! (fixnum? _i_49_52) 41 _v_49_52 _i_49_52 _x_49_52) (_check! (vector? _v_49_52) 41 _v_49_52 _i_49_52 _x_49_52) (_check! (<:fix:fix _i_49_52 (vector-length:vec _v_49_52)) 41 _v_49_52 _i_49_52 _x_49_52) (_check! (>=:fix:fix _i_49_52 0) 41 _v_49_52 _i_49_52 _x_49_52) (vector-set!:trusted _v_49_52 _i_49_52 _x_49_52))) (let ((_v_53_56 _v_4_13_37) (_i_53_56 2) (_x_53_56 _t_4_7_28)) (begin (_check! (fixnum? _i_53_56) 41 _v_53_56 _i_53_56 _x_53_56) (_check! (vector? _v_53_56) 41 _v_53_56 _i_53_56 _x_53_56) (_check! (<:fix:fix _i_53_56 (vector-length:vec _v_53_56)) 41 _v_53_56 _i_53_56 _x_53_56) (_check! (>=:fix:fix _i_53_56 0) 41 _v_53_56 _i_53_56 _x_53_56) (vector-set!:trusted _v_53_56 _i_53_56 _x_53_56))) (let ((_v_57_60 _v_4_13_37) (_i_57_60 1) (_x_57_60 _t_4_6_31)) (begin (_check! (fixnum? _i_57_60) 41 _v_57_60 _i_57_60 _x_57_60) (_check! (vector? _v_57_60) 41 _v_57_60 _i_57_60 _x_57_60) (_check! (<:fix:fix _i_57_60 (vector-length:vec _v_57_60)) 41 _v_57_60 _i_57_60 _x_57_60) (_check! (>=:fix:fix _i_57_60 0) 41 _v_57_60 _i_57_60 _x_57_60) (vector-set!:trusted _v_57_60 _i_57_60 _x_57_60))) (let ((_v_61_64 _v_4_13_37) (_i_61_64 0) (_x_61_64 _t_4_5_34)) (begin (_check! (fixnum? _i_61_64) 41 _v_61_64 _i_61_64 _x_61_64) (_check! (vector? _v_61_64) 41 _v_61_64 _i_61_64 _x_61_64) (_check! (<:fix:fix _i_61_64 (vector-length:vec _v_61_64)) 41 _v_61_64 _i_61_64 _x_61_64) (_check! (>=:fix:fix _i_61_64 0) 41 _v_61_64 _i_61_64 _x_61_64) (vector-set!:trusted _v_61_64 _i_61_64 _x_61_64))) _v_4_13_37))))) (_make-heap_2 _extra_1 _output-port_1))))) 'make-heap))
(let () (begin (set! heap_version (lambda (_h_1) (let ((_heap_version_2 0)) (begin (set! _heap_version_2 (lambda (_h_3) (let ((_v_4_7 _h_3) (_i_4_7 0)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_heap_version_2 _h_1))))) 'heap_version))
(let () (begin (set! heap_roots (lambda (_h_1) (let ((_heap_roots_2 0)) (begin (set! _heap_roots_2 (lambda (_h_3) (let ((_v_4_7 _h_3) (_i_4_7 1)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_heap_roots_2 _h_1))))) 'heap_roots))
(let () (begin (set! heap_top (lambda (_h_1) (let ((_heap_top_2 0)) (begin (set! _heap_top_2 (lambda (_h_3) (let ((_v_4_7 _h_3) (_i_4_7 2)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_heap_top_2 _h_1))))) 'heap_top))
(let () (begin (set! heap_symbol-table (lambda (_h_1) (let ((_heap_symbol-table_2 0)) (begin (set! _heap_symbol-table_2 (lambda (_h_3) (let ((_v_4_7 _h_3) (_i_4_7 3)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_heap_symbol-table_2 _h_1))))) 'heap_symbol-table))
(let () (begin (set! heap_extra (lambda (_h_1) (let ((_heap_extra_2 0)) (begin (set! _heap_extra_2 (lambda (_h_3) (let ((_v_4_7 _h_3) (_i_4_7 4)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_heap_extra_2 _h_1))))) 'heap_extra))
(let () (begin (set! heap_output-port (lambda (_h_1) (let ((_heap_output-port_2 0)) (begin (set! _heap_output-port_2 (lambda (_h_3) (let ((_v_4_7 _h_3) (_i_4_7 5)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_heap_output-port_2 _h_1))))) 'heap_output-port))
(let () (begin (set! heap_thunks (lambda (_h_1) (let ((_heap_thunks_2 0)) (begin (set! _heap_thunks_2 (lambda (_h_3) (let ((_v_4_7 _h_3) (_i_4_7 6)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_heap_thunks_2 _h_1))))) 'heap_thunks))
(let () (begin (set! heap_roots! (lambda (_h_1 _x_1) (let ((_heap_roots!_2 0)) (begin (set! _heap_roots!_2 (lambda (_h_3 _x_3) (let ((_v_4_7 _h_3) (_i_4_7 1) (_x_4_7 _x_3)) (begin (_check! (fixnum? _i_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (vector? _v_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (>=:fix:fix _i_4_7 0) 41 _v_4_7 _i_4_7 _x_4_7) (vector-set!:trusted _v_4_7 _i_4_7 _x_4_7))))) (_heap_roots!_2 _h_1 _x_1))))) 'heap_roots!))
(let () (begin (set! heap_top! (lambda (_h_1 _x_1) (let ((_heap_top!_2 0)) (begin (set! _heap_top!_2 (lambda (_h_3 _x_3) (let ((_v_4_7 _h_3) (_i_4_7 2) (_x_4_7 _x_3)) (begin (_check! (fixnum? _i_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (vector? _v_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (>=:fix:fix _i_4_7 0) 41 _v_4_7 _i_4_7 _x_4_7) (vector-set!:trusted _v_4_7 _i_4_7 _x_4_7))))) (_heap_top!_2 _h_1 _x_1))))) 'heap_top!))
(let () (begin (set! heap_thunks! (lambda (_h_1 _x_1) (let ((_heap_thunks!_2 0)) (begin (set! _heap_thunks!_2 (lambda (_h_3 _x_3) (let ((_v_4_7 _h_3) (_i_4_7 6) (_x_4_7 _x_3)) (begin (_check! (fixnum? _i_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (vector? _v_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (>=:fix:fix _i_4_7 0) 41 _v_4_7 _i_4_7 _x_4_7) (vector-set!:trusted _v_4_7 _i_4_7 _x_4_7))))) (_heap_thunks!_2 _h_1 _x_1))))) 'heap_thunks!))
(let () (begin (set! make-heap-symbol-table (lambda () (let ((_make-heap-symbol-table_2 0)) (begin (set! _make-heap-symbol-table_2 (lambda () (let* ((_t_4_6_11 0) (_t_4_5_14 '()) (_v_4_8_17 (make-vector 2 _t_4_6_11))) (let () (begin (let ((_v_21_24 _v_4_8_17) (_i_21_24 0) (_x_21_24 _t_4_5_14)) (begin (_check! (fixnum? _i_21_24) 41 _v_21_24 _i_21_24 _x_21_24) (_check! (vector? _v_21_24) 41 _v_21_24 _i_21_24 _x_21_24) (_check! (<:fix:fix _i_21_24 (vector-length:vec _v_21_24)) 41 _v_21_24 _i_21_24 _x_21_24) (_check! (>=:fix:fix _i_21_24 0) 41 _v_21_24 _i_21_24 _x_21_24) (vector-set!:trusted _v_21_24 _i_21_24 _x_21_24))) _v_4_8_17))))) (_make-heap-symbol-table_2))))) 'make-heap-symbol-table))
(let () (begin (set! symtab_symbols (lambda (_st_1) (let ((_symtab_symbols_2 0)) (begin (set! _symtab_symbols_2 (lambda (_st_3) (let ((_v_4_7 _st_3) (_i_4_7 0)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_symtab_symbols_2 _st_1))))) 'symtab_symbols))
(let () (begin (set! symtab_cell-no (lambda (_st_1) (let ((_symtab_cell-no_2 0)) (begin (set! _symtab_cell-no_2 (lambda (_st_3) (let ((_v_4_7 _st_3) (_i_4_7 1)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_symtab_cell-no_2 _st_1))))) 'symtab_cell-no))
(let () (begin (set! symtab_symbols! (lambda (_st_1 _x_1) (let ((_symtab_symbols!_2 0)) (begin (set! _symtab_symbols!_2 (lambda (_st_3 _x_3) (let ((_v_4_7 _st_3) (_i_4_7 0) (_x_4_7 _x_3)) (begin (_check! (fixnum? _i_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (vector? _v_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (>=:fix:fix _i_4_7 0) 41 _v_4_7 _i_4_7 _x_4_7) (vector-set!:trusted _v_4_7 _i_4_7 _x_4_7))))) (_symtab_symbols!_2 _st_1 _x_1))))) 'symtab_symbols!))
(let () (begin (set! symtab_cell-no! (lambda (_st_1 _x_1) (let ((_symtab_cell-no!_2 0)) (begin (set! _symtab_cell-no!_2 (lambda (_st_3 _x_3) (let ((_v_4_7 _st_3) (_i_4_7 1) (_x_4_7 _x_3)) (begin (_check! (fixnum? _i_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (vector? _v_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (>=:fix:fix _i_4_7 0) 41 _v_4_7 _i_4_7 _x_4_7) (vector-set!:trusted _v_4_7 _i_4_7 _x_4_7))))) (_symtab_cell-no!_2 _st_1 _x_1))))) 'symtab_cell-no!))
(let () (begin (set! make-symcell (lambda (_name_1) (let ((_make-symcell_2 0)) (begin (set! _make-symcell_2 (lambda (_name_3) (let* ((_t_4_8_13 '()) (_t_4_7_16 '()) (_t_4_6_19 '()) (_t_4_5_22 _name_3) (_v_4_10_25 (make-vector 4 _t_4_8_13))) (let () (begin (let ((_v_29_32 _v_4_10_25) (_i_29_32 2) (_x_29_32 _t_4_7_16)) (begin (_check! (fixnum? _i_29_32) 41 _v_29_32 _i_29_32 _x_29_32) (_check! (vector? _v_29_32) 41 _v_29_32 _i_29_32 _x_29_32) (_check! (<:fix:fix _i_29_32 (vector-length:vec _v_29_32)) 41 _v_29_32 _i_29_32 _x_29_32) (_check! (>=:fix:fix _i_29_32 0) 41 _v_29_32 _i_29_32 _x_29_32) (vector-set!:trusted _v_29_32 _i_29_32 _x_29_32))) (let ((_v_33_36 _v_4_10_25) (_i_33_36 1) (_x_33_36 _t_4_6_19)) (begin (_check! (fixnum? _i_33_36) 41 _v_33_36 _i_33_36 _x_33_36) (_check! (vector? _v_33_36) 41 _v_33_36 _i_33_36 _x_33_36) (_check! (<:fix:fix _i_33_36 (vector-length:vec _v_33_36)) 41 _v_33_36 _i_33_36 _x_33_36) (_check! (>=:fix:fix _i_33_36 0) 41 _v_33_36 _i_33_36 _x_33_36) (vector-set!:trusted _v_33_36 _i_33_36 _x_33_36))) (let ((_v_37_40 _v_4_10_25) (_i_37_40 0) (_x_37_40 _t_4_5_22)) (begin (_check! (fixnum? _i_37_40) 41 _v_37_40 _i_37_40 _x_37_40) (_check! (vector? _v_37_40) 41 _v_37_40 _i_37_40 _x_37_40) (_check! (<:fix:fix _i_37_40 (vector-length:vec _v_37_40)) 41 _v_37_40 _i_37_40 _x_37_40) (_check! (>=:fix:fix _i_37_40 0) 41 _v_37_40 _i_37_40 _x_37_40) (vector-set!:trusted _v_37_40 _i_37_40 _x_37_40))) _v_4_10_25))))) (_make-symcell_2 _name_1))))) 'make-symcell))
(let () (begin (set! symcell_name (lambda (_sc_1) (let ((_symcell_name_2 0)) (begin (set! _symcell_name_2 (lambda (_sc_3) (let ((_v_4_7 _sc_3) (_i_4_7 0)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_symcell_name_2 _sc_1))))) 'symcell_name))
(let () (begin (set! symcell_symloc (lambda (_sc_1) (let ((_symcell_symloc_2 0)) (begin (set! _symcell_symloc_2 (lambda (_sc_3) (let ((_v_4_7 _sc_3) (_i_4_7 1)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_symcell_symloc_2 _sc_1))))) 'symcell_symloc))
(let () (begin (set! symcell_valloc (lambda (_sc_1) (let ((_symcell_valloc_2 0)) (begin (set! _symcell_valloc_2 (lambda (_sc_3) (let ((_v_4_7 _sc_3) (_i_4_7 2)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_symcell_valloc_2 _sc_1))))) 'symcell_valloc))
(let () (begin (set! symcell_valno (lambda (_sc_1) (let ((_symcell_valno_2 0)) (begin (set! _symcell_valno_2 (lambda (_sc_3) (let ((_v_4_7 _sc_3) (_i_4_7 3)) (begin (_check! (fixnum? _i_4_7) 40 _v_4_7 _i_4_7) (_check! (vector? _v_4_7) 40 _v_4_7 _i_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 40 _v_4_7 _i_4_7) (_check! (>=:fix:fix _i_4_7 0) 40 _v_4_7 _i_4_7) (vector-ref:trusted _v_4_7 _i_4_7))))) (_symcell_valno_2 _sc_1))))) 'symcell_valno))
(let () (begin (set! symcell_symloc! (lambda (_sc_1 _x_1) (let ((_symcell_symloc!_2 0)) (begin (set! _symcell_symloc!_2 (lambda (_sc_3 _x_3) (let ((_v_4_7 _sc_3) (_i_4_7 1) (_x_4_7 _x_3)) (begin (_check! (fixnum? _i_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (vector? _v_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (>=:fix:fix _i_4_7 0) 41 _v_4_7 _i_4_7 _x_4_7) (vector-set!:trusted _v_4_7 _i_4_7 _x_4_7))))) (_symcell_symloc!_2 _sc_1 _x_1))))) 'symcell_symloc!))
(let () (begin (set! symcell_valloc! (lambda (_sc_1 _x_1) (let ((_symcell_valloc!_2 0)) (begin (set! _symcell_valloc!_2 (lambda (_sc_3 _x_3) (let ((_v_4_7 _sc_3) (_i_4_7 2) (_x_4_7 _x_3)) (begin (_check! (fixnum? _i_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (vector? _v_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (>=:fix:fix _i_4_7 0) 41 _v_4_7 _i_4_7 _x_4_7) (vector-set!:trusted _v_4_7 _i_4_7 _x_4_7))))) (_symcell_valloc!_2 _sc_1 _x_1))))) 'symcell_valloc!))
(let () (begin (set! symcell_valno! (lambda (_sc_1 _x_1) (let ((_symcell_valno!_2 0)) (begin (set! _symcell_valno!_2 (lambda (_sc_3 _x_3) (let ((_v_4_7 _sc_3) (_i_4_7 3) (_x_4_7 _x_3)) (begin (_check! (fixnum? _i_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (vector? _v_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (>=:fix:fix _i_4_7 0) 41 _v_4_7 _i_4_7 _x_4_7) (vector-set!:trusted _v_4_7 _i_4_7 _x_4_7))))) (_symcell_valno!_2 _sc_1 _x_1))))) 'symcell_valno!))
(let () (begin (set! symbol-cell (lambda (_h_1 _name_1) (let ((_symbol-cell_2 0)) (begin (set! _symbol-cell_2 (lambda (_h_3 _name_3) (let* ((_symtab_6 (heap_symbol-table _h_3)) (_symbols_9 (symtab_symbols _symtab_6))) (let () (let ((_loop_12 (unspecified))) (begin (set! _loop_12 (lambda (_symbols_13) (if (null? _symbols_13) (let ((_new-sym_17 (make-symcell _name_3))) (begin (symtab_symbols! _symtab_6 (cons _new-sym_17 (symtab_symbols _symtab_6))) _new-sym_17)) (if (eq? _name_3 (symcell_name (let ((_x_19_22 _symbols_13)) (begin (_check! (pair? _x_19_22) 0 _x_19_22) (car:pair _x_19_22))))) (let ((_x_23_26 _symbols_13)) (begin (_check! (pair? _x_23_26) 0 _x_23_26) (car:pair _x_23_26))) (_loop_12 (let ((_x_28_31 _symbols_13)) (begin (_check! (pair? _x_28_31) 1 _x_28_31) (cdr:pair _x_28_31)))))))) (_loop_12 _symbols_9))))))) (_symbol-cell_2 _h_1 _name_1))))) 'symbol-cell))
(let () (begin (set! twofiftysix^3 16777216) 'twofiftysix^3))
(let () (begin (set! twofiftysix^2 65536) 'twofiftysix^2))
(let () (begin (set! twofiftysix 256) 'twofiftysix))
(let () (begin (set! heap_word-be! (lambda (_h_1 _w_1) (let ((_heap_word-be!_2 0)) (begin (set! _heap_word-be!_2 (lambda (_h_3 _w_3) (begin (heap_byte! _h_3 (quotient _w_3 twofiftysix^3)) (heap_byte! _h_3 (quotient (remainder _w_3 twofiftysix^3) twofiftysix^2)) (heap_byte! _h_3 (quotient (remainder _w_3 twofiftysix^2) twofiftysix)) (heap_byte! _h_3 (remainder _w_3 twofiftysix))))) (_heap_word-be!_2 _h_1 _w_1))))) 'heap_word-be!))
(let () (begin (set! heap_word-el! (lambda (_h_1 _w_1) (let ((_heap_word-el!_2 0)) (begin (set! _heap_word-el!_2 (lambda (_h_3 _w_3) (begin (heap_byte! _h_3 (remainder _w_3 twofiftysix)) (heap_byte! _h_3 (quotient (remainder _w_3 twofiftysix^2) twofiftysix)) (heap_byte! _h_3 (quotient (remainder _w_3 twofiftysix^3) twofiftysix^2)) (heap_byte! _h_3 (quotient _w_3 twofiftysix^3))))) (_heap_word-el!_2 _h_1 _w_1))))) 'heap_word-el!))
(let () (begin (set! heap_word! heap_word-be!) 'heap_word!))
(let () (begin (set! dumpheap_set-endianness! (lambda (_which_1) (let ((_dumpheap_set-endianness!_2 0)) (begin (set! _dumpheap_set-endianness!_2 (lambda (_which_3) (let ((_temp_4_7 _which_3)) (if (memv _temp_4_7 '(big)) (set! heap_word! heap_word-be!) (if (memv _temp_4_7 '(little)) (set! heap_word! heap_word-el!) ???))))) (_dumpheap_set-endianness!_2 _which_1))))) 'dumpheap_set-endianness!))
(let () (begin (set! heap_byte! (lambda (_h_1 _b_1) (let ((_heap_byte!_2 0)) (begin (set! _heap_byte!_2 (lambda (_h_3 _b_3) (begin (write-char (integer->char _b_3) (heap_output-port _h_3)) (heap_top! _h_3 (+ 1 (heap_top _h_3)))))) (_heap_byte!_2 _h_1 _b_1))))) 'heap_byte!))
(let () (begin (set! heap_header-word! (lambda (_h_1 _immediate_1 _length_1) (let ((_heap_header-word!_2 0)) (begin (set! _heap_header-word!_2 (lambda (_h_3 _immediate_3 _length_3) (heap_word! _h_3 (+ (* _length_3 256) _immediate_3)))) (_heap_header-word!_2 _h_1 _immediate_1 _length_1))))) 'heap_header-word!))
(let () (begin (set! heap_adjust! (lambda (_h_1) (let ((_heap_adjust!_2 0)) (begin (set! _heap_adjust!_2 (lambda (_h_3) (let* ((_p_6 (heap_top _h_3)) (_i_9 (- (* 8 (quotient (+ _p_6 7) 8)) _p_6))) (let () (let ((_loop_12 (unspecified))) (begin (set! _loop_12 (lambda (_i_13) (if (zero? _i_13) '() (begin (heap_byte! _h_3 0) (_loop_12 (- _i_13 1)))))) (_loop_12 _i_9))))))) (_heap_adjust!_2 _h_1))))) 'heap_adjust!))
(let () (begin (set! heap_largest-fixnum (- (expt 2 29) 1)) 'heap_largest-fixnum))
(let () (begin (set! heap_smallest-fixnum (- 0 (expt 2 29))) 'heap_smallest-fixnum))
(let () (begin (set! heap_set-root! (lambda (_h_1 _name_1 _value_1) (let ((_heap_set-root!_2 0)) (begin (set! _heap_set-root!_2 (lambda (_h_3 _name_3 _value_3) (heap_roots! _h_3 (cons (cons _name_3 _value_3) (heap_roots _h_3))))) (_heap_set-root!_2 _h_1 _name_1 _value_1))))) 'heap_set-root!))
(let () (begin (set! segment_code car) 'segment_code))
(let () (begin (set! segment_constants cdr) 'segment_constants))
(let () (begin (set! dump-file! (lambda (_h_1 _filename_1) (let ((_dump-file!_2 0)) (begin (set! _dump-file!_2 (lambda (_h_3 _filename_3) (begin (before-dump-file _h_3 _filename_3) (call-with-input-file _filename_3 (lambda (_in_4) (let () (let ((_loop_5_8_11 (unspecified))) (begin (set! _loop_5_8_11 (lambda (_segment_12 _thunks_12) (if (eof-object? _segment_12) (begin (after-dump-file _h_3 _filename_3) (reverse _thunks_12)) (begin #t (_loop_5_8_11 (read _in_4) (cons (dump-segment! _h_3 _segment_12) _thunks_12)))))) (_loop_5_8_11 (read _in_4) '()))))))))) (_dump-file!_2 _h_1 _filename_1))))) 'dump-file!))
(let () (begin (set! before-dump-file (lambda (_h_1 _filename_1) (let ((_before-dump-file_2 0)) (begin (set! _before-dump-file_2 (lambda (_h_3 _filename_3) #t)) (_before-dump-file_2 _h_1 _filename_1))))) 'before-dump-file))
(let () (begin (set! after-dump-file (lambda (_h_1 _filename_1) (let ((_after-dump-file_2 0)) (begin (set! _after-dump-file_2 (lambda (_h_3 _filename_3) #t)) (_after-dump-file_2 _h_1 _filename_1))))) 'after-dump-file))
(let () (begin (set! dump-segment! (lambda (_h_1 _segment_1) (let ((_dump-segment!_2 0)) (begin (set! _dump-segment!_2 (lambda (_h_3 _segment_3) (let* ((_the-code_6 (dump-codevector! _h_3 (segment_code _segment_3))) (_the-consts_9 (dump-constantvector! _h_3 (segment_constants _segment_3)))) (let () (dump-thunk! _h_3 _the-code_6 _the-consts_9))))) (_dump-segment!_2 _h_1 _segment_1))))) 'dump-segment!))
(let () (begin (set! dump-tagged-item! (lambda (_h_1 _item_1) (let ((_dump-tagged-item!_2 0)) (begin (set! _dump-tagged-item!_2 (lambda (_h_3 _item_3) (let ((_temp_4_7 (let ((_x_59_62 _item_3)) (begin (_check! (pair? _x_59_62) 0 _x_59_62) (car:pair _x_59_62))))) (if (memv _temp_4_7 '(codevector)) (dump-codevector! _h_3 (let ((_x_10_13 (let ((_x_14_17 _item_3)) (begin (_check! (pair? _x_14_17) 1 _x_14_17) (cdr:pair _x_14_17))))) (begin (_check! (pair? _x_10_13) 0 _x_10_13) (car:pair _x_10_13)))) (if (memv _temp_4_7 '(constantvector)) (dump-constantvector! _h_3 (let ((_x_20_23 (let ((_x_24_27 _item_3)) (begin (_check! (pair? _x_24_27) 1 _x_24_27) (cdr:pair _x_24_27))))) (begin (_check! (pair? _x_20_23) 0 _x_20_23) (car:pair _x_20_23)))) (if (memv _temp_4_7 '(data)) (dump-datum! _h_3 (let ((_x_30_33 (let ((_x_34_37 _item_3)) (begin (_check! (pair? _x_34_37) 1 _x_34_37) (cdr:pair _x_34_37))))) (begin (_check! (pair? _x_30_33) 0 _x_30_33) (car:pair _x_30_33)))) (if (memv _temp_4_7 '(global)) (dump-global! _h_3 (let ((_x_40_43 (let ((_x_44_47 _item_3)) (begin (_check! (pair? _x_44_47) 1 _x_44_47) (cdr:pair _x_44_47))))) (begin (_check! (pair? _x_40_43) 0 _x_40_43) (car:pair _x_40_43)))) (if (memv _temp_4_7 '(bits)) (let ((_x_50_53 (let ((_x_54_57 _item_3)) (begin (_check! (pair? _x_54_57) 1 _x_54_57) (cdr:pair _x_54_57))))) (begin (_check! (pair? _x_50_53) 0 _x_50_53) (car:pair _x_50_53))) (error 'dump-tagged-item! "Unknown item ~a" _item_3))))))))) (_dump-tagged-item!_2 _h_1 _item_1))))) 'dump-tagged-item!))
(let () (begin (set! dump-datum! (lambda (_h_1 _datum_1) (let ((_dump-datum!_2 0)) (begin (set! _dump-datum!_2 (lambda (_h_3 _datum_3) (let ((_rectnum?_5 (unspecified)) (_compnum?_5 (unspecified)) (_flonum?_5 (unspecified)) (_ratnum?_5 (unspecified)) (_bignum?_5 (unspecified)) (_fixnum?_5 (unspecified))) (begin (set! _rectnum?_5 (lambda (_x_6) (if (complex? _x_6) (if (exact? _x_6) (not (real? _x_6)) #f) #f))) (set! _compnum?_5 (lambda (_x_10) (if (complex? _x_10) (if (inexact? _x_10) (not (real? _x_10)) #f) #f))) (set! _flonum?_5 (lambda (_x_14) (if (real? _x_14) (inexact? _x_14) #f))) (set! _ratnum?_5 (lambda (_x_17) (if (rational? _x_17) (if (exact? _x_17) (not (integer? _x_17)) #f) #f))) (set! _bignum?_5 (lambda (_x_21) (if (integer? _x_21) (if (exact? _x_21) (let ((_temp_25_28 (> _x_21 heap_largest-fixnum))) (if _temp_25_28 _temp_25_28 (< _x_21 heap_smallest-fixnum))) #f) #f))) (set! _fixnum?_5 (lambda (_x_30) (if (integer? _x_30) (if (exact? _x_30) (let ((_t_34_37 _x_30)) (if (<= heap_smallest-fixnum _t_34_37) (<= _t_34_37 heap_largest-fixnum) #f)) #f) #f))) (if (_fixnum?_5 _datum_3) (dump-fixnum! _h_3 _datum_3) (if (_bignum?_5 _datum_3) (dump-bignum! _h_3 _datum_3) (if (_ratnum?_5 _datum_3) (dump-ratnum! _h_3 _datum_3) (if (_flonum?_5 _datum_3) (dump-flonum! _h_3 _datum_3) (if (_compnum?_5 _datum_3) (dump-compnum! _h_3 _datum_3) (if (_rectnum?_5 _datum_3) (dump-rectnum! _h_3 _datum_3) (if (char? _datum_3) (dump-char! _h_3 _datum_3) (if (null? _datum_3) $imm_null (if (eq? _datum_3 #t) $imm_true (if (eq? _datum_3 #f) $imm_false (if (equal? _datum_3 (unspecified)) $imm_unspecified (if (equal? _datum_3 (undefined)) $imm_undefined (if (vector? _datum_3) (dump-vector! _h_3 _datum_3 $tag_vector-typetag) (if (bytevector? _datum_3) (dump-bytevector! _h_3 _datum_3 $tag_bytevector-typetag) (if (pair? _datum_3) (dump-pair! _h_3 _datum_3) (if (string? _datum_3) (dump-string! _h_3 _datum_3) (if (symbol? _datum_3) (dump-symbol! _h_3 _datum_3) (error 'dump-datum! "Unsupported type of datum ~a" _datum_3)))))))))))))))))))))) (_dump-datum!_2 _h_1 _datum_1))))) 'dump-datum!))
(let () (begin (set! dump-fixnum! (lambda (_h_1 _f_1) (let ((_dump-fixnum!_2 0)) (begin (set! _dump-fixnum!_2 (lambda (_h_3 _f_3) (if (< _f_3 0) (- 4294967296 (* (let ((_temp_5_8 _f_3)) (if (< _temp_5_8 0) (_-- _temp_5_8) _temp_5_8)) 4)) (* 4 _f_3)))) (_dump-fixnum!_2 _h_1 _f_1))))) 'dump-fixnum!))
(let () (begin (set! dump-char! (lambda (_h_1 _c_1) (let ((_dump-char!_2 0)) (begin (set! _dump-char!_2 (lambda (_h_3 _c_3) (+ (* (char->integer _c_3) twofiftysix^2) $imm_character))) (_dump-char!_2 _h_1 _c_1))))) 'dump-char!))
(let () (begin (set! dump-bignum! (lambda (_h_1 _b_1) (let ((_dump-bignum!_2 0)) (begin (set! _dump-bignum!_2 (lambda (_h_3 _b_3) (dump-bytevector! _h_3 (bignum->bytevector _b_3) $tag_bignum-typetag))) (_dump-bignum!_2 _h_1 _b_1))))) 'dump-bignum!))
(let () (begin (set! dump-ratnum! (lambda (_h_1 _r_1) (let ((_dump-ratnum!_2 0)) (begin (set! _dump-ratnum!_2 (lambda (_h_3 _r_3) (dump-vector! _h_3 (let* ((_t_4_6_11 (denominator _r_3)) (_t_4_5_14 (numerator _r_3)) (_v_4_8_17 (make-vector 2 _t_4_6_11))) (let () (begin (let ((_v_21_24 _v_4_8_17) (_i_21_24 0) (_x_21_24 _t_4_5_14)) (begin (_check! (fixnum? _i_21_24) 41 _v_21_24 _i_21_24 _x_21_24) (_check! (vector? _v_21_24) 41 _v_21_24 _i_21_24 _x_21_24) (_check! (<:fix:fix _i_21_24 (vector-length:vec _v_21_24)) 41 _v_21_24 _i_21_24 _x_21_24) (_check! (>=:fix:fix _i_21_24 0) 41 _v_21_24 _i_21_24 _x_21_24) (vector-set!:trusted _v_21_24 _i_21_24 _x_21_24))) _v_4_8_17))) $tag_ratnum-typetag))) (_dump-ratnum!_2 _h_1 _r_1))))) 'dump-ratnum!))
(let () (begin (set! dump-flonum! (lambda (_h_1 _f_1) (let ((_dump-flonum!_2 0)) (begin (set! _dump-flonum!_2 (lambda (_h_3 _f_3) (dump-bytevector! _h_3 (flonum->bytevector _f_3) $tag_flonum-typetag))) (_dump-flonum!_2 _h_1 _f_1))))) 'dump-flonum!))
(let () (begin (set! dump-compnum! (lambda (_h_1 _c_1) (let ((_dump-compnum!_2 0)) (begin (set! _dump-compnum!_2 (lambda (_h_3 _c_3) (dump-bytevector! _h_3 (compnum->bytevector _c_3) $tag_compnum-typetag))) (_dump-compnum!_2 _h_1 _c_1))))) 'dump-compnum!))
(let () (begin (set! dump-rectnum! (lambda (_h_1 _r_1) (let ((_dump-rectnum!_2 0)) (begin (set! _dump-rectnum!_2 (lambda (_h_3 _r_3) (dump-vector! _h_3 (let* ((_t_4_6_11 (imag-part _r_3)) (_t_4_5_14 (real-part _r_3)) (_v_4_8_17 (make-vector 2 _t_4_6_11))) (let () (begin (let ((_v_21_24 _v_4_8_17) (_i_21_24 0) (_x_21_24 _t_4_5_14)) (begin (_check! (fixnum? _i_21_24) 41 _v_21_24 _i_21_24 _x_21_24) (_check! (vector? _v_21_24) 41 _v_21_24 _i_21_24 _x_21_24) (_check! (<:fix:fix _i_21_24 (vector-length:vec _v_21_24)) 41 _v_21_24 _i_21_24 _x_21_24) (_check! (>=:fix:fix _i_21_24 0) 41 _v_21_24 _i_21_24 _x_21_24) (vector-set!:trusted _v_21_24 _i_21_24 _x_21_24))) _v_4_8_17))) $tag_rectnum-typetag))) (_dump-rectnum!_2 _h_1 _r_1))))) 'dump-rectnum!))
(let () (begin (set! dump-string! (lambda (_h_1 _s_1) (let ((_dump-string!_2 0)) (begin (set! _dump-string!_2 (lambda (_h_3 _s_3) (dump-bytevector! _h_3 (string->bytevector _s_3) $tag_string-typetag))) (_dump-string!_2 _h_1 _s_1))))) 'dump-string!))
(let () (begin (set! dump-pair! (lambda (_h_1 _p_1) (let ((_dump-pair!_2 0)) (begin (set! _dump-pair!_2 (lambda (_h_3 _p_3) (let ((_the-car_6 (dump-datum! _h_3 (let ((_x_10_13 _p_3)) (begin (_check! (pair? _x_10_13) 0 _x_10_13) (car:pair _x_10_13))))) (_the-cdr_6 (dump-datum! _h_3 (let ((_x_14_17 _p_3)) (begin (_check! (pair? _x_14_17) 1 _x_14_17) (cdr:pair _x_14_17)))))) (let ((_base_9 (heap_top _h_3))) (begin (heap_word! _h_3 _the-car_6) (heap_word! _h_3 _the-cdr_6) (+ _base_9 $tag_pair-tag)))))) (_dump-pair!_2 _h_1 _p_1))))) 'dump-pair!))
(let () (begin (set! dump-bytevector! (lambda (_h_1 _bv_1 _variation_1) (let ((_dump-bytevector!_2 0)) (begin (set! _dump-bytevector!_2 (lambda (_h_3 _bv_3 _variation_3) (let ((_base_6 (heap_top _h_3)) (_l_6 (bytevector-length _bv_3))) (begin (heap_header-word! _h_3 (+ $imm_bytevector-header _variation_3) _l_6) (let ((_i_9 0)) (let () (let ((_loop_12 (unspecified))) (begin (set! _loop_12 (lambda (_i_13) (if (< _i_13 _l_6) (begin (heap_byte! _h_3 (bytevector-ref _bv_3 _i_13)) (_loop_12 (+ _i_13 1))) (begin (heap_adjust! _h_3) (+ _base_6 $tag_bytevector-tag))))) (_loop_12 _i_9))))))))) (_dump-bytevector!_2 _h_1 _bv_1 _variation_1))))) 'dump-bytevector!))
(let () (begin (set! dump-vector! (lambda (_h_1 _v_1 _variation_1) (let ((_dump-vector!_2 0)) (begin (set! _dump-vector!_2 (lambda (_h_3 _v_3 _variation_3) (dump-vector-like! _h_3 _v_3 dump-datum! _variation_3))) (_dump-vector!_2 _h_1 _v_1 _variation_1))))) 'dump-vector!))
(let () (begin (set! dump-vector-like! (lambda (_h_1 _cv_1 _recur!_1 _variation_1) (let ((_dump-vector-like!_2 0)) (begin (set! _dump-vector-like!_2 (lambda (_h_3 _cv_3 _recur!_3 _variation_3) (let* ((_l_6 (let ((_v_42_45 _cv_3)) (begin (_check! (vector? _v_42_45) 42 _v_42_45) (vector-length:vec _v_42_45)))) (_v_9 (make-vector _l_6 '()))) (let () (let ((_i_15 0)) (let () (let ((_loop_18 (unspecified))) (begin (set! _loop_18 (lambda (_i_19) (if (< _i_19 _l_6) (begin (let ((_v_20_23 _v_9) (_i_20_23 _i_19) (_x_20_23 (_recur!_3 _h_3 (let ((_v_24_27 _cv_3) (_i_24_27 _i_19)) (begin (_check! (fixnum? _i_24_27) 40 _v_24_27 _i_24_27) (_check! (vector? _v_24_27) 40 _v_24_27 _i_24_27) (_check! (<:fix:fix _i_24_27 (vector-length:vec _v_24_27)) 40 _v_24_27 _i_24_27) (_check! (>=:fix:fix _i_24_27 0) 40 _v_24_27 _i_24_27) (vector-ref:trusted _v_24_27 _i_24_27)))))) (begin (_check! (fixnum? _i_20_23) 41 _v_20_23 _i_20_23 _x_20_23) (_check! (vector? _v_20_23) 41 _v_20_23 _i_20_23 _x_20_23) (_check! (<:fix:fix _i_20_23 (vector-length:vec _v_20_23)) 41 _v_20_23 _i_20_23 _x_20_23) (_check! (>=:fix:fix _i_20_23 0) 41 _v_20_23 _i_20_23 _x_20_23) (vector-set!:trusted _v_20_23 _i_20_23 _x_20_23))) (_loop_18 (+ _i_19 1))) (let ((_base_30 (heap_top _h_3))) (begin (heap_header-word! _h_3 (+ $imm_vector-header _variation_3) (* _l_6 4)) (let ((_i_33 0)) (let () (let ((_loop_36 (unspecified))) (begin (set! _loop_36 (lambda (_i_37) (if (< _i_37 _l_6) (begin (heap_word! _h_3 (let ((_v_38_41 _v_9) (_i_38_41 _i_37)) (begin (_check! (fixnum? _i_38_41) 40 _v_38_41 _i_38_41) (_check! (vector? _v_38_41) 40 _v_38_41 _i_38_41) (_check! (<:fix:fix _i_38_41 (vector-length:vec _v_38_41)) 40 _v_38_41 _i_38_41) (_check! (>=:fix:fix _i_38_41 0) 40 _v_38_41 _i_38_41) (vector-ref:trusted _v_38_41 _i_38_41)))) (_loop_36 (+ _i_37 1))) (begin (heap_adjust! _h_3) (+ _base_30 $tag_vector-tag))))) (_loop_36 _i_33)))))))))) (_loop_18 _i_15))))))))) (_dump-vector-like!_2 _h_1 _cv_1 _recur!_1 _variation_1))))) 'dump-vector-like!))
(let () (begin (set! dump-codevector! (lambda (_h_1 _cv_1) (let ((_dump-codevector!_2 0)) (begin (set! _dump-codevector!_2 (lambda (_h_3 _cv_3) (dump-bytevector! _h_3 _cv_3 $tag_bytevector-typetag))) (_dump-codevector!_2 _h_1 _cv_1))))) 'dump-codevector!))
(let () (begin (set! dump-constantvector! (lambda (_h_1 _cv_1) (let ((_dump-constantvector!_2 0)) (begin (set! _dump-constantvector!_2 (lambda (_h_3 _cv_3) (dump-vector-like! _h_3 _cv_3 dump-tagged-item! $tag_vector-typetag))) (_dump-constantvector!_2 _h_1 _cv_1))))) 'dump-constantvector!))
(let () (begin (set! dump-symbol! (lambda (_h_1 _s_1) (let ((_dump-symbol!_2 0)) (begin (set! _dump-symbol!_2 (lambda (_h_3 _s_3) (let ((_x_6 (symbol-cell _h_3 _s_3))) (begin (if (null? (symcell_symloc _x_6)) (symcell_symloc! _x_6 (create-symbol! _h_3 _s_3)) (unspecified)) (symcell_symloc _x_6))))) (_dump-symbol!_2 _h_1 _s_1))))) 'dump-symbol!))
(let () (begin (set! dump-global! (lambda (_h_1 _g_1) (let ((_dump-global!_2 0)) (begin (set! _dump-global!_2 (lambda (_h_3 _g_3) (let ((_x_6 (symbol-cell _h_3 _g_3))) (begin (if (null? (symcell_valloc _x_6)) (let ((_cell_9 (create-cell! _h_3 _g_3))) (begin (symcell_valloc! _x_6 (let ((_x_10_13 _cell_9)) (begin (_check! (pair? _x_10_13) 0 _x_10_13) (car:pair _x_10_13)))) (symcell_valno! _x_6 (let ((_x_14_17 _cell_9)) (begin (_check! (pair? _x_14_17) 1 _x_14_17) (cdr:pair _x_14_17)))))) (unspecified)) (symcell_valloc _x_6))))) (_dump-global!_2 _h_1 _g_1))))) 'dump-global!))
(let () (begin (set! dump-thunk! (lambda (_h_1 _code_1 _constants_1) (let ((_dump-thunk!_2 0)) (begin (set! _dump-thunk!_2 (lambda (_h_3 _code_3 _constants_3) (let ((_base_6 (heap_top _h_3))) (begin (heap_header-word! _h_3 $imm_procedure-header 8) (heap_word! _h_3 _code_3) (heap_word! _h_3 _constants_3) (heap_adjust! _h_3) (+ _base_6 $tag_procedure-tag))))) (_dump-thunk!_2 _h_1 _code_1 _constants_1))))) 'dump-thunk!))
(let () (begin (set! dump-list-spine! (lambda (_h_1 _l_1) (let ((_dump-list-spine!_2 0)) (begin (set! _dump-list-spine!_2 (lambda (_h_3 _l_3) (if (null? _l_3) $imm_null (let ((_the-car_6 (let ((_x_10_13 _l_3)) (begin (_check! (pair? _x_10_13) 0 _x_10_13) (car:pair _x_10_13)))) (_the-cdr_6 (_dump-list-spine!_2 _h_3 (let ((_x_14_17 _l_3)) (begin (_check! (pair? _x_14_17) 1 _x_14_17) (cdr:pair _x_14_17)))))) (let ((_base_9 (heap_top _h_3))) (begin (heap_word! _h_3 _the-car_6) (heap_word! _h_3 _the-cdr_6) (+ _base_9 $tag_pair-tag))))))) (_dump-list-spine!_2 _h_1 _l_1))))) 'dump-list-spine!))
(let () (begin (set! dump-startup-procedure! (lambda (_h_1) (let ((_dump-startup-procedure!_2 0)) (begin (set! _dump-startup-procedure!_2 (lambda (_h_3) (let ((_thunks_6 (dump-list-spine! _h_3 (heap_thunks _h_3))) (_symbols_6 (dump-list-spine! _h_3 (symbol-locations _h_3)))) (dump-segment! _h_3 (construct-startup-procedure _symbols_6 _thunks_6))))) (_dump-startup-procedure!_2 _h_1))))) 'dump-startup-procedure!))
(let () (begin (set! init-proc (_cons (_cons $_proc '()) (_cons (_cons $args= '(1)) (_cons (_cons $reg '(1)) (_cons (_cons $setreg '(2)) (_cons (_cons $const '((thunks))) (_cons (_cons $setreg '(1)) (_cons (_cons $_label '(0)) (_cons (_cons $reg '(1)) (_cons (_cons $op1 '(null?)) (_cons (_cons $branchf '(2)) (_cons (_cons $const '((symbols))) (_cons (_cons $setreg '(1)) (_cons (_cons $global '(go)) (_cons (_cons $invoke '(2)) (_cons (_cons $_label '(2)) (_cons (_cons $save '(2)) (_cons (_cons $store '(0 0)) (_cons (_cons $store '(1 1)) (_cons (_cons $store '(2 2)) (_cons (_cons $setrtn '(3)) (_cons (_cons $reg '(1)) (_cons (_cons $op1 '(car)) (_cons (_cons $invoke '(0)) (_cons (_cons $_label '(3)) (_cons (_cons $_cont '()) (_cons (_cons $restore '(2)) (_cons (_cons $pop '(2)) (_cons (_cons $reg '(1)) (_cons (_cons $op1 '(cdr)) (_cons (_cons $setreg '(1)) (_cons (_cons $branch '(0)) '())))))))))))))))))))))))))))))))) 'init-proc))
(let () (begin (set! create-symbol! (lambda (_h_1 _s_1) (let ((_create-symbol!_2 0)) (begin (set! _create-symbol!_2 (lambda (_h_3 _s_3) (dump-vector-like! _h_3 (let* ((_t_4_7_12 '(data ())) (_t_4_6_15 '(data 0)) (_t_4_5_18 (_cons 'bits (_cons (dump-string! _h_3 (symbol->string _s_3)) '()))) (_v_4_9_21 (make-vector 3 _t_4_7_12))) (let () (begin (let ((_v_25_28 _v_4_9_21) (_i_25_28 1) (_x_25_28 _t_4_6_15)) (begin (_check! (fixnum? _i_25_28) 41 _v_25_28 _i_25_28 _x_25_28) (_check! (vector? _v_25_28) 41 _v_25_28 _i_25_28 _x_25_28) (_check! (<:fix:fix _i_25_28 (vector-length:vec _v_25_28)) 41 _v_25_28 _i_25_28 _x_25_28) (_check! (>=:fix:fix _i_25_28 0) 41 _v_25_28 _i_25_28 _x_25_28) (vector-set!:trusted _v_25_28 _i_25_28 _x_25_28))) (let ((_v_29_32 _v_4_9_21) (_i_29_32 0) (_x_29_32 _t_4_5_18)) (begin (_check! (fixnum? _i_29_32) 41 _v_29_32 _i_29_32 _x_29_32) (_check! (vector? _v_29_32) 41 _v_29_32 _i_29_32 _x_29_32) (_check! (<:fix:fix _i_29_32 (vector-length:vec _v_29_32)) 41 _v_29_32 _i_29_32 _x_29_32) (_check! (>=:fix:fix _i_29_32 0) 41 _v_29_32 _i_29_32 _x_29_32) (vector-set!:trusted _v_29_32 _i_29_32 _x_29_32))) _v_4_9_21))) dump-tagged-item! $tag_symbol-typetag))) (_create-symbol!_2 _h_1 _s_1))))) 'create-symbol!))
(let () (begin (set! create-cell! (lambda (_h_1 _s_1) (let ((_create-cell!_2 0)) (begin (set! _create-cell!_2 (lambda (_h_3 _s_3) (let* ((_symtab_6 (heap_symbol-table _h_3)) (_n_9 (symtab_cell-no _symtab_6)) (_p_12 (dump-pair! _h_3 (cons (undefined) (if (generate-global-symbols) _s_3 _n_9))))) (let () (begin (symtab_cell-no! _symtab_6 (+ _n_9 1)) (cons _p_12 _n_9)))))) (_create-cell!_2 _h_1 _s_1))))) 'create-cell!))
(let () (begin (set! construct-startup-procedure (lambda (_symbol-list-addr_1 _init-list-addr_1) (let ((_construct-startup-procedure_2 0)) (begin (set! _construct-startup-procedure_2 (lambda (_symbol-list-addr_3 _init-list-addr_3) (let ((_patch-constant-vector!_4 (unspecified))) (begin (set! _patch-constant-vector!_4 (lambda (_v_5 _old_5 _new_5) (let ((_i_8 (- (let ((_v_21_24 _v_5)) (begin (_check! (vector? _v_21_24) 42 _v_21_24) (vector-length:vec _v_21_24))) 1))) (let () (let ((_loop_11 (unspecified))) (begin (set! _loop_11 (lambda (_i_12) (if (>= _i_12 0) (begin (if (equal? (let ((_v_13_16 _v_5) (_i_13_16 _i_12)) (begin (_check! (fixnum? _i_13_16) 40 _v_13_16 _i_13_16) (_check! (vector? _v_13_16) 40 _v_13_16 _i_13_16) (_check! (<:fix:fix _i_13_16 (vector-length:vec _v_13_16)) 40 _v_13_16 _i_13_16) (_check! (>=:fix:fix _i_13_16 0) 40 _v_13_16 _i_13_16) (vector-ref:trusted _v_13_16 _i_13_16))) _old_5) (let ((_v_17_20 _v_5) (_i_17_20 _i_12) (_x_17_20 _new_5)) (begin (_check! (fixnum? _i_17_20) 41 _v_17_20 _i_17_20 _x_17_20) (_check! (vector? _v_17_20) 41 _v_17_20 _i_17_20 _x_17_20) (_check! (<:fix:fix _i_17_20 (vector-length:vec _v_17_20)) 41 _v_17_20 _i_17_20 _x_17_20) (_check! (>=:fix:fix _i_17_20 0) 41 _v_17_20 _i_17_20 _x_17_20) (vector-set!:trusted _v_17_20 _i_17_20 _x_17_20))) (unspecified)) (_loop_11 (- _i_12 1))) (unspecified)))) (_loop_11 _i_8))))))) (display "Assembling final procedure") (newline) (let ((_e_27 (single-stepping))) (begin (single-stepping #f) (let ((_segment_30 (assemble init-proc))) (begin (single-stepping _e_27) (_patch-constant-vector!_4 (segment_constants _segment_30) '(data (thunks)) (_cons 'bits (_cons _init-list-addr_3 '()))) (_patch-constant-vector!_4 (segment_constants _segment_30) '(data (symbols)) (_cons 'bits (_cons _symbol-list-addr_3 '()))) _segment_30)))))))) (_construct-startup-procedure_2 _symbol-list-addr_1 _init-list-addr_1))))) 'construct-startup-procedure))
(let () (begin (set! symbol-locations (lambda (_h_1) (let ((_symbol-locations_2 0)) (begin (set! _symbol-locations_2 (lambda (_h_3) (let ((_symbols_6 (symtab_symbols (heap_symbol-table _h_3))) (_res_6 '())) (let () (let ((_loop_9 (unspecified))) (begin (set! _loop_9 (lambda (_symbols_10 _res_10) (if (null? _symbols_10) (reverse _res_10) (if (not (null? (symcell_symloc (let ((_x_13_16 _symbols_10)) (begin (_check! (pair? _x_13_16) 0 _x_13_16) (car:pair _x_13_16)))))) (_loop_9 (let ((_x_17_20 _symbols_10)) (begin (_check! (pair? _x_17_20) 1 _x_17_20) (cdr:pair _x_17_20))) (cons (symcell_symloc (let ((_x_21_24 _symbols_10)) (begin (_check! (pair? _x_21_24) 0 _x_21_24) (car:pair _x_21_24)))) _res_10)) (_loop_9 (let ((_x_26_29 _symbols_10)) (begin (_check! (pair? _x_26_29) 1 _x_26_29) (cdr:pair _x_26_29))) _res_10))))) (_loop_9 _symbols_6 _res_6))))))) (_symbol-locations_2 _h_1))))) 'symbol-locations))
(let () (begin (set! load-map (lambda (_h_1) (let ((_load-map_2 0)) (begin (set! _load-map_2 (lambda (_h_3) (let ((_symbols_6 (symtab_symbols (heap_symbol-table _h_3))) (_res_6 '())) (let () (let ((_loop_9 (unspecified))) (begin (set! _loop_9 (lambda (_symbols_10 _res_10) (if (null? _symbols_10) (reverse _res_10) (if (not (null? (symcell_valloc (let ((_x_13_16 _symbols_10)) (begin (_check! (pair? _x_13_16) 0 _x_13_16) (car:pair _x_13_16)))))) (_loop_9 (let ((_x_17_20 _symbols_10)) (begin (_check! (pair? _x_17_20) 1 _x_17_20) (cdr:pair _x_17_20))) (cons (cons (symcell_name (let ((_x_21_24 _symbols_10)) (begin (_check! (pair? _x_21_24) 0 _x_21_24) (car:pair _x_21_24)))) (symcell_valno (let ((_x_25_28 _symbols_10)) (begin (_check! (pair? _x_25_28) 0 _x_25_28) (car:pair _x_25_28))))) _res_10)) (_loop_9 (let ((_x_30_33 _symbols_10)) (begin (_check! (pair? _x_30_33) 1 _x_30_33) (cdr:pair _x_30_33))) _res_10))))) (_loop_9 _symbols_6 _res_6))))))) (_load-map_2 _h_1))))) 'load-map))
(let () (begin (set! write-header (lambda (_h_1 _output-file_1) (let ((_write-header_2 0)) (begin (set! _write-header_2 (lambda (_h_3 _output-file_3) (begin (delete-file _output-file_3) (call-with-output-file _output-file_3 (lambda (_out_4) (let ((_write-roots_5 (unspecified)) (_write-word_5 (unspecified))) (begin (set! _write-roots_5 (lambda () (let ((_assigned-roots_9 (heap_roots _h_3))) (let () (let ((_loop_15_17_20 (unspecified))) (begin (set! _loop_15_17_20 (lambda (_y1_10_11_21) (if (null? _y1_10_11_21) (if #f #f (unspecified)) (begin (begin #t (let* ((_root-name_25 (let ((_x_33_36 _y1_10_11_21)) (begin (_check! (pair? _x_33_36) 0 _x_33_36) (car:pair _x_33_36)))) (_probe_28 (assq _root-name_25 _assigned-roots_9))) (if _probe_28 (_write-word_5 (let ((_x_29_32 _probe_28)) (begin (_check! (pair? _x_29_32) 1 _x_29_32) (cdr:pair _x_29_32)))) (_write-word_5 $imm_false)))) (_loop_15_17_20 (let ((_x_37_40 _y1_10_11_21)) (begin (_check! (pair? _x_37_40) 1 _x_37_40) (cdr:pair _x_37_40)))))))) (_loop_15_17_20 heap_root-names))))))) (set! _write-word_5 (lambda (_w_41) (begin (display (integer->char (quotient _w_41 twofiftysix^3)) _out_4) (display (integer->char (quotient (remainder _w_41 twofiftysix^3) twofiftysix^2)) _out_4) (display (integer->char (quotient (remainder _w_41 twofiftysix^2) twofiftysix)) _out_4) (display (integer->char (remainder _w_41 twofiftysix)) _out_4)))) (_write-word_5 heap_version-number) (_write-roots_5) (_write-word_5 (quotient (heap_top _h_3) 4))))))))) (_write-header_2 _h_1 _output-file_1))))) 'write-header))
(let () (begin (set! append-file-shell-command (lambda (_file-to-append_1 _file-to-append-to_1) (let ((_append-file-shell-command_2 0)) (begin (set! _append-file-shell-command_2 (lambda (_file-to-append_3 _file-to-append-to_3) (let ((_message_5 (unspecified))) (begin (set! _message_5 (lambda () (begin (display "You must execute the command") (newline) (display "   cat ") (display _file-to-append_3) (display " >> ") (display _file-to-append-to_3) (newline) (display "to create the final heap image_") (newline)))) (let ((_temp_4_9 host-system)) (if (memv _temp_4_9 '(chez larceny)) (begin (display "Creating final image in \"") (display _file-to-append-to_3) (display "\"___") (newline) (if (zero? (system (string-append "cat " _file-to-append_3 " >> " _file-to-append-to_3))) (delete-file _file-to-append_3) (begin (display "Failed to create image!") (newline)))) (_message_5))))))) (_append-file-shell-command_2 _file-to-append_1 _file-to-append-to_1))))) 'append-file-shell-command))
(let () (begin (set! assembly-table (lambda () (let ((_assembly-table_2 0)) (begin (set! _assembly-table_2 (lambda () $sparc-assembly-table$)) (_assembly-table_2))))) 'assembly-table))
(let () (begin (set! listify? #f) 'listify?))
(let () (begin (set! $sparc-assembly-table$ (make-vector *number-of-mnemonics* (lambda (_instruction_1 _as_1) (asm-error "Unrecognized mnemonic " _instruction_1)))) '$sparc-assembly-table$))
(let () (begin (set! define-instruction (lambda (_i_1 _proc_1) (let ((_define-instruction_2 0)) (begin (set! _define-instruction_2 (lambda (_i_3 _proc_3) (begin (let ((_v_4_7 $sparc-assembly-table$) (_i_4_7 _i_3) (_x_4_7 _proc_3)) (begin (_check! (fixnum? _i_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (vector? _v_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (>=:fix:fix _i_4_7 0) 41 _v_4_7 _i_4_7 _x_4_7) (vector-set!:trusted _v_4_7 _i_4_7 _x_4_7))) #t))) (_define-instruction_2 _i_1 _proc_1))))) 'define-instruction))
(let () (begin (set! list-instruction (lambda (_name_1 _instruction_1) (let ((_list-instruction_2 0)) (begin (set! _list-instruction_2 (lambda (_name_3 _instruction_3) (if listify? (begin (display list-indentation) (display "        ") (display _name_3) (display (make-string (max (- 12 (string-length _name_3)) 1) #\space)) (if (not (null? (let ((_x_4_7 _instruction_3)) (begin (_check! (pair? _x_4_7) 1 _x_4_7) (cdr:pair _x_4_7))))) (begin (write (let ((_x_9_12 (let ((_x_13_16 _instruction_3)) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 0 _x_9_12) (car:pair _x_9_12)))) (let () (let ((_loop_18_20_23 (unspecified))) (begin (set! _loop_18_20_23 (lambda (_operands_24) (if (null? _operands_24) (if #f #f (unspecified)) (begin (begin #t (write-char #\,) (write (let ((_x_27_30 _operands_24)) (begin (_check! (pair? _x_27_30) 0 _x_27_30) (car:pair _x_27_30))))) (_loop_18_20_23 (let ((_x_31_34 _operands_24)) (begin (_check! (pair? _x_31_34) 1 _x_31_34) (cdr:pair _x_31_34)))))))) (_loop_18_20_23 (let ((_x_36_39 (let ((_x_40_43 _instruction_3)) (begin (_check! (pair? _x_40_43) 1 _x_40_43) (cdr:pair _x_40_43))))) (begin (_check! (pair? _x_36_39) 1 _x_36_39) (cdr:pair _x_36_39)))))))) (unspecified)) (newline) (flush-output-port)) (unspecified)))) (_list-instruction_2 _name_1 _instruction_1))))) 'list-instruction))
(let () (begin (set! list-label (lambda (_instruction_1) (let ((_list-label_2 0)) (begin (set! _list-label_2 (lambda (_instruction_3) (if listify? (begin (display list-indentation) (write-char #\L) (write (let ((_x_5_8 (let ((_x_9_12 _instruction_3)) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8)))) (newline)) (unspecified)))) (_list-label_2 _instruction_1))))) 'list-label))
(let () (begin (set! list-lambda-start (lambda (_instruction_1) (let ((_list-lambda-start_2 0)) (begin (set! _list-lambda-start_2 (lambda (_instruction_3) (begin (list-instruction "lambda" (let* ((_t1_4_7 $lambda) (_t2_4_10 (let* ((_t1_14_17 '*) (_t2_14_20 (cons (operand2 _instruction_3) '()))) (let () (cons _t1_14_17 _t2_14_20))))) (let () (cons _t1_4_7 _t2_4_10)))) (set! list-indentation (string-append list-indentation "_   "))))) (_list-lambda-start_2 _instruction_1))))) 'list-lambda-start))
(let () (begin (set! list-lambda-end (lambda () (let ((_list-lambda-end_2 0)) (begin (set! _list-lambda-end_2 (lambda () (set! list-indentation (substring list-indentation 0 (- (string-length list-indentation) 4))))) (_list-lambda-end_2))))) 'list-lambda-end))
(let () (begin (set! list-indentation "") 'list-indentation))
(let () (define-instruction $_label (lambda (_instruction_1 _as_1) (begin (list-label _instruction_1) (sparc_label _as_1 (make-asm-label _as_1 (operand1 _instruction_1)))))))
(let () (define-instruction $_proc (lambda (_instruction_1 _as_1) (begin (list-instruction "_proc" _instruction_1) #t))))
(let () (define-instruction $_proc-doc (lambda (_instruction_1 _as_1) (begin (list-instruction "_proc-doc" _instruction_1) (add-documentation _as_1 (operand1 _instruction_1)) #t))))
(let () (define-instruction $_cont (lambda (_instruction_1 _as_1) (begin (list-instruction "_cont" _instruction_1) #t))))
(let () (define-instruction $_align (lambda (_instruction_1 _as_1) (begin (list-instruction "_align" _instruction_1) #t))))
(let () (define-instruction $_end (lambda (_instruction_1 _as_1) #t)))
(let () (define-instruction $_singlestep (lambda (_instruction_1 _as_1) (let ((_instr_4 (let ((_x_102_105 (as-source _as_1))) (begin (_check! (pair? _x_102_105) 0 _x_102_105) (car:pair _x_102_105))))) (let ((_readify-instr_5 (unspecified)) (_special?_5 (unspecified))) (begin (set! _readify-instr_5 (lambda () (if (= (operand0 _instr_4) $lambda) (let* ((_t1_7_10 'lambda) (_t2_7_13 (let* ((_t1_17_20 '(___)) (_t2_17_23 (let* ((_t1_27_30 (let ((_x_56_59 (let ((_x_60_63 (let ((_x_64_67 _instr_4)) (begin (_check! (pair? _x_64_67) 1 _x_64_67) (cdr:pair _x_64_67))))) (begin (_check! (pair? _x_60_63) 1 _x_60_63) (cdr:pair _x_60_63))))) (begin (_check! (pair? _x_56_59) 0 _x_56_59) (car:pair _x_56_59)))) (_t2_27_33 (cons (let ((_x_39_42 (let ((_x_43_46 (let ((_x_47_50 (let ((_x_51_54 _instr_4)) (begin (_check! (pair? _x_51_54) 1 _x_51_54) (cdr:pair _x_51_54))))) (begin (_check! (pair? _x_47_50) 1 _x_47_50) (cdr:pair _x_47_50))))) (begin (_check! (pair? _x_43_46) 1 _x_43_46) (cdr:pair _x_43_46))))) (begin (_check! (pair? _x_39_42) 0 _x_39_42) (car:pair _x_39_42))) '()))) (let () (cons _t1_27_30 _t2_27_33))))) (let () (cons _t1_17_20 _t2_17_23))))) (let () (cons _t1_7_10 _t2_7_13))) (let ((_x_68_71 (readify-lap (cons _instr_4 '())))) (begin (_check! (pair? _x_68_71) 0 _x_68_71) (car:pair _x_68_71)))))) (set! _special?_5 (lambda () (let* ((_op_76 (operand0 _instr_4)) (_temp_77_80 (= _op_76 $_label))) (if _temp_77_80 _temp_77_80 (let ((_temp_81_84 (= _op_76 $_proc))) (if _temp_81_84 _temp_81_84 (let ((_temp_85_88 (= _op_76 $_cont))) (if _temp_85_88 _temp_85_88 (let ((_temp_89_92 (= _op_76 $_align))) (if _temp_89_92 _temp_89_92 (if (= _op_76 $load) (= 0 (operand1 _instr_4)) #f))))))))))) (if (not (_special?_5)) (let ((_repr_98 (format-object (_readify-instr_5))) (_funky?_98 (= (operand0 _instr_4) $restore))) (let ((_o_101 (emit-datum _as_1 _repr_98))) (emit-singlestep-instr! _as_1 _funky?_98 0 _o_101))) (unspecified))))))))
(let () (define-instruction $op1 (lambda (_instruction_1 _as_1) (begin (list-instruction "op1" _instruction_1) (emit-primop_1arg! _as_1 (operand1 _instruction_1))))))
(let () (define-instruction $op2 (lambda (_instruction_1 _as_1) (begin (list-instruction "op2" _instruction_1) (emit-primop_2arg! _as_1 (operand1 _instruction_1) (regname (operand2 _instruction_1)))))))
(let () (define-instruction $op3 (lambda (_instruction_1 _as_1) (begin (list-instruction "op3" _instruction_1) (emit-primop_3arg! _as_1 (operand1 _instruction_1) (regname (operand2 _instruction_1)) (regname (operand3 _instruction_1)))))))
(let () (define-instruction $op2imm (lambda (_instruction_1 _as_1) (begin (list-instruction "op2imm" _instruction_1) (let ((_op_4 (let ((_temp_5_8 (operand1 _instruction_1))) (if (memv _temp_5_8 '(+)) 'internal:+/imm (if (memv _temp_5_8 '(-)) 'internal:-/imm (if (memv _temp_5_8 '(fx+)) 'internal:fx+/imm (if (memv _temp_5_8 '(fx-)) 'internal:fx-/imm (if (memv _temp_5_8 '(fx=)) 'internal:fx=/imm (if (memv _temp_5_8 '(fx<)) 'internal:fx</imm (if (memv _temp_5_8 '(fx<=)) 'internal:fx<=/imm (if (memv _temp_5_8 '(fx>)) 'internal:fx>/imm (if (memv _temp_5_8 '(fx>=)) 'internal:fx>=/imm (if (memv _temp_5_8 '(=:fix:fix)) 'internal:=:fix:fix/imm (if (memv _temp_5_8 '(<:fix:fix)) 'internal:<:fix:fix/imm (if (memv _temp_5_8 '(<=:fix:fix)) 'internal:<=:fix:fix/imm (if (memv _temp_5_8 '(>:fix:fix)) 'internal:>:fix:fix/imm (if (memv _temp_5_8 '(>=:fix:fix)) 'internal:>=:fix:fix/imm #f))))))))))))))))) (if _op_4 (emit-primop_4arg! _as_1 _op_4 $r_result (operand2 _instruction_1) $r_result) (begin (emit-constant->register _as_1 (operand2 _instruction_1) $r_argreg2) (emit-primop_2arg! _as_1 (operand1 _instruction_1) $r_argreg2))))))))
(let () (define-instruction $const (lambda (_instruction_1 _as_1) (begin (list-instruction "const" _instruction_1) (emit-constant->register _as_1 (operand1 _instruction_1) $r_result)))))
(let () (define-instruction $global (lambda (_instruction_1 _as_1) (begin (list-instruction "global" _instruction_1) (emit-global->register! _as_1 (emit-global _as_1 (operand1 _instruction_1)) $r_result)))))
(let () (define-instruction $setglbl (lambda (_instruction_1 _as_1) (begin (list-instruction "setglbl" _instruction_1) (emit-register->global! _as_1 $r_result (emit-global _as_1 (operand1 _instruction_1)))))))
(let () (define-instruction $lambda (lambda (_instruction_1 _as_1) (let ((_code-offset_4 #f) (_const-offset_4 #f)) (begin (list-lambda-start _instruction_1) (assemble-nested-lambda _as_1 (operand1 _instruction_1) (operand3 _instruction_1) (lambda (_nested-as_5 _segment_5) (begin (set-constant! _as_1 _code-offset_4 (let ((_x_6_9 _segment_5)) (begin (_check! (pair? _x_6_9) 0 _x_6_9) (car:pair _x_6_9)))) (set-constant! _as_1 _const-offset_4 (let ((_x_10_13 _segment_5)) (begin (_check! (pair? _x_10_13) 1 _x_10_13) (cdr:pair _x_10_13))))))) (list-lambda-end) (set! _code-offset_4 (emit-codevector _as_1 0)) (set! _const-offset_4 (emit-constantvector _as_1 0)) (emit-lambda! _as_1 _code-offset_4 _const-offset_4 (operand2 _instruction_1)))))))
(let () (define-instruction $lexes (lambda (_instruction_1 _as_1) (begin (list-instruction "lexes" _instruction_1) (emit-lexes! _as_1 (operand1 _instruction_1))))))
(let () (define-instruction $args= (lambda (_instruction_1 _as_1) (begin (list-instruction "args=" _instruction_1) (emit-args=! _as_1 (operand1 _instruction_1))))))
(let () (define-instruction $args>= (lambda (_instruction_1 _as_1) (begin (list-instruction "args>=" _instruction_1) (emit-args>=! _as_1 (operand1 _instruction_1))))))
(let () (define-instruction $invoke (lambda (_instruction_1 _as_1) (begin (list-instruction "invoke" _instruction_1) (emit-invoke _as_1 (operand1 _instruction_1) #f $m_invoke-ex)))))
(let () (define-instruction $restore (lambda (_instruction_1 _as_1) (if (not (< (operand1 _instruction_1) 0)) (begin (list-instruction "restore" _instruction_1) (emit-restore! _as_1 (operand1 _instruction_1))) (unspecified)))))
(let () (define-instruction $pop (lambda (_instruction_1 _as_1) (if (not (< (operand1 _instruction_1) 0)) (begin (list-instruction "pop" _instruction_1) (let ((_next_5 (next-instruction _as_1))) (if (if (peephole-optimization) (eqv? $return (operand0 _next_5)) #f) (begin (list-instruction "return" _next_5) (consume-next-instruction! _as_1) (emit-pop! _as_1 (operand1 _instruction_1) #t)) (emit-pop! _as_1 (operand1 _instruction_1) #f)))) (unspecified)))))
(let () (define-instruction $stack (lambda (_instruction_1 _as_1) (begin (list-instruction "stack" _instruction_1) (emit-load! _as_1 (operand1 _instruction_1) $r_result)))))
(let () (define-instruction $setstk (lambda (_instruction_1 _as_1) (begin (list-instruction "setstk" _instruction_1) (emit-store! _as_1 $r_result (operand1 _instruction_1))))))
(let () (define-instruction $load (lambda (_instruction_1 _as_1) (begin (list-instruction "load" _instruction_1) (emit-load! _as_1 (operand2 _instruction_1) (regname (operand1 _instruction_1)))))))
(let () (define-instruction $store (lambda (_instruction_1 _as_1) (begin (list-instruction "store" _instruction_1) (emit-store! _as_1 (regname (operand1 _instruction_1)) (operand2 _instruction_1))))))
(let () (define-instruction $lexical (lambda (_instruction_1 _as_1) (begin (list-instruction "lexical" _instruction_1) (emit-lexical! _as_1 (operand1 _instruction_1) (operand2 _instruction_1))))))
(let () (define-instruction $setlex (lambda (_instruction_1 _as_1) (begin (list-instruction "setlex" _instruction_1) (emit-setlex! _as_1 (operand1 _instruction_1) (operand2 _instruction_1))))))
(let () (define-instruction $reg (lambda (_instruction_1 _as_1) (begin (list-instruction "reg" _instruction_1) (emit-register->register! _as_1 (regname (operand1 _instruction_1)) $r_result)))))
(let () (define-instruction $setreg (lambda (_instruction_1 _as_1) (begin (list-instruction "setreg" _instruction_1) (emit-register->register! _as_1 $r_result (regname (operand1 _instruction_1)))))))
(let () (define-instruction $movereg (lambda (_instruction_1 _as_1) (begin (list-instruction "movereg" _instruction_1) (emit-register->register! _as_1 (regname (operand1 _instruction_1)) (regname (operand2 _instruction_1)))))))
(let () (define-instruction $return (lambda (_instruction_1 _as_1) (begin (list-instruction "return" _instruction_1) (emit-return! _as_1)))))
(let () (define-instruction $reg/return (lambda (_instruction_1 _as_1) (begin (list-instruction "reg/return" _instruction_1) (emit-return-reg! _as_1 (regname (operand1 _instruction_1)))))))
(let () (define-instruction $const/return (lambda (_instruction_1 _as_1) (begin (list-instruction "const/return" _instruction_1) (emit-return-const! _as_1 (operand1 _instruction_1))))))
(let () (define-instruction $nop (lambda (_instruction_1 _as_1) (list-instruction "nop" _instruction_1))))
(let () (define-instruction $save (lambda (_instruction_1 _as_1) (if (not (< (operand1 _instruction_1) 0)) (begin (list-instruction "save" _instruction_1) (let* ((_n_5 (operand1 _instruction_1)) (_v_8 (make-vector (+ _n_5 1) #t))) (let () (begin (emit-save0! _as_1 _n_5) (if (peephole-optimization) (let ((_instruction_14 (next-instruction _as_1))) (let () (let ((_loop_17 (unspecified))) (begin (set! _loop_17 (lambda (_instruction_18) (if (eqv? $store (operand0 _instruction_18)) (begin (list-instruction "store" _instruction_18) (emit-store! _as_1 (regname (operand1 _instruction_18)) (operand2 _instruction_18)) (consume-next-instruction! _as_1) (let ((_v_20_23 _v_8) (_i_20_23 (operand2 _instruction_18)) (_x_20_23 #f)) (begin (_check! (fixnum? _i_20_23) 41 _v_20_23 _i_20_23 _x_20_23) (_check! (vector? _v_20_23) 41 _v_20_23 _i_20_23 _x_20_23) (_check! (<:fix:fix _i_20_23 (vector-length:vec _v_20_23)) 41 _v_20_23 _i_20_23 _x_20_23) (_check! (>=:fix:fix _i_20_23 0) 41 _v_20_23 _i_20_23 _x_20_23) (vector-set!:trusted _v_20_23 _i_20_23 _x_20_23))) (_loop_17 (next-instruction _as_1))) (unspecified)))) (_loop_17 _instruction_14))))) (unspecified)) (emit-save1! _as_1 _v_8))))) (unspecified)))))
(let () (define-instruction $setrtn (lambda (_instruction_1 _as_1) (begin (list-instruction "setrtn" _instruction_1) (emit-setrtn! _as_1 (make-asm-label _as_1 (operand1 _instruction_1)))))))
(let () (define-instruction $apply (lambda (_instruction_1 _as_1) (begin (list-instruction "apply" _instruction_1) (emit-apply! _as_1 (regname (operand1 _instruction_1)) (regname (operand2 _instruction_1)))))))
(let () (define-instruction $jump (lambda (_instruction_1 _as_1) (begin (list-instruction "jump" _instruction_1) (emit-jump! _as_1 (operand1 _instruction_1) (make-asm-label _as_1 (operand2 _instruction_1)))))))
(let () (define-instruction $skip (lambda (_instruction_1 _as_1) (begin (list-instruction "skip" _instruction_1) (emit-branch! _as_1 #f (make-asm-label _as_1 (operand1 _instruction_1)))))))
(let () (define-instruction $branch (lambda (_instruction_1 _as_1) (begin (list-instruction "branch" _instruction_1) (emit-branch! _as_1 #t (make-asm-label _as_1 (operand1 _instruction_1)))))))
(let () (define-instruction $branchf (lambda (_instruction_1 _as_1) (begin (list-instruction "branchf" _instruction_1) (emit-branchf! _as_1 (make-asm-label _as_1 (operand1 _instruction_1)))))))
(let () (define-instruction $check (lambda (_instruction_1 _as_1) (begin (list-instruction "check" _instruction_1) (if (not (unsafe-code)) (emit-check! _as_1 $r_result (make-asm-label _as_1 (operand4 _instruction_1)) (let* ((_t1_2_5 (regname (operand1 _instruction_1))) (_t2_2_8 (let* ((_t1_12_15 (regname (operand2 _instruction_1))) (_t2_12_18 (cons (regname (operand3 _instruction_1)) '()))) (let () (cons _t1_12_15 _t2_12_18))))) (let () (cons _t1_2_5 _t2_2_8)))) (unspecified))))))
(let () (define-instruction $trap (lambda (_instruction_1 _as_1) (begin (list-instruction "trap" _instruction_1) (emit-trap! _as_1 (regname (operand1 _instruction_1)) (regname (operand2 _instruction_1)) (regname (operand3 _instruction_1)) (operand4 _instruction_1))))))
(let () (define-instruction $const/setreg (lambda (_instruction_1 _as_1) (begin (list-instruction "const/setreg" _instruction_1) (let ((_x_4 (operand1 _instruction_1)) (_r_4 (operand2 _instruction_1))) (if (hwreg? _r_4) (emit-constant->register _as_1 _x_4 (regname _r_4)) (begin (emit-constant->register _as_1 _x_4 $r_tmp0) (emit-register->register! _as_1 $r_tmp0 (regname _r_4)))))))))
(let () (begin (set! peep-regname (lambda (_r_1) (let ((_peep-regname_2 0)) (begin (set! _peep-regname_2 (lambda (_r_3) (if (eq? _r_3 'result) $r_result (regname _r_3)))) (_peep-regname_2 _r_1))))) 'peep-regname))
(let () (define-instruction $reg/op1/branchf (lambda (_instruction_1 _as_1) (begin (list-instruction "reg/op1/branchf" _instruction_1) (emit-primop_3arg! _as_1 (operand1 _instruction_1) (peep-regname (operand2 _instruction_1)) (make-asm-label _as_1 (operand3 _instruction_1)))))))
(let () (define-instruction $reg/op2/branchf (lambda (_instruction_1 _as_1) (begin (list-instruction "reg/op2/branchf" _instruction_1) (emit-primop_4arg! _as_1 (operand1 _instruction_1) (peep-regname (operand2 _instruction_1)) (peep-regname (operand3 _instruction_1)) (make-asm-label _as_1 (operand4 _instruction_1)))))))
(let () (define-instruction $reg/op2imm/branchf (lambda (_instruction_1 _as_1) (begin (list-instruction "reg/op2imm/branchf" _instruction_1) (emit-primop_4arg! _as_1 (operand1 _instruction_1) (peep-regname (operand2 _instruction_1)) (operand3 _instruction_1) (make-asm-label _as_1 (operand4 _instruction_1)))))))
(let () (define-instruction $reg/op1/check (lambda (_instruction_1 _as_1) (begin (list-instruction "reg/op1/check" _instruction_1) (emit-primop_4arg! _as_1 (operand1 _instruction_1) (peep-regname (operand2 _instruction_1)) (make-asm-label _as_1 (operand3 _instruction_1)) (let () (let ((_loop_7_10_13 (unspecified))) (begin (set! _loop_7_10_13 (lambda (_y1_2_3_14 _results_2_6_14) (if (null? _y1_2_3_14) (reverse _results_2_6_14) (begin #t (_loop_7_10_13 (let ((_x_18_21 _y1_2_3_14)) (begin (_check! (pair? _x_18_21) 1 _x_18_21) (cdr:pair _x_18_21))) (cons (peep-regname (let ((_x_22_25 _y1_2_3_14)) (begin (_check! (pair? _x_22_25) 0 _x_22_25) (car:pair _x_22_25)))) _results_2_6_14)))))) (_loop_7_10_13 (operand4 _instruction_1) '())))))))))
(let () (define-instruction $reg/op2/check (lambda (_instruction_1 _as_1) (begin (list-instruction "reg/op2/check" _instruction_1) (emit-primop_5arg! _as_1 (operand1 _instruction_1) (peep-regname (operand2 _instruction_1)) (peep-regname (operand3 _instruction_1)) (make-asm-label _as_1 (operand4 _instruction_1)) (let () (let ((_loop_7_10_13 (unspecified))) (begin (set! _loop_7_10_13 (lambda (_y1_2_3_14 _results_2_6_14) (if (null? _y1_2_3_14) (reverse _results_2_6_14) (begin #t (_loop_7_10_13 (let ((_x_18_21 _y1_2_3_14)) (begin (_check! (pair? _x_18_21) 1 _x_18_21) (cdr:pair _x_18_21))) (cons (peep-regname (let ((_x_22_25 _y1_2_3_14)) (begin (_check! (pair? _x_22_25) 0 _x_22_25) (car:pair _x_22_25)))) _results_2_6_14)))))) (_loop_7_10_13 (operand5 _instruction_1) '())))))))))
(let () (define-instruction $reg/op2imm/check (lambda (_instruction_1 _as_1) (begin (list-instruction "reg/op2imm/check" _instruction_1) (emit-primop_5arg! _as_1 (operand1 _instruction_1) (peep-regname (operand2 _instruction_1)) (operand3 _instruction_1) (make-asm-label _as_1 (operand4 _instruction_1)) (let () (let ((_loop_7_10_13 (unspecified))) (begin (set! _loop_7_10_13 (lambda (_y1_2_3_14 _results_2_6_14) (if (null? _y1_2_3_14) (reverse _results_2_6_14) (begin #t (_loop_7_10_13 (let ((_x_18_21 _y1_2_3_14)) (begin (_check! (pair? _x_18_21) 1 _x_18_21) (cdr:pair _x_18_21))) (cons (peep-regname (let ((_x_22_25 _y1_2_3_14)) (begin (_check! (pair? _x_22_25) 0 _x_22_25) (car:pair _x_22_25)))) _results_2_6_14)))))) (_loop_7_10_13 (operand5 _instruction_1) '())))))))))
(let () (define-instruction $reg/op1/setreg (lambda (_instruction_1 _as_1) (begin (list-instruction "reg/op1/setreg" _instruction_1) (emit-primop_3arg! _as_1 (operand1 _instruction_1) (peep-regname (operand2 _instruction_1)) (peep-regname (operand3 _instruction_1)))))))
(let () (define-instruction $reg/op2/setreg (lambda (_instruction_1 _as_1) (begin (list-instruction "reg/op2/setreg" _instruction_1) (emit-primop_4arg! _as_1 (operand1 _instruction_1) (peep-regname (operand2 _instruction_1)) (peep-regname (operand3 _instruction_1)) (peep-regname (operand4 _instruction_1)))))))
(let () (define-instruction $reg/op2imm/setreg (lambda (_instruction_1 _as_1) (begin (list-instruction "reg/op2imm/setreg" _instruction_1) (emit-primop_4arg! _as_1 (operand1 _instruction_1) (peep-regname (operand2 _instruction_1)) (operand3 _instruction_1) (peep-regname (operand4 _instruction_1)))))))
(let () (define-instruction $reg/op3 (lambda (_instruction_1 _as_1) (begin (list-instruction "reg/op3" _instruction_1) (emit-primop_4arg! _as_1 (operand1 _instruction_1) (peep-regname (operand2 _instruction_1)) (peep-regname (operand3 _instruction_1)) (peep-regname (operand4 _instruction_1)))))))
(let () (define-instruction $reg/branchf (lambda (_instruction_1 _as_1) (begin (list-instruction "reg/branchf" _instruction_1) (emit-branchfreg! _as_1 (regname (operand1 _instruction_1)) (make-asm-label _as_1 (operand2 _instruction_1)))))))
(let () (define-instruction $setrtn/branch (lambda (_instruction_1 _as_1) (begin (list-instruction "setrtn/branch" _instruction_1) (emit-branch-with-setrtn! _as_1 (make-asm-label _as_1 (operand1 _instruction_1)))))))
(let () (define-instruction $setrtn/invoke (lambda (_instruction_1 _as_1) (begin (list-instruction "setrtn/invoke" _instruction_1) (emit-invoke _as_1 (operand1 _instruction_1) #t $m_invoke-ex)))))
(let () (define-instruction $global/setreg (lambda (_instruction_1 _as_1) (begin (list-instruction "global/setreg" _instruction_1) (emit-global->register! _as_1 (emit-global _as_1 (operand1 _instruction_1)) (regname (operand2 _instruction_1)))))))
(let () (define-instruction $global/invoke (lambda (_instruction_1 _as_1) (begin (list-instruction "global/invoke" _instruction_1) (emit-load-global _as_1 (emit-global _as_1 (operand1 _instruction_1)) $r_result #f) (emit-invoke _as_1 (operand2 _instruction_1) #f $m_global-invoke-ex)))))
(let () (define-instruction $reg/setglbl (lambda (_instruction_1 _as_1) (begin (list-instruction "reg/setglbl" _instruction_1) (emit-register->global! _as_1 (regname (operand1 _instruction_1)) (emit-global _as_1 (operand2 _instruction_1)))))))
(let () (begin (set! *peephole-table* (make-vector *number-of-mnemonics* #f)) '*peephole-table*))
(let () (begin (set! define-peephole (lambda (_n_1 _p_1) (let ((_define-peephole_2 0)) (begin (set! _define-peephole_2 (lambda (_n_3 _p_3) (begin (let ((_v_4_7 *peephole-table*) (_i_4_7 _n_3) (_x_4_7 _p_3)) (begin (_check! (fixnum? _i_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (vector? _v_4_7) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (<:fix:fix _i_4_7 (vector-length:vec _v_4_7)) 41 _v_4_7 _i_4_7 _x_4_7) (_check! (>=:fix:fix _i_4_7 0) 41 _v_4_7 _i_4_7 _x_4_7) (vector-set!:trusted _v_4_7 _i_4_7 _x_4_7))) (unspecified)))) (_define-peephole_2 _n_1 _p_1))))) 'define-peephole))
(let () (begin (set! peep (lambda (_as_1) (let ((_peep_2 0)) (begin (set! _peep_2 (lambda (_as_3) (let ((_t0_6 (as-source _as_3))) (if (not (null? _t0_6)) (let* ((_i1_9 (let ((_x_59_62 _t0_6)) (begin (_check! (pair? _x_59_62) 0 _x_59_62) (car:pair _x_59_62)))) (_p_12 (let ((_v_51_54 *peephole-table*) (_i_51_54 (let ((_x_55_58 _i1_9)) (begin (_check! (pair? _x_55_58) 0 _x_55_58) (car:pair _x_55_58))))) (begin (_check! (fixnum? _i_51_54) 40 _v_51_54 _i_51_54) (_check! (vector? _v_51_54) 40 _v_51_54 _i_51_54) (_check! (<:fix:fix _i_51_54 (vector-length:vec _v_51_54)) 40 _v_51_54 _i_51_54) (_check! (>=:fix:fix _i_51_54 0) 40 _v_51_54 _i_51_54) (vector-ref:trusted _v_51_54 _i_51_54))))) (if _p_12 (let* ((_t1_15 (if (null? _t0_6) _t0_6 (let ((_x_47_50 _t0_6)) (begin (_check! (pair? _x_47_50) 1 _x_47_50) (cdr:pair _x_47_50))))) (_i2_18 (if (null? _t1_15) '(-1 0 0 0) (let ((_x_43_46 _t1_15)) (begin (_check! (pair? _x_43_46) 0 _x_43_46) (car:pair _x_43_46))))) (_t2_21 (if (null? _t1_15) _t1_15 (let ((_x_39_42 _t1_15)) (begin (_check! (pair? _x_39_42) 1 _x_39_42) (cdr:pair _x_39_42))))) (_i3_24 (if (null? _t2_21) '(-1 0 0 0) (let ((_x_35_38 _t2_21)) (begin (_check! (pair? _x_35_38) 0 _x_35_38) (car:pair _x_35_38))))) (_t3_27 (if (null? _t2_21) _t2_21 (let ((_x_31_34 _t2_21)) (begin (_check! (pair? _x_31_34) 1 _x_31_34) (cdr:pair _x_31_34)))))) (let () (_p_12 _as_3 _i1_9 _i2_18 _i3_24 _t1_15 _t2_21 _t3_27))) (unspecified))) (unspecified))))) (_peep_2 _as_1))))) 'peep))
(let () (define-peephole $reg (lambda (_as_1 _i1_1 _i2_1 _i3_1 _t1_1 _t2_1 _t3_1) (if (= (let ((_x_3_6 _i2_1)) (begin (_check! (pair? _x_3_6) 0 _x_3_6) (car:pair _x_3_6))) $return) (reg-return _as_1 _i1_1 _i2_1 _t2_1) (if (= (let ((_x_8_11 _i2_1)) (begin (_check! (pair? _x_8_11) 0 _x_8_11) (car:pair _x_8_11))) $setglbl) (reg-setglbl _as_1 _i1_1 _i2_1 _t2_1) (if (= (let ((_x_13_16 _i2_1)) (begin (_check! (pair? _x_13_16) 0 _x_13_16) (car:pair _x_13_16))) $op1) (if (= (let ((_x_18_21 _i3_1)) (begin (_check! (pair? _x_18_21) 0 _x_18_21) (car:pair _x_18_21))) $setreg) (reg-op1-setreg _as_1 _i1_1 _i2_1 _i3_1 _t2_1 _t3_1) (if (= (let ((_x_23_26 _i3_1)) (begin (_check! (pair? _x_23_26) 0 _x_23_26) (car:pair _x_23_26))) $branchf) (reg-op1-branchf _as_1 _i1_1 _i2_1 _i3_1 _t3_1) (if (= (let ((_x_28_31 _i3_1)) (begin (_check! (pair? _x_28_31) 0 _x_28_31) (car:pair _x_28_31))) $check) (reg-op1-check _as_1 _i1_1 _i2_1 _i3_1 _t3_1) (reg-op1 _as_1 _i1_1 _i2_1 _t2_1)))) (if (= (let ((_x_34_37 _i2_1)) (begin (_check! (pair? _x_34_37) 0 _x_34_37) (car:pair _x_34_37))) $op2) (if (= (let ((_x_39_42 _i3_1)) (begin (_check! (pair? _x_39_42) 0 _x_39_42) (car:pair _x_39_42))) $setreg) (reg-op2-setreg _as_1 _i1_1 _i2_1 _i3_1 _t2_1 _t3_1) (if (= (let ((_x_44_47 _i3_1)) (begin (_check! (pair? _x_44_47) 0 _x_44_47) (car:pair _x_44_47))) $branchf) (reg-op2-branchf _as_1 _i1_1 _i2_1 _i3_1 _t3_1) (if (= (let ((_x_49_52 _i3_1)) (begin (_check! (pair? _x_49_52) 0 _x_49_52) (car:pair _x_49_52))) $check) (reg-op2-check _as_1 _i1_1 _i2_1 _i3_1 _t3_1) (reg-op2 _as_1 _i1_1 _i2_1 _t2_1)))) (if (= (let ((_x_55_58 _i2_1)) (begin (_check! (pair? _x_55_58) 0 _x_55_58) (car:pair _x_55_58))) $op2imm) (if (= (let ((_x_60_63 _i3_1)) (begin (_check! (pair? _x_60_63) 0 _x_60_63) (car:pair _x_60_63))) $setreg) (reg-op2imm-setreg _as_1 _i1_1 _i2_1 _i3_1 _t2_1 _t3_1) (if (= (let ((_x_65_68 _i3_1)) (begin (_check! (pair? _x_65_68) 0 _x_65_68) (car:pair _x_65_68))) $branchf) (reg-op2imm-branchf _as_1 _i1_1 _i2_1 _i3_1 _t3_1) (if (= (let ((_x_70_73 _i3_1)) (begin (_check! (pair? _x_70_73) 0 _x_70_73) (car:pair _x_70_73))) $check) (reg-op2imm-check _as_1 _i1_1 _i2_1 _i3_1 _t3_1) (reg-op2imm _as_1 _i1_1 _i2_1 _t2_1)))) (if (= (let ((_x_76_79 _i2_1)) (begin (_check! (pair? _x_76_79) 0 _x_76_79) (car:pair _x_76_79))) $op3) (reg-op3 _as_1 _i1_1 _i2_1 _t2_1) (if (= (let ((_x_81_84 _i2_1)) (begin (_check! (pair? _x_81_84) 0 _x_81_84) (car:pair _x_81_84))) $setreg) (reg-setreg _as_1 _i1_1 _i2_1 _t2_1) (if (= (let ((_x_86_89 _i2_1)) (begin (_check! (pair? _x_86_89) 0 _x_86_89) (car:pair _x_86_89))) $branchf) (reg-branchf _as_1 _i1_1 _i2_1 _t2_1) (unspecified))))))))))))
(let () (define-peephole $op1 (lambda (_as_1 _i1_1 _i2_1 _i3_1 _t1_1 _t2_1 _t3_1) (if (= (let ((_x_3_6 _i2_1)) (begin (_check! (pair? _x_3_6) 0 _x_3_6) (car:pair _x_3_6))) $branchf) (op1-branchf _as_1 _i1_1 _i2_1 _t2_1) (if (= (let ((_x_8_11 _i2_1)) (begin (_check! (pair? _x_8_11) 0 _x_8_11) (car:pair _x_8_11))) $setreg) (op1-setreg _as_1 _i1_1 _i2_1 _t2_1) (if (= (let ((_x_13_16 _i2_1)) (begin (_check! (pair? _x_13_16) 0 _x_13_16) (car:pair _x_13_16))) $check) (op1-check _as_1 _i1_1 _i2_1 _t2_1) (unspecified)))))))
(let () (define-peephole $op2 (lambda (_as_1 _i1_1 _i2_1 _i3_1 _t1_1 _t2_1 _t3_1) (if (= (let ((_x_3_6 _i2_1)) (begin (_check! (pair? _x_3_6) 0 _x_3_6) (car:pair _x_3_6))) $branchf) (op2-branchf _as_1 _i1_1 _i2_1 _t2_1) (if (= (let ((_x_8_11 _i2_1)) (begin (_check! (pair? _x_8_11) 0 _x_8_11) (car:pair _x_8_11))) $setreg) (op2-setreg _as_1 _i1_1 _i2_1 _t2_1) (if (= (let ((_x_13_16 _i2_1)) (begin (_check! (pair? _x_13_16) 0 _x_13_16) (car:pair _x_13_16))) $check) (op2-check _as_1 _i1_1 _i2_1 _t2_1) (unspecified)))))))
(let () (define-peephole $op2imm (lambda (_as_1 _i1_1 _i2_1 _i3_1 _t1_1 _t2_1 _t3_1) (if (= (let ((_x_3_6 _i2_1)) (begin (_check! (pair? _x_3_6) 0 _x_3_6) (car:pair _x_3_6))) $branchf) (op2imm-branchf _as_1 _i1_1 _i2_1 _t2_1) (if (= (let ((_x_8_11 _i2_1)) (begin (_check! (pair? _x_8_11) 0 _x_8_11) (car:pair _x_8_11))) $setreg) (op2imm-setreg _as_1 _i1_1 _i2_1 _t2_1) (if (= (let ((_x_13_16 _i2_1)) (begin (_check! (pair? _x_13_16) 0 _x_13_16) (car:pair _x_13_16))) $check) (op2imm-check _as_1 _i1_1 _i2_1 _t2_1) (unspecified)))))))
(let () (define-peephole $const (lambda (_as_1 _i1_1 _i2_1 _i3_1 _t1_1 _t2_1 _t3_1) (if (= (let ((_x_3_6 _i2_1)) (begin (_check! (pair? _x_3_6) 0 _x_3_6) (car:pair _x_3_6))) $setreg) (const-setreg _as_1 _i1_1 _i2_1 _t2_1) (if (= (let ((_x_8_11 _i2_1)) (begin (_check! (pair? _x_8_11) 0 _x_8_11) (car:pair _x_8_11))) $op2) (const-op2 _as_1 _i1_1 _i2_1 _t2_1) (if (= (let ((_x_13_16 _i2_1)) (begin (_check! (pair? _x_13_16) 0 _x_13_16) (car:pair _x_13_16))) $return) (const-return _as_1 _i1_1 _i2_1 _t2_1) (unspecified)))))))
(let () (define-peephole $setrtn (lambda (_as_1 _i1_1 _i2_1 _i3_1 _t1_1 _t2_1 _t3_1) (if (= (let ((_x_3_6 _i2_1)) (begin (_check! (pair? _x_3_6) 0 _x_3_6) (car:pair _x_3_6))) $branch) (if (= (let ((_x_8_11 _i3_1)) (begin (_check! (pair? _x_8_11) 0 _x_8_11) (car:pair _x_8_11))) $_align) (if (not (null? _t3_1)) (let ((_i4_14 (let ((_x_20_23 _t3_1)) (begin (_check! (pair? _x_20_23) 0 _x_20_23) (car:pair _x_20_23)))) (_t4_14 (let ((_x_24_27 _t3_1)) (begin (_check! (pair? _x_24_27) 1 _x_24_27) (cdr:pair _x_24_27))))) (if (= (let ((_x_16_19 _i4_14)) (begin (_check! (pair? _x_16_19) 0 _x_16_19) (car:pair _x_16_19))) $_label) (setrtn-branch _as_1 _i1_1 _i2_1 _i3_1 _i4_14 _t4_14) (unspecified))) (unspecified)) (unspecified)) (if (= (let ((_x_29_32 _i2_1)) (begin (_check! (pair? _x_29_32) 0 _x_29_32) (car:pair _x_29_32))) $invoke) (if (= (let ((_x_34_37 _i3_1)) (begin (_check! (pair? _x_34_37) 0 _x_34_37) (car:pair _x_34_37))) $_align) (if (not (null? _t3_1)) (let ((_i4_40 (let ((_x_46_49 _t3_1)) (begin (_check! (pair? _x_46_49) 0 _x_46_49) (car:pair _x_46_49)))) (_t4_40 (let ((_x_50_53 _t3_1)) (begin (_check! (pair? _x_50_53) 1 _x_50_53) (cdr:pair _x_50_53))))) (if (= (let ((_x_42_45 _i4_40)) (begin (_check! (pair? _x_42_45) 0 _x_42_45) (car:pair _x_42_45))) $_label) (setrtn-invoke _as_1 _i1_1 _i2_1 _i3_1 _i4_40 _t4_40) (unspecified))) (unspecified)) (unspecified)) (unspecified))))))
(let () (define-peephole $branch (lambda (_as_1 _i1_1 _i2_1 _i3_1 _t1_1 _t2_1 _t3_1) (if (= (let ((_x_3_6 _i2_1)) (begin (_check! (pair? _x_3_6) 0 _x_3_6) (car:pair _x_3_6))) $_align) (if (= (let ((_x_8_11 _i3_1)) (begin (_check! (pair? _x_8_11) 0 _x_8_11) (car:pair _x_8_11))) $_label) (branch-and-label _as_1 _i1_1 _i2_1 _i3_1 _t3_1) (unspecified)) (unspecified)))))
(let () (define-peephole $global (lambda (_as_1 _i1_1 _i2_1 _i3_1 _t1_1 _t2_1 _t3_1) (if (= (let ((_x_3_6 _i2_1)) (begin (_check! (pair? _x_3_6) 0 _x_3_6) (car:pair _x_3_6))) $setreg) (global-setreg _as_1 _i1_1 _i2_1 _t2_1) (if (= (let ((_x_8_11 _i2_1)) (begin (_check! (pair? _x_8_11) 0 _x_8_11) (car:pair _x_8_11))) $invoke) (global-invoke _as_1 _i1_1 _i2_1 _t2_1) (if (= (let ((_x_13_16 _i2_1)) (begin (_check! (pair? _x_13_16) 0 _x_13_16) (car:pair _x_13_16))) $setrtn) (if (= (let ((_x_18_21 _i3_1)) (begin (_check! (pair? _x_18_21) 0 _x_18_21) (car:pair _x_18_21))) $invoke) (global-setrtn-invoke _as_1 _i1_1 _i2_1 _i3_1 _t3_1) (unspecified)) (unspecified)))))))
(let () (define-peephole $reg/op1/check (lambda (_as_1 _i1_1 _i2_1 _i3_1 _t1_1 _t2_1 _t3_1) (if (= (let ((_x_3_6 _i2_1)) (begin (_check! (pair? _x_3_6) 0 _x_3_6) (car:pair _x_3_6))) $reg) (if (= (let ((_x_8_11 _i3_1)) (begin (_check! (pair? _x_8_11) 0 _x_8_11) (car:pair _x_8_11))) $op1) (if (not (null? _t3_1)) (let ((_i4_14 (let ((_x_20_23 _t3_1)) (begin (_check! (pair? _x_20_23) 0 _x_20_23) (car:pair _x_20_23)))) (_t4_14 (let ((_x_24_27 _t3_1)) (begin (_check! (pair? _x_24_27) 1 _x_24_27) (cdr:pair _x_24_27))))) (if (= (let ((_x_16_19 _i4_14)) (begin (_check! (pair? _x_16_19) 0 _x_16_19) (car:pair _x_16_19))) $setreg) (reg/op1/check-reg-op1-setreg _as_1 _i1_1 _i2_1 _i3_1 _i4_14 _t4_14) (unspecified))) (unspecified)) (unspecified)) (unspecified)))))
(let () (define-peephole $reg/op2/check (lambda (_as_1 _i1_1 _i2_1 _i3_1 _t1_1 _t2_1 _t3_1) (if (= (let ((_x_3_6 _i2_1)) (begin (_check! (pair? _x_3_6) 0 _x_3_6) (car:pair _x_3_6))) $reg) (if (= (let ((_x_8_11 _i3_1)) (begin (_check! (pair? _x_8_11) 0 _x_8_11) (car:pair _x_8_11))) $op2imm) (if (not (null? _t3_1)) (let ((_i4_14 (let ((_x_20_23 _t3_1)) (begin (_check! (pair? _x_20_23) 0 _x_20_23) (car:pair _x_20_23)))) (_t4_14 (let ((_x_24_27 _t3_1)) (begin (_check! (pair? _x_24_27) 1 _x_24_27) (cdr:pair _x_24_27))))) (if (= (let ((_x_16_19 _i4_14)) (begin (_check! (pair? _x_16_19) 0 _x_16_19) (car:pair _x_16_19))) $check) (reg/op2/check-reg-op2imm-check _as_1 _i1_1 _i2_1 _i3_1 _i4_14 _t4_14) (unspecified))) (unspecified)) (unspecified)) (unspecified)))))
(let () (begin (set! reg-return (lambda (_as_1 _i:reg_1 _i:return_1 _tail_1) (let ((_reg-return_2 0)) (begin (set! _reg-return_2 (lambda (_as_3 _i:reg_3 _i:return_3 _tail_3) (let ((_rs_6 (operand1 _i:reg_3))) (if (hwreg? _rs_6) (as-source! _as_3 (cons (let* ((_t1_7_10 $reg/return) (_t2_7_13 (cons _rs_6 '()))) (let () (cons _t1_7_10 _t2_7_13))) _tail_3)) (unspecified))))) (_reg-return_2 _as_1 _i:reg_1 _i:return_1 _tail_1))))) 'reg-return))
(let () (begin (set! reg-op1-setreg (lambda (_as_1 _i:reg_1 _i:op1_1 _i:setreg_1 _tail-1_1 _tail_1) (let ((_reg-op1-setreg_2 0)) (begin (set! _reg-op1-setreg_2 (lambda (_as_3 _i:reg_3 _i:op1_3 _i:setreg_3 _tail-1_3 _tail_3) (let ((_rs_6 (operand1 _i:reg_3)) (_rd_6 (operand1 _i:setreg_3)) (_op_6 (operand1 _i:op1_3))) (if (hwreg? _rs_6) (if (hwreg? _rd_6) (peep-reg/op1/setreg _as_3 _op_6 _rs_6 _rd_6 _tail_3) (peep-reg/op1/setreg _as_3 _op_6 _rs_6 'result _tail-1_3)) (unspecified))))) (_reg-op1-setreg_2 _as_1 _i:reg_1 _i:op1_1 _i:setreg_1 _tail-1_1 _tail_1))))) 'reg-op1-setreg))
(let () (begin (set! reg-op1 (lambda (_as_1 _i:reg_1 _i:op1_1 _tail_1) (let ((_reg-op1_2 0)) (begin (set! _reg-op1_2 (lambda (_as_3 _i:reg_3 _i:op1_3 _tail_3) (let ((_rs_6 (operand1 _i:reg_3)) (_op_6 (operand1 _i:op1_3))) (if (hwreg? _rs_6) (peep-reg/op1/setreg _as_3 _op_6 _rs_6 'result _tail_3) (unspecified))))) (_reg-op1_2 _as_1 _i:reg_1 _i:op1_1 _tail_1))))) 'reg-op1))
(let () (begin (set! op1-setreg (lambda (_as_1 _i:op1_1 _i:setreg_1 _tail_1) (let ((_op1-setreg_2 0)) (begin (set! _op1-setreg_2 (lambda (_as_3 _i:op1_3 _i:setreg_3 _tail_3) (let ((_op_6 (operand1 _i:op1_3)) (_rd_6 (operand1 _i:setreg_3))) (if (hwreg? _rd_6) (peep-reg/op1/setreg _as_3 _op_6 'result _rd_6 _tail_3) (unspecified))))) (_op1-setreg_2 _as_1 _i:op1_1 _i:setreg_1 _tail_1))))) 'op1-setreg))
(let () (begin (set! peep-reg/op1/setreg (lambda (_as_1 _op_1 _rs_1 _rd_1 _tail_1) (let ((_peep-reg/op1/setreg_2 0)) (begin (set! _peep-reg/op1/setreg_2 (lambda (_as_3 _op_3 _rs_3 _rd_3 _tail_3) (let ((_op_6 (let ((_temp_38_41 _op_3)) (if (memv _temp_38_41 '(car)) 'internal:car (if (memv _temp_38_41 '(cdr)) 'internal:cdr (if (memv _temp_38_41 '(car:pair)) 'internal:car:pair (if (memv _temp_38_41 '(cdr:pair)) 'internal:cdr:pair (if (memv _temp_38_41 '(cell-ref)) 'internal:cell-ref (if (memv _temp_38_41 '(vector-length)) 'internal:vector-length (if (memv _temp_38_41 '(vector-length:vec)) 'internal:vector-length:vec (if (memv _temp_38_41 '(string-length)) 'internal:string-length (if (memv _temp_38_41 '(_--)) 'internal:-- (if (memv _temp_38_41 '(fx--)) 'internal:fx-- (if (memv _temp_38_41 '(fxpositive?)) 'internal:fxpositive? (if (memv _temp_38_41 '(fxnegative?)) 'internal:fxnegative? (if (memv _temp_38_41 '(fxzero?)) 'internal:fxzero? #f)))))))))))))))) (if _op_6 (as-source! _as_3 (cons (let* ((_t1_7_10 $reg/op1/setreg) (_t2_7_13 (let* ((_t1_17_20 _op_6) (_t2_17_23 (let* ((_t1_27_30 _rs_3) (_t2_27_33 (cons _rd_3 '()))) (let () (cons _t1_27_30 _t2_27_33))))) (let () (cons _t1_17_20 _t2_17_23))))) (let () (cons _t1_7_10 _t2_7_13))) _tail_3)) (unspecified))))) (_peep-reg/op1/setreg_2 _as_1 _op_1 _rs_1 _rd_1 _tail_1))))) 'peep-reg/op1/setreg))
(let () (begin (set! reg-op2-setreg (lambda (_as_1 _i:reg_1 _i:op2_1 _i:setreg_1 _tail-1_1 _tail_1) (let ((_reg-op2-setreg_2 0)) (begin (set! _reg-op2-setreg_2 (lambda (_as_3 _i:reg_3 _i:op2_3 _i:setreg_3 _tail-1_3 _tail_3) (let ((_rs1_6 (operand1 _i:reg_3)) (_rs2_6 (operand2 _i:op2_3)) (_op_6 (operand1 _i:op2_3)) (_rd_6 (operand1 _i:setreg_3))) (if (hwreg? _rs1_6) (if (hwreg? _rd_6) (peep-reg/op2/setreg _as_3 _op_6 _rs1_6 _rs2_6 _rd_6 _tail_3) (peep-reg/op2/setreg _as_3 _op_6 _rs1_6 _rs2_6 'result _tail-1_3)) (unspecified))))) (_reg-op2-setreg_2 _as_1 _i:reg_1 _i:op2_1 _i:setreg_1 _tail-1_1 _tail_1))))) 'reg-op2-setreg))
(let () (begin (set! reg-op2 (lambda (_as_1 _i:reg_1 _i:op2_1 _tail_1) (let ((_reg-op2_2 0)) (begin (set! _reg-op2_2 (lambda (_as_3 _i:reg_3 _i:op2_3 _tail_3) (let ((_rs1_6 (operand1 _i:reg_3)) (_rs2_6 (operand2 _i:op2_3)) (_op_6 (operand1 _i:op2_3))) (if (hwreg? _rs1_6) (peep-reg/op2/setreg _as_3 _op_6 _rs1_6 _rs2_6 'result _tail_3) (unspecified))))) (_reg-op2_2 _as_1 _i:reg_1 _i:op2_1 _tail_1))))) 'reg-op2))
(let () (begin (set! op2-setreg (lambda (_as_1 _i:op2_1 _i:setreg_1 _tail_1) (let ((_op2-setreg_2 0)) (begin (set! _op2-setreg_2 (lambda (_as_3 _i:op2_3 _i:setreg_3 _tail_3) (let ((_op_6 (operand1 _i:op2_3)) (_rs2_6 (operand2 _i:op2_3)) (_rd_6 (operand1 _i:setreg_3))) (if (hwreg? _rd_6) (peep-reg/op2/setreg _as_3 _op_6 'result _rs2_6 _rd_6 _tail_3) (unspecified))))) (_op2-setreg_2 _as_1 _i:op2_1 _i:setreg_1 _tail_1))))) 'op2-setreg))
(let () (begin (set! peep-reg/op2/setreg (lambda (_as_1 _op_1 _rs1_1 _rs2_1 _rd_1 _tail_1) (let ((_peep-reg/op2/setreg_2 0)) (begin (set! _peep-reg/op2/setreg_2 (lambda (_as_3 _op_3 _rs1_3 _rs2_3 _rd_3 _tail_3) (let ((_op_6 (let ((_temp_48_51 _op_3)) (if (memv _temp_48_51 '(+)) 'internal:+ (if (memv _temp_48_51 '(-)) 'internal:- (if (memv _temp_48_51 '(fx+)) 'internal:fx+ (if (memv _temp_48_51 '(fx-)) 'internal:fx- (if (memv _temp_48_51 '(fx=)) 'internal:fx= (if (memv _temp_48_51 '(fx>)) 'internal:fx> (if (memv _temp_48_51 '(fx>=)) 'internal:fx>= (if (memv _temp_48_51 '(fx<)) 'internal:fx< (if (memv _temp_48_51 '(fx<=)) 'internal:fx<= (if (memv _temp_48_51 '(eq?)) 'internal:eq? (if (memv _temp_48_51 '(cons)) 'internal:cons (if (memv _temp_48_51 '(vector-ref)) 'internal:vector-ref (if (memv _temp_48_51 '(vector-ref:trusted)) 'internal:vector-ref:trusted (if (memv _temp_48_51 '(string-ref)) 'internal:string-ref (if (memv _temp_48_51 '(set-car!)) 'internal:set-car! (if (memv _temp_48_51 '(set-cdr!)) 'internal:set-cdr! (if (memv _temp_48_51 '(cell-set!)) 'internal:cell-set! #f)))))))))))))))))))) (if _op_6 (as-source! _as_3 (cons (let* ((_t1_7_10 $reg/op2/setreg) (_t2_7_13 (let* ((_t1_17_20 _op_6) (_t2_17_23 (let* ((_t1_27_30 _rs1_3) (_t2_27_33 (let* ((_t1_37_40 _rs2_3) (_t2_37_43 (cons _rd_3 '()))) (let () (cons _t1_37_40 _t2_37_43))))) (let () (cons _t1_27_30 _t2_27_33))))) (let () (cons _t1_17_20 _t2_17_23))))) (let () (cons _t1_7_10 _t2_7_13))) _tail_3)) (unspecified))))) (_peep-reg/op2/setreg_2 _as_1 _op_1 _rs1_1 _rs2_1 _rd_1 _tail_1))))) 'peep-reg/op2/setreg))
(let () (begin (set! reg-op2imm-setreg (lambda (_as_1 _i:reg_1 _i:op2imm_1 _i:setreg_1 _tail-1_1 _tail_1) (let ((_reg-op2imm-setreg_2 0)) (begin (set! _reg-op2imm-setreg_2 (lambda (_as_3 _i:reg_3 _i:op2imm_3 _i:setreg_3 _tail-1_3 _tail_3) (let ((_rs_6 (operand1 _i:reg_3)) (_imm_6 (operand2 _i:op2imm_3)) (_op_6 (operand1 _i:op2imm_3)) (_rd_6 (operand1 _i:setreg_3))) (if (hwreg? _rs_6) (if (hwreg? _rd_6) (peep-reg/op2imm/setreg _as_3 _op_6 _rs_6 _imm_6 _rd_6 _tail_3) (peep-reg/op2imm/setreg _as_3 _op_6 _rs_6 _imm_6 'result _tail-1_3)) (unspecified))))) (_reg-op2imm-setreg_2 _as_1 _i:reg_1 _i:op2imm_1 _i:setreg_1 _tail-1_1 _tail_1))))) 'reg-op2imm-setreg))
(let () (begin (set! reg-op2imm (lambda (_as_1 _i:reg_1 _i:op2imm_1 _tail_1) (let ((_reg-op2imm_2 0)) (begin (set! _reg-op2imm_2 (lambda (_as_3 _i:reg_3 _i:op2imm_3 _tail_3) (let ((_rs_6 (operand1 _i:reg_3)) (_imm_6 (operand2 _i:op2imm_3)) (_op_6 (operand1 _i:op2imm_3))) (if (hwreg? _rs_6) (peep-reg/op2imm/setreg _as_3 _op_6 _rs_6 _imm_6 'result _tail_3) (unspecified))))) (_reg-op2imm_2 _as_1 _i:reg_1 _i:op2imm_1 _tail_1))))) 'reg-op2imm))
(let () (begin (set! op2imm-setreg (lambda (_as_1 _i:op2imm_1 _i:setreg_1 _tail_1) (let ((_op2imm-setreg_2 0)) (begin (set! _op2imm-setreg_2 (lambda (_as_3 _i:op2imm_3 _i:setreg_3 _tail_3) (let ((_op_6 (operand1 _i:op2imm_3)) (_imm_6 (operand2 _i:op2imm_3)) (_rd_6 (operand1 _i:setreg_3))) (if (hwreg? _rd_6) (peep-reg/op2imm/setreg _as_3 _op_6 'result _imm_6 _rd_6 _tail_3) (unspecified))))) (_op2imm-setreg_2 _as_1 _i:op2imm_1 _i:setreg_1 _tail_1))))) 'op2imm-setreg))
(let () (begin (set! peep-reg/op2imm/setreg (lambda (_as_1 _op_1 _rs_1 _imm_1 _rd_1 _tail_1) (let ((_peep-reg/op2imm/setreg_2 0)) (begin (set! _peep-reg/op2imm/setreg_2 (lambda (_as_3 _op_3 _rs_3 _imm_3 _rd_3 _tail_3) (let ((_op_6 (let ((_temp_48_51 _op_3)) (if (memv _temp_48_51 '(+)) 'internal:+/imm (if (memv _temp_48_51 '(-)) 'internal:-/imm (if (memv _temp_48_51 '(fx+)) 'internal:fx+/imm (if (memv _temp_48_51 '(fx-)) 'internal:fx-/imm (if (memv _temp_48_51 '(fx=)) 'internal:fx=/imm (if (memv _temp_48_51 '(fx<)) 'internal:fx</imm (if (memv _temp_48_51 '(fx<=)) 'internal:fx<=/imm (if (memv _temp_48_51 '(fx>)) 'internal:fx>/imm (if (memv _temp_48_51 '(fx>=)) 'internal:fx>=/imm (if (memv _temp_48_51 '(eq?)) 'internal:eq?/imm (if (memv _temp_48_51 '(vector-ref)) 'internal:vector-ref/imm (if (memv _temp_48_51 '(string-ref)) 'internal:string-ref/imm #f))))))))))))))) (if _op_6 (as-source! _as_3 (cons (let* ((_t1_7_10 $reg/op2imm/setreg) (_t2_7_13 (let* ((_t1_17_20 _op_6) (_t2_17_23 (let* ((_t1_27_30 _rs_3) (_t2_27_33 (let* ((_t1_37_40 _imm_3) (_t2_37_43 (cons _rd_3 '()))) (let () (cons _t1_37_40 _t2_37_43))))) (let () (cons _t1_27_30 _t2_27_33))))) (let () (cons _t1_17_20 _t2_17_23))))) (let () (cons _t1_7_10 _t2_7_13))) _tail_3)) (unspecified))))) (_peep-reg/op2imm/setreg_2 _as_1 _op_1 _rs_1 _imm_1 _rd_1 _tail_1))))) 'peep-reg/op2imm/setreg))
(let () (begin (set! reg-op1-branchf (lambda (_as_1 _i:reg_1 _i:op1_1 _i:branchf_1 _tail_1) (let ((_reg-op1-branchf_2 0)) (begin (set! _reg-op1-branchf_2 (lambda (_as_3 _i:reg_3 _i:op1_3 _i:branchf_3 _tail_3) (let ((_rs_6 (operand1 _i:reg_3)) (_op_6 (operand1 _i:op1_3)) (_l_6 (operand1 _i:branchf_3))) (if (hwreg? _rs_6) (peep-reg/op1/branchf _as_3 _op_6 _rs_6 _l_6 _tail_3) (unspecified))))) (_reg-op1-branchf_2 _as_1 _i:reg_1 _i:op1_1 _i:branchf_1 _tail_1))))) 'reg-op1-branchf))
(let () (begin (set! op1-branchf (lambda (_as_1 _i:op1_1 _i:branchf_1 _tail_1) (let ((_op1-branchf_2 0)) (begin (set! _op1-branchf_2 (lambda (_as_3 _i:op1_3 _i:branchf_3 _tail_3) (let ((_op_6 (operand1 _i:op1_3)) (_l_6 (operand1 _i:branchf_3))) (peep-reg/op1/branchf _as_3 _op_6 'result _l_6 _tail_3)))) (_op1-branchf_2 _as_1 _i:op1_1 _i:branchf_1 _tail_1))))) 'op1-branchf))
(let () (begin (set! peep-reg/op1/branchf (lambda (_as_1 _op_1 _rs_1 _l_1 _tail_1) (let ((_peep-reg/op1/branchf_2 0)) (begin (set! _peep-reg/op1/branchf_2 (lambda (_as_3 _op_3 _rs_3 _l_3 _tail_3) (let ((_op_6 (let ((_temp_38_41 _op_3)) (if (memv _temp_38_41 '(null?)) 'internal:branchf-null? (if (memv _temp_38_41 '(pair?)) 'internal:branchf-pair? (if (memv _temp_38_41 '(zero?)) 'internal:branchf-zero? (if (memv _temp_38_41 '(eof-object?)) 'internal:branchf-eof-object? (if (memv _temp_38_41 '(fixnum?)) 'internal:branchf-fixnum? (if (memv _temp_38_41 '(char?)) 'internal:branchf-char? (if (memv _temp_38_41 '(fxzero?)) 'internal:branchf-fxzero? (if (memv _temp_38_41 '(fxnegative?)) 'internal:branchf-fxnegative? (if (memv _temp_38_41 '(fxpositive?)) 'internal:branchf-fxpositive? #f)))))))))))) (if _op_6 (as-source! _as_3 (cons (let* ((_t1_7_10 $reg/op1/branchf) (_t2_7_13 (let* ((_t1_17_20 _op_6) (_t2_17_23 (let* ((_t1_27_30 _rs_3) (_t2_27_33 (cons _l_3 '()))) (let () (cons _t1_27_30 _t2_27_33))))) (let () (cons _t1_17_20 _t2_17_23))))) (let () (cons _t1_7_10 _t2_7_13))) _tail_3)) (unspecified))))) (_peep-reg/op1/branchf_2 _as_1 _op_1 _rs_1 _l_1 _tail_1))))) 'peep-reg/op1/branchf))
(let () (begin (set! reg-op2-branchf (lambda (_as_1 _i:reg_1 _i:op2_1 _i:branchf_1 _tail_1) (let ((_reg-op2-branchf_2 0)) (begin (set! _reg-op2-branchf_2 (lambda (_as_3 _i:reg_3 _i:op2_3 _i:branchf_3 _tail_3) (let ((_rs1_6 (operand1 _i:reg_3)) (_rs2_6 (operand2 _i:op2_3)) (_op_6 (operand1 _i:op2_3)) (_l_6 (operand1 _i:branchf_3))) (if (hwreg? _rs1_6) (peep-reg/op2/branchf _as_3 _op_6 _rs1_6 _rs2_6 _l_6 _tail_3) (unspecified))))) (_reg-op2-branchf_2 _as_1 _i:reg_1 _i:op2_1 _i:branchf_1 _tail_1))))) 'reg-op2-branchf))
(let () (begin (set! op2-branchf (lambda (_as_1 _i:op2_1 _i:branchf_1 _tail_1) (let ((_op2-branchf_2 0)) (begin (set! _op2-branchf_2 (lambda (_as_3 _i:op2_3 _i:branchf_3 _tail_3) (let ((_op_6 (operand1 _i:op2_3)) (_rs2_6 (operand2 _i:op2_3)) (_l_6 (operand1 _i:branchf_3))) (peep-reg/op2/branchf _as_3 _op_6 'result _rs2_6 _l_6 _tail_3)))) (_op2-branchf_2 _as_1 _i:op2_1 _i:branchf_1 _tail_1))))) 'op2-branchf))
(let () (begin (set! peep-reg/op2/branchf (lambda (_as_1 _op_1 _rs1_1 _rs2_1 _l_1 _tail_1) (let ((_peep-reg/op2/branchf_2 0)) (begin (set! _peep-reg/op2/branchf_2 (lambda (_as_3 _op_3 _rs1_3 _rs2_3 _l_3 _tail_3) (let ((_op_6 (let ((_temp_48_51 _op_3)) (if (memv _temp_48_51 '(<)) 'internal:branchf-< (if (memv _temp_48_51 '(>)) 'internal:branchf-> (if (memv _temp_48_51 '(>=)) 'internal:branchf->= (if (memv _temp_48_51 '(<=)) 'internal:branchf-<= (if (memv _temp_48_51 '(=)) 'internal:branchf-= (if (memv _temp_48_51 '(eq?)) 'internal:branchf-eq? (if (memv _temp_48_51 '(char=?)) 'internal:branchf-char=? (if (memv _temp_48_51 '(char>=?)) 'internal:branchf-char>=? (if (memv _temp_48_51 '(char>?)) 'internal:branchf-char>? (if (memv _temp_48_51 '(char<=?)) 'internal:branchf-char<=? (if (memv _temp_48_51 '(char<?)) 'internal:branchf-char<? (if (memv _temp_48_51 '(fx=)) 'internal:branchf-fx= (if (memv _temp_48_51 '(fx>)) 'internal:branchf-fx> (if (memv _temp_48_51 '(fx>=)) 'internal:branchf-fx>= (if (memv _temp_48_51 '(fx<)) 'internal:branchf-fx< (if (memv _temp_48_51 '(fx<=)) 'internal:branchf-fx<= #f))))))))))))))))))) (if _op_6 (as-source! _as_3 (cons (let* ((_t1_7_10 $reg/op2/branchf) (_t2_7_13 (let* ((_t1_17_20 _op_6) (_t2_17_23 (let* ((_t1_27_30 _rs1_3) (_t2_27_33 (let* ((_t1_37_40 _rs2_3) (_t2_37_43 (cons _l_3 '()))) (let () (cons _t1_37_40 _t2_37_43))))) (let () (cons _t1_27_30 _t2_27_33))))) (let () (cons _t1_17_20 _t2_17_23))))) (let () (cons _t1_7_10 _t2_7_13))) _tail_3)) (unspecified))))) (_peep-reg/op2/branchf_2 _as_1 _op_1 _rs1_1 _rs2_1 _l_1 _tail_1))))) 'peep-reg/op2/branchf))
(let () (begin (set! reg-op2imm-branchf (lambda (_as_1 _i:reg_1 _i:op2imm_1 _i:branchf_1 _tail_1) (let ((_reg-op2imm-branchf_2 0)) (begin (set! _reg-op2imm-branchf_2 (lambda (_as_3 _i:reg_3 _i:op2imm_3 _i:branchf_3 _tail_3) (let ((_rs_6 (operand1 _i:reg_3)) (_imm_6 (operand2 _i:op2imm_3)) (_op_6 (operand1 _i:op2imm_3)) (_l_6 (operand1 _i:branchf_3))) (if (hwreg? _rs_6) (peep-reg/op2imm/branchf _as_3 _op_6 _rs_6 _imm_6 _l_6 _tail_3) (unspecified))))) (_reg-op2imm-branchf_2 _as_1 _i:reg_1 _i:op2imm_1 _i:branchf_1 _tail_1))))) 'reg-op2imm-branchf))
(let () (begin (set! op2imm-branchf (lambda (_as_1 _i:op2imm_1 _i:branchf_1 _tail_1) (let ((_op2imm-branchf_2 0)) (begin (set! _op2imm-branchf_2 (lambda (_as_3 _i:op2imm_3 _i:branchf_3 _tail_3) (let ((_op_6 (operand1 _i:op2imm_3)) (_imm_6 (operand2 _i:op2imm_3)) (_l_6 (operand1 _i:branchf_3))) (peep-reg/op2imm/branchf _as_3 _op_6 'result _imm_6 _l_6 _tail_3)))) (_op2imm-branchf_2 _as_1 _i:op2imm_1 _i:branchf_1 _tail_1))))) 'op2imm-branchf))
(let () (begin (set! peep-reg/op2imm/branchf (lambda (_as_1 _op_1 _rs_1 _imm_1 _l_1 _tail_1) (let ((_peep-reg/op2imm/branchf_2 0)) (begin (set! _peep-reg/op2imm/branchf_2 (lambda (_as_3 _op_3 _rs_3 _imm_3 _l_3 _tail_3) (let ((_op_6 (let ((_temp_48_51 _op_3)) (if (memv _temp_48_51 '(<)) 'internal:branchf-</imm (if (memv _temp_48_51 '(>)) 'internal:branchf->/imm (if (memv _temp_48_51 '(>=)) 'internal:branchf->=/imm (if (memv _temp_48_51 '(<=)) 'internal:branchf-<=/imm (if (memv _temp_48_51 '(=)) 'internal:branchf-=/imm (if (memv _temp_48_51 '(eq?)) 'internal:branchf-eq?/imm (if (memv _temp_48_51 '(char=?)) 'internal:branchf-char=?/imm (if (memv _temp_48_51 '(char>=?)) 'internal:branchf-char>=?/imm (if (memv _temp_48_51 '(char>?)) 'internal:branchf-char>?/imm (if (memv _temp_48_51 '(char<=?)) 'internal:branchf-char<=?/imm (if (memv _temp_48_51 '(char<?)) 'internal:branchf-char<?/imm (if (memv _temp_48_51 '(fx=)) 'internal:branchf-fx=/imm (if (memv _temp_48_51 '(fx>)) 'internal:branchf-fx>/imm (if (memv _temp_48_51 '(fx>=)) 'internal:branchf-fx>=/imm (if (memv _temp_48_51 '(fx<)) 'internal:branchf-fx</imm (if (memv _temp_48_51 '(fx<=)) 'internal:branchf-fx<=/imm #f))))))))))))))))))) (if _op_6 (as-source! _as_3 (cons (let* ((_t1_7_10 $reg/op2imm/branchf) (_t2_7_13 (let* ((_t1_17_20 _op_6) (_t2_17_23 (let* ((_t1_27_30 _rs_3) (_t2_27_33 (let* ((_t1_37_40 _imm_3) (_t2_37_43 (cons _l_3 '()))) (let () (cons _t1_37_40 _t2_37_43))))) (let () (cons _t1_27_30 _t2_27_33))))) (let () (cons _t1_17_20 _t2_17_23))))) (let () (cons _t1_7_10 _t2_7_13))) _tail_3)) (unspecified))))) (_peep-reg/op2imm/branchf_2 _as_1 _op_1 _rs_1 _imm_1 _l_1 _tail_1))))) 'peep-reg/op2imm/branchf))
(let () (begin (set! reg-op1-check (lambda (_as_1 _i:reg_1 _i:op1_1 _i:check_1 _tail_1) (let ((_reg-op1-check_2 0)) (begin (set! _reg-op1-check_2 (lambda (_as_3 _i:reg_3 _i:op1_3 _i:check_3 _tail_3) (let ((_rs_6 (operand1 _i:reg_3)) (_op_6 (operand1 _i:op1_3))) (if (hwreg? _rs_6) (peep-reg/op1/check _as_3 _op_6 _rs_6 (operand4 _i:check_3) (let* ((_t1_7_10 (operand1 _i:check_3)) (_t2_7_13 (let* ((_t1_17_20 (operand2 _i:check_3)) (_t2_17_23 (cons (operand3 _i:check_3) '()))) (let () (cons _t1_17_20 _t2_17_23))))) (let () (cons _t1_7_10 _t2_7_13))) _tail_3) (unspecified))))) (_reg-op1-check_2 _as_1 _i:reg_1 _i:op1_1 _i:check_1 _tail_1))))) 'reg-op1-check))
(let () (begin (set! op1-check (lambda (_as_1 _i:op1_1 _i:check_1 _tail_1) (let ((_op1-check_2 0)) (begin (set! _op1-check_2 (lambda (_as_3 _i:op1_3 _i:check_3 _tail_3) (let ((_op_6 (operand1 _i:op1_3))) (peep-reg/op1/check _as_3 _op_6 'result (operand4 _i:check_3) (let* ((_t1_7_10 (operand1 _i:check_3)) (_t2_7_13 (let* ((_t1_17_20 (operand2 _i:check_3)) (_t2_17_23 (cons (operand3 _i:check_3) '()))) (let () (cons _t1_17_20 _t2_17_23))))) (let () (cons _t1_7_10 _t2_7_13))) _tail_3)))) (_op1-check_2 _as_1 _i:op1_1 _i:check_1 _tail_1))))) 'op1-check))
(let () (begin (set! peep-reg/op1/check (lambda (_as_1 _op_1 _rs_1 _l1_1 _liveregs_1 _tail_1) (let ((_peep-reg/op1/check_2 0)) (begin (set! _peep-reg/op1/check_2 (lambda (_as_3 _op_3 _rs_3 _l1_3 _liveregs_3 _tail_3) (let ((_op_6 (let ((_temp_48_51 _op_3)) (if (memv _temp_48_51 '(fixnum?)) 'internal:check-fixnum? (if (memv _temp_48_51 '(pair?)) 'internal:check-pair? (if (memv _temp_48_51 '(vector?)) 'internal:check-vector? #f)))))) (if _op_6 (as-source! _as_3 (cons (let* ((_t1_7_10 $reg/op1/check) (_t2_7_13 (let* ((_t1_17_20 _op_6) (_t2_17_23 (let* ((_t1_27_30 _rs_3) (_t2_27_33 (let* ((_t1_37_40 _l1_3) (_t2_37_43 (cons _liveregs_3 '()))) (let () (cons _t1_37_40 _t2_37_43))))) (let () (cons _t1_27_30 _t2_27_33))))) (let () (cons _t1_17_20 _t2_17_23))))) (let () (cons _t1_7_10 _t2_7_13))) _tail_3)) (unspecified))))) (_peep-reg/op1/check_2 _as_1 _op_1 _rs_1 _l1_1 _liveregs_1 _tail_1))))) 'peep-reg/op1/check))
(let () (begin (set! reg-op2-check (lambda (_as_1 _i:reg_1 _i:op2_1 _i:check_1 _tail_1) (let ((_reg-op2-check_2 0)) (begin (set! _reg-op2-check_2 (lambda (_as_3 _i:reg_3 _i:op2_3 _i:check_3 _tail_3) (let ((_rs1_6 (operand1 _i:reg_3)) (_rs2_6 (operand2 _i:op2_3)) (_op_6 (operand1 _i:op2_3))) (if (hwreg? _rs1_6) (peep-reg/op2/check _as_3 _op_6 _rs1_6 _rs2_6 (operand4 _i:check_3) (let* ((_t1_7_10 (operand1 _i:check_3)) (_t2_7_13 (let* ((_t1_17_20 (operand2 _i:check_3)) (_t2_17_23 (cons (operand3 _i:check_3) '()))) (let () (cons _t1_17_20 _t2_17_23))))) (let () (cons _t1_7_10 _t2_7_13))) _tail_3) (unspecified))))) (_reg-op2-check_2 _as_1 _i:reg_1 _i:op2_1 _i:check_1 _tail_1))))) 'reg-op2-check))
(let () (begin (set! op2-check (lambda (_as_1 _i:op2_1 _i:check_1 _tail_1) (let ((_op2-check_2 0)) (begin (set! _op2-check_2 (lambda (_as_3 _i:op2_3 _i:check_3 _tail_3) (let ((_rs2_6 (operand2 _i:op2_3)) (_op_6 (operand1 _i:op2_3))) (peep-reg/op2/check _as_3 _op_6 'result _rs2_6 (operand4 _i:check_3) (let* ((_t1_7_10 (operand1 _i:check_3)) (_t2_7_13 (let* ((_t1_17_20 (operand2 _i:check_3)) (_t2_17_23 (cons (operand3 _i:check_3) '()))) (let () (cons _t1_17_20 _t2_17_23))))) (let () (cons _t1_7_10 _t2_7_13))) _tail_3)))) (_op2-check_2 _as_1 _i:op2_1 _i:check_1 _tail_1))))) 'op2-check))
(let () (begin (set! peep-reg/op2/check (lambda (_as_1 _op_1 _rs1_1 _rs2_1 _l1_1 _liveregs_1 _tail_1) (let ((_peep-reg/op2/check_2 0)) (begin (set! _peep-reg/op2/check_2 (lambda (_as_3 _op_3 _rs1_3 _rs2_3 _l1_3 _liveregs_3 _tail_3) (let ((_op_6 (let ((_temp_58_61 _op_3)) (if (memv _temp_58_61 '(<:fix:fix)) 'internal:check-<:fix:fix (if (memv _temp_58_61 '(<=:fix:fix)) 'internal:check-<=:fix:fix (if (memv _temp_58_61 '(>=:fix:fix)) 'internal:check->=:fix:fix #f)))))) (if _op_6 (as-source! _as_3 (cons (let* ((_t1_7_10 $reg/op2/check) (_t2_7_13 (let* ((_t1_17_20 _op_6) (_t2_17_23 (let* ((_t1_27_30 _rs1_3) (_t2_27_33 (let* ((_t1_37_40 _rs2_3) (_t2_37_43 (let* ((_t1_47_50 _l1_3) (_t2_47_53 (cons _liveregs_3 '()))) (let () (cons _t1_47_50 _t2_47_53))))) (let () (cons _t1_37_40 _t2_37_43))))) (let () (cons _t1_27_30 _t2_27_33))))) (let () (cons _t1_17_20 _t2_17_23))))) (let () (cons _t1_7_10 _t2_7_13))) _tail_3)) (unspecified))))) (_peep-reg/op2/check_2 _as_1 _op_1 _rs1_1 _rs2_1 _l1_1 _liveregs_1 _tail_1))))) 'peep-reg/op2/check))
(let () (begin (set! reg-op2imm-check (lambda (_as_1 _i:reg_1 _i:op2imm_1 _i:check_1 _tail_1) (let ((_reg-op2imm-check_2 0)) (begin (set! _reg-op2imm-check_2 (lambda (_as_3 _i:reg_3 _i:op2imm_3 _i:check_3 _tail_3) (let ((_rs1_6 (operand1 _i:reg_3)) (_op_6 (operand1 _i:op2imm_3)) (_imm_6 (operand2 _i:op2imm_3))) (if (hwreg? _rs1_6) (peep-reg/op2imm/check _as_3 _op_6 _rs1_6 _imm_6 (operand4 _i:check_3) (let* ((_t1_7_10 (operand1 _i:check_3)) (_t2_7_13 (let* ((_t1_17_20 (operand2 _i:check_3)) (_t2_17_23 (cons (operand3 _i:check_3) '()))) (let () (cons _t1_17_20 _t2_17_23))))) (let () (cons _t1_7_10 _t2_7_13))) _tail_3) (unspecified))))) (_reg-op2imm-check_2 _as_1 _i:reg_1 _i:op2imm_1 _i:check_1 _tail_1))))) 'reg-op2imm-check))
(let () (begin (set! op2imm-check (lambda (_as_1 _i:op2imm_1 _i:check_1 _tail_1) (let ((_op2imm-check_2 0)) (begin (set! _op2imm-check_2 (lambda (_as_3 _i:op2imm_3 _i:check_3 _tail_3) (let ((_op_6 (operand1 _i:op2imm_3)) (_imm_6 (operand2 _i:op2imm_3))) (peep-reg/op2imm/check _as_3 _op_6 'result _imm_6 (operand4 _i:check_3) (let* ((_t1_7_10 (operand1 _i:check_3)) (_t2_7_13 (let* ((_t1_17_20 (operand2 _i:check_3)) (_t2_17_23 (cons (operand3 _i:check_3) '()))) (let () (cons _t1_17_20 _t2_17_23))))) (let () (cons _t1_7_10 _t2_7_13))) _tail_3)))) (_op2imm-check_2 _as_1 _i:op2imm_1 _i:check_1 _tail_1))))) 'op2imm-check))
(let () (begin (set! peep-reg/op2imm/check (lambda (_as_1 _op_1 _rs1_1 _imm_1 _l1_1 _liveregs_1 _tail_1) (let ((_peep-reg/op2imm/check_2 0)) (begin (set! _peep-reg/op2imm/check_2 (lambda (_as_3 _op_3 _rs1_3 _imm_3 _l1_3 _liveregs_3 _tail_3) (let ((_op_6 (let ((_temp_58_61 _op_3)) (if (memv _temp_58_61 '(<:fix:fix)) 'internal:check-<:fix:fix/imm (if (memv _temp_58_61 '(<=:fix:fix)) 'internal:check-<=:fix:fix/imm (if (memv _temp_58_61 '(>=:fix:fix)) 'internal:check->=:fix:fix/imm #f)))))) (if _op_6 (as-source! _as_3 (cons (let* ((_t1_7_10 $reg/op2imm/check) (_t2_7_13 (let* ((_t1_17_20 _op_6) (_t2_17_23 (let* ((_t1_27_30 _rs1_3) (_t2_27_33 (let* ((_t1_37_40 _imm_3) (_t2_37_43 (let* ((_t1_47_50 _l1_3) (_t2_47_53 (cons _liveregs_3 '()))) (let () (cons _t1_47_50 _t2_47_53))))) (let () (cons _t1_37_40 _t2_37_43))))) (let () (cons _t1_27_30 _t2_27_33))))) (let () (cons _t1_17_20 _t2_17_23))))) (let () (cons _t1_7_10 _t2_7_13))) _tail_3)) (unspecified))))) (_peep-reg/op2imm/check_2 _as_1 _op_1 _rs1_1 _imm_1 _l1_1 _liveregs_1 _tail_1))))) 'peep-reg/op2imm/check))
(let () (begin (set! reg/op1/check-reg-op1-setreg (lambda (_as_1 _i:ro1check_1 _i:reg_1 _i:op1_1 _i:setreg_1 _tail_1) (let ((_reg/op1/check-reg-op1-setreg_2 0)) (begin (set! _reg/op1/check-reg-op1-setreg_2 (lambda (_as_3 _i:ro1check_3 _i:reg_3 _i:op1_3 _i:setreg_3 _tail_3) (let ((_o1_6 (operand1 _i:ro1check_3)) (_r1_6 (operand2 _i:ro1check_3)) (_r2_6 (operand1 _i:reg_3)) (_o2_6 (operand1 _i:op1_3)) (_r3_6 (operand1 _i:setreg_3))) (if (if (eq? _o1_6 'internal:check-vector?) (if (eq? _r1_6 _r2_6) (if (eq? _o2_6 'vector-length:vec) (if (hwreg? _r1_6) (hwreg? _r3_6) #f) #f) #f) #f) (as-source! _as_3 (cons (let* ((_t1_12_15 $reg/op2/check) (_t2_12_18 (let* ((_t1_22_25 'internal:check-vector?/vector-length:vec) (_t2_22_28 (let* ((_t1_32_35 _r1_6) (_t2_32_38 (let* ((_t1_42_45 _r3_6) (_t2_42_48 (let* ((_t1_52_55 (operand3 _i:ro1check_3)) (_t2_52_58 (cons (operand4 _i:ro1check_3) '()))) (let () (cons _t1_52_55 _t2_52_58))))) (let () (cons _t1_42_45 _t2_42_48))))) (let () (cons _t1_32_35 _t2_32_38))))) (let () (cons _t1_22_25 _t2_22_28))))) (let () (cons _t1_12_15 _t2_12_18))) _tail_3)) (unspecified))))) (_reg/op1/check-reg-op1-setreg_2 _as_1 _i:ro1check_1 _i:reg_1 _i:op1_1 _i:setreg_1 _tail_1))))) 'reg/op1/check-reg-op1-setreg))
(let () (begin (set! reg/op2/check-reg-op2imm-check (lambda (_as_1 _i:ro2check_1 _i:reg_1 _i:op2imm_1 _i:check_1 _tail_1) (let ((_reg/op2/check-reg-op2imm-check_2 0)) (begin (set! _reg/op2/check-reg-op2imm-check_2 (lambda (_as_3 _i:ro2check_3 _i:reg_3 _i:op2imm_3 _i:check_3 _tail_3) (let ((_o1_6 (operand1 _i:ro2check_3)) (_rs1_6 (operand2 _i:ro2check_3)) (_rs2_6 (operand3 _i:ro2check_3)) (_l1_6 (operand4 _i:ro2check_3)) (_live_6 (operand5 _i:ro2check_3)) (_rs3_6 (operand1 _i:reg_3)) (_o2_6 (operand1 _i:op2imm_3)) (_x_6 (operand2 _i:op2imm_3)) (_l2_6 (operand4 _i:check_3))) (if (if (eq? _o1_6 'internal:check-<:fix:fix) (if (eq? _o2_6 '>=:fix:fix) (if (eq? _rs1_6 _rs3_6) (if (eq? _x_6 0) (eq? _l1_6 _l2_6) #f) #f) #f) #f) (as-source! _as_3 (cons (let* ((_t1_12_15 $reg/op2/check) (_t2_12_18 (let* ((_t1_22_25 'internal:check-range) (_t2_22_28 (let* ((_t1_32_35 _rs1_6) (_t2_32_38 (let* ((_t1_42_45 _rs2_6) (_t2_42_48 (let* ((_t1_52_55 _l1_6) (_t2_52_58 (cons _live_6 '()))) (let () (cons _t1_52_55 _t2_52_58))))) (let () (cons _t1_42_45 _t2_42_48))))) (let () (cons _t1_32_35 _t2_32_38))))) (let () (cons _t1_22_25 _t2_22_28))))) (let () (cons _t1_12_15 _t2_12_18))) _tail_3)) (unspecified))))) (_reg/op2/check-reg-op2imm-check_2 _as_1 _i:ro2check_1 _i:reg_1 _i:op2imm_1 _i:check_1 _tail_1))))) 'reg/op2/check-reg-op2imm-check))
(let () (begin (set! reg-op3 (lambda (_as_1 _i:reg_1 _i:op3_1 _tail_1) (let ((_reg-op3_2 0)) (begin (set! _reg-op3_2 (lambda (_as_3 _i:reg_3 _i:op3_3 _tail_3) (let ((_rs1_6 (operand1 _i:reg_3)) (_rs2_6 (operand2 _i:op3_3)) (_rs3_6 (operand3 _i:op3_3)) (_op_6 (operand1 _i:op3_3))) (if (hwreg? _rs1_6) (let ((_op_9 (let ((_temp_51_54 _op_6)) (if (memv _temp_51_54 '(vector-set!)) 'internal:vector-set! (if (memv _temp_51_54 '(string-set!)) 'internal:string-set! #f))))) (if _op_9 (as-source! _as_3 (cons (let* ((_t1_10_13 $reg/op3) (_t2_10_16 (let* ((_t1_20_23 _op_9) (_t2_20_26 (let* ((_t1_30_33 _rs1_6) (_t2_30_36 (let* ((_t1_40_43 _rs2_6) (_t2_40_46 (cons _rs3_6 '()))) (let () (cons _t1_40_43 _t2_40_46))))) (let () (cons _t1_30_33 _t2_30_36))))) (let () (cons _t1_20_23 _t2_20_26))))) (let () (cons _t1_10_13 _t2_10_16))) _tail_3)) (unspecified))) (unspecified))))) (_reg-op3_2 _as_1 _i:reg_1 _i:op3_1 _tail_1))))) 'reg-op3))
(let () (begin (set! reg-setreg (lambda (_as_1 _i:reg_1 _i:setreg_1 _tail_1) (let ((_reg-setreg_2 0)) (begin (set! _reg-setreg_2 (lambda (_as_3 _i:reg_3 _i:setreg_3 _tail_3) (let ((_rs_6 (operand1 _i:reg_3)) (_rd_6 (operand1 _i:setreg_3))) (if (= _rs_6 _rd_6) (as-source! _as_3 _tail_3) (as-source! _as_3 (cons (let* ((_t1_7_10 $movereg) (_t2_7_13 (let* ((_t1_17_20 _rs_6) (_t2_17_23 (cons _rd_6 '()))) (let () (cons _t1_17_20 _t2_17_23))))) (let () (cons _t1_7_10 _t2_7_13))) _tail_3)))))) (_reg-setreg_2 _as_1 _i:reg_1 _i:setreg_1 _tail_1))))) 'reg-setreg))
(let () (begin (set! reg-branchf (lambda (_as_1 _i:reg_1 _i:branchf_1 _tail_1) (let ((_reg-branchf_2 0)) (begin (set! _reg-branchf_2 (lambda (_as_3 _i:reg_3 _i:branchf_3 _tail_3) (let ((_rs_6 (operand1 _i:reg_3)) (_l_6 (operand1 _i:branchf_3))) (if (hwreg? _rs_6) (as-source! _as_3 (cons (let* ((_t1_7_10 $reg/branchf) (_t2_7_13 (let* ((_t1_17_20 _rs_6) (_t2_17_23 (cons _l_6 '()))) (let () (cons _t1_17_20 _t2_17_23))))) (let () (cons _t1_7_10 _t2_7_13))) _tail_3)) (unspecified))))) (_reg-branchf_2 _as_1 _i:reg_1 _i:branchf_1 _tail_1))))) 'reg-branchf))
(let () (begin (set! const-setreg (lambda (_as_1 _i:const_1 _i:setreg_1 _tail_1) (let ((_const-setreg_2 0)) (begin (set! _const-setreg_2 (lambda (_as_3 _i:const_3 _i:setreg_3 _tail_3) (let ((_c_6 (operand1 _i:const_3)) (_rd_6 (operand1 _i:setreg_3))) (if (hwreg? _rd_6) (as-source! _as_3 (cons (let* ((_t1_7_10 $const/setreg) (_t2_7_13 (let* ((_t1_17_20 _c_6) (_t2_17_23 (cons _rd_6 '()))) (let () (cons _t1_17_20 _t2_17_23))))) (let () (cons _t1_7_10 _t2_7_13))) _tail_3)) (unspecified))))) (_const-setreg_2 _as_1 _i:const_1 _i:setreg_1 _tail_1))))) 'const-setreg))
(let () (begin (set! const-op2 (lambda (_as_1 _i:const_1 _i:op2_1 _tail_1) (let ((_const-op2_2 0)) (begin (set! _const-op2_2 (lambda (_as_3 _i:const_3 _i:op2_3 _tail_3) (let ((_vn_6 '#(make-vector:0 make-vector:1 make-vector:2 make-vector:3 make-vector:4 make-vector:5 make-vector:6 make-vector:7 make-vector:8 make-vector:9)) (_c_6 (operand1 _i:const_3)) (_op_6 (operand1 _i:op2_3)) (_r_6 (operand2 _i:op2_3))) (if (if (eq? _op_6 'make-vector) (if (fixnum? _c_6) (let ((_t_10_13 _c_6)) (if (<= 0 _t_10_13) (<= _t_10_13 9) #f)) #f) #f) (as-source! _as_3 (cons (let* ((_t1_16_19 $op2) (_t2_16_22 (let* ((_t1_26_29 (let ((_v_37_40 _vn_6) (_i_37_40 _c_6)) (begin (_check! (fixnum? _i_37_40) 40 _v_37_40 _i_37_40) (_check! (vector? _v_37_40) 40 _v_37_40 _i_37_40) (_check! (<:fix:fix _i_37_40 (vector-length:vec _v_37_40)) 40 _v_37_40 _i_37_40) (_check! (>=:fix:fix _i_37_40 0) 40 _v_37_40 _i_37_40) (vector-ref:trusted _v_37_40 _i_37_40)))) (_t2_26_32 (cons _r_6 '()))) (let () (cons _t1_26_29 _t2_26_32))))) (let () (cons _t1_16_19 _t2_16_22))) _tail_3)) (unspecified))))) (_const-op2_2 _as_1 _i:const_1 _i:op2_1 _tail_1))))) 'const-op2))
(let () (begin (set! const-return (lambda (_as_1 _i:const_1 _i:return_1 _tail_1) (let ((_const-return_2 0)) (begin (set! _const-return_2 (lambda (_as_3 _i:const_3 _i:return_3 _tail_3) (let ((_c_6 (operand1 _i:const_3))) (if (let ((_temp_7_10 (if (number? _c_6) (immediate-int? _c_6) #f))) (if _temp_7_10 _temp_7_10 (let ((_temp_11_14 (null? _c_6))) (if _temp_11_14 _temp_11_14 (boolean? _c_6))))) (as-source! _as_3 (cons (let* ((_t1_18_21 $const/return) (_t2_18_24 (cons _c_6 '()))) (let () (cons _t1_18_21 _t2_18_24))) _tail_3)) (unspecified))))) (_const-return_2 _as_1 _i:const_1 _i:return_1 _tail_1))))) 'const-return))
(let () (begin (set! setrtn-branch (lambda (_as_1 _i:setrtn_1 _i:branch_1 _i:align_1 _i:label_1 _tail_1) (let ((_setrtn-branch_2 0)) (begin (set! _setrtn-branch_2 (lambda (_as_3 _i:setrtn_3 _i:branch_3 _i:align_3 _i:label_3 _tail_3) (let ((_return-label_6 (operand1 _i:setrtn_3)) (_branch-ops_6 (let ((_x_7_10 _i:branch_3)) (begin (_check! (pair? _x_7_10) 1 _x_7_10) (cdr:pair _x_7_10)))) (_label_6 (operand1 _i:label_3))) (if (= _return-label_6 _label_6) (as-source! _as_3 (cons (cons $setrtn/branch _branch-ops_6) (cons _i:label_3 _tail_3))) (unspecified))))) (_setrtn-branch_2 _as_1 _i:setrtn_1 _i:branch_1 _i:align_1 _i:label_1 _tail_1))))) 'setrtn-branch))
(let () (begin (set! setrtn-invoke (lambda (_as_1 _i:setrtn_1 _i:invoke_1 _i:align_1 _i:label_1 _tail_1) (let ((_setrtn-invoke_2 0)) (begin (set! _setrtn-invoke_2 (lambda (_as_3 _i:setrtn_3 _i:invoke_3 _i:align_3 _i:label_3 _tail_3) (let ((_return-label_6 (operand1 _i:setrtn_3)) (_invoke-ops_6 (operand1 _i:invoke_3)) (_label_6 (operand1 _i:label_3))) (if (if #f (= _return-label_6 _label_6) #f) (as-source! _as_3 (cons (cons $setrtn/invoke _invoke-ops_6) (cons _i:label_3 _tail_3))) (unspecified))))) (_setrtn-invoke_2 _as_1 _i:setrtn_1 _i:invoke_1 _i:align_1 _i:label_1 _tail_1))))) 'setrtn-invoke))
(let () (begin (set! branch-and-label (lambda (_as_1 _i:branch_1 _i:align_1 _i:label_1 _tail_1) (let ((_branch-and-label_2 0)) (begin (set! _branch-and-label_2 (lambda (_as_3 _i:branch_3 _i:align_3 _i:label_3 _tail_3) (let ((_branch-label_6 (operand1 _i:branch_3)) (_label_6 (operand1 _i:label_3))) (if (= _branch-label_6 _label_6) (as-source! _as_3 (cons _i:align_3 (cons _i:label_3 _tail_3))) (unspecified))))) (_branch-and-label_2 _as_1 _i:branch_1 _i:align_1 _i:label_1 _tail_1))))) 'branch-and-label))
(let () (begin (set! global-setreg (lambda (_as_1 _i:global_1 _i:setreg_1 _tail_1) (let ((_global-setreg_2 0)) (begin (set! _global-setreg_2 (lambda (_as_3 _i:global_3 _i:setreg_3 _tail_3) (let ((_global_6 (operand1 _i:global_3)) (_rd_6 (operand1 _i:setreg_3))) (if (hwreg? _rd_6) (as-source! _as_3 (cons (let* ((_t1_7_10 $global/setreg) (_t2_7_13 (let* ((_t1_17_20 _global_6) (_t2_17_23 (cons _rd_6 '()))) (let () (cons _t1_17_20 _t2_17_23))))) (let () (cons _t1_7_10 _t2_7_13))) _tail_3)) (unspecified))))) (_global-setreg_2 _as_1 _i:global_1 _i:setreg_1 _tail_1))))) 'global-setreg))
(let () (begin (set! global-invoke (lambda (_as_1 _i:global_1 _i:invoke_1 _tail_1) (let ((_global-invoke_2 0)) (begin (set! _global-invoke_2 (lambda (_as_3 _i:global_3 _i:invoke_3 _tail_3) (let ((_global_6 (operand1 _i:global_3)) (_argc_6 (operand1 _i:invoke_3))) (if (not (if (unsafe-code) (catch-undefined-globals) #f)) (as-source! _as_3 (cons (let* ((_t1_9_12 $global/invoke) (_t2_9_15 (let* ((_t1_19_22 _global_6) (_t2_19_25 (cons _argc_6 '()))) (let () (cons _t1_19_22 _t2_19_25))))) (let () (cons _t1_9_12 _t2_9_15))) _tail_3)) (unspecified))))) (_global-invoke_2 _as_1 _i:global_1 _i:invoke_1 _tail_1))))) 'global-invoke))
(let () (begin (set! global-setrtn-invoke (lambda (_as_1 _i:global_1 _i:setrtn_1 _i:invoke_1 _tail_1) (let ((_global-setrtn-invoke_2 0)) (begin (set! _global-setrtn-invoke_2 (lambda (_as_3 _i:global_3 _i:setrtn_3 _i:invoke_3 _tail_3) (let ((_global_6 (operand1 _i:global_3)) (_argc_6 (operand1 _i:invoke_3))) (if (not (if (unsafe-code) (catch-undefined-globals) #f)) (as-source! _as_3 (cons _i:setrtn_3 (cons (let* ((_t1_9_12 $global/invoke) (_t2_9_15 (let* ((_t1_19_22 _global_6) (_t2_19_25 (cons _argc_6 '()))) (let () (cons _t1_19_22 _t2_19_25))))) (let () (cons _t1_9_12 _t2_9_15))) _tail_3))) (unspecified))))) (_global-setrtn-invoke_2 _as_1 _i:global_1 _i:setrtn_1 _i:invoke_1 _tail_1))))) 'global-setrtn-invoke))
(let () (begin (set! reg-setglbl (lambda (_as_1 _i:reg_1 _i:setglbl_1 _tail_1) (let ((_reg-setglbl_2 0)) (begin (set! _reg-setglbl_2 (lambda (_as_3 _i:reg_3 _i:setglbl_3 _tail_3) (let ((_rs_6 (operand1 _i:reg_3)) (_global_6 (operand1 _i:setglbl_3))) (if (hwreg? _rs_6) (as-source! _as_3 (cons (let* ((_t1_7_10 $reg/setglbl) (_t2_7_13 (let* ((_t1_17_20 _rs_6) (_t2_17_23 (cons _global_6 '()))) (let () (cons _t1_17_20 _t2_17_23))))) (let () (cons _t1_7_10 _t2_7_13))) _tail_3)) (unspecified))))) (_reg-setglbl_2 _as_1 _i:reg_1 _i:setglbl_1 _tail_1))))) 'reg-setglbl))
(let () (begin (set! peeptest (lambda (_istream_1) (let ((_peeptest_2 0)) (begin (set! _peeptest_2 (lambda (_istream_3) (let* ((_as_6 (make-assembly-structure _istream_3)) (_l_9 '())) (let () (let ((_loop_12 (unspecified))) (begin (set! _loop_12 (lambda (_l_13) (if (null? (as-source _as_6)) (reverse _l_13) (begin (peep _as_6) (let ((_a_16 (let ((_x_21_24 (as-source _as_6))) (begin (_check! (pair? _x_21_24) 0 _x_21_24) (car:pair _x_21_24))))) (begin (as-source! _as_6 (let ((_x_17_20 (as-source _as_6))) (begin (_check! (pair? _x_17_20) 1 _x_17_20) (cdr:pair _x_17_20)))) (_loop_12 (cons _a_16 _l_13)))))))) (_loop_12 _l_9))))))) (_peeptest_2 _istream_1))))) 'peeptest))
(let () (begin (set! roundup8 (lambda (_n_1) (let ((_roundup8_2 0)) (begin (set! _roundup8_2 (lambda (_n_3) (* (quotient (+ _n_3 7) 8) 8))) (_roundup8_2 _n_1))))) 'roundup8))
(let () (begin (set! regname (let ((_v_3 (let* ((_t_9_41_46 $r_reg31) (_t_9_40_49 $r_reg30) (_t_9_39_52 $r_reg29) (_t_9_38_55 $r_reg28) (_t_9_37_58 $r_reg27) (_t_9_36_61 $r_reg26) (_t_9_35_64 $r_reg25) (_t_9_34_67 $r_reg24) (_t_9_33_70 $r_reg23) (_t_9_32_73 $r_reg22) (_t_9_31_76 $r_reg21) (_t_9_30_79 $r_reg20) (_t_9_29_82 $r_reg19) (_t_9_28_85 $r_reg18) (_t_9_27_88 $r_reg17) (_t_9_26_91 $r_reg16) (_t_9_25_94 $r_reg15) (_t_9_24_97 $r_reg14) (_t_9_23_100 $r_reg13) (_t_9_22_103 $r_reg12) (_t_9_21_106 $r_reg11) (_t_9_20_109 $r_reg10) (_t_9_19_112 $r_reg9) (_t_9_18_115 $r_reg8) (_t_9_17_118 $r_reg7) (_t_9_16_121 $r_reg6) (_t_9_15_124 $r_reg5) (_t_9_14_127 $r_reg4) (_t_9_13_130 $r_reg3) (_t_9_12_133 $r_reg2) (_t_9_11_136 $r_reg1) (_t_9_10_139 $r_reg0) (_v_9_43_142 (make-vector 32 _t_9_41_46))) (let () (begin (let ((_v_146_149 _v_9_43_142) (_i_146_149 30) (_x_146_149 _t_9_40_49)) (begin (_check! (fixnum? _i_146_149) 41 _v_146_149 _i_146_149 _x_146_149) (_check! (vector? _v_146_149) 41 _v_146_149 _i_146_149 _x_146_149) (_check! (<:fix:fix _i_146_149 (vector-length:vec _v_146_149)) 41 _v_146_149 _i_146_149 _x_146_149) (_check! (>=:fix:fix _i_146_149 0) 41 _v_146_149 _i_146_149 _x_146_149) (vector-set!:trusted _v_146_149 _i_146_149 _x_146_149))) (let ((_v_150_153 _v_9_43_142) (_i_150_153 29) (_x_150_153 _t_9_39_52)) (begin (_check! (fixnum? _i_150_153) 41 _v_150_153 _i_150_153 _x_150_153) (_check! (vector? _v_150_153) 41 _v_150_153 _i_150_153 _x_150_153) (_check! (<:fix:fix _i_150_153 (vector-length:vec _v_150_153)) 41 _v_150_153 _i_150_153 _x_150_153) (_check! (>=:fix:fix _i_150_153 0) 41 _v_150_153 _i_150_153 _x_150_153) (vector-set!:trusted _v_150_153 _i_150_153 _x_150_153))) (let ((_v_154_157 _v_9_43_142) (_i_154_157 28) (_x_154_157 _t_9_38_55)) (begin (_check! (fixnum? _i_154_157) 41 _v_154_157 _i_154_157 _x_154_157) (_check! (vector? _v_154_157) 41 _v_154_157 _i_154_157 _x_154_157) (_check! (<:fix:fix _i_154_157 (vector-length:vec _v_154_157)) 41 _v_154_157 _i_154_157 _x_154_157) (_check! (>=:fix:fix _i_154_157 0) 41 _v_154_157 _i_154_157 _x_154_157) (vector-set!:trusted _v_154_157 _i_154_157 _x_154_157))) (let ((_v_158_161 _v_9_43_142) (_i_158_161 27) (_x_158_161 _t_9_37_58)) (begin (_check! (fixnum? _i_158_161) 41 _v_158_161 _i_158_161 _x_158_161) (_check! (vector? _v_158_161) 41 _v_158_161 _i_158_161 _x_158_161) (_check! (<:fix:fix _i_158_161 (vector-length:vec _v_158_161)) 41 _v_158_161 _i_158_161 _x_158_161) (_check! (>=:fix:fix _i_158_161 0) 41 _v_158_161 _i_158_161 _x_158_161) (vector-set!:trusted _v_158_161 _i_158_161 _x_158_161))) (let ((_v_162_165 _v_9_43_142) (_i_162_165 26) (_x_162_165 _t_9_36_61)) (begin (_check! (fixnum? _i_162_165) 41 _v_162_165 _i_162_165 _x_162_165) (_check! (vector? _v_162_165) 41 _v_162_165 _i_162_165 _x_162_165) (_check! (<:fix:fix _i_162_165 (vector-length:vec _v_162_165)) 41 _v_162_165 _i_162_165 _x_162_165) (_check! (>=:fix:fix _i_162_165 0) 41 _v_162_165 _i_162_165 _x_162_165) (vector-set!:trusted _v_162_165 _i_162_165 _x_162_165))) (let ((_v_166_169 _v_9_43_142) (_i_166_169 25) (_x_166_169 _t_9_35_64)) (begin (_check! (fixnum? _i_166_169) 41 _v_166_169 _i_166_169 _x_166_169) (_check! (vector? _v_166_169) 41 _v_166_169 _i_166_169 _x_166_169) (_check! (<:fix:fix _i_166_169 (vector-length:vec _v_166_169)) 41 _v_166_169 _i_166_169 _x_166_169) (_check! (>=:fix:fix _i_166_169 0) 41 _v_166_169 _i_166_169 _x_166_169) (vector-set!:trusted _v_166_169 _i_166_169 _x_166_169))) (let ((_v_170_173 _v_9_43_142) (_i_170_173 24) (_x_170_173 _t_9_34_67)) (begin (_check! (fixnum? _i_170_173) 41 _v_170_173 _i_170_173 _x_170_173) (_check! (vector? _v_170_173) 41 _v_170_173 _i_170_173 _x_170_173) (_check! (<:fix:fix _i_170_173 (vector-length:vec _v_170_173)) 41 _v_170_173 _i_170_173 _x_170_173) (_check! (>=:fix:fix _i_170_173 0) 41 _v_170_173 _i_170_173 _x_170_173) (vector-set!:trusted _v_170_173 _i_170_173 _x_170_173))) (let ((_v_174_177 _v_9_43_142) (_i_174_177 23) (_x_174_177 _t_9_33_70)) (begin (_check! (fixnum? _i_174_177) 41 _v_174_177 _i_174_177 _x_174_177) (_check! (vector? _v_174_177) 41 _v_174_177 _i_174_177 _x_174_177) (_check! (<:fix:fix _i_174_177 (vector-length:vec _v_174_177)) 41 _v_174_177 _i_174_177 _x_174_177) (_check! (>=:fix:fix _i_174_177 0) 41 _v_174_177 _i_174_177 _x_174_177) (vector-set!:trusted _v_174_177 _i_174_177 _x_174_177))) (let ((_v_178_181 _v_9_43_142) (_i_178_181 22) (_x_178_181 _t_9_32_73)) (begin (_check! (fixnum? _i_178_181) 41 _v_178_181 _i_178_181 _x_178_181) (_check! (vector? _v_178_181) 41 _v_178_181 _i_178_181 _x_178_181) (_check! (<:fix:fix _i_178_181 (vector-length:vec _v_178_181)) 41 _v_178_181 _i_178_181 _x_178_181) (_check! (>=:fix:fix _i_178_181 0) 41 _v_178_181 _i_178_181 _x_178_181) (vector-set!:trusted _v_178_181 _i_178_181 _x_178_181))) (let ((_v_182_185 _v_9_43_142) (_i_182_185 21) (_x_182_185 _t_9_31_76)) (begin (_check! (fixnum? _i_182_185) 41 _v_182_185 _i_182_185 _x_182_185) (_check! (vector? _v_182_185) 41 _v_182_185 _i_182_185 _x_182_185) (_check! (<:fix:fix _i_182_185 (vector-length:vec _v_182_185)) 41 _v_182_185 _i_182_185 _x_182_185) (_check! (>=:fix:fix _i_182_185 0) 41 _v_182_185 _i_182_185 _x_182_185) (vector-set!:trusted _v_182_185 _i_182_185 _x_182_185))) (let ((_v_186_189 _v_9_43_142) (_i_186_189 20) (_x_186_189 _t_9_30_79)) (begin (_check! (fixnum? _i_186_189) 41 _v_186_189 _i_186_189 _x_186_189) (_check! (vector? _v_186_189) 41 _v_186_189 _i_186_189 _x_186_189) (_check! (<:fix:fix _i_186_189 (vector-length:vec _v_186_189)) 41 _v_186_189 _i_186_189 _x_186_189) (_check! (>=:fix:fix _i_186_189 0) 41 _v_186_189 _i_186_189 _x_186_189) (vector-set!:trusted _v_186_189 _i_186_189 _x_186_189))) (let ((_v_190_193 _v_9_43_142) (_i_190_193 19) (_x_190_193 _t_9_29_82)) (begin (_check! (fixnum? _i_190_193) 41 _v_190_193 _i_190_193 _x_190_193) (_check! (vector? _v_190_193) 41 _v_190_193 _i_190_193 _x_190_193) (_check! (<:fix:fix _i_190_193 (vector-length:vec _v_190_193)) 41 _v_190_193 _i_190_193 _x_190_193) (_check! (>=:fix:fix _i_190_193 0) 41 _v_190_193 _i_190_193 _x_190_193) (vector-set!:trusted _v_190_193 _i_190_193 _x_190_193))) (let ((_v_194_197 _v_9_43_142) (_i_194_197 18) (_x_194_197 _t_9_28_85)) (begin (_check! (fixnum? _i_194_197) 41 _v_194_197 _i_194_197 _x_194_197) (_check! (vector? _v_194_197) 41 _v_194_197 _i_194_197 _x_194_197) (_check! (<:fix:fix _i_194_197 (vector-length:vec _v_194_197)) 41 _v_194_197 _i_194_197 _x_194_197) (_check! (>=:fix:fix _i_194_197 0) 41 _v_194_197 _i_194_197 _x_194_197) (vector-set!:trusted _v_194_197 _i_194_197 _x_194_197))) (let ((_v_198_201 _v_9_43_142) (_i_198_201 17) (_x_198_201 _t_9_27_88)) (begin (_check! (fixnum? _i_198_201) 41 _v_198_201 _i_198_201 _x_198_201) (_check! (vector? _v_198_201) 41 _v_198_201 _i_198_201 _x_198_201) (_check! (<:fix:fix _i_198_201 (vector-length:vec _v_198_201)) 41 _v_198_201 _i_198_201 _x_198_201) (_check! (>=:fix:fix _i_198_201 0) 41 _v_198_201 _i_198_201 _x_198_201) (vector-set!:trusted _v_198_201 _i_198_201 _x_198_201))) (let ((_v_202_205 _v_9_43_142) (_i_202_205 16) (_x_202_205 _t_9_26_91)) (begin (_check! (fixnum? _i_202_205) 41 _v_202_205 _i_202_205 _x_202_205) (_check! (vector? _v_202_205) 41 _v_202_205 _i_202_205 _x_202_205) (_check! (<:fix:fix _i_202_205 (vector-length:vec _v_202_205)) 41 _v_202_205 _i_202_205 _x_202_205) (_check! (>=:fix:fix _i_202_205 0) 41 _v_202_205 _i_202_205 _x_202_205) (vector-set!:trusted _v_202_205 _i_202_205 _x_202_205))) (let ((_v_206_209 _v_9_43_142) (_i_206_209 15) (_x_206_209 _t_9_25_94)) (begin (_check! (fixnum? _i_206_209) 41 _v_206_209 _i_206_209 _x_206_209) (_check! (vector? _v_206_209) 41 _v_206_209 _i_206_209 _x_206_209) (_check! (<:fix:fix _i_206_209 (vector-length:vec _v_206_209)) 41 _v_206_209 _i_206_209 _x_206_209) (_check! (>=:fix:fix _i_206_209 0) 41 _v_206_209 _i_206_209 _x_206_209) (vector-set!:trusted _v_206_209 _i_206_209 _x_206_209))) (let ((_v_210_213 _v_9_43_142) (_i_210_213 14) (_x_210_213 _t_9_24_97)) (begin (_check! (fixnum? _i_210_213) 41 _v_210_213 _i_210_213 _x_210_213) (_check! (vector? _v_210_213) 41 _v_210_213 _i_210_213 _x_210_213) (_check! (<:fix:fix _i_210_213 (vector-length:vec _v_210_213)) 41 _v_210_213 _i_210_213 _x_210_213) (_check! (>=:fix:fix _i_210_213 0) 41 _v_210_213 _i_210_213 _x_210_213) (vector-set!:trusted _v_210_213 _i_210_213 _x_210_213))) (let ((_v_214_217 _v_9_43_142) (_i_214_217 13) (_x_214_217 _t_9_23_100)) (begin (_check! (fixnum? _i_214_217) 41 _v_214_217 _i_214_217 _x_214_217) (_check! (vector? _v_214_217) 41 _v_214_217 _i_214_217 _x_214_217) (_check! (<:fix:fix _i_214_217 (vector-length:vec _v_214_217)) 41 _v_214_217 _i_214_217 _x_214_217) (_check! (>=:fix:fix _i_214_217 0) 41 _v_214_217 _i_214_217 _x_214_217) (vector-set!:trusted _v_214_217 _i_214_217 _x_214_217))) (let ((_v_218_221 _v_9_43_142) (_i_218_221 12) (_x_218_221 _t_9_22_103)) (begin (_check! (fixnum? _i_218_221) 41 _v_218_221 _i_218_221 _x_218_221) (_check! (vector? _v_218_221) 41 _v_218_221 _i_218_221 _x_218_221) (_check! (<:fix:fix _i_218_221 (vector-length:vec _v_218_221)) 41 _v_218_221 _i_218_221 _x_218_221) (_check! (>=:fix:fix _i_218_221 0) 41 _v_218_221 _i_218_221 _x_218_221) (vector-set!:trusted _v_218_221 _i_218_221 _x_218_221))) (let ((_v_222_225 _v_9_43_142) (_i_222_225 11) (_x_222_225 _t_9_21_106)) (begin (_check! (fixnum? _i_222_225) 41 _v_222_225 _i_222_225 _x_222_225) (_check! (vector? _v_222_225) 41 _v_222_225 _i_222_225 _x_222_225) (_check! (<:fix:fix _i_222_225 (vector-length:vec _v_222_225)) 41 _v_222_225 _i_222_225 _x_222_225) (_check! (>=:fix:fix _i_222_225 0) 41 _v_222_225 _i_222_225 _x_222_225) (vector-set!:trusted _v_222_225 _i_222_225 _x_222_225))) (let ((_v_226_229 _v_9_43_142) (_i_226_229 10) (_x_226_229 _t_9_20_109)) (begin (_check! (fixnum? _i_226_229) 41 _v_226_229 _i_226_229 _x_226_229) (_check! (vector? _v_226_229) 41 _v_226_229 _i_226_229 _x_226_229) (_check! (<:fix:fix _i_226_229 (vector-length:vec _v_226_229)) 41 _v_226_229 _i_226_229 _x_226_229) (_check! (>=:fix:fix _i_226_229 0) 41 _v_226_229 _i_226_229 _x_226_229) (vector-set!:trusted _v_226_229 _i_226_229 _x_226_229))) (let ((_v_230_233 _v_9_43_142) (_i_230_233 9) (_x_230_233 _t_9_19_112)) (begin (_check! (fixnum? _i_230_233) 41 _v_230_233 _i_230_233 _x_230_233) (_check! (vector? _v_230_233) 41 _v_230_233 _i_230_233 _x_230_233) (_check! (<:fix:fix _i_230_233 (vector-length:vec _v_230_233)) 41 _v_230_233 _i_230_233 _x_230_233) (_check! (>=:fix:fix _i_230_233 0) 41 _v_230_233 _i_230_233 _x_230_233) (vector-set!:trusted _v_230_233 _i_230_233 _x_230_233))) (let ((_v_234_237 _v_9_43_142) (_i_234_237 8) (_x_234_237 _t_9_18_115)) (begin (_check! (fixnum? _i_234_237) 41 _v_234_237 _i_234_237 _x_234_237) (_check! (vector? _v_234_237) 41 _v_234_237 _i_234_237 _x_234_237) (_check! (<:fix:fix _i_234_237 (vector-length:vec _v_234_237)) 41 _v_234_237 _i_234_237 _x_234_237) (_check! (>=:fix:fix _i_234_237 0) 41 _v_234_237 _i_234_237 _x_234_237) (vector-set!:trusted _v_234_237 _i_234_237 _x_234_237))) (let ((_v_238_241 _v_9_43_142) (_i_238_241 7) (_x_238_241 _t_9_17_118)) (begin (_check! (fixnum? _i_238_241) 41 _v_238_241 _i_238_241 _x_238_241) (_check! (vector? _v_238_241) 41 _v_238_241 _i_238_241 _x_238_241) (_check! (<:fix:fix _i_238_241 (vector-length:vec _v_238_241)) 41 _v_238_241 _i_238_241 _x_238_241) (_check! (>=:fix:fix _i_238_241 0) 41 _v_238_241 _i_238_241 _x_238_241) (vector-set!:trusted _v_238_241 _i_238_241 _x_238_241))) (let ((_v_242_245 _v_9_43_142) (_i_242_245 6) (_x_242_245 _t_9_16_121)) (begin (_check! (fixnum? _i_242_245) 41 _v_242_245 _i_242_245 _x_242_245) (_check! (vector? _v_242_245) 41 _v_242_245 _i_242_245 _x_242_245) (_check! (<:fix:fix _i_242_245 (vector-length:vec _v_242_245)) 41 _v_242_245 _i_242_245 _x_242_245) (_check! (>=:fix:fix _i_242_245 0) 41 _v_242_245 _i_242_245 _x_242_245) (vector-set!:trusted _v_242_245 _i_242_245 _x_242_245))) (let ((_v_246_249 _v_9_43_142) (_i_246_249 5) (_x_246_249 _t_9_15_124)) (begin (_check! (fixnum? _i_246_249) 41 _v_246_249 _i_246_249 _x_246_249) (_check! (vector? _v_246_249) 41 _v_246_249 _i_246_249 _x_246_249) (_check! (<:fix:fix _i_246_249 (vector-length:vec _v_246_249)) 41 _v_246_249 _i_246_249 _x_246_249) (_check! (>=:fix:fix _i_246_249 0) 41 _v_246_249 _i_246_249 _x_246_249) (vector-set!:trusted _v_246_249 _i_246_249 _x_246_249))) (let ((_v_250_253 _v_9_43_142) (_i_250_253 4) (_x_250_253 _t_9_14_127)) (begin (_check! (fixnum? _i_250_253) 41 _v_250_253 _i_250_253 _x_250_253) (_check! (vector? _v_250_253) 41 _v_250_253 _i_250_253 _x_250_253) (_check! (<:fix:fix _i_250_253 (vector-length:vec _v_250_253)) 41 _v_250_253 _i_250_253 _x_250_253) (_check! (>=:fix:fix _i_250_253 0) 41 _v_250_253 _i_250_253 _x_250_253) (vector-set!:trusted _v_250_253 _i_250_253 _x_250_253))) (let ((_v_254_257 _v_9_43_142) (_i_254_257 3) (_x_254_257 _t_9_13_130)) (begin (_check! (fixnum? _i_254_257) 41 _v_254_257 _i_254_257 _x_254_257) (_check! (vector? _v_254_257) 41 _v_254_257 _i_254_257 _x_254_257) (_check! (<:fix:fix _i_254_257 (vector-length:vec _v_254_257)) 41 _v_254_257 _i_254_257 _x_254_257) (_check! (>=:fix:fix _i_254_257 0) 41 _v_254_257 _i_254_257 _x_254_257) (vector-set!:trusted _v_254_257 _i_254_257 _x_254_257))) (let ((_v_258_261 _v_9_43_142) (_i_258_261 2) (_x_258_261 _t_9_12_133)) (begin (_check! (fixnum? _i_258_261) 41 _v_258_261 _i_258_261 _x_258_261) (_check! (vector? _v_258_261) 41 _v_258_261 _i_258_261 _x_258_261) (_check! (<:fix:fix _i_258_261 (vector-length:vec _v_258_261)) 41 _v_258_261 _i_258_261 _x_258_261) (_check! (>=:fix:fix _i_258_261 0) 41 _v_258_261 _i_258_261 _x_258_261) (vector-set!:trusted _v_258_261 _i_258_261 _x_258_261))) (let ((_v_262_265 _v_9_43_142) (_i_262_265 1) (_x_262_265 _t_9_11_136)) (begin (_check! (fixnum? _i_262_265) 41 _v_262_265 _i_262_265 _x_262_265) (_check! (vector? _v_262_265) 41 _v_262_265 _i_262_265 _x_262_265) (_check! (<:fix:fix _i_262_265 (vector-length:vec _v_262_265)) 41 _v_262_265 _i_262_265 _x_262_265) (_check! (>=:fix:fix _i_262_265 0) 41 _v_262_265 _i_262_265 _x_262_265) (vector-set!:trusted _v_262_265 _i_262_265 _x_262_265))) (let ((_v_266_269 _v_9_43_142) (_i_266_269 0) (_x_266_269 _t_9_10_139)) (begin (_check! (fixnum? _i_266_269) 41 _v_266_269 _i_266_269 _x_266_269) (_check! (vector? _v_266_269) 41 _v_266_269 _i_266_269 _x_266_269) (_check! (<:fix:fix _i_266_269 (vector-length:vec _v_266_269)) 41 _v_266_269 _i_266_269 _x_266_269) (_check! (>=:fix:fix _i_266_269 0) 41 _v_266_269 _i_266_269 _x_266_269) (vector-set!:trusted _v_266_269 _i_266_269 _x_266_269))) _v_9_43_142))))) (lambda (_r_4) (let ((_v_5_8 _v_3) (_i_5_8 _r_4)) (begin (_check! (fixnum? _i_5_8) 40 _v_5_8 _i_5_8) (_check! (vector? _v_5_8) 40 _v_5_8 _i_5_8) (_check! (<:fix:fix _i_5_8 (vector-length:vec _v_5_8)) 40 _v_5_8 _i_5_8) (_check! (>=:fix:fix _i_5_8 0) 40 _v_5_8 _i_5_8) (vector-ref:trusted _v_5_8 _i_5_8)))))) 'regname))
(let () (begin (set! hardware-mapped? (lambda (_r_1) (let ((_hardware-mapped?_2 0)) (begin (set! _hardware-mapped?_2 (lambda (_r_3) (let ((_temp_4_7 (if (>= _r_3 $r_reg0) (<= _r_3 $r_reg7) #f))) (if _temp_4_7 _temp_4_7 (let ((_temp_8_11 (= _r_3 $r_argreg2))) (if _temp_8_11 _temp_8_11 (let ((_temp_12_15 (= _r_3 $r_argreg3))) (if _temp_12_15 _temp_12_15 (let ((_temp_16_19 (= _r_3 $r_result))) (if _temp_16_19 _temp_16_19 (let ((_temp_20_23 (= _r_3 $r_g0))) (if _temp_20_23 _temp_20_23 (let ((_temp_24_27 (= _r_3 $r_tmp0))) (if _temp_24_27 _temp_24_27 (let ((_temp_28_31 (= _r_3 $r_tmp1))) (if _temp_28_31 _temp_28_31 (= _r_3 $r_tmp2))))))))))))))))) (_hardware-mapped?_2 _r_1))))) 'hardware-mapped?))
(let () (begin (set! hwreg? (lambda (_x_1) (let ((_hwreg?_2 0)) (begin (set! _hwreg?_2 (lambda (_x_3) (let ((_t_4_7 _x_3)) (if (<= 0 _t_4_7) (<= _t_4_7 7) #f)))) (_hwreg?_2 _x_1))))) 'hwreg?))
(let () (begin (set! immediate-int? (lambda (_x_1) (let ((_immediate-int?_2 0)) (begin (set! _immediate-int?_2 (lambda (_x_3) (if (exact? _x_3) (if (integer? _x_3) (let ((_t_7_10 _x_3)) (if (<= -1024 _t_7_10) (<= _t_7_10 1023) #f)) #f) #f))) (_immediate-int?_2 _x_1))))) 'immediate-int?))
(let () (begin (set! fixnum-range? (let ((_-two^29_3 (- 0 (expt 2 29))) (_two^29-1_3 (- (expt 2 29) 1))) (lambda (_x_4) (let ((_t_5_8 _x_4)) (if (<= _-two^29_3 _t_5_8) (<= _t_5_8 _two^29-1_3) #f))))) 'fixnum-range?))
(let () (begin (set! immediate-literal? (lambda (_x_1) (let ((_immediate-literal?_2 0)) (begin (set! _immediate-literal?_2 (lambda (_x_3) (let ((_t_4_7 _x_3)) (if (<= -4096 _t_4_7) (<= _t_4_7 4095) #f)))) (_immediate-literal?_2 _x_1))))) 'immediate-literal?))
(let () (begin (set! swreg-global-offset (lambda (_r_1) (let ((_swreg-global-offset_2 0)) (begin (set! _swreg-global-offset_2 (lambda (_r_3) _r_3)) (_swreg-global-offset_2 _r_1))))) 'swreg-global-offset))
(let () (begin (set! char->immediate (lambda (_c_1) (let ((_char->immediate_2 0)) (begin (set! _char->immediate_2 (lambda (_c_3) (+ (* (char->integer _c_3) 65536) $imm_character))) (_char->immediate_2 _c_1))))) 'char->immediate))
(let () (begin (set! thefixnum (lambda (_x_1) (let ((_thefixnum_2 0)) (begin (set! _thefixnum_2 (lambda (_x_3) (* _x_3 4))) (_thefixnum_2 _x_1))))) 'thefixnum))
(let () (begin (set! procedure-slot-offset (lambda (_n_1) (let ((_procedure-slot-offset_2 0)) (begin (set! _procedure-slot-offset_2 (lambda (_n_3) (+ 12 (* _n_3 4)))) (_procedure-slot-offset_2 _n_1))))) 'procedure-slot-offset))
(let () (begin (set! force-hwreg! (lambda (_as_1 _src_1 _hwreg_1) (let ((_force-hwreg!_2 0)) (begin (set! _force-hwreg!_2 (lambda (_as_3 _src_3 _hwreg_3) (if (hardware-mapped? _src_3) _src_3 (emit-load-reg! _as_3 _src_3 _hwreg_3)))) (_force-hwreg!_2 _as_1 _src_1 _hwreg_1))))) 'force-hwreg!))
(let () (begin (set! emit-constant->register (lambda (_as_1 _opd_1 _r_1) (let ((_emit-constant->register_2 0)) (begin (set! _emit-constant->register_2 (lambda (_as_3 _opd_3 _r_3) (if (if (integer? _opd_3) (exact? _opd_3) #f) (if (fixnum-range? _opd_3) (emit-immediate->register! _as_3 (thefixnum _opd_3) _r_3) (emit-const->register! _as_3 (emit-datum _as_3 _opd_3) _r_3)) (if (boolean? _opd_3) (emit-immediate->register! _as_3 (if (eq? _opd_3 #t) $imm_true $imm_false) _r_3) (if (equal? _opd_3 (eof-object)) (emit-immediate->register! _as_3 $imm_eof _r_3) (if (equal? _opd_3 (unspecified)) (emit-immediate->register! _as_3 $imm_unspecified _r_3) (if (equal? _opd_3 (undefined)) (emit-immediate->register! _as_3 $imm_undefined _r_3) (if (null? _opd_3) (emit-immediate->register! _as_3 $imm_null _r_3) (if (char? _opd_3) (emit-immediate->register! _as_3 (char->immediate _opd_3) _r_3) (emit-const->register! _as_3 (emit-datum _as_3 _opd_3) _r_3)))))))))) (_emit-constant->register_2 _as_1 _opd_1 _r_1))))) 'emit-constant->register))
(let () (begin (set! emit-immediate->register! (lambda (_as_1 _i_1 _r_1) (let ((_emit-immediate->register!_2 0)) (begin (set! _emit-immediate->register!_2 (lambda (_as_3 _i_3 _r_3) (let ((_dest_6 (if (not (hardware-mapped? _r_3)) $r_tmp0 _r_3))) (begin (if (if (number? _i_3) (immediate-literal? _i_3) #f) (sparc_set _as_3 _i_3 _dest_6) (if (if (number? _i_3) (zero? (remainder (let ((_temp_13_16 _i_3)) (if (< _temp_13_16 0) (_-- _temp_13_16) _temp_13_16)) 1024)) #f) (sparc_sethi _as_3 (_cons 'hi (_cons _i_3 '())) _dest_6) (begin (sparc_sethi _as_3 (_cons 'hi (_cons _i_3 '())) _dest_6) (sparc_ori _as_3 _dest_6 (_cons 'lo (_cons _i_3 '())) _dest_6)))) (if (not (hardware-mapped? _r_3)) (emit-store-reg! _as_3 _r_3 _dest_6) (unspecified)))))) (_emit-immediate->register!_2 _as_1 _i_1 _r_1))))) 'emit-immediate->register!))
(let () (begin (set! emit-const->register! (lambda (_as_1 _offset_1 _r_1) (let ((_emit-const->register!_2 0)) (begin (set! _emit-const->register!_2 (lambda (_as_3 _offset_3 _r_3) (let ((_cvlabel_6 (+ 4 (- (* _offset_3 4) $tag_vector-tag)))) (if (hardware-mapped? _r_3) (begin (sparc_ldi _as_3 $r_reg0 $p_constvector $r_tmp0) (if (asm:fits? _cvlabel_6 13) (sparc_ldi _as_3 $r_tmp0 _cvlabel_6 _r_3) (begin (sparc_sethi _as_3 (_cons 'hi (_cons _cvlabel_6 '())) $r_tmp1) (sparc_addr _as_3 $r_tmp0 $r_tmp1 $r_tmp0) (sparc_ldi _as_3 $r_tmp0 (_cons 'lo (_cons _cvlabel_6 '())) _r_3)))) (begin (_emit-const->register!_2 _as_3 _offset_3 $r_tmp0) (emit-store-reg! _as_3 $r_tmp0 _r_3)))))) (_emit-const->register!_2 _as_1 _offset_1 _r_1))))) 'emit-const->register!))
(let () (begin (set! emit-load-reg! (lambda (_as_1 _from_1 _to_1) (let ((_emit-load-reg!_2 0)) (begin (set! _emit-load-reg!_2 (lambda (_as_3 _from_3 _to_3) (if (let ((_temp_4_7 (hardware-mapped? _from_3))) (if _temp_4_7 _temp_4_7 (not (hardware-mapped? _to_3)))) (asm-error "emit-load-reg: " _from_3 _to_3) (begin (sparc_ldi _as_3 $r_globals (swreg-global-offset _from_3) _to_3) _to_3)))) (_emit-load-reg!_2 _as_1 _from_1 _to_1))))) 'emit-load-reg!))
(let () (begin (set! emit-store-reg! (lambda (_as_1 _from_1 _to_1) (let ((_emit-store-reg!_2 0)) (begin (set! _emit-store-reg!_2 (lambda (_as_3 _from_3 _to_3) (if (let ((_temp_4_7 (not (hardware-mapped? _from_3)))) (if _temp_4_7 _temp_4_7 (hardware-mapped? _to_3))) (asm-error "emit-store-reg: " _from_3 _to_3) (begin (sparc_sti _as_3 _from_3 (swreg-global-offset _to_3) $r_globals) _to_3)))) (_emit-store-reg!_2 _as_1 _from_1 _to_1))))) 'emit-store-reg!))
(let () (begin (set! emit-move2hwreg! (lambda (_as_1 _from_1 _to_1) (let ((_emit-move2hwreg!_2 0)) (begin (set! _emit-move2hwreg!_2 (lambda (_as_3 _from_3 _to_3) (begin (if (hardware-mapped? _from_3) (sparc_move _as_3 _from_3 _to_3) (emit-load-reg! _as_3 _from_3 _to_3)) _to_3))) (_emit-move2hwreg!_2 _as_1 _from_1 _to_1))))) 'emit-move2hwreg!))
(let () (begin (set! emit-evaluate-cc! (lambda (_as_1 _branchf_a_1 _rd_1 _target_1) (let ((_emit-evaluate-cc!_2 0)) (begin (set! _emit-evaluate-cc!_2 (lambda (_as_3 _branchf_a_3 _rd_3 _target_3) (if _target_3 (begin (_branchf_a_3 _as_3 _target_3) (sparc_slot _as_3)) (let ((_target_6 (new-label))) (begin (_branchf_a_3 _as_3 _target_6) (sparc_set _as_3 $imm_false _rd_3) (sparc_set _as_3 $imm_true _rd_3) (sparc_label _as_3 _target_6)))))) (_emit-evaluate-cc!_2 _as_1 _branchf_a_1 _rd_1 _target_1))))) 'emit-evaluate-cc!))
(let () (begin (set! emit-check! (lambda (_as_1 _rs0_1 _l1_1 _liveregs_1) (let ((_emit-check!_2 0)) (begin (set! _emit-check!_2 (lambda (_as_3 _rs0_3 _l1_3 _liveregs_3) (begin (sparc_cmpi _as_3 _rs0_3 $imm_false) (emit-checkcc! _as_3 sparc_be _l1_3 _liveregs_3)))) (_emit-check!_2 _as_1 _rs0_1 _l1_1 _liveregs_1))))) 'emit-check!))
(let () (begin (set! emit-trap! (lambda (_as_1 _rs1_1 _rs2_1 _rs3_1 _exn_1) (let ((_emit-trap!_2 0)) (begin (set! _emit-trap!_2 (lambda (_as_3 _rs1_3 _rs2_3 _rs3_3 _exn_3) (begin (if (not (= _rs3_3 $r_reg0)) (emit-move2hwreg! _as_3 _rs3_3 $r_argreg3) (unspecified)) (if (not (= _rs2_3 $r_reg0)) (emit-move2hwreg! _as_3 _rs2_3 $r_argreg2) (unspecified)) (if (not (= _rs1_3 $r_reg0)) (emit-move2hwreg! _as_3 _rs1_3 $r_result) (unspecified)) (millicode-call/numarg-in-reg _as_3 $m_exception (thefixnum _exn_3) $r_tmp0)))) (_emit-trap!_2 _as_1 _rs1_1 _rs2_1 _rs3_1 _exn_1))))) 'emit-trap!))
(let () (begin '(define (emit-checkcc-and-fill-slot! as branch-ok_a branch-bad slot-filler l1) (let* ((situation (list exn rs1 rs2 rs3)) (l1 (exception-label as situation))) (if l1 (begin (branch-bad as l1) (if slot-filler (slot-filler as) (sparc_nop as))) (let* ((l1 (new-label)) (l2 (new-label))) (exception-label-set! as situation l1) (branch-ok_a as l2) (if slot-filler (slot-filler as) (sparc_slot as)) (sparc_label as l1) (cond ((= rs3 $r_reg0) #f) ((hardware-mapped? $r_argreg3) (emit-move2hwreg! as rs3 $r_argreg3)) ((hardware-mapped? rs3) (emit-store-reg! as rs3 $r_argreg3)) (else (emit-move2hwreg! as rs3 $r_tmp0) (emit-store-reg! as $r_tmp0 $r_argreg3))) (if (not (= rs2 $r_reg0)) (emit-move2hwreg! as rs2 $r_argreg2)) (if (not (= rs1 $r_reg0)) (emit-move2hwreg! as rs1 $r_result)) (sparc_jmpli as $r_millicode $m_exception $r_o7) (emit-immediate->register! as (thefixnum exn) $r_tmp0) (sparc_label as l2))))) #f))
(let () (begin (set! emit-checkcc! (lambda (_as_1 _branch-bad_1 _l1_1 _liveregs_1) (let ((_emit-checkcc!_2 0)) (begin (set! _emit-checkcc!_2 (lambda (_as_3 _branch-bad_3 _l1_3 _liveregs_3) (begin (_branch-bad_3 _as_3 _l1_3) (apply sparc_slot2 _as_3 _liveregs_3)))) (_emit-checkcc!_2 _as_1 _branch-bad_1 _l1_1 _liveregs_1))))) 'emit-checkcc!))
(let () (begin '(define (exception-label as situation) (let ((user-data (as-user as))) (if user-data (let ((exception-labels (assq 'exception-labels user-data))) (if exception-labels (let ((probe (assoc situation (cdr exception-labels)))) (if probe (cdr probe) #f)) #f)) #f))) '(define (exception-label-set! as situation label) (let ((user-data (as-user as))) (if user-data (let ((exception-labels (assq 'exception-labels user-data))) (if exception-labels (let ((probe (assoc situation (cdr exception-labels)))) (if probe (error "COMPILER BUG: Exception situation defined twice") (set-cdr! exception-labels (cons (cons situation label) (cdr exception-labels))))) (begin (as-user! as (cons (list 'exception-labels) user-data)) (exception-label-set! as situation label)))) (begin (as-user! as '()) (exception-label-set! as situation label))))) #f))
(let () (begin (set! millicode-call/0arg (lambda (_as_1 _mproc_1) (let ((_millicode-call/0arg_2 0)) (begin (set! _millicode-call/0arg_2 (lambda (_as_3 _mproc_3) (begin (sparc_jmpli _as_3 $r_millicode _mproc_3 $r_o7) (sparc_nop _as_3)))) (_millicode-call/0arg_2 _as_1 _mproc_1))))) 'millicode-call/0arg))
(let () (begin (set! millicode-call/1arg (lambda (_as_1 _mproc_1 _r_1) (let ((_millicode-call/1arg_2 0)) (begin (set! _millicode-call/1arg_2 (lambda (_as_3 _mproc_3 _r_3) (begin (sparc_jmpli _as_3 $r_millicode _mproc_3 $r_o7) (emit-move2hwreg! _as_3 _r_3 $r_argreg2)))) (_millicode-call/1arg_2 _as_1 _mproc_1 _r_1))))) 'millicode-call/1arg))
(let () (begin (set! millicode-call/1arg-in-result (lambda (_as_1 _mproc_1 _r_1) (let ((_millicode-call/1arg-in-result_2 0)) (begin (set! _millicode-call/1arg-in-result_2 (lambda (_as_3 _mproc_3 _r_3) (millicode-call/1arg-in-reg _as_3 _mproc_3 _r_3 $r_result))) (_millicode-call/1arg-in-result_2 _as_1 _mproc_1 _r_1))))) 'millicode-call/1arg-in-result))
(let () (begin (set! millicode-call/1arg-in-reg (lambda (_as_1 _mproc_1 _rs_1 _rd_1) (let ((_millicode-call/1arg-in-reg_2 0)) (begin (set! _millicode-call/1arg-in-reg_2 (lambda (_as_3 _mproc_3 _rs_3 _rd_3) (begin (sparc_jmpli _as_3 $r_millicode _mproc_3 $r_o7) (emit-move2hwreg! _as_3 _rs_3 _rd_3)))) (_millicode-call/1arg-in-reg_2 _as_1 _mproc_1 _rs_1 _rd_1))))) 'millicode-call/1arg-in-reg))
(let () (begin (set! millicode-call/numarg-in-result (lambda (_as_1 _mproc_1 _num_1) (let ((_millicode-call/numarg-in-result_2 0)) (begin (set! _millicode-call/numarg-in-result_2 (lambda (_as_3 _mproc_3 _num_3) (begin (sparc_jmpli _as_3 $r_millicode _mproc_3 $r_o7) (sparc_set _as_3 _num_3 $r_result)))) (_millicode-call/numarg-in-result_2 _as_1 _mproc_1 _num_1))))) 'millicode-call/numarg-in-result))
(let () (begin (set! millicode-call/numarg-in-reg (lambda (_as_1 _mproc_1 _num_1 _reg_1) (let ((_millicode-call/numarg-in-reg_2 0)) (begin (set! _millicode-call/numarg-in-reg_2 (lambda (_as_3 _mproc_3 _num_3 _reg_3) (begin (if (not (hardware-mapped? _reg_3)) (asm-error "millicode-call/numarg-in-reg requires HW register: " _reg_3) (unspecified)) (sparc_jmpli _as_3 $r_millicode _mproc_3 $r_o7) (sparc_set _as_3 _num_3 _reg_3)))) (_millicode-call/numarg-in-reg_2 _as_1 _mproc_1 _num_1 _reg_1))))) 'millicode-call/numarg-in-reg))
(let () (begin (set! millicode-call/2arg (lambda (_as_1 _mproc_1 _r1_1 _r2_1) (let ((_millicode-call/2arg_2 0)) (begin (set! _millicode-call/2arg_2 (lambda (_as_3 _mproc_3 _r1_3 _r2_3) (begin (emit-move2hwreg! _as_3 _r1_3 $r_argreg2) (sparc_jmpli _as_3 $r_millicode _mproc_3 $r_o7) (emit-move2hwreg! _as_3 _r2_3 $r_argreg3)))) (_millicode-call/2arg_2 _as_1 _mproc_1 _r1_1 _r2_1))))) 'millicode-call/2arg))
(let () (begin (set! millicode-call/ret (lambda (_as_1 _mproc_1 _label_1) (let ((_millicode-call/ret_2 0)) (begin (set! _millicode-call/ret_2 (lambda (_as_3 _mproc_3 _label_3) (if (short-effective-addresses) (begin (sparc_jmpli _as_3 $r_millicode _mproc_3 $r_o7) (sparc_addi _as_3 $r_o7 (_cons '- (_cons _label_3 (_cons (_cons '- (_cons (here _as_3) '(4))) '(8)))) $r_o7)) (let ((_val_68 (_cons '- (_cons _label_3 (_cons (_cons '+ (_cons (here _as_3) '(8))) '(8)))))) (begin (sparc_sethi _as_3 (_cons 'hi (_cons _val_68 '())) $r_tmp1) (sparc_ori _as_3 $r_tmp1 (_cons 'lo (_cons _val_68 '())) $r_tmp1) (sparc_jmpli _as_3 $r_millicode _mproc_3 $r_o7) (sparc_addr _as_3 $r_o7 $r_tmp1 $r_o7)))))) (_millicode-call/ret_2 _as_1 _mproc_1 _label_1))))) 'millicode-call/ret))
(let () (begin (set! check-timer (lambda (_as_1 _destination_1 _retry_1) (let ((_check-timer_2 0)) (begin (set! _check-timer_2 (lambda (_as_3 _destination_3 _retry_3) (begin (sparc_subicc _as_3 $r_timer 1 $r_timer) (sparc_bne_a _as_3 _destination_3) (sparc_slot _as_3) (millicode-call/ret _as_3 $m_timer-exception _retry_3)))) (_check-timer_2 _as_1 _destination_1 _retry_1))))) 'check-timer))
(let () (begin (set! check-timer0 (lambda (_as_1) (let ((_check-timer0_2 0)) (begin (set! _check-timer0_2 (lambda (_as_3) (begin (sparc_subicc _as_3 $r_timer 1 $r_timer) (sparc_bne_a _as_3 (+ (here _as_3) 16)) (sparc_slot _as_3) (sparc_jmpli _as_3 $r_millicode $m_timer-exception $r_o7) (sparc_nop _as_3)))) (_check-timer0_2 _as_1))))) 'check-timer0))
(let () (begin (set! sparc-instruction (undefined)) 'sparc-instruction))
(let () (let ((_original-emit-label!_3 emit-label!) (_original-here_3 here)) (begin (set! emit-label! (lambda (_as_4 _l_4) (begin (assembler-value! _as_4 'slot2-info #f) (_original-emit-label!_3 _as_4 _l_4)))) (set! here (lambda (_as_5) (begin (assembler-value! _as_5 'slot2-info #f) (_original-here_3 _as_5)))) 'emit-label!)))
(let () (let ((_emit!_3 (lambda (_as_567 _bits_567) (begin (assembler-value! _as_567 'slot2-info #f) (emit! _as_567 _bits_567)))) (_emit-fixup-proc!_3 (lambda (_as_568 _proc_568) (begin (assembler-value! _as_568 'slot2-info #f) (emit-fixup-proc! _as_568 _proc_568)))) (_goes-in-delay-slot2?_3 (lambda (_as_569 _rd_569) (let ((_regs_572 (assembler-value _as_569 'slot2-info))) (if _regs_572 (if (fill-delay-slots) (if (not (= _rd_569 $r_stkp)) (if (not (= _rd_569 $r_o7)) (not (memv _rd_569 _regs_572)) #f) #f) #f) #f))))) (let ((_fpop_4 (unspecified)) (_class-fpop2_4 (unspecified)) (_class-fpop1_4 (unspecified)) (_class-label_4 (unspecified)) (_class-call_4 (unspecified)) (_class11si_4 (unspecified)) (_class11sr_4 (unspecified)) (_class11i_4 (unspecified)) (_class11r_4 (unspecified)) (_class10i_4 (unspecified)) (_class10r_4 (unspecified)) (_class-slot2_4 (unspecified)) (_class-slot_4 (unspecified)) (_branch_4 (unspecified)) (_classf00a_4 (unspecified)) (_classf00b_4 (unspecified)) (_class00a_4 (unspecified)) (_class00b_4 (unspecified)) (_class-nop_4 (unspecified)) (_class-sethi_4 (unspecified)) (_is-a-delay-slot-instruction?_4 (unspecified)) (_not-a-delay-slot-instruction_4 (unspecified)) (_recover-branch-target_4 (unspecified)) (_remember-branch-target_4 (unspecified)) (_add1_4 (unspecified)) (_dep-call-offset!_4 (unspecified)) (_dep-imm22!_4 (unspecified)) (_dep-branch-offset!_4 (unspecified)) (_dep-imm!_4 (unspecified)) (_dep-rd!_4 (unspecified)) (_dep-rs2!_4 (unspecified)) (_dep-rs1!_4 (unspecified)) (_copy-instr_4 (unspecified)) (_copy_4 (unspecified)) (_copy!_4 (unspecified)) (_signal-error_4 (unspecified)) (_eval-expr_4 (unspecified)) (_two^32_4 (unspecified)) (_zero_4 (unspecified)) (_abit_4 (unspecified)) (_ibit_4 (unspecified))) (begin (set! _fpop_4 (lambda (_type_5 _opf_5) (let ((_bits_8 (asm:logior (asm:lsh 2 30) (asm:lsh _type_5 19) (asm:lsh _opf_5 5)))) (lambda (_as_9 _rs1_9 _rs2_9 _rd_9) (let ((_bits_12 (_copy_4 _bits_8))) (begin (_dep-rs1!_4 _bits_12 0 _rs1_9) (_dep-rs2!_4 _bits_12 0 _rs2_9) (_dep-rd!_4 _bits_12 0 _rd_9) (_emit!_3 _as_9 _bits_12))))))) (set! _class-fpop2_4 (lambda (_i_13) (_fpop_4 53 _i_13))) (set! _class-fpop1_4 (lambda (_i_14) (_fpop_4 52 _i_14))) (set! _class-label_4 (lambda () (lambda (_as_16 _label_16) (emit-label! _as_16 _label_16)))) (set! _class-call_4 (lambda () (let ((_code_20 (asm:lsh 1 30))) (lambda (_as_21 _target0_21) (let* ((_target_24 (_cons '- (_cons _target0_21 (_cons (here _as_21) '())))) (_fixup_27 (unspecified))) (begin (set! _fixup_27 (lambda (_bv_28 _loc_28) (let ((_e_31 (_eval-expr_4 _as_21 _target_24))) (if _e_31 (_dep-call-offset!_4 _bv_28 _loc_28 _e_31) (_signal-error_4 'fixup "call" _target0_21))))) (let ((_bits_32 (_copy_4 _code_20)) (_e_32 (_eval-expr_4 _as_21 _target_24))) (begin (_not-a-delay-slot-instruction_4 _as_21) (if _e_32 (_dep-call-offset!_4 _bits_32 0 _e_32) (_emit-fixup-proc!_3 _as_21 (lambda (_b_33 _l_33) (_fixup_27 _b_33 _l_33)))) (_emit!_3 _as_21 _bits_32))))))))) (set! _class11si_4 (lambda (_bits_66) (let ((_store-instr_69 (_class11i_4 _bits_66))) (lambda (_as_70 _a_70 _b_70 _c_70) (_store-instr_69 _as_70 _c_70 _b_70 _a_70))))) (set! _class11sr_4 (lambda (_bits_71) (let ((_store-instr_74 (_class11r_4 _bits_71))) (lambda (_as_75 _a_75 _b_75 _c_75) (_store-instr_74 _as_75 _c_75 _b_75 _a_75))))) (set! _class11i_4 (lambda (_bits_76) (let ((_bits_79 (asm:logior (asm:lsh 3 30) (asm:lsh _bits_76 19) _ibit_4))) (lambda (_as_80 _rs1_80 _e_80 _rd_80) (let ((_fixup_83 (unspecified)) (_expr_83 (unspecified))) (begin (set! _fixup_83 (lambda (_bv_84 _loc_84) (let ((_e_87 (_expr_83))) (if _e_87 (_dep-imm!_4 _bv_84 _loc_84 _e_87) (_signal-error_4 'fixup "Memory instruction" _e_87))))) (set! _expr_83 (lambda () (let ((_imm_91 (_eval-expr_4 _as_80 _e_80))) (if (not _imm_91) _imm_91 (if (asm:fits? _imm_91 13) _imm_91 (_signal-error_4 'toolarge "Memory instruction" _e_80 _imm_91)))))) (let ((_bits_95 (_copy_4 _bits_79)) (_e_95 (_expr_83))) (begin (_dep-rs1!_4 _bits_95 0 _rs1_80) (_dep-rd!_4 _bits_95 0 _rd_80) (if _e_95 (_dep-imm!_4 _bits_95 0 _e_95) (_emit-fixup-proc!_3 _as_80 (lambda (_b_96 _l_96) (_fixup_83 _b_96 _l_96)))) (_emit!_3 _as_80 _bits_95))))))))) (set! _class11r_4 (lambda (_bits_97) (let ((_bits_100 (asm:logior (asm:lsh 3 30) (asm:lsh _bits_97 19)))) (lambda (_as_101 _rs1_101 _rs2_101 _rd_101) (let ((_bits_104 (_copy_4 _bits_100))) (begin (_dep-rs1!_4 _bits_104 0 _rs1_101) (_dep-rs2!_4 _bits_104 0 _rs2_101) (_dep-rd!_4 _bits_104 0 _rd_101) (_emit!_3 _as_101 _bits_104))))))) (set! _class10i_4 (lambda (_bits_105 _ _extra_105) (if (if (not (null? _extra_105)) (eq? (let ((_x_108_111 _extra_105)) (begin (_check! (pair? _x_108_111) 0 _x_108_111) (car:pair _x_108_111))) 'wry) #f) (let ((_op_114 (_class10i_4 _bits_105))) (lambda (_as_115 _src_115) (_op_114 _as_115 0 _src_115 0))) (let ((_bits_118 (asm:logior (asm:lsh 2 30) (asm:lsh _bits_105 19) _ibit_4)) (_jump?_118 (if (not (null? _extra_105)) (eq? (let ((_x_143_146 _extra_105)) (begin (_check! (pair? _x_143_146) 0 _x_143_146) (car:pair _x_143_146))) 'jump) #f))) (lambda (_as_119 _rs1_119 _e_119 _rd_119) (let ((_fixup_122 (unspecified)) (_expr_122 (unspecified))) (begin (set! _fixup_122 (lambda (_bv_123 _loc_123) (let ((_e_126 (_expr_122))) (if _e_126 (_dep-imm!_4 _bv_123 _loc_123 _e_126) (_signal-error_4 'fixup "ALU instruction" _e_126))))) (set! _expr_122 (lambda () (let ((_imm_130 (_eval-expr_4 _as_119 _e_119))) (if (not _imm_130) _imm_130 (if (asm:fits? _imm_130 13) _imm_130 (if _jump?_118 (asm-value-too-large _as_119 "`jmpli'" _e_119 _imm_130) (asm-value-too-large _as_119 "ALU instruction" _e_119 _imm_130))))))) (let ((_bits_135 (_copy_4 _bits_118)) (_e_135 (_expr_122))) (begin (if _e_135 (_dep-imm!_4 _bits_135 0 _e_135) (_emit-fixup-proc!_3 _as_119 (lambda (_b_136 _l_136) (_fixup_122 _b_136 _l_136)))) (_dep-rs1!_4 _bits_135 0 _rs1_119) (_dep-rd!_4 _bits_135 0 _rd_119) (if _jump?_118 (begin (_not-a-delay-slot-instruction_4 _as_119) (_emit!_3 _as_119 _bits_135)) (if (_goes-in-delay-slot2?_3 _as_119 _rd_119) (_emit-fixup-proc!_3 _as_119 (lambda (_bv_139 _loc_139) (_copy!_4 _bv_139 (- _loc_139 4) _bits_135))) (_emit!_3 _as_119 _bits_135)))))))))))) (set! _class10r_4 (lambda (_bits_147 _ _extra_147) (if (if (not (null? _extra_147)) (eq? (let ((_x_151_154 _extra_147)) (begin (_check! (pair? _x_151_154) 0 _x_151_154) (car:pair _x_151_154))) 'rdy) #f) (let ((_op_157 (_class10r_4 _bits_147))) (lambda (_as_158 _rd_158) (_op_157 _as_158 0 0 _rd_158))) (if (if (not (null? _extra_147)) (eq? (let ((_x_162_165 _extra_147)) (begin (_check! (pair? _x_162_165) 0 _x_162_165) (car:pair _x_162_165))) 'wry) #f) (let ((_op_168 (_class10r_4 _bits_147))) (lambda (_as_169 _rs_169) (_op_168 _as_169 _rs_169 0 0))) (let ((_bits_173 (asm:logior (asm:lsh 2 30) (asm:lsh _bits_147 19))) (_jump?_173 (if (not (null? _extra_147)) (eq? (let ((_x_184_187 _extra_147)) (begin (_check! (pair? _x_184_187) 0 _x_184_187) (car:pair _x_184_187))) 'jump) #f))) (lambda (_as_174 _rs1_174 _rs2_174 _rd_174) (let ((_bits_177 (_copy_4 _bits_173))) (begin (_dep-rs1!_4 _bits_177 0 _rs1_174) (_dep-rs2!_4 _bits_177 0 _rs2_174) (_dep-rd!_4 _bits_177 0 _rd_174) (if _jump?_173 (begin (_not-a-delay-slot-instruction_4 _as_174) (_emit!_3 _as_174 _bits_177)) (if (_goes-in-delay-slot2?_3 _as_174 _rd_174) (_emit-fixup-proc!_3 _as_174 (lambda (_bv_180 _loc_180) (_copy!_4 _bv_180 (- _loc_180 4) _bits_177))) (_emit!_3 _as_174 _bits_177))))))))))) (set! _class-slot2_4 (lambda () (let ((_nop-instr_191 (_class-nop_4 4))) (lambda (_as_192 _ _regs_192) (begin (_nop-instr_191 _as_192) (assembler-value! _as_192 'slot2-info _regs_192)))))) (set! _class-slot_4 (lambda () (let ((_nop-instr_196 (_class-nop_4 4))) (lambda (_as_197) (let ((_fixup_198 (unspecified)) (_branch-target_198 (unspecified))) (begin (set! _fixup_198 (lambda (_bv_199 _loc_199) (let ((_bt_202 (let ((_temp_203_206 (_eval-expr_4 _as_197 _branch-target_198))) (if _temp_203_206 _temp_203_206 (asm-error "Branch fixup: can't happen: " _branch-target_198))))) (if (_is-a-delay-slot-instruction?_4 _as_197 _bv_199 _bt_202) (begin (_copy-instr_4 _bv_199 _bt_202 _loc_199) (_add1_4 _bv_199 (- _loc_199 4))) (unspecified))))) (set! _branch-target_198 (_recover-branch-target_4 _as_197)) (if (if _branch-target_198 (fill-delay-slots) #f) (_emit-fixup-proc!_3 _as_197 (lambda (_b_210 _l_210) (_fixup_198 _b_210 _l_210))) (unspecified)) (_nop-instr_196 _as_197))))))) (set! _branch_4 (lambda (_type_211 _bits_211 _annul_211) (let ((_fill-delay-slot?_214 (let ((_temp_268_271 (not (eq? _annul_211 _zero_4)))) (if _temp_268_271 _temp_268_271 (eq? _bits_211 8)))) (_bits_214 (asm:logior (asm:lsh _bits_211 25) (asm:lsh _type_211 22) _annul_211))) (lambda (_as_215 _target0_215) (let ((_target_218 (_cons '- (_cons _target0_215 (_cons (here _as_215) '()))))) (let ((_fixup_219 (unspecified)) (_expr_219 (unspecified))) (begin (set! _fixup_219 (lambda (_bv_220 _loc_220) (let ((_e_223 (_expr_219))) (if _e_223 (_dep-branch-offset!_4 _bv_220 _loc_220 _e_223) (_signal-error_4 'fixup "branch" _target0_215))))) (set! _expr_219 (lambda () (let ((_e_227 (_eval-expr_4 _as_215 _target_218))) (if (not _e_227) _e_227 (if (not (zero? (logand _e_227 3))) (_signal-error_4 'unaligned "branch" _target0_215) (if (asm:fits? _e_227 24) _e_227 (asm-value-too-large _as_215 "branch" _target_218 _e_227))))))) (if _fill-delay-slot?_214 (_remember-branch-target_4 _as_215 _target0_215) (_remember-branch-target_4 _as_215 #f)) (_not-a-delay-slot-instruction_4 _as_215) (let ((_bits_234 (_copy_4 _bits_214)) (_e_234 (_expr_219))) (begin (if _e_234 (_dep-branch-offset!_4 _bits_234 0 _e_234) (_emit-fixup-proc!_3 _as_215 (lambda (_b_235 _l_235) (_fixup_219 _b_235 _l_235)))) (_emit!_3 _as_215 _bits_234)))))))))) (set! _classf00a_4 (lambda (_i_273) (_branch_4 6 _i_273 _abit_4))) (set! _classf00b_4 (lambda (_i_274) (_branch_4 6 _i_274 _zero_4))) (set! _class00a_4 (lambda (_i_275) (_branch_4 2 _i_275 _abit_4))) (set! _class00b_4 (lambda (_i_276) (_branch_4 2 _i_276 _zero_4))) (set! _class-nop_4 (lambda (_i_277) (let ((_instr_280 (_class-sethi_4 _i_277))) (lambda (_as_281) (_instr_280 _as_281 0 $r_g0))))) (set! _class-sethi_4 (lambda (_bits_282) (let ((_bits_285 (asm:lsh _bits_282 22))) (lambda (_as_286 _val_286 _rd_286) (let ((_fixup2_287 (unspecified)) (_fixup_287 (unspecified))) (begin (set! _fixup2_287 (lambda (_bv_288 _loc_288) (begin (_copy!_4 _bv_288 _loc_288 _bits_285) (_dep-rd!_4 _bv_288 _loc_288 _rd_286) (_fixup_287 _bv_288 _loc_288)))) (set! _fixup_287 (lambda (_bv_289 _loc_289) (_dep-imm22!_4 _bv_289 _loc_289 (let ((_temp_290_293 (_eval-expr_4 _as_286 _val_286))) (if _temp_290_293 _temp_290_293 (_signal-error_4 'fixup "sethi" _val_286)))))) (if (_goes-in-delay-slot2?_3 _as_286 _rd_286) (_emit-fixup-proc!_3 _as_286 (lambda (_b_295 _l_295) (_fixup2_287 _b_295 (- _l_295 4)))) (let ((_bits_298 (_copy_4 _bits_285)) (_e_298 (_eval-expr_4 _as_286 _val_286))) (begin (if _e_298 (_dep-imm22!_4 _bits_298 0 _e_298) (_emit-fixup-proc!_3 _as_286 (lambda (_b_299 _l_299) (_fixup_287 _b_299 _l_299)))) (_dep-rd!_4 _bits_298 0 _rd_286) (_emit!_3 _as_286 _bits_298)))))))))) (set! _is-a-delay-slot-instruction?_4 (lambda (_as_300 _bv_300 _addr_300) (if (not (memv _addr_300 (let ((_temp_303_306 (assembler-value _as_300 'not-dsi))) (if _temp_303_306 _temp_303_306 '())))) (< _addr_300 (bytevector-length _bv_300)) #f))) (set! _not-a-delay-slot-instruction_4 (lambda (_as_309) (assembler-value! _as_309 'not-dsi (cons (here _as_309) (let ((_temp_310_313 (assembler-value _as_309 'not-dsi))) (if _temp_310_313 _temp_310_313 '())))))) (set! _recover-branch-target_4 (lambda (_as_315) (assembler-value _as_315 'branch-target))) (set! _remember-branch-target_4 (lambda (_as_316 _obj_316) (assembler-value! _as_316 'branch-target _obj_316))) (set! _add1_4 (lambda (_bv_317 _loc_317) (let* ((_r0_320 (+ (bytevector-ref _bv_317 (+ _loc_317 3)) 1)) (_d0_323 (logand _r0_320 255)) (_c0_326 (rshl _r0_320 8))) (let () (begin (bytevector-set! _bv_317 (+ _loc_317 3) _d0_323) (let* ((_r1_332 (+ (bytevector-ref _bv_317 (+ _loc_317 2)) _c0_326)) (_d1_335 (logand _r1_332 255)) (_c1_338 (rshl _r1_332 8))) (let () (begin (bytevector-set! _bv_317 (+ _loc_317 2) _d1_335) (let* ((_r2_344 (+ (bytevector-ref _bv_317 (+ _loc_317 1)) _c1_338)) (_d2_347 (logand _r2_344 255))) (let () (bytevector-set! _bv_317 (+ _loc_317 1) _d2_347))))))))))) (set! _dep-call-offset!_4 (lambda (_bits_351 _k_351 _offs_351) (if (fixnum? _offs_351) (begin (if (not (= (logand _offs_351 3) 0)) (_signal-error_4 'unaligned "call" _offs_351) (unspecified)) (bytevector-set! _bits_351 (+ _k_351 3) (logand (rsha _offs_351 2) 255)) (bytevector-set! _bits_351 (+ _k_351 2) (logand (rsha _offs_351 10) 255)) (bytevector-set! _bits_351 (+ _k_351 1) (logand (rsha _offs_351 18) 255)) (bytevector-set! _bits_351 _k_351 (logior (bytevector-ref _bits_351 _k_351) (logand (rsha _offs_351 26) 63)))) (if (bytevector? _offs_351) (begin (if (not (= (logand (bytevector-ref _offs_351 3) 3) 0)) (_signal-error_4 'unaligned "call" (asm:bv->int _offs_351)) (unspecified)) (let ((_offs_356 (asm:rsha _offs_351 2))) (begin (bytevector-set! _bits_351 (+ _k_351 3) (bytevector-ref _offs_356 3)) (bytevector-set! _bits_351 (+ _k_351 2) (bytevector-ref _offs_356 2)) (bytevector-set! _bits_351 (+ _k_351 1) (bytevector-ref _offs_356 1)) (bytevector-set! _bits_351 _k_351 (logior (bytevector-ref _bits_351 _k_351) (logand (bytevector-ref _offs_356 0) 63)))))) (_dep-call-offset!_4 _bits_351 _k_351 (asm:int->bv _offs_351)))))) (set! _dep-imm22!_4 (lambda (_bits_358 _k_358 _imm_358) (if (fixnum? _imm_358) (begin (bytevector-set! _bits_358 (+ _k_358 3) (logand _imm_358 255)) (bytevector-set! _bits_358 (+ _k_358 2) (logand (rsha _imm_358 8) 255)) (bytevector-set! _bits_358 (+ _k_358 1) (logior (bytevector-ref _bits_358 (+ _k_358 1)) (logand (rsha _imm_358 16) 63)))) (if (bytevector? _imm_358) (begin (bytevector-set! _bits_358 (+ _k_358 3) (bytevector-ref _imm_358 3)) (bytevector-set! _bits_358 (+ _k_358 2) (bytevector-ref _imm_358 2)) (bytevector-set! _bits_358 (+ _k_358 1) (logior (bytevector-ref _bits_358 (+ _k_358 1)) (logand (bytevector-ref _imm_358 1) 63)))) (_dep-imm22!_4 _bits_358 _k_358 (asm:int->bv _imm_358)))))) (set! _dep-branch-offset!_4 (lambda (_bits_362 _k_362 _offs_362) (if (fixnum? _offs_362) (begin (if (not (= (logand _offs_362 3) 0)) (_signal-error_4 'unaligned "branch" _offs_362) (unspecified)) (_dep-imm22!_4 _bits_362 _k_362 (rsha _offs_362 2))) (if (bytevector? _offs_362) (begin (if (not (= (logand (bytevector-ref _offs_362 3) 3) 0)) (_signal-error_4 'unaligned "branch" (asm:bv->int _offs_362)) (unspecified)) (_dep-imm22!_4 _bits_362 _k_362 (asm:rsha _offs_362 2))) (_dep-branch-offset!_4 _bits_362 _k_362 (asm:int->bv _offs_362)))))) (set! _dep-imm!_4 (lambda (_bits_366 _k_366 _imm_366) (if (fixnum? _imm_366) (begin (bytevector-set! _bits_366 (+ _k_366 3) (logand _imm_366 255)) (bytevector-set! _bits_366 (+ _k_366 2) (logior (bytevector-ref _bits_366 (+ _k_366 2)) (logand (rsha _imm_366 8) 31)))) (if (bytevector? _imm_366) (begin (bytevector-set! _bits_366 (+ _k_366 3) (bytevector-ref _imm_366 0)) (bytevector-set! _bits_366 (+ _k_366 2) (logior (bytevector-ref _bits_366 (+ _k_366 2)) (logand (bytevector-ref _imm_366 1) 31)))) (_dep-imm!_4 _bits_366 _k_366 (asm:int->bv _imm_366)))))) (set! _dep-rd!_4 (lambda (_bits_370 _k_370 _rd_370) (bytevector-set! _bits_370 _k_370 (logior (bytevector-ref _bits_370 _k_370) (lsh _rd_370 1))))) (set! _dep-rs2!_4 (lambda (_bits_371 _k_371 _rs2_371) (bytevector-set! _bits_371 (+ _k_371 3) (logior (bytevector-ref _bits_371 (+ _k_371 3)) _rs2_371)))) (set! _dep-rs1!_4 (lambda (_bits_372 _k_372 _rs1_372) (begin (bytevector-set! _bits_372 (+ _k_372 1) (logior (bytevector-ref _bits_372 (+ _k_372 1)) (rshl _rs1_372 2))) (bytevector-set! _bits_372 (+ _k_372 2) (logior (bytevector-ref _bits_372 (+ _k_372 2)) (lsh (logand _rs1_372 3) 6)))))) (set! _copy-instr_4 (lambda (_bv_373 _from_373 _to_373) (begin (bytevector-set! _bv_373 _to_373 (bytevector-ref _bv_373 _from_373)) (bytevector-set! _bv_373 (+ _to_373 1) (bytevector-ref _bv_373 (+ _from_373 1))) (bytevector-set! _bv_373 (+ _to_373 2) (bytevector-ref _bv_373 (+ _from_373 2))) (bytevector-set! _bv_373 (+ _to_373 3) (bytevector-ref _bv_373 (+ _from_373 3)))))) (set! _copy_4 (lambda (_bits_374) (let ((_bv_377 (make-bytevector 4))) (begin (bytevector-set! _bv_377 0 (bytevector-ref _bits_374 0)) (bytevector-set! _bv_377 1 (bytevector-ref _bits_374 1)) (bytevector-set! _bv_377 2 (bytevector-ref _bits_374 2)) (bytevector-set! _bv_377 3 (bytevector-ref _bits_374 3)) _bv_377)))) (set! _copy!_4 (lambda (_bv_378 _k_378 _bits_378) (begin (bytevector-set! _bv_378 _k_378 (bytevector-ref _bits_378 0)) (bytevector-set! _bv_378 (+ _k_378 1) (bytevector-ref _bits_378 1)) (bytevector-set! _bv_378 (+ _k_378 2) (bytevector-ref _bits_378 2)) (bytevector-set! _bv_378 (+ _k_378 3) (bytevector-ref _bits_378 3)) _bv_378))) (set! _signal-error_4 (lambda (_code_379 _ _rest_379) (let ((_msg_381 (unspecified))) (begin (set! _msg_381 "SPARC assembler: ") (let ((_temp_380_384 _code_379)) (if (memv _temp_380_384 '(badexpr)) (asm-error _msg_381 "invalid expression " (let ((_x_386_389 _rest_379)) (begin (_check! (pair? _x_386_389) 0 _x_386_389) (car:pair _x_386_389)))) (if (memv _temp_380_384 '(toolarge)) (asm-error _msg_381 "value too large in " (let ((_x_391_394 _rest_379)) (begin (_check! (pair? _x_391_394) 0 _x_391_394) (car:pair _x_391_394))) ": " (let ((_x_396_399 (let ((_x_400_403 _rest_379)) (begin (_check! (pair? _x_400_403) 1 _x_400_403) (cdr:pair _x_400_403))))) (begin (_check! (pair? _x_396_399) 0 _x_396_399) (car:pair _x_396_399))) " = " (let ((_x_405_408 (let ((_x_409_412 (let ((_x_413_416 _rest_379)) (begin (_check! (pair? _x_413_416) 1 _x_413_416) (cdr:pair _x_413_416))))) (begin (_check! (pair? _x_409_412) 1 _x_409_412) (cdr:pair _x_409_412))))) (begin (_check! (pair? _x_405_408) 0 _x_405_408) (car:pair _x_405_408)))) (if (memv _temp_380_384 '(fixup)) (asm-error _msg_381 "fixup failed in " (let ((_x_418_421 _rest_379)) (begin (_check! (pair? _x_418_421) 0 _x_418_421) (car:pair _x_418_421))) " for " (let ((_x_423_426 (let ((_x_427_430 _rest_379)) (begin (_check! (pair? _x_427_430) 1 _x_427_430) (cdr:pair _x_427_430))))) (begin (_check! (pair? _x_423_426) 0 _x_423_426) (car:pair _x_423_426)))) (if (memv _temp_380_384 '(unaligned)) (asm-error _msg_381 "unaligned target in " (let ((_x_432_435 _rest_379)) (begin (_check! (pair? _x_432_435) 0 _x_432_435) (car:pair _x_432_435))) ": " (let ((_x_437_440 (let ((_x_441_444 _rest_379)) (begin (_check! (pair? _x_441_444) 1 _x_441_444) (cdr:pair _x_441_444))))) (begin (_check! (pair? _x_437_440) 0 _x_437_440) (car:pair _x_437_440)))) (error "Invalid error code in assembler: " _code_379)))))))))) (set! _eval-expr_4 (lambda (_as_446 _e_446) (let ((_evaluate_447 (unspecified)) (_lobits_447 (unspecified)) (_hibits_447 (unspecified)) (_complement_447 (unspecified))) (begin (set! _evaluate_447 (lambda (_e_448) (if (integer? _e_448) _e_448 (if (label? _e_448) (label-value _as_446 _e_448) (if (eq? 'hi (let ((_x_452_455 _e_448)) (begin (_check! (pair? _x_452_455) 0 _x_452_455) (car:pair _x_452_455)))) (_hibits_447 (_evaluate_447 (let ((_x_457_460 (let ((_x_461_464 _e_448)) (begin (_check! (pair? _x_461_464) 1 _x_461_464) (cdr:pair _x_461_464))))) (begin (_check! (pair? _x_457_460) 0 _x_457_460) (car:pair _x_457_460))))) (if (eq? 'lo (let ((_x_466_469 _e_448)) (begin (_check! (pair? _x_466_469) 0 _x_466_469) (car:pair _x_466_469)))) (_lobits_447 (_evaluate_447 (let ((_x_471_474 (let ((_x_475_478 _e_448)) (begin (_check! (pair? _x_475_478) 1 _x_475_478) (cdr:pair _x_475_478))))) (begin (_check! (pair? _x_471_474) 0 _x_471_474) (car:pair _x_471_474))))) (if (eq? '+ (let ((_x_480_483 _e_448)) (begin (_check! (pair? _x_480_483) 0 _x_480_483) (car:pair _x_480_483)))) (let ((_e_486 (let ((_x_502_505 _e_448)) (begin (_check! (pair? _x_502_505) 1 _x_502_505) (cdr:pair _x_502_505)))) (_s_486 0)) (let () (let ((_loop_489 (unspecified))) (begin (set! _loop_489 (lambda (_e_490 _s_490) (if (null? _e_490) _s_490 (let ((_op_493 (_evaluate_447 (let ((_x_498_501 _e_490)) (begin (_check! (pair? _x_498_501) 0 _x_498_501) (car:pair _x_498_501)))))) (if (not _op_493) _op_493 (_loop_489 (let ((_x_494_497 _e_490)) (begin (_check! (pair? _x_494_497) 1 _x_494_497) (cdr:pair _x_494_497))) (+ _s_490 _op_493))))))) (_loop_489 _e_486 _s_486))))) (if (eq? '- (let ((_x_507_510 _e_448)) (begin (_check! (pair? _x_507_510) 0 _x_507_510) (car:pair _x_507_510)))) (let ((_e_513 (let ((_x_529_532 _e_448)) (begin (_check! (pair? _x_529_532) 1 _x_529_532) (cdr:pair _x_529_532)))) (_d_513 #f)) (let () (let ((_loop_516 (unspecified))) (begin (set! _loop_516 (lambda (_e_517 _d_517) (if (null? _e_517) _d_517 (let ((_op_520 (_evaluate_447 (let ((_x_525_528 _e_517)) (begin (_check! (pair? _x_525_528) 0 _x_525_528) (car:pair _x_525_528)))))) (if (not _op_520) _op_520 (_loop_516 (let ((_x_521_524 _e_517)) (begin (_check! (pair? _x_521_524) 1 _x_521_524) (cdr:pair _x_521_524))) (if _d_517 (- _d_517 _op_520) _op_520))))))) (_loop_516 _e_513 _d_513))))) (_signal-error_4 'badexpr _e_448))))))))) (set! _lobits_447 (lambda (_e_534) (if (not _e_534) _e_534 (if (< _e_534 0) (remainder (_complement_447 _e_534) 1024) (remainder _e_534 1024))))) (set! _hibits_447 (lambda (_e_538) (if (not _e_538) _e_538 (if (< _e_538 0) (_complement_447 (quotient (_complement_447 _e_538) 1024)) (quotient _e_538 1024))))) (set! _complement_447 (lambda (_x_542) (modulo (+ _two^32_4 _x_542) _two^32_4))) (_evaluate_447 _e_446))))) (set! _two^32_4 (expt 2 32)) (set! _zero_4 (asm:bv 0 0 0 0)) (set! _abit_4 (asm:bv 32 0 0 0)) (set! _ibit_4 (asm:bv 0 0 32 0)) (set! sparc-instruction (lambda (_kwd_543 _ _ops_543) (let ((_temp_544_547 _kwd_543)) (if (memv _temp_544_547 '(i11)) (apply _class11i_4 _ops_543) (if (memv _temp_544_547 '(r11)) (apply _class11r_4 _ops_543) (if (memv _temp_544_547 '(si11)) (apply _class11si_4 _ops_543) (if (memv _temp_544_547 '(sr11)) (apply _class11sr_4 _ops_543) (if (memv _temp_544_547 '(sethi)) (apply _class-sethi_4 _ops_543) (if (memv _temp_544_547 '(r10)) (apply _class10r_4 _ops_543) (if (memv _temp_544_547 '(i10)) (apply _class10i_4 _ops_543) (if (memv _temp_544_547 '(b00)) (apply _class00b_4 _ops_543) (if (memv _temp_544_547 '(a00)) (apply _class00a_4 _ops_543) (if (memv _temp_544_547 '(call)) (apply _class-call_4 _ops_543) (if (memv _temp_544_547 '(label)) (apply _class-label_4 _ops_543) (if (memv _temp_544_547 '(nop)) (apply _class-nop_4 _ops_543) (if (memv _temp_544_547 '(slot)) (apply _class-slot_4 _ops_543) (if (memv _temp_544_547 '(slot2)) (apply _class-slot2_4 _ops_543) (if (memv _temp_544_547 '(fb00)) (apply _classf00b_4 _ops_543) (if (memv _temp_544_547 '(fa00)) (apply _classf00a_4 _ops_543) (if (memv _temp_544_547 '(fp)) (apply _class-fpop1_4 _ops_543) (if (memv _temp_544_547 '(fpcc)) (apply _class-fpop2_4 _ops_543) (asm-error "sparc-instruction: unrecognized class: " _kwd_543)))))))))))))))))))))) 'sparc-instruction))))
(let () (begin (set! sparc_lddi (sparc-instruction 'i11 3)) 'sparc_lddi))
(let () (begin (set! sparc_lddr (sparc-instruction 'r11 3)) 'sparc_lddr))
(let () (begin (set! sparc_ldi (sparc-instruction 'i11 0)) 'sparc_ldi))
(let () (begin (set! sparc_ldr (sparc-instruction 'r11 0)) 'sparc_ldr))
(let () (begin (set! sparc_ldhi (sparc-instruction 'i11 2)) 'sparc_ldhi))
(let () (begin (set! sparc_ldhr (sparc-instruction 'r11 2)) 'sparc_ldhr))
(let () (begin (set! sparc_ldbi (sparc-instruction 'i11 1)) 'sparc_ldbi))
(let () (begin (set! sparc_ldbr (sparc-instruction 'r11 1)) 'sparc_ldbr))
(let () (begin (set! sparc_lddfi (sparc-instruction 'i11 35)) 'sparc_lddfi))
(let () (begin (set! sparc_lddfr (sparc-instruction 'r11 35)) 'sparc_lddfr))
(let () (begin (set! sparc_stdi (sparc-instruction 'si11 7)) 'sparc_stdi))
(let () (begin (set! sparc_stdr (sparc-instruction 'sr11 7)) 'sparc_stdr))
(let () (begin (set! sparc_sti (sparc-instruction 'si11 4)) 'sparc_sti))
(let () (begin (set! sparc_str (sparc-instruction 'sr11 4)) 'sparc_str))
(let () (begin (set! sparc_sthi (sparc-instruction 'si11 6)) 'sparc_sthi))
(let () (begin (set! sparc_sthr (sparc-instruction 'sr11 6)) 'sparc_sthr))
(let () (begin (set! sparc_stbi (sparc-instruction 'si11 5)) 'sparc_stbi))
(let () (begin (set! sparc_stbr (sparc-instruction 'sr11 5)) 'sparc_stbr))
(let () (begin (set! sparc_stdfi (sparc-instruction 'si11 39)) 'sparc_stdfi))
(let () (begin (set! sparc_stdfr (sparc-instruction 'sr11 39)) 'sparc_stdfr))
(let () (begin (set! sparc_sethi (sparc-instruction 'sethi 4)) 'sparc_sethi))
(let () (begin (set! sparc_andr (sparc-instruction 'r10 1)) 'sparc_andr))
(let () (begin (set! sparc_andrcc (sparc-instruction 'r10 17)) 'sparc_andrcc))
(let () (begin (set! sparc_andi (sparc-instruction 'i10 1)) 'sparc_andi))
(let () (begin (set! sparc_andicc (sparc-instruction 'i10 17)) 'sparc_andicc))
(let () (begin (set! sparc_orr (sparc-instruction 'r10 2)) 'sparc_orr))
(let () (begin (set! sparc_orrcc (sparc-instruction 'r10 18)) 'sparc_orrcc))
(let () (begin (set! sparc_ori (sparc-instruction 'i10 2)) 'sparc_ori))
(let () (begin (set! sparc_oricc (sparc-instruction 'i10 18)) 'sparc_oricc))
(let () (begin (set! sparc_xorr (sparc-instruction 'r10 3)) 'sparc_xorr))
(let () (begin (set! sparc_xorrcc (sparc-instruction 'r10 19)) 'sparc_xorrcc))
(let () (begin (set! sparc_xori (sparc-instruction 'i10 3)) 'sparc_xori))
(let () (begin (set! sparc_xoricc (sparc-instruction 'i10 19)) 'sparc_xoricc))
(let () (begin (set! sparc_sllr (sparc-instruction 'r10 37)) 'sparc_sllr))
(let () (begin (set! sparc_slli (sparc-instruction 'i10 37)) 'sparc_slli))
(let () (begin (set! sparc_srlr (sparc-instruction 'r10 38)) 'sparc_srlr))
(let () (begin (set! sparc_srli (sparc-instruction 'i10 38)) 'sparc_srli))
(let () (begin (set! sparc_srar (sparc-instruction 'r10 39)) 'sparc_srar))
(let () (begin (set! sparc_srai (sparc-instruction 'i10 39)) 'sparc_srai))
(let () (begin (set! sparc_addr (sparc-instruction 'r10 0)) 'sparc_addr))
(let () (begin (set! sparc_addrcc (sparc-instruction 'r10 16)) 'sparc_addrcc))
(let () (begin (set! sparc_addi (sparc-instruction 'i10 0)) 'sparc_addi))
(let () (begin (set! sparc_addicc (sparc-instruction 'i10 16)) 'sparc_addicc))
(let () (begin (set! sparc_taddrcc (sparc-instruction 'r10 32)) 'sparc_taddrcc))
(let () (begin (set! sparc_taddicc (sparc-instruction 'i10 32)) 'sparc_taddicc))
(let () (begin (set! sparc_subr (sparc-instruction 'r10 4)) 'sparc_subr))
(let () (begin (set! sparc_subrcc (sparc-instruction 'r10 20)) 'sparc_subrcc))
(let () (begin (set! sparc_subi (sparc-instruction 'i10 4)) 'sparc_subi))
(let () (begin (set! sparc_subicc (sparc-instruction 'i10 20)) 'sparc_subicc))
(let () (begin (set! sparc_tsubrcc (sparc-instruction 'r10 33)) 'sparc_tsubrcc))
(let () (begin (set! sparc_tsubicc (sparc-instruction 'i10 33)) 'sparc_tsubicc))
(let () (begin (set! sparc_smulr (sparc-instruction 'r10 11)) 'sparc_smulr))
(let () (begin (set! sparc_smulrcc (sparc-instruction 'r10 27)) 'sparc_smulrcc))
(let () (begin (set! sparc_smuli (sparc-instruction 'i10 11)) 'sparc_smuli))
(let () (begin (set! sparc_smulicc (sparc-instruction 'i10 27)) 'sparc_smulicc))
(let () (begin (set! sparc_sdivr (sparc-instruction 'r10 15)) 'sparc_sdivr))
(let () (begin (set! sparc_sdivrcc (sparc-instruction 'r10 31)) 'sparc_sdivrcc))
(let () (begin (set! sparc_sdivi (sparc-instruction 'i10 15)) 'sparc_sdivi))
(let () (begin (set! sparc_sdivicc (sparc-instruction 'i10 31)) 'sparc_sdivicc))
(let () (begin (set! sparc_b (sparc-instruction 'b00 8)) 'sparc_b))
(let () (begin (set! sparc_b_a (sparc-instruction 'a00 8)) 'sparc_b_a))
(let () (begin (set! sparc_bne (sparc-instruction 'b00 9)) 'sparc_bne))
(let () (begin (set! sparc_bne_a (sparc-instruction 'a00 9)) 'sparc_bne_a))
(let () (begin (set! sparc_be (sparc-instruction 'b00 1)) 'sparc_be))
(let () (begin (set! sparc_be_a (sparc-instruction 'a00 1)) 'sparc_be_a))
(let () (begin (set! sparc_bg (sparc-instruction 'b00 10)) 'sparc_bg))
(let () (begin (set! sparc_bg_a (sparc-instruction 'a00 10)) 'sparc_bg_a))
(let () (begin (set! sparc_ble (sparc-instruction 'b00 2)) 'sparc_ble))
(let () (begin (set! sparc_ble_a (sparc-instruction 'a00 2)) 'sparc_ble_a))
(let () (begin (set! sparc_bge (sparc-instruction 'b00 11)) 'sparc_bge))
(let () (begin (set! sparc_bge_a (sparc-instruction 'a00 11)) 'sparc_bge_a))
(let () (begin (set! sparc_bl (sparc-instruction 'b00 3)) 'sparc_bl))
(let () (begin (set! sparc_bl_a (sparc-instruction 'a00 3)) 'sparc_bl_a))
(let () (begin (set! sparc_bgu (sparc-instruction 'b00 12)) 'sparc_bgu))
(let () (begin (set! sparc_bgu_a (sparc-instruction 'a00 12)) 'sparc_bgu_a))
(let () (begin (set! sparc_bleu (sparc-instruction 'b00 4)) 'sparc_bleu))
(let () (begin (set! sparc_bleu_a (sparc-instruction 'a00 4)) 'sparc_bleu_a))
(let () (begin (set! sparc_bcc (sparc-instruction 'b00 13)) 'sparc_bcc))
(let () (begin (set! sparc_bcc_a (sparc-instruction 'a00 13)) 'sparc_bcc_a))
(let () (begin (set! sparc_bcs (sparc-instruction 'b00 5)) 'sparc_bcs))
(let () (begin (set! sparc_bcs_a (sparc-instruction 'a00 5)) 'sparc_bcs_a))
(let () (begin (set! sparc_bpos (sparc-instruction 'b00 14)) 'sparc_bpos))
(let () (begin (set! sparc_bpos_a (sparc-instruction 'a00 14)) 'sparc_bpos_a))
(let () (begin (set! sparc_bneg (sparc-instruction 'b00 6)) 'sparc_bneg))
(let () (begin (set! sparc_bneg_a (sparc-instruction 'a00 6)) 'sparc_bneg_a))
(let () (begin (set! sparc_bvc (sparc-instruction 'b00 15)) 'sparc_bvc))
(let () (begin (set! sparc_bvc_a (sparc-instruction 'a00 15)) 'sparc_bvc_a))
(let () (begin (set! sparc_bvs (sparc-instruction 'b00 7)) 'sparc_bvs))
(let () (begin (set! sparc_bvs_a (sparc-instruction 'a00 7)) 'sparc_bvs_a))
(let () (begin (set! sparc_call (sparc-instruction 'call)) 'sparc_call))
(let () (begin (set! sparc_jmplr (sparc-instruction 'r10 56 'jump)) 'sparc_jmplr))
(let () (begin (set! sparc_jmpli (sparc-instruction 'i10 56 'jump)) 'sparc_jmpli))
(let () (begin (set! sparc_nop (sparc-instruction 'nop 4)) 'sparc_nop))
(let () (begin (set! sparc_ornr (sparc-instruction 'r10 6)) 'sparc_ornr))
(let () (begin (set! sparc_orni (sparc-instruction 'i10 6)) 'sparc_orni))
(let () (begin (set! sparc_ornrcc (sparc-instruction 'r10 22)) 'sparc_ornrcc))
(let () (begin (set! sparc_ornicc (sparc-instruction 'i10 22)) 'sparc_ornicc))
(let () (begin (set! sparc_andni (sparc-instruction 'i10 5)) 'sparc_andni))
(let () (begin (set! sparc_andnr (sparc-instruction 'r10 5)) 'sparc_andnr))
(let () (begin (set! sparc_andnicc (sparc-instruction 'i10 21)) 'sparc_andnicc))
(let () (begin (set! sparc_andnrcc (sparc-instruction 'r10 21)) 'sparc_andnrcc))
(let () (begin (set! sparc_rdy (sparc-instruction 'r10 40 'rdy)) 'sparc_rdy))
(let () (begin (set! sparc_wryr (sparc-instruction 'r10 48 'wry)) 'sparc_wryr))
(let () (begin (set! sparc_wryi (sparc-instruction 'i10 48 'wry)) 'sparc_wryi))
(let () (begin (set! sparc_fb (sparc-instruction 'fb00 8)) 'sparc_fb))
(let () (begin (set! sparc_fb_a (sparc-instruction 'fa00 8)) 'sparc_fb_a))
(let () (begin (set! sparc_fbn (sparc-instruction 'fb00 0)) 'sparc_fbn))
(let () (begin (set! sparc_fbn_a (sparc-instruction 'fa00 0)) 'sparc_fbn_a))
(let () (begin (set! sparc_fbu (sparc-instruction 'fb00 7)) 'sparc_fbu))
(let () (begin (set! sparc_fbu_a (sparc-instruction 'fa00 7)) 'sparc_fbu_a))
(let () (begin (set! sparc_fbg (sparc-instruction 'fb00 6)) 'sparc_fbg))
(let () (begin (set! sparc_fbg_a (sparc-instruction 'fa00 6)) 'sparc_fbg_a))
(let () (begin (set! sparc_fbug (sparc-instruction 'fb00 5)) 'sparc_fbug))
(let () (begin (set! sparc_fbug_a (sparc-instruction 'fa00 5)) 'sparc_fbug_a))
(let () (begin (set! sparc_fbl (sparc-instruction 'fb00 4)) 'sparc_fbl))
(let () (begin (set! sparc_fbl_a (sparc-instruction 'fa00 4)) 'sparc_fbl_a))
(let () (begin (set! sparc_fbul (sparc-instruction 'fb00 3)) 'sparc_fbul))
(let () (begin (set! sparc_fbul_a (sparc-instruction 'fa00 3)) 'sparc_fbul_a))
(let () (begin (set! sparc_fblg (sparc-instruction 'fb00 2)) 'sparc_fblg))
(let () (begin (set! sparc_fblg_a (sparc-instruction 'fa00 2)) 'sparc_fblg_a))
(let () (begin (set! sparc_fbne (sparc-instruction 'fb00 1)) 'sparc_fbne))
(let () (begin (set! sparc_fbne_a (sparc-instruction 'fa00 1)) 'sparc_fbne_a))
(let () (begin (set! sparc_fbe (sparc-instruction 'fb00 9)) 'sparc_fbe))
(let () (begin (set! sparc_fbe_a (sparc-instruction 'fa00 9)) 'sparc_fbe_a))
(let () (begin (set! sparc_fbue (sparc-instruction 'fb00 10)) 'sparc_fbue))
(let () (begin (set! sparc_fbue_a (sparc-instruction 'fa00 10)) 'sparc_fbue_a))
(let () (begin (set! sparc_fbge (sparc-instruction 'fb00 11)) 'sparc_fbge))
(let () (begin (set! sparc_fbge_a (sparc-instruction 'fa00 11)) 'sparc_fbge_a))
(let () (begin (set! sparc_fbuge (sparc-instruction 'fb00 12)) 'sparc_fbuge))
(let () (begin (set! sparc_fbuge_a (sparc-instruction 'fa00 12)) 'sparc_fbuge_a))
(let () (begin (set! sparc_fble (sparc-instruction 'fb00 13)) 'sparc_fble))
(let () (begin (set! sparc_fble_a (sparc-instruction 'fa00 13)) 'sparc_fble_a))
(let () (begin (set! sparc_fbule (sparc-instruction 'fb00 14)) 'sparc_fbule))
(let () (begin (set! sparc_fbule_a (sparc-instruction 'fa00 14)) 'sparc_fbule_a))
(let () (begin (set! sparc_fbo (sparc-instruction 'fb00 15)) 'sparc_fbo))
(let () (begin (set! sparc_fbo_a (sparc-instruction 'fa00 15)) 'sparc_fbo_a))
(let () (begin (set! sparc_faddd (sparc-instruction 'fp 66)) 'sparc_faddd))
(let () (begin (set! sparc_fsubd (sparc-instruction 'fp 70)) 'sparc_fsubd))
(let () (begin (set! sparc_fmuld (sparc-instruction 'fp 74)) 'sparc_fmuld))
(let () (begin (set! sparc_fdivd (sparc-instruction 'fp 78)) 'sparc_fdivd))
(let () (begin (set! sparc%fnegs (sparc-instruction 'fp 5)) 'sparc%fnegs))
(let () (begin (set! sparc%fmovs (sparc-instruction 'fp 1)) 'sparc%fmovs))
(let () (begin (set! sparc%fabss (sparc-instruction 'fp 9)) 'sparc%fabss))
(let () (begin (set! sparc%fcmpdcc (sparc-instruction 'fpcc 82)) 'sparc%fcmpdcc))
(let () (begin (set! sparc_slot (sparc-instruction 'slot)) 'sparc_slot))
(let () (begin (set! sparc_slot2 (sparc-instruction 'slot2)) 'sparc_slot2))
(let () (begin (set! sparc_label (sparc-instruction 'label)) 'sparc_label))
(let () (begin (set! sparc_bnz sparc_bne) 'sparc_bnz))
(let () (begin (set! sparc_bnz_a sparc_bne_a) 'sparc_bnz_a))
(let () (begin (set! sparc_bz sparc_be) 'sparc_bz))
(let () (begin (set! sparc_bz_a sparc_be_a) 'sparc_bz_a))
(let () (begin (set! sparc_bgeu sparc_bcc) 'sparc_bgeu))
(let () (begin (set! sparc_bgeu_a sparc_bcc_a) 'sparc_bgeu_a))
(let () (begin (set! sparc_blu sparc_bcs) 'sparc_blu))
(let () (begin (set! sparc_blu_a sparc_bcs_a) 'sparc_blu_a))
(let () (begin (set! sparc_cmpr (lambda (_as_1 _r1_1 _r2_1) (let ((_sparc_cmpr_2 0)) (begin (set! _sparc_cmpr_2 (lambda (_as_3 _r1_3 _r2_3) (sparc_subrcc _as_3 _r1_3 _r2_3 $r_g0))) (_sparc_cmpr_2 _as_1 _r1_1 _r2_1))))) 'sparc_cmpr))
(let () (begin (set! sparc_cmpi (lambda (_as_1 _r_1 _imm_1) (let ((_sparc_cmpi_2 0)) (begin (set! _sparc_cmpi_2 (lambda (_as_3 _r_3 _imm_3) (sparc_subicc _as_3 _r_3 _imm_3 $r_g0))) (_sparc_cmpi_2 _as_1 _r_1 _imm_1))))) 'sparc_cmpi))
(let () (begin (set! sparc_move (lambda (_as_1 _rs_1 _rd_1) (let ((_sparc_move_2 0)) (begin (set! _sparc_move_2 (lambda (_as_3 _rs_3 _rd_3) (sparc_orr _as_3 $r_g0 _rs_3 _rd_3))) (_sparc_move_2 _as_1 _rs_1 _rd_1))))) 'sparc_move))
(let () (begin (set! sparc_set (lambda (_as_1 _imm_1 _rd_1) (let ((_sparc_set_2 0)) (begin (set! _sparc_set_2 (lambda (_as_3 _imm_3 _rd_3) (sparc_ori _as_3 $r_g0 _imm_3 _rd_3))) (_sparc_set_2 _as_1 _imm_1 _rd_1))))) 'sparc_set))
(let () (begin (set! sparc_btsti (lambda (_as_1 _rs_1 _imm_1) (let ((_sparc_btsti_2 0)) (begin (set! _sparc_btsti_2 (lambda (_as_3 _rs_3 _imm_3) (sparc_andicc _as_3 _rs_3 _imm_3 $r_g0))) (_sparc_btsti_2 _as_1 _rs_1 _imm_1))))) 'sparc_btsti))
(let () (begin (set! sparc_clr (lambda (_as_1 _rd_1) (let ((_sparc_clr_2 0)) (begin (set! _sparc_clr_2 (lambda (_as_3 _rd_3) (sparc_move _as_3 $r_g0 _rd_3))) (_sparc_clr_2 _as_1 _rd_1))))) 'sparc_clr))
(let () (begin (set! sparc_deccc (lambda (_as_1 _rs_1 _ _rest_1) (let ((_k_4 (if (null? _rest_1) 1 (if (null? (let ((_x_7_10 _rest_1)) (begin (_check! (pair? _x_7_10) 1 _x_7_10) (cdr:pair _x_7_10)))) (let ((_x_11_14 _rest_1)) (begin (_check! (pair? _x_11_14) 0 _x_11_14) (car:pair _x_11_14))) (asm-error "sparc_deccc: too many operands: " _rest_1))))) (sparc_subicc _as_1 _rs_1 _k_4 _rs_1)))) 'sparc_deccc))
(let () (begin (set! sparc_fmovd (lambda (_as_1 _rs_1 _rd_1) (let ((_sparc_fmovd_2 0)) (begin (set! _sparc_fmovd_2 (lambda (_as_3 _rs_3 _rd_3) (begin (sparc%fmovs _as_3 _rs_3 0 _rd_3) (sparc%fmovs _as_3 (+ _rs_3 1) 0 (+ _rd_3 1))))) (_sparc_fmovd_2 _as_1 _rs_1 _rd_1))))) 'sparc_fmovd))
(let () (begin (set! sparc_fnegd (lambda (_as_1 _rs_1 _rd_1) (let ((_sparc_fnegd_2 0)) (begin (set! _sparc_fnegd_2 (lambda (_as_3 _rs_3 _rd_3) (begin (sparc%fnegs _as_3 _rs_3 0 _rd_3) (if (not (= _rs_3 _rd_3)) (sparc%fmovs _as_3 (+ _rs_3 1) 0 (+ _rd_3 1)) (unspecified))))) (_sparc_fnegd_2 _as_1 _rs_1 _rd_1))))) 'sparc_fnegd))
(let () (begin (set! sparc_fabsd (lambda (_as_1 _rs_1 _rd_1) (let ((_sparc_fabsd_2 0)) (begin (set! _sparc_fabsd_2 (lambda (_as_3 _rs_3 _rd_3) (begin (sparc%fabss _as_3 _rs_3 0 _rd_3) (if (not (= _rs_3 _rd_3)) (sparc%fmovs _as_3 (+ _rs_3 1) 0 (+ _rd_3 1)) (unspecified))))) (_sparc_fabsd_2 _as_1 _rs_1 _rd_1))))) 'sparc_fabsd))
(let () (begin (set! sparc_fcmpd (lambda (_as_1 _rs1_1 _rs2_1) (let ((_sparc_fcmpd_2 0)) (begin (set! _sparc_fcmpd_2 (lambda (_as_3 _rs1_3 _rs2_3) (sparc%fcmpdcc _as_3 _rs1_3 _rs2_3 0))) (_sparc_fcmpd_2 _as_1 _rs1_1 _rs2_1))))) 'sparc_fcmpd))
(let () (begin (set! emit-register->global! (lambda (_as_1 _rs_1 _offset_1) (let ((_emit-register->global!_2 0)) (begin (set! _emit-register->global!_2 (lambda (_as_3 _rs_3 _offset_3) (if (= _rs_3 $r_result) (begin (sparc_move _as_3 $r_result $r_argreg2) (emit-const->register! _as_3 _offset_3 $r_result) (if (write-barrier) (sparc_jmpli _as_3 $r_millicode $m_addtrans $r_o7) (unspecified)) (sparc_sti _as_3 $r_argreg2 (- 0 $tag_pair-tag) $r_result)) (begin (emit-const->register! _as_3 _offset_3 $r_result) (sparc_sti _as_3 _rs_3 (- 0 $tag_pair-tag) $r_result) (if (write-barrier) (millicode-call/1arg _as_3 $m_addtrans _rs_3) (unspecified)))))) (_emit-register->global!_2 _as_1 _rs_1 _offset_1))))) 'emit-register->global!))
(let () (begin (set! emit-global->register! (lambda (_as_1 _offset_1 _r_1) (let ((_emit-global->register!_2 0)) (begin (set! _emit-global->register!_2 (lambda (_as_3 _offset_3 _r_3) (emit-load-global _as_3 _offset_3 _r_3 (catch-undefined-globals)))) (_emit-global->register!_2 _as_1 _offset_1 _r_1))))) 'emit-global->register!))
(let () (begin (set! emit-load-global (lambda (_as_1 _offset_1 _r_1 _check?_1) (let ((_emit-load-global_2 0)) (begin (set! _emit-load-global_2 (lambda (_as_3 _offset_3 _r_3 _check?_3) (let ((_emit-undef-check!_4 (unspecified))) (begin (set! _emit-undef-check!_4 (lambda (_as_5 _r_5) (if _check?_3 (let ((_global-ok_8 (new-label))) (begin (sparc_cmpi _as_5 _r_5 $imm_undefined) (sparc_bne_a _as_5 _global-ok_8) (sparc_slot _as_5) (millicode-call/0arg _as_5 $m_global-ex) (sparc_label _as_5 _global-ok_8))) (unspecified)))) (emit-const->register! _as_3 _offset_3 $r_argreg2) (if (hardware-mapped? _r_3) (begin (sparc_ldi _as_3 $r_argreg2 (- 0 $tag_pair-tag) _r_3) (_emit-undef-check!_4 _as_3 _r_3)) (begin (sparc_ldi _as_3 $r_argreg2 (- 0 $tag_pair-tag) $r_tmp0) (emit-store-reg! _as_3 $r_tmp0 _r_3) (_emit-undef-check!_4 _as_3 $r_tmp0))))))) (_emit-load-global_2 _as_1 _offset_1 _r_1 _check?_1))))) 'emit-load-global))
(let () (begin (set! emit-register->register! (lambda (_as_1 _from_1 _to_1) (let ((_emit-register->register!_2 0)) (begin (set! _emit-register->register!_2 (lambda (_as_3 _from_3 _to_3) (if (not (= _from_3 _to_3)) (if (if (hardware-mapped? _from_3) (hardware-mapped? _to_3) #f) (sparc_move _as_3 _from_3 _to_3) (if (hardware-mapped? _from_3) (emit-store-reg! _as_3 _from_3 _to_3) (if (hardware-mapped? _to_3) (emit-load-reg! _as_3 _from_3 _to_3) (begin (emit-load-reg! _as_3 _from_3 $r_tmp0) (emit-store-reg! _as_3 $r_tmp0 _to_3))))) (unspecified)))) (_emit-register->register!_2 _as_1 _from_1 _to_1))))) 'emit-register->register!))
(let () (begin (set! emit-args=! (lambda (_as_1 _n_1) (let ((_emit-args=!_2 0)) (begin (set! _emit-args=!_2 (lambda (_as_3 _n_3) (if (not (unsafe-code)) (let ((_l2_6 (new-label))) (begin (sparc_cmpi _as_3 $r_result (thefixnum _n_3)) (sparc_be_a _as_3 _l2_6) (sparc_slot _as_3) (millicode-call/numarg-in-reg _as_3 $m_argc-ex (thefixnum _n_3) $r_argreg2) (sparc_label _as_3 _l2_6))) (unspecified)))) (_emit-args=!_2 _as_1 _n_1))))) 'emit-args=!))
(let () (begin (set! emit-args>=! (lambda (_as_1 _n_1) (let ((_emit-args>=!_2 0)) (begin (set! _emit-args>=!_2 (lambda (_as_3 _n_3) (let ((_l0_6 (new-label)) (_l99_6 (new-label)) (_l98_6 (new-label))) (begin (if (< _n_3 (- *lastreg* 1)) (let ((_dest_9 (regname (+ _n_3 1)))) (begin (sparc_cmpi _as_3 $r_result (thefixnum _n_3)) (if (hardware-mapped? _dest_9) (begin (sparc_be_a _as_3 _l99_6) (sparc_set _as_3 $imm_null _dest_9)) (begin (sparc_set _as_3 $imm_null $r_tmp0) (sparc_be_a _as_3 _l99_6) (sparc_sti _as_3 $r_tmp0 (swreg-global-offset _dest_9) $r_globals))) (sparc_cmpi _as_3 $r_result (thefixnum (+ _n_3 1))) (sparc_bne_a _as_3 _l98_6) (sparc_nop _as_3) (millicode-call/numarg-in-result _as_3 $m_alloc 8) (let ((_src1_12 (force-hwreg! _as_3 _dest_9 $r_tmp1))) (begin (sparc_set _as_3 $imm_null $r_tmp0) (sparc_sti _as_3 _src1_12 0 $r_result) (sparc_sti _as_3 $r_tmp0 4 $r_result) (sparc_addi _as_3 $r_result $tag_pair-tag $r_result) (sparc_b _as_3 _l99_6) (if (hardware-mapped? _dest_9) (sparc_move _as_3 $r_result _dest_9) (sparc_sti _as_3 $r_result (swreg-global-offset _dest_9) $r_globals)))))) (unspecified)) (sparc_label _as_3 _l98_6) (sparc_move _as_3 $r_reg0 $r_argreg3) (millicode-call/numarg-in-reg _as_3 $m_varargs (thefixnum _n_3) $r_argreg2) (sparc_label _as_3 _l99_6))))) (_emit-args>=!_2 _as_1 _n_1))))) 'emit-args>=!))
(let () (begin (set! emit-invoke (lambda (_as_1 _n_1 _setrtn?_1 _mc-exception_1) (let ((_emit-invoke_2 0)) (begin (set! _emit-invoke_2 (lambda (_as_3 _n_3 _setrtn?_3 _mc-exception_3) (let ((_start_6 (new-label)) (_timer-ok_6 (new-label)) (_proc-ok_6 (new-label))) (begin (if (not (unsafe-code)) (begin (sparc_label _as_3 _start_6) (sparc_subicc _as_3 $r_timer 1 $r_timer) (sparc_bne _as_3 _timer-ok_6) (sparc_andi _as_3 $r_result $tag_tagmask $r_tmp0) (millicode-call/ret _as_3 $m_timer-exception _start_6) (sparc_label _as_3 _timer-ok_6) (sparc_cmpi _as_3 $r_tmp0 $tag_procedure-tag) (sparc_be_a _as_3 _proc-ok_6) (sparc_ldi _as_3 $r_result $p_codevector $r_tmp0) (millicode-call/ret _as_3 _mc-exception_3 _start_6) (sparc_label _as_3 _proc-ok_6)) (begin (sparc_label _as_3 _start_6) (sparc_subicc _as_3 $r_timer 1 $r_timer) (sparc_bne_a _as_3 _timer-ok_6) (sparc_ldi _as_3 $r_result $p_codevector $r_tmp0) (millicode-call/ret _as_3 $m_timer-exception _start_6) (sparc_label _as_3 _timer-ok_6))) (sparc_move _as_3 $r_result $r_reg0) (if _setrtn?_3 (begin (sparc_set _as_3 (thefixnum _n_3) $r_result) (sparc_jmpli _as_3 $r_tmp0 $p_codeoffset $r_o7) (sparc_sti _as_3 $r_o7 4 $r_stkp)) (begin (sparc_jmpli _as_3 $r_tmp0 $p_codeoffset $r_g0) (sparc_set _as_3 (thefixnum _n_3) $r_result))))))) (_emit-invoke_2 _as_1 _n_1 _setrtn?_1 _mc-exception_1))))) 'emit-invoke))
(let () (begin (set! emit-save0! (lambda (_as_1 _n_1) (let ((_emit-save0!_2 0)) (begin (set! _emit-save0!_2 (lambda (_as_3 _n_3) (let* ((_l1_6 (new-label)) (_l0_9 (new-label)) (_framesize_12 (+ 8 (* (+ _n_3 1) 4))) (_realsize_15 (roundup8 (+ _framesize_12 4)))) (let () (begin (sparc_label _as_3 _l0_9) (sparc_subi _as_3 $r_stkp _realsize_15 $r_stkp) (sparc_cmpr _as_3 $r_stklim $r_stkp) (sparc_ble_a _as_3 _l1_6) (sparc_set _as_3 _framesize_12 $r_tmp0) (sparc_addi _as_3 $r_stkp _realsize_15 $r_stkp) (millicode-call/ret _as_3 $m_stkoflow _l0_9) (sparc_label _as_3 _l1_6) (sparc_sti _as_3 $r_tmp0 0 $r_stkp) (sparc_sti _as_3 $r_g0 4 $r_stkp)))))) (_emit-save0!_2 _as_1 _n_1))))) 'emit-save0!))
(let () (begin (set! emit-save1! (lambda (_as_1 _v_1) (let ((_emit-save1!_2 0)) (begin (set! _emit-save1!_2 (lambda (_as_3 _v_3) (let ((_n_6 (let ((_v_21_24 _v_3)) (begin (_check! (vector? _v_21_24) 42 _v_21_24) (vector-length:vec _v_21_24))))) (let ((_i_9 0) (_offset_9 12)) (let () (let ((_loop_12 (unspecified))) (begin (set! _loop_12 (lambda (_i_13 _offset_13) (if (= _i_13 _n_6) #t (if (let ((_v_16_19 _v_3) (_i_16_19 _i_13)) (begin (_check! (fixnum? _i_16_19) 40 _v_16_19 _i_16_19) (_check! (vector? _v_16_19) 40 _v_16_19 _i_16_19) (_check! (<:fix:fix _i_16_19 (vector-length:vec _v_16_19)) 40 _v_16_19 _i_16_19) (_check! (>=:fix:fix _i_16_19 0) 40 _v_16_19 _i_16_19) (vector-ref:trusted _v_16_19 _i_16_19))) (begin (sparc_sti _as_3 $r_g0 _offset_13 $r_stkp) (_loop_12 (+ _i_13 1) (+ _offset_13 4))) (_loop_12 (+ _i_13 1) (+ _offset_13 4)))))) (_loop_12 _i_9 _offset_9)))))))) (_emit-save1!_2 _as_1 _v_1))))) 'emit-save1!))
(let () (begin (set! emit-restore! (lambda (_as_1 _n_1) (let ((_emit-restore!_2 0)) (begin (set! _emit-restore!_2 (lambda (_as_3 _n_3) (let ((_n_6 (min _n_3 31))) (let () (let ((_loop_8_11_14 (unspecified))) (begin (set! _loop_8_11_14 (lambda (_i_15 _offset_15) (if (> _i_15 _n_6) (if #f #f (unspecified)) (begin (begin #t (let ((_r_20 (regname _i_15))) (if (hardware-mapped? _r_20) (sparc_ldi _as_3 $r_stkp _offset_15 _r_20) (begin (sparc_ldi _as_3 $r_stkp _offset_15 $r_tmp0) (emit-store-reg! _as_3 $r_tmp0 _r_20))))) (_loop_8_11_14 (+ _i_15 1) (+ _offset_15 4)))))) (_loop_8_11_14 0 12))))))) (_emit-restore!_2 _as_1 _n_1))))) 'emit-restore!))
(let () (begin (set! emit-pop! (lambda (_as_1 _n_1 _returning?_1) (let ((_emit-pop!_2 0)) (begin (set! _emit-pop!_2 (lambda (_as_3 _n_3 _returning?_3) (let* ((_framesize_6 (+ 8 (* (+ _n_3 1) 4))) (_realsize_9 (roundup8 (+ _framesize_6 4)))) (let () (if _returning?_3 (begin (sparc_ldi _as_3 $r_stkp (+ _realsize_9 4) $r_o7) (sparc_jmpli _as_3 $r_o7 8 $r_g0) (sparc_addi _as_3 $r_stkp _realsize_9 $r_stkp)) (sparc_addi _as_3 $r_stkp _realsize_9 $r_stkp)))))) (_emit-pop!_2 _as_1 _n_1 _returning?_1))))) 'emit-pop!))
(let () (begin (set! emit-setrtn! (lambda (_as_1 _label_1) (let ((_emit-setrtn!_2 0)) (begin (set! _emit-setrtn!_2 (lambda (_as_3 _label_3) (begin (emit-return-address! _as_3 _label_3) (sparc_sti _as_3 $r_o7 4 $r_stkp)))) (_emit-setrtn!_2 _as_1 _label_1))))) 'emit-setrtn!))
(let () (begin (set! emit-apply! (lambda (_as_1 _r1_1 _r2_1) (let ((_emit-apply!_2 0)) (begin (set! _emit-apply!_2 (lambda (_as_3 _r1_3 _r2_3) (let ((_l0_6 (new-label))) (begin (check-timer0 _as_3) (sparc_label _as_3 _l0_6) (emit-move2hwreg! _as_3 _r1_3 $r_argreg2) (emit-move2hwreg! _as_3 _r2_3 $r_argreg3) (millicode-call/0arg _as_3 $m_apply))))) (_emit-apply!_2 _as_1 _r1_1 _r2_1))))) 'emit-apply!))
(let () (begin (set! emit-load! (lambda (_as_1 _slot_1 _dest-reg_1) (let ((_emit-load!_2 0)) (begin (set! _emit-load!_2 (lambda (_as_3 _slot_3 _dest-reg_3) (if (hardware-mapped? _dest-reg_3) (sparc_ldi _as_3 $r_stkp (+ 12 (* _slot_3 4)) _dest-reg_3) (begin (sparc_ldi _as_3 $r_stkp (+ 12 (* _slot_3 4)) $r_tmp0) (emit-store-reg! _as_3 $r_tmp0 _dest-reg_3))))) (_emit-load!_2 _as_1 _slot_1 _dest-reg_1))))) 'emit-load!))
(let () (begin (set! emit-store! (lambda (_as_1 _k_1 _n_1) (let ((_emit-store!_2 0)) (begin (set! _emit-store!_2 (lambda (_as_3 _k_3 _n_3) (if (hardware-mapped? _k_3) (sparc_sti _as_3 _k_3 (+ 12 (* _n_3 4)) $r_stkp) (begin (emit-load-reg! _as_3 _k_3 $r_tmp0) (sparc_sti _as_3 $r_tmp0 (+ 12 (* _n_3 4)) $r_stkp))))) (_emit-store!_2 _as_1 _k_1 _n_1))))) 'emit-store!))
(let () (begin (set! emit-lexical! (lambda (_as_1 _m_1 _n_1) (let ((_emit-lexical!_2 0)) (begin (set! _emit-lexical!_2 (lambda (_as_3 _m_3 _n_3) (let ((_base_6 (emit-follow-chain! _as_3 _m_3))) (sparc_ldi _as_3 _base_6 (- (procedure-slot-offset _n_3) $tag_procedure-tag) $r_result)))) (_emit-lexical!_2 _as_1 _m_1 _n_1))))) 'emit-lexical!))
(let () (begin (set! emit-setlex! (lambda (_as_1 _m_1 _n_1) (let ((_emit-setlex!_2 0)) (begin (set! _emit-setlex!_2 (lambda (_as_3 _m_3 _n_3) (let ((_base_6 (emit-follow-chain! _as_3 _m_3))) (begin (sparc_sti _as_3 $r_result (- (procedure-slot-offset _n_3) $tag_procedure-tag) _base_6) (if (write-barrier) (begin (sparc_move _as_3 $r_result $r_argreg2) (millicode-call/1arg-in-result _as_3 $m_addtrans _base_6)) (unspecified)))))) (_emit-setlex!_2 _as_1 _m_1 _n_1))))) 'emit-setlex!))
(let () (begin (set! emit-follow-chain! (lambda (_as_1 _m_1) (let ((_emit-follow-chain!_2 0)) (begin (set! _emit-follow-chain!_2 (lambda (_as_3 _m_3) (let ((_q_6 _m_3)) (let () (let ((_loop_9 (unspecified))) (begin (set! _loop_9 (lambda (_q_10) (if (not (zero? _q_10)) (begin (sparc_ldi _as_3 (if (= _q_10 _m_3) $r_reg0 $r_argreg3) $p_linkoffset $r_argreg3) (_loop_9 (- _q_10 1))) (if (zero? _m_3) $r_reg0 $r_argreg3)))) (_loop_9 _q_6))))))) (_emit-follow-chain!_2 _as_1 _m_1))))) 'emit-follow-chain!))
(let () (begin (set! emit-return! (lambda (_as_1) (let ((_emit-return!_2 0)) (begin (set! _emit-return!_2 (lambda (_as_3) (begin (sparc_ldi _as_3 $r_stkp 4 $r_o7) (sparc_jmpli _as_3 $r_o7 8 $r_g0) (sparc_nop _as_3)))) (_emit-return!_2 _as_1))))) 'emit-return!))
(let () (begin (set! emit-return-reg! (lambda (_as_1 _r_1) (let ((_emit-return-reg!_2 0)) (begin (set! _emit-return-reg!_2 (lambda (_as_3 _r_3) (begin (sparc_ldi _as_3 $r_stkp 4 $r_o7) (sparc_jmpli _as_3 $r_o7 8 $r_g0) (sparc_move _as_3 _r_3 $r_result)))) (_emit-return-reg!_2 _as_1 _r_1))))) 'emit-return-reg!))
(let () (begin (set! emit-return-const! (lambda (_as_1 _c_1) (let ((_emit-return-const!_2 0)) (begin (set! _emit-return-const!_2 (lambda (_as_3 _c_3) (begin (sparc_ldi _as_3 $r_stkp 4 $r_o7) (sparc_jmpli _as_3 $r_o7 8 $r_g0) (emit-constant->register _as_3 _c_3 $r_result)))) (_emit-return-const!_2 _as_1 _c_1))))) 'emit-return-const!))
(let () (begin (set! emit-mvrtn! (lambda (_as_1) (let ((_emit-mvrtn!_2 0)) (begin (set! _emit-mvrtn!_2 (lambda (_as_3) (asm-error "multiple-value return has not been implemented (yet)_"))) (_emit-mvrtn!_2 _as_1))))) 'emit-mvrtn!))
(let () (begin (set! emit-lexes! (lambda (_as_1 _n-slots_1) (let ((_emit-lexes!_2 0)) (begin (set! _emit-lexes!_2 (lambda (_as_3 _n-slots_3) (begin (emit-alloc-proc! _as_3 _n-slots_3) (sparc_ldi _as_3 $r_reg0 $p_codevector $r_tmp0) (sparc_ldi _as_3 $r_reg0 $p_constvector $r_tmp1) (sparc_sti _as_3 $r_tmp0 $p_codevector $r_result) (sparc_sti _as_3 $r_tmp1 $p_constvector $r_result) (emit-init-proc-slots! _as_3 _n-slots_3)))) (_emit-lexes!_2 _as_1 _n-slots_1))))) 'emit-lexes!))
(let () (begin (set! emit-lambda! (lambda (_as_1 _code-offs0_1 _const-offs0_1 _n-slots_1) (let ((_emit-lambda!_2 0)) (begin (set! _emit-lambda!_2 (lambda (_as_3 _code-offs0_3 _const-offs0_3 _n-slots_3) (let* ((_code-offs_6 (+ 4 (- (* 4 _code-offs0_3) $tag_vector-tag))) (_const-offs_9 (+ 4 (- (* 4 _const-offs0_3) $tag_vector-tag))) (_fits?_12 (asm:fits? _const-offs_9 13))) (let () (begin (emit-alloc-proc! _as_3 _n-slots_3) (if _fits?_12 (begin (sparc_ldi _as_3 $r_reg0 $p_constvector $r_tmp0) (sparc_ldi _as_3 $r_tmp0 _code-offs_6 $r_tmp1)) (emit-const->register! _as_3 _code-offs0_3 $r_tmp1)) (sparc_sti _as_3 $r_tmp1 $p_codevector $r_result) (if _fits?_12 (begin (sparc_ldi _as_3 $r_reg0 $p_constvector $r_tmp0) (sparc_ldi _as_3 $r_tmp0 _const-offs_9 $r_tmp1)) (emit-const->register! _as_3 _const-offs0_3 $r_tmp1)) (sparc_sti _as_3 $r_tmp1 $p_constvector $r_result) (emit-init-proc-slots! _as_3 _n-slots_3)))))) (_emit-lambda!_2 _as_1 _code-offs0_1 _const-offs0_1 _n-slots_1))))) 'emit-lambda!))
(let () (begin (set! emit-alloc-proc! (let ((_two^12_3 (expt 2 12))) (lambda (_as_4 _n_4) (begin (millicode-call/numarg-in-result _as_4 $m_alloc (* (+ _n_4 4) 4)) (let ((_header_7 (+ (* (* (+ _n_4 3) 4) 256) $imm_procedure-header))) (begin (emit-immediate->register! _as_4 _header_7 $r_tmp0) (sparc_sti _as_4 $r_tmp0 0 $r_result) (sparc_addi _as_4 $r_result $tag_procedure-tag $r_result))))))) 'emit-alloc-proc!))
(let () (begin (set! emit-init-proc-slots! (lambda (_as_1 _n_1) (let ((_emit-init-proc-slots!_2 0)) (begin (set! _emit-init-proc-slots!_2 (lambda (_as_3 _n_3) (let ((_save-list_5 (unspecified)) (_save-registers_5 (unspecified))) (begin (set! _save-list_5 (lambda (_lo_6 _hi_6 _offset_6) (begin (emit-load-reg! _as_3 $r_reg31 $r_tmp0) (let () (let ((_loop_8_11_14 (unspecified))) (begin (set! _loop_8_11_14 (lambda (_lo_15 _offset_15) (if (> _lo_15 _hi_6) (if #f #f (unspecified)) (begin (begin #t (sparc_ldi _as_3 $r_tmp0 (- 0 $tag_pair-tag) $r_tmp1) (sparc_sti _as_3 $r_tmp1 _offset_15 $r_result) (if (< _lo_15 _hi_6) (sparc_ldi _as_3 $r_tmp0 (+ (- 0 $tag_pair-tag) 4) $r_tmp0) (unspecified))) (_loop_8_11_14 (+ _lo_15 1) (+ _offset_15 4)))))) (_loop_8_11_14 _lo_6 _offset_6))))))) (set! _save-registers_5 (lambda (_lo_20 _hi_20 _offset_20) (let () (let ((_loop_22_25_28 (unspecified))) (begin (set! _loop_22_25_28 (lambda (_lo_29 _offset_29) (if (> _lo_29 _hi_20) (if #f #f (unspecified)) (begin (begin #t (let ((_r_34 (force-hwreg! _as_3 (regname _lo_29) $r_tmp0))) (sparc_sti _as_3 _r_34 _offset_29 $r_result))) (_loop_22_25_28 (+ _lo_29 1) (+ _offset_29 4)))))) (_loop_22_25_28 _lo_20 _offset_20)))))) (if (< _n_3 *lastreg*) (_save-registers_5 0 _n_3 $p_reg0) (begin (_save-registers_5 0 (- *lastreg* 1) $p_reg0) (_save-list_5 *lastreg* _n_3 (+ $p_reg0 (* *lastreg* 4))))))))) (_emit-init-proc-slots!_2 _as_1 _n_1))))) 'emit-init-proc-slots!))
(let () (begin (set! emit-branch! (lambda (_as_1 _check-timer?_1 _label_1) (let ((_emit-branch!_2 0)) (begin (set! _emit-branch!_2 (lambda (_as_3 _check-timer?_3 _label_3) (if _check-timer?_3 (check-timer _as_3 _label_3 _label_3) (begin (sparc_b _as_3 _label_3) (sparc_slot _as_3))))) (_emit-branch!_2 _as_1 _check-timer?_1 _label_1))))) 'emit-branch!))
(let () (begin (set! emit-branchf! (lambda (_as_1 _label_1) (let ((_emit-branchf!_2 0)) (begin (set! _emit-branchf!_2 (lambda (_as_3 _label_3) (emit-branchfreg! _as_3 $r_result _label_3))) (_emit-branchf!_2 _as_1 _label_1))))) 'emit-branchf!))
(let () (begin (set! emit-branchfreg! (lambda (_as_1 _hwreg_1 _label_1) (let ((_emit-branchfreg!_2 0)) (begin (set! _emit-branchfreg!_2 (lambda (_as_3 _hwreg_3 _label_3) (begin (sparc_cmpi _as_3 _hwreg_3 $imm_false) (sparc_be_a _as_3 _label_3) (sparc_slot _as_3)))) (_emit-branchfreg!_2 _as_1 _hwreg_1 _label_1))))) 'emit-branchfreg!))
(let () (begin (set! emit-branch-with-setrtn! (lambda (_as_1 _label_1) (let ((_emit-branch-with-setrtn!_2 0)) (begin (set! _emit-branch-with-setrtn!_2 (lambda (_as_3 _label_3) (begin (check-timer0 _as_3) (sparc_call _as_3 _label_3) (sparc_sti _as_3 $r_o7 4 $r_stkp)))) (_emit-branch-with-setrtn!_2 _as_1 _label_1))))) 'emit-branch-with-setrtn!))
(let () (begin (set! emit-jump! (lambda (_as_1 _m_1 _label_1) (let ((_emit-jump!_2 0)) (begin (set! _emit-jump!_2 (lambda (_as_3 _m_3 _label_3) (let* ((_r_6 (emit-follow-chain! _as_3 _m_3)) (_labelv_9 (label-value _as_3 _label_3)) (_v_12 (if (number? _labelv_9) (+ _labelv_9 $p_codeoffset) (let* ((_t1_18_21 '+) (_t2_18_24 (let* ((_t1_28_31 _label_3) (_t2_28_34 (cons $p_codeoffset '()))) (let () (cons _t1_28_31 _t2_28_34))))) (let () (cons _t1_18_21 _t2_18_24)))))) (let () (begin (sparc_ldi _as_3 _r_6 $p_codevector $r_tmp0) (if (if (number? _v_12) (immediate-literal? _v_12) #f) (sparc_jmpli _as_3 $r_tmp0 _v_12 $r_g0) (begin (emit-immediate->register! _as_3 _v_12 $r_tmp1) (sparc_jmplr _as_3 $r_tmp0 $r_tmp1 $r_g0))) (sparc_move _as_3 _r_6 $r_reg0)))))) (_emit-jump!_2 _as_1 _m_1 _label_1))))) 'emit-jump!))
(let () (begin (set! emit-singlestep-instr! (lambda (_as_1 _funky?_1 _funkyloc_1 _cvlabel_1) (let ((_emit-singlestep-instr!_2 0)) (begin (set! _emit-singlestep-instr!_2 (lambda (_as_3 _funky?_3 _funkyloc_3 _cvlabel_3) (begin (if _funky?_3 (sparc_ldi _as_3 $r_stkp (+ (thefixnum _funkyloc_3) 12) $r_reg0) (unspecified)) (millicode-call/numarg-in-reg _as_3 $m_singlestep (thefixnum _cvlabel_3) $r_argreg2)))) (_emit-singlestep-instr!_2 _as_1 _funky?_1 _funkyloc_1 _cvlabel_1))))) 'emit-singlestep-instr!))
(let () (begin (set! emit-return-address! (lambda (_as_1 _label_1) (let ((_emit-return-address!_2 0)) (begin (set! _emit-return-address!_2 (lambda (_as_3 _label_3) (let* ((_loc_6 (here _as_3)) (_lloc_9 (label-value _as_3 _label_3))) (let () (let ((_emit-long_14 (unspecified)) (_emit-short_14 (unspecified))) (begin (set! _emit-long_14 (lambda (_val_15) (begin (sparc_sethi _as_3 (_cons 'hi (_cons _val_15 '())) $r_tmp0) (sparc_ori _as_3 $r_tmp0 (_cons 'lo (_cons _val_15 '())) $r_tmp0) (sparc_call _as_3 (+ _loc_6 16)) (sparc_addr _as_3 $r_o7 $r_tmp0 $r_o7)))) (set! _emit-short_14 (lambda (_val_62) (begin (sparc_call _as_3 (+ _loc_6 8)) (sparc_addi _as_3 $r_o7 _val_62 $r_o7)))) (if _lloc_9 (let ((_target-rel-addr_65 (- (- _lloc_9 _loc_6) 8))) (if (immediate-literal? _target-rel-addr_65) (_emit-short_14 _target-rel-addr_65) (_emit-long_14 (- _target-rel-addr_65 8)))) (if (short-effective-addresses) (_emit-short_14 (_cons '- (_cons _label_3 (_cons _loc_6 '(8))))) (_emit-long_14 (_cons '- (_cons _label_3 (_cons _loc_6 '(16))))))))))))) (_emit-return-address!_2 _as_1 _label_1))))) 'emit-return-address!))
(let () (begin (set! operand5 (lambda (_instruction_1) (let ((_operand5_2 0)) (begin (set! _operand5_2 (lambda (_instruction_3) (let ((_x_4_7 (let ((_x_9_12 (let ((_x_13_16 (let ((_x_17_20 (let ((_x_21_24 (let ((_x_25_28 _instruction_3)) (begin (_check! (pair? _x_25_28) 1 _x_25_28) (cdr:pair _x_25_28))))) (begin (_check! (pair? _x_21_24) 1 _x_21_24) (cdr:pair _x_21_24))))) (begin (_check! (pair? _x_17_20) 1 _x_17_20) (cdr:pair _x_17_20))))) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_4_7) 0 _x_4_7) (car:pair _x_4_7))))) (_operand5_2 _instruction_1))))) 'operand5))
(let () (begin (set! operand6 (lambda (_instruction_1) (let ((_operand6_2 0)) (begin (set! _operand6_2 (lambda (_instruction_3) (let ((_x_5_8 (let ((_x_9_12 (let ((_x_14_17 (let ((_x_18_21 (let ((_x_22_25 (let ((_x_26_29 (let ((_x_30_33 _instruction_3)) (begin (_check! (pair? _x_30_33) 1 _x_30_33) (cdr:pair _x_30_33))))) (begin (_check! (pair? _x_26_29) 1 _x_26_29) (cdr:pair _x_26_29))))) (begin (_check! (pair? _x_22_25) 1 _x_22_25) (cdr:pair _x_22_25))))) (begin (_check! (pair? _x_18_21) 1 _x_18_21) (cdr:pair _x_18_21))))) (begin (_check! (pair? _x_14_17) 1 _x_14_17) (cdr:pair _x_14_17))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))))) (_operand6_2 _instruction_1))))) 'operand6))
(let () (begin (set! operand7 (lambda (_instruction_1) (let ((_operand7_2 0)) (begin (set! _operand7_2 (lambda (_instruction_3) (let ((_x_5_8 (let ((_x_9_12 (let ((_x_13_16 (let ((_x_18_21 (let ((_x_22_25 (let ((_x_26_29 (let ((_x_30_33 (let ((_x_34_37 _instruction_3)) (begin (_check! (pair? _x_34_37) 1 _x_34_37) (cdr:pair _x_34_37))))) (begin (_check! (pair? _x_30_33) 1 _x_30_33) (cdr:pair _x_30_33))))) (begin (_check! (pair? _x_26_29) 1 _x_26_29) (cdr:pair _x_26_29))))) (begin (_check! (pair? _x_22_25) 1 _x_22_25) (cdr:pair _x_22_25))))) (begin (_check! (pair? _x_18_21) 1 _x_18_21) (cdr:pair _x_18_21))))) (begin (_check! (pair? _x_13_16) 1 _x_13_16) (cdr:pair _x_13_16))))) (begin (_check! (pair? _x_9_12) 1 _x_9_12) (cdr:pair _x_9_12))))) (begin (_check! (pair? _x_5_8) 0 _x_5_8) (car:pair _x_5_8))))) (_operand7_2 _instruction_1))))) 'operand7))
(let () (begin (set! emit-primop_1arg! (lambda (_as_1 _op_1) (let ((_emit-primop_1arg!_2 0)) (begin (set! _emit-primop_1arg!_2 (lambda (_as_3 _op_3) ((find-primop _op_3) _as_3))) (_emit-primop_1arg!_2 _as_1 _op_1))))) 'emit-primop_1arg!))
(let () (begin (set! emit-primop_2arg! (lambda (_as_1 _op_1 _r_1) (let ((_emit-primop_2arg!_2 0)) (begin (set! _emit-primop_2arg!_2 (lambda (_as_3 _op_3 _r_3) ((find-primop _op_3) _as_3 _r_3))) (_emit-primop_2arg!_2 _as_1 _op_1 _r_1))))) 'emit-primop_2arg!))
(let () (begin (set! emit-primop_3arg! (lambda (_as_1 _a1_1 _a2_1 _a3_1) (let ((_emit-primop_3arg!_2 0)) (begin (set! _emit-primop_3arg!_2 (lambda (_as_3 _a1_3 _a2_3 _a3_3) ((find-primop _a1_3) _as_3 _a2_3 _a3_3))) (_emit-primop_3arg!_2 _as_1 _a1_1 _a2_1 _a3_1))))) 'emit-primop_3arg!))
(let () (begin (set! emit-primop_4arg! (lambda (_as_1 _a1_1 _a2_1 _a3_1 _a4_1) (let ((_emit-primop_4arg!_2 0)) (begin (set! _emit-primop_4arg!_2 (lambda (_as_3 _a1_3 _a2_3 _a3_3 _a4_3) ((find-primop _a1_3) _as_3 _a2_3 _a3_3 _a4_3))) (_emit-primop_4arg!_2 _as_1 _a1_1 _a2_1 _a3_1 _a4_1))))) 'emit-primop_4arg!))
(let () (begin (set! emit-primop_5arg! (lambda (_as_1 _a1_1 _a2_1 _a3_1 _a4_1 _a5_1) (let ((_emit-primop_5arg!_2 0)) (begin (set! _emit-primop_5arg!_2 (lambda (_as_3 _a1_3 _a2_3 _a3_3 _a4_3 _a5_3) ((find-primop _a1_3) _as_3 _a2_3 _a3_3 _a4_3 _a5_3))) (_emit-primop_5arg!_2 _as_1 _a1_1 _a2_1 _a3_1 _a4_1 _a5_1))))) 'emit-primop_5arg!))
(let () (begin (set! emit-primop_6arg! (lambda (_as_1 _a1_1 _a2_1 _a3_1 _a4_1 _a5_1 _a6_1) (let ((_emit-primop_6arg!_2 0)) (begin (set! _emit-primop_6arg!_2 (lambda (_as_3 _a1_3 _a2_3 _a3_3 _a4_3 _a5_3 _a6_3) ((find-primop _a1_3) _as_3 _a2_3 _a3_3 _a4_3 _a5_3 _a6_3))) (_emit-primop_6arg!_2 _as_1 _a1_1 _a2_1 _a3_1 _a4_1 _a5_1 _a6_1))))) 'emit-primop_6arg!))
(let () (begin (set! emit-primop_7arg! (lambda (_as_1 _a1_1 _a2_1 _a3_1 _a4_1 _a5_1 _a6_1 _a7_1) (let ((_emit-primop_7arg!_2 0)) (begin (set! _emit-primop_7arg!_2 (lambda (_as_3 _a1_3 _a2_3 _a3_3 _a4_3 _a5_3 _a6_3 _a7_3) ((find-primop _a1_3) _as_3 _a2_3 _a3_3 _a4_3 _a5_3 _a6_3 _a7_3))) (_emit-primop_7arg!_2 _as_1 _a1_1 _a2_1 _a3_1 _a4_1 _a5_1 _a6_1 _a7_1))))) 'emit-primop_7arg!))
(let () (begin (set! primop-vector (make-vector 256 '())) 'primop-vector))
(let () (begin (set! define-primop (lambda (_name_1 _proc_1) (let ((_define-primop_2 0)) (begin (set! _define-primop_2 (lambda (_name_3 _proc_3) (let ((_h_6 (logand (symbol-hash _name_3) 255))) (begin (let ((_v_7_10 primop-vector) (_i_7_10 _h_6) (_x_7_10 (cons (cons _name_3 _proc_3) (let ((_v_11_14 primop-vector) (_i_11_14 _h_6)) (begin (_check! (fixnum? _i_11_14) 40 _v_11_14 _i_11_14) (_check! (vector? _v_11_14) 40 _v_11_14 _i_11_14) (_check! (<:fix:fix _i_11_14 (vector-length:vec _v_11_14)) 40 _v_11_14 _i_11_14) (_check! (>=:fix:fix _i_11_14 0) 40 _v_11_14 _i_11_14) (vector-ref:trusted _v_11_14 _i_11_14)))))) (begin (_check! (fixnum? _i_7_10) 41 _v_7_10 _i_7_10 _x_7_10) (_check! (vector? _v_7_10) 41 _v_7_10 _i_7_10 _x_7_10) (_check! (<:fix:fix _i_7_10 (vector-length:vec _v_7_10)) 41 _v_7_10 _i_7_10 _x_7_10) (_check! (>=:fix:fix _i_7_10 0) 41 _v_7_10 _i_7_10 _x_7_10) (vector-set!:trusted _v_7_10 _i_7_10 _x_7_10))) _name_3)))) (_define-primop_2 _name_1 _proc_1))))) 'define-primop))
(let () (begin (set! find-primop (lambda (_name_1) (let ((_find-primop_2 0)) (begin (set! _find-primop_2 (lambda (_name_3) (let* ((_h_6 (logand (symbol-hash _name_3) 255)) (_x_7_10 (assq _name_3 (let ((_v_11_14 primop-vector) (_i_11_14 _h_6)) (begin (_check! (fixnum? _i_11_14) 40 _v_11_14 _i_11_14) (_check! (vector? _v_11_14) 40 _v_11_14 _i_11_14) (_check! (<:fix:fix _i_11_14 (vector-length:vec _v_11_14)) 40 _v_11_14 _i_11_14) (_check! (>=:fix:fix _i_11_14 0) 40 _v_11_14 _i_11_14) (vector-ref:trusted _v_11_14 _i_11_14)))))) (begin (_check! (pair? _x_7_10) 1 _x_7_10) (cdr:pair _x_7_10))))) (_find-primop_2 _name_1))))) 'find-primop))
(let () (begin (set! for-each-primop (lambda (_proc_1) (let ((_for-each-primop_2 0)) (begin (set! _for-each-primop_2 (lambda (_proc_3) (let () (let ((_loop_5_7_10 (unspecified))) (begin (set! _loop_5_7_10 (lambda (_i_11) (if (= _i_11 (let ((_v_13_16 primop-vector)) (begin (_check! (vector? _v_13_16) 42 _v_13_16) (vector-length:vec _v_13_16)))) (if #f #f (unspecified)) (begin (begin #t (let () (let ((_loop_23_25_28 (unspecified))) (begin (set! _loop_23_25_28 (lambda (_y1_18_19_29) (if (null? _y1_18_19_29) (if #f #f (unspecified)) (begin (begin #t (let ((_p_33 (let ((_x_38_41 _y1_18_19_29)) (begin (_check! (pair? _x_38_41) 0 _x_38_41) (car:pair _x_38_41))))) (_proc_3 (let ((_x_34_37 _p_33)) (begin (_check! (pair? _x_34_37) 1 _x_34_37) (cdr:pair _x_34_37)))))) (_loop_23_25_28 (let ((_x_42_45 _y1_18_19_29)) (begin (_check! (pair? _x_42_45) 1 _x_42_45) (cdr:pair _x_42_45)))))))) (_loop_23_25_28 (let ((_v_46_49 primop-vector) (_i_46_49 _i_11)) (begin (_check! (fixnum? _i_46_49) 40 _v_46_49 _i_46_49) (_check! (vector? _v_46_49) 40 _v_46_49 _i_46_49) (_check! (<:fix:fix _i_46_49 (vector-length:vec _v_46_49)) 40 _v_46_49 _i_46_49) (_check! (>=:fix:fix _i_46_49 0) 40 _v_46_49 _i_46_49) (vector-ref:trusted _v_46_49 _i_46_49)))))))) (_loop_5_7_10 (+ _i_11 1)))))) (_loop_5_7_10 0)))))) (_for-each-primop_2 _proc_1))))) 'for-each-primop))
(let () (define-primop 'unspecified (lambda (_as_1) (emit-immediate->register! _as_1 $imm_unspecified $r_result))))
(let () (define-primop 'undefined (lambda (_as_1) (emit-immediate->register! _as_1 $imm_undefined $r_result))))
(let () (define-primop 'eof-object (lambda (_as_1) (emit-immediate->register! _as_1 $imm_eof $r_result))))
(let () (define-primop 'enable-interrupts (lambda (_as_1) (millicode-call/0arg _as_1 $m_enable-interrupts))))
(let () (define-primop 'disable-interrupts (lambda (_as_1) (millicode-call/0arg _as_1 $m_disable-interrupts))))
(let () (define-primop 'gc-counter (lambda (_as_1) (sparc_ldi _as_1 $r_globals $g_gccnt $r_result))))
(let () (define-primop 'zero? (lambda (_as_1) (emit-cmp-primop! _as_1 sparc_be_a $m_zerop $r_g0))))
(let () (define-primop '= (lambda (_as_1 _r_1) (emit-cmp-primop! _as_1 sparc_be_a $m_numeq _r_1))))
(let () (define-primop '< (lambda (_as_1 _r_1) (emit-cmp-primop! _as_1 sparc_bl_a $m_numlt _r_1))))
(let () (define-primop '<= (lambda (_as_1 _r_1) (emit-cmp-primop! _as_1 sparc_ble_a $m_numle _r_1))))
(let () (define-primop '> (lambda (_as_1 _r_1) (emit-cmp-primop! _as_1 sparc_bg_a $m_numgt _r_1))))
(let () (define-primop '>= (lambda (_as_1 _r_1) (emit-cmp-primop! _as_1 sparc_bge_a $m_numge _r_1))))
(let () (define-primop 'complex? (lambda (_as_1) (millicode-call/0arg _as_1 $m_complexp))))
(let () (define-primop 'real? (lambda (_as_1) (millicode-call/0arg _as_1 $m_realp))))
(let () (define-primop 'rational? (lambda (_as_1) (millicode-call/0arg _as_1 $m_rationalp))))
(let () (define-primop 'integer? (lambda (_as_1) (millicode-call/0arg _as_1 $m_integerp))))
(let () (define-primop 'exact? (lambda (_as_1) (millicode-call/0arg _as_1 $m_exactp))))
(let () (define-primop 'inexact? (lambda (_as_1) (millicode-call/0arg _as_1 $m_inexactp))))
(let () (define-primop 'fixnum? (lambda (_as_1) (begin (sparc_btsti _as_1 $r_result 3) (emit-set-boolean! _as_1)))))
(let () (define-primop '+ (lambda (_as_1 _r_1) (emit-primop_4arg! _as_1 'internal:+ $r_result _r_1 $r_result))))
(let () (define-primop '- (lambda (_as_1 _r_1) (emit-primop_4arg! _as_1 'internal:- $r_result _r_1 $r_result))))
(let () (define-primop '* (lambda (_as_1 _rs2_1) (emit-multiply-code _as_1 _rs2_1 #f))))
(let () (begin (set! emit-multiply-code (lambda (_as_1 _rs2_1 _fixnum-arithmetic?_1) (let ((_emit-multiply-code_2 0)) (begin (set! _emit-multiply-code_2 (lambda (_as_3 _rs2_3 _fixnum-arithmetic?_3) (if (if (unsafe-code) _fixnum-arithmetic?_3 #f) (begin (sparc_srai _as_3 $r_result 2 $r_tmp0) (sparc_smulr _as_3 $r_tmp0 _rs2_3 $r_result)) (let ((_rs2_8 (force-hwreg! _as_3 _rs2_3 $r_argreg2)) (_lstart_8 (new-label)) (_ltagok_8 (new-label)) (_loflo_8 (new-label)) (_ldone_8 (new-label))) (begin (sparc_label _as_3 _lstart_8) (sparc_orr _as_3 $r_result _rs2_8 $r_tmp0) (sparc_btsti _as_3 $r_tmp0 3) (sparc_be_a _as_3 _ltagok_8) (sparc_srai _as_3 $r_result 2 $r_tmp0) (sparc_label _as_3 _loflo_8) (if (not (= _rs2_8 $r_argreg2)) (sparc_move _as_3 _rs2_8 $r_argreg2) (unspecified)) (if (not _fixnum-arithmetic?_3) (millicode-call/ret _as_3 $m_multiply _ldone_8) (begin (sparc_set _as_3 (thefixnum $ex_fx*) $r_tmp0) (millicode-call/ret _as_3 $m_exception _lstart_8))) (sparc_label _as_3 _ltagok_8) (sparc_smulr _as_3 $r_tmp0 _rs2_8 $r_tmp0) (sparc_rdy _as_3 $r_tmp1) (sparc_srai _as_3 $r_tmp0 31 $r_tmp2) (sparc_cmpr _as_3 $r_tmp1 $r_tmp2) (sparc_bne_a _as_3 _loflo_8) (sparc_slot _as_3) (sparc_move _as_3 $r_tmp0 $r_result) (sparc_label _as_3 _ldone_8)))))) (_emit-multiply-code_2 _as_1 _rs2_1 _fixnum-arithmetic?_1))))) 'emit-multiply-code))
(let () (define-primop '/ (lambda (_as_1 _r_1) (millicode-call/1arg _as_1 $m_divide _r_1))))
(let () (define-primop 'quotient (lambda (_as_1 _r_1) (millicode-call/1arg _as_1 $m_quotient _r_1))))
(let () (define-primop 'remainder (lambda (_as_1 _r_1) (millicode-call/1arg _as_1 $m_remainder _r_1))))
(let () (define-primop '_-- (lambda (_as_1) (emit-negate _as_1 $r_result $r_result))))
(let () (define-primop 'round (lambda (_as_1) (millicode-call/0arg _as_1 $m_round))))
(let () (define-primop 'truncate (lambda (_as_1) (millicode-call/0arg _as_1 $m_truncate))))
(let () (define-primop 'lognot (lambda (_as_1) (begin (if (not (unsafe-code)) (emit-assert-fixnum! _as_1 $r_result $ex_lognot) (unspecified)) (sparc_ornr _as_1 $r_g0 $r_result $r_result) (sparc_xori _as_1 $r_result 3 $r_result)))))
(let () (define-primop 'logand (lambda (_as_1 _x_1) (logical-op _as_1 $r_result _x_1 $r_result sparc_andr $ex_logand))))
(let () (define-primop 'logior (lambda (_as_1 _x_1) (logical-op _as_1 $r_result _x_1 $r_result sparc_orr $ex_logior))))
(let () (define-primop 'logxor (lambda (_as_1 _x_1) (logical-op _as_1 $r_result _x_1 $r_result sparc_xorr $ex_logxor))))
(let () (define-primop 'lsh (lambda (_as_1 _x_1) (emit-shift-operation _as_1 $ex_lsh $r_result _x_1 $r_result))))
(let () (define-primop 'rshl (lambda (_as_1 _x_1) (emit-shift-operation _as_1 $ex_rshl $r_result _x_1 $r_result))))
(let () (define-primop 'rsha (lambda (_as_1 _x_1) (emit-shift-operation _as_1 $ex_rsha $r_result _x_1 $r_result))))
(let () (define-primop 'rot (lambda (_as_1 _x_1) (asm-error "Sparcasm: ROT primop is not implemented_"))))
(let () (define-primop 'null? (lambda (_as_1) (begin (sparc_cmpi _as_1 $r_result $imm_null) (emit-set-boolean! _as_1)))))
(let () (define-primop 'pair? (lambda (_as_1) (emit-single-tagcheck->bool! _as_1 $tag_pair-tag))))
(let () (define-primop 'eof-object? (lambda (_as_1) (begin (sparc_cmpi _as_1 $r_result $imm_eof) (emit-set-boolean! _as_1)))))
(let () (define-primop 'flonum? (lambda (_as_1) (emit-double-tagcheck->bool! _as_1 $tag_bytevector-tag (+ $imm_bytevector-header $tag_flonum-typetag)))))
(let () (define-primop 'compnum? (lambda (_as_1) (emit-double-tagcheck->bool! _as_1 $tag_bytevector-tag (+ $imm_bytevector-header $tag_compnum-typetag)))))
(let () (define-primop 'symbol? (lambda (_as_1) (emit-double-tagcheck->bool! _as_1 $tag_vector-tag (+ $imm_vector-header $tag_symbol-typetag)))))
(let () (define-primop 'port? (lambda (_as_1) (emit-double-tagcheck->bool! _as_1 $tag_vector-tag (+ $imm_vector-header $tag_port-typetag)))))
(let () (define-primop 'structure? (lambda (_as_1) (emit-double-tagcheck->bool! _as_1 $tag_vector-tag (+ $imm_vector-header $tag_structure-typetag)))))
(let () (define-primop 'char? (lambda (_as_1) (begin (sparc_andi _as_1 $r_result 255 $r_tmp0) (sparc_cmpi _as_1 $r_tmp0 $imm_character) (emit-set-boolean! _as_1)))))
(let () (define-primop 'string? (lambda (_as_1) (emit-double-tagcheck->bool! _as_1 $tag_bytevector-tag (+ $imm_bytevector-header $tag_string-typetag)))))
(let () (define-primop 'bytevector? (lambda (_as_1) (emit-double-tagcheck->bool! _as_1 $tag_bytevector-tag (+ $imm_bytevector-header $tag_bytevector-typetag)))))
(let () (define-primop 'bytevector-like? (lambda (_as_1) (emit-single-tagcheck->bool! _as_1 $tag_bytevector-tag))))
(let () (define-primop 'vector? (lambda (_as_1) (emit-double-tagcheck->bool! _as_1 $tag_vector-tag (+ $imm_vector-header $tag_vector-typetag)))))
(let () (define-primop 'vector-like? (lambda (_as_1) (emit-single-tagcheck->bool! _as_1 $tag_vector-tag))))
(let () (define-primop 'procedure? (lambda (_as_1) (emit-single-tagcheck->bool! _as_1 $tag_procedure-tag))))
(let () (define-primop 'cons (lambda (_as_1 _r_1) (emit-primop_4arg! _as_1 'internal:cons $r_result _r_1 $r_result))))
(let () (define-primop 'car (lambda (_as_1) (emit-primop_3arg! _as_1 'internal:car $r_result $r_result))))
(let () (define-primop 'cdr (lambda (_as_1) (emit-primop_3arg! _as_1 'internal:cdr $r_result $r_result))))
(let () (define-primop 'car:pair (lambda (_as_1) (sparc_ldi _as_1 $r_result (- 0 $tag_pair-tag) $r_result))))
(let () (define-primop 'cdr:pair (lambda (_as_1) (sparc_ldi _as_1 $r_result (- 4 $tag_pair-tag) $r_result))))
(let () (define-primop 'set-car! (lambda (_as_1 _x_1) (begin (if (not (unsafe-code)) (emit-single-tagcheck-assert! _as_1 $tag_pair-tag $ex_car #f) (unspecified)) (emit-setcar/setcdr! _as_1 $r_result _x_1 0)))))
(let () (define-primop 'set-cdr! (lambda (_as_1 _x_1) (begin (if (not (unsafe-code)) (emit-single-tagcheck-assert! _as_1 $tag_pair-tag $ex_cdr #f) (unspecified)) (emit-setcar/setcdr! _as_1 $r_result _x_1 4)))))
(let () (define-primop 'make-cell (lambda (_as_1) (emit-primop_4arg! _as_1 'internal:cons $r_result $r_g0 $r_result))))
(let () (define-primop 'cell-ref (lambda (_as_1) (emit-primop_3arg! _as_1 'internal:cell-ref $r_result $r_result))))
(let () (define-primop 'cell-set! (lambda (_as_1 _r_1) (emit-setcar/setcdr! _as_1 $r_result _r_1 0))))
(let () (define-primop 'syscall (lambda (_as_1) (millicode-call/0arg _as_1 $m_syscall))))
(let () (define-primop 'break (lambda (_as_1) (millicode-call/0arg _as_1 $m_break))))
(let () (define-primop 'creg (lambda (_as_1) (millicode-call/0arg _as_1 $m_creg))))
(let () (define-primop 'creg-set! (lambda (_as_1) (millicode-call/0arg _as_1 $m_creg-set!))))
(let () (define-primop 'typetag (lambda (_as_1) (millicode-call/0arg _as_1 $m_typetag))))
(let () (define-primop 'typetag-set! (lambda (_as_1 _r_1) (millicode-call/1arg _as_1 $m_typetag-set _r_1))))
(let () (define-primop 'exact->inexact (lambda (_as_1) (millicode-call/0arg _as_1 $m_exact->inexact))))
(let () (define-primop 'inexact->exact (lambda (_as_1) (millicode-call/0arg _as_1 $m_inexact->exact))))
(let () (define-primop 'real-part (lambda (_as_1) (millicode-call/0arg _as_1 $m_real-part))))
(let () (define-primop 'imag-part (lambda (_as_1) (millicode-call/0arg _as_1 $m_imag-part))))
(let () (define-primop 'char->integer (lambda (_as_1) (begin (if (not (unsafe-code)) (emit-assert-char! _as_1 $ex_char2int #f) (unspecified)) (sparc_srli _as_1 $r_result 14 $r_result)))))
(let () (define-primop 'integer->char (lambda (_as_1) (begin (if (not (unsafe-code)) (emit-assert-fixnum! _as_1 $r_result $ex_int2char) (unspecified)) (sparc_andi _as_1 $r_result 1023 $r_result) (sparc_slli _as_1 $r_result 14 $r_result) (sparc_ori _as_1 $r_result $imm_character $r_result)))))
(let () (define-primop 'not (lambda (_as_1) (begin (sparc_cmpi _as_1 $r_result $imm_false) (emit-set-boolean! _as_1)))))
(let () (define-primop 'eq? (lambda (_as_1 _x_1) (emit-primop_4arg! _as_1 'internal:eq? $r_result _x_1 $r_result))))
(let () (define-primop 'eqv? (lambda (_as_1 _x_1) (let ((_tmp_4 (force-hwreg! _as_1 _x_1 $r_tmp0)) (_l1_4 (new-label))) (begin (sparc_cmpr _as_1 $r_result _tmp_4) (sparc_be_a _as_1 _l1_4) (sparc_set _as_1 $imm_true $r_result) (millicode-call/1arg _as_1 $m_eqv _tmp_4) (sparc_label _as_1 _l1_4))))))
(let () (define-primop 'make-bytevector (lambda (_as_1) (begin (if (not (unsafe-code)) (emit-assert-positive-fixnum! _as_1 $r_result $ex_mkbvl) (unspecified)) (emit-allocate-bytevector _as_1 (+ $imm_bytevector-header $tag_bytevector-typetag) #f) (sparc_addi _as_1 $r_result $tag_bytevector-tag $r_result)))))
(let () (define-primop 'bytevector-fill! (lambda (_as_1 _rs2_1) (let* ((_fault_4 (emit-double-tagcheck-assert! _as_1 $tag_bytevector-tag (+ $imm_bytevector-header $tag_bytevector-typetag) $ex_bvfill _rs2_1)) (_rs2_7 (force-hwreg! _as_1 _rs2_1 $r_argreg2))) (let () (begin (sparc_btsti _as_1 _rs2_7 3) (sparc_bne _as_1 _fault_4) (sparc_srai _as_1 _rs2_7 2 $r_tmp2) (sparc_ldi _as_1 $r_result (- 0 $tag_bytevector-tag) $r_tmp0) (sparc_addi _as_1 $r_result (- 4 $tag_bytevector-tag) $r_tmp1) (sparc_srai _as_1 $r_tmp0 8 $r_tmp0) (emit-bytevector-fill _as_1 $r_tmp0 $r_tmp1 $r_tmp2)))))))
(let () (define-primop 'bytevector-length (lambda (_as_1) (emit-get-length! _as_1 $tag_bytevector-tag (+ $imm_bytevector-header $tag_bytevector-typetag) $ex_bvlen $r_result $r_result))))
(let () (define-primop 'bytevector-like-length (lambda (_as_1) (emit-get-length! _as_1 $tag_bytevector-tag #f $ex_bvllen $r_result $r_result))))
(let () (define-primop 'bytevector-ref (lambda (_as_1 _r_1) (let ((_fault_4 (if (not (unsafe-code)) (emit-double-tagcheck-assert! _as_1 $tag_bytevector-tag (+ $imm_bytevector-header $tag_bytevector-typetag) $ex_bvref _r_1) #f))) (emit-bytevector-like-ref! _as_1 $r_result _r_1 $r_result _fault_4 #f #t)))))
(let () (define-primop 'bytevector-like-ref (lambda (_as_1 _r_1) (let ((_fault_4 (if (not (unsafe-code)) (emit-single-tagcheck-assert! _as_1 $tag_bytevector-tag $ex_bvlref _r_1) #f))) (emit-bytevector-like-ref! _as_1 $r_result _r_1 $r_result _fault_4 #f #f)))))
(let () (define-primop 'bytevector-set! (lambda (_as_1 _r1_1 _r2_1) (let ((_fault_4 (if (not (unsafe-code)) (emit-double-tagcheck-assert! _as_1 $tag_bytevector-tag (+ $imm_bytevector-header $tag_bytevector-typetag) $ex_bvset _r1_1) #f))) (emit-bytevector-like-set! _as_1 _r1_1 _r2_1 _fault_4 #t)))))
(let () (define-primop 'bytevector-like-set! (lambda (_as_1 _r1_1 _r2_1) (let ((_fault_4 (if (not (unsafe-code)) (emit-single-tagcheck-assert! _as_1 $tag_bytevector-tag $ex_bvlset _r1_1) #f))) (emit-bytevector-like-set! _as_1 _r1_1 _r2_1 _fault_4 #f)))))
(let () (define-primop 'sys$bvlcmp (lambda (_as_1 _x_1) (millicode-call/1arg _as_1 $m_bvlcmp _x_1))))
(let () (define-primop 'make-string (lambda (_as_1 _rs2_1) (let ((_fault_4 (new-label)) (_start_4 (new-label))) (begin (sparc_label _as_1 _start_4) (let ((_rs2_7 (force-hwreg! _as_1 _rs2_1 $r_argreg2))) (begin (if (not (unsafe-code)) (let ((_l1_10 (new-label)) (_l2_10 (new-label))) (begin (sparc_tsubrcc _as_1 $r_result $r_g0 $r_g0) (sparc_bvc_a _as_1 _l1_10) (sparc_andi _as_1 _rs2_7 255 $r_tmp0) (sparc_label _as_1 _fault_4) (if (not (= _rs2_7 $r_argreg2)) (sparc_move _as_1 _rs2_7 $r_argreg2) (unspecified)) (sparc_set _as_1 (thefixnum $ex_mkbvl) $r_tmp0) (millicode-call/ret _as_1 $m_exception _start_4) (sparc_label _as_1 _l1_10) (sparc_bl _as_1 _fault_4) (sparc_cmpi _as_1 $r_tmp0 $imm_character) (sparc_bne _as_1 _fault_4) (sparc_move _as_1 $r_result $r_argreg3))) (sparc_move _as_1 $r_result $r_argreg3)) (emit-allocate-bytevector _as_1 (+ $imm_bytevector-header $tag_string-typetag) $r_argreg3) (sparc_srai _as_1 _rs2_7 16 $r_tmp1) (sparc_addi _as_1 $r_result 4 $r_result) (sparc_srai _as_1 $r_argreg3 2 $r_tmp0) (emit-bytevector-fill _as_1 $r_tmp0 $r_result $r_tmp1) (sparc_addi _as_1 $r_result (- $tag_bytevector-tag 4) $r_result))))))))
(let () (define-primop 'string-length (lambda (_as_1) (emit-primop_3arg! _as_1 'internal:string-length $r_result $r_result))))
(let () (define-primop 'string-ref (lambda (_as_1 _r_1) (emit-primop_4arg! _as_1 'internal:string-ref $r_result _r_1 $r_result))))
(let () (define-primop 'string-set! (lambda (_as_1 _r1_1 _r2_1) (emit-string-set! _as_1 $r_result _r1_1 _r2_1))))
(let () (define-primop 'sys$partial-list->vector (lambda (_as_1 _r_1) (millicode-call/1arg _as_1 $m_partial-list->vector _r_1))))
(let () (define-primop 'make-procedure (lambda (_as_1) (emit-make-vector-like! _as_1 '() $imm_procedure-header $tag_procedure-tag))))
(let () (define-primop 'make-vector (lambda (_as_1 _r_1) (emit-make-vector-like! _as_1 _r_1 (+ $imm_vector-header $tag_vector-typetag) $tag_vector-tag))))
(let () (define-primop 'make-vector:0 (lambda (_as_1 _r_1) (make-vector-n _as_1 0 _r_1))))
(let () (define-primop 'make-vector:1 (lambda (_as_1 _r_1) (make-vector-n _as_1 1 _r_1))))
(let () (define-primop 'make-vector:2 (lambda (_as_1 _r_1) (make-vector-n _as_1 2 _r_1))))
(let () (define-primop 'make-vector:3 (lambda (_as_1 _r_1) (make-vector-n _as_1 3 _r_1))))
(let () (define-primop 'make-vector:4 (lambda (_as_1 _r_1) (make-vector-n _as_1 4 _r_1))))
(let () (define-primop 'make-vector:5 (lambda (_as_1 _r_1) (make-vector-n _as_1 5 _r_1))))
(let () (define-primop 'make-vector:6 (lambda (_as_1 _r_1) (make-vector-n _as_1 6 _r_1))))
(let () (define-primop 'make-vector:7 (lambda (_as_1 _r_1) (make-vector-n _as_1 7 _r_1))))
(let () (define-primop 'make-vector:8 (lambda (_as_1 _r_1) (make-vector-n _as_1 8 _r_1))))
(let () (define-primop 'make-vector:9 (lambda (_as_1 _r_1) (make-vector-n _as_1 9 _r_1))))
(let () (define-primop 'vector-length (lambda (_as_1) (emit-primop_3arg! _as_1 'internal:vector-length $r_result $r_result))))
(let () (define-primop 'vector-like-length (lambda (_as_1) (emit-get-length! _as_1 $tag_vector-tag #f $ex_vllen $r_result $r_result))))
(let () (define-primop 'vector-length:vec (lambda (_as_1) (emit-get-length-trusted! _as_1 $tag_vector-tag $r_result $r_result))))
(let () (define-primop 'procedure-length (lambda (_as_1) (emit-get-length! _as_1 $tag_procedure-tag #f $ex_plen $r_result $r_result))))
(let () (define-primop 'vector-ref (lambda (_as_1 _r_1) (emit-primop_4arg! _as_1 'internal:vector-ref $r_result _r_1 $r_result))))
(let () (define-primop 'vector-like-ref (lambda (_as_1 _r_1) (let ((_fault_4 (if (not (unsafe-code)) (emit-single-tagcheck-assert! _as_1 $tag_vector-tag $ex_vlref _r_1) #f))) (emit-vector-like-ref! _as_1 $r_result _r_1 $r_result _fault_4 $tag_vector-tag #f)))))
(let () (define-primop 'vector-ref:trusted (lambda (_as_1 _rs2_1) (emit-vector-like-ref-trusted! _as_1 $r_result _rs2_1 $r_result $tag_vector-tag))))
(let () (define-primop 'procedure-ref (lambda (_as_1 _r_1) (let ((_fault_4 (if (not (unsafe-code)) (emit-single-tagcheck-assert! _as_1 $tag_procedure-tag $ex_pref _r_1) #f))) (emit-vector-like-ref! _as_1 $r_result _r_1 $r_result _fault_4 $tag_procedure-tag #f)))))
(let () (define-primop 'vector-set! (lambda (_as_1 _r1_1 _r2_1) (emit-primop_4arg! _as_1 'internal:vector-set! $r_result _r1_1 _r2_1))))
(let () (define-primop 'vector-like-set! (lambda (_as_1 _r1_1 _r2_1) (let ((_fault_4 (if (not (unsafe-code)) (emit-single-tagcheck-assert! _as_1 $tag_vector-tag $ex_vlset _r1_1) #f))) (emit-vector-like-set! _as_1 $r_result _r1_1 _r2_1 _fault_4 $tag_vector-tag #f)))))
(let () (define-primop 'vector-set!:trusted (lambda (_as_1 _rs2_1 _rs3_1) (emit-vector-like-set-trusted! _as_1 $r_result _rs2_1 _rs3_1 $tag_vector-tag))))
(let () (define-primop 'procedure-set! (lambda (_as_1 _r1_1 _r2_1) (let ((_fault_4 (if (not (unsafe-code)) (emit-single-tagcheck-assert! _as_1 $tag_procedure-tag $ex_pset _r1_1) #f))) (emit-vector-like-set! _as_1 $r_result _r1_1 _r2_1 _fault_4 $tag_procedure-tag #f)))))
(let () (define-primop 'char<? (lambda (_as_1 _x_1) (emit-char-cmp _as_1 _x_1 sparc_bl_a $ex_char<?))))
(let () (define-primop 'char<=? (lambda (_as_1 _x_1) (emit-char-cmp _as_1 _x_1 sparc_ble_a $ex_char<=?))))
(let () (define-primop 'char=? (lambda (_as_1 _x_1) (emit-char-cmp _as_1 _x_1 sparc_be_a $ex_char=?))))
(let () (define-primop 'char>? (lambda (_as_1 _x_1) (emit-char-cmp _as_1 _x_1 sparc_bg_a $ex_char>?))))
(let () (define-primop 'char>=? (lambda (_as_1 _x_1) (emit-char-cmp _as_1 _x_1 sparc_bge_a $ex_char>=?))))
(let () (define-primop 'sys$read-char (lambda (_as_1) (let ((_lfinish_4 (new-label)) (_lend_4 (new-label))) (begin (if (not (unsafe-code)) (begin (sparc_andi _as_1 $r_result $tag_tagmask $r_tmp0) (sparc_cmpi _as_1 $r_tmp0 $tag_vector-tag) (sparc_bne _as_1 _lfinish_4) (sparc_nop _as_1) (sparc_ldbi _as_1 $r_result 0 $r_tmp1)) (unspecified)) (sparc_ldi _as_1 $r_result 1 $r_tmp2) (if (not (unsafe-code)) (begin (sparc_cmpi _as_1 $r_tmp1 $hdr_port) (sparc_bne _as_1 _lfinish_4)) (unspecified)) (sparc_cmpi _as_1 $r_tmp2 $imm_false) (sparc_be _as_1 _lfinish_4) (sparc_ldi _as_1 $r_result 33 $r_tmp1) (sparc_ldi _as_1 $r_result 29 $r_tmp2) (sparc_ldi _as_1 $r_result 17 $r_tmp0) (sparc_cmpr _as_1 $r_tmp1 $r_tmp2) (sparc_bge _as_1 _lfinish_4) (sparc_subi _as_1 $r_tmp0 1 $r_tmp0) (sparc_srai _as_1 $r_tmp1 2 $r_tmp2) (sparc_ldbr _as_1 $r_tmp0 $r_tmp2 $r_tmp2) (sparc_addi _as_1 $r_tmp1 4 $r_tmp1) (sparc_sti _as_1 $r_tmp1 33 $r_result) (sparc_slli _as_1 $r_tmp2 16 $r_tmp2) (sparc_b _as_1 _lend_4) (sparc_ori _as_1 $r_tmp2 $imm_character $r_result) (sparc_label _as_1 _lfinish_4) (sparc_set _as_1 $imm_false $r_result) (sparc_label _as_1 _lend_4))))))
(let () (define-primop 'internal:car (lambda (_as_1 _src1_1 _dest_1) (begin (internal-primop-invariant2 'internal:car _src1_1 _dest_1) (if (not (unsafe-code)) (emit-single-tagcheck-assert-reg! _as_1 $tag_pair-tag _src1_1 #f $ex_car) (unspecified)) (sparc_ldi _as_1 _src1_1 (- 0 $tag_pair-tag) _dest_1)))))
(let () (define-primop 'internal:cdr (lambda (_as_1 _src1_1 _dest_1) (begin (internal-primop-invariant2 'internal:cdr _src1_1 _dest_1) (if (not (unsafe-code)) (emit-single-tagcheck-assert-reg! _as_1 $tag_pair-tag _src1_1 #f $ex_cdr) (unspecified)) (sparc_ldi _as_1 _src1_1 (- 4 $tag_pair-tag) _dest_1)))))
(let () (define-primop 'internal:cell-ref (lambda (_as_1 _src1_1 _dest_1) (begin (internal-primop-invariant2 'internal:cell-ref _src1_1 _dest_1) (sparc_ldi _as_1 _src1_1 (- 0 $tag_pair-tag) _dest_1)))))
(let () (define-primop 'internal:set-car! (lambda (_as_1 _rs1_1 _rs2_1 _dest-ignored_1) (begin (internal-primop-invariant2 'internal:set-car! _rs1_1 _dest-ignored_1) (if (not (unsafe-code)) (emit-single-tagcheck-assert-reg! _as_1 $tag_pair-tag _rs1_1 _rs2_1 $ex_car) (unspecified)) (emit-setcar/setcdr! _as_1 _rs1_1 _rs2_1 0)))))
(let () (define-primop 'internal:set-cdr! (lambda (_as_1 _rs1_1 _rs2_1 _dest-ignored_1) (begin (internal-primop-invariant2 'internal:set-cdr! _rs1_1 _dest-ignored_1) (if (not (unsafe-code)) (emit-single-tagcheck-assert-reg! _as_1 $tag_pair-tag _rs1_1 _rs2_1 $ex_cdr) (unspecified)) (emit-setcar/setcdr! _as_1 _rs1_1 _rs2_1 4)))))
(let () (define-primop 'internal:cell-set! (lambda (_as_1 _rs1_1 _rs2_1 _dest-ignored_1) (begin (internal-primop-invariant2 'internal:cell-set! _rs1_1 _dest-ignored_1) (emit-setcar/setcdr! _as_1 _rs1_1 _rs2_1 0)))))
(let () (define-primop 'internal:cons (lambda (_as_1 _rs1_1 _rs2_1 _rd_1) (if (inline-allocation) (let ((_enough-memory_4 (new-label)) (_start_4 (new-label))) (begin (sparc_label _as_1 _start_4) (sparc_addi _as_1 $r_e-top 8 $r_e-top) (sparc_cmpr _as_1 $r_e-top $r_e-limit) (sparc_ble_a _as_1 _enough-memory_4) (sparc_sti _as_1 _rs1_1 -8 $r_e-top) (millicode-call/ret _as_1 $m_gc _start_4) (sparc_label _as_1 _enough-memory_4) (sparc_sti _as_1 (force-hwreg! _as_1 _rs2_1 $r_tmp0) -4 $r_e-top) (sparc_subi _as_1 $r_e-top (- 8 $tag_pair-tag) _rd_1))) (begin (if (= _rs1_1 $r_result) (sparc_move _as_1 $r_result $r_argreg2) (unspecified)) (millicode-call/numarg-in-result _as_1 $m_alloc 8) (if (= _rs1_1 $r_result) (sparc_sti _as_1 $r_argreg2 0 $r_result) (sparc_sti _as_1 _rs1_1 0 $r_result)) (sparc_sti _as_1 (force-hwreg! _as_1 _rs2_1 $r_tmp1) 4 $r_result) (sparc_addi _as_1 $r_result $tag_pair-tag _rd_1))))))
(let () (define-primop 'internal:car:pair (lambda (_as_1 _src1_1 _dest_1) (begin (internal-primop-invariant2 'internal:car _src1_1 _dest_1) (sparc_ldi _as_1 _src1_1 (- 0 $tag_pair-tag) _dest_1)))))
(let () (define-primop 'internal:cdr:pair (lambda (_as_1 _src1_1 _dest_1) (begin (internal-primop-invariant2 'internal:cdr _src1_1 _dest_1) (sparc_ldi _as_1 _src1_1 (- 4 $tag_pair-tag) _dest_1)))))
(let () (define-primop 'internal:vector-length (lambda (_as_1 _rs_1 _rd_1) (begin (internal-primop-invariant2 'internal:vector-length _rs_1 _rd_1) (emit-get-length! _as_1 $tag_vector-tag (+ $imm_vector-header $tag_vector-typetag) $ex_vlen _rs_1 _rd_1)))))
(let () (define-primop 'internal:vector-ref (lambda (_as_1 _rs1_1 _rs2_1 _rd_1) (begin (internal-primop-invariant2 'internal:vector-ref _rs1_1 _rd_1) (let ((_fault_4 (if (not (unsafe-code)) (emit-double-tagcheck-assert-reg/reg! _as_1 $tag_vector-tag (+ $imm_vector-header $tag_vector-typetag) _rs1_1 _rs2_1 $ex_vref) (unspecified)))) (emit-vector-like-ref! _as_1 _rs1_1 _rs2_1 _rd_1 _fault_4 $tag_vector-tag #t))))))
(let () (define-primop 'internal:vector-ref/imm (lambda (_as_1 _rs1_1 _imm_1 _rd_1) (begin (internal-primop-invariant2 'internal:vector-ref/imm _rs1_1 _rd_1) (let ((_fault_4 (if (not (unsafe-code)) (emit-double-tagcheck-assert-reg/imm! _as_1 $tag_vector-tag (+ $imm_vector-header $tag_vector-typetag) _rs1_1 _imm_1 $ex_vref) (unspecified)))) (emit-vector-like-ref/imm! _as_1 _rs1_1 _imm_1 _rd_1 _fault_4 $tag_vector-tag #t))))))
(let () (define-primop 'internal:vector-set! (lambda (_as_1 _rs1_1 _rs2_1 _rs3_1) (begin (internal-primop-invariant1 'internal:vector-set! _rs1_1) (let ((_fault_4 (if (not (unsafe-code)) (emit-double-tagcheck-assert-reg/reg! _as_1 $tag_vector-tag (+ $imm_vector-header $tag_vector-typetag) _rs1_1 _rs2_1 $ex_vset) (unspecified)))) (emit-vector-like-set! _as_1 _rs1_1 _rs2_1 _rs3_1 _fault_4 $tag_vector-tag #t))))))
(let () (define-primop 'internal:vector-length:vec (lambda (_as_1 _rs1_1 _dst_1) (begin (internal-primop-invariant2 'internal:vector-length:vec _rs1_1 _dst_1) (emit-get-length-trusted! _as_1 $tag_vector-tag _rs1_1 _dst_1)))))
(let () (define-primop 'internal:vector-ref:trusted (lambda (_as_1 _rs1_1 _rs2_1 _dst_1) (emit-vector-like-ref-trusted! _as_1 _rs1_1 _rs2_1 _dst_1 $tag_vector-tag))))
(let () (define-primop 'internal:vector-set!:trusted (lambda (_as_1 _rs1_1 _rs2_1 _rs3_1) (emit-vector-like-ref-trusted! _as_1 _rs1_1 _rs2_1 _rs3_1 $tag_vector-tag))))
(let () (define-primop 'internal:string-length (lambda (_as_1 _rs_1 _rd_1) (begin (internal-primop-invariant2 'internal:string-length _rs_1 _rd_1) (emit-get-length! _as_1 $tag_bytevector-tag (+ $imm_bytevector-header $tag_string-typetag) $ex_slen _rs_1 _rd_1)))))
(let () (define-primop 'internal:string-ref (lambda (_as_1 _rs1_1 _rs2_1 _rd_1) (begin (internal-primop-invariant2 'internal:string-ref _rs1_1 _rd_1) (let ((_fault_4 (if (not (unsafe-code)) (emit-double-tagcheck-assert-reg/reg! _as_1 $tag_bytevector-tag (+ $imm_bytevector-header $tag_string-typetag) _rs1_1 _rs2_1 $ex_sref) (unspecified)))) (emit-bytevector-like-ref! _as_1 _rs1_1 _rs2_1 _rd_1 _fault_4 #t #t))))))
(let () (define-primop 'internal:string-ref/imm (lambda (_as_1 _rs1_1 _imm_1 _rd_1) (begin (internal-primop-invariant2 'internal:string-ref/imm _rs1_1 _rd_1) (let ((_fault_4 (if (not (unsafe-code)) (emit-double-tagcheck-assert-reg/imm! _as_1 $tag_bytevector-tag (+ $imm_bytevector-header $tag_string-typetag) _rs1_1 _imm_1 $ex_sref) (unspecified)))) (emit-bytevector-like-ref/imm! _as_1 _rs1_1 _imm_1 _rd_1 _fault_4 #t #t))))))
(let () (define-primop 'internal:string-set! (lambda (_as_1 _rs1_1 _rs2_1 _rs3_1) (begin (internal-primop-invariant1 'internal:string-set! _rs1_1) (emit-string-set! _as_1 _rs1_1 _rs2_1 _rs3_1)))))
(let () (define-primop 'internal:+ (lambda (_as_1 _src1_1 _src2_1 _dest_1) (begin (internal-primop-invariant2 'internal:+ _src1_1 _dest_1) (emit-arith-primop! _as_1 sparc_taddrcc sparc_subr $m_add _src1_1 _src2_1 _dest_1 #t)))))
(let () (define-primop 'internal:+/imm (lambda (_as_1 _src1_1 _imm_1 _dest_1) (begin (internal-primop-invariant2 'internal:+/imm _src1_1 _dest_1) (emit-arith-primop! _as_1 sparc_taddicc sparc_subi $m_add _src1_1 _imm_1 _dest_1 #f)))))
(let () (define-primop 'internal:- (lambda (_as_1 _src1_1 _src2_1 _dest_1) (begin (internal-primop-invariant2 'internal:- _src1_1 _dest_1) (emit-arith-primop! _as_1 sparc_tsubrcc sparc_addr $m_subtract _src1_1 _src2_1 _dest_1 #t)))))
(let () (define-primop 'internal:-/imm (lambda (_as_1 _src1_1 _imm_1 _dest_1) (begin (internal-primop-invariant2 'internal:-/imm _src1_1 _dest_1) (emit-arith-primop! _as_1 sparc_tsubicc sparc_addi $m_subtract _src1_1 _imm_1 _dest_1 #f)))))
(let () (define-primop 'internal:-- (lambda (_as_1 _rs_1 _rd_1) (begin (internal-primop-invariant2 'internal:-- _rs_1 _rd_1) (emit-negate _as_1 _rs_1 _rd_1)))))
(let () (define-primop 'internal:branchf-null? (lambda (_as_1 _reg_1 _label_1) (begin (internal-primop-invariant1 'internal:branchf-null? _reg_1) (sparc_cmpi _as_1 _reg_1 $imm_null) (sparc_bne_a _as_1 _label_1) (sparc_slot _as_1)))))
(let () (define-primop 'internal:branchf-pair? (lambda (_as_1 _reg_1 _label_1) (begin (internal-primop-invariant1 'internal:branchf-pair? _reg_1) (sparc_andi _as_1 _reg_1 $tag_tagmask $r_tmp0) (sparc_cmpi _as_1 $r_tmp0 $tag_pair-tag) (sparc_bne_a _as_1 _label_1) (sparc_slot _as_1)))))
(let () (define-primop 'internal:branchf-zero? (lambda (_as_1 _reg_1 _label_1) (begin (internal-primop-invariant1 'internal:brancf-zero? _reg_1) (emit-bcmp-primop! _as_1 sparc_bne_a _reg_1 $r_g0 _label_1 $m_zerop #t)))))
(let () (define-primop 'internal:branchf-eof-object? (lambda (_as_1 _rs_1 _label_1) (begin (internal-primop-invariant1 'internal:branchf-eof-object? _rs_1) (sparc_cmpi _as_1 _rs_1 $imm_eof) (sparc_bne_a _as_1 _label_1) (sparc_slot _as_1)))))
(let () (define-primop 'internal:branchf-fixnum? (lambda (_as_1 _rs_1 _label_1) (begin (internal-primop-invariant1 'internal:branchf-fixnum? _rs_1) (sparc_btsti _as_1 _rs_1 3) (sparc_bne_a _as_1 _label_1) (sparc_slot _as_1)))))
(let () (define-primop 'internal:branchf-char? (lambda (_as_1 _rs_1 _label_1) (begin (internal-primop-invariant1 'internal:branchf-char? _rs_1) (sparc_andi _as_1 _rs_1 255 $r_tmp0) (sparc_cmpi _as_1 $r_tmp0 $imm_character) (sparc_bne_a _as_1 _label_1) (sparc_slot _as_1)))))
(let () (define-primop 'internal:branchf-= (lambda (_as_1 _src1_1 _src2_1 _label_1) (begin (internal-primop-invariant1 'internal:branchf-= _src1_1) (emit-bcmp-primop! _as_1 sparc_bne_a _src1_1 _src2_1 _label_1 $m_numeq #t)))))
(let () (define-primop 'internal:branchf-< (lambda (_as_1 _src1_1 _src2_1 _label_1) (begin (internal-primop-invariant1 'internal:branchf-< _src1_1) (emit-bcmp-primop! _as_1 sparc_bge_a _src1_1 _src2_1 _label_1 $m_numlt #t)))))
(let () (define-primop 'internal:branchf-<= (lambda (_as_1 _src1_1 _src2_1 _label_1) (begin (internal-primop-invariant1 'internal:branchf-<= _src1_1) (emit-bcmp-primop! _as_1 sparc_bg_a _src1_1 _src2_1 _label_1 $m_numle #t)))))
(let () (define-primop 'internal:branchf-> (lambda (_as_1 _src1_1 _src2_1 _label_1) (begin (internal-primop-invariant1 'internal:branchf-> _src1_1) (emit-bcmp-primop! _as_1 sparc_ble_a _src1_1 _src2_1 _label_1 $m_numgt #t)))))
(let () (define-primop 'internal:branchf->= (lambda (_as_1 _src1_1 _src2_1 _label_1) (begin (internal-primop-invariant1 'internal:branchf->= _src1_1) (emit-bcmp-primop! _as_1 sparc_bl_a _src1_1 _src2_1 _label_1 $m_numge #t)))))
(let () (define-primop 'internal:branchf-=/imm (lambda (_as_1 _src1_1 _imm_1 _label_1) (begin (internal-primop-invariant1 'internal:branchf-=/imm _src1_1) (emit-bcmp-primop! _as_1 sparc_bne_a _src1_1 _imm_1 _label_1 $m_numeq #f)))))
(let () (define-primop 'internal:branchf-</imm (lambda (_as_1 _src1_1 _imm_1 _label_1) (begin (internal-primop-invariant1 'internal:branchf-</imm _src1_1) (emit-bcmp-primop! _as_1 sparc_bge_a _src1_1 _imm_1 _label_1 $m_numlt #f)))))
(let () (define-primop 'internal:branchf-<=/imm (lambda (_as_1 _src1_1 _imm_1 _label_1) (begin (internal-primop-invariant1 'internal:branchf-<=/imm _src1_1) (emit-bcmp-primop! _as_1 sparc_bg_a _src1_1 _imm_1 _label_1 $m_numle #f)))))
(let () (define-primop 'internal:branchf->/imm (lambda (_as_1 _src1_1 _imm_1 _label_1) (begin (internal-primop-invariant1 'internal:branchf->/imm _src1_1) (emit-bcmp-primop! _as_1 sparc_ble_a _src1_1 _imm_1 _label_1 $m_numgt #f)))))
(let () (define-primop 'internal:branchf->=/imm (lambda (_as_1 _src1_1 _imm_1 _label_1) (begin (internal-primop-invariant1 'internal:branchf->=/imm _src1_1) (emit-bcmp-primop! _as_1 sparc_bl_a _src1_1 _imm_1 _label_1 $m_numge #f)))))
(let () (define-primop 'internal:branchf-char=? (lambda (_as_1 _src1_1 _src2_1 _label_1) (begin (internal-primop-invariant1 'internal:branchf-char=? _src1_1) (emit-char-bcmp-primop! _as_1 sparc_bne_a _src1_1 _src2_1 _label_1 $ex_char=?)))))
(let () (define-primop 'internal:branchf-char<=? (lambda (_as_1 _src1_1 _src2_1 _label_1) (begin (internal-primop-invariant1 'internal:branchf-char<=? _src1_1) (emit-char-bcmp-primop! _as_1 sparc_bg_a _src1_1 _src2_1 _label_1 $ex_char<=?)))))
(let () (define-primop 'internal:branchf-char<? (lambda (_as_1 _src1_1 _src2_1 _label_1) (begin (internal-primop-invariant1 'internal:branchf-char<? _src1_1) (emit-char-bcmp-primop! _as_1 sparc_bge_a _src1_1 _src2_1 _label_1 $ex_char<?)))))
(let () (define-primop 'internal:branchf-char>=? (lambda (_as_1 _src1_1 _src2_1 _label_1) (begin (internal-primop-invariant1 'internal:branchf-char>=? _src1_1) (emit-char-bcmp-primop! _as_1 sparc_bl_a _src1_1 _src2_1 _label_1 $ex_char>=?)))))
(let () (define-primop 'internal:branchf-char>? (lambda (_as_1 _src1_1 _src2_1 _label_1) (begin (internal-primop-invariant1 'internal:branchf-char>=? _src1_1) (emit-char-bcmp-primop! _as_1 sparc_ble_a _src1_1 _src2_1 _label_1 $ex_char>?)))))
(let () (define-primop 'internal:branchf-char=?/imm (lambda (_as_1 _src_1 _imm_1 _label_1) (begin (internal-primop-invariant1 'internal:branchf-char=?/imm _src_1) (emit-char-bcmp-primop! _as_1 sparc_bne_a _src_1 _imm_1 _label_1 $ex_char=?)))))
(let () (define-primop 'internal:branchf-char>=?/imm (lambda (_as_1 _src_1 _imm_1 _label_1) (begin (internal-primop-invariant1 'internal:branchf-char>=?/imm _src_1) (emit-char-bcmp-primop! _as_1 sparc_bl_a _src_1 _imm_1 _label_1 $ex_char>=?)))))
(let () (define-primop 'internal:branchf-char>?/imm (lambda (_as_1 _src_1 _imm_1 _label_1) (begin (internal-primop-invariant1 'internal:branchf-char>?/imm _src_1) (emit-char-bcmp-primop! _as_1 sparc_ble_a _src_1 _imm_1 _label_1 $ex_char>?)))))
(let () (define-primop 'internal:branchf-char<=?/imm (lambda (_as_1 _src_1 _imm_1 _label_1) (begin (internal-primop-invariant1 'internal:branchf-char<=?/imm _src_1) (emit-char-bcmp-primop! _as_1 sparc_bg_a _src_1 _imm_1 _label_1 $ex_char<=?)))))
(let () (define-primop 'internal:branchf-char<?/imm (lambda (_as_1 _src_1 _imm_1 _label_1) (begin (internal-primop-invariant1 'internal:branchf-char<?/imm _src_1) (emit-char-bcmp-primop! _as_1 sparc_bge_a _src_1 _imm_1 _label_1 $ex_char<?)))))
(let () (define-primop 'internal:eq? (lambda (_as_1 _src1_1 _src2_1 _dest_1) (begin (internal-primop-invariant2 'internal:eq? _src1_1 _dest_1) (let ((_tmp_4 (force-hwreg! _as_1 _src2_1 $r_tmp0))) (begin (sparc_cmpr _as_1 _src1_1 _tmp_4) (emit-set-boolean-reg! _as_1 _dest_1)))))))
(let () (define-primop 'internal:eq?/imm (lambda (_as_1 _rs_1 _imm_1 _rd_1) (begin (internal-primop-invariant2 'internal:eq?/imm _rs_1 _rd_1) (if (fixnum? _imm_1) (sparc_cmpi _as_1 _rs_1 (thefixnum _imm_1)) (if (eq? _imm_1 #t) (sparc_cmpi _as_1 _rs_1 $imm_true) (if (eq? _imm_1 #f) (sparc_cmpi _as_1 _rs_1 $imm_false) (if (null? _imm_1) (sparc_cmpi _as_1 _rs_1 $imm_null) ???)))) (emit-set-boolean-reg! _as_1 _rd_1)))))
(let () (define-primop 'internal:branchf-eq? (lambda (_as_1 _src1_1 _src2_1 _label_1) (begin (internal-primop-invariant1 'internal:branchf-eq? _src1_1) (let ((_src2_4 (force-hwreg! _as_1 _src2_1 $r_tmp0))) (begin (sparc_cmpr _as_1 _src1_1 _src2_4) (sparc_bne_a _as_1 _label_1) (sparc_slot _as_1)))))))
(let () (define-primop 'internal:branchf-eq?/imm (lambda (_as_1 _rs_1 _imm_1 _label_1) (begin (internal-primop-invariant1 'internal:branchf-eq?/imm _rs_1) (if (fixnum? _imm_1) (sparc_cmpi _as_1 _rs_1 (thefixnum _imm_1)) (if (eq? _imm_1 #t) (sparc_cmpi _as_1 _rs_1 $imm_true) (if (eq? _imm_1 #f) (sparc_cmpi _as_1 _rs_1 $imm_false) (if (null? _imm_1) (sparc_cmpi _as_1 _rs_1 $imm_null) ???)))) (sparc_bne_a _as_1 _label_1) (sparc_slot _as_1)))))
(let () (define-primop 'internal:check-fixnum? (lambda (_as_1 _src_1 _l1_1 _liveregs_1) (begin (sparc_btsti _as_1 _src_1 3) (emit-checkcc! _as_1 sparc_bne _l1_1 _liveregs_1)))))
(let () (define-primop 'internal:check-pair? (lambda (_as_1 _src_1 _l1_1 _liveregs_1) (begin (sparc_andi _as_1 _src_1 $tag_tagmask $r_tmp0) (sparc_cmpi _as_1 $r_tmp0 $tag_pair-tag) (emit-checkcc! _as_1 sparc_bne _l1_1 _liveregs_1)))))
(let () (define-primop 'internal:check-vector? (lambda (_as_1 _src_1 _l1_1 _liveregs_1) (begin (sparc_andi _as_1 _src_1 $tag_tagmask $r_tmp0) (sparc_cmpi _as_1 $r_tmp0 $tag_vector-tag) (sparc_bne _as_1 _l1_1) (sparc_nop _as_1) (sparc_ldi _as_1 _src_1 (- 0 $tag_vector-tag) $r_tmp0) (sparc_andi _as_1 $r_tmp0 255 $r_tmp1) (sparc_cmpi _as_1 $r_tmp1 $imm_vector-header) (emit-checkcc! _as_1 sparc_bne _l1_1 _liveregs_1)))))
(let () (define-primop 'internal:check-vector?/vector-length:vec (lambda (_as_1 _src_1 _dst_1 _l1_1 _liveregs_1) (begin (sparc_andi _as_1 _src_1 $tag_tagmask $r_tmp0) (sparc_cmpi _as_1 $r_tmp0 $tag_vector-tag) (sparc_bne _as_1 _l1_1) (sparc_nop _as_1) (sparc_ldi _as_1 _src_1 (- 0 $tag_vector-tag) $r_tmp0) (sparc_andi _as_1 $r_tmp0 255 $r_tmp1) (sparc_cmpi _as_1 $r_tmp1 $imm_vector-header) (sparc_bne _as_1 _l1_1) (apply sparc_slot2 _as_1 _liveregs_1) (sparc_srli _as_1 $r_tmp0 8 _dst_1)))))
(let () (begin (set! internal-primop-invariant2 (lambda (_name_1 _a_1 _b_1) (let ((_internal-primop-invariant2_2 0)) (begin (set! _internal-primop-invariant2_2 (lambda (_name_3 _a_3 _b_3) (if (not (if (hardware-mapped? _a_3) (hardware-mapped? _b_3) #f)) (asm-error "SPARC assembler internal invariant violated by " _name_3 " on operands " _a_3 " and " _b_3) (unspecified)))) (_internal-primop-invariant2_2 _name_1 _a_1 _b_1))))) 'internal-primop-invariant2))
(let () (begin (set! internal-primop-invariant1 (lambda (_name_1 _a_1) (let ((_internal-primop-invariant1_2 0)) (begin (set! _internal-primop-invariant1_2 (lambda (_name_3 _a_3) (if (not (hardware-mapped? _a_3)) (asm-error "SPARC assembler internal invariant violated by " _name_3 " on operand " _a_3) (unspecified)))) (_internal-primop-invariant1_2 _name_1 _a_1))))) 'internal-primop-invariant1))
(let () (begin (set! logical-op (lambda (_as_1 _rs1_1 _rs2_1 _dest_1 _op_1 _excode_1) (let ((_logical-op_2 0)) (begin (set! _logical-op_2 (lambda (_as_3 _rs1_3 _rs2_3 _dest_3 _op_3 _excode_3) (let ((_fail_6 (unspecified))) (begin (set! _fail_6 (lambda (_rs1_7 _rs2_7 _l0_7) (begin (if (not (= _rs1_7 $r_result)) (sparc_move _as_3 _rs1_7 $r_result) (unspecified)) (if (not (= _rs2_7 $r_argreg2)) (sparc_move _as_3 _rs2_7 $r_argreg2) (unspecified)) (sparc_set _as_3 (thefixnum _excode_3) $r_tmp0) (millicode-call/ret _as_3 $m_exception _l0_7)))) (let ((_l0_8 (new-label)) (_l1_8 (new-label))) (begin (sparc_label _as_3 _l0_8) (let ((_rs1_11 (force-hwreg! _as_3 _rs1_3 $r_result)) (_rs2_11 (force-hwreg! _as_3 _rs2_3 $r_argreg2)) (_u_11 (unsafe-code)) (_d_11 (hardware-mapped? _dest_3))) (if (if _u_11 _d_11 #f) (_op_3 _as_3 _rs1_11 _rs2_11 _dest_3) (if (if _u_11 (not _d_11) #f) (begin (_op_3 _as_3 _rs1_11 _rs2_11 $r_tmp0) (emit-store-reg! _as_3 $r_tmp0 _dest_3)) (if (if (not _u_11) _d_11 #f) (begin (sparc_orr _as_3 _rs1_11 _rs2_11 $r_tmp0) (sparc_btsti _as_3 $r_tmp0 3) (sparc_bz_a _as_3 _l1_8) (_op_3 _as_3 _rs1_11 _rs2_11 _dest_3) (_fail_6 _rs1_11 _rs2_11 _l0_8) (sparc_label _as_3 _l1_8)) (begin (sparc_orr _as_3 _rs1_11 _rs2_11 $r_tmp0) (sparc_btsti _as_3 $r_tmp0 3) (sparc_bz_a _as_3 _l1_8) (_op_3 _as_3 _rs1_11 _rs2_11 $r_tmp0) (_fail_6 _rs1_11 _rs2_11 _l0_8) (sparc_label _as_3 _l1_8) (emit-store-reg! _as_3 $r_tmp0 _dest_3)))))))))))) (_logical-op_2 _as_1 _rs1_1 _rs2_1 _dest_1 _op_1 _excode_1))))) 'logical-op))
(let () (begin (set! emit-shift-operation (lambda (_as_1 _exn_1 _rs1_1 _rs2_1 _rd_1) (let ((_emit-shift-operation_2 0)) (begin (set! _emit-shift-operation_2 (lambda (_as_3 _exn_3 _rs1_3 _rs2_3 _rd_3) (let ((_rs2_6 (force-hwreg! _as_3 _rs2_3 $r_argreg2))) (begin (if (not (unsafe-code)) (let ((_l0_9 (new-label)) (_fault_9 (new-label)) (_start_9 (new-label))) (begin (sparc_label _as_3 _start_9) (sparc_btsti _as_3 _rs1_3 3) (sparc_be_a _as_3 _l0_9) (sparc_andi _as_3 _rs2_6 124 $r_g0) (sparc_label _as_3 _fault_9) (if (not (= _rs1_3 $r_result)) (sparc_move _as_3 _rs1_3 $r_result) (unspecified)) (if (not (= _rs2_6 $r_argreg2)) (emit-move2hwreg! _as_3 _rs2_6 $r_argreg2) (unspecified)) (sparc_set _as_3 (thefixnum _exn_3) $r_tmp0) (millicode-call/ret _as_3 $m_exception _start_9) (sparc_label _as_3 _l0_9) (sparc_bne _as_3 _fault_9) (sparc_srai _as_3 _rs2_6 2 $r_tmp1))) (sparc_srai _as_3 _rs2_6 2 $r_tmp1)) (if (= _exn_3 $ex_lsh) (sparc_sllr _as_3 _rs1_3 $r_tmp1 _rd_3) (if (= _exn_3 $ex_rshl) (begin (sparc_srlr _as_3 _rs1_3 $r_tmp1 _rd_3) (sparc_andni _as_3 _rd_3 3 _rd_3)) (if (= _exn_3 $ex_rsha) (begin (sparc_srar _as_3 _rs1_3 $r_tmp1 _rd_3) (sparc_andni _as_3 _rd_3 3 _rd_3)) ???))))))) (_emit-shift-operation_2 _as_1 _exn_1 _rs1_1 _rs2_1 _rd_1))))) 'emit-shift-operation))
(let () (begin (set! emit-set-boolean! (lambda (_as_1) (let ((_emit-set-boolean!_2 0)) (begin (set! _emit-set-boolean!_2 (lambda (_as_3) (emit-set-boolean-reg! _as_3 $r_result))) (_emit-set-boolean!_2 _as_1))))) 'emit-set-boolean!))
(let () (begin (set! emit-set-boolean-reg! (lambda (_as_1 _dest_1) (let ((_emit-set-boolean-reg!_2 0)) (begin (set! _emit-set-boolean-reg!_2 (lambda (_as_3 _dest_3) (let ((_l1_6 (new-label))) (begin (sparc_set _as_3 $imm_true _dest_3) (sparc_bne_a _as_3 _l1_6) (sparc_set _as_3 $imm_false _dest_3) (sparc_label _as_3 _l1_6))))) (_emit-set-boolean-reg!_2 _as_1 _dest_1))))) 'emit-set-boolean-reg!))
(let () (begin (set! emit-single-tagcheck->bool! (lambda (_as_1 _tag_1) (let ((_emit-single-tagcheck->bool!_2 0)) (begin (set! _emit-single-tagcheck->bool!_2 (lambda (_as_3 _tag_3) (begin (sparc_andi _as_3 $r_result $tag_tagmask $r_tmp0) (sparc_cmpi _as_3 $r_tmp0 _tag_3) (emit-set-boolean! _as_3)))) (_emit-single-tagcheck->bool!_2 _as_1 _tag_1))))) 'emit-single-tagcheck->bool!))
(let () (begin (set! emit-single-tagcheck-assert! (lambda (_as_1 _tag1_1 _excode_1 _reg2_1) (let ((_emit-single-tagcheck-assert!_2 0)) (begin (set! _emit-single-tagcheck-assert!_2 (lambda (_as_3 _tag1_3 _excode_3 _reg2_3) (emit-single-tagcheck-assert-reg! _as_3 _tag1_3 $r_result _reg2_3 _excode_3))) (_emit-single-tagcheck-assert!_2 _as_1 _tag1_1 _excode_1 _reg2_1))))) 'emit-single-tagcheck-assert!))
(let () (begin (set! emit-single-tagcheck-assert-reg! (lambda (_as_1 _tag1_1 _reg_1 _reg2_1 _excode_1) (let ((_emit-single-tagcheck-assert-reg!_2 0)) (begin (set! _emit-single-tagcheck-assert-reg!_2 (lambda (_as_3 _tag1_3 _reg_3 _reg2_3 _excode_3) (let ((_l0_6 (new-label)) (_l1_6 (new-label)) (_fault_6 (new-label))) (begin (sparc_label _as_3 _l0_6) (sparc_andi _as_3 _reg_3 $tag_tagmask $r_tmp0) (sparc_cmpi _as_3 $r_tmp0 _tag1_3) (fault-if-ne _as_3 _excode_3 #f #f _reg_3 _reg2_3 _l0_6))))) (_emit-single-tagcheck-assert-reg!_2 _as_1 _tag1_1 _reg_1 _reg2_1 _excode_1))))) 'emit-single-tagcheck-assert-reg!))
(let () (begin (set! emit-assert-fixnum! (lambda (_as_1 _reg_1 _excode_1) (let ((_emit-assert-fixnum!_2 0)) (begin (set! _emit-assert-fixnum!_2 (lambda (_as_3 _reg_3 _excode_3) (let ((_l0_6 (new-label)) (_l1_6 (new-label)) (_fault_6 (new-label))) (begin (sparc_label _as_3 _l0_6) (sparc_btsti _as_3 _reg_3 3) (fault-if-ne _as_3 _excode_3 #f #f _reg_3 #f _l0_6))))) (_emit-assert-fixnum!_2 _as_1 _reg_1 _excode_1))))) 'emit-assert-fixnum!))
(let () (begin (set! emit-assert-char! (lambda (_as_1 _excode_1 _fault-label_1) (let ((_emit-assert-char!_2 0)) (begin (set! _emit-assert-char!_2 (lambda (_as_3 _excode_3 _fault-label_3) (let ((_l0_6 (new-label)) (_l1_6 (new-label)) (_fault_6 (new-label))) (begin (sparc_label _as_3 _l0_6) (sparc_andi _as_3 $r_result 255 $r_tmp0) (sparc_cmpi _as_3 $r_tmp0 $imm_character) (fault-if-ne _as_3 _excode_3 #f _fault-label_3 #f #f _l0_6))))) (_emit-assert-char!_2 _as_1 _excode_1 _fault-label_1))))) 'emit-assert-char!))
(let () (begin (set! fault-if-ne (lambda (_as_1 _excode_1 _cont-label_1 _fault-label_1 _reg1_1 _reg2_1 _ret-label_1) (let ((_fault-if-ne_2 0)) (begin (set! _fault-if-ne_2 (lambda (_as_3 _excode_3 _cont-label_3 _fault-label_3 _reg1_3 _reg2_3 _ret-label_3) (if _fault-label_3 (begin (if (if _reg2_3 (not (= _reg2_3 $r_argreg2)) #f) (emit-move2hwreg! _as_3 _reg2_3 $r_argreg2) (unspecified)) (sparc_bne _as_3 _fault-label_3) (if (if _reg1_3 (not (= _reg1_3 $r_result)) #f) (sparc_move _as_3 _reg1_3 $r_result) (sparc_nop _as_3)) _fault-label_3) (let ((_fault_10 (new-label)) (_l1_10 (new-label))) (begin (sparc_be_a _as_3 (let ((_temp_11_14 _cont-label_3)) (if _temp_11_14 _temp_11_14 _l1_10))) (sparc_slot _as_3) (sparc_label _as_3 _fault_10) (if (if _reg1_3 (not (= _reg1_3 $r_result)) #f) (sparc_move _as_3 _reg1_3 $r_result) (unspecified)) (if (if _reg2_3 (not (= _reg2_3 $r_argreg2)) #f) (emit-move2hwreg! _as_3 _reg2_3 $r_argreg2) (unspecified)) (sparc_set _as_3 (thefixnum _excode_3) $r_tmp0) (millicode-call/ret _as_3 $m_exception (let ((_temp_20_23 _ret-label_3)) (if _temp_20_23 _temp_20_23 _l1_10))) (if (let ((_temp_25_28 (not _cont-label_3))) (if _temp_25_28 _temp_25_28 (not _ret-label_3))) (sparc_label _as_3 _l1_10) (unspecified)) _fault_10))))) (_fault-if-ne_2 _as_1 _excode_1 _cont-label_1 _fault-label_1 _reg1_1 _reg2_1 _ret-label_1))))) 'fault-if-ne))
(let () (begin (set! emit-assert-positive-fixnum! (lambda (_as_1 _reg_1 _excode_1) (let ((_emit-assert-positive-fixnum!_2 0)) (begin (set! _emit-assert-positive-fixnum!_2 (lambda (_as_3 _reg_3 _excode_3) (let ((_l1_6 (new-label)) (_l2_6 (new-label)) (_l3_6 (new-label))) (begin (sparc_label _as_3 _l2_6) (sparc_tsubrcc _as_3 _reg_3 $r_g0 $r_g0) (sparc_bvc _as_3 _l1_6) (sparc_nop _as_3) (sparc_label _as_3 _l3_6) (if (not (= _reg_3 $r_result)) (sparc_move _as_3 _reg_3 $r_result) (unspecified)) (sparc_set _as_3 (thefixnum _excode_3) $r_tmp0) (millicode-call/ret _as_3 $m_exception _l2_6) (sparc_label _as_3 _l1_6) (sparc_bl _as_3 _l3_6) (sparc_nop _as_3) _l3_6)))) (_emit-assert-positive-fixnum!_2 _as_1 _reg_1 _excode_1))))) 'emit-assert-positive-fixnum!))
(let () (begin (set! emit-cmp-primop! (lambda (_as_1 _branch_t_a_1 _generic_1 _r_1) (let ((_emit-cmp-primop!_2 0)) (begin (set! _emit-cmp-primop!_2 (lambda (_as_3 _branch_t_a_3 _generic_3 _r_3) (let ((_ltagok_6 (new-label)) (_lcont_6 (new-label)) (_r_6 (force-hwreg! _as_3 _r_3 $r_argreg2))) (begin (sparc_tsubrcc _as_3 $r_result _r_6 $r_g0) (sparc_bvc_a _as_3 _ltagok_6) (sparc_set _as_3 $imm_false $r_result) (if (not (= _r_6 $r_argreg2)) (sparc_move _as_3 _r_6 $r_argreg2) (unspecified)) (millicode-call/ret _as_3 _generic_3 _lcont_6) (sparc_label _as_3 _ltagok_6) (_branch_t_a_3 _as_3 _lcont_6) (sparc_set _as_3 $imm_true $r_result) (sparc_label _as_3 _lcont_6))))) (_emit-cmp-primop!_2 _as_1 _branch_t_a_1 _generic_1 _r_1))))) 'emit-cmp-primop!))
(let () (begin (set! emit-bcmp-primop! (lambda (_as_1 _branch_f_a_1 _src1_1 _src2_1 _lfalse_1 _generic_1 _src2isreg_1) (let ((_emit-bcmp-primop!_2 0)) (begin (set! _emit-bcmp-primop!_2 (lambda (_as_3 _branch_f_a_3 _src1_3 _src2_3 _lfalse_3 _generic_3 _src2isreg_3) (let ((_ltagok_6 (new-label)) (_ltrue_6 (new-label)) (_op2_6 (if _src2isreg_3 (force-hwreg! _as_3 _src2_3 $r_tmp1) (thefixnum _src2_3))) (_sub_6 (if _src2isreg_3 sparc_tsubrcc sparc_tsubicc)) (_mov_6 (if _src2isreg_3 sparc_move sparc_set))) (begin (_sub_6 _as_3 _src1_3 _op2_6 $r_g0) (sparc_bvc_a _as_3 _ltagok_6) (sparc_slot _as_3) (let ((_move-res_9 (not (= _src1_3 $r_result))) (_move-arg2_9 (let ((_temp_15_18 (not _src2isreg_3))) (if _temp_15_18 _temp_15_18 (not (= _op2_6 $r_argreg2)))))) (begin (if (if _move-arg2_9 _move-res_9 #f) (_mov_6 _as_3 _op2_6 $r_argreg2) (unspecified)) (sparc_jmpli _as_3 $r_millicode _generic_3 $r_o7) (if _move-res_9 (sparc_move _as_3 _src1_3 $r_result) (if _move-arg2_9 (_mov_6 _as_3 _op2_6 $r_argreg2) (sparc_nop _as_3))) (sparc_cmpi _as_3 $r_result $imm_false) (sparc_bne_a _as_3 _ltrue_6) (sparc_slot _as_3) (sparc_b _as_3 _lfalse_3) (sparc_slot _as_3))) (sparc_label _as_3 _ltagok_6) (_branch_f_a_3 _as_3 _lfalse_3) (sparc_slot _as_3) (sparc_label _as_3 _ltrue_6))))) (_emit-bcmp-primop!_2 _as_1 _branch_f_a_1 _src1_1 _src2_1 _lfalse_1 _generic_1 _src2isreg_1))))) 'emit-bcmp-primop!))
(let () '(define (emit-arith-primop! as op invop generic src1 src2 dest src2isreg) (let ((l1 (new-label)) (op2 (if src2isreg (force-hwreg! as src2 $r_tmp1) (thefixnum src2)))) (if (and src2isreg (= op2 dest)) (begin (op as src1 op2 $r_tmp0) (sparc_bvc_a as l1) (sparc_move as $r_tmp0 dest)) (begin (op as src1 op2 dest) (sparc_bvc_a as l1) (sparc_slot as) (invop as dest op2 dest))) (let ((n (+ (if (not (= src1 $r_result)) 1 0) (if (or (not src2isreg) (not (= op2 $r_argreg2))) 1 0))) (mov2 (if src2isreg sparc_move sparc_set))) (if (= n 2) (mov2 as op2 $r_argreg2)) (sparc_jmpli as $r_millicode generic $r_o7) (cond ((= n 0) (sparc_nop as)) ((= n 1) (mov2 as op2 $r_argreg2)) (else (sparc_move as src1 $r_result))) (if (not (= dest $r_result)) (sparc_move as $r_result dest)) (sparc_label as l1)))))
(let () (begin (set! emit-arith-primop! (lambda (_as_1 _op_1 _invop_1 _generic_1 _rs1_1 _rs2/imm_1 _rd_1 _op2isreg_1) (let ((_emit-arith-primop!_2 0)) (begin (set! _emit-arith-primop!_2 (lambda (_as_3 _op_3 _invop_3 _generic_3 _rs1_3 _rs2/imm_3 _rd_3 _op2isreg_3) (let ((_l1_6 (new-label))) (begin (if _op2isreg_3 (let ((_rs2_9 (force-hwreg! _as_3 _rs2/imm_3 $r_argreg2))) (begin (if (let ((_temp_11_14 (let ((_t_18_21 _rs2_9)) (if (= _rs1_3 _t_18_21) (= _t_18_21 _rd_3) #f)))) (if _temp_11_14 _temp_11_14 (if (= _rs2_9 _rd_3) (= _generic_3 $m_subtract) #f))) (begin (_op_3 _as_3 _rs1_3 _rs2_9 $r_tmp0) (sparc_bvc_a _as_3 _l1_6) (sparc_move _as_3 $r_tmp0 _rd_3)) (if (= _rs1_3 _rd_3) (begin (_op_3 _as_3 _rs1_3 _rs2_9 _rs1_3) (sparc_bvc_a _as_3 _l1_6) (sparc_slot _as_3) (_invop_3 _as_3 _rs1_3 _rs2_9 _rs1_3)) (if (= _rs2_9 _rd_3) (begin (_op_3 _as_3 _rs1_3 _rs2_9 _rs2_9) (sparc_bvc_a _as_3 _l1_6) (sparc_slot _as_3) (_invop_3 _as_3 _rs2_9 _rs1_3 _rs2_9)) (begin (_op_3 _as_3 _rs1_3 _rs2_9 _rd_3) (sparc_bvc_a _as_3 _l1_6) (sparc_slot _as_3) (if (if (not (= _rd_3 $r_result)) (not (= _rd_3 $r_argreg2)) #f) (sparc_clr _as_3 _rd_3) (unspecified)))))) (if (if (= _rs1_3 $r_result) (= _rs2_9 $r_argreg2) #f) (millicode-call/0arg _as_3 _generic_3) (if (= _rs1_3 $r_result) (millicode-call/1arg _as_3 _generic_3 _rs2_9) (if (= _rs2_9 $r_argreg2) (millicode-call/1arg-in-result _as_3 _generic_3 _rs1_3) (begin (sparc_move _as_3 _rs2_9 $r_argreg2) (millicode-call/1arg-in-result _as_3 _generic_3 _rs1_3))))))) (let ((_imm_37 (thefixnum _rs2/imm_3))) (begin (_op_3 _as_3 _rs1_3 _imm_37 _rd_3) (sparc_bvc_a _as_3 _l1_6) (sparc_slot _as_3) (_invop_3 _as_3 _rd_3 _imm_37 _rd_3) (if (not (= _rs1_3 $r_result)) (sparc_move _as_3 _rs1_3 $r_result) (unspecified)) (millicode-call/numarg-in-reg _as_3 _generic_3 _imm_37 $r_argreg2)))) (if (not (= _rd_3 $r_result)) (sparc_move _as_3 $r_result _rd_3) (unspecified)) (sparc_label _as_3 _l1_6))))) (_emit-arith-primop!_2 _as_1 _op_1 _invop_1 _generic_1 _rs1_1 _rs2/imm_1 _rd_1 _op2isreg_1))))) 'emit-arith-primop!))
(let () (begin (set! emit-negate (lambda (_as_1 _rs_1 _rd_1) (let ((_emit-negate_2 0)) (begin (set! _emit-negate_2 (lambda (_as_3 _rs_3 _rd_3) (let ((_l1_6 (new-label))) (begin (if (= _rs_3 _rd_3) (begin (sparc_tsubrcc _as_3 $r_g0 _rs_3 _rs_3) (sparc_bvc_a _as_3 _l1_6) (sparc_slot _as_3) (if (= _rs_3 $r_result) (begin (sparc_jmpli _as_3 $r_millicode $m_negate $r_o7) (sparc_subr _as_3 $r_g0 $r_result $r_result)) (begin (sparc_subr _as_3 $r_g0 _rs_3 _rs_3) (sparc_jmpli _as_3 $r_millicode $m_negate $r_o7) (sparc_move _as_3 _rs_3 $r_result)))) (begin (sparc_tsubrcc _as_3 $r_g0 _rs_3 _rd_3) (sparc_bvc_a _as_3 _l1_6) (sparc_slot _as_3) (if (= _rs_3 $r_result) (begin (sparc_jmpli _as_3 $r_millicode $m_negate $r_o7) (sparc_clr _as_3 _rd_3)) (if (= _rd_3 $r_result) (begin (sparc_jmpli _as_3 $r_millicode $m_negate $r_o7) (sparc_move _as_3 _rs_3 $r_result)) (begin (sparc_clr _as_3 _rd_3) (sparc_jmpli _as_3 $r_millicode $m_negate $r_o7) (sparc_move _as_3 _rs_3 $r_result)))))) (if (not (= _rd_3 $r_result)) (sparc_move _as_3 $r_result _rd_3) (unspecified)) (sparc_label _as_3 _l1_6))))) (_emit-negate_2 _as_1 _rs_1 _rd_1))))) 'emit-negate))
(let () (begin (set! emit-char-cmp (lambda (_as_1 _r_1 _btrue_a_1 _excode_1) (let ((_emit-char-cmp_2 0)) (begin (set! _emit-char-cmp_2 (lambda (_as_3 _r_3 _btrue_a_3 _excode_3) (emit-charcmp! _as_3 (lambda () (let ((_l2_7 (new-label))) (begin (sparc_set _as_3 $imm_false $r_result) (_btrue_a_3 _as_3 _l2_7) (sparc_set _as_3 $imm_true $r_result) (sparc_label _as_3 _l2_7)))) $r_result _r_3 _excode_3))) (_emit-char-cmp_2 _as_1 _r_1 _btrue_a_1 _excode_1))))) 'emit-char-cmp))
(let () (begin (set! emit-char-bcmp-primop! (lambda (_as_1 _bfalse_a_1 _op1_1 _op2_1 _l0_1 _excode_1) (let ((_emit-char-bcmp-primop!_2 0)) (begin (set! _emit-char-bcmp-primop!_2 (lambda (_as_3 _bfalse_a_3 _op1_3 _op2_3 _l0_3 _excode_3) (emit-charcmp! _as_3 (lambda () (begin (_bfalse_a_3 _as_3 _l0_3) (sparc_slot _as_3))) _op1_3 _op2_3 _excode_3))) (_emit-char-bcmp-primop!_2 _as_1 _bfalse_a_1 _op1_1 _op2_1 _l0_1 _excode_1))))) 'emit-char-bcmp-primop!))
(let () (begin (set! emit-charcmp! (lambda (_as_1 _tail_1 _op1_1 _op2_1 _excode_1) (let ((_emit-charcmp!_2 0)) (begin (set! _emit-charcmp!_2 (lambda (_as_3 _tail_3 _op1_3 _op2_3 _excode_3) (let ((_op2_6 (if (char? _op2_3) _op2_3 (force-hwreg! _as_3 _op2_3 $r_argreg2)))) (begin (if (not (unsafe-code)) (let ((_l0_10 (new-label)) (_l1_10 (new-label)) (_fault_10 (new-label))) (begin (sparc_label _as_3 _l0_10) (if (char? _op2_6) (begin (sparc_xori _as_3 _op1_3 $imm_character $r_tmp0) (sparc_btsti _as_3 $r_tmp0 255) (sparc_srli _as_3 _op1_3 16 $r_tmp0) (sparc_be_a _as_3 _l1_10) (sparc_cmpi _as_3 $r_tmp0 (char->integer _op2_6))) (begin (sparc_andi _as_3 _op1_3 255 $r_tmp0) (sparc_andi _as_3 _op2_6 255 $r_tmp1) (sparc_cmpr _as_3 $r_tmp0 $r_tmp1) (sparc_bne _as_3 _fault_10) (sparc_cmpi _as_3 $r_tmp0 $imm_character) (sparc_be_a _as_3 _l1_10) (sparc_cmpr _as_3 _op1_3 _op2_6))) (sparc_label _as_3 _fault_10) (if (not (eqv? _op1_3 $r_result)) (sparc_move _as_3 _op1_3 $r_result) (unspecified)) (if (char? _op2_6) (emit-immediate->register! _as_3 (char->immediate _op2_6) $r_argreg2) (if (not (eqv? _op2_6 $r_argreg2)) (sparc_move _as_3 _op2_6 $r_argreg2) (unspecified))) (sparc_set _as_3 (thefixnum _excode_3) $r_tmp0) (millicode-call/ret _as_3 $m_exception _l0_10) (sparc_label _as_3 _l1_10))) (if (not (char? _op2_6)) (sparc_cmpr _as_3 _op1_3 _op2_6) (begin (sparc_srli _as_3 _op1_3 16 $r_tmp0) (sparc_cmpi _as_3 $r_tmp0 (char->integer _op2_6))))) (_tail_3))))) (_emit-charcmp!_2 _as_1 _tail_1 _op1_1 _op2_1 _excode_1))))) 'emit-charcmp!))
(let () (begin (set! emit-setcar/setcdr! (lambda (_as_1 _rs1_1 _rs2_1 _offs_1) (let ((_emit-setcar/setcdr!_2 0)) (begin (set! _emit-setcar/setcdr!_2 (lambda (_as_3 _rs1_3 _rs2_3 _offs_3) (if (if (write-barrier) (hardware-mapped? _rs2_3) #f) (begin (sparc_sti _as_3 _rs2_3 (- _offs_3 $tag_pair-tag) _rs1_3) (if (not (= _rs1_3 $r_result)) (sparc_move _as_3 _rs1_3 $r_result) (unspecified)) (millicode-call/1arg _as_3 $m_addtrans _rs2_3)) (if (write-barrier) (begin (emit-move2hwreg! _as_3 _rs2_3 $r_argreg2) (sparc_sti _as_3 $r_argreg2 (- _offs_3 $tag_pair-tag) _rs1_3) (millicode-call/1arg-in-result _as_3 $m_addtrans _rs1_3)) (if (hardware-mapped? _rs2_3) (sparc_sti _as_3 _rs2_3 (- _offs_3 $tag_pair-tag) _rs1_3) (begin (emit-move2hwreg! _as_3 _rs2_3 $r_argreg2) (sparc_sti _as_3 $r_argreg2 (- _offs_3 $tag_pair-tag) _rs1_3))))))) (_emit-setcar/setcdr!_2 _as_1 _rs1_1 _rs2_1 _offs_1))))) 'emit-setcar/setcdr!))
(let () (begin (set! emit-double-tagcheck->bool! (lambda (_as_1 _tag1_1 _tag2_1) (let ((_emit-double-tagcheck->bool!_2 0)) (begin (set! _emit-double-tagcheck->bool!_2 (lambda (_as_3 _tag1_3 _tag2_3) (let ((_l1_6 (new-label))) (begin (sparc_andi _as_3 $r_result $tag_tagmask $r_tmp0) (sparc_cmpi _as_3 $r_tmp0 _tag1_3) (sparc_bne_a _as_3 _l1_6) (sparc_set _as_3 $imm_false $r_result) (sparc_ldbi _as_3 $r_result (+ (- 0 _tag1_3) 3) $r_tmp0) (sparc_set _as_3 $imm_true $r_result) (sparc_cmpi _as_3 $r_tmp0 _tag2_3) (sparc_bne_a _as_3 _l1_6) (sparc_set _as_3 $imm_false $r_result) (sparc_label _as_3 _l1_6))))) (_emit-double-tagcheck->bool!_2 _as_1 _tag1_1 _tag2_1))))) 'emit-double-tagcheck->bool!))
(let () (begin (set! double-tagcheck-assert (lambda (_as_1 _tag1_1 _tag2_1 _rs1_1 _rs2/imm_1 _rs3_1 _excode_1 _imm?_1) (let ((_double-tagcheck-assert_2 0)) (begin (set! _double-tagcheck-assert_2 (lambda (_as_3 _tag1_3 _tag2_3 _rs1_3 _rs2/imm_3 _rs3_3 _excode_3 _imm?_3) (let ((_l0_6 (new-label)) (_l1_6 (new-label)) (_fault_6 (new-label))) (begin (sparc_label _as_3 _l0_6) (sparc_andi _as_3 _rs1_3 $tag_tagmask $r_tmp0) (sparc_cmpi _as_3 $r_tmp0 _tag1_3) (sparc_be_a _as_3 _l1_6) (sparc_ldi _as_3 _rs1_3 (- 0 _tag1_3) $r_tmp0) (sparc_label _as_3 _fault_6) (if (not (= _rs1_3 $r_result)) (sparc_move _as_3 _rs1_3 $r_result) (unspecified)) (if _rs2/imm_3 (if _imm?_3 (sparc_set _as_3 (thefixnum _rs2/imm_3) $r_argreg2) (let ((_temp_10_13 (= _rs2/imm_3 $r_argreg2))) (if _temp_10_13 _temp_10_13 (emit-move2hwreg! _as_3 _rs2/imm_3 $r_argreg2)))) (unspecified)) (if (if _rs3_3 (not (= _rs3_3 $r_argreg3)) #f) (emit-move2hwreg! _as_3 _rs3_3 $r_argreg3) (unspecified)) (sparc_set _as_3 (thefixnum _excode_3) $r_tmp0) (millicode-call/ret _as_3 $m_exception _l0_6) (sparc_label _as_3 _l1_6) (sparc_andi _as_3 $r_tmp0 255 $r_tmp1) (sparc_cmpi _as_3 $r_tmp1 _tag2_3) (sparc_bne_a _as_3 _fault_6) (sparc_slot _as_3) _fault_6)))) (_double-tagcheck-assert_2 _as_1 _tag1_1 _tag2_1 _rs1_1 _rs2/imm_1 _rs3_1 _excode_1 _imm?_1))))) 'double-tagcheck-assert))
(let () (begin (set! emit-double-tagcheck-assert! (lambda (_as_1 _tag1_1 _tag2_1 _excode_1 _reg2_1) (let ((_emit-double-tagcheck-assert!_2 0)) (begin (set! _emit-double-tagcheck-assert!_2 (lambda (_as_3 _tag1_3 _tag2_3 _excode_3 _reg2_3) (double-tagcheck-assert _as_3 _tag1_3 _tag2_3 $r_result _reg2_3 #f _excode_3 #f))) (_emit-double-tagcheck-assert!_2 _as_1 _tag1_1 _tag2_1 _excode_1 _reg2_1))))) 'emit-double-tagcheck-assert!))
(let () (begin (set! emit-double-tagcheck-assert-reg/reg! (lambda (_as_1 _tag1_1 _tag2_1 _rs1_1 _rs2_1 _excode_1) (let ((_emit-double-tagcheck-assert-reg/reg!_2 0)) (begin (set! _emit-double-tagcheck-assert-reg/reg!_2 (lambda (_as_3 _tag1_3 _tag2_3 _rs1_3 _rs2_3 _excode_3) (double-tagcheck-assert _as_3 _tag1_3 _tag2_3 _rs1_3 _rs2_3 #f _excode_3 #f))) (_emit-double-tagcheck-assert-reg/reg!_2 _as_1 _tag1_1 _tag2_1 _rs1_1 _rs2_1 _excode_1))))) 'emit-double-tagcheck-assert-reg/reg!))
(let () (begin (set! emit-double-tagcheck-assert-reg/imm! (lambda (_as_1 _tag1_1 _tag2_1 _rs1_1 _imm_1 _excode_1) (let ((_emit-double-tagcheck-assert-reg/imm!_2 0)) (begin (set! _emit-double-tagcheck-assert-reg/imm!_2 (lambda (_as_3 _tag1_3 _tag2_3 _rs1_3 _imm_3 _excode_3) (double-tagcheck-assert _as_3 _tag1_3 _tag2_3 _rs1_3 _imm_3 #f _excode_3 #t))) (_emit-double-tagcheck-assert-reg/imm!_2 _as_1 _tag1_1 _tag2_1 _rs1_1 _imm_1 _excode_1))))) 'emit-double-tagcheck-assert-reg/imm!))
(let () (begin (set! emit-get-length! (lambda (_as_1 _tag1_1 _tag2_1 _excode_1 _rs_1 _rd_1) (let ((_emit-get-length!_2 0)) (begin (set! _emit-get-length!_2 (lambda (_as_3 _tag1_3 _tag2_3 _excode_3 _rs_3 _rd_3) (begin (if (not (unsafe-code)) (if _tag2_3 (emit-double-tagcheck-assert-reg/reg! _as_3 _tag1_3 _tag2_3 _rs_3 _rd_3 _excode_3) (emit-single-tagcheck-assert-reg! _as_3 _tag1_3 _rs_3 _rd_3 _excode_3)) (unspecified)) (emit-get-length-trusted! _as_3 _tag1_3 _rs_3 _rd_3)))) (_emit-get-length!_2 _as_1 _tag1_1 _tag2_1 _excode_1 _rs_1 _rd_1))))) 'emit-get-length!))
(let () (begin (set! emit-get-length-trusted! (lambda (_as_1 _tag1_1 _rs_1 _rd_1) (let ((_emit-get-length-trusted!_2 0)) (begin (set! _emit-get-length-trusted!_2 (lambda (_as_3 _tag1_3 _rs_3 _rd_3) (begin (sparc_ldi _as_3 _rs_3 (- 0 _tag1_3) $r_tmp0) (sparc_srli _as_3 $r_tmp0 8 _rd_3) (if (= _tag1_3 $tag_bytevector-tag) (sparc_slli _as_3 _rd_3 2 _rd_3) (unspecified))))) (_emit-get-length-trusted!_2 _as_1 _tag1_1 _rs_1 _rd_1))))) 'emit-get-length-trusted!))
(let () (begin (set! emit-allocate-bytevector (lambda (_as_1 _hdr_1 _preserved-result_1) (let ((_emit-allocate-bytevector_2 0)) (begin (set! _emit-allocate-bytevector_2 (lambda (_as_3 _hdr_3 _preserved-result_3) (begin (if (not _preserved-result_3) (sparc_move _as_3 $r_result $r_argreg2) (unspecified)) (sparc_addi _as_3 $r_result 28 $r_result) (sparc_andi _as_3 $r_result (asm:signed 4294967280) $r_result) (sparc_jmpli _as_3 $r_millicode $m_alloc-bv $r_o7) (sparc_srai _as_3 $r_result 2 $r_result) (if (not _preserved-result_3) (sparc_slli _as_3 $r_argreg2 6 $r_tmp0) (sparc_slli _as_3 _preserved-result_3 6 $r_tmp0)) (sparc_addi _as_3 $r_tmp0 _hdr_3 $r_tmp0) (sparc_sti _as_3 $r_tmp0 0 $r_result)))) (_emit-allocate-bytevector_2 _as_1 _hdr_1 _preserved-result_1))))) 'emit-allocate-bytevector))
(let () (begin (set! emit-bytevector-fill (lambda (_as_1 _r-bytecount_1 _r-pointer_1 _r-value_1) (let ((_emit-bytevector-fill_2 0)) (begin (set! _emit-bytevector-fill_2 (lambda (_as_3 _r-bytecount_3 _r-pointer_3 _r-value_3) (let ((_l2_6 (new-label)) (_l1_6 (new-label))) (begin (sparc_label _as_3 _l2_6) (sparc_deccc _as_3 _r-bytecount_3) (sparc_bge_a _as_3 _l2_6) (sparc_stbr _as_3 _r-value_3 _r-bytecount_3 _r-pointer_3) (sparc_label _as_3 _l1_6))))) (_emit-bytevector-fill_2 _as_1 _r-bytecount_1 _r-pointer_1 _r-value_1))))) 'emit-bytevector-fill))
(let () (begin (set! emit-bytevector-like-ref! (lambda (_as_1 _rs1_1 _rs2_1 _rd_1 _fault_1 _charize?_1 _header-loaded?_1) (let ((_emit-bytevector-like-ref!_2 0)) (begin (set! _emit-bytevector-like-ref!_2 (lambda (_as_3 _rs1_3 _rs2_3 _rd_3 _fault_3 _charize?_3 _header-loaded?_3) (let ((_rs2_6 (force-hwreg! _as_3 _rs2_3 $r_argreg2))) (begin (if (not (unsafe-code)) (begin (sparc_btsti _as_3 _rs2_6 3) (sparc_bne _as_3 _fault_3) (if (not _header-loaded?_3) (sparc_ldi _as_3 _rs1_3 (- 0 $tag_bytevector-tag) $r_tmp0) (unspecified)) (sparc_srai _as_3 _rs2_6 2 $r_tmp1) (sparc_srli _as_3 $r_tmp0 8 $r_tmp0) (sparc_cmpr _as_3 $r_tmp0 $r_tmp1) (sparc_bleu _as_3 _fault_3)) (sparc_srai _as_3 _rs2_6 2 $r_tmp1)) (sparc_addi _as_3 _rs1_3 (- 4 $tag_bytevector-tag) $r_tmp0) (sparc_ldbr _as_3 $r_tmp0 $r_tmp1 $r_tmp0) (if (not _charize?_3) (sparc_slli _as_3 $r_tmp0 2 _rd_3) (begin (sparc_slli _as_3 $r_tmp0 16 _rd_3) (sparc_ori _as_3 _rd_3 $imm_character _rd_3))))))) (_emit-bytevector-like-ref!_2 _as_1 _rs1_1 _rs2_1 _rd_1 _fault_1 _charize?_1 _header-loaded?_1))))) 'emit-bytevector-like-ref!))
(let () (begin (set! emit-bytevector-like-ref/imm! (lambda (_as_1 _rs1_1 _imm_1 _rd_1 _fault_1 _charize?_1 _header-loaded?_1) (let ((_emit-bytevector-like-ref/imm!_2 0)) (begin (set! _emit-bytevector-like-ref/imm!_2 (lambda (_as_3 _rs1_3 _imm_3 _rd_3 _fault_3 _charize?_3 _header-loaded?_3) (begin (if (not (unsafe-code)) (begin (if (not _header-loaded?_3) (sparc_ldi _as_3 _rs1_3 (- 0 $tag_bytevector-tag) $r_tmp0) (unspecified)) (sparc_srli _as_3 $r_tmp0 8 $r_tmp0) (sparc_cmpi _as_3 $r_tmp0 _imm_3) (sparc_bleu_a _as_3 _fault_3) (sparc_slot _as_3)) (unspecified)) (let ((_adjusted-offset_7 (+ (- 4 $tag_bytevector-tag) _imm_3))) (begin (if (immediate-literal? _adjusted-offset_7) (sparc_ldbi _as_3 _rs1_3 _adjusted-offset_7 $r_tmp0) (begin (sparc_addi _as_3 _rs1_3 (- 4 $tag_bytevector-tag) $r_tmp0) (sparc_ldbr _as_3 $r_tmp0 _imm_3 $r_tmp0))) (if (not _charize?_3) (sparc_slli _as_3 $r_tmp0 2 _rd_3) (begin (sparc_slli _as_3 $r_tmp0 16 _rd_3) (sparc_ori _as_3 _rd_3 $imm_character _rd_3)))))))) (_emit-bytevector-like-ref/imm!_2 _as_1 _rs1_1 _imm_1 _rd_1 _fault_1 _charize?_1 _header-loaded?_1))))) 'emit-bytevector-like-ref/imm!))
(let () (begin (set! emit-bytevector-like-set! (lambda (_as_1 _idx_1 _byte_1 _fault_1 _header-loaded?_1) (let ((_emit-bytevector-like-set!_2 0)) (begin (set! _emit-bytevector-like-set!_2 (lambda (_as_3 _idx_3 _byte_3 _fault_3 _header-loaded?_3) (let ((_r1_6 (force-hwreg! _as_3 _idx_3 $r_tmp1)) (_r2_6 (force-hwreg! _as_3 _byte_3 $r_argreg3))) (begin (if (not (unsafe-code)) (begin (if (not _header-loaded?_3) (sparc_ldi _as_3 $r_result (- 0 $tag_bytevector-tag) $r_tmp0) (unspecified)) (sparc_orr _as_3 _r1_6 _r2_6 $r_tmp2) (sparc_btsti _as_3 $r_tmp2 3) (sparc_bnz _as_3 _fault_3) (sparc_srli _as_3 $r_tmp0 8 $r_tmp0) (sparc_srai _as_3 _r1_6 2 $r_tmp1) (sparc_cmpr _as_3 $r_tmp1 $r_tmp0) (sparc_bgeu _as_3 _fault_3)) (sparc_srai _as_3 _r1_6 2 $r_tmp1)) (sparc_srli _as_3 _r2_6 2 $r_tmp0) (sparc_addi _as_3 $r_result (- 4 $tag_bytevector-tag) $r_argreg2) (sparc_stbr _as_3 $r_tmp0 $r_tmp1 $r_argreg2))))) (_emit-bytevector-like-set!_2 _as_1 _idx_1 _byte_1 _fault_1 _header-loaded?_1))))) 'emit-bytevector-like-set!))
(let () (begin (set! emit-string-set! (lambda (_as_1 _rs1_1 _rs2_1 _rs3_1) (let ((_emit-string-set!_2 0)) (begin (set! _emit-string-set!_2 (lambda (_as_3 _rs1_3 _rs2_3 _rs3_3) (let* ((_rs2_6 (force-hwreg! _as_3 _rs2_3 $r_argreg2)) (_rs3_9 (force-hwreg! _as_3 _rs3_3 $r_argreg3)) (_fault_12 (if (not (unsafe-code)) (double-tagcheck-assert _as_3 $tag_bytevector-tag (+ $imm_bytevector-header $tag_string-typetag) _rs1_3 _rs2_6 _rs3_9 $ex_sset #f) (unspecified)))) (let () (begin (if (not (unsafe-code)) (begin (sparc_btsti _as_3 _rs2_6 3) (sparc_bne _as_3 _fault_12) (sparc_srli _as_3 $r_tmp0 8 $r_tmp0) (sparc_srai _as_3 _rs2_6 2 $r_tmp1) (sparc_cmpr _as_3 $r_tmp1 $r_tmp0) (sparc_bgeu _as_3 _fault_12) (sparc_andi _as_3 _rs3_9 255 $r_tmp0) (sparc_cmpi _as_3 $r_tmp0 $imm_character) (sparc_bne _as_3 _fault_12)) (sparc_srai _as_3 _rs2_6 2 $r_tmp1)) (sparc_subi _as_3 $r_tmp1 (- $tag_bytevector-tag 4) $r_tmp1) (sparc_srli _as_3 _rs3_9 16 $r_tmp0) (sparc_stbr _as_3 $r_tmp0 _rs1_3 $r_tmp1)))))) (_emit-string-set!_2 _as_1 _rs1_1 _rs2_1 _rs3_1))))) 'emit-string-set!))
(let () (begin (set! make-vector-n (lambda (_as_1 _length_1 _r_1) (let ((_make-vector-n_2 0)) (begin (set! _make-vector-n_2 (lambda (_as_3 _length_3 _r_3) (begin (sparc_jmpli _as_3 $r_millicode $m_alloc $r_o7) (sparc_set _as_3 (thefixnum (+ _length_3 1)) $r_result) (emit-immediate->register! _as_3 (+ (+ (* 256 (thefixnum _length_3)) $imm_vector-header) $tag_vector-typetag) $r_tmp0) (sparc_sti _as_3 $r_tmp0 0 $r_result) (let ((_dest_7 (force-hwreg! _as_3 _r_3 $r_argreg2))) (let () (let ((_loop_9_11_14 (unspecified))) (begin (set! _loop_9_11_14 (lambda (_i_15) (if (= _i_15 _length_3) (if #f #f (unspecified)) (begin (begin #t (sparc_sti _as_3 _dest_7 (* (+ _i_15 1) 4) $r_result)) (_loop_9_11_14 (+ _i_15 1)))))) (_loop_9_11_14 0))))) (sparc_addi _as_3 $r_result $tag_vector-tag $r_result)))) (_make-vector-n_2 _as_1 _length_1 _r_1))))) 'make-vector-n))
(let () (begin (set! emit-make-vector-like! (lambda (_as_1 _r_1 _hdr_1 _ptrtag_1) (let ((_emit-make-vector-like!_2 0)) (begin (set! _emit-make-vector-like!_2 (lambda (_as_3 _r_3 _hdr_3 _ptrtag_3) (let ((_fault_6 (emit-assert-positive-fixnum! _as_3 $r_result $ex_mkvl))) (begin (sparc_move _as_3 $r_result $r_argreg3) (sparc_addi _as_3 $r_result 4 $r_result) (sparc_jmpli _as_3 $r_millicode $m_alloci $r_o7) (if (null? _r_3) (sparc_set _as_3 $imm_null $r_argreg2) (emit-move2hwreg! _as_3 _r_3 $r_argreg2)) (sparc_slli _as_3 $r_argreg3 8 $r_tmp0) (sparc_addi _as_3 $r_tmp0 _hdr_3 $r_tmp0) (sparc_sti _as_3 $r_tmp0 0 $r_result) (sparc_addi _as_3 $r_result _ptrtag_3 $r_result))))) (_emit-make-vector-like!_2 _as_1 _r_1 _hdr_1 _ptrtag_1))))) 'emit-make-vector-like!))
(let () (begin (set! emit-vector-like-ref! (lambda (_as_1 _rs1_1 _rs2_1 _rd_1 _fault_1 _tag_1 _header-loaded?_1) (let ((_emit-vector-like-ref!_2 0)) (begin (set! _emit-vector-like-ref!_2 (lambda (_as_3 _rs1_3 _rs2_3 _rd_3 _fault_3 _tag_3 _header-loaded?_3) (let ((_index_6 (force-hwreg! _as_3 _rs2_3 $r_argreg2))) (begin (if (not (unsafe-code)) (begin (if (not _header-loaded?_3) (sparc_ldi _as_3 _rs1_3 (- 0 _tag_3) $r_tmp0) (unspecified)) (sparc_btsti _as_3 _index_6 3) (sparc_bne _as_3 _fault_3) (sparc_srai _as_3 $r_tmp0 8 $r_tmp0) (sparc_cmpr _as_3 $r_tmp0 _index_6) (sparc_bleu _as_3 _fault_3)) (unspecified)) (emit-vector-like-ref-trusted! _as_3 _rs1_3 _index_6 _rd_3 _tag_3))))) (_emit-vector-like-ref!_2 _as_1 _rs1_1 _rs2_1 _rd_1 _fault_1 _tag_1 _header-loaded?_1))))) 'emit-vector-like-ref!))
(let () (begin (set! emit-vector-like-ref-trusted! (lambda (_as_1 _rs1_1 _rs2_1 _rd_1 _tag_1) (let ((_emit-vector-like-ref-trusted!_2 0)) (begin (set! _emit-vector-like-ref-trusted!_2 (lambda (_as_3 _rs1_3 _rs2_3 _rd_3 _tag_3) (let ((_index_6 (force-hwreg! _as_3 _rs2_3 $r_argreg2))) (begin (sparc_addi _as_3 _rs1_3 (- 4 _tag_3) $r_tmp0) (sparc_ldr _as_3 $r_tmp0 _index_6 _rd_3))))) (_emit-vector-like-ref-trusted!_2 _as_1 _rs1_1 _rs2_1 _rd_1 _tag_1))))) 'emit-vector-like-ref-trusted!))
(let () (begin (set! emit-vector-like-ref/imm! (lambda (_as_1 _rs1_1 _imm_1 _rd_1 _fault_1 _tag_1 _header-loaded?_1) (let ((_emit-vector-like-ref/imm!_2 0)) (begin (set! _emit-vector-like-ref/imm!_2 (lambda (_as_3 _rs1_3 _imm_3 _rd_3 _fault_3 _tag_3 _header-loaded?_3) (begin (if (not (unsafe-code)) (begin (if (not _header-loaded?_3) (sparc_ldi _as_3 _rs1_3 (- 0 _tag_3) $r_tmp0) (unspecified)) (sparc_srai _as_3 $r_tmp0 10 $r_tmp0) (sparc_cmpi _as_3 $r_tmp0 _imm_3) (sparc_bleu _as_3 _fault_3) (sparc_nop _as_3)) (unspecified)) (emit-vector-like-ref/imm-trusted! _as_3 _rs1_3 _imm_3 _rd_3 _tag_3)))) (_emit-vector-like-ref/imm!_2 _as_1 _rs1_1 _imm_1 _rd_1 _fault_1 _tag_1 _header-loaded?_1))))) 'emit-vector-like-ref/imm!))
(let () (begin (set! emit-vector-like-ref/imm-trusted! (lambda (_as_1 _rs1_1 _imm_1 _rd_1 _tag_1) (let ((_emit-vector-like-ref/imm-trusted!_2 0)) (begin (set! _emit-vector-like-ref/imm-trusted!_2 (lambda (_as_3 _rs1_3 _imm_3 _rd_3 _tag_3) (let* ((_offset_6 (* _imm_3 4)) (_adjusted-offset_9 (+ (- 4 _tag_3) _offset_6))) (let () (if (immediate-literal? _adjusted-offset_9) (sparc_ldi _as_3 _rs1_3 _adjusted-offset_9 _rd_3) (begin (sparc_addi _as_3 _rs1_3 (- 4 _tag_3) $r_tmp0) (sparc_ldi _as_3 $r_tmp0 _offset_6 _rd_3))))))) (_emit-vector-like-ref/imm-trusted!_2 _as_1 _rs1_1 _imm_1 _rd_1 _tag_1))))) 'emit-vector-like-ref/imm-trusted!))
(let () (begin (set! emit-vector-like-set! (lambda (_as_1 _rs1_1 _rs2_1 _rs3_1 _fault_1 _tag_1 _header-loaded?_1) (let ((_emit-vector-like-set!_2 0)) (begin (set! _emit-vector-like-set!_2 (lambda (_as_3 _rs1_3 _rs2_3 _rs3_3 _fault_3 _tag_3 _header-loaded?_3) (let ((_rs2_6 (force-hwreg! _as_3 _rs2_3 $r_tmp1)) (_rs3_6 (force-hwreg! _as_3 _rs3_3 $r_argreg2))) (begin (if (not (unsafe-code)) (begin (if (not _header-loaded?_3) (sparc_ldi _as_3 $r_result (- 0 _tag_3) $r_tmp0) (unspecified)) (sparc_btsti _as_3 _rs2_6 3) (sparc_bne _as_3 _fault_3) (sparc_srai _as_3 $r_tmp0 8 $r_tmp0) (sparc_cmpr _as_3 $r_tmp0 _rs2_6) (sparc_bleu _as_3 _fault_3)) (unspecified)) (emit-vector-like-set-trusted! _as_3 _rs1_3 _rs2_6 _rs3_6 _tag_3))))) (_emit-vector-like-set!_2 _as_1 _rs1_1 _rs2_1 _rs3_1 _fault_1 _tag_1 _header-loaded?_1))))) 'emit-vector-like-set!))
(let () (begin (set! emit-vector-like-set-trusted! (lambda (_as_1 _rs1_1 _rs2_1 _rs3_1 _tag_1) (let ((_emit-vector-like-set-trusted!_2 0)) (begin (set! _emit-vector-like-set-trusted!_2 (lambda (_as_3 _rs1_3 _rs2_3 _rs3_3 _tag_3) (let ((_rs2_6 (force-hwreg! _as_3 _rs2_3 $r_tmp1)) (_rs3_6 (force-hwreg! _as_3 _rs3_3 $r_argreg2))) (begin (sparc_addr _as_3 _rs1_3 _rs2_6 $r_tmp0) (if (not (write-barrier)) (sparc_sti _as_3 _rs3_6 (- 4 _tag_3) $r_tmp0) (if (= _rs1_3 $r_result) (if (= _rs3_6 $r_argreg2) (begin (sparc_jmpli _as_3 $r_millicode $m_addtrans $r_o7) (sparc_sti _as_3 _rs3_6 (- 4 _tag_3) $r_tmp0)) (begin (sparc_sti _as_3 _rs3_6 (- 4 _tag_3) $r_tmp0) (millicode-call/1arg _as_3 $m_addtrans _rs3_6))) (if (= _rs3_6 $r_argreg2) (begin (sparc_sti _as_3 _rs3_6 (- 4 _tag_3) $r_tmp0) (millicode-call/1arg-in-result _as_3 $m_addtrans _rs1_3)) (begin (sparc_sti _as_3 _rs3_6 (- 4 _tag_3) $r_tmp0) (sparc_move _as_3 _rs1_3 $r_result) (millicode-call/1arg _as_3 $m_addtrans _rs3_6))))))))) (_emit-vector-like-set-trusted!_2 _as_1 _rs1_1 _rs2_1 _rs3_1 _tag_1))))) 'emit-vector-like-set-trusted!))
(let () (define-primop 'most-negative-fixnum (lambda (_as_1) (emit-immediate->register! _as_1 (asm:signed 2147483648) $r_result))))
(let () (define-primop 'most-positive-fixnum (lambda (_as_1) (emit-immediate->register! _as_1 (asm:signed 2147483644) $r_result))))
(let () (define-primop 'fx+ (lambda (_as_1 _rs2_1) (emit-fixnum-arithmetic _as_1 sparc_taddrcc sparc_addr $r_result _rs2_1 $r_result $ex_fx+))))
(let () (define-primop 'internal:fx+ (lambda (_as_1 _rs1_1 _rs2_1 _rd_1) (emit-fixnum-arithmetic _as_1 sparc_taddrcc sparc_addr _rs1_1 _rs2_1 _rd_1 $ex_fx+))))
(let () (define-primop 'fx- (lambda (_as_1 _rs2_1) (emit-fixnum-arithmetic _as_1 sparc_tsubrcc sparc_subr $r_result _rs2_1 $r_result $ex_fx-))))
(let () (define-primop 'internal:fx- (lambda (_as_1 _rs1_1 _rs2_1 _rd_1) (emit-fixnum-arithmetic _as_1 sparc_tsubrcc sparc_subr _rs1_1 _rs2_1 _rd_1 $ex_fx-))))
(let () (define-primop 'fx-- (lambda (_as_1) (emit-fixnum-arithmetic _as_1 sparc_tsubrcc sparc_subr $r_g0 $r_result $r_result $ex_fx--))))
(let () (define-primop 'internal:fx-- (lambda (_as_1 _rs_1 _rd_1) (emit-fixnum-arithmetic _as_1 sparc_tsubrcc sparc_subr $r_g0 _rs_1 _rd_1 $ex_fx--))))
(let () (begin (set! emit-fixnum-arithmetic (lambda (_as_1 _op-check_1 _op-nocheck_1 _rs1_1 _rs2_1 _rd_1 _exn_1) (let ((_emit-fixnum-arithmetic_2 0)) (begin (set! _emit-fixnum-arithmetic_2 (lambda (_as_3 _op-check_3 _op-nocheck_3 _rs1_3 _rs2_3 _rd_3 _exn_3) (if (unsafe-code) (let ((_rs2_6 (force-hwreg! _as_3 _rs2_3 $r_argreg2))) (_op-nocheck_3 _as_3 _rs1_3 _rs2_6 _rd_3)) (let ((_rs2_9 (force-hwreg! _as_3 _rs2_3 $r_argreg2)) (_l0_9 (new-label)) (_l1_9 (new-label))) (begin (sparc_label _as_3 _l0_9) (_op-check_3 _as_3 _rs1_3 _rs2_9 $r_tmp0) (sparc_bvc_a _as_3 _l1_9) (sparc_move _as_3 $r_tmp0 _rd_3) (if (not (= _exn_3 $ex_fx--)) (begin (if (not (= _rs1_3 $r_result)) (sparc_move _as_3 _rs1_3 $r_result) (unspecified)) (if (not (= _rs2_9 $r_argreg2)) (sparc_move _as_3 _rs2_9 $r_argreg2) (unspecified))) (if (not (= _rs2_9 $r_result)) (sparc_move _as_3 _rs2_9 $r_result) (unspecified))) (sparc_set _as_3 (thefixnum _exn_3) $r_tmp0) (millicode-call/ret _as_3 $m_exception _l0_9) (sparc_label _as_3 _l1_9)))))) (_emit-fixnum-arithmetic_2 _as_1 _op-check_1 _op-nocheck_1 _rs1_1 _rs2_1 _rd_1 _exn_1))))) 'emit-fixnum-arithmetic))
(let () (define-primop 'fx* (lambda (_as_1 _rs2_1) (emit-multiply-code _as_1 _rs2_1 #t))))
(let () (define-primop 'internal:fx+/imm (lambda (_as_1 _rs_1 _imm_1 _rd_1) (emit-fixnum-arithmetic/imm _as_1 sparc_taddicc sparc_addi _rs_1 _imm_1 _rd_1 $ex_fx+))))
(let () (define-primop 'internal:fx-/imm (lambda (_as_1 _rs_1 _imm_1 _rd_1) (emit-fixnum-arithmetic/imm _as_1 sparc_tsubicc sparc_subi _rs_1 _imm_1 _rd_1 $ex_fx-))))
(let () (begin (set! emit-fixnum-arithmetic/imm (lambda (_as_1 _op-check_1 _op-nocheck_1 _rs_1 _imm_1 _rd_1 _exn_1) (let ((_emit-fixnum-arithmetic/imm_2 0)) (begin (set! _emit-fixnum-arithmetic/imm_2 (lambda (_as_3 _op-check_3 _op-nocheck_3 _rs_3 _imm_3 _rd_3 _exn_3) (if (unsafe-code) (_op-nocheck_3 _as_3 _rs_3 (thefixnum _imm_3) _rd_3) (let ((_l0_6 (new-label)) (_l1_6 (new-label))) (begin (sparc_label _as_3 _l0_6) (_op-check_3 _as_3 _rs_3 (thefixnum _imm_3) $r_tmp0) (sparc_bvc_a _as_3 _l1_6) (sparc_move _as_3 $r_tmp0 _rd_3) (if (not (= _rs_3 $r_result)) (sparc_move _as_3 _rs_3 $r_result) (unspecified)) (sparc_set _as_3 (thefixnum _imm_3) $r_argreg2) (sparc_set _as_3 (thefixnum _exn_3) $r_tmp0) (millicode-call/ret _as_3 $m_exception _l0_6) (sparc_label _as_3 _l1_6)))))) (_emit-fixnum-arithmetic/imm_2 _as_1 _op-check_1 _op-nocheck_1 _rs_1 _imm_1 _rd_1 _exn_1))))) 'emit-fixnum-arithmetic/imm))
(let () (define-primop 'fx= (lambda (_as_1 _rs2_1) (emit-fixnum-compare _as_1 sparc_bne_a $r_result _rs2_1 $r_result $ex_fx= #f))))
(let () (define-primop 'fx< (lambda (_as_1 _rs2_1) (emit-fixnum-compare _as_1 sparc_bge_a $r_result _rs2_1 $r_result $ex_fx< #f))))
(let () (define-primop 'fx<= (lambda (_as_1 _rs2_1) (emit-fixnum-compare _as_1 sparc_bg_a $r_result _rs2_1 $r_result $ex_fx<= #f))))
(let () (define-primop 'fx> (lambda (_as_1 _rs2_1) (emit-fixnum-compare _as_1 sparc_ble_a $r_result _rs2_1 $r_result $ex_fx> #f))))
(let () (define-primop 'fx>= (lambda (_as_1 _rs2_1) (emit-fixnum-compare _as_1 sparc_bl_a $r_result _rs2_1 $r_result $ex_fx>= #f))))
(let () (define-primop 'internal:fx= (lambda (_as_1 _rs1_1 _rs2_1 _rd_1) (emit-fixnum-compare _as_1 sparc_bne_a _rs1_1 _rs2_1 _rd_1 $ex_fx= #f))))
(let () (define-primop 'internal:fx< (lambda (_as_1 _rs1_1 _rs2_1 _rd_1) (emit-fixnum-compare _as_1 sparc_bge_a _rs1_1 _rs2_1 _rd_1 $ex_fx< #f))))
(let () (define-primop 'internal:fx<= (lambda (_as_1 _rs1_1 _rs2_1 _rd_1) (emit-fixnum-compare _as_1 sparc_bg_a _rs1_1 _rs2_1 _rd_1 $ex_fx<= #f))))
(let () (define-primop 'internal:fx> (lambda (_as_1 _rs1_1 _rs2_1 _rd_1) (emit-fixnum-compare _as_1 sparc_ble_a _rs1_1 _rs2_1 _rd_1 $ex_fx> #f))))
(let () (define-primop 'internal:fx>= (lambda (_as_1 _rs1_1 _rs2_1 _rd_1) (emit-fixnum-compare _as_1 sparc_bl_a _rs1_1 _rs2_1 _rd_1 $ex_fx>= #f))))
(let () (define-primop 'fxpositive? (lambda (_as_1) (emit-fixnum-compare/imm _as_1 sparc_ble_a $r_result 0 $r_result $ex_fxpositive? #f))))
(let () (define-primop 'fxnegative? (lambda (_as_1) (emit-fixnum-compare/imm _as_1 sparc_bge_a $r_result 0 $r_result $ex_fxnegative? #f))))
(let () (define-primop 'fxzero? (lambda (_as_1) (emit-fixnum-compare/imm _as_1 sparc_bne_a $r_result 0 $r_result $ex_fxzero? #f))))
(let () (define-primop 'internal:fxpositive? (lambda (_as_1 _rs_1 _rd_1) (emit-fixnum-compare/imm _as_1 sparc_ble_a _rs_1 0 _rd_1 $ex_fxpositive? #f))))
(let () (define-primop 'internal:fxnegative? (lambda (_as_1 _rs_1 _rd_1) (emit-fixnum-compare/imm _as_1 sparc_bge_a _rs_1 0 _rd_1 $ex_fxnegative? #f))))
(let () (define-primop 'internal:fxzero? (lambda (_as_1 _rs_1 _rd_1) (emit-fixnum-compare/imm _as_1 sparc_bne_a _rs_1 0 _rd_1 $ex_fxzero? #f))))
(let () (define-primop 'internal:fx=/imm (lambda (_as_1 _rs_1 _imm_1 _rd_1) (emit-fixnum-compare/imm _as_1 sparc_bne_a _rs_1 _imm_1 _rd_1 $ex_fx= #f))))
(let () (define-primop 'internal:fx</imm (lambda (_as_1 _rs_1 _imm_1 _rd_1) (emit-fixnum-compare/imm _as_1 sparc_bge_a _rs_1 _imm_1 _rd_1 $ex_fx< #f))))
(let () (define-primop 'internal:fx<=/imm (lambda (_as_1 _rs_1 _imm_1 _rd_1) (emit-fixnum-compare/imm _as_1 sparc_bg_a _rs_1 _imm_1 _rd_1 $ex_fx<= #f))))
(let () (define-primop 'internal:fx>/imm (lambda (_as_1 _rs_1 _imm_1 _rd_1) (emit-fixnum-compare/imm _as_1 sparc_ble_a _rs_1 _imm_1 _rd_1 $ex_fx> #f))))
(let () (define-primop 'internal:fx>=/imm (lambda (_as_1 _rs_1 _imm_1 _rd_1) (emit-fixnum-compare/imm _as_1 sparc_bl_a _rs_1 _imm_1 _rd_1 $ex_fx>= #f))))
(let () (define-primop 'internal:branchf-fx= (lambda (_as_1 _rs1_1 _rs2_1 _l_1) (emit-fixnum-compare _as_1 sparc_bne_a _rs1_1 _rs2_1 #f $ex_fx= _l_1))))
(let () (define-primop 'internal:branchf-fx< (lambda (_as_1 _rs1_1 _rs2_1 _l_1) (emit-fixnum-compare _as_1 sparc_bge_a _rs1_1 _rs2_1 #f $ex_fx< _l_1))))
(let () (define-primop 'internal:branchf-fx<= (lambda (_as_1 _rs1_1 _rs2_1 _l_1) (emit-fixnum-compare _as_1 sparc_bg_a _rs1_1 _rs2_1 #f $ex_fx<= _l_1))))
(let () (define-primop 'internal:branchf-fx> (lambda (_as_1 _rs1_1 _rs2_1 _l_1) (emit-fixnum-compare _as_1 sparc_ble_a _rs1_1 _rs2_1 #f $ex_fx> _l_1))))
(let () (define-primop 'internal:branchf-fx>= (lambda (_as_1 _rs1_1 _rs2_1 _l_1) (emit-fixnum-compare _as_1 sparc_bl_a _rs1_1 _rs2_1 #f $ex_fx>= _l_1))))
(let () (define-primop 'internal:branchf-fxpositive? (lambda (_as_1 _rs1_1 _l_1) (emit-fixnum-compare/imm _as_1 sparc_ble_a _rs1_1 0 #f $ex_fxpositive? _l_1))))
(let () (define-primop 'internal:branchf-fxnegative? (lambda (_as_1 _rs1_1 _l_1) (emit-fixnum-compare/imm _as_1 sparc_bge_a _rs1_1 0 #f $ex_fxnegative? _l_1))))
(let () (define-primop 'internal:branchf-fxzero? (lambda (_as_1 _rs1_1 _l_1) (emit-fixnum-compare/imm _as_1 sparc_bne_a _rs1_1 0 #f $ex_fxzero? _l_1))))
(let () (define-primop 'internal:branchf-fx=/imm (lambda (_as_1 _rs_1 _imm_1 _l_1) (emit-fixnum-compare/imm _as_1 sparc_bne_a _rs_1 _imm_1 #f $ex_fx= _l_1))))
(let () (define-primop 'internal:branchf-fx</imm (lambda (_as_1 _rs_1 _imm_1 _l_1) (emit-fixnum-compare/imm _as_1 sparc_bge_a _rs_1 _imm_1 #f $ex_fx< _l_1))))
(let () (define-primop 'internal:branchf-fx<=/imm (lambda (_as_1 _rs_1 _imm_1 _l_1) (emit-fixnum-compare/imm _as_1 sparc_bg_a _rs_1 _imm_1 #f $ex_fx<= _l_1))))
(let () (define-primop 'internal:branchf-fx>/imm (lambda (_as_1 _rs_1 _imm_1 _l_1) (emit-fixnum-compare/imm _as_1 sparc_ble_a _rs_1 _imm_1 #f $ex_fx> _l_1))))
(let () (define-primop 'internal:branchf-fx>=/imm (lambda (_as_1 _rs_1 _imm_1 _l_1) (emit-fixnum-compare/imm _as_1 sparc_bl_a _rs_1 _imm_1 #f $ex_fx>= _l_1))))
(let () (define-primop '=:fix:fix (lambda (_as_1 _rs2_1) (emit-fixnum-compare-trusted _as_1 sparc_bne_a $r_result _rs2_1 $r_result #f))))
(let () (define-primop '<:fix:fix (lambda (_as_1 _rs2_1) (emit-fixnum-compare-trusted _as_1 sparc_bge_a $r_result _rs2_1 $r_result #f))))
(let () (define-primop '<=:fix:fix (lambda (_as_1 _rs2_1) (emit-fixnum-compare-trusted _as_1 sparc_bg_a $r_result _rs2_1 $r_result #f))))
(let () (define-primop '>:fix:fix (lambda (_as_1 _rs2_1) (emit-fixnum-compare-trusted _as_1 sparc_ble_a $r_result _rs2_1 $r_result #f))))
(let () (define-primop '>=:fix:fix (lambda (_as_1 _rs2_1) (emit-fixnum-compare-trusted _as_1 sparc_bl_a $r_result _rs2_1 $r_result #f))))
(let () (define-primop 'internal:=:fix:fix (lambda (_as_1 _rs1_1 _rs2_1 _rd_1) (emit-fixnum-compare-trusted _as_1 sparc_bne_a _rs1_1 _rs2_1 _rd_1 #f))))
(let () (define-primop 'internal:<:fix:fix (lambda (_as_1 _rs1_1 _rs2_1 _rd_1) (emit-fixnum-compare-trusted _as_1 sparc_bge_a _rs1_1 _rs2_1 _rd_1 #f))))
(let () (define-primop 'internal:<=:fix:fix (lambda (_as_1 _rs1_1 _rs2_1 _rd_1) (emit-fixnum-compare-trusted _as_1 sparc_bg_a _rs1_1 _rs2_1 _rd_1 #f))))
(let () (define-primop 'internal:>:fix:fix (lambda (_as_1 _rs1_1 _rs2_1 _rd_1) (emit-fixnum-compare-trusted _as_1 sparc_ble_a _rs1_1 _rs2_1 _rd_1 #f))))
(let () (define-primop 'internal:>=:fix:fix (lambda (_as_1 _rs1_1 _rs2_1 _rd_1) (emit-fixnum-compare-trusted _as_1 sparc_bl_a _rs1_1 _rs2_1 _rd_1 #f))))
(let () (define-primop 'internal:=:fix:fix/imm (lambda (_as_1 _rs_1 _imm_1 _rd_1) (emit-fixnum-compare/imm-trusted _as_1 sparc_bne_a _rs_1 _imm_1 _rd_1 #f))))
(let () (define-primop 'internal:<:fix:fix/imm (lambda (_as_1 _rs_1 _imm_1 _rd_1) (emit-fixnum-compare/imm-trusted _as_1 sparc_bge_a _rs_1 _imm_1 _rd_1 #f))))
(let () (define-primop 'internal:<=:fix:fix/imm (lambda (_as_1 _rs_1 _imm_1 _rd_1) (emit-fixnum-compare/imm-trusted _as_1 sparc_bg_a _rs_1 _imm_1 _rd_1 #f))))
(let () (define-primop 'internal:>:fix:fix/imm (lambda (_as_1 _rs_1 _imm_1 _rd_1) (emit-fixnum-compare/imm-trusted _as_1 sparc_ble_a _rs_1 _imm_1 _rd_1 #f))))
(let () (define-primop 'internal:>=:fix:fix/imm (lambda (_as_1 _rs_1 _imm_1 _rd_1) (emit-fixnum-compare/imm-trusted _as_1 sparc_bl_a _rs_1 _imm_1 _rd_1 #f))))
(let () (define-primop 'internal:branchf-=:fix:fix (lambda (_as_1 _rs1_1 _rs2_1 _l_1) (emit-fixnum-compare-trusted _as_1 sparc_bne_a _rs1_1 _rs2_1 #f _l_1))))
(let () (define-primop 'internal:branchf-<:fix:fix (lambda (_as_1 _rs1_1 _rs2_1 _l_1) (emit-fixnum-compare-trusted _as_1 sparc_bge_a _rs1_1 _rs2_1 #f _l_1))))
(let () (define-primop 'internal:branchf-<=:fix:fix (lambda (_as_1 _rs1_1 _rs2_1 _l_1) (emit-fixnum-compare-trusted _as_1 sparc_bg_a _rs1_1 _rs2_1 #f _l_1))))
(let () (define-primop 'internal:branchf->:fix:fix (lambda (_as_1 _rs1_1 _rs2_1 _l_1) (emit-fixnum-compare-trusted _as_1 sparc_ble_a _rs1_1 _rs2_1 #f _l_1))))
(let () (define-primop 'internal:branchf->=:fix:fix (lambda (_as_1 _rs1_1 _rs2_1 _l_1) (emit-fixnum-compare-trusted _as_1 sparc_bl_a _rs1_1 _rs2_1 #f _l_1))))
(let () (define-primop 'internal:branchf-=:fix:fix/imm (lambda (_as_1 _rs_1 _imm_1 _l_1) (emit-fixnum-compare/imm-trusted _as_1 sparc_bne_a _rs_1 _imm_1 #f _l_1))))
(let () (define-primop 'internal:branchf-<:fix:fix/imm (lambda (_as_1 _rs_1 _imm_1 _l_1) (emit-fixnum-compare/imm-trusted _as_1 sparc_bge_a _rs_1 _imm_1 #f _l_1))))
(let () (define-primop 'internal:branchf-<=:fix:fix/imm (lambda (_as_1 _rs_1 _imm_1 _l_1) (emit-fixnum-compare/imm-trusted _as_1 sparc_bg_a _rs_1 _imm_1 #f _l_1))))
(let () (define-primop 'internal:branchf->:fix:fix/imm (lambda (_as_1 _rs_1 _imm_1 _l_1) (emit-fixnum-compare/imm-trusted _as_1 sparc_ble_a _rs_1 _imm_1 #f _l_1))))
(let () (define-primop 'internal:branchf->=:fix:fix/imm (lambda (_as_1 _rs_1 _imm_1 _l_1) (emit-fixnum-compare/imm-trusted _as_1 sparc_bl_a _rs_1 _imm_1 #f _l_1))))
(let () (define-primop 'internal:check-range (lambda (_as_1 _src1_1 _src2_1 _l1_1 _livregs_1) (let ((_src2_4 (force-hwreg! _as_1 _src2_1 $r_argreg2))) (emit-fixnum-compare-check _as_1 _src2_4 _src1_1 sparc_bleu _l1_1 _livregs_1)))))
(let () (define-primop 'internal:check-=:fix:fix (lambda (_as_1 _src1_1 _src2_1 _l1_1 _liveregs_1) (emit-fixnum-compare-check _as_1 _src1_1 _src2_1 sparc_bne _l1_1 _liveregs_1))))
(let () (define-primop 'internal:check-<:fix:fix (lambda (_as_1 _src1_1 _src2_1 _l1_1 _liveregs_1) (emit-fixnum-compare-check _as_1 _src1_1 _src2_1 sparc_bge _l1_1 _liveregs_1))))
(let () (define-primop 'internal:check-<=:fix:fix (lambda (_as_1 _src1_1 _src2_1 _l1_1 _liveregs_1) (emit-fixnum-compare-check _as_1 _src1_1 _src2_1 sparc_bg _l1_1 _liveregs_1))))
(let () (define-primop 'internal:check->:fix:fix (lambda (_as_1 _src1_1 _src2_1 _l1_1 _liveregs_1) (emit-fixnum-compare-check _as_1 _src1_1 _src2_1 sparc_ble _l1_1 _liveregs_1))))
(let () (define-primop 'internal:check->=:fix:fix (lambda (_as_1 _src1_1 _src2_1 _l1_1 _liveregs_1) (emit-fixnum-compare-check _as_1 _src1_1 _src2_1 sparc_bl _l1_1 _liveregs_1))))
(let () (define-primop 'internal:check-=:fix:fix/imm (lambda (_as_1 _src1_1 _imm_1 _l1_1 _liveregs_1) (emit-fixnum-compare/imm-check _as_1 _src1_1 _imm_1 sparc_bne _l1_1 _liveregs_1))))
(let () (define-primop 'internal:check-<:fix:fix/imm (lambda (_as_1 _src1_1 _imm_1 _l1_1 _liveregs_1) (emit-fixnum-compare/imm-check _as_1 _src1_1 _imm_1 sparc_bge _l1_1 _liveregs_1))))
(let () (define-primop 'internal:check-<=:fix:fix/imm (lambda (_as_1 _src1_1 _imm_1 _l1_1 _liveregs_1) (emit-fixnum-compare/imm-check _as_1 _src1_1 _imm_1 sparc_bg _l1_1 _liveregs_1))))
(let () (define-primop 'internal:check->:fix:fix/imm (lambda (_as_1 _src1_1 _imm_1 _l1_1 _liveregs_1) (emit-fixnum-compare/imm-check _as_1 _src1_1 _imm_1 sparc_ble _l1_1 _liveregs_1))))
(let () (define-primop 'internal:check->=:fix:fix/imm (lambda (_as_1 _src1_1 _imm_1 _l1_1 _liveregs_1) (emit-fixnum-compare/imm-check _as_1 _src1_1 _imm_1 sparc_bl _l1_1 _liveregs_1))))
(let () (begin (set! emit-fixnum-compare (lambda (_as_1 _branchf_a_1 _rs1_1 _rs2_1 _rd_1 _exn_1 _target_1) (let ((_emit-fixnum-compare_2 0)) (begin (set! _emit-fixnum-compare_2 (lambda (_as_3 _branchf_a_3 _rs1_3 _rs2_3 _rd_3 _exn_3 _target_3) (if (unsafe-code) (emit-fixnum-compare-trusted _as_3 _branchf_a_3 _rs1_3 _rs2_3 _rd_3 _target_3) (let ((_rs2_6 (force-hwreg! _as_3 _rs2_3 $r_argreg2)) (_l0_6 (new-label)) (_l1_6 (new-label))) (begin (sparc_label _as_3 _l0_6) (sparc_orr _as_3 _rs1_3 _rs2_6 $r_tmp0) (sparc_btsti _as_3 $r_tmp0 3) (sparc_be_a _as_3 _l1_6) (sparc_cmpr _as_3 _rs1_3 _rs2_6) (if (not (= _rs1_3 $r_result)) (sparc_move _as_3 _rs1_3 $r_result) (unspecified)) (if (not (= _rs2_6 $r_argreg2)) (sparc_move _as_3 _rs2_6 $r_argreg2) (unspecified)) (sparc_set _as_3 (thefixnum _exn_3) $r_tmp0) (millicode-call/ret _as_3 $m_exception _l0_6) (sparc_label _as_3 _l1_6) (emit-evaluate-cc! _as_3 _branchf_a_3 _rd_3 _target_3)))))) (_emit-fixnum-compare_2 _as_1 _branchf_a_1 _rs1_1 _rs2_1 _rd_1 _exn_1 _target_1))))) 'emit-fixnum-compare))
(let () (begin (set! emit-fixnum-compare-trusted (lambda (_as_1 _branchf_a_1 _rs1_1 _rs2_1 _rd_1 _target_1) (let ((_emit-fixnum-compare-trusted_2 0)) (begin (set! _emit-fixnum-compare-trusted_2 (lambda (_as_3 _branchf_a_3 _rs1_3 _rs2_3 _rd_3 _target_3) (let ((_rs2_6 (force-hwreg! _as_3 _rs2_3 $r_argreg2))) (begin (sparc_cmpr _as_3 _rs1_3 _rs2_6) (emit-evaluate-cc! _as_3 _branchf_a_3 _rd_3 _target_3))))) (_emit-fixnum-compare-trusted_2 _as_1 _branchf_a_1 _rs1_1 _rs2_1 _rd_1 _target_1))))) 'emit-fixnum-compare-trusted))
(let () (begin (set! emit-fixnum-compare/imm (lambda (_as_1 _branchf_a_1 _rs_1 _imm_1 _rd_1 _exn_1 _target_1) (let ((_emit-fixnum-compare/imm_2 0)) (begin (set! _emit-fixnum-compare/imm_2 (lambda (_as_3 _branchf_a_3 _rs_3 _imm_3 _rd_3 _exn_3 _target_3) (begin (if (unsafe-code) (emit-fixnum-compare/imm-trusted _as_3 _branchf_a_3 _rs_3 _imm_3 _rd_3 _target_3) (let ((_l0_6 (new-label)) (_l1_6 (new-label))) (begin (sparc_label _as_3 _l0_6) (sparc_btsti _as_3 _rs_3 3) (sparc_be_a _as_3 _l1_6) (sparc_cmpi _as_3 _rs_3 (thefixnum _imm_3)) (if (not (= _rs_3 $r_result)) (sparc_move _as_3 _rs_3 $r_result) (unspecified)) (sparc_set _as_3 (thefixnum _imm_3) $r_argreg2) (sparc_set _as_3 (thefixnum _exn_3) $r_tmp0) (millicode-call/ret _as_3 $m_exception _l0_6) (sparc_label _as_3 _l1_6)))) (emit-evaluate-cc! _as_3 _branchf_a_3 _rd_3 _target_3)))) (_emit-fixnum-compare/imm_2 _as_1 _branchf_a_1 _rs_1 _imm_1 _rd_1 _exn_1 _target_1))))) 'emit-fixnum-compare/imm))
(let () (begin (set! emit-fixnum-compare/imm-trusted (lambda (_as_1 _branchf_a_1 _rs_1 _imm_1 _rd_1 _target_1) (let ((_emit-fixnum-compare/imm-trusted_2 0)) (begin (set! _emit-fixnum-compare/imm-trusted_2 (lambda (_as_3 _branchf_a_3 _rs_3 _imm_3 _rd_3 _target_3) (begin (sparc_cmpi _as_3 _rs_3 (thefixnum _imm_3)) (emit-evaluate-cc! _as_3 _branchf_a_3 _rd_3 _target_3)))) (_emit-fixnum-compare/imm-trusted_2 _as_1 _branchf_a_1 _rs_1 _imm_1 _rd_1 _target_1))))) 'emit-fixnum-compare/imm-trusted))
(let () (begin (set! emit-fixnum-compare-check (lambda (_as_1 _src1_1 _src2_1 _branch-bad_1 _l1_1 _liveregs_1) (let ((_emit-fixnum-compare-check_2 0)) (begin (set! _emit-fixnum-compare-check_2 (lambda (_as_3 _src1_3 _src2_3 _branch-bad_3 _l1_3 _liveregs_3) (begin (internal-primop-invariant1 'emit-fixnum-compare-check _src1_3) (let ((_src2_6 (force-hwreg! _as_3 _src2_3 $r_argreg2))) (begin (sparc_cmpr _as_3 _src1_3 _src2_6) (emit-checkcc! _as_3 _branch-bad_3 _l1_3 _liveregs_3)))))) (_emit-fixnum-compare-check_2 _as_1 _src1_1 _src2_1 _branch-bad_1 _l1_1 _liveregs_1))))) 'emit-fixnum-compare-check))
(let () (begin (set! emit-fixnum-compare/imm-check (lambda (_as_1 _src1_1 _imm_1 _branch-bad_1 _l1_1 _liveregs_1) (let ((_emit-fixnum-compare/imm-check_2 0)) (begin (set! _emit-fixnum-compare/imm-check_2 (lambda (_as_3 _src1_3 _imm_3 _branch-bad_3 _l1_3 _liveregs_3) (begin (internal-primop-invariant1 'emit-fixnum-compare/imm-check _src1_3) (sparc_cmpi _as_3 _src1_3 _imm_3) (emit-checkcc! _as_3 _branch-bad_3 _l1_3 _liveregs_3)))) (_emit-fixnum-compare/imm-check_2 _as_1 _src1_1 _imm_1 _branch-bad_1 _l1_1 _liveregs_1))))) 'emit-fixnum-compare/imm-check))
(let () (begin (set! short-effective-addresses (make-twobit-flag 'short-effective-addresses)) 'short-effective-addresses))
(let () (begin (set! runtime-safety-checking (make-twobit-flag 'runtime-safety-checking)) 'runtime-safety-checking))
(let () (begin (set! catch-undefined-globals (make-twobit-flag 'catch-undefined-globals)) 'catch-undefined-globals))
(let () (begin (set! inline-allocation (make-twobit-flag 'inline-allocation)) 'inline-allocation))
(let () (begin (set! write-barrier (make-twobit-flag 'write-barrier)) 'write-barrier))
(let () (begin (set! peephole-optimization (make-twobit-flag 'peephole-optimization)) 'peephole-optimization))
(let () (begin (set! single-stepping (make-twobit-flag 'single-stepping)) 'single-stepping))
(let () (begin (set! fill-delay-slots (make-twobit-flag 'fill-delay-slots)) 'fill-delay-slots))
(let () (begin (set! unsafe-code (lambda _args_1 (if (null? _args_1) (not (runtime-safety-checking)) (runtime-safety-checking (not (let ((_x_2_5 _args_1)) (begin (_check! (pair? _x_2_5) 0 _x_2_5) (car:pair _x_2_5)))))))) 'unsafe-code))
(let () (begin (set! display-assembler-flags (lambda (_which_1) (let ((_display-assembler-flags_2 0)) (begin (set! _display-assembler-flags_2 (lambda (_which_3) (let ((_temp_4_7 _which_3)) (if (memv _temp_4_7 '(debugging)) (display-twobit-flag single-stepping) (if (memv _temp_4_7 '(safety)) (begin (display-twobit-flag write-barrier) (display-twobit-flag runtime-safety-checking) (if (runtime-safety-checking) (begin (display "  ") (display-twobit-flag catch-undefined-globals)) (unspecified))) (if (memv _temp_4_7 '(optimization)) (begin (display-twobit-flag peephole-optimization) (display-twobit-flag inline-allocation) (display-twobit-flag fill-delay-slots)) #t)))))) (_display-assembler-flags_2 _which_1))))) 'display-assembler-flags))
(let () (begin (set! set-assembler-flags! (lambda (_mode_1) (let ((_set-assembler-flags!_2 0)) (begin (set! _set-assembler-flags!_2 (lambda (_mode_3) (let ((_temp_4_7 _mode_3)) (if (memv _temp_4_7 '(no-optimization)) (begin (_set-assembler-flags!_2 'standard) (peephole-optimization #f) (fill-delay-slots #f)) (if (memv _temp_4_7 '(standard)) (begin (short-effective-addresses #t) (catch-undefined-globals #t) (inline-allocation #f) (peephole-optimization #t) (runtime-safety-checking #t) (write-barrier #t) (single-stepping #f) (fill-delay-slots #t)) (if (memv _temp_4_7 '(fast-safe default)) (begin (_set-assembler-flags!_2 'standard) (inline-allocation #t)) (if (memv _temp_4_7 '(fast-unsafe)) (begin (_set-assembler-flags!_2 'fast-safe) (catch-undefined-globals #f) (runtime-safety-checking #f)) (error "set-assembler-flags!: unknown mode " _mode_3)))))))) (_set-assembler-flags!_2 _mode_1))))) 'set-assembler-flags!))
(let () (set-assembler-flags! 'default))
(let () (begin (set! disassemble-codevector (lambda (_cv_1) (let ((_disassemble-codevector_2 0)) (begin (set! _disassemble-codevector_2 (lambda (_cv_3) (let ((_loop_4 (unspecified))) (begin (set! _loop_4 (lambda (_addr_5 _ilist_5) (if (< _addr_5 0) _ilist_5 (_loop_4 (- _addr_5 4) (cons (disassemble-instruction (bytevector-word-ref _cv_3 _addr_5) _addr_5) _ilist_5))))) (_loop_4 (- (bytevector-length _cv_3) 4) '()))))) (_disassemble-codevector_2 _cv_1))))) 'disassemble-codevector))
(let () (begin (set! disassemble-instruction (undefined)) 'disassemble-instruction))
(let () (begin (set! *asm-annul* 1) '*asm-annul*))
(let () (begin (set! *asm-immed* 2) '*asm-immed*))
(let () (begin (set! *asm-store* 4) '*asm-store*))
(let () (begin (set! *asm-load* 8) '*asm-load*))
(let () (begin (set! *asm-branch* 16) '*asm-branch*))
(let () (begin (set! *asm-freg* 32) '*asm-freg*))
(let () (begin (set! *asm-fpop* 64) '*asm-fpop*))
(let () (begin (set! *asm-no-op2* 128) '*asm-no-op2*))
(let () (begin (set! *asm-no-op3* 256) '*asm-no-op3*))
(let () (begin (set! *asm-bits* (_cons (_cons 'a *asm-annul*) (_cons (_cons 'i *asm-immed*) (_cons (_cons 's *asm-store*) (_cons (_cons 'l *asm-load*) (_cons (_cons 'b *asm-branch*) (_cons (_cons 'f *asm-freg*) (_cons (_cons 'fpop *asm-fpop*) (_cons (_cons 'no-op2 *asm-no-op2*) (_cons (_cons 'no-op3 *asm-no-op3*) '())))))))))) '*asm-bits*))
(let () (begin (set! *asm-mnemonic-table* '()) '*asm-mnemonic-table*))
(let () (begin (set! mnemonic (let ((_n_3 0)) (lambda (_name_4 _ _rest_4) (let* ((_probe_7 (assq _name_4 *asm-mnemonic-table*)) (_code_10 (* 1024 (if _probe_7 (let ((_x_42_45 _probe_7)) (begin (_check! (pair? _x_42_45) 1 _x_42_45) (cdr:pair _x_42_45))) (let ((_code_48 _n_3)) (begin (set! _n_3 (+ _n_3 1)) (set! *asm-mnemonic-table* (cons (cons _name_4 _code_48) *asm-mnemonic-table*)) _code_48)))))) (let () (begin (let () (let ((_loop_19_21_24 (unspecified))) (begin (set! _loop_19_21_24 (lambda (_y1_14_15_25) (if (null? _y1_14_15_25) (if #f #f (unspecified)) (begin (begin #t (let ((_x_29 (let ((_x_34_37 _y1_14_15_25)) (begin (_check! (pair? _x_34_37) 0 _x_34_37) (car:pair _x_34_37))))) (set! _code_10 (+ _code_10 (let ((_x_30_33 (assq _x_29 *asm-bits*))) (begin (_check! (pair? _x_30_33) 1 _x_30_33) (cdr:pair _x_30_33))))))) (_loop_19_21_24 (let ((_x_38_41 _y1_14_15_25)) (begin (_check! (pair? _x_38_41) 1 _x_38_41) (cdr:pair _x_38_41)))))))) (_loop_19_21_24 _rest_4)))) _code_10)))))) 'mnemonic))
(let () (begin (set! mnemonic:name (lambda (_mnemonic_1) (let ((_mnemonic:name_2 0)) (begin (set! _mnemonic:name_2 (lambda (_mnemonic_3) (let* ((_mnemonic_6 (quotient _mnemonic_3 1024)) (_t_9 *asm-mnemonic-table*)) (let () (let ((_loop_12 (unspecified))) (begin (set! _loop_12 (lambda (_t_13) (if (null? _t_13) #f (if (= (let ((_x_17_20 (let ((_x_21_24 _t_13)) (begin (_check! (pair? _x_21_24) 0 _x_21_24) (car:pair _x_21_24))))) (begin (_check! (pair? _x_17_20) 1 _x_17_20) (cdr:pair _x_17_20))) _mnemonic_6) (let ((_x_26_29 (let ((_x_30_33 _t_13)) (begin (_check! (pair? _x_30_33) 0 _x_30_33) (car:pair _x_30_33))))) (begin (_check! (pair? _x_26_29) 0 _x_26_29) (car:pair _x_26_29))) (_loop_12 (let ((_x_35_38 _t_13)) (begin (_check! (pair? _x_35_38) 1 _x_35_38) (cdr:pair _x_35_38)))))))) (_loop_12 _t_9))))))) (_mnemonic:name_2 _mnemonic_1))))) 'mnemonic:name))
(let () (begin (set! mnemonic=? (lambda (_m_1 _name_1) (let ((_mnemonic=?_2 0)) (begin (set! _mnemonic=?_2 (lambda (_m_3 _name_3) (= (quotient _m_3 1024) (quotient (mnemonic _name_3) 1024)))) (_mnemonic=?_2 _m_1 _name_1))))) 'mnemonic=?))
(let () (begin (set! mnemonic:test (lambda (_bit_1) (let ((_mnemonic:test_2 0)) (begin (set! _mnemonic:test_2 (lambda (_bit_3) (lambda (_mnemonic_4) (not (zero? (logand _mnemonic_4 _bit_3)))))) (_mnemonic:test_2 _bit_1))))) 'mnemonic:test))
(let () (begin (set! mnemonic:test-not (lambda (_bit_1) (let ((_mnemonic:test-not_2 0)) (begin (set! _mnemonic:test-not_2 (lambda (_bit_3) (lambda (_mnemonic_4) (zero? (logand _mnemonic_4 _bit_3))))) (_mnemonic:test-not_2 _bit_1))))) 'mnemonic:test-not))
(let () (begin (set! mnemonic:annul? (mnemonic:test *asm-annul*)) 'mnemonic:annul?))
(let () (begin (set! mnemonic:immediate? (mnemonic:test *asm-immed*)) 'mnemonic:immediate?))
(let () (begin (set! mnemonic:store? (mnemonic:test *asm-store*)) 'mnemonic:store?))
(let () (begin (set! mnemonic:load? (mnemonic:test *asm-load*)) 'mnemonic:load?))
(let () (begin (set! mnemonic:branch? (mnemonic:test *asm-branch*)) 'mnemonic:branch?))
(let () (begin (set! mnemonic:freg? (mnemonic:test *asm-freg*)) 'mnemonic:freg?))
(let () (begin (set! mnemonic:fpop? (mnemonic:test *asm-fpop*)) 'mnemonic:fpop?))
(let () (begin (set! mnemonic:op2? (mnemonic:test-not *asm-no-op2*)) 'mnemonic:op2?))
(let () (begin (set! mnemonic:op3? (mnemonic:test-not *asm-no-op3*)) 'mnemonic:op3?))
(let () (let () (let ((_fpop-field_4 (unspecified)) (_imm30field_4 (unspecified)) (_imm22field_4 (unspecified)) (_imm13field_4 (unspecified)) (_rdfield_4 (unspecified)) (_rs1field_4 (unspecified)) (_rs2field_4 (unspecified)) (_ifield_4 (unspecified)) (_op3field_4 (unspecified)) (_op2field_4 (unspecified)) (_fpop-instruction_4 (unspecified)) (_nice-instruction_4 (unspecified)) (_class01_4 (unspecified)) (_fpop-names_4 (unspecified)) (_class11_4 (unspecified)) (_class10_4 (unspecified)) (_class00_4 (unspecified)) (_two^32_4 (unspecified)) (_two^30_4 (unspecified)) (_two^29_4 (unspecified)) (_two^25_4 (unspecified)) (_two^24_4 (unspecified)) (_two^22_4 (unspecified)) (_two^21_4 (unspecified)) (_two^19_4 (unspecified)) (_two^16_4 (unspecified)) (_two^14_4 (unspecified)) (_two^13_4 (unspecified)) (_two^12_4 (unspecified)) (_two^9_4 (unspecified)) (_two^8_4 (unspecified)) (_two^6_4 (unspecified)) (_two^5_4 (unspecified)) (_two^3_4 (unspecified))) (begin (set! _fpop-field_4 (lambda (_instr_5) (remainder (quotient _instr_5 _two^5_4) _two^9_4))) (set! _imm30field_4 (lambda (_instr_6) (let ((_x_9 (remainder _instr_6 _two^30_4))) (if (not (zero? (quotient _x_9 _two^29_4))) (- _x_9 _two^30_4) _x_9)))) (set! _imm22field_4 (lambda (_instr_10) (let ((_x_13 (remainder _instr_10 _two^22_4))) (if (not (zero? (quotient _x_13 _two^21_4))) (- _x_13 _two^22_4) _x_13)))) (set! _imm13field_4 (lambda (_instr_14) (let ((_x_17 (remainder _instr_14 _two^13_4))) (if (not (zero? (quotient _x_17 _two^12_4))) (- _x_17 _two^13_4) _x_17)))) (set! _rdfield_4 (lambda (_instr_18) (remainder (quotient _instr_18 _two^25_4) _two^5_4))) (set! _rs1field_4 (lambda (_instr_19) (remainder (quotient _instr_19 _two^14_4) _two^5_4))) (set! _rs2field_4 (lambda (_instr_20) (remainder _instr_20 _two^5_4))) (set! _ifield_4 (lambda (_instr_21) (remainder (quotient _instr_21 _two^13_4) 2))) (set! _op3field_4 (lambda (_instr_22) (remainder (quotient _instr_22 _two^19_4) _two^6_4))) (set! _op2field_4 (lambda (_instr_23) (remainder (quotient _instr_23 _two^22_4) _two^3_4))) (set! _fpop-instruction_4 (lambda (_ip_24 _instr_24) (let ((_rd_27 (_rdfield_4 _instr_24)) (_rs1_27 (_rs1field_4 _instr_24)) (_rs2_27 (_rs2field_4 _instr_24)) (_fpop_27 (_fpop-field_4 _instr_24))) (_cons (let ((_x_69_72 (assv _fpop_27 _fpop-names_4))) (begin (_check! (pair? _x_69_72) 1 _x_69_72) (cdr:pair _x_69_72))) (_cons _rs1_27 (_cons _rs2_27 (_cons _rd_27 '()))))))) (set! _nice-instruction_4 (lambda (_op3-table_74 _ip_74 _instr_74) (let* ((_op3_77 (_op3field_4 _instr_74)) (_imm_80 (_ifield_4 _instr_74)) (_rd_83 (_rdfield_4 _instr_74)) (_rs1_86 (_rs1field_4 _instr_74)) (_src2_89 (if (zero? _imm_80) (_rs2field_4 _instr_74) (_imm13field_4 _instr_74)))) (let () (let ((_op_95 ((if (zero? _imm_80) car cadr) (let ((_v_137_140 _op3-table_74) (_i_137_140 _op3_77)) (begin (_check! (fixnum? _i_137_140) 40 _v_137_140 _i_137_140) (_check! (vector? _v_137_140) 40 _v_137_140 _i_137_140) (_check! (<:fix:fix _i_137_140 (vector-length:vec _v_137_140)) 40 _v_137_140 _i_137_140) (_check! (>=:fix:fix _i_137_140 0) 40 _v_137_140 _i_137_140) (vector-ref:trusted _v_137_140 _i_137_140)))))) (_cons _op_95 (_cons _rs1_86 (_cons _src2_89 (_cons _rd_83 '()))))))))) (set! _class01_4 (lambda (_ip_141 _instr_141) (_cons (mnemonic 'call) (_cons (* 4 (_imm30field_4 _instr_141)) '())))) (set! _fpop-names_4 (_cons (_cons 1 (mnemonic 'fmovs 'fpop 'no-op2)) (_cons (_cons 5 (mnemonic 'fnegs 'fpop 'no-op2)) (_cons (_cons 9 (mnemonic 'fabss 'fpop 'no-op2)) (_cons (_cons 66 (mnemonic 'faddd 'fpop)) (_cons (_cons 70 (mnemonic 'fsubd 'fpop)) (_cons (_cons 74 (mnemonic 'fmuld 'fpop)) (_cons (_cons 78 (mnemonic 'fdivd 'fpop)) (_cons (_cons 82 (mnemonic 'fcmpd 'fpop 'no-op3)) '()))))))))) (set! _class11_4 (let ((_op3-table_316 (_list->vector (_cons (_cons (mnemonic 'ld 'l) (_cons (mnemonic 'ld 'i 'l) '())) (_cons (_cons (mnemonic 'ldb 'l) (_cons (mnemonic 'ldb 'i 'l) '())) (_cons (_cons (mnemonic 'ldh 'l) (_cons (mnemonic 'ldh 'i 'l) '())) (_cons (_cons (mnemonic 'ldd 'l) (_cons (mnemonic 'ldd 'i 'l) '())) (_cons (_cons (mnemonic 'st 's) (_cons (mnemonic 'st 'i 's) '())) (_cons (_cons (mnemonic 'stb 's) (_cons (mnemonic 'stb 'i 's) '())) (_cons (_cons (mnemonic 'sth 's) (_cons (mnemonic 'sth 'i 's) '())) (_cons (_cons (mnemonic 'std 's) (_cons (mnemonic 'std 'i 's) '())) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons (_cons (mnemonic 'ldf 'f 'l) (_cons (mnemonic 'ldf 'i 'f 'l) '())) (_cons '(0 0) (_cons '(0 0) (_cons (_cons (mnemonic 'lddf 'f 'l) (_cons (mnemonic 'lddf 'i 'f 'l) '())) (_cons (_cons (mnemonic 'stf 'f 's) (_cons (mnemonic 'stf 'i 'f 's) '())) (_cons '(0 0) (_cons '(0 0) (_cons (_cons (mnemonic 'stdf 'f 's) (_cons (mnemonic 'stdf 'i 'f 's) '())) '((0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0))))))))))))))))))))))))))))))))))))))))))))) (lambda (_ip_317 _instr_317) (_nice-instruction_4 _op3-table_316 _ip_317 _instr_317)))) (set! _class10_4 (let ((_op3-table_1546 (_list->vector (_cons (_cons (mnemonic 'add) (_cons (mnemonic 'add 'i) '())) (_cons (_cons (mnemonic 'and) (_cons (mnemonic 'and 'i) '())) (_cons (_cons (mnemonic 'or) (_cons (mnemonic 'or 'i) '())) (_cons (_cons (mnemonic 'xor) (_cons (mnemonic 'xor 'i) '())) (_cons (_cons (mnemonic 'sub) (_cons (mnemonic 'sub 'i) '())) (_cons (_cons (mnemonic 'andn) (_cons (mnemonic 'andn 'i) '())) (_cons (_cons (mnemonic 'orn) (_cons (mnemonic 'orn 'i) '())) (_cons (_cons (mnemonic 'xnor) (_cons (mnemonic 'xnor 'i) '())) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons (_cons (mnemonic 'smul) (_cons (mnemonic 'smul 'i) '())) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons (_cons (mnemonic 'sdiv) (_cons (mnemonic 'sdiv 'i) '())) (_cons (_cons (mnemonic 'addcc) (_cons (mnemonic 'addcc 'i) '())) (_cons (_cons (mnemonic 'andcc) (_cons (mnemonic 'andcc 'i) '())) (_cons (_cons (mnemonic 'orcc) (_cons (mnemonic 'orcc 'i) '())) (_cons (_cons (mnemonic 'xorcc) (_cons (mnemonic 'xorcc 'i) '())) (_cons (_cons (mnemonic 'subcc) (_cons (mnemonic 'subcc 'i) '())) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons (_cons (mnemonic 'smulcc) (_cons (mnemonic 'smulcc 'i) '())) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons (_cons (mnemonic 'sdivcc) (_cons (mnemonic 'sdivcc 'i) '())) (_cons (_cons (mnemonic 'taddcc) (_cons (mnemonic 'taddcc 'i) '())) (_cons (_cons (mnemonic 'tsubcc) (_cons (mnemonic 'tsubcc 'i) '())) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons (_cons (mnemonic 'sll) (_cons (mnemonic 'sll 'i) '())) (_cons (_cons (mnemonic 'srl) (_cons (mnemonic 'srl 'i) '())) (_cons (_cons (mnemonic 'sra) (_cons (mnemonic 'sra 'i) '())) (_cons (_cons (mnemonic 'rd) '(0)) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons (_cons (mnemonic 'wr) (_cons (mnemonic 'wr 'i) '())) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons (_cons (mnemonic 'jmpl) (_cons (mnemonic 'jmpl 'i) '())) (_cons '(0 0) (_cons '(0 0) (_cons '(0 0) (_cons (_cons (mnemonic 'save) (_cons (mnemonic 'save 'i) '())) (_cons (_cons (mnemonic 'restore) (_cons (mnemonic 'restore 'i) '())) '((0 0) (0 0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (lambda (_ip_1547 _instr_1547) (let ((_op3_1550 (_op3field_4 _instr_1547))) (if (let ((_temp_1551_1554 (= _op3_1550 52))) (if _temp_1551_1554 _temp_1551_1554 (= _op3_1550 53))) (_fpop-instruction_4 _ip_1547 _instr_1547) (_nice-instruction_4 _op3-table_1546 _ip_1547 _instr_1547)))))) (set! _class00_4 (let ((_b-table_2988 (let* ((_t_3097_3129_3134 (mnemonic 'bvc 'a 'b)) (_t_3097_3128_3137 (mnemonic 'bpos 'a 'b)) (_t_3097_3127_3140 (mnemonic 'bcc 'a 'b)) (_t_3097_3126_3143 (mnemonic 'bgu 'a 'b)) (_t_3097_3125_3146 (mnemonic 'bge 'a 'b)) (_t_3097_3124_3149 (mnemonic 'bg 'a 'b)) (_t_3097_3123_3152 (mnemonic 'bne 'a 'b)) (_t_3097_3122_3155 (mnemonic 'ba 'a 'b)) (_t_3097_3121_3158 (mnemonic 'bvs 'a 'b)) (_t_3097_3120_3161 (mnemonic 'bneg 'a 'b)) (_t_3097_3119_3164 (mnemonic 'bcs 'a 'b)) (_t_3097_3118_3167 (mnemonic 'bleu 'a 'b)) (_t_3097_3117_3170 (mnemonic 'bl 'a 'b)) (_t_3097_3116_3173 (mnemonic 'ble 'a 'b)) (_t_3097_3115_3176 (mnemonic 'be 'a 'b)) (_t_3097_3114_3179 (mnemonic 'bn 'a 'b)) (_t_3097_3113_3182 (mnemonic 'bvc 'b)) (_t_3097_3112_3185 (mnemonic 'bpos 'b)) (_t_3097_3111_3188 (mnemonic 'bcc 'b)) (_t_3097_3110_3191 (mnemonic 'bgu 'b)) (_t_3097_3109_3194 (mnemonic 'bge 'b)) (_t_3097_3108_3197 (mnemonic 'bg 'b)) (_t_3097_3107_3200 (mnemonic 'bne 'b)) (_t_3097_3106_3203 (mnemonic 'ba 'b)) (_t_3097_3105_3206 (mnemonic 'bvs 'b)) (_t_3097_3104_3209 (mnemonic 'bneg 'b)) (_t_3097_3103_3212 (mnemonic 'bcs 'b)) (_t_3097_3102_3215 (mnemonic 'bleu 'b)) (_t_3097_3101_3218 (mnemonic 'bl 'b)) (_t_3097_3100_3221 (mnemonic 'ble 'b)) (_t_3097_3099_3224 (mnemonic 'be 'b)) (_t_3097_3098_3227 (mnemonic 'bn 'b)) (_v_3097_3131_3230 (make-vector 32 _t_3097_3129_3134))) (let () (begin (let ((_v_3234_3237 _v_3097_3131_3230) (_i_3234_3237 30) (_x_3234_3237 _t_3097_3128_3137)) (begin (_check! (fixnum? _i_3234_3237) 41 _v_3234_3237 _i_3234_3237 _x_3234_3237) (_check! (vector? _v_3234_3237) 41 _v_3234_3237 _i_3234_3237 _x_3234_3237) (_check! (<:fix:fix _i_3234_3237 (vector-length:vec _v_3234_3237)) 41 _v_3234_3237 _i_3234_3237 _x_3234_3237) (_check! (>=:fix:fix _i_3234_3237 0) 41 _v_3234_3237 _i_3234_3237 _x_3234_3237) (vector-set!:trusted _v_3234_3237 _i_3234_3237 _x_3234_3237))) (let ((_v_3238_3241 _v_3097_3131_3230) (_i_3238_3241 29) (_x_3238_3241 _t_3097_3127_3140)) (begin (_check! (fixnum? _i_3238_3241) 41 _v_3238_3241 _i_3238_3241 _x_3238_3241) (_check! (vector? _v_3238_3241) 41 _v_3238_3241 _i_3238_3241 _x_3238_3241) (_check! (<:fix:fix _i_3238_3241 (vector-length:vec _v_3238_3241)) 41 _v_3238_3241 _i_3238_3241 _x_3238_3241) (_check! (>=:fix:fix _i_3238_3241 0) 41 _v_3238_3241 _i_3238_3241 _x_3238_3241) (vector-set!:trusted _v_3238_3241 _i_3238_3241 _x_3238_3241))) (let ((_v_3242_3245 _v_3097_3131_3230) (_i_3242_3245 28) (_x_3242_3245 _t_3097_3126_3143)) (begin (_check! (fixnum? _i_3242_3245) 41 _v_3242_3245 _i_3242_3245 _x_3242_3245) (_check! (vector? _v_3242_3245) 41 _v_3242_3245 _i_3242_3245 _x_3242_3245) (_check! (<:fix:fix _i_3242_3245 (vector-length:vec _v_3242_3245)) 41 _v_3242_3245 _i_3242_3245 _x_3242_3245) (_check! (>=:fix:fix _i_3242_3245 0) 41 _v_3242_3245 _i_3242_3245 _x_3242_3245) (vector-set!:trusted _v_3242_3245 _i_3242_3245 _x_3242_3245))) (let ((_v_3246_3249 _v_3097_3131_3230) (_i_3246_3249 27) (_x_3246_3249 _t_3097_3125_3146)) (begin (_check! (fixnum? _i_3246_3249) 41 _v_3246_3249 _i_3246_3249 _x_3246_3249) (_check! (vector? _v_3246_3249) 41 _v_3246_3249 _i_3246_3249 _x_3246_3249) (_check! (<:fix:fix _i_3246_3249 (vector-length:vec _v_3246_3249)) 41 _v_3246_3249 _i_3246_3249 _x_3246_3249) (_check! (>=:fix:fix _i_3246_3249 0) 41 _v_3246_3249 _i_3246_3249 _x_3246_3249) (vector-set!:trusted _v_3246_3249 _i_3246_3249 _x_3246_3249))) (let ((_v_3250_3253 _v_3097_3131_3230) (_i_3250_3253 26) (_x_3250_3253 _t_3097_3124_3149)) (begin (_check! (fixnum? _i_3250_3253) 41 _v_3250_3253 _i_3250_3253 _x_3250_3253) (_check! (vector? _v_3250_3253) 41 _v_3250_3253 _i_3250_3253 _x_3250_3253) (_check! (<:fix:fix _i_3250_3253 (vector-length:vec _v_3250_3253)) 41 _v_3250_3253 _i_3250_3253 _x_3250_3253) (_check! (>=:fix:fix _i_3250_3253 0) 41 _v_3250_3253 _i_3250_3253 _x_3250_3253) (vector-set!:trusted _v_3250_3253 _i_3250_3253 _x_3250_3253))) (let ((_v_3254_3257 _v_3097_3131_3230) (_i_3254_3257 25) (_x_3254_3257 _t_3097_3123_3152)) (begin (_check! (fixnum? _i_3254_3257) 41 _v_3254_3257 _i_3254_3257 _x_3254_3257) (_check! (vector? _v_3254_3257) 41 _v_3254_3257 _i_3254_3257 _x_3254_3257) (_check! (<:fix:fix _i_3254_3257 (vector-length:vec _v_3254_3257)) 41 _v_3254_3257 _i_3254_3257 _x_3254_3257) (_check! (>=:fix:fix _i_3254_3257 0) 41 _v_3254_3257 _i_3254_3257 _x_3254_3257) (vector-set!:trusted _v_3254_3257 _i_3254_3257 _x_3254_3257))) (let ((_v_3258_3261 _v_3097_3131_3230) (_i_3258_3261 24) (_x_3258_3261 _t_3097_3122_3155)) (begin (_check! (fixnum? _i_3258_3261) 41 _v_3258_3261 _i_3258_3261 _x_3258_3261) (_check! (vector? _v_3258_3261) 41 _v_3258_3261 _i_3258_3261 _x_3258_3261) (_check! (<:fix:fix _i_3258_3261 (vector-length:vec _v_3258_3261)) 41 _v_3258_3261 _i_3258_3261 _x_3258_3261) (_check! (>=:fix:fix _i_3258_3261 0) 41 _v_3258_3261 _i_3258_3261 _x_3258_3261) (vector-set!:trusted _v_3258_3261 _i_3258_3261 _x_3258_3261))) (let ((_v_3262_3265 _v_3097_3131_3230) (_i_3262_3265 23) (_x_3262_3265 _t_3097_3121_3158)) (begin (_check! (fixnum? _i_3262_3265) 41 _v_3262_3265 _i_3262_3265 _x_3262_3265) (_check! (vector? _v_3262_3265) 41 _v_3262_3265 _i_3262_3265 _x_3262_3265) (_check! (<:fix:fix _i_3262_3265 (vector-length:vec _v_3262_3265)) 41 _v_3262_3265 _i_3262_3265 _x_3262_3265) (_check! (>=:fix:fix _i_3262_3265 0) 41 _v_3262_3265 _i_3262_3265 _x_3262_3265) (vector-set!:trusted _v_3262_3265 _i_3262_3265 _x_3262_3265))) (let ((_v_3266_3269 _v_3097_3131_3230) (_i_3266_3269 22) (_x_3266_3269 _t_3097_3120_3161)) (begin (_check! (fixnum? _i_3266_3269) 41 _v_3266_3269 _i_3266_3269 _x_3266_3269) (_check! (vector? _v_3266_3269) 41 _v_3266_3269 _i_3266_3269 _x_3266_3269) (_check! (<:fix:fix _i_3266_3269 (vector-length:vec _v_3266_3269)) 41 _v_3266_3269 _i_3266_3269 _x_3266_3269) (_check! (>=:fix:fix _i_3266_3269 0) 41 _v_3266_3269 _i_3266_3269 _x_3266_3269) (vector-set!:trusted _v_3266_3269 _i_3266_3269 _x_3266_3269))) (let ((_v_3270_3273 _v_3097_3131_3230) (_i_3270_3273 21) (_x_3270_3273 _t_3097_3119_3164)) (begin (_check! (fixnum? _i_3270_3273) 41 _v_3270_3273 _i_3270_3273 _x_3270_3273) (_check! (vector? _v_3270_3273) 41 _v_3270_3273 _i_3270_3273 _x_3270_3273) (_check! (<:fix:fix _i_3270_3273 (vector-length:vec _v_3270_3273)) 41 _v_3270_3273 _i_3270_3273 _x_3270_3273) (_check! (>=:fix:fix _i_3270_3273 0) 41 _v_3270_3273 _i_3270_3273 _x_3270_3273) (vector-set!:trusted _v_3270_3273 _i_3270_3273 _x_3270_3273))) (let ((_v_3274_3277 _v_3097_3131_3230) (_i_3274_3277 20) (_x_3274_3277 _t_3097_3118_3167)) (begin (_check! (fixnum? _i_3274_3277) 41 _v_3274_3277 _i_3274_3277 _x_3274_3277) (_check! (vector? _v_3274_3277) 41 _v_3274_3277 _i_3274_3277 _x_3274_3277) (_check! (<:fix:fix _i_3274_3277 (vector-length:vec _v_3274_3277)) 41 _v_3274_3277 _i_3274_3277 _x_3274_3277) (_check! (>=:fix:fix _i_3274_3277 0) 41 _v_3274_3277 _i_3274_3277 _x_3274_3277) (vector-set!:trusted _v_3274_3277 _i_3274_3277 _x_3274_3277))) (let ((_v_3278_3281 _v_3097_3131_3230) (_i_3278_3281 19) (_x_3278_3281 _t_3097_3117_3170)) (begin (_check! (fixnum? _i_3278_3281) 41 _v_3278_3281 _i_3278_3281 _x_3278_3281) (_check! (vector? _v_3278_3281) 41 _v_3278_3281 _i_3278_3281 _x_3278_3281) (_check! (<:fix:fix _i_3278_3281 (vector-length:vec _v_3278_3281)) 41 _v_3278_3281 _i_3278_3281 _x_3278_3281) (_check! (>=:fix:fix _i_3278_3281 0) 41 _v_3278_3281 _i_3278_3281 _x_3278_3281) (vector-set!:trusted _v_3278_3281 _i_3278_3281 _x_3278_3281))) (let ((_v_3282_3285 _v_3097_3131_3230) (_i_3282_3285 18) (_x_3282_3285 _t_3097_3116_3173)) (begin (_check! (fixnum? _i_3282_3285) 41 _v_3282_3285 _i_3282_3285 _x_3282_3285) (_check! (vector? _v_3282_3285) 41 _v_3282_3285 _i_3282_3285 _x_3282_3285) (_check! (<:fix:fix _i_3282_3285 (vector-length:vec _v_3282_3285)) 41 _v_3282_3285 _i_3282_3285 _x_3282_3285) (_check! (>=:fix:fix _i_3282_3285 0) 41 _v_3282_3285 _i_3282_3285 _x_3282_3285) (vector-set!:trusted _v_3282_3285 _i_3282_3285 _x_3282_3285))) (let ((_v_3286_3289 _v_3097_3131_3230) (_i_3286_3289 17) (_x_3286_3289 _t_3097_3115_3176)) (begin (_check! (fixnum? _i_3286_3289) 41 _v_3286_3289 _i_3286_3289 _x_3286_3289) (_check! (vector? _v_3286_3289) 41 _v_3286_3289 _i_3286_3289 _x_3286_3289) (_check! (<:fix:fix _i_3286_3289 (vector-length:vec _v_3286_3289)) 41 _v_3286_3289 _i_3286_3289 _x_3286_3289) (_check! (>=:fix:fix _i_3286_3289 0) 41 _v_3286_3289 _i_3286_3289 _x_3286_3289) (vector-set!:trusted _v_3286_3289 _i_3286_3289 _x_3286_3289))) (let ((_v_3290_3293 _v_3097_3131_3230) (_i_3290_3293 16) (_x_3290_3293 _t_3097_3114_3179)) (begin (_check! (fixnum? _i_3290_3293) 41 _v_3290_3293 _i_3290_3293 _x_3290_3293) (_check! (vector? _v_3290_3293) 41 _v_3290_3293 _i_3290_3293 _x_3290_3293) (_check! (<:fix:fix _i_3290_3293 (vector-length:vec _v_3290_3293)) 41 _v_3290_3293 _i_3290_3293 _x_3290_3293) (_check! (>=:fix:fix _i_3290_3293 0) 41 _v_3290_3293 _i_3290_3293 _x_3290_3293) (vector-set!:trusted _v_3290_3293 _i_3290_3293 _x_3290_3293))) (let ((_v_3294_3297 _v_3097_3131_3230) (_i_3294_3297 15) (_x_3294_3297 _t_3097_3113_3182)) (begin (_check! (fixnum? _i_3294_3297) 41 _v_3294_3297 _i_3294_3297 _x_3294_3297) (_check! (vector? _v_3294_3297) 41 _v_3294_3297 _i_3294_3297 _x_3294_3297) (_check! (<:fix:fix _i_3294_3297 (vector-length:vec _v_3294_3297)) 41 _v_3294_3297 _i_3294_3297 _x_3294_3297) (_check! (>=:fix:fix _i_3294_3297 0) 41 _v_3294_3297 _i_3294_3297 _x_3294_3297) (vector-set!:trusted _v_3294_3297 _i_3294_3297 _x_3294_3297))) (let ((_v_3298_3301 _v_3097_3131_3230) (_i_3298_3301 14) (_x_3298_3301 _t_3097_3112_3185)) (begin (_check! (fixnum? _i_3298_3301) 41 _v_3298_3301 _i_3298_3301 _x_3298_3301) (_check! (vector? _v_3298_3301) 41 _v_3298_3301 _i_3298_3301 _x_3298_3301) (_check! (<:fix:fix _i_3298_3301 (vector-length:vec _v_3298_3301)) 41 _v_3298_3301 _i_3298_3301 _x_3298_3301) (_check! (>=:fix:fix _i_3298_3301 0) 41 _v_3298_3301 _i_3298_3301 _x_3298_3301) (vector-set!:trusted _v_3298_3301 _i_3298_3301 _x_3298_3301))) (let ((_v_3302_3305 _v_3097_3131_3230) (_i_3302_3305 13) (_x_3302_3305 _t_3097_3111_3188)) (begin (_check! (fixnum? _i_3302_3305) 41 _v_3302_3305 _i_3302_3305 _x_3302_3305) (_check! (vector? _v_3302_3305) 41 _v_3302_3305 _i_3302_3305 _x_3302_3305) (_check! (<:fix:fix _i_3302_3305 (vector-length:vec _v_3302_3305)) 41 _v_3302_3305 _i_3302_3305 _x_3302_3305) (_check! (>=:fix:fix _i_3302_3305 0) 41 _v_3302_3305 _i_3302_3305 _x_3302_3305) (vector-set!:trusted _v_3302_3305 _i_3302_3305 _x_3302_3305))) (let ((_v_3306_3309 _v_3097_3131_3230) (_i_3306_3309 12) (_x_3306_3309 _t_3097_3110_3191)) (begin (_check! (fixnum? _i_3306_3309) 41 _v_3306_3309 _i_3306_3309 _x_3306_3309) (_check! (vector? _v_3306_3309) 41 _v_3306_3309 _i_3306_3309 _x_3306_3309) (_check! (<:fix:fix _i_3306_3309 (vector-length:vec _v_3306_3309)) 41 _v_3306_3309 _i_3306_3309 _x_3306_3309) (_check! (>=:fix:fix _i_3306_3309 0) 41 _v_3306_3309 _i_3306_3309 _x_3306_3309) (vector-set!:trusted _v_3306_3309 _i_3306_3309 _x_3306_3309))) (let ((_v_3310_3313 _v_3097_3131_3230) (_i_3310_3313 11) (_x_3310_3313 _t_3097_3109_3194)) (begin (_check! (fixnum? _i_3310_3313) 41 _v_3310_3313 _i_3310_3313 _x_3310_3313) (_check! (vector? _v_3310_3313) 41 _v_3310_3313 _i_3310_3313 _x_3310_3313) (_check! (<:fix:fix _i_3310_3313 (vector-length:vec _v_3310_3313)) 41 _v_3310_3313 _i_3310_3313 _x_3310_3313) (_check! (>=:fix:fix _i_3310_3313 0) 41 _v_3310_3313 _i_3310_3313 _x_3310_3313) (vector-set!:trusted _v_3310_3313 _i_3310_3313 _x_3310_3313))) (let ((_v_3314_3317 _v_3097_3131_3230) (_i_3314_3317 10) (_x_3314_3317 _t_3097_3108_3197)) (begin (_check! (fixnum? _i_3314_3317) 41 _v_3314_3317 _i_3314_3317 _x_3314_3317) (_check! (vector? _v_3314_3317) 41 _v_3314_3317 _i_3314_3317 _x_3314_3317) (_check! (<:fix:fix _i_3314_3317 (vector-length:vec _v_3314_3317)) 41 _v_3314_3317 _i_3314_3317 _x_3314_3317) (_check! (>=:fix:fix _i_3314_3317 0) 41 _v_3314_3317 _i_3314_3317 _x_3314_3317) (vector-set!:trusted _v_3314_3317 _i_3314_3317 _x_3314_3317))) (let ((_v_3318_3321 _v_3097_3131_3230) (_i_3318_3321 9) (_x_3318_3321 _t_3097_3107_3200)) (begin (_check! (fixnum? _i_3318_3321) 41 _v_3318_3321 _i_3318_3321 _x_3318_3321) (_check! (vector? _v_3318_3321) 41 _v_3318_3321 _i_3318_3321 _x_3318_3321) (_check! (<:fix:fix _i_3318_3321 (vector-length:vec _v_3318_3321)) 41 _v_3318_3321 _i_3318_3321 _x_3318_3321) (_check! (>=:fix:fix _i_3318_3321 0) 41 _v_3318_3321 _i_3318_3321 _x_3318_3321) (vector-set!:trusted _v_3318_3321 _i_3318_3321 _x_3318_3321))) (let ((_v_3322_3325 _v_3097_3131_3230) (_i_3322_3325 8) (_x_3322_3325 _t_3097_3106_3203)) (begin (_check! (fixnum? _i_3322_3325) 41 _v_3322_3325 _i_3322_3325 _x_3322_3325) (_check! (vector? _v_3322_3325) 41 _v_3322_3325 _i_3322_3325 _x_3322_3325) (_check! (<:fix:fix _i_3322_3325 (vector-length:vec _v_3322_3325)) 41 _v_3322_3325 _i_3322_3325 _x_3322_3325) (_check! (>=:fix:fix _i_3322_3325 0) 41 _v_3322_3325 _i_3322_3325 _x_3322_3325) (vector-set!:trusted _v_3322_3325 _i_3322_3325 _x_3322_3325))) (let ((_v_3326_3329 _v_3097_3131_3230) (_i_3326_3329 7) (_x_3326_3329 _t_3097_3105_3206)) (begin (_check! (fixnum? _i_3326_3329) 41 _v_3326_3329 _i_3326_3329 _x_3326_3329) (_check! (vector? _v_3326_3329) 41 _v_3326_3329 _i_3326_3329 _x_3326_3329) (_check! (<:fix:fix _i_3326_3329 (vector-length:vec _v_3326_3329)) 41 _v_3326_3329 _i_3326_3329 _x_3326_3329) (_check! (>=:fix:fix _i_3326_3329 0) 41 _v_3326_3329 _i_3326_3329 _x_3326_3329) (vector-set!:trusted _v_3326_3329 _i_3326_3329 _x_3326_3329))) (let ((_v_3330_3333 _v_3097_3131_3230) (_i_3330_3333 6) (_x_3330_3333 _t_3097_3104_3209)) (begin (_check! (fixnum? _i_3330_3333) 41 _v_3330_3333 _i_3330_3333 _x_3330_3333) (_check! (vector? _v_3330_3333) 41 _v_3330_3333 _i_3330_3333 _x_3330_3333) (_check! (<:fix:fix _i_3330_3333 (vector-length:vec _v_3330_3333)) 41 _v_3330_3333 _i_3330_3333 _x_3330_3333) (_check! (>=:fix:fix _i_3330_3333 0) 41 _v_3330_3333 _i_3330_3333 _x_3330_3333) (vector-set!:trusted _v_3330_3333 _i_3330_3333 _x_3330_3333))) (let ((_v_3334_3337 _v_3097_3131_3230) (_i_3334_3337 5) (_x_3334_3337 _t_3097_3103_3212)) (begin (_check! (fixnum? _i_3334_3337) 41 _v_3334_3337 _i_3334_3337 _x_3334_3337) (_check! (vector? _v_3334_3337) 41 _v_3334_3337 _i_3334_3337 _x_3334_3337) (_check! (<:fix:fix _i_3334_3337 (vector-length:vec _v_3334_3337)) 41 _v_3334_3337 _i_3334_3337 _x_3334_3337) (_check! (>=:fix:fix _i_3334_3337 0) 41 _v_3334_3337 _i_3334_3337 _x_3334_3337) (vector-set!:trusted _v_3334_3337 _i_3334_3337 _x_3334_3337))) (let ((_v_3338_3341 _v_3097_3131_3230) (_i_3338_3341 4) (_x_3338_3341 _t_3097_3102_3215)) (begin (_check! (fixnum? _i_3338_3341) 41 _v_3338_3341 _i_3338_3341 _x_3338_3341) (_check! (vector? _v_3338_3341) 41 _v_3338_3341 _i_3338_3341 _x_3338_3341) (_check! (<:fix:fix _i_3338_3341 (vector-length:vec _v_3338_3341)) 41 _v_3338_3341 _i_3338_3341 _x_3338_3341) (_check! (>=:fix:fix _i_3338_3341 0) 41 _v_3338_3341 _i_3338_3341 _x_3338_3341) (vector-set!:trusted _v_3338_3341 _i_3338_3341 _x_3338_3341))) (let ((_v_3342_3345 _v_3097_3131_3230) (_i_3342_3345 3) (_x_3342_3345 _t_3097_3101_3218)) (begin (_check! (fixnum? _i_3342_3345) 41 _v_3342_3345 _i_3342_3345 _x_3342_3345) (_check! (vector? _v_3342_3345) 41 _v_3342_3345 _i_3342_3345 _x_3342_3345) (_check! (<:fix:fix _i_3342_3345 (vector-length:vec _v_3342_3345)) 41 _v_3342_3345 _i_3342_3345 _x_3342_3345) (_check! (>=:fix:fix _i_3342_3345 0) 41 _v_3342_3345 _i_3342_3345 _x_3342_3345) (vector-set!:trusted _v_3342_3345 _i_3342_3345 _x_3342_3345))) (let ((_v_3346_3349 _v_3097_3131_3230) (_i_3346_3349 2) (_x_3346_3349 _t_3097_3100_3221)) (begin (_check! (fixnum? _i_3346_3349) 41 _v_3346_3349 _i_3346_3349 _x_3346_3349) (_check! (vector? _v_3346_3349) 41 _v_3346_3349 _i_3346_3349 _x_3346_3349) (_check! (<:fix:fix _i_3346_3349 (vector-length:vec _v_3346_3349)) 41 _v_3346_3349 _i_3346_3349 _x_3346_3349) (_check! (>=:fix:fix _i_3346_3349 0) 41 _v_3346_3349 _i_3346_3349 _x_3346_3349) (vector-set!:trusted _v_3346_3349 _i_3346_3349 _x_3346_3349))) (let ((_v_3350_3353 _v_3097_3131_3230) (_i_3350_3353 1) (_x_3350_3353 _t_3097_3099_3224)) (begin (_check! (fixnum? _i_3350_3353) 41 _v_3350_3353 _i_3350_3353 _x_3350_3353) (_check! (vector? _v_3350_3353) 41 _v_3350_3353 _i_3350_3353 _x_3350_3353) (_check! (<:fix:fix _i_3350_3353 (vector-length:vec _v_3350_3353)) 41 _v_3350_3353 _i_3350_3353 _x_3350_3353) (_check! (>=:fix:fix _i_3350_3353 0) 41 _v_3350_3353 _i_3350_3353 _x_3350_3353) (vector-set!:trusted _v_3350_3353 _i_3350_3353 _x_3350_3353))) (let ((_v_3354_3357 _v_3097_3131_3230) (_i_3354_3357 0) (_x_3354_3357 _t_3097_3098_3227)) (begin (_check! (fixnum? _i_3354_3357) 41 _v_3354_3357 _i_3354_3357 _x_3354_3357) (_check! (vector? _v_3354_3357) 41 _v_3354_3357 _i_3354_3357 _x_3354_3357) (_check! (<:fix:fix _i_3354_3357 (vector-length:vec _v_3354_3357)) 41 _v_3354_3357 _i_3354_3357 _x_3354_3357) (_check! (>=:fix:fix _i_3354_3357 0) 41 _v_3354_3357 _i_3354_3357 _x_3354_3357) (vector-set!:trusted _v_3354_3357 _i_3354_3357 _x_3354_3357))) _v_3097_3131_3230)))) (_fb-table_2988 (let* ((_t_3358_3390_3395 (mnemonic 'fbo 'a 'b)) (_t_3358_3389_3398 (mnemonic 'fbule 'a 'b)) (_t_3358_3388_3401 (mnemonic 'fble 'a 'b)) (_t_3358_3387_3404 (mnemonic 'fbuge 'a 'b)) (_t_3358_3386_3407 (mnemonic 'fbge 'a 'b)) (_t_3358_3385_3410 (mnemonic 'fbue 'a 'b)) (_t_3358_3384_3413 (mnemonic 'fbe 'a 'b)) (_t_3358_3383_3416 (mnemonic 'fba 'a 'b)) (_t_3358_3382_3419 (mnemonic 'fbu 'a 'b)) (_t_3358_3381_3422 (mnemonic 'fbg 'a 'b)) (_t_3358_3380_3425 (mnemonic 'fbug 'a 'b)) (_t_3358_3379_3428 (mnemonic 'fbl 'a 'b)) (_t_3358_3378_3431 (mnemonic 'fbul 'a 'b)) (_t_3358_3377_3434 (mnemonic 'fblg 'a 'b)) (_t_3358_3376_3437 (mnemonic 'fbne 'a 'b)) (_t_3358_3375_3440 (mnemonic 'fbn 'a 'b)) (_t_3358_3374_3443 (mnemonic 'fbo 'b)) (_t_3358_3373_3446 (mnemonic 'fbule 'b)) (_t_3358_3372_3449 (mnemonic 'fble 'b)) (_t_3358_3371_3452 (mnemonic 'fbuge 'b)) (_t_3358_3370_3455 (mnemonic 'fbge 'b)) (_t_3358_3369_3458 (mnemonic 'fbue 'b)) (_t_3358_3368_3461 (mnemonic 'fbe 'b)) (_t_3358_3367_3464 (mnemonic 'fba 'b)) (_t_3358_3366_3467 (mnemonic 'fbu 'b)) (_t_3358_3365_3470 (mnemonic 'fbg 'b)) (_t_3358_3364_3473 (mnemonic 'fbug 'b)) (_t_3358_3363_3476 (mnemonic 'fbl 'b)) (_t_3358_3362_3479 (mnemonic 'fbul 'b)) (_t_3358_3361_3482 (mnemonic 'fblg 'b)) (_t_3358_3360_3485 (mnemonic 'fbne 'b)) (_t_3358_3359_3488 (mnemonic 'fbn 'b)) (_v_3358_3392_3491 (make-vector 32 _t_3358_3390_3395))) (let () (begin (let ((_v_3495_3498 _v_3358_3392_3491) (_i_3495_3498 30) (_x_3495_3498 _t_3358_3389_3398)) (begin (_check! (fixnum? _i_3495_3498) 41 _v_3495_3498 _i_3495_3498 _x_3495_3498) (_check! (vector? _v_3495_3498) 41 _v_3495_3498 _i_3495_3498 _x_3495_3498) (_check! (<:fix:fix _i_3495_3498 (vector-length:vec _v_3495_3498)) 41 _v_3495_3498 _i_3495_3498 _x_3495_3498) (_check! (>=:fix:fix _i_3495_3498 0) 41 _v_3495_3498 _i_3495_3498 _x_3495_3498) (vector-set!:trusted _v_3495_3498 _i_3495_3498 _x_3495_3498))) (let ((_v_3499_3502 _v_3358_3392_3491) (_i_3499_3502 29) (_x_3499_3502 _t_3358_3388_3401)) (begin (_check! (fixnum? _i_3499_3502) 41 _v_3499_3502 _i_3499_3502 _x_3499_3502) (_check! (vector? _v_3499_3502) 41 _v_3499_3502 _i_3499_3502 _x_3499_3502) (_check! (<:fix:fix _i_3499_3502 (vector-length:vec _v_3499_3502)) 41 _v_3499_3502 _i_3499_3502 _x_3499_3502) (_check! (>=:fix:fix _i_3499_3502 0) 41 _v_3499_3502 _i_3499_3502 _x_3499_3502) (vector-set!:trusted _v_3499_3502 _i_3499_3502 _x_3499_3502))) (let ((_v_3503_3506 _v_3358_3392_3491) (_i_3503_3506 28) (_x_3503_3506 _t_3358_3387_3404)) (begin (_check! (fixnum? _i_3503_3506) 41 _v_3503_3506 _i_3503_3506 _x_3503_3506) (_check! (vector? _v_3503_3506) 41 _v_3503_3506 _i_3503_3506 _x_3503_3506) (_check! (<:fix:fix _i_3503_3506 (vector-length:vec _v_3503_3506)) 41 _v_3503_3506 _i_3503_3506 _x_3503_3506) (_check! (>=:fix:fix _i_3503_3506 0) 41 _v_3503_3506 _i_3503_3506 _x_3503_3506) (vector-set!:trusted _v_3503_3506 _i_3503_3506 _x_3503_3506))) (let ((_v_3507_3510 _v_3358_3392_3491) (_i_3507_3510 27) (_x_3507_3510 _t_3358_3386_3407)) (begin (_check! (fixnum? _i_3507_3510) 41 _v_3507_3510 _i_3507_3510 _x_3507_3510) (_check! (vector? _v_3507_3510) 41 _v_3507_3510 _i_3507_3510 _x_3507_3510) (_check! (<:fix:fix _i_3507_3510 (vector-length:vec _v_3507_3510)) 41 _v_3507_3510 _i_3507_3510 _x_3507_3510) (_check! (>=:fix:fix _i_3507_3510 0) 41 _v_3507_3510 _i_3507_3510 _x_3507_3510) (vector-set!:trusted _v_3507_3510 _i_3507_3510 _x_3507_3510))) (let ((_v_3511_3514 _v_3358_3392_3491) (_i_3511_3514 26) (_x_3511_3514 _t_3358_3385_3410)) (begin (_check! (fixnum? _i_3511_3514) 41 _v_3511_3514 _i_3511_3514 _x_3511_3514) (_check! (vector? _v_3511_3514) 41 _v_3511_3514 _i_3511_3514 _x_3511_3514) (_check! (<:fix:fix _i_3511_3514 (vector-length:vec _v_3511_3514)) 41 _v_3511_3514 _i_3511_3514 _x_3511_3514) (_check! (>=:fix:fix _i_3511_3514 0) 41 _v_3511_3514 _i_3511_3514 _x_3511_3514) (vector-set!:trusted _v_3511_3514 _i_3511_3514 _x_3511_3514))) (let ((_v_3515_3518 _v_3358_3392_3491) (_i_3515_3518 25) (_x_3515_3518 _t_3358_3384_3413)) (begin (_check! (fixnum? _i_3515_3518) 41 _v_3515_3518 _i_3515_3518 _x_3515_3518) (_check! (vector? _v_3515_3518) 41 _v_3515_3518 _i_3515_3518 _x_3515_3518) (_check! (<:fix:fix _i_3515_3518 (vector-length:vec _v_3515_3518)) 41 _v_3515_3518 _i_3515_3518 _x_3515_3518) (_check! (>=:fix:fix _i_3515_3518 0) 41 _v_3515_3518 _i_3515_3518 _x_3515_3518) (vector-set!:trusted _v_3515_3518 _i_3515_3518 _x_3515_3518))) (let ((_v_3519_3522 _v_3358_3392_3491) (_i_3519_3522 24) (_x_3519_3522 _t_3358_3383_3416)) (begin (_check! (fixnum? _i_3519_3522) 41 _v_3519_3522 _i_3519_3522 _x_3519_3522) (_check! (vector? _v_3519_3522) 41 _v_3519_3522 _i_3519_3522 _x_3519_3522) (_check! (<:fix:fix _i_3519_3522 (vector-length:vec _v_3519_3522)) 41 _v_3519_3522 _i_3519_3522 _x_3519_3522) (_check! (>=:fix:fix _i_3519_3522 0) 41 _v_3519_3522 _i_3519_3522 _x_3519_3522) (vector-set!:trusted _v_3519_3522 _i_3519_3522 _x_3519_3522))) (let ((_v_3523_3526 _v_3358_3392_3491) (_i_3523_3526 23) (_x_3523_3526 _t_3358_3382_3419)) (begin (_check! (fixnum? _i_3523_3526) 41 _v_3523_3526 _i_3523_3526 _x_3523_3526) (_check! (vector? _v_3523_3526) 41 _v_3523_3526 _i_3523_3526 _x_3523_3526) (_check! (<:fix:fix _i_3523_3526 (vector-length:vec _v_3523_3526)) 41 _v_3523_3526 _i_3523_3526 _x_3523_3526) (_check! (>=:fix:fix _i_3523_3526 0) 41 _v_3523_3526 _i_3523_3526 _x_3523_3526) (vector-set!:trusted _v_3523_3526 _i_3523_3526 _x_3523_3526))) (let ((_v_3527_3530 _v_3358_3392_3491) (_i_3527_3530 22) (_x_3527_3530 _t_3358_3381_3422)) (begin (_check! (fixnum? _i_3527_3530) 41 _v_3527_3530 _i_3527_3530 _x_3527_3530) (_check! (vector? _v_3527_3530) 41 _v_3527_3530 _i_3527_3530 _x_3527_3530) (_check! (<:fix:fix _i_3527_3530 (vector-length:vec _v_3527_3530)) 41 _v_3527_3530 _i_3527_3530 _x_3527_3530) (_check! (>=:fix:fix _i_3527_3530 0) 41 _v_3527_3530 _i_3527_3530 _x_3527_3530) (vector-set!:trusted _v_3527_3530 _i_3527_3530 _x_3527_3530))) (let ((_v_3531_3534 _v_3358_3392_3491) (_i_3531_3534 21) (_x_3531_3534 _t_3358_3380_3425)) (begin (_check! (fixnum? _i_3531_3534) 41 _v_3531_3534 _i_3531_3534 _x_3531_3534) (_check! (vector? _v_3531_3534) 41 _v_3531_3534 _i_3531_3534 _x_3531_3534) (_check! (<:fix:fix _i_3531_3534 (vector-length:vec _v_3531_3534)) 41 _v_3531_3534 _i_3531_3534 _x_3531_3534) (_check! (>=:fix:fix _i_3531_3534 0) 41 _v_3531_3534 _i_3531_3534 _x_3531_3534) (vector-set!:trusted _v_3531_3534 _i_3531_3534 _x_3531_3534))) (let ((_v_3535_3538 _v_3358_3392_3491) (_i_3535_3538 20) (_x_3535_3538 _t_3358_3379_3428)) (begin (_check! (fixnum? _i_3535_3538) 41 _v_3535_3538 _i_3535_3538 _x_3535_3538) (_check! (vector? _v_3535_3538) 41 _v_3535_3538 _i_3535_3538 _x_3535_3538) (_check! (<:fix:fix _i_3535_3538 (vector-length:vec _v_3535_3538)) 41 _v_3535_3538 _i_3535_3538 _x_3535_3538) (_check! (>=:fix:fix _i_3535_3538 0) 41 _v_3535_3538 _i_3535_3538 _x_3535_3538) (vector-set!:trusted _v_3535_3538 _i_3535_3538 _x_3535_3538))) (let ((_v_3539_3542 _v_3358_3392_3491) (_i_3539_3542 19) (_x_3539_3542 _t_3358_3378_3431)) (begin (_check! (fixnum? _i_3539_3542) 41 _v_3539_3542 _i_3539_3542 _x_3539_3542) (_check! (vector? _v_3539_3542) 41 _v_3539_3542 _i_3539_3542 _x_3539_3542) (_check! (<:fix:fix _i_3539_3542 (vector-length:vec _v_3539_3542)) 41 _v_3539_3542 _i_3539_3542 _x_3539_3542) (_check! (>=:fix:fix _i_3539_3542 0) 41 _v_3539_3542 _i_3539_3542 _x_3539_3542) (vector-set!:trusted _v_3539_3542 _i_3539_3542 _x_3539_3542))) (let ((_v_3543_3546 _v_3358_3392_3491) (_i_3543_3546 18) (_x_3543_3546 _t_3358_3377_3434)) (begin (_check! (fixnum? _i_3543_3546) 41 _v_3543_3546 _i_3543_3546 _x_3543_3546) (_check! (vector? _v_3543_3546) 41 _v_3543_3546 _i_3543_3546 _x_3543_3546) (_check! (<:fix:fix _i_3543_3546 (vector-length:vec _v_3543_3546)) 41 _v_3543_3546 _i_3543_3546 _x_3543_3546) (_check! (>=:fix:fix _i_3543_3546 0) 41 _v_3543_3546 _i_3543_3546 _x_3543_3546) (vector-set!:trusted _v_3543_3546 _i_3543_3546 _x_3543_3546))) (let ((_v_3547_3550 _v_3358_3392_3491) (_i_3547_3550 17) (_x_3547_3550 _t_3358_3376_3437)) (begin (_check! (fixnum? _i_3547_3550) 41 _v_3547_3550 _i_3547_3550 _x_3547_3550) (_check! (vector? _v_3547_3550) 41 _v_3547_3550 _i_3547_3550 _x_3547_3550) (_check! (<:fix:fix _i_3547_3550 (vector-length:vec _v_3547_3550)) 41 _v_3547_3550 _i_3547_3550 _x_3547_3550) (_check! (>=:fix:fix _i_3547_3550 0) 41 _v_3547_3550 _i_3547_3550 _x_3547_3550) (vector-set!:trusted _v_3547_3550 _i_3547_3550 _x_3547_3550))) (let ((_v_3551_3554 _v_3358_3392_3491) (_i_3551_3554 16) (_x_3551_3554 _t_3358_3375_3440)) (begin (_check! (fixnum? _i_3551_3554) 41 _v_3551_3554 _i_3551_3554 _x_3551_3554) (_check! (vector? _v_3551_3554) 41 _v_3551_3554 _i_3551_3554 _x_3551_3554) (_check! (<:fix:fix _i_3551_3554 (vector-length:vec _v_3551_3554)) 41 _v_3551_3554 _i_3551_3554 _x_3551_3554) (_check! (>=:fix:fix _i_3551_3554 0) 41 _v_3551_3554 _i_3551_3554 _x_3551_3554) (vector-set!:trusted _v_3551_3554 _i_3551_3554 _x_3551_3554))) (let ((_v_3555_3558 _v_3358_3392_3491) (_i_3555_3558 15) (_x_3555_3558 _t_3358_3374_3443)) (begin (_check! (fixnum? _i_3555_3558) 41 _v_3555_3558 _i_3555_3558 _x_3555_3558) (_check! (vector? _v_3555_3558) 41 _v_3555_3558 _i_3555_3558 _x_3555_3558) (_check! (<:fix:fix _i_3555_3558 (vector-length:vec _v_3555_3558)) 41 _v_3555_3558 _i_3555_3558 _x_3555_3558) (_check! (>=:fix:fix _i_3555_3558 0) 41 _v_3555_3558 _i_3555_3558 _x_3555_3558) (vector-set!:trusted _v_3555_3558 _i_3555_3558 _x_3555_3558))) (let ((_v_3559_3562 _v_3358_3392_3491) (_i_3559_3562 14) (_x_3559_3562 _t_3358_3373_3446)) (begin (_check! (fixnum? _i_3559_3562) 41 _v_3559_3562 _i_3559_3562 _x_3559_3562) (_check! (vector? _v_3559_3562) 41 _v_3559_3562 _i_3559_3562 _x_3559_3562) (_check! (<:fix:fix _i_3559_3562 (vector-length:vec _v_3559_3562)) 41 _v_3559_3562 _i_3559_3562 _x_3559_3562) (_check! (>=:fix:fix _i_3559_3562 0) 41 _v_3559_3562 _i_3559_3562 _x_3559_3562) (vector-set!:trusted _v_3559_3562 _i_3559_3562 _x_3559_3562))) (let ((_v_3563_3566 _v_3358_3392_3491) (_i_3563_3566 13) (_x_3563_3566 _t_3358_3372_3449)) (begin (_check! (fixnum? _i_3563_3566) 41 _v_3563_3566 _i_3563_3566 _x_3563_3566) (_check! (vector? _v_3563_3566) 41 _v_3563_3566 _i_3563_3566 _x_3563_3566) (_check! (<:fix:fix _i_3563_3566 (vector-length:vec _v_3563_3566)) 41 _v_3563_3566 _i_3563_3566 _x_3563_3566) (_check! (>=:fix:fix _i_3563_3566 0) 41 _v_3563_3566 _i_3563_3566 _x_3563_3566) (vector-set!:trusted _v_3563_3566 _i_3563_3566 _x_3563_3566))) (let ((_v_3567_3570 _v_3358_3392_3491) (_i_3567_3570 12) (_x_3567_3570 _t_3358_3371_3452)) (begin (_check! (fixnum? _i_3567_3570) 41 _v_3567_3570 _i_3567_3570 _x_3567_3570) (_check! (vector? _v_3567_3570) 41 _v_3567_3570 _i_3567_3570 _x_3567_3570) (_check! (<:fix:fix _i_3567_3570 (vector-length:vec _v_3567_3570)) 41 _v_3567_3570 _i_3567_3570 _x_3567_3570) (_check! (>=:fix:fix _i_3567_3570 0) 41 _v_3567_3570 _i_3567_3570 _x_3567_3570) (vector-set!:trusted _v_3567_3570 _i_3567_3570 _x_3567_3570))) (let ((_v_3571_3574 _v_3358_3392_3491) (_i_3571_3574 11) (_x_3571_3574 _t_3358_3370_3455)) (begin (_check! (fixnum? _i_3571_3574) 41 _v_3571_3574 _i_3571_3574 _x_3571_3574) (_check! (vector? _v_3571_3574) 41 _v_3571_3574 _i_3571_3574 _x_3571_3574) (_check! (<:fix:fix _i_3571_3574 (vector-length:vec _v_3571_3574)) 41 _v_3571_3574 _i_3571_3574 _x_3571_3574) (_check! (>=:fix:fix _i_3571_3574 0) 41 _v_3571_3574 _i_3571_3574 _x_3571_3574) (vector-set!:trusted _v_3571_3574 _i_3571_3574 _x_3571_3574))) (let ((_v_3575_3578 _v_3358_3392_3491) (_i_3575_3578 10) (_x_3575_3578 _t_3358_3369_3458)) (begin (_check! (fixnum? _i_3575_3578) 41 _v_3575_3578 _i_3575_3578 _x_3575_3578) (_check! (vector? _v_3575_3578) 41 _v_3575_3578 _i_3575_3578 _x_3575_3578) (_check! (<:fix:fix _i_3575_3578 (vector-length:vec _v_3575_3578)) 41 _v_3575_3578 _i_3575_3578 _x_3575_3578) (_check! (>=:fix:fix _i_3575_3578 0) 41 _v_3575_3578 _i_3575_3578 _x_3575_3578) (vector-set!:trusted _v_3575_3578 _i_3575_3578 _x_3575_3578))) (let ((_v_3579_3582 _v_3358_3392_3491) (_i_3579_3582 9) (_x_3579_3582 _t_3358_3368_3461)) (begin (_check! (fixnum? _i_3579_3582) 41 _v_3579_3582 _i_3579_3582 _x_3579_3582) (_check! (vector? _v_3579_3582) 41 _v_3579_3582 _i_3579_3582 _x_3579_3582) (_check! (<:fix:fix _i_3579_3582 (vector-length:vec _v_3579_3582)) 41 _v_3579_3582 _i_3579_3582 _x_3579_3582) (_check! (>=:fix:fix _i_3579_3582 0) 41 _v_3579_3582 _i_3579_3582 _x_3579_3582) (vector-set!:trusted _v_3579_3582 _i_3579_3582 _x_3579_3582))) (let ((_v_3583_3586 _v_3358_3392_3491) (_i_3583_3586 8) (_x_3583_3586 _t_3358_3367_3464)) (begin (_check! (fixnum? _i_3583_3586) 41 _v_3583_3586 _i_3583_3586 _x_3583_3586) (_check! (vector? _v_3583_3586) 41 _v_3583_3586 _i_3583_3586 _x_3583_3586) (_check! (<:fix:fix _i_3583_3586 (vector-length:vec _v_3583_3586)) 41 _v_3583_3586 _i_3583_3586 _x_3583_3586) (_check! (>=:fix:fix _i_3583_3586 0) 41 _v_3583_3586 _i_3583_3586 _x_3583_3586) (vector-set!:trusted _v_3583_3586 _i_3583_3586 _x_3583_3586))) (let ((_v_3587_3590 _v_3358_3392_3491) (_i_3587_3590 7) (_x_3587_3590 _t_3358_3366_3467)) (begin (_check! (fixnum? _i_3587_3590) 41 _v_3587_3590 _i_3587_3590 _x_3587_3590) (_check! (vector? _v_3587_3590) 41 _v_3587_3590 _i_3587_3590 _x_3587_3590) (_check! (<:fix:fix _i_3587_3590 (vector-length:vec _v_3587_3590)) 41 _v_3587_3590 _i_3587_3590 _x_3587_3590) (_check! (>=:fix:fix _i_3587_3590 0) 41 _v_3587_3590 _i_3587_3590 _x_3587_3590) (vector-set!:trusted _v_3587_3590 _i_3587_3590 _x_3587_3590))) (let ((_v_3591_3594 _v_3358_3392_3491) (_i_3591_3594 6) (_x_3591_3594 _t_3358_3365_3470)) (begin (_check! (fixnum? _i_3591_3594) 41 _v_3591_3594 _i_3591_3594 _x_3591_3594) (_check! (vector? _v_3591_3594) 41 _v_3591_3594 _i_3591_3594 _x_3591_3594) (_check! (<:fix:fix _i_3591_3594 (vector-length:vec _v_3591_3594)) 41 _v_3591_3594 _i_3591_3594 _x_3591_3594) (_check! (>=:fix:fix _i_3591_3594 0) 41 _v_3591_3594 _i_3591_3594 _x_3591_3594) (vector-set!:trusted _v_3591_3594 _i_3591_3594 _x_3591_3594))) (let ((_v_3595_3598 _v_3358_3392_3491) (_i_3595_3598 5) (_x_3595_3598 _t_3358_3364_3473)) (begin (_check! (fixnum? _i_3595_3598) 41 _v_3595_3598 _i_3595_3598 _x_3595_3598) (_check! (vector? _v_3595_3598) 41 _v_3595_3598 _i_3595_3598 _x_3595_3598) (_check! (<:fix:fix _i_3595_3598 (vector-length:vec _v_3595_3598)) 41 _v_3595_3598 _i_3595_3598 _x_3595_3598) (_check! (>=:fix:fix _i_3595_3598 0) 41 _v_3595_3598 _i_3595_3598 _x_3595_3598) (vector-set!:trusted _v_3595_3598 _i_3595_3598 _x_3595_3598))) (let ((_v_3599_3602 _v_3358_3392_3491) (_i_3599_3602 4) (_x_3599_3602 _t_3358_3363_3476)) (begin (_check! (fixnum? _i_3599_3602) 41 _v_3599_3602 _i_3599_3602 _x_3599_3602) (_check! (vector? _v_3599_3602) 41 _v_3599_3602 _i_3599_3602 _x_3599_3602) (_check! (<:fix:fix _i_3599_3602 (vector-length:vec _v_3599_3602)) 41 _v_3599_3602 _i_3599_3602 _x_3599_3602) (_check! (>=:fix:fix _i_3599_3602 0) 41 _v_3599_3602 _i_3599_3602 _x_3599_3602) (vector-set!:trusted _v_3599_3602 _i_3599_3602 _x_3599_3602))) (let ((_v_3603_3606 _v_3358_3392_3491) (_i_3603_3606 3) (_x_3603_3606 _t_3358_3362_3479)) (begin (_check! (fixnum? _i_3603_3606) 41 _v_3603_3606 _i_3603_3606 _x_3603_3606) (_check! (vector? _v_3603_3606) 41 _v_3603_3606 _i_3603_3606 _x_3603_3606) (_check! (<:fix:fix _i_3603_3606 (vector-length:vec _v_3603_3606)) 41 _v_3603_3606 _i_3603_3606 _x_3603_3606) (_check! (>=:fix:fix _i_3603_3606 0) 41 _v_3603_3606 _i_3603_3606 _x_3603_3606) (vector-set!:trusted _v_3603_3606 _i_3603_3606 _x_3603_3606))) (let ((_v_3607_3610 _v_3358_3392_3491) (_i_3607_3610 2) (_x_3607_3610 _t_3358_3361_3482)) (begin (_check! (fixnum? _i_3607_3610) 41 _v_3607_3610 _i_3607_3610 _x_3607_3610) (_check! (vector? _v_3607_3610) 41 _v_3607_3610 _i_3607_3610 _x_3607_3610) (_check! (<:fix:fix _i_3607_3610 (vector-length:vec _v_3607_3610)) 41 _v_3607_3610 _i_3607_3610 _x_3607_3610) (_check! (>=:fix:fix _i_3607_3610 0) 41 _v_3607_3610 _i_3607_3610 _x_3607_3610) (vector-set!:trusted _v_3607_3610 _i_3607_3610 _x_3607_3610))) (let ((_v_3611_3614 _v_3358_3392_3491) (_i_3611_3614 1) (_x_3611_3614 _t_3358_3360_3485)) (begin (_check! (fixnum? _i_3611_3614) 41 _v_3611_3614 _i_3611_3614 _x_3611_3614) (_check! (vector? _v_3611_3614) 41 _v_3611_3614 _i_3611_3614 _x_3611_3614) (_check! (<:fix:fix _i_3611_3614 (vector-length:vec _v_3611_3614)) 41 _v_3611_3614 _i_3611_3614 _x_3611_3614) (_check! (>=:fix:fix _i_3611_3614 0) 41 _v_3611_3614 _i_3611_3614 _x_3611_3614) (vector-set!:trusted _v_3611_3614 _i_3611_3614 _x_3611_3614))) (let ((_v_3615_3618 _v_3358_3392_3491) (_i_3615_3618 0) (_x_3615_3618 _t_3358_3359_3488)) (begin (_check! (fixnum? _i_3615_3618) 41 _v_3615_3618 _i_3615_3618 _x_3615_3618) (_check! (vector? _v_3615_3618) 41 _v_3615_3618 _i_3615_3618 _x_3615_3618) (_check! (<:fix:fix _i_3615_3618 (vector-length:vec _v_3615_3618)) 41 _v_3615_3618 _i_3615_3618 _x_3615_3618) (_check! (>=:fix:fix _i_3615_3618 0) 41 _v_3615_3618 _i_3615_3618 _x_3615_3618) (vector-set!:trusted _v_3615_3618 _i_3615_3618 _x_3615_3618))) _v_3358_3392_3491)))) (_nop_2988 (mnemonic 'nop)) (_sethi_2988 (mnemonic 'sethi))) (lambda (_ip_2989 _instr_2989) (let ((_op2_2992 (_op2field_4 _instr_2989))) (if (= _op2_2992 4) (if (zero? (_rdfield_4 _instr_2989)) (_cons _nop_2988 '()) (_cons _sethi_2988 (_cons (_imm22field_4 _instr_2989) (_cons (_rdfield_4 _instr_2989) '())))) (if (= _op2_2992 2) (_cons (let ((_v_3064_3067 _b-table_2988) (_i_3064_3067 (_rdfield_4 _instr_2989))) (begin (_check! (fixnum? _i_3064_3067) 40 _v_3064_3067 _i_3064_3067) (_check! (vector? _v_3064_3067) 40 _v_3064_3067 _i_3064_3067) (_check! (<:fix:fix _i_3064_3067 (vector-length:vec _v_3064_3067)) 40 _v_3064_3067 _i_3064_3067) (_check! (>=:fix:fix _i_3064_3067 0) 40 _v_3064_3067 _i_3064_3067) (vector-ref:trusted _v_3064_3067 _i_3064_3067))) (_cons (* 4 (_imm22field_4 _instr_2989)) '())) (if (= _op2_2992 6) (_cons (let ((_v_3092_3095 _fb-table_2988) (_i_3092_3095 (_rdfield_4 _instr_2989))) (begin (_check! (fixnum? _i_3092_3095) 40 _v_3092_3095 _i_3092_3095) (_check! (vector? _v_3092_3095) 40 _v_3092_3095 _i_3092_3095) (_check! (<:fix:fix _i_3092_3095 (vector-length:vec _v_3092_3095)) 40 _v_3092_3095 _i_3092_3095) (_check! (>=:fix:fix _i_3092_3095 0) 40 _v_3092_3095 _i_3092_3095) (vector-ref:trusted _v_3092_3095 _i_3092_3095))) (_cons (* 4 (_imm22field_4 _instr_2989)) '())) (disasm-error "Can't disassemble " (number->string _instr_2989 16) " at ip=" _ip_2989 " with op2=" _op2_2992)))))))) (set! _two^32_4 (expt 2 32)) (set! _two^30_4 (expt 2 30)) (set! _two^29_4 (expt 2 29)) (set! _two^25_4 (expt 2 25)) (set! _two^24_4 (expt 2 24)) (set! _two^22_4 (expt 2 22)) (set! _two^21_4 (expt 2 21)) (set! _two^19_4 (expt 2 19)) (set! _two^16_4 (expt 2 16)) (set! _two^14_4 (expt 2 14)) (set! _two^13_4 (expt 2 13)) (set! _two^12_4 (expt 2 12)) (set! _two^9_4 (expt 2 9)) (set! _two^8_4 (expt 2 8)) (set! _two^6_4 (expt 2 6)) (set! _two^5_4 (expt 2 5)) (set! _two^3_4 (expt 2 3)) (set! disassemble-instruction (let ((_class-table_3621 (let* ((_t_3627_3631_3636 _class11_4) (_t_3627_3630_3639 _class10_4) (_t_3627_3629_3642 _class01_4) (_t_3627_3628_3645 _class00_4) (_v_3627_3633_3648 (make-vector 4 _t_3627_3631_3636))) (let () (begin (let ((_v_3652_3655 _v_3627_3633_3648) (_i_3652_3655 2) (_x_3652_3655 _t_3627_3630_3639)) (begin (_check! (fixnum? _i_3652_3655) 41 _v_3652_3655 _i_3652_3655 _x_3652_3655) (_check! (vector? _v_3652_3655) 41 _v_3652_3655 _i_3652_3655 _x_3652_3655) (_check! (<:fix:fix _i_3652_3655 (vector-length:vec _v_3652_3655)) 41 _v_3652_3655 _i_3652_3655 _x_3652_3655) (_check! (>=:fix:fix _i_3652_3655 0) 41 _v_3652_3655 _i_3652_3655 _x_3652_3655) (vector-set!:trusted _v_3652_3655 _i_3652_3655 _x_3652_3655))) (let ((_v_3656_3659 _v_3627_3633_3648) (_i_3656_3659 1) (_x_3656_3659 _t_3627_3629_3642)) (begin (_check! (fixnum? _i_3656_3659) 41 _v_3656_3659 _i_3656_3659 _x_3656_3659) (_check! (vector? _v_3656_3659) 41 _v_3656_3659 _i_3656_3659 _x_3656_3659) (_check! (<:fix:fix _i_3656_3659 (vector-length:vec _v_3656_3659)) 41 _v_3656_3659 _i_3656_3659 _x_3656_3659) (_check! (>=:fix:fix _i_3656_3659 0) 41 _v_3656_3659 _i_3656_3659 _x_3656_3659) (vector-set!:trusted _v_3656_3659 _i_3656_3659 _x_3656_3659))) (let ((_v_3660_3663 _v_3627_3633_3648) (_i_3660_3663 0) (_x_3660_3663 _t_3627_3628_3645)) (begin (_check! (fixnum? _i_3660_3663) 41 _v_3660_3663 _i_3660_3663 _x_3660_3663) (_check! (vector? _v_3660_3663) 41 _v_3660_3663 _i_3660_3663 _x_3660_3663) (_check! (<:fix:fix _i_3660_3663 (vector-length:vec _v_3660_3663)) 41 _v_3660_3663 _i_3660_3663 _x_3660_3663) (_check! (>=:fix:fix _i_3660_3663 0) 41 _v_3660_3663 _i_3660_3663 _x_3660_3663) (vector-set!:trusted _v_3660_3663 _i_3660_3663 _x_3660_3663))) _v_3627_3633_3648))))) (lambda (_instr_3622 _addr_3622) ((let ((_v_3623_3626 _class-table_3621) (_i_3623_3626 (quotient _instr_3622 _two^30_4))) (begin (_check! (fixnum? _i_3623_3626) 40 _v_3623_3626 _i_3623_3626) (_check! (vector? _v_3623_3626) 40 _v_3623_3626 _i_3623_3626) (_check! (<:fix:fix _i_3623_3626 (vector-length:vec _v_3623_3626)) 40 _v_3623_3626 _i_3623_3626) (_check! (>=:fix:fix _i_3623_3626 0) 40 _v_3623_3626 _i_3623_3626) (vector-ref:trusted _v_3623_3626 _i_3623_3626))) _addr_3622 _instr_3622)))) 'disassemble-instruction))))
(let () (begin (set! print-instructions (lambda (_ilist_1 _ _rest_1) (let ((_print-ilist_4 (unspecified)) (_larceny-names?_4 (unspecified)) (_port_4 (unspecified))) (begin (set! _print-ilist_4 (lambda (_ilist_5 _a_5) (if (null? _ilist_5) '() (begin (display (format-instruction (let ((_x_6_9 _ilist_5)) (begin (_check! (pair? _x_6_9) 0 _x_6_9) (car:pair _x_6_9))) _a_5 _larceny-names?_4) _port_4) (newline _port_4) (_print-ilist_4 (let ((_x_10_13 _ilist_5)) (begin (_check! (pair? _x_10_13) 1 _x_10_13) (cdr:pair _x_10_13))) (+ _a_5 4)))))) (set! _larceny-names?_4 #t) (set! _port_4 (current-output-port)) (let () (let ((_loop_3_15_18 (unspecified))) (begin (set! _loop_3_15_18 (lambda (_rest_19) (if (null? _rest_19) (if #f #f (unspecified)) (begin (begin #t (if (port? (let ((_x_23_26 _rest_19)) (begin (_check! (pair? _x_23_26) 0 _x_23_26) (car:pair _x_23_26)))) (set! _port_4 (let ((_x_27_30 _rest_19)) (begin (_check! (pair? _x_27_30) 0 _x_27_30) (car:pair _x_27_30)))) (if (eq? (let ((_x_32_35 _rest_19)) (begin (_check! (pair? _x_32_35) 0 _x_32_35) (car:pair _x_32_35))) 'native-names) (set! _larceny-names?_4 #f) (unspecified)))) (_loop_3_15_18 (let ((_x_36_39 _rest_19)) (begin (_check! (pair? _x_36_39) 1 _x_36_39) (cdr:pair _x_36_39)))))))) (_loop_3_15_18 _rest_1)))) (_print-ilist_4 _ilist_1 0))))) 'print-instructions))
(let () (begin (set! format-instruction (undefined)) 'format-instruction))
(let () (begin (set! *format-instructions-pretty* #t) '*format-instructions-pretty*))
(let () (let () (let ((_format-instr_4 (unspecified)) (_fpop_4 (unspecified)) (_wr_4 (unspecified)) (_rd_4 (unspecified)) (_call_4 (unspecified)) (_jmplr_4 (unspecified)) (_jmpli_4 (unspecified)) (_bimm_4 (unspecified)) (_lrr_4 (unspecified)) (_lir_4 (unspecified)) (_srr_4 (unspecified)) (_sir_4 (unspecified)) (_rir_4 (unspecified)) (_rrr_4 (unspecified)) (_sethi_4 (unspecified)) (_srcreg_4 (unspecified)) (_plus/minus_4 (unspecified)) (_millicode-call_4 (unspecified)) (_millicode-name_4 (unspecified)) (_heximm_4 (unspecified)) (_float-register-name_4 (unspecified)) (_larceny-register-name_4 (unspecified)) (_use-larceny-registers_4 (unspecified)) (_millicode-procs_4 (unspecified)) (_op_4 (unspecified)) (_op1_4 (unspecified)) (_op2_4 (unspecified)) (_op3_4 (unspecified)) (_tabstring_4 (unspecified)) (_larceny-register-table_4 (unspecified)) (_sparc-register-table_4 (unspecified))) (begin (set! _format-instr_4 (lambda (_i_5 _a_5 _larceny-names?_5) (begin (set! _use-larceny-registers_4 _larceny-names?_5) (let ((_m_8 (let ((_x_21_24 _i_5)) (begin (_check! (pair? _x_21_24) 0 _x_21_24) (car:pair _x_21_24))))) (string-append (number->string _a_5) _tabstring_4 (symbol->string (mnemonic:name _m_8)) (if (mnemonic:annul? _m_8) ",a" "") _tabstring_4 (if (mnemonic:store? _m_8) (if (mnemonic:immediate? _m_8) (_sir_4 _i_5) (_srr_4 _i_5)) (if (mnemonic:load? _m_8) (if (mnemonic:immediate? _m_8) (_lir_4 _i_5) (_lrr_4 _i_5)) (if (mnemonic:fpop? _m_8) (_fpop_4 _i_5 (mnemonic:op2? _m_8) (mnemonic:op3? _m_8)) (if (mnemonic:branch? _m_8) (_bimm_4 _i_5 _a_5) (if (mnemonic=? _m_8 'sethi) (_sethi_4 _i_5) (if (mnemonic=? _m_8 'nop) "" (if (mnemonic=? _m_8 'jmpl) (if (mnemonic:immediate? _m_8) (_jmpli_4 _i_5) (_jmplr_4 _i_5)) (if (mnemonic=? _m_8 'call) (_call_4 _i_5 _a_5) (if (mnemonic=? _m_8 'rd) (_rd_4 _i_5) (if (mnemonic=? _m_8 'wr) (_wr_4 _i_5 (mnemonic:immediate? _m_8)) (if (mnemonic:immediate? _m_8) (_rir_4 _i_5) (_rrr_4 _i_5))))))))))))))))) (set! _fpop_4 (lambda (_instr_25 _op2-used?_25 _op3-used?_25) (string-append (_float-register-name_4 (_op1_4 _instr_25)) ", " (if (if _op2-used?_25 _op3-used?_25 #f) (string-append (_float-register-name_4 (_op2_4 _instr_25)) ", " (_float-register-name_4 (_op3_4 _instr_25))) (if _op2-used?_25 (_float-register-name_4 (_op2_4 _instr_25)) (_float-register-name_4 (_op3_4 _instr_25))))))) (set! _wr_4 (lambda (_instr_31 _imm?_31) (if _imm?_31 (string-append (_larceny-register-name_4 (_op1_4 _instr_31)) ", " (number->string (_op2_4 _instr_31)) ", %y" (_larceny-register-name_4 (_op3_4 _instr_31))) (string-append (_larceny-register-name_4 (_op1_4 _instr_31)) ", " (_larceny-register-name_4 (_op2_4 _instr_31)) ", %y")))) (set! _rd_4 (lambda (_instr_32) (string-append "%y, " (_srcreg_4 _instr_32 _op3_4)))) (set! _call_4 (lambda (_instr_33 _addr_33) (string-append "#" (number->string (+ (_op1_4 _instr_33) _addr_33))))) (set! _jmplr_4 (lambda (_instr_34) (string-append (_larceny-register-name_4 (_op1_4 _instr_34)) "+" (_larceny-register-name_4 (_op2_4 _instr_34)) ", " (_larceny-register-name_4 (_op3_4 _instr_34))))) (set! _jmpli_4 (lambda (_instr_35) (string-append (_larceny-register-name_4 (_op1_4 _instr_35)) (_plus/minus_4 (_op2_4 _instr_35)) ", " (_larceny-register-name_4 (_op3_4 _instr_35)) (if (if (= (_op1_4 _instr_35) $r_globals) _use-larceny-registers_4 #f) (_millicode-call_4 (_op2_4 _instr_35)) (_heximm_4 (_op2_4 _instr_35)))))) (set! _bimm_4 (lambda (_instr_38 _addr_38) (string-append "#" (number->string (+ (_op1_4 _instr_38) _addr_38))))) (set! _lrr_4 (lambda (_instr_39) (string-append "[ " (_larceny-register-name_4 (_op1_4 _instr_39)) "+" (_larceny-register-name_4 (_op2_4 _instr_39)) " ], " (_srcreg_4 _instr_39 _op3_4)))) (set! _lir_4 (lambda (_instr_40) (string-append "[ " (_larceny-register-name_4 (_op1_4 _instr_40)) (_plus/minus_4 (_op2_4 _instr_40)) " ], " (_srcreg_4 _instr_40 _op3_4)))) (set! _srr_4 (lambda (_instr_41) (string-append (_srcreg_4 _instr_41 _op3_4) ", [ " (_larceny-register-name_4 (_op1_4 _instr_41)) "+" (_larceny-register-name_4 (_op2_4 _instr_41)) " ]"))) (set! _sir_4 (lambda (_instr_42) (string-append (_srcreg_4 _instr_42 _op3_4) ", [ " (_larceny-register-name_4 (_op1_4 _instr_42)) (_plus/minus_4 (_op2_4 _instr_42)) " ]"))) (set! _rir_4 (lambda (_instr_43) (string-append (_larceny-register-name_4 (_op1_4 _instr_43)) ", " (number->string (_op2_4 _instr_43)) ", " (_larceny-register-name_4 (_op3_4 _instr_43)) (_heximm_4 (_op2_4 _instr_43))))) (set! _rrr_4 (lambda (_instr_44) (string-append (_larceny-register-name_4 (_op1_4 _instr_44)) ", " (_larceny-register-name_4 (_op2_4 _instr_44)) ", " (_larceny-register-name_4 (_op3_4 _instr_44))))) (set! _sethi_4 (lambda (_instr_45) (string-append (number->string (* (_op1_4 _instr_45) 1024)) ", " (_larceny-register-name_4 (_op2_4 _instr_45)) (_heximm_4 (* (_op1_4 _instr_45) 1024))))) (set! _srcreg_4 (lambda (_instr_46 _extractor_46) (if (mnemonic:freg? (_op_4 _instr_46)) (_float-register-name_4 (_extractor_46 _instr_46)) (_larceny-register-name_4 (_extractor_46 _instr_46))))) (set! _plus/minus_4 (lambda (_n_47) (if (< _n_47 0) (string-append " - " (number->string (let ((_temp_49_52 _n_47)) (if (< _temp_49_52 0) (_-- _temp_49_52) _temp_49_52)))) (if (if (= _n_47 0) *format-instructions-pretty* #f) "" (string-append " + " (number->string _n_47)))))) (set! _millicode-call_4 (lambda (_offset_57) (string-append _tabstring_4 "! " (_millicode-name_4 _offset_57)))) (set! _millicode-name_4 (lambda (_offset_58 _ _rest_58) (if (null? _rest_58) (let ((_probe_61 (assv _offset_58 _millicode-procs_4))) (if _probe_61 (let ((_x_62_65 _probe_61)) (begin (_check! (pair? _x_62_65) 1 _x_62_65) (cdr:pair _x_62_65))) "[unknown]")) (set! _millicode-procs_4 (cons (cons _offset_58 (let ((_x_67_70 _rest_58)) (begin (_check! (pair? _x_67_70) 0 _x_67_70) (car:pair _x_67_70)))) _millicode-procs_4))))) (set! _heximm_4 (lambda (_n_71) (if (>= _n_71 16) (string-append _tabstring_4 "! 0x" (number->string _n_71 16)) ""))) (set! _float-register-name_4 (lambda (_reg_72) (string-append "%f" (number->string _reg_72)))) (set! _larceny-register-name_4 (lambda (_reg_73 _ _rest_73) (if (null? _rest_73) (let ((_temp_74_77 (if _use-larceny-registers_4 (let ((_v_85_88 _larceny-register-table_4) (_i_85_88 _reg_73)) (begin (_check! (fixnum? _i_85_88) 40 _v_85_88 _i_85_88) (_check! (vector? _v_85_88) 40 _v_85_88 _i_85_88) (_check! (<:fix:fix _i_85_88 (vector-length:vec _v_85_88)) 40 _v_85_88 _i_85_88) (_check! (>=:fix:fix _i_85_88 0) 40 _v_85_88 _i_85_88) (vector-ref:trusted _v_85_88 _i_85_88))) #f))) (if _temp_74_77 _temp_74_77 (let ((_v_79_82 _sparc-register-table_4) (_i_79_82 _reg_73)) (begin (_check! (fixnum? _i_79_82) 40 _v_79_82 _i_79_82) (_check! (vector? _v_79_82) 40 _v_79_82 _i_79_82) (_check! (<:fix:fix _i_79_82 (vector-length:vec _v_79_82)) 40 _v_79_82 _i_79_82) (_check! (>=:fix:fix _i_79_82 0) 40 _v_79_82 _i_79_82) (vector-ref:trusted _v_79_82 _i_79_82))))) (let ((_v_89_92 _larceny-register-table_4) (_i_89_92 _reg_73) (_x_89_92 (let ((_x_93_96 _rest_73)) (begin (_check! (pair? _x_93_96) 0 _x_93_96) (car:pair _x_93_96))))) (begin (_check! (fixnum? _i_89_92) 41 _v_89_92 _i_89_92 _x_89_92) (_check! (vector? _v_89_92) 41 _v_89_92 _i_89_92 _x_89_92) (_check! (<:fix:fix _i_89_92 (vector-length:vec _v_89_92)) 41 _v_89_92 _i_89_92 _x_89_92) (_check! (>=:fix:fix _i_89_92 0) 41 _v_89_92 _i_89_92 _x_89_92) (vector-set!:trusted _v_89_92 _i_89_92 _x_89_92)))))) (set! _use-larceny-registers_4 #t) (set! _millicode-procs_4 '()) (set! _op_4 car) (set! _op1_4 cadr) (set! _op2_4 caddr) (set! _op3_4 cadddr) (set! _tabstring_4 (string #\tab)) (set! _larceny-register-table_4 (make-vector 32 #f)) (set! _sparc-register-table_4 (let* ((_t_97_129_134 "%i7") (_t_97_128_137 "%i6") (_t_97_127_140 "%i5") (_t_97_126_143 "%i4") (_t_97_125_146 "%i3") (_t_97_124_149 "%i2") (_t_97_123_152 "%i1") (_t_97_122_155 "%i0") (_t_97_121_158 "%l7") (_t_97_120_161 "%l6") (_t_97_119_164 "%l5") (_t_97_118_167 "%l4") (_t_97_117_170 "%l3") (_t_97_116_173 "%l2") (_t_97_115_176 "%l1") (_t_97_114_179 "%l0") (_t_97_113_182 "%o7") (_t_97_112_185 "%o6") (_t_97_111_188 "%o5") (_t_97_110_191 "%o4") (_t_97_109_194 "%o3") (_t_97_108_197 "%o2") (_t_97_107_200 "%o1") (_t_97_106_203 "%o0") (_t_97_105_206 "%g7") (_t_97_104_209 "%g6") (_t_97_103_212 "%g5") (_t_97_102_215 "%g4") (_t_97_101_218 "%g3") (_t_97_100_221 "%g2") (_t_97_99_224 "%g1") (_t_97_98_227 "%g0") (_v_97_131_230 (make-vector 32 _t_97_129_134))) (let () (begin (let ((_v_234_237 _v_97_131_230) (_i_234_237 30) (_x_234_237 _t_97_128_137)) (begin (_check! (fixnum? _i_234_237) 41 _v_234_237 _i_234_237 _x_234_237) (_check! (vector? _v_234_237) 41 _v_234_237 _i_234_237 _x_234_237) (_check! (<:fix:fix _i_234_237 (vector-length:vec _v_234_237)) 41 _v_234_237 _i_234_237 _x_234_237) (_check! (>=:fix:fix _i_234_237 0) 41 _v_234_237 _i_234_237 _x_234_237) (vector-set!:trusted _v_234_237 _i_234_237 _x_234_237))) (let ((_v_238_241 _v_97_131_230) (_i_238_241 29) (_x_238_241 _t_97_127_140)) (begin (_check! (fixnum? _i_238_241) 41 _v_238_241 _i_238_241 _x_238_241) (_check! (vector? _v_238_241) 41 _v_238_241 _i_238_241 _x_238_241) (_check! (<:fix:fix _i_238_241 (vector-length:vec _v_238_241)) 41 _v_238_241 _i_238_241 _x_238_241) (_check! (>=:fix:fix _i_238_241 0) 41 _v_238_241 _i_238_241 _x_238_241) (vector-set!:trusted _v_238_241 _i_238_241 _x_238_241))) (let ((_v_242_245 _v_97_131_230) (_i_242_245 28) (_x_242_245 _t_97_126_143)) (begin (_check! (fixnum? _i_242_245) 41 _v_242_245 _i_242_245 _x_242_245) (_check! (vector? _v_242_245) 41 _v_242_245 _i_242_245 _x_242_245) (_check! (<:fix:fix _i_242_245 (vector-length:vec _v_242_245)) 41 _v_242_245 _i_242_245 _x_242_245) (_check! (>=:fix:fix _i_242_245 0) 41 _v_242_245 _i_242_245 _x_242_245) (vector-set!:trusted _v_242_245 _i_242_245 _x_242_245))) (let ((_v_246_249 _v_97_131_230) (_i_246_249 27) (_x_246_249 _t_97_125_146)) (begin (_check! (fixnum? _i_246_249) 41 _v_246_249 _i_246_249 _x_246_249) (_check! (vector? _v_246_249) 41 _v_246_249 _i_246_249 _x_246_249) (_check! (<:fix:fix _i_246_249 (vector-length:vec _v_246_249)) 41 _v_246_249 _i_246_249 _x_246_249) (_check! (>=:fix:fix _i_246_249 0) 41 _v_246_249 _i_246_249 _x_246_249) (vector-set!:trusted _v_246_249 _i_246_249 _x_246_249))) (let ((_v_250_253 _v_97_131_230) (_i_250_253 26) (_x_250_253 _t_97_124_149)) (begin (_check! (fixnum? _i_250_253) 41 _v_250_253 _i_250_253 _x_250_253) (_check! (vector? _v_250_253) 41 _v_250_253 _i_250_253 _x_250_253) (_check! (<:fix:fix _i_250_253 (vector-length:vec _v_250_253)) 41 _v_250_253 _i_250_253 _x_250_253) (_check! (>=:fix:fix _i_250_253 0) 41 _v_250_253 _i_250_253 _x_250_253) (vector-set!:trusted _v_250_253 _i_250_253 _x_250_253))) (let ((_v_254_257 _v_97_131_230) (_i_254_257 25) (_x_254_257 _t_97_123_152)) (begin (_check! (fixnum? _i_254_257) 41 _v_254_257 _i_254_257 _x_254_257) (_check! (vector? _v_254_257) 41 _v_254_257 _i_254_257 _x_254_257) (_check! (<:fix:fix _i_254_257 (vector-length:vec _v_254_257)) 41 _v_254_257 _i_254_257 _x_254_257) (_check! (>=:fix:fix _i_254_257 0) 41 _v_254_257 _i_254_257 _x_254_257) (vector-set!:trusted _v_254_257 _i_254_257 _x_254_257))) (let ((_v_258_261 _v_97_131_230) (_i_258_261 24) (_x_258_261 _t_97_122_155)) (begin (_check! (fixnum? _i_258_261) 41 _v_258_261 _i_258_261 _x_258_261) (_check! (vector? _v_258_261) 41 _v_258_261 _i_258_261 _x_258_261) (_check! (<:fix:fix _i_258_261 (vector-length:vec _v_258_261)) 41 _v_258_261 _i_258_261 _x_258_261) (_check! (>=:fix:fix _i_258_261 0) 41 _v_258_261 _i_258_261 _x_258_261) (vector-set!:trusted _v_258_261 _i_258_261 _x_258_261))) (let ((_v_262_265 _v_97_131_230) (_i_262_265 23) (_x_262_265 _t_97_121_158)) (begin (_check! (fixnum? _i_262_265) 41 _v_262_265 _i_262_265 _x_262_265) (_check! (vector? _v_262_265) 41 _v_262_265 _i_262_265 _x_262_265) (_check! (<:fix:fix _i_262_265 (vector-length:vec _v_262_265)) 41 _v_262_265 _i_262_265 _x_262_265) (_check! (>=:fix:fix _i_262_265 0) 41 _v_262_265 _i_262_265 _x_262_265) (vector-set!:trusted _v_262_265 _i_262_265 _x_262_265))) (let ((_v_266_269 _v_97_131_230) (_i_266_269 22) (_x_266_269 _t_97_120_161)) (begin (_check! (fixnum? _i_266_269) 41 _v_266_269 _i_266_269 _x_266_269) (_check! (vector? _v_266_269) 41 _v_266_269 _i_266_269 _x_266_269) (_check! (<:fix:fix _i_266_269 (vector-length:vec _v_266_269)) 41 _v_266_269 _i_266_269 _x_266_269) (_check! (>=:fix:fix _i_266_269 0) 41 _v_266_269 _i_266_269 _x_266_269) (vector-set!:trusted _v_266_269 _i_266_269 _x_266_269))) (let ((_v_270_273 _v_97_131_230) (_i_270_273 21) (_x_270_273 _t_97_119_164)) (begin (_check! (fixnum? _i_270_273) 41 _v_270_273 _i_270_273 _x_270_273) (_check! (vector? _v_270_273) 41 _v_270_273 _i_270_273 _x_270_273) (_check! (<:fix:fix _i_270_273 (vector-length:vec _v_270_273)) 41 _v_270_273 _i_270_273 _x_270_273) (_check! (>=:fix:fix _i_270_273 0) 41 _v_270_273 _i_270_273 _x_270_273) (vector-set!:trusted _v_270_273 _i_270_273 _x_270_273))) (let ((_v_274_277 _v_97_131_230) (_i_274_277 20) (_x_274_277 _t_97_118_167)) (begin (_check! (fixnum? _i_274_277) 41 _v_274_277 _i_274_277 _x_274_277) (_check! (vector? _v_274_277) 41 _v_274_277 _i_274_277 _x_274_277) (_check! (<:fix:fix _i_274_277 (vector-length:vec _v_274_277)) 41 _v_274_277 _i_274_277 _x_274_277) (_check! (>=:fix:fix _i_274_277 0) 41 _v_274_277 _i_274_277 _x_274_277) (vector-set!:trusted _v_274_277 _i_274_277 _x_274_277))) (let ((_v_278_281 _v_97_131_230) (_i_278_281 19) (_x_278_281 _t_97_117_170)) (begin (_check! (fixnum? _i_278_281) 41 _v_278_281 _i_278_281 _x_278_281) (_check! (vector? _v_278_281) 41 _v_278_281 _i_278_281 _x_278_281) (_check! (<:fix:fix _i_278_281 (vector-length:vec _v_278_281)) 41 _v_278_281 _i_278_281 _x_278_281) (_check! (>=:fix:fix _i_278_281 0) 41 _v_278_281 _i_278_281 _x_278_281) (vector-set!:trusted _v_278_281 _i_278_281 _x_278_281))) (let ((_v_282_285 _v_97_131_230) (_i_282_285 18) (_x_282_285 _t_97_116_173)) (begin (_check! (fixnum? _i_282_285) 41 _v_282_285 _i_282_285 _x_282_285) (_check! (vector? _v_282_285) 41 _v_282_285 _i_282_285 _x_282_285) (_check! (<:fix:fix _i_282_285 (vector-length:vec _v_282_285)) 41 _v_282_285 _i_282_285 _x_282_285) (_check! (>=:fix:fix _i_282_285 0) 41 _v_282_285 _i_282_285 _x_282_285) (vector-set!:trusted _v_282_285 _i_282_285 _x_282_285))) (let ((_v_286_289 _v_97_131_230) (_i_286_289 17) (_x_286_289 _t_97_115_176)) (begin (_check! (fixnum? _i_286_289) 41 _v_286_289 _i_286_289 _x_286_289) (_check! (vector? _v_286_289) 41 _v_286_289 _i_286_289 _x_286_289) (_check! (<:fix:fix _i_286_289 (vector-length:vec _v_286_289)) 41 _v_286_289 _i_286_289 _x_286_289) (_check! (>=:fix:fix _i_286_289 0) 41 _v_286_289 _i_286_289 _x_286_289) (vector-set!:trusted _v_286_289 _i_286_289 _x_286_289))) (let ((_v_290_293 _v_97_131_230) (_i_290_293 16) (_x_290_293 _t_97_114_179)) (begin (_check! (fixnum? _i_290_293) 41 _v_290_293 _i_290_293 _x_290_293) (_check! (vector? _v_290_293) 41 _v_290_293 _i_290_293 _x_290_293) (_check! (<:fix:fix _i_290_293 (vector-length:vec _v_290_293)) 41 _v_290_293 _i_290_293 _x_290_293) (_check! (>=:fix:fix _i_290_293 0) 41 _v_290_293 _i_290_293 _x_290_293) (vector-set!:trusted _v_290_293 _i_290_293 _x_290_293))) (let ((_v_294_297 _v_97_131_230) (_i_294_297 15) (_x_294_297 _t_97_113_182)) (begin (_check! (fixnum? _i_294_297) 41 _v_294_297 _i_294_297 _x_294_297) (_check! (vector? _v_294_297) 41 _v_294_297 _i_294_297 _x_294_297) (_check! (<:fix:fix _i_294_297 (vector-length:vec _v_294_297)) 41 _v_294_297 _i_294_297 _x_294_297) (_check! (>=:fix:fix _i_294_297 0) 41 _v_294_297 _i_294_297 _x_294_297) (vector-set!:trusted _v_294_297 _i_294_297 _x_294_297))) (let ((_v_298_301 _v_97_131_230) (_i_298_301 14) (_x_298_301 _t_97_112_185)) (begin (_check! (fixnum? _i_298_301) 41 _v_298_301 _i_298_301 _x_298_301) (_check! (vector? _v_298_301) 41 _v_298_301 _i_298_301 _x_298_301) (_check! (<:fix:fix _i_298_301 (vector-length:vec _v_298_301)) 41 _v_298_301 _i_298_301 _x_298_301) (_check! (>=:fix:fix _i_298_301 0) 41 _v_298_301 _i_298_301 _x_298_301) (vector-set!:trusted _v_298_301 _i_298_301 _x_298_301))) (let ((_v_302_305 _v_97_131_230) (_i_302_305 13) (_x_302_305 _t_97_111_188)) (begin (_check! (fixnum? _i_302_305) 41 _v_302_305 _i_302_305 _x_302_305) (_check! (vector? _v_302_305) 41 _v_302_305 _i_302_305 _x_302_305) (_check! (<:fix:fix _i_302_305 (vector-length:vec _v_302_305)) 41 _v_302_305 _i_302_305 _x_302_305) (_check! (>=:fix:fix _i_302_305 0) 41 _v_302_305 _i_302_305 _x_302_305) (vector-set!:trusted _v_302_305 _i_302_305 _x_302_305))) (let ((_v_306_309 _v_97_131_230) (_i_306_309 12) (_x_306_309 _t_97_110_191)) (begin (_check! (fixnum? _i_306_309) 41 _v_306_309 _i_306_309 _x_306_309) (_check! (vector? _v_306_309) 41 _v_306_309 _i_306_309 _x_306_309) (_check! (<:fix:fix _i_306_309 (vector-length:vec _v_306_309)) 41 _v_306_309 _i_306_309 _x_306_309) (_check! (>=:fix:fix _i_306_309 0) 41 _v_306_309 _i_306_309 _x_306_309) (vector-set!:trusted _v_306_309 _i_306_309 _x_306_309))) (let ((_v_310_313 _v_97_131_230) (_i_310_313 11) (_x_310_313 _t_97_109_194)) (begin (_check! (fixnum? _i_310_313) 41 _v_310_313 _i_310_313 _x_310_313) (_check! (vector? _v_310_313) 41 _v_310_313 _i_310_313 _x_310_313) (_check! (<:fix:fix _i_310_313 (vector-length:vec _v_310_313)) 41 _v_310_313 _i_310_313 _x_310_313) (_check! (>=:fix:fix _i_310_313 0) 41 _v_310_313 _i_310_313 _x_310_313) (vector-set!:trusted _v_310_313 _i_310_313 _x_310_313))) (let ((_v_314_317 _v_97_131_230) (_i_314_317 10) (_x_314_317 _t_97_108_197)) (begin (_check! (fixnum? _i_314_317) 41 _v_314_317 _i_314_317 _x_314_317) (_check! (vector? _v_314_317) 41 _v_314_317 _i_314_317 _x_314_317) (_check! (<:fix:fix _i_314_317 (vector-length:vec _v_314_317)) 41 _v_314_317 _i_314_317 _x_314_317) (_check! (>=:fix:fix _i_314_317 0) 41 _v_314_317 _i_314_317 _x_314_317) (vector-set!:trusted _v_314_317 _i_314_317 _x_314_317))) (let ((_v_318_321 _v_97_131_230) (_i_318_321 9) (_x_318_321 _t_97_107_200)) (begin (_check! (fixnum? _i_318_321) 41 _v_318_321 _i_318_321 _x_318_321) (_check! (vector? _v_318_321) 41 _v_318_321 _i_318_321 _x_318_321) (_check! (<:fix:fix _i_318_321 (vector-length:vec _v_318_321)) 41 _v_318_321 _i_318_321 _x_318_321) (_check! (>=:fix:fix _i_318_321 0) 41 _v_318_321 _i_318_321 _x_318_321) (vector-set!:trusted _v_318_321 _i_318_321 _x_318_321))) (let ((_v_322_325 _v_97_131_230) (_i_322_325 8) (_x_322_325 _t_97_106_203)) (begin (_check! (fixnum? _i_322_325) 41 _v_322_325 _i_322_325 _x_322_325) (_check! (vector? _v_322_325) 41 _v_322_325 _i_322_325 _x_322_325) (_check! (<:fix:fix _i_322_325 (vector-length:vec _v_322_325)) 41 _v_322_325 _i_322_325 _x_322_325) (_check! (>=:fix:fix _i_322_325 0) 41 _v_322_325 _i_322_325 _x_322_325) (vector-set!:trusted _v_322_325 _i_322_325 _x_322_325))) (let ((_v_326_329 _v_97_131_230) (_i_326_329 7) (_x_326_329 _t_97_105_206)) (begin (_check! (fixnum? _i_326_329) 41 _v_326_329 _i_326_329 _x_326_329) (_check! (vector? _v_326_329) 41 _v_326_329 _i_326_329 _x_326_329) (_check! (<:fix:fix _i_326_329 (vector-length:vec _v_326_329)) 41 _v_326_329 _i_326_329 _x_326_329) (_check! (>=:fix:fix _i_326_329 0) 41 _v_326_329 _i_326_329 _x_326_329) (vector-set!:trusted _v_326_329 _i_326_329 _x_326_329))) (let ((_v_330_333 _v_97_131_230) (_i_330_333 6) (_x_330_333 _t_97_104_209)) (begin (_check! (fixnum? _i_330_333) 41 _v_330_333 _i_330_333 _x_330_333) (_check! (vector? _v_330_333) 41 _v_330_333 _i_330_333 _x_330_333) (_check! (<:fix:fix _i_330_333 (vector-length:vec _v_330_333)) 41 _v_330_333 _i_330_333 _x_330_333) (_check! (>=:fix:fix _i_330_333 0) 41 _v_330_333 _i_330_333 _x_330_333) (vector-set!:trusted _v_330_333 _i_330_333 _x_330_333))) (let ((_v_334_337 _v_97_131_230) (_i_334_337 5) (_x_334_337 _t_97_103_212)) (begin (_check! (fixnum? _i_334_337) 41 _v_334_337 _i_334_337 _x_334_337) (_check! (vector? _v_334_337) 41 _v_334_337 _i_334_337 _x_334_337) (_check! (<:fix:fix _i_334_337 (vector-length:vec _v_334_337)) 41 _v_334_337 _i_334_337 _x_334_337) (_check! (>=:fix:fix _i_334_337 0) 41 _v_334_337 _i_334_337 _x_334_337) (vector-set!:trusted _v_334_337 _i_334_337 _x_334_337))) (let ((_v_338_341 _v_97_131_230) (_i_338_341 4) (_x_338_341 _t_97_102_215)) (begin (_check! (fixnum? _i_338_341) 41 _v_338_341 _i_338_341 _x_338_341) (_check! (vector? _v_338_341) 41 _v_338_341 _i_338_341 _x_338_341) (_check! (<:fix:fix _i_338_341 (vector-length:vec _v_338_341)) 41 _v_338_341 _i_338_341 _x_338_341) (_check! (>=:fix:fix _i_338_341 0) 41 _v_338_341 _i_338_341 _x_338_341) (vector-set!:trusted _v_338_341 _i_338_341 _x_338_341))) (let ((_v_342_345 _v_97_131_230) (_i_342_345 3) (_x_342_345 _t_97_101_218)) (begin (_check! (fixnum? _i_342_345) 41 _v_342_345 _i_342_345 _x_342_345) (_check! (vector? _v_342_345) 41 _v_342_345 _i_342_345 _x_342_345) (_check! (<:fix:fix _i_342_345 (vector-length:vec _v_342_345)) 41 _v_342_345 _i_342_345 _x_342_345) (_check! (>=:fix:fix _i_342_345 0) 41 _v_342_345 _i_342_345 _x_342_345) (vector-set!:trusted _v_342_345 _i_342_345 _x_342_345))) (let ((_v_346_349 _v_97_131_230) (_i_346_349 2) (_x_346_349 _t_97_100_221)) (begin (_check! (fixnum? _i_346_349) 41 _v_346_349 _i_346_349 _x_346_349) (_check! (vector? _v_346_349) 41 _v_346_349 _i_346_349 _x_346_349) (_check! (<:fix:fix _i_346_349 (vector-length:vec _v_346_349)) 41 _v_346_349 _i_346_349 _x_346_349) (_check! (>=:fix:fix _i_346_349 0) 41 _v_346_349 _i_346_349 _x_346_349) (vector-set!:trusted _v_346_349 _i_346_349 _x_346_349))) (let ((_v_350_353 _v_97_131_230) (_i_350_353 1) (_x_350_353 _t_97_99_224)) (begin (_check! (fixnum? _i_350_353) 41 _v_350_353 _i_350_353 _x_350_353) (_check! (vector? _v_350_353) 41 _v_350_353 _i_350_353 _x_350_353) (_check! (<:fix:fix _i_350_353 (vector-length:vec _v_350_353)) 41 _v_350_353 _i_350_353 _x_350_353) (_check! (>=:fix:fix _i_350_353 0) 41 _v_350_353 _i_350_353 _x_350_353) (vector-set!:trusted _v_350_353 _i_350_353 _x_350_353))) (let ((_v_354_357 _v_97_131_230) (_i_354_357 0) (_x_354_357 _t_97_98_227)) (begin (_check! (fixnum? _i_354_357) 41 _v_354_357 _i_354_357 _x_354_357) (_check! (vector? _v_354_357) 41 _v_354_357 _i_354_357 _x_354_357) (_check! (<:fix:fix _i_354_357 (vector-length:vec _v_354_357)) 41 _v_354_357 _i_354_357 _x_354_357) (_check! (>=:fix:fix _i_354_357 0) 41 _v_354_357 _i_354_357 _x_354_357) (vector-set!:trusted _v_354_357 _i_354_357 _x_354_357))) _v_97_131_230)))) (_larceny-register-name_4 $r_tmp0 "%tmp0") (_larceny-register-name_4 $r_result "%result") (_larceny-register-name_4 $r_argreg2 "%argreg2") (_larceny-register-name_4 $r_argreg3 "%argreg3") (_larceny-register-name_4 $r_tmp1 "%tmp1") (_larceny-register-name_4 $r_tmp2 "%tmp2") (_larceny-register-name_4 $r_reg0 "%r0") (_larceny-register-name_4 $r_reg1 "%r1") (_larceny-register-name_4 $r_reg2 "%r2") (_larceny-register-name_4 $r_reg3 "%r3") (_larceny-register-name_4 $r_reg4 "%r4") (_larceny-register-name_4 $r_reg5 "%r5") (_larceny-register-name_4 $r_reg6 "%r6") (_larceny-register-name_4 $r_reg7 "%r7") (_larceny-register-name_4 $r_e-top "%etop") (_larceny-register-name_4 $r_e-limit "%elim") (_larceny-register-name_4 $r_timer "%timer") (_larceny-register-name_4 $r_millicode "%millicode") (_larceny-register-name_4 $r_globals "%globals") (_larceny-register-name_4 $r_stkp "%stkp") (_millicode-name_4 $m_alloc "alloc") (_millicode-name_4 $m_alloci "alloci") (_millicode-name_4 $m_gc "gc") (_millicode-name_4 $m_addtrans "addtrans") (_millicode-name_4 $m_stkoflow "stkoflow") (_millicode-name_4 $m_stkuflow "stkuflow") (_millicode-name_4 $m_creg "creg") (_millicode-name_4 $m_creg-set! "creg-set!") (_millicode-name_4 $m_add "+") (_millicode-name_4 $m_subtract "- (binary)") (_millicode-name_4 $m_multiply "*") (_millicode-name_4 $m_quotient "quotient") (_millicode-name_4 $m_remainder "remainder") (_millicode-name_4 $m_divide "/") (_millicode-name_4 $m_modulo "modulo") (_millicode-name_4 $m_negate "- (unary)") (_millicode-name_4 $m_numeq "=") (_millicode-name_4 $m_numlt "<") (_millicode-name_4 $m_numle "<=") (_millicode-name_4 $m_numgt ">") (_millicode-name_4 $m_numge ">=") (_millicode-name_4 $m_zerop "zero?") (_millicode-name_4 $m_complexp "complex?") (_millicode-name_4 $m_realp "real?") (_millicode-name_4 $m_rationalp "rational?") (_millicode-name_4 $m_integerp "integer?") (_millicode-name_4 $m_exactp "exact?") (_millicode-name_4 $m_inexactp "inexact?") (_millicode-name_4 $m_exact->inexact "exact->inexact") (_millicode-name_4 $m_inexact->exact "inexact->exact") (_millicode-name_4 $m_make-rectangular "make-rectangular") (_millicode-name_4 $m_real-part "real-part") (_millicode-name_4 $m_imag-part "imag-part") (_millicode-name_4 $m_sqrt "sqrt") (_millicode-name_4 $m_round "round") (_millicode-name_4 $m_truncate "truncate") (_millicode-name_4 $m_apply "apply") (_millicode-name_4 $m_varargs "varargs") (_millicode-name_4 $m_typetag "typetag") (_millicode-name_4 $m_typetag-set "typetag-set") (_millicode-name_4 $m_break "break") (_millicode-name_4 $m_eqv "eqv?") (_millicode-name_4 $m_partial-list->vector "partial-list->vector") (_millicode-name_4 $m_timer-exception "timer-exception") (_millicode-name_4 $m_exception "exception") (_millicode-name_4 $m_singlestep "singlestep") (_millicode-name_4 $m_syscall "syscall") (_millicode-name_4 $m_bvlcmp "bvlcmp") (_millicode-name_4 $m_enable-interrupts "enable-interrupts") (_millicode-name_4 $m_disable-interrupts "disable-interrupts") (_millicode-name_4 $m_alloc-bv "alloc-bv") (_millicode-name_4 $m_global-ex "global-exception") (_millicode-name_4 $m_invoke-ex "invoke-exception") (_millicode-name_4 $m_global-invoke-ex "global-invoke-exception") (_millicode-name_4 $m_argc-ex "argc-exception") (set! format-instruction _format-instr_4) 'format-instruction))))
(let () (begin (set! twobit-benchmark (lambda _rest_1 (let ((_k_4 (if (null? _rest_1) 1 (let ((_x_7_10 _rest_1)) (begin (_check! (pair? _x_7_10) 0 _x_7_10) (car:pair _x_7_10)))))) (begin (compiler-switches 'fast-safe) (benchmark-block-mode #t) (run-benchmark "twobit" _k_4 (lambda () (compile-file "benchmarks/twobit-input_sch")) (lambda (_result_6) #t)))))) 'twobit-benchmark))
