;;;;                                                          -*- scheme -*-
;;;; fluids.test --- test suite for fluid values
;;;;
;;;; Copyright (C) 2010 Free Software Foundation, Inc.
;;;; 
;;;; This library is free software; you can redistribute it and/or
;;;; modify it under the terms of the GNU Lesser General Public
;;;; License as published by the Free Software Foundation; either
;;;; version 3 of the License, or (at your option) any later version.
;;;; 
;;;; This library is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;;; Lesser General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU Lesser General Public
;;;; License along with this library; if not, write to the Free Software
;;;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

(define-module (test-suite test-fluids)
  :use-module (test-suite lib))


(define a (make-fluid))
(define b (make-fluid))
(define c #f)

(with-test-prefix "initial fluid values"
  (pass-if "fluid-ref uninitialized fluid is #f"
    (not (fluid-ref a))))

(with-test-prefix "with-fluids with non-fluid"
  (pass-if-exception "exception raised if nonfluid passed to with-fluids"
                     exception:wrong-type-arg
    (with-fluids ((c #t))
      c))
  
  (expect-fail "fluids not modified if nonfluid passed to with-fluids"
    (catch 'wrong-type-arg
      (lambda ()
        (with-fluids ((a #t)
                      (c #t))
          #f))
      (lambda _
        (not (fluid-ref a))))))

(with-test-prefix "with-fluids with duplicate fluid"
  (pass-if "last value wins"
    (with-fluids ((a 1)
                  (a 2))
      (eqv? (fluid-ref a) 2)))
  
  (pass-if "original value restored"
    (and (with-fluids ((a 1)
                       (a 2))
           (eqv? (fluid-ref a) 2))
         (eqv? (fluid-ref a) #f))))
