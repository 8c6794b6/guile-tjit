;;;; symbols.test --- test suite for Guile's symbols    -*- scheme -*-
;;;;
;;;; Copyright (C) 2001, 2006, 2008, 2009, 2011 Free Software Foundation, Inc.
;;;; 
;;;; This library is free software; you can redistribute it and/or
;;;; modify it under the terms of the GNU Lesser General Public
;;;; License as published by the Free Software Foundation; either
;;;; version 3 of the License, or (at your option) any later version.
;;;; 
;;;; This library is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;;; Lesser General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU Lesser General Public
;;;; License along with this library; if not, write to the Free Software
;;;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

(define-module (test-suite test-symbols)
  #:use-module (test-suite lib)
  #:use-module (ice-9 documentation))


;;;
;;; miscellaneous
;;;

(define exception:immutable-string
  (cons 'misc-error "^string is read-only"))

(define (documented? object)
  (not (not (object-documentation object))))

(define (symbol-length s)
  (string-length (symbol->string s)))

;;
;; symbol internals
;;

(with-test-prefix "symbol internals"

  (pass-if "length of new symbol same as stringbuf"
    (let ((s 'def))
      (= (symbol-length s) (assq-ref (%symbol-dump s) 'stringbuf-length))))

  (pass-if "contents of new symbol same as stringbuf"
    (let ((s 'ghi))
      (string=? (symbol->string s) 
                (assq-ref (%symbol-dump s) 'stringbuf-chars))))


  (with-test-prefix "hashes"
  
    (pass-if "equal symbols have equal hashes"
      (let ((s1 'mux)
            (s2 'mux))
        (= (assq-ref (%symbol-dump s1) 'hash)
           (assq-ref (%symbol-dump s2) 'hash))))

    (pass-if "different symbols have different hashes"
      (let ((s1 'mux)
            (s2 'muy))
        (not (= (assq-ref (%symbol-dump s1) 'hash)
                (assq-ref (%symbol-dump s2) 'hash))))))

  (with-test-prefix "encodings"

    (pass-if "the null symbol is Latin-1 encoded"
      (let ((s '#{}#))
        (not (assq-ref (%symbol-dump s) 'stringbuf-wide))))

    (pass-if "ASCII symbols are Latin-1 encoded"
      (let ((s 'jkl))
        (not (assq-ref (%symbol-dump s) 'stringbuf-wide))))

    (pass-if "Latin-1 symbols are Latin-1 encoded"
      (let ((s (string->symbol "\xC0\xC1\xC2")))
        (not (assq-ref (%symbol-dump s) 'stringbuf-wide))))

    (pass-if "BMP symbols are UCS-4 encoded"
      (let ((s (string->symbol "\u0100\u0101\x0102")))
        (assq-ref (%symbol-dump s) 'stringbuf-wide)))

    (pass-if "SMP symbols are UCS-4 encoded"
      (let ((s (string->symbol "\U010300\u010301\x010302")))
        (assq-ref (%symbol-dump s) 'stringbuf-wide)))))

;;;
;;; symbol?
;;;

(with-test-prefix "symbol?"

  (pass-if "documented?"
    (documented? symbol?))

  (pass-if "string"
    (not (symbol? "foo")))

  (pass-if "symbol"
    (symbol? 'foo)))

;;;
;;; wide symbols
;;;

(with-test-prefix "BMP symbols"

  (pass-if "BMP symbol's string"
    (and (= 4 (string-length "abc\u0100"))
         (string=? "abc\u0100" 
                   (symbol->string (string->symbol "abc\u0100"))))))

;;;
;;; symbol->string
;;;

(with-test-prefix "symbol->string"

  (pass-if-exception "result is an immutable string"
    exception:immutable-string
    (string-set! (symbol->string 'abc) 1 #\space)))


;;;
;;; gensym
;;;

(with-test-prefix "gensym"

  (pass-if "documented?"
    (documented? gensym))

  (pass-if "produces a symbol"
    (symbol? (gensym)))

  (pass-if "produces a fresh symbol"
    (not (eq? (gensym) (gensym))))

  (pass-if "accepts a string prefix"
    (symbol? (gensym "foo")))

  (pass-if-exception "does not accept a symbol prefix"
    exception:wrong-type-arg
    (gensym 'foo))

  (pass-if "accepts long prefices"
    (symbol? (gensym (make-string 4000 #\!))))

  (pass-if "accepts embedded NULs"
    (> (string-length (symbol->string (gensym "foo\0bar\0braz\0foo\0bar\0braz\0foo\0bar\0braz\0foo\0bar\0braz\0foo\0bar\0braz\0foo\0bar\0braz\0"))) 6)))

(with-test-prefix "extended read syntax"
  (pass-if (equal? "#{}#" (object->string (string->symbol ""))))
  (pass-if (equal? "a" (object->string (string->symbol "a"))))
  (pass-if (equal? "#{a b}#" (object->string (string->symbol "a b"))))
  (pass-if (equal? "#{\\x7d;}#" (object->string (string->symbol "}")))))
