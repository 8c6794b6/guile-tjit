;;;; Tests for tjit assembler -*- mode: scheme; coding: utf-8; -*-
;;;;
;;;;    Copyright (C) 2014, 2015, 2016 Free Software Foundation, Inc.
;;;;
;;;; This library is free software; you can redistribute it and/or
;;;; modify it under the terms of the GNU Lesser General Public
;;;; License as published by the Free Software Foundation; either
;;;; version 3 of the License, or (at your option) any later version.
;;;;
;;;; This library is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;;; Lesser General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU Lesser General Public
;;;; License along with this library; if not, write to the Free Software
;;;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

(define-module (tests tjit-assembler)
  #:use-module (test-suite lib)
  #:use-module (ice-9 match)
  #:use-module (rnrs bytevectors)
  #:use-module ((rnrs arithmetic fixnums) #:select (fixnum?))
  #:use-module (srfi srfi-9)
  #:use-module (system foreign)
  #:use-module (system vm native lightning)
  #:use-module (system vm native tjit assembler)
  #:use-module (system vm native tjit variables)
  #:use-module (system vm native tjit registers)
  #:use-module (system vm native tjit tjitc)
  #:use-module (system vm native tjit types))


;;;
;;; Auxiliary
;;;

(define code-buffer
  (make-bytevector 65536))

(define bailout-tag
  'bailout)

(define (reify-asm-variable x)
  (cond
   ((number? x)   (make-constant x))
   ((eq? x 'ret)  (make-gpr -1))
   ((eq? x 'arg1) (make-gpr -1))
   ((eq? x 'arg2) (make-gpr -2))
   (else
    (let* ((x/str (symbol->string x))
           (head (string-ref x/str 0))
           (tail (string->number (substring x/str 1))))
      (cond
       ((eq? head #\g) (make-gpr tail))
       ((eq? head #\f) (make-fpr tail))
       ((eq? head #\m) (make-memory tail))
       (else (error "unknown variable" x)))))))

(define (assemble-ops ops)
  (define (assemble ops exit)
    (let lp ((ops ops) (t (make-hash-table)) (acc '()))
      (match ops
        (((op-name . args) . ops)
         (let ((vars (map reify-asm-variable args)))
           (let lp ((vars vars))
             (match vars
               ((var . vars)
                (hashq-set! t var var)
                (lp vars))
               (_ (values))))
           (lp ops t (cons (cons op-name vars) acc))))
        (_
         ;; Call to inlined GC functions caused segfault when running
         ;; tests. Passing false to `gc-inline?' argument in `make-asm'.
         (let ((asm (make-asm t #f #f)))
           (set-asm-exit! asm exit)
           (let lp ((ops (reverse! acc)))
             (match ops
               (((op-name . vars) . ops)
                (cond
                 ((hashq-ref *native-prim-procedures* op-name)
                  => (lambda (proc)
                       (apply proc asm vars)
                       (lp ops)))
                 (else
                  (error "unknown op" op-name))))
               (_ (values)))))))))

  (with-jit-state
   (jit-prolog)
   (jit-frame (imm 8192))
   (jit-getarg %thread (jit-arg))
   (jit-getarg r0 (jit-arg))
   (jit-getarg r1 (jit-arg))
   (let ((exit (jit-forward)))
     (assemble ops exit)
     (jit-retr r0)
     (jit-link exit)
     (jit-movi r0 (scm->pointer bailout-tag))
     (jit-retr r0))
   (jit-epilog)
   (jit-realize)
   (let* ((size (jit-code-size))
          (_ (jit-set-code (bytevector->pointer code-buffer) (imm size)))
          (ptr (jit-emit))
          (raw-proc (pointer->procedure '* ptr '(* * *)))
          (proc (lambda (thread a b)
                  (pointer->scm (raw-proc (scm->pointer thread)
                                          (scm->pointer a)
                                          (scm->pointer b))))))
     ;; (jit-print)
     proc)))

(define (run-asm expr arg1 arg2)
  "Assemble EXPR as Scheme procedure, run with passing ARG1 and ARG2.

Arguments are passed as Scheme pointer, returned value will converted
from pointer to Scheme value.

Example:

  (run-asm `((%move g0 arg1)
             (%move g1 arg2)
             (%add g2 g0 g1)
             (%sub g2 g2 2)
             (%move ret g2))
           15 27)
  ;; ==> 42
"
  ((assemble-ops expr) (current-thread) arg1 arg2))

(define gprs '(g0 g4 g-3))
(define fprs '(f0 f4 f-3))
(define mems '(m0 m1 m2))

(define (gprs? x) (memq x gprs))
(define (fprs? x) (memq x fprs))
(define (mems? x) (memq x mems))

(define all-storages
  (append gprs fprs mems))

(define-syntax with-storages
  (syntax-rules ()
    ((_ () . body)
     (begin . body))
    ((_ (reg . regs) . body)
     (do ((rs all-storages (cdr rs)))
         ((null? rs))
       (let ((reg (car rs)))
         (with-storages regs . body))))))

;;;
;;; Initializations
;;;

(init-vm-tjit #f)
(make-bytevector-executable! code-buffer)


;;;
;;; Test codes
;;;

(define-record-type <foo>
  (make-foo a b c)
  foo?
  (a foo-a set-foo-a!)
  (b foo-b set-foo-b!)
  (c foo-c set-foo-c!))

(with-test-prefix "Guards"
  (for-each
   (match-lambda
     ((name op . rest)
      (with-test-prefix name
        (for-each
         (match-lambda
           ((arg1 arg2 expect)
            (with-test-prefix (format #f "~a ~a => ~a" arg1 arg2 expect)
              (with-storages (a b)
                (unless (eq? a b)
                  (pass-if-equal (format #f "a=~a b=~a" a b)
                      expect
                    (run-asm `((%move ,a arg1)
                               (%move ,b arg2)
                               (,op ,a ,b)
                               (%move ret 402))
                             arg1 arg2)))))))
         rest))))
   `(("eq" %eq
      (123 123 100)
      (123 456 ,bailout-tag))
     ("ne" %ne
      (123 456 100)
      (123 123 ,bailout-tag))
     ("le" %le
      (123 456 100)
      (123 123 100)
      (123 1 ,bailout-tag))
     ("lt" %lt
      (123 456 100)
      (123 123 ,bailout-tag)
      (123 1 ,bailout-tag))
     ("ge" %ge
      (123 456 ,bailout-tag)
      (123 123 100)
      (123 1 100))
     ("gt" %gt
      (123 456 ,bailout-tag)
      (123 123 ,bailout-tag)
      (123 1 100))))

  (for-each
   (match-lambda
     ((name op . rest)
      (with-test-prefix name
        (for-each
         (match-lambda
           ((arg1 arg2 expect)
            (with-test-prefix (format #f "~a ~a ~a" arg1 arg2 expect)
              (with-storages (a b)
                (unless (eq? a b)
                  (pass-if-equal (format #f "a=~a b=~a" a b)
                      expect
                    (run-asm `((%cref/f ,a arg1 2)
                               (%cref/f ,b arg2 2)
                               (,op ,a ,b)
                               (%move ret 402))
                             arg1 arg2)))))))
         rest))))
   `(("flt" %flt
      (1.0 456.0 100)
      (456.0 456.0 ,bailout-tag)
      (999.0 456.0 ,bailout-tag))
     ("fge" %fge
      (1.0 456.0 ,bailout-tag)
      (456.0 456.0 100)
      (999.0 456.0 100))))

  (with-test-prefix "typeq"
    (let ((samples (list 123 123.456 #\a 'foo display (make-pointer 0)
                         (make-fluid) '(1 2 3) #(1 2 3)
                         (make-variable 12345) (make-foo 1 2 3)
                         "foo bar" #u8(1 2 3) #*0101 (make-array 8))))
      (for-each
       (match-lambda
         ((type proc)
          (with-test-prefix (format #f "~a" (pretty-type type))
            (with-storages (src)
              (with-test-prefix (format #f "src=~a" src)
                (for-each
                 (lambda (x)
                   (pass-if-equal (format #f "x=~a" x)
                       (if (proc x) 100 bailout-tag)
                     (run-asm `((%move ,src arg1)
                                (%typeq ,src ,type)
                                (%move ret 402))
                              x #f)))
                 samples))))))
       (list (list &fixnum fixnum?)
             (list &flonum flonum?)
             (list &char char?)
             (list &symbol symbol?)
             (list &keyword keyword?)
             (list &procedure procedure?)
             (list &pointer pointer?)
             (list &fluid fluid?)
             (list &pair pair?)
             (list &vector vector?)
             (list &box variable?)
             (list &struct struct?)
             (list &string string?)
             (list &bytevector bytevector?)
             (list &bitvector bitvector?)
             ;; vector, string, bytevector, and bitvector are array type.
             (list &array (lambda (x)
                            (and (not (vector? x))
                                 (not (string? x))
                                 (not (bytevector? x))
                                 (not (bitvector? x))
                                 (array? x))))))))

  (with-test-prefix "tceq"
    (with-storages (a)
      (with-test-prefix (format #f "a=~a" a)
        (pass-if-equal "arg=false"
            bailout-tag
          (run-asm `((%move ,a arg1)
                     (%tceq ,a #x1 ,%tc3-cons)
                     (%move ret 402))
                   #f #f))
        (pass-if-equal "arg=pair"
            100
          (run-asm `((%move ,a arg1)
                     (%tceq ,a #x1 ,%tc3-cons)
                     (%move ret 402))
                   '(1 2 3) #f))
        (pass-if-equal "arg=vector"
            bailout-tag
          (run-asm `((%move ,a arg1)
                     (%tceq ,a #x1 ,%tc3-cons)
                     (%move ret 402))
                   #(1 2 3) #f)))))

  (with-test-prefix "tcne"
    (with-storages (a)
      (with-test-prefix (format #f "a=~a" a)
        (pass-if-equal "arg=false"
            100
          (run-asm `((%move ,a arg1)
                     (%tcne ,a #x1 ,%tc3-cons)
                     (%move ret 402))
                   #f #f))
        (pass-if-equal "arg=pair"
            bailout-tag
          (run-asm `((%move ,a arg1)
                     (%tcne ,a #x1 ,%tc3-cons)
                     (%move ret 402))
                   '(1 2 3) #f))
        (pass-if-equal "arg=vector"
            100
          (run-asm `((%move ,a arg1)
                     (%tcne ,a #x1 ,%tc3-cons)
                     (%move ret 402))
                   #(1 2 3) #f)))))

  (with-test-prefix "eqv"
    (with-storages (a b)
      (unless (eq? a b)
        (pass-if-equal (format #f "a=~a b=~a" a b)
            100
          (run-asm `((%move ,a arg1)
                     (%move ,b arg2)
                     (%eqv ,a ,b)
                     (%move ret 402))
                   0.01 0.01))
        (pass-if-equal (format #f "a=~a b=~a" a b)
            bailout-tag
          (run-asm `((%move ,a arg1)
                     (%move ,b arg2)
                     (%eqv ,a ,b)
                     (%move ret 402))
                   0.01 0.02)))))

  (with-test-prefix "nev"
    (with-storages (a b)
      (unless (eq? a b)
        (pass-if-equal (format #f "a=~a b=~a" a b)
            bailout-tag
          (run-asm `((%move ,a arg1)
                     (%move ,b arg2)
                     (%nev ,a ,b)
                     (%move ret 402))
                   0.01 0.01))
        (pass-if-equal (format #f "a=~a b=~a" a b)
            100
          (run-asm `((%move ,a arg1)
                     (%move ,b arg2)
                     (%nev ,a ,b)
                     (%move ret 402))
                   0.01 0.02))))))

(with-test-prefix "Call and return"
  (with-test-prefix "ccall"
    (with-test-prefix "integer->char"
      (with-storages (dst src)
        (pass-if-equal (format #f "dst=~a src=~a" dst src)
            (integer->char 97)
          (run-asm `((%move ,src arg1)
                     (%carg ,src)
                     (%ccall ,dst ,(pointer-address
                                    (scm->pointer integer->char)))
                     (%move ret ,dst))
                   97 #f)))))
  ;; %scall
  ;; %return
  )

(with-test-prefix "Bitwise arithmetic"
  (with-test-prefix "band"
    (with-storages (dst a b)
      (unless (eq? a b)
        (pass-if-equal (format #f "dst=~a a=~a b=~a" dst a b)
            (logand 123 456)
          (run-asm `((%move ,a arg1)
                     (%move ,b arg2)
                     (%rsh ,a ,a 2)
                     (%rsh ,b ,b 2)
                     (%band ,dst ,a ,b)
                     (%lsh ,dst ,dst 2)
                     (%add ret ,dst 2))
                   123 456)))))
  (with-test-prefix "bor"
    (with-storages (dst a b)
      (unless (eq? a b)
        (pass-if-equal (format #f "dst=~a a=~a b=~a" dst a b)
            (logior 123 456)
          (run-asm `((%move ,a arg1)
                     (%move ,b arg2)
                     (%rsh ,a ,a 2)
                     (%rsh ,b ,b 2)
                     (%bor ,dst ,a ,b)
                     (%lsh ,dst ,dst 2)
                     (%add ret ,dst 2))
                   123 456))))))

(with-test-prefix "Integer arithmetic"
  (for-each
   (match-lambda
     ((name op . rest)
      (with-test-prefix name
        (for-each
         (match-lambda
           ((arg1 arg2 expected)
            (with-test-prefix (format #f "~a ~a ~a" arg1 arg2 expected)
              (with-storages (dst a b)
                (unless (eq? a b)
                  (pass-if-equal (format #f "dst=~a a=~a b=~a" dst a b)
                      expected
                    (run-asm `((%rsh ,a arg1 2)
                               (%rsh ,b arg2 2)
                               (,op ,dst ,a ,b)
                               (%lsh ,dst ,dst 2)
                               (%add ret ,dst 2))
                             arg1 arg2))))
              (with-storages (dst a)
                (pass-if-equal (format #f "dst=~a a=~a b=~a" dst a arg2)
                    expected
                  (run-asm `((%rsh ,a arg1 2)
                             (,op ,dst ,a ,arg2)
                             (%lsh ,dst ,dst 2)
                             (%add ret ,dst 2))
                           arg1 #f))
                (pass-if-equal (format #f "dst=~a a=~a b=~a" dst arg1 a)
                    expected
                  (run-asm `((%rsh ,a arg2 2)
                             (,op ,dst ,arg1 ,a)
                             (%lsh ,dst ,dst 2)
                             (%add ret ,dst 2))
                           #f arg2))))))
         rest))))
   `(("add" %add (15 27 ,(+ 15 27)))
     ("sub" %sub (15 27 ,(- 15 27)))
     ("rsh" %rsh (12345 4 ,(ash 12345 -4)))
     ("lsh" %lsh (123 4 ,(ash 123 4)))
     ("mod" %mod (1000 17 ,(modulo 1000 17)))
     ("rem" %rem (1000 17 ,(remainder 1000 17)))
     ("quo" %quo (1000 17 ,(quotient 1000 17)))
     ("imul" %imul (123 456 ,(* 123 456)))
     ("idiv" %idiv (123 41 ,(/ 123 41)))))

  (with-test-prefix "mod"
    (with-storages (dst a b)
      (for-each
       (match-lambda
         ((arg1 arg2)
          (unless (eq? a b)
            (pass-if-equal (format #f "dst=~a a=~a b=~a" dst a b)
                (modulo arg1 arg2)
              (run-asm `((%rsh ,a arg1 2)
                         (%rsh ,b arg2 2)
                         (%mod ,dst ,a ,b)
                         (%lsh ,dst ,dst 2)
                         (%add ret ,dst 2))
                       arg1 arg2)))))
       '((100 17)
         (-100 17)
         (100 -17)
         (-100 -17)))))

  (with-test-prefix "rem"
    (with-storages (dst a b)
      (for-each
       (match-lambda
         ((arg1 arg2)
          (unless (eq? a b)
            (pass-if-equal (format #f "dst=~a a=~a b=~a" dst a b)
                (remainder arg1 arg2)
              (run-asm `((%rsh ,a arg1 2)
                         (%rsh ,b arg2 2)
                         (%rem ,dst ,a ,b)
                         (%lsh ,dst ,dst 2)
                         (%add ret ,dst 2))
                       arg1 arg2)))))
       '((100 17)
         (-100 17)
         (100 -17)
         (-100 -17))))))

(with-test-prefix "Floating point arithmetic"
  (for-each
   (lambda (args)
     (match args
       ((name scm-op asm-op)
        (with-test-prefix name
          (with-storages (dst a b)
            (unless (eq? a b)
              (pass-if-equal (format #f "dst=~a a=~a b=~a" dst a b)
                  (scm-op 87.13 12.87)
                (run-asm `((%cref/f ,a arg1 2)
                           (%cref/f ,b arg2 2)
                           (,asm-op ,dst ,a ,b)
                           (%d2s ret ,dst))
                         87.13 12.87))))
          (with-storages (dst a)
            (pass-if-equal (format #f "dst=~a a=~a b=~a" dst a 12.87)
                (scm-op 87.13 12.87)
              (run-asm `((%cref/f ,a arg1 2)
                         (,asm-op ,dst ,a 12.87)
                         (%d2s ret ,dst))
                       87.13 #f))
            (pass-if-equal (format #f "dst=~a a=~a b=~a" dst 87.13 a)
                (scm-op 87.13 12.87)
              (run-asm `((%cref/f ,a arg2 2)
                         (,asm-op ,dst 87.13 ,a)
                         (%d2s ret ,dst))
                       #f 12.87)))))))
   (list (list "fadd" + '%fadd)
         (list "fsub" - '%fsub)
         (list "fmul" * '%fmul)
         (list "fdiv" / '%fdiv))))

(with-test-prefix "Load and store"
  ;; %fref
  ;; %fref/f
  (with-test-prefix "cref"
    (with-test-prefix "index 0"
      (with-storages (dst src)
        (pass-if-equal (format #f "dst=~a src=~a" dst src)
            123
          (run-asm `((%move ,src arg1)
                     (%cref ,dst ,src 0)
                     (%move ret ,dst))
                   '(123 456 789) #f))))
    (with-test-prefix "index 1"
      (with-storages (dst src)
        (pass-if-equal (format #f "dst=~a src=~a" dst src)
            '(456 789)
          (run-asm `((%move ,src arg1)
                     (%cref ,dst ,src 1)
                     (%move ret ,dst))
                   '(123 456 789) #f))))
    (with-test-prefix "index reg"
      (with-storages (dst src idx)
        (unless (or (eq? src idx)
                    (fprs? idx))
          (pass-if-equal (format #f "dst=~a src=~a idx=~a" dst src idx)
              '(456 789)
            (run-asm `((%move ,src arg1)
                       (%move ,idx arg2)
                       (%rsh ,idx ,idx 2)
                       (%cref ,dst ,src ,idx)
                       (%move ret ,dst))
                     '(123 456 789) 1))))))

  (with-test-prefix "cref/f"
    (with-storages (dst src)
      (pass-if-equal (format #f "dst=~a src=~a" dst src)
          123.4567
        (run-asm `((%move ,src arg1)
                   (%cref/f ,dst ,src 2)
                   (%d2s ret ,dst))
                 123.4567 #f))))

  (with-test-prefix "cset"
    (with-test-prefix "index 0"
      (with-storages (dst src)
        (unless (eq? dst src)
          (pass-if-equal (format #f "dst=~a src=~a" dst src)
              '(123 456 789)
            (run-asm `((%move ,dst arg1)
                       (%move ,src arg2)
                       (%cset ,dst 0 ,src)
                       (%move ret ,dst))
                     '(0 456 789) 123)))))
    (with-test-prefix "index 1"
      (with-storages (dst src)
        (unless (eq? dst src)
          (pass-if-equal (format #f "dst=~a src=~a" dst src)
              '(123 2345 6789)
            (run-asm `((%move ,dst arg1)
                       (%move ,src arg2)
                       (%cset ,dst 1 ,src)
                       (%move ret ,dst))
                     '(123 456 789) '(2345 6789))))))
    (with-test-prefix "index 0, src 402"
      (with-storages (dst)
        (pass-if-equal (format #f "dst=~a" dst)
            '(100 456 789)
          (run-asm `((%move ,dst arg1)
                     (%cset ,dst 0 402)
                     (%move ret ,dst))
                   '(123 456 789) #f))))
    (with-test-prefix "index reg"
      (with-storages (dst idx)
        (unless (or (eq? dst idx)
                    (fprs? idx))
          (pass-if-equal (format #f "dst=~a idx=~a" dst idx)
              '(100 456 789)
            (run-asm `((%move ,dst arg1)
                       (%move ,idx arg2)
                       (%rsh ,idx ,idx 2)
                       (%cset ,dst ,idx 402)
                       (%move ret ,dst))
                     '(123 456 789) 0)))))))

(with-test-prefix "Heap objects"
  (with-test-prefix "cell"
    (with-storages (dst a b)
      (unless (eq? a b)
        (pass-if-equal (format #f "dst=~a a=~a b=~a" dst a b)
            '(123 456 789)
          (run-asm `((%move ,a arg1)
                     (%move ,b arg2)
                     (%cell ,dst ,a ,b)
                     (%move ret ,dst))
                   123 '(456 789))))))

  (with-test-prefix "words"
    (let ((tc-length-1-vector (logior (ash 3 8) %tc7-vector)))
      (with-storages (dst)
        (pass-if-equal (format #f "dst=~a" dst)
            #(0 1 2)
          (run-asm `((%words ,dst ,tc-length-1-vector 4)
                     (%cset ,dst 1 2)
                     (%cset ,dst 2 6)
                     (%cset ,dst 3 10)
                     (%move ret ,dst))
                   #f #f))))))

(with-test-prefix "Type conversion"
  (with-test-prefix "i2d"
    (with-storages (dst src)
      (pass-if-equal (format #f "dst=~a src=~a" dst src)
          123.0
        (run-asm `((%move ,src arg1)
                   (%rsh ,src ,src 2)
                   (%i2d ,dst ,src)
                   (%d2s ret ,dst))
                 123 #f))))

  (with-test-prefix "d2s"
    (with-storages (dst src)
      (pass-if-equal (format #f "dst=~a src=~a" dst src)
          123.0
        (run-asm `((%move ,src 123.0)
                   (%d2s ,dst ,src)
                   (%move ret ,dst))
                 #f #f)))))

(with-test-prefix "Move"
  (with-test-prefix "arg1=100"
    (with-storages (dst src)
      (pass-if-equal (format #f "dst=~a src=~a" dst src)
          100
        (run-asm `((%move ,src arg1)
                   (%move ,dst ,src)
                   (%move ret ,dst))
                 100 #f))))
  (with-test-prefix "arg1=123.456"
    (with-storages (dst src)
      (pass-if-equal (format #f "dst=~a src=~a" dst src)
          123.456
        (run-asm `((%move ,src arg1)
                   (%move ,dst ,src)
                   (%move ret ,dst))
                 123.456 #f))))
  (with-test-prefix "constant 100"
    (with-storages (dst src)
      (pass-if-equal (format #f "dst=~a src=~a" dst src)
          100
        (run-asm `((%move ,src 402)
                   (%move ,dst ,src)
                   (%move ret ,dst))
                 #f #f))))
  (with-test-prefix "constant 123.456"
    (with-storages (dst src)
      (pass-if-equal (format #f "dst=~a src=~a" dst src)
          123.456
        (run-asm `((%move ,src 123.456)
                   (%move ,dst ,src)
                   (%d2s ret ,dst))
                 #f #f)))))


;;; Local Variables:
;;; eval: (put 'with-storages 'scheme-indent-function 1)
;;; End:
