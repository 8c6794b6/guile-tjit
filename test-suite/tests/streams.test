;;;; streams.test --- test Guile ice-9 streams module -*- scheme -*-
;;;;
;;;; Copyright (C) 2004, 2006 Free Software Foundation, Inc.
;;;; 
;;;; This library is free software; you can redistribute it and/or
;;;; modify it under the terms of the GNU Lesser General Public
;;;; License as published by the Free Software Foundation; either
;;;; version 3 of the License, or (at your option) any later version.
;;;; 
;;;; This library is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;;; Lesser General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU Lesser General Public
;;;; License along with this library; if not, write to the Free Software
;;;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

(define-module (test-suite test-streams)
  :use-module (test-suite lib)
  :use-module (ice-9 streams))


;;;
;;; stream-for-each
;;;

(with-test-prefix "stream-for-each"

  (with-test-prefix "1 streams"

    (pass-if "empty"
      (let ((lst '()))
	(stream-for-each (lambda (x)
			   (set! lst (cons x lst)))
			 (list->stream '()))
	(equal? '() lst)))

    (pass-if "123"
      (let ((lst '()))
	(stream-for-each (lambda (x)
			   (set! lst (cons x lst)))
			 (list->stream '(1 2 3)))
	(equal? '(3 2 1) lst))))

  (with-test-prefix "2 streams"

    (pass-if "empty empty"
      (let ((lst '()))
	(stream-for-each (lambda (x y)
			   (set! lst (cons* x y lst)))
			 (list->stream '())
			 (list->stream '()))
	(equal? '() lst)))

    (pass-if "123 456"
      (let ((lst '()))
	(stream-for-each (lambda (x y)
			   (set! lst (cons* x y lst)))
			 (list->stream '(1 2 3))
			 (list->stream '(4 5 6)))
	(equal? '(3 6 2 5 1 4) lst)))

    (pass-if "12 456"
      (let ((lst '()))
	(stream-for-each (lambda (x y)
			   (set! lst (cons* x y lst)))
			 (list->stream '(1 2))
			 (list->stream '(4 5 6)))
	(equal? '(2 5 1 4) lst)))

    (pass-if "123 45"
      (let ((lst '()))
	(stream-for-each (lambda (x y)
			   (set! lst (cons* x y lst)))
			 (list->stream '(1 2 3))
			 (list->stream '(4 5)))
	(equal? '(2 5 1 4) lst)))))
