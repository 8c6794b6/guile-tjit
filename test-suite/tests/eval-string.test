;;;; eval-string.test --- tests for (ice-9 eval-string)   -*- scheme -*-
;;;; Copyright (C) 2011 Free Software Foundation, Inc.
;;;;
;;;; This library is free software; you can redistribute it and/or
;;;; modify it under the terms of the GNU Lesser General Public
;;;; License as published by the Free Software Foundation; either
;;;; version 3 of the License, or (at your option) any later version.
;;;; 
;;;; This library is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;;; Lesser General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU Lesser General Public
;;;; License along with this library; if not, write to the Free Software
;;;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

(define-module (test-suite test-eval-string)
  #:use-module (test-suite lib)
  #:use-module (ice-9 eval-string))


(with-test-prefix "basic"
  (pass-if "eval none"
    (equal? (eval-string "") *unspecified*))

  (pass-if "eval single"
    (equal? (eval-string "'foo") 'foo))

  (pass-if "eval multiple"
    (equal? (eval-string "'foo 'bar") 'bar))

  (pass-if "compile none"
    (equal? (eval-string "" #:compile? #t) *unspecified*))

  (pass-if "compile single"
    (equal? (eval-string "'foo" #:compile? #t)
            'foo))

  (pass-if "compile multiple"
    (equal? (eval-string "'foo 'bar" #:compile? #t)
            'bar))

  (pass-if "eval values"
    (equal? (call-with-values (lambda ()
                                (eval-string "(values 1 2)"))
              list)
            '(1 2)))

  (pass-if "compile values"
    (equal? (call-with-values (lambda ()
                                (eval-string "(values 1 2)" #:compile? #t))
              list)
            '(1 2))))