;;;; srfi-17.test --- test suite for Guile's SRFI-17 functions. -*- scheme -*-
;;;;
;;;; Copyright (C) 2001, 2003, 2005, 2006 Free Software Foundation, Inc.
;;;; 
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2, or (at your option)
;;;; any later version.
;;;; 
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU General Public License
;;;; along with this software; see the file COPYING.  If not, write to
;;;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;;;; Boston, MA 02110-1301 USA

(define-module (test-suite test-srfi-17)
  :use-module (test-suite lib)
  :use-module (srfi srfi-17))


(pass-if "cond-expand srfi-17"
  (cond-expand (srfi-17 #t)
	       (else    #f)))

;;
;; car
;;

(with-test-prefix "car"

  ;; this test failed in guile 1.8.1 and 1.6.8 and earlier, since `define'
  ;; didn't set a name on a procedure-with-setter
  (pass-if "procedure-name"
    (if (memq 'procnames (debug-options)) ;; enabled by default
	(eq? 'car (procedure-name car))
	(throw 'unsupported)))

  (pass-if "set! (car x)"
    (let ((lst (list 1)))
      (set! (car lst) 2)
      (eqv? 2 (car lst)))))

;;
;; set!
;;

(with-test-prefix "set!"

  (with-test-prefix "target is not procedure with setter"

    (pass-if-exception "(set! (symbol->string 'x) 1)"
      exception:wrong-type-arg
      (set! (symbol->string 'x) 1))

    (pass-if-exception "(set! '#f 1)"
      exception:bad-variable
      (eval '(set! '#f 1) (interaction-environment)))))

;;
;; setter
;;

(with-test-prefix "setter"

  (pass-if-exception "set! (setter x)" (cons 'misc-error ".*")
    (set! (setter car) noop))

  (pass-if "car"
    (eq? set-car! (setter car))))
