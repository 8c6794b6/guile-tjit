#!/bin/sh

#	Copyright (C) 2003, 2006, 2008, 2009, 2010, 2011, 2012 Free Software Foundation
#
#   This file is part of GUILE.
#
# This script is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 3 of the
# License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 USA

# NOTE: If you update this file, please update uninstalled.in as
# well, if appropriate.

# Usage: uninstalled-env [ARGS]

# This script arranges for the environment to support running Guile
# from the build tree.  The following env vars are modified (but not
# clobbered): GUILE_LOAD_PATH, LTDL_LIBRARY_PATH, and PATH.

# Example: uninstalled-env guile -c '(display "hello\n")'
# Example: ../../uninstalled-env ./guile-test-foo

# config
subdirs_with_ltlibs="guile-readline libguile"       # maintain me

# env (set by configure)
top_srcdir="@top_srcdir_absolute@"
top_builddir="@top_builddir_absolute@"

[ x"$top_srcdir"   = x -o ! -d "$top_srcdir" -o \
  x"$top_builddir" = x -o ! -d "$top_builddir" ] && {
    echo $0: bad environment
    echo top_srcdir=$top_srcdir
    echo top_builddir=$top_builddir
    exit 1
}

# When cross-compiling, let $GUILE_FOR_BUILD use its own .go files since
# the ones that are being built may be incompatible ($GUILE_FOR_BUILD is
# typically used to run `guild compile --target=$host'.)  Likewise,
# $GUILE_FOR_BUILD must use its own source files when booting; for
# instance, $srcdir/module/ice-9/boot-9.scm must not be in its search
# path, because it would then end up using its C evaluator to run the
# compiler.
if test "@cross_compiling@" = "no"
then
    if [ x"$GUILE_LOAD_PATH" = x ]
    then
	GUILE_LOAD_PATH="${top_srcdir}/module:${top_srcdir}/guile-readline"
	if test "${top_srcdir}" != "${top_builddir}"; then
            GUILE_LOAD_PATH="$GUILE_LOAD_PATH:${top_builddir}/module:${top_builddir}/guile-readline"
	fi
    else
	for d in "/module" "/guile-readline"
	do
            # This hair prevents double inclusion.
            # The ":" prevents prefix aliasing.
	    case x"$GUILE_LOAD_PATH" in
		x*${top_srcdir}${d}:*) ;;
		x*${top_srcdir}${d}) ;;
		*) GUILE_LOAD_PATH="${top_srcdir}${d}:$GUILE_LOAD_PATH" ;;
	    esac
	    case x"$GUILE_LOAD_PATH" in
		x*${top_builddir}${d}:*) ;;
		x*${top_builddir}${d}) ;;
		*) GUILE_LOAD_PATH="${top_builddir}${d}:$GUILE_LOAD_PATH" ;;
	    esac
	done
    fi
    export GUILE_LOAD_PATH

    if test "x$GUILE_LOAD_COMPILED_PATH" = "x"
    then
	GUILE_LOAD_COMPILED_PATH="${top_builddir}/module:${top_builddir}/guile-readline"
    else
	for d in "/module" "/guile-readline"
	do
            # This hair prevents double inclusion.
            # The ":" prevents prefix aliasing.
	    case x"$GUILE_LOAD_COMPILED_PATH" in
		x*${top_builddir}${d}:*) ;;
		x*${top_builddir}${d}) ;;
		*) GUILE_LOAD_COMPILED_PATH="${top_builddir}${d}:$GUILE_LOAD_COMPILED_PATH" ;;
	    esac
	done
    fi
    export GUILE_LOAD_COMPILED_PATH

    # Don't look in installed dirs for guile modules
    if ( env | grep -v '^GUILE_SYSTEM_PATH=' > /dev/null ); then
	GUILE_SYSTEM_PATH=
	export GUILE_SYSTEM_PATH
    fi
    # Don't look in installed dirs for compiled guile modules
    if ( env | grep -v '^GUILE_SYSTEM_COMPILED_PATH=' > /dev/null ); then
	GUILE_SYSTEM_COMPILED_PATH=
	export GUILE_SYSTEM_COMPILED_PATH
    fi
    # Don't look in installed dirs for dlopen-able modules
    if ( env | grep -v '^GUILE_SYSTEM_EXTENSIONS_PATH=' > /dev/null ); then
	GUILE_SYSTEM_EXTENSIONS_PATH=
	export GUILE_SYSTEM_EXTENSIONS_PATH
    fi
fi

# handle LTDL_LIBRARY_PATH (no clobber)
for dir in $subdirs_with_ltlibs ; do
    if test -z "$LTDL_LIBRARY_PATH"; then
      LTDL_LIBRARY_PATH="${top_builddir}/${dir}"
    else
      LTDL_LIBRARY_PATH="${top_builddir}/${dir}:${LTDL_LIBRARY_PATH}"
    fi
    if test -z "$DYLD_LIBRARY_PATH"; then
      DYLD_LIBRARY_PATH="${top_builddir}/${dir}/.libs"
    else
      DYLD_LIBRARY_PATH="${top_builddir}/${dir}/.libs:${DYLD_LIBRARY_PATH}"
    fi
done
export LTDL_LIBRARY_PATH
export DYLD_LIBRARY_PATH

if [ x"$PKG_CONFIG_PATH" = x ]
then
    PKG_CONFIG_PATH="${top_builddir}/meta"
else
    PKG_CONFIG_PATH="${top_builddir}/meta:$PKG_CONFIG_PATH"
fi
export PKG_CONFIG_PATH

# handle PATH (no clobber)
PATH="${top_builddir}/libguile:${PATH}"
PATH="${top_srcdir}/meta:${PATH}"
if test "x${top_srcdir}" != "x${top_builddir}"; then
  PATH="${top_builddir}/meta:${PATH}"
fi
export PATH

# Define $GUILE, used by `guild'.
GUILE="${top_builddir}/meta/guile"
export GUILE

exec "$@"
