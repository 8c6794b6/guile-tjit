
(set! %load-path (cons ".." %load-path))
(use-modules (vm vm))
(use-modules (vm shell))
(use-modules (vm compile))
(use-modules (ice-9 syncase))

(define *verbose-output* (if (null? (cdr (command-line))) #f #t))

(define test-list
  '((1 1)
    ((1- 1) 0)
    ((+ (+ 1) (- 2)) -1)
    ((+ (+ 1 2) (- 1 2) (* 1 2) (/ 1 2)) 4.5)
    ((* (- 1 2 3) (+ 1.2 3.4) (/ 1 2 4)) -2.3)
    ((let ((a 1)) a) 1)
    ((let ((a 1) (b 2)) b) 2)
    ((let* ((a 1) (a 2)) a) 2)
    ((let ((a 1)) (let ((b 2)) a)) 1)
    ((let ((a 1) (b 2) (c 3))
       ((lambda (d e f)
	  ((lambda (g h i)
	     ((lambda () (list a b d f h i))))
	   7 8 9))
	4 5 6))
     (1 2 4 6 8 9))
    ((do ((i 3 (1- i)) (n 0 (+ n i))) ((< i 0) n)) 6)
    ((let () (define (foo a) a) (foo 1)) 1)
    ((begin (define (fib n) (if (<= n 2) 1 (+ (fib (- n 1)) (fib (- n 2)))))
	    (fib 3)) 2)
    ((begin (define (loop i l) (if (< i l) (loop (+ 1 i) l) l))
	    (loop 0 3)) 3)
;    ((call-with-current-continuation (lambda (c) (c 1) 2)) 1)
    ((map 1+ '(1 2 3)) (2 3 4))
    ))

(define (test vm form answer)
  (format #t "Testing ~S = ~S ..." form answer)
  (let ((result (vm-run vm (compile form))))
    (if (equal? result answer)
	(display "OK\n")
	(format #t "failed: ~S\n" result))))

(define (debug-test vm form answer)
  (format #t "Testing ~S = ~S ...\n" form answer)
  (let ((result (begin
		  (vm-set-option! vm 'verbose *verbose-output*)
		  (vm-trace vm form))))
    (if (equal? result answer)
	(display "OK\n")
	(format #t "failed: ~S\n" result))))

(let ((vm (make-vm)))
  (display "=== Testing the debug engine ===\n")
  (vm-set-option! vm 'debug #t)
  (for-each (lambda (q) (apply debug-test vm q)) test-list)
  (display "\n=== Testing the fast engine ===\n")
  (vm-set-option! vm 'debug #f)
  (for-each (lambda (q) (apply test vm q)) test-list)
  (display "done\n"))
