This is the Guile developer notice-board.  -*- change-log -*-
----------------------------------------------------------------------
CONTENTS: Notes of various kinds which the Guile developers want to
share among eachother, e. g., a memo about something which needs
fixing.  Describing a certain problem here means that everyone is free
to fix it when and as he wishes.  (Of course it can sometimes be suitable
to discuss it first.)

RULES: Entries should have a date and the name of the author.  Entries
should be sufficiently detailed to enable other members of the team to
understand them, but they need not be comprehensible to people who
don't spend much time on Guile.  This file should not go into
snapshots or distributions, but is a strictly internal document.

CONVENTIONS: ChangeLog format. (Reverse chronological order.)
----------------------------------------------------------------------

Thu Mar  6 00:54:59 1997  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* libguile/unif.c: Introduce "fancy printing" for vectors.  "Fancy
 	printing" is performed by the printer when the `fancyp' flag is
 	set in the print state (see print.h).  One of its effects is that
 	sequences should be printed with maximum `length' objects.  (This
 	is currently only used in backtraces and error messages).
	This works for lists, but not yet for vectors and arrays.

Wed Mar  5 22:56:19 1997  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* libguile/struct.c, libguile/struct.h, libguile/gc.c: Structs
	need reimplementation.  Both user interface and representation
	need to be improved.  E. g., the struct part of scm_gc_mark need
	to be a lot more efficient.  We should probably do this redesign
	when designing(/porting) the object system.

	* libguile/symbols.c (SCM_SYMBOL_HASH): This is slot is currently
 	not used for anything (except that it is used by symbol-hash).  I
 	suppose it was originally intended to avoid doing multiple hashing
 	steps when handling symbols.

Mon Mar  3 21:36:58 1997  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* libguile/procprop.c: The current implementation of procedure
 	properties of closures uses a special property slot
	(SCM_PROCPROPS (closure)), but primitive procedures don't have
	such a slot.  Setting or getting source properties for primitive
	procedures currently involves making fake closures.  These are
	stored in an alist => finding the properties of a primitive
	procedure is O (n primitive procedures with properties) which is
	unacceptable.

	