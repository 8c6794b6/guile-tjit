((lambda () (letrec ((g452 (lambda (g453) ((letrec ((g454 (lambda (g455 g456 g457) (if (pair? g455) (g454 (cdr g455) (cons (g393 (car g455) g457) g456) g457) (if (g256 g455) (cons (g393 g455 g457) g456) (if (null? g455) g456 (if (g204 g455) (g454 (g205 g455) g456 (g371 g457 (g206 g455))) (if (g90 g455) (g454 (annotation-expression g455) g456 g457) (cons g455 g456))))))))) g454) g453 (quote ()) (quote (()))))) (g451 (lambda (g458) ((lambda (g459) (if (g90 g459) (gensym) (gensym))) (if (g204 g458) (g205 g458) g458)))) (g450 (lambda (g460 g461) (g449 g460 g461 (lambda (g462) (if ((lambda (g463) (if g463 g463 (if (pair? g462) (g90 (car g462)) (quote #f)))) (g90 g462)) (g448 g462 (quote #f)) g462))))) (g449 (lambda (g464 g465 g466) (if (memq (quote top) (g264 g465)) (g466 g464) ((letrec ((g467 (lambda (g468) (if (g204 g468) (g449 (g205 g468) (g206 g468) g466) (if (pair? g468) ((lambda (g469 g470) (if (if (eq? g469 (car g468)) (eq? g470 (cdr g468)) (quote #f)) g468 (cons g469 g470))) (g467 (car g468)) (g467 (cdr g468))) (if (vector? g468) ((lambda (g471) ((lambda (g472) (if (andmap eq? g471 g472) g468 (list->vector g472))) (map g467 g471))) (vector->list g468)) g468)))))) g467) g464)))) (g448 (lambda (g473 g474) (if (pair? g473) ((lambda (g475) (begin (if g474 (set-annotation-stripped! g474 g475) (void)) (set-car! g475 (g448 (car g473) (quote #f))) (set-cdr! g475 (g448 (cdr g473) (quote #f))) g475)) (cons (quote #f) (quote #f))) (if (g90 g473) ((lambda (g476) (if g476 g476 (g448 (annotation-expression g473) g473))) (annotation-stripped g473)) (if (vector? g473) ((lambda (g477) (begin (if g474 (set-annotation-stripped! g474 g477) (void)) ((letrec ((g478 (lambda (g479) (if (not (< g479 (quote 0))) (begin (vector-set! g477 g479 (g448 (vector-ref g473 g479) (quote #f))) (g478 (- g479 (quote 1)))) (void))))) g478) (- (vector-length g473) (quote 1))) g477)) (make-vector (vector-length g473))) g473))))) (g447 (lambda (g480) (if (g255 g480) (g378 g480 (quote #(syntax-object ... ((top) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-define-syntax parse-define parse-import parse-module do-import! chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi ct-eval/residualize do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports extend-store! id-set-diff chi-top-module set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-trimmed-interface set-interface-token! set-interface-exports! interface-token interface-exports interface? make-interface flatten-exports chi-top chi-top-expr syntax-type chi-when-list chi-top-sequence chi-sequence source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks same-marks? join-marks join-wraps smart-append make-trimmed-syntax-object make-binding-wrap lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! extend-ribcage! make-empty-ribcage import-token-key import-token? make-import-token barrier-marker new-mark anti-mark the-anti-mark only-top-marked? top-marked? top-wrap empty-wrap set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage set-indirect-label! get-indirect-label indirect-label? gen-indirect-label gen-labels label? gen-label make-rename rename-marks rename-new rename-old subst-rename? wrap-subst wrap-marks make-wrap id-sym-name&marks id-sym-name id? nonsymbol-id? global-extend lookup sanitize-binding lookup* displaced-lexical-error transformer-env extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding arg-check source-annotation no-source unannotate set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object self-evaluating? build-lexical-var build-letrec build-sequence build-data build-primref build-lambda build-cte-install build-module-definition build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id get-import-binding get-global-definition-hook put-global-definition-hook gensym-hook error-hook local-eval-hook top-level-eval-hook annotation? fx< fx= fx- fx+ noexpand define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage ((import-token . *top*)) () ()) #(ribcage ((import-token . *top*)) () ()))))) (quote #f)))) (g446 (lambda () (list (quote void)))) (g445 (lambda (g481 g482 g483 g484 g485 g486) ((lambda (g487) ((lambda (g488) (if g488 (apply (lambda (g489 g490 g491 g492 g493) ((lambda (g494) (if (not (g389 g494)) (g391 (map (lambda (g495) (g393 g495 g484)) g494) (g394 g482 g484 g485) (quote "keyword")) ((lambda (g496) ((lambda (g497) (g486 (cons g492 g493) (g247 g496 ((lambda (g499 g500) (map (lambda (g501) (g231 (quote deferred) (g432 g501 g500 g499))) g491)) (if g481 g497 g484) (g249 g483)) g483) g497 g485)) (g368 g494 g496 g484))) (g299 g494)))) g490)) g488) ((lambda (g504) (syntax-error (g394 g482 g484 g485))) g487))) ($syntax-dispatch g487 (quote (any #(each (any any)) any . each-any))))) g482))) (g444 (lambda (g505 g506 g507 g508 g509) ((lambda (g510) ((lambda (g511) (if g511 (apply (lambda (g512 g513 g514) ((lambda (g515) (if (not (g389 g515)) (syntax-error g505 (quote "invalid parameter list in")) ((lambda (g516 g517) (g509 g517 (g437 (cons g513 g514) g505 (g248 g516 g517 g507) (g368 g515 g516 g508)))) (g299 g515) (map g451 g515)))) g512)) g511) ((lambda (g520) (if g520 (apply (lambda (g521 g522 g523) ((lambda (g524) (if (not (g389 g524)) (syntax-error g505 (quote "invalid parameter list in")) ((lambda (g525 g526) (g509 ((letrec ((g527 (lambda (g528 g529) (if (null? g528) g529 (g527 (cdr g528) (cons (car g528) g529)))))) g527) (cdr g526) (car g526)) (g437 (cons g522 g523) g505 (g248 g525 g526 g507) (g368 g524 g525 g508)))) (g299 g524) (map g451 g524)))) (g452 g521))) g520) ((lambda (g531) (syntax-error g505)) g510))) ($syntax-dispatch g510 (quote (any any . each-any)))))) ($syntax-dispatch g510 (quote (each-any any . each-any))))) g506))) (g443 (lambda (g532 g533 g534 g535) ((lambda (g536) ((lambda (g537) (if (if g537 (apply (lambda (g538 g539 g540) (g256 g539)) g537) (quote #f)) (apply (lambda (g541 g542 g543) (g535 g542 g543 g533)) g537) ((lambda (g544) (syntax-error (g394 g532 g533 g534))) g536))) ($syntax-dispatch g536 (quote (any any any))))) g532))) (g442 (lambda (g545 g546 g547 g548) ((lambda (g549) ((lambda (g550) (if (if g550 (apply (lambda (g551 g552 g553) (g256 g552)) g550) (quote #f)) (apply (lambda (g554 g555 g556) (g548 g555 g556 g546)) g550) ((lambda (g557) (if (if g557 (apply (lambda (g558 g559 g560 g561 g562) (if (g256 g559) (g389 (g452 g560)) (quote #f))) g557) (quote #f)) (apply (lambda (g563 g564 g565 g566 g567) (g548 (g393 g564 g546) (cons (quote #(syntax-object lambda ((top) #(ribcage #(_ name args e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(e w s k) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-define-syntax parse-define parse-import parse-module do-import! chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi ct-eval/residualize do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports extend-store! id-set-diff chi-top-module set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-trimmed-interface set-interface-token! set-interface-exports! interface-token interface-exports interface? make-interface flatten-exports chi-top chi-top-expr syntax-type chi-when-list chi-top-sequence chi-sequence source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks same-marks? join-marks join-wraps smart-append make-trimmed-syntax-object make-binding-wrap lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! extend-ribcage! make-empty-ribcage import-token-key import-token? make-import-token barrier-marker new-mark anti-mark the-anti-mark only-top-marked? top-marked? top-wrap empty-wrap set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage set-indirect-label! get-indirect-label indirect-label? gen-indirect-label gen-labels label? gen-label make-rename rename-marks rename-new rename-old subst-rename? wrap-subst wrap-marks make-wrap id-sym-name&marks id-sym-name id? nonsymbol-id? global-extend lookup sanitize-binding lookup* displaced-lexical-error transformer-env extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding arg-check source-annotation no-source unannotate set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object self-evaluating? build-lexical-var build-letrec build-sequence build-data build-primref build-lambda build-cte-install build-module-definition build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id get-import-binding get-global-definition-hook put-global-definition-hook gensym-hook error-hook local-eval-hook top-level-eval-hook annotation? fx< fx= fx- fx+ noexpand define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage ((import-token . *top*)) () ()) #(ribcage ((import-token . *top*)) () ())))) (g393 (cons g565 (cons g566 g567)) g546)) (quote (())))) g557) ((lambda (g569) (if (if g569 (apply (lambda (g570 g571) (g256 g571)) g569) (quote #f)) (apply (lambda (g572 g573) (g548 (g393 g573 g546) (quote (#(syntax-object void ((top) #(ribcage #(_ name) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(e w s k) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-define-syntax parse-define parse-import parse-module do-import! chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi ct-eval/residualize do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports extend-store! id-set-diff chi-top-module set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-trimmed-interface set-interface-token! set-interface-exports! interface-token interface-exports interface? make-interface flatten-exports chi-top chi-top-expr syntax-type chi-when-list chi-top-sequence chi-sequence source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks same-marks? join-marks join-wraps smart-append make-trimmed-syntax-object make-binding-wrap lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! extend-ribcage! make-empty-ribcage import-token-key import-token? make-import-token barrier-marker new-mark anti-mark the-anti-mark only-top-marked? top-marked? top-wrap empty-wrap set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage set-indirect-label! get-indirect-label indirect-label? gen-indirect-label gen-labels label? gen-label make-rename rename-marks rename-new rename-old subst-rename? wrap-subst wrap-marks make-wrap id-sym-name&marks id-sym-name id? nonsymbol-id? global-extend lookup sanitize-binding lookup* displaced-lexical-error transformer-env extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding arg-check source-annotation no-source unannotate set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object self-evaluating? build-lexical-var build-letrec build-sequence build-data build-primref build-lambda build-cte-install build-module-definition build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id get-import-binding get-global-definition-hook put-global-definition-hook gensym-hook error-hook local-eval-hook top-level-eval-hook annotation? fx< fx= fx- fx+ noexpand define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage ((import-token . *top*)) () ()) #(ribcage ((import-token . *top*)) () ()))))) (quote (())))) g569) ((lambda (g574) (syntax-error (g394 g545 g546 g547))) g549))) ($syntax-dispatch g549 (quote (any any)))))) ($syntax-dispatch g549 (quote (any (any . any) any . each-any)))))) ($syntax-dispatch g549 (quote (any any any))))) g545))) (g441 (lambda (g575 g576 g577 g578) ((lambda (g579) ((lambda (g580) (if (if g580 (apply (lambda (g581 g582) (g256 g582)) g580) (quote #f)) (apply (lambda (g583 g584) (g578 (g393 g584 g576))) g580) ((lambda (g585) (syntax-error (g394 g575 g576 g577))) g579))) ($syntax-dispatch g579 (quote (any any))))) g575))) (g440 (lambda (g586 g587 g588 g589 g590) (letrec ((g592 (lambda (g593 g594 g595) (g590 g593 (g591 g594) (map (lambda (g596) (g393 g596 g589)) g595)))) (g591 (lambda (g597) (if (null? g597) (quote ()) (cons ((lambda (g598) ((lambda (g599) (if g599 (apply (lambda (g600) (g591 g600)) g599) ((lambda (g602) (if (g256 g602) (g393 g602 g589) (syntax-error (g394 g586 g587 g588) (quote "invalid exports list in")))) g598))) ($syntax-dispatch g598 (quote each-any)))) (car g597)) (g591 (cdr g597))))))) ((lambda (g603) ((lambda (g604) (if g604 (apply (lambda (g605 g606 g607) (g592 (quote #f) g606 g607)) g604) ((lambda (g610) (if (if g610 (apply (lambda (g611 g612 g613 g614) (g256 g612)) g610) (quote #f)) (apply (lambda (g615 g616 g617 g618) (g592 (g393 g616 g587) g617 g618)) g610) ((lambda (g621) (syntax-error (g394 g586 g587 g588))) g603))) ($syntax-dispatch g603 (quote (any any each-any . each-any)))))) ($syntax-dispatch g603 (quote (any each-any . each-any))))) g586)))) (g439 (lambda (g622 g623) ((lambda (g624) (if g624 (g366 g623 g624) (g429 (lambda (g625) ((lambda (g626) (begin (if (not g626) (syntax-error g625 (quote "exported identifier not visible")) (void)) (g363 g623 g625 g626))) (g376 g625 (quote (()))))) (g404 g622)))) (g405 g622)))) (g438 (lambda (g627 g628 g629 g630 g631) (letrec ((g632 (lambda (g633 g634 g635 g636 g637) (begin (g426 g628 g634) (g631 g633 g634 g635 g636 g637))))) ((letrec ((g638 (lambda (g639 g640 g641 g642 g643) (if (null? g639) (g632 g639 g640 g641 g642 g643) ((lambda (g644 g645) (call-with-values (lambda () (g398 g644 g645 (quote (())) (quote #f) g627)) (lambda (g646 g647 g648 g649 g650) ((lambda (g651) (if (memv g651 (quote (define-form))) (g442 g648 g649 g650 (lambda (g652 g653 g654) ((lambda (g655 g656) ((lambda (g657) (begin (g363 g627 g655 g656) (g424 g630 g656 (g231 (quote lexical) g657)) (g638 (cdr g639) (cons g655 g640) (cons g657 g641) (cons (cons g645 (g393 g653 g654)) g642) g643))) (g451 g655))) (g393 g652 g654) (g297)))) (if (memv g651 (quote (define-syntax-form))) (g443 g648 g649 g650 (lambda (g658 g659 g660) ((lambda (g661 g662 g663) (begin (g363 g627 g661 g662) (g424 g630 g662 (g231 (quote deferred) g663)) (g638 (cdr g639) (cons g661 g640) g641 g642 g643))) (g393 g658 g660) (g297) (g432 g659 (g249 g645) g660)))) (if (memv g651 (quote (module-form))) ((lambda (g664) ((lambda (g665) ((lambda () (g440 g648 g649 g650 g665 (lambda (g666 g667 g668) (g438 g664 (g394 g648 g649 g650) (map (lambda (g669) (cons g645 g669)) g668) g630 (lambda (g670 g671 g672 g673 g674) (begin (g425 g628 (g401 g667) g671) ((lambda (g675 g676 g677 g678) (if g666 ((lambda (g679) (begin (g363 g627 g666 g679) (g424 g630 g679 (g231 (quote module) g675)) (g638 (cdr g639) (cons g666 g640) g676 g677 g678))) (g297)) ((lambda () (begin (g439 g675 g627) (g638 (cdr g639) (cons g675 g640) g676 g677 g678)))))) (g408 g667) (append g672 g641) (append g673 g642) (append g643 g674 g670)))))))))) (g263 (g264 g649) (cons g664 (g265 g649))))) (g304 (quote ()) (quote ()) (quote ()))) (if (memv g651 (quote (import-form))) (g441 g648 g649 g650 (lambda (g680) ((lambda (g681) ((lambda (g682) ((lambda (g683) (if (memv g683 (quote (module))) ((lambda (g684) (begin (if g647 (g364 g627 g647) (void)) (g439 g684 g627) (g638 (cdr g639) (cons g684 g640) g641 g642 g643))) (cdr g682)) (if (memv g683 (quote (displaced-lexical))) (g250 g680) (syntax-error g680 (quote "import from unknown module"))))) (car g682))) (g253 g681 g630))) (g377 g680 (quote (())))))) (if (memv g651 (quote (begin-form))) ((lambda (g685) ((lambda (g686) (if g686 (apply (lambda (g687 g688) (g638 ((letrec ((g689 (lambda (g690) (if (null? g690) (cdr g639) (cons (cons g645 (g393 (car g690) g649)) (g689 (cdr g690))))))) g689) g688) g640 g641 g642 g643)) g686) (syntax-error g685))) ($syntax-dispatch g685 (quote (any . each-any))))) g648) (if (memv g651 (quote (local-syntax-form))) (g445 g647 g648 g645 g649 g650 (lambda (g692 g693 g694 g695) (g638 ((letrec ((g696 (lambda (g697) (if (null? g697) (cdr g639) (cons (cons g693 (g393 (car g697) g694)) (g696 (cdr g697))))))) g696) g692) g640 g641 g642 g643))) (g632 (cons (cons g645 (g394 g648 g649 g650)) (cdr g639)) g640 g641 g642 g643)))))))) g646)))) (cdar g639) (caar g639)))))) g638) g629 (quote ()) (quote ()) (quote ()) (quote ()))))) (g437 (lambda (g698 g699 g700 g701) ((lambda (g702) ((lambda (g703) ((lambda (g704) ((lambda (g705) ((lambda () (g438 g703 g699 g705 g702 (lambda (g706 g707 g708 g709 g710) (begin (if (null? g706) (syntax-error g699 (quote "no expressions in body")) (void)) (g191 (quote #f) g708 (map (lambda (g711) (g432 (cdr g711) (car g711) (quote (())))) g709) (g190 (quote #f) (map (lambda (g712) (g432 (cdr g712) (car g712) (quote (())))) (append g710 g706)))))))))) (map (lambda (g713) (cons g702 (g393 g713 g704))) g698))) (g263 (g264 g701) (cons g703 (g265 g701))))) (g304 (quote ()) (quote ()) (quote ())))) (cons (quote ("placeholder" placeholder)) g700)))) (g436 (lambda (g714 g715 g716 g717 g718 g719) (letrec ((g720 (lambda (g721 g722) (if (pair? g721) (cons (g720 (car g721) g722) (g720 (cdr g721) g722)) (if (g204 g721) ((lambda (g723) ((lambda (g724 g725) (g203 (g205 g721) (if (if (pair? g724) (eq? (car g724) (quote #f)) (quote #f)) (g263 (cdr g724) (if g719 (cons g719 (cdr g725)) (cdr g725))) (g263 (cons g722 g724) (if g719 (cons g719 (cons (quote shift) g725)) (cons (quote shift) g725)))))) (g264 g723) (g265 g723))) (g206 g721)) (if (vector? g721) ((lambda (g726) ((lambda (g727) ((lambda () ((letrec ((g728 (lambda (g729) (if (= g729 g726) g727 (begin (vector-set! g727 g729 (g720 (vector-ref g721 g729) g722)) (g728 (+ g729 (quote 1)))))))) g728) (quote 0))))) (make-vector g726))) (vector-length g721)) (if (symbol? g721) (syntax-error (g394 g715 g717 g718) (quote "encountered raw symbol ") (format (quote "~s") g721) (quote " in output of macro")) g721))))))) (g720 ((lambda (g730) (if (procedure? g730) (g730 (lambda (g731) (begin (if (not (identifier? g731)) (syntax-error g731 (quote "environment argument is not an identifier")) (void)) (g253 (g377 g731 (quote (()))) g716)))) g730)) (g714 (g394 g715 (g349 g717) g718))) (string (quote #\m)))))) (g435 (lambda (g732 g733 g734 g735 g736) ((lambda (g737) ((lambda (g738) (if (if g738 (apply (lambda (g739 g740 g741) (g256 g740)) g738) (quote #f)) (apply (lambda (g742 g743 g744) ((lambda (g745) ((lambda (g746) ((lambda (g747) (if (memv g747 (quote (macro!))) ((lambda (g748 g749) (g398 (g436 (g233 g746) (list (quote #(syntax-object set! ((top) #(ribcage () () ()) #(ribcage #(id val) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(t) #(("m" top)) #("i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(b) #((top)) #("i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(n) #((top)) #("i")) #(ribcage #(_ id val) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(e r w s rib) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-define-syntax parse-define parse-import parse-module do-import! chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi ct-eval/residualize do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports extend-store! id-set-diff chi-top-module set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-trimmed-interface set-interface-token! set-interface-exports! interface-token interface-exports interface? make-interface flatten-exports chi-top chi-top-expr syntax-type chi-when-list chi-top-sequence chi-sequence source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks same-marks? join-marks join-wraps smart-append make-trimmed-syntax-object make-binding-wrap lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! extend-ribcage! make-empty-ribcage import-token-key import-token? make-import-token barrier-marker new-mark anti-mark the-anti-mark only-top-marked? top-marked? top-wrap empty-wrap set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage set-indirect-label! get-indirect-label indirect-label? gen-indirect-label gen-labels label? gen-label make-rename rename-marks rename-new rename-old subst-rename? wrap-subst wrap-marks make-wrap id-sym-name&marks id-sym-name id? nonsymbol-id? global-extend lookup sanitize-binding lookup* displaced-lexical-error transformer-env extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding arg-check source-annotation no-source unannotate set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object self-evaluating? build-lexical-var build-letrec build-sequence build-data build-primref build-lambda build-cte-install build-module-definition build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id get-import-binding get-global-definition-hook put-global-definition-hook gensym-hook error-hook local-eval-hook top-level-eval-hook annotation? fx< fx= fx- fx+ noexpand define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage ((import-token . *top*)) () ()) #(ribcage ((import-token . *top*)) () ())))) g748 g749) g733 (quote (())) g735 g736) g733 (quote (())) g735 g736)) (g393 g743 g734) (g393 g744 g734)) (values (quote core) (lambda (g750 g751 g752 g753) ((lambda (g754 g755) ((lambda (g756) ((lambda (g757) (if (memv g757 (quote (lexical))) (list (quote set!) (g233 g756) g754) (if (memv g757 (quote (global))) (list (quote set!) (g233 g756) g754) (if (memv g757 (quote (displaced-lexical))) (syntax-error (g393 g743 g752) (quote "identifier out of context")) (syntax-error (g394 g750 g752 g753)))))) (g232 g756))) (g253 g755 g751))) (g432 g744 g751 g752) (g377 g743 g752))) g732 g734 g735))) (g232 g746))) (g253 g745 g733))) (g377 g743 g734))) g738) ((lambda (g758) (syntax-error (g394 g732 g734 g735))) g737))) ($syntax-dispatch g737 (quote (any any any))))) g732))) (g434 (lambda (g759 g760 g761 g762 g763) ((lambda (g764) ((lambda (g765) (if g765 (apply (lambda (g766 g767) (cons g759 (map (lambda (g768) (g432 g768 g761 g762)) g767))) g765) ((lambda (g770) (syntax-error (g394 g760 g762 g763))) g764))) ($syntax-dispatch g764 (quote (any . each-any))))) g760))) (g433 (lambda (g771 g772 g773 g774 g775 g776) ((lambda (g777) (if (memv g777 (quote (lexical))) g772 (if (memv g777 (quote (core))) (g772 g773 g774 g775 g776) (if (memv g777 (quote (lexical-call))) (g434 g772 g773 g774 g775 g776) (if (memv g777 (quote (constant))) (list (quote quote) (g450 (g394 g773 g775 g776) (quote (())))) (if (memv g777 (quote (global))) g772 (if (memv g777 (quote (call))) (g434 (g432 (car g773) g774 g775) g773 g774 g775 g776) (if (memv g777 (quote (begin-form))) ((lambda (g778) ((lambda (g779) (if g779 (apply (lambda (g780 g781 g782) (g395 (cons g781 g782) g774 g775 g776)) g779) (syntax-error g778))) ($syntax-dispatch g778 (quote (any any . each-any))))) g773) (if (memv g777 (quote (local-syntax-form))) (g445 g772 g773 g774 g775 g776 g395) (if (memv g777 (quote (eval-when-form))) ((lambda (g784) ((lambda (g785) (if g785 (apply (lambda (g786 g787 g788 g789) ((lambda (g790) (if (memq (quote eval) g790) (g395 (cons g788 g789) g774 g775 g776) (g446))) (g397 g773 g787 g775))) g785) (syntax-error g784))) ($syntax-dispatch g784 (quote (any each-any any . each-any))))) g773) (if (memv g777 (quote (define-form define-syntax-form module-form import-form))) (syntax-error (g394 g773 g775 g776) (quote "invalid context for definition")) (if (memv g777 (quote (syntax))) (syntax-error (g394 g773 g775 g776) (quote "reference to pattern variable outside syntax form")) (if (memv g777 (quote (displaced-lexical))) (g250 (g394 g773 g775 g776)) (syntax-error (g394 g773 g775 g776))))))))))))))) g771))) (g432 (lambda (g793 g794 g795) (call-with-values (lambda () (g398 g793 g794 g795 (quote #f) (quote #f))) (lambda (g796 g797 g798 g799 g800) (g433 g796 g797 g798 g794 g799 g800))))) (g431 (lambda (g801 g802 g803) ((lambda (g804) (if (memv g804 (quote (c))) (if (memq (quote compile) g802) ((lambda (g805) (begin (g91 g805) (if (memq (quote load) g802) g805 (g446)))) (g803)) (if (memq (quote load) g802) (g803) (g446))) (if (memv g804 (quote (c&e))) ((lambda (g806) (begin (g91 g806) g806)) (g803)) (begin (if (memq (quote eval) g802) (g91 (g803)) (void)) (g446))))) g801))) (g430 (lambda (g807 g808) (list (quote $sc-put-cte) (list (quote quote) g807) (list (quote quote) (g231 (quote do-import) g808))))) (g429 (lambda (g809 g810) ((lambda (g811) ((letrec ((g812 (lambda (g813) (if (not (= g813 g811)) (begin (g809 (vector-ref g810 g813)) (g812 (+ g813 (quote 1)))) (void))))) g812) (quote 0))) (vector-length g810)))) (g428 (lambda (g814 g815) ((letrec ((g816 (lambda (g817 g818) (if (< g817 (quote 0)) g818 (g816 (- g817 (quote 1)) (cons (g814 (vector-ref g815 g817)) g818)))))) g816) (- (vector-length g815) (quote 1)) (quote ())))) (g427 (lambda (g819 g820 g821 g822 g823 g824 g825 g826 g827) (letrec ((g830 (lambda (g831 g832) ((lambda (g833) (map (lambda (g834) ((lambda (g835) (if (not (g392 g835 g833)) g834 (g410 (g412 g834) g835 (g414 g834) (append (g829 g835) (g415 g834)) (g416 g834)))) (g413 g834))) g831)) (map (lambda (g836) (if (pair? g836) (car g836) g836)) g832)))) (g829 (lambda (g837) ((letrec ((g838 (lambda (g839) (if (null? g839) (quote ()) (if (if (pair? (car g839)) (g388 g837 (caar g839)) (quote #f)) (g401 (cdar g839)) (g838 (cdr g839))))))) g838) g823))) (g828 (lambda (g840 g841 g842) (begin (g426 g820 g841) (g425 g820 g824 g841) (g827 g840 g842))))) ((letrec ((g843 (lambda (g844 g845 g846 g847) (if (null? g844) (g828 g846 g845 g847) ((lambda (g848 g849) (call-with-values (lambda () (g398 g848 g849 (quote (())) (quote #f) g819)) (lambda (g850 g851 g852 g853 g854) ((lambda (g855) (if (memv g855 (quote (define-form))) (g442 g852 g853 g854 (lambda (g856 g857 g858) ((lambda (g859) ((lambda (g860) ((lambda (g861) ((lambda () (begin (g363 g819 g859 g860) (g843 (cdr g844) (cons g859 g845) (cons (g410 g850 g859 g860 g861 (cons g849 (g393 g857 g858))) g846) g847))))) (g829 g859))) (g300))) (g393 g856 g858)))) (if (memv g855 (quote (define-syntax-form))) (g443 g852 g853 g854 (lambda (g862 g863 g864) ((lambda (g865) ((lambda (g866) ((lambda (g867) ((lambda (g868) ((lambda () (begin (g424 g822 (g302 g866) (cons (quote deferred) g868)) (g363 g819 g865 g866) (g843 (cdr g844) (cons g865 g845) (cons (g410 g850 g865 g866 g867 g868) g846) g847))))) (g432 g863 (g249 g849) g864))) (g829 g865))) (g300))) (g393 g862 g864)))) (if (memv g855 (quote (module-form))) ((lambda (g869) ((lambda (g870) ((lambda () (g440 g852 g853 g854 g870 (lambda (g871 g872 g873) (g427 g869 (g394 g852 g853 g854) (map (lambda (g874) (cons g849 g874)) g873) g822 g872 (g401 g872) g825 g826 (lambda (g875 g876) ((lambda (g877) ((lambda (g878) ((lambda (g879) ((lambda () (if g871 ((lambda (g880 g881) (begin (g424 g822 (g302 g880) (g231 (quote module) g877)) (g363 g819 g871 g880) (g843 (cdr g844) (cons g871 g845) (cons (g410 g850 g871 g880 g881 g872) g878) g879))) (g300) (g829 g871)) ((lambda () (begin (g439 g877 g819) (g843 (cdr g844) (cons g877 g845) g878 g879)))))))) (append g847 g876))) (append (if g871 g875 (g830 g875 g872)) g846))) (g408 g872))))))))) (g263 (g264 g853) (cons g869 (g265 g853))))) (g304 (quote ()) (quote ()) (quote ()))) (if (memv g855 (quote (import-form))) (g441 g852 g853 g854 (lambda (g882) ((lambda (g883) ((lambda (g884) ((lambda (g885) (if (memv g885 (quote (module))) ((lambda (g886) (begin (if g851 (g364 g819 g851) (void)) (g439 g886 g819) (g843 (cdr g844) (cons g886 g845) (g830 g846 (vector->list (g404 g886))) g847))) (g233 g884)) (if (memv g885 (quote (displaced-lexical))) (g250 g882) (syntax-error g882 (quote "import from unknown module"))))) (g232 g884))) (g253 g883 g822))) (g377 g882 (quote (())))))) (if (memv g855 (quote (begin-form))) ((lambda (g887) ((lambda (g888) (if g888 (apply (lambda (g889 g890) (g843 ((letrec ((g891 (lambda (g892) (if (null? g892) (cdr g844) (cons (cons g849 (g393 (car g892) g853)) (g891 (cdr g892))))))) g891) g890) g845 g846 g847)) g888) (syntax-error g887))) ($syntax-dispatch g887 (quote (any . each-any))))) g852) (if (memv g855 (quote (local-syntax-form))) (g445 g851 g852 g849 g853 g854 (lambda (g894 g895 g896 g897) (g843 ((letrec ((g898 (lambda (g899) (if (null? g899) (cdr g844) (cons (cons g895 (g393 (car g899) g896)) (g898 (cdr g899))))))) g898) g894) g845 g846 g847))) (g828 g846 g845 (append g847 (cons (cons g849 (g394 g852 g853 g854)) (cdr g844))))))))))) g850)))) (cdar g844) (caar g844)))))) g843) g821 (quote ()) (quote ()) (quote ()))))) (g426 (lambda (g900 g901) (letrec ((g905 (lambda (g906 g907 g908) ((lambda (g909) (if g909 (if (g367 ((lambda (g910) ((lambda (g911) (if (g90 g911) (annotation-expression g911) g911)) (if (g204 g910) (g205 g910) g910))) g906) g909 (if (symbol? g906) (g264 (quote ((top)))) (g264 (g206 g906)))) (cons g906 g908) g908) (g903 (g404 g907) (lambda (g912 g913) (if (g902 g912 g906) (cons g912 g913) g913)) g908))) (g405 g907)))) (g904 (lambda (g914 g915 g916) (if (g403 g914) (if (g403 g915) (call-with-values (lambda () ((lambda (g917 g918) (if (fx> (vector-length g917) (vector-length g918)) (values g914 g918) (values g915 g917))) (g404 g914) (g404 g915))) (lambda (g919 g920) (g903 g920 (lambda (g921 g922) (g905 g921 g919 g922)) g916))) (g905 g915 g914 g916)) (if (g403 g915) (g905 g914 g915 g916) (if (g902 g914 g915) (cons g914 g916) g916))))) (g903 (lambda (g923 g924 g925) ((lambda (g926) ((letrec ((g927 (lambda (g928 g929) (if (= g928 g926) g929 (g927 (+ g928 (quote 1)) (g924 (vector-ref g923 g928) g929)))))) g927) (quote 0) g925)) (vector-length g923)))) (g902 (lambda (g930 g931) (if (symbol? g930) (if (symbol? g931) (eq? g930 g931) (if (eq? g930 ((lambda (g932) ((lambda (g933) (if (g90 g933) (annotation-expression g933) g933)) (if (g204 g932) (g205 g932) g932))) g931)) (g373 (g264 (g206 g931)) (g264 (quote ((top))))) (quote #f))) (if (symbol? g931) (if (eq? g931 ((lambda (g934) ((lambda (g935) (if (g90 g935) (annotation-expression g935) g935)) (if (g204 g934) (g205 g934) g934))) g930)) (g373 (g264 (g206 g930)) (g264 (quote ((top))))) (quote #f)) (g388 g930 g931)))))) (if (not (null? g901)) ((letrec ((g936 (lambda (g937 g938 g939) (if (null? g938) (if (not (null? g939)) ((lambda (g940) (syntax-error g900 (quote "duplicate definition for ") (symbol->string (car g940)) (quote " in"))) (syntax-object->datum g939)) (void)) ((letrec ((g941 (lambda (g942 g943) (if (null? g942) (g936 (car g938) (cdr g938) g943) (g941 (cdr g942) (g904 g937 (car g942) g943)))))) g941) g938 g939))))) g936) (car g901) (cdr g901) (quote ())) (void))))) (g425 (lambda (g944 g945 g946) (letrec ((g947 (lambda (g948 g949) (ormap (lambda (g950) (if (g403 g950) ((lambda (g951) (if g951 (g367 ((lambda (g952) ((lambda (g953) (if (g90 g953) (annotation-expression g953) g953)) (if (g204 g952) (g205 g952) g952))) g948) g951 (g264 (g206 g948))) ((lambda (g954) ((letrec ((g955 (lambda (g956) (if (fx>= g956 (quote 0)) ((lambda (g957) (if g957 g957 (g955 (- g956 (quote 1))))) (g388 g948 (vector-ref g954 g956))) (quote #f))))) g955) (- (vector-length g954) (quote 1)))) (g404 g950)))) (g405 g950)) (g388 g948 g950))) g949)))) ((letrec ((g958 (lambda (g959 g960) (if (null? g959) (if (not (null? g960)) (syntax-error g960 (quote "missing definition for export(s)")) (void)) ((lambda (g961 g962) (if (g947 g961 g946) (g958 g962 g960) (g958 g962 (cons g961 g960)))) (car g959) (cdr g959)))))) g958) g945 (quote ()))))) (g424 (lambda (g963 g964 g965) (set-cdr! g963 (g246 g964 g965 (cdr g963))))) (g423 (lambda (g966 g967) (if (null? g966) (quote ()) (if (g392 (car g966) g967) (g423 (cdr g966) g967) (cons (car g966) (g423 (cdr g966) g967)))))) (g422 (lambda (g968 g969 g970 g971 g972 g973 g974 g975 g976 g977) ((lambda (g978) (g427 g970 (g394 g968 g971 g972) (map (lambda (g979) (cons g969 g979)) g977) g969 g976 g978 g973 g974 (lambda (g980 g981) ((letrec ((g982 (lambda (g983 g984 g985 g986 g987) (if (null? g983) ((letrec ((g988 (lambda (g989 g990 g991) (if (null? g989) ((lambda (g992 g993 g994) (begin (for-each (lambda (g995) (apply (lambda (g996 g997 g998 g999) (if g997 (g303 g997 g998) (void))) g995)) g987) (g190 (quote #f) (list (g431 g973 g974 (lambda () (if (null? g987) (g446) (g190 (quote #f) (map (lambda (g1000) (apply (lambda (g1001 g1002 g1003 g1004) (list (quote $sc-put-cte) (list (quote quote) g1003) (if (eq? g1001 (quote define-syntax-form)) g1004 (list (quote quote) (g231 (quote module) (g409 g1004 g1003)))))) g1000)) g987))))) (g431 g973 g974 (lambda () ((lambda (g1005) ((lambda (g1006) ((lambda (g1007) ((lambda () (if g1005 (list (quote $sc-put-cte) (list (quote quote) (if (g373 (g264 (g206 g975)) (g264 (quote ((top))))) g1005 ((lambda (g1008) (g203 g1005 (g263 g1008 (list (g304 (vector g1005) (vector g1008) (vector (g101 g1005))))))) (g264 (g206 g975))))) g1007) ((lambda (g1009) (g190 (quote #f) (list (list (quote $sc-put-cte) (list (quote quote) g1009) g1007) (g430 g1009 g1006)))) (g101 (quote tmp))))))) (list (quote quote) (g231 (quote module) (g409 g976 g1006))))) (g101 g1005))) (if g975 ((lambda (g1010) ((lambda (g1011) (if (g90 g1011) (annotation-expression g1011) g1011)) (if (g204 g1010) (g205 g1010) g1010))) g975) (quote #f))))) (g190 (quote #f) (map (lambda (g1012) (list (quote define) g1012 (g446))) g985)) (g191 (quote #f) g990 g993 (g190 (quote #f) (list (if (null? g985) (g446) (g190 (quote #f) (map (lambda (g1013 g1014) (list (quote set!) g1013 g1014)) g985 g992))) (if (null? g994) (g446) (g190 (quote #f) g994))))) (g446))))) (map (lambda (g1015) (g432 (cdr g1015) (car g1015) (quote (())))) g986) (map (lambda (g1016) (g432 (cdr g1016) (car g1016) (quote (())))) g991) (map (lambda (g1017) (g432 (cdr g1017) (car g1017) (quote (())))) g981)) ((lambda (g1018) ((lambda (g1019) (if (memv g1019 (quote (define-form))) ((lambda (g1020) (begin (g424 g969 (g302 (g414 g1018)) (g231 (quote lexical) g1020)) (g988 (cdr g989) (cons g1020 g990) (cons (g416 g1018) g991)))) (g451 (g413 g1018))) (if (memv g1019 (quote (define-syntax-form module-form))) (g988 (cdr g989) g990 g991) (error (quote sc-expand-internal) (quote "unexpected module binding type"))))) (g412 g1018))) (car g989)))))) g988) g984 (quote ()) (quote ())) ((lambda (g1021 g1022) (letrec ((g1023 (lambda (g1024 g1025 g1026 g1027) ((letrec ((g1028 (lambda (g1029 g1030) (if (null? g1029) (g1027) (if (g388 (g413 (car g1029)) g1024) (g1026 (car g1029) (g370 (reverse g1030) (cdr g1029))) (g1028 (cdr g1029) (cons (car g1029) g1030))))))) g1028) g1025 (quote ()))))) (g1023 g1021 g984 (lambda (g1031 g1032) ((lambda (g1033 g1034 g1035) ((lambda (g1036 g1037) ((lambda (g1038) (if (memv g1038 (quote (define-form))) (begin (g303 g1034 g1037) (g982 g1036 g1032 (cons g1037 g985) (cons (g416 g1031) g986) g987)) (if (memv g1038 (quote (define-syntax-form))) (g982 g1036 g1032 g985 g986 (cons (list g1033 g1034 g1037 (g416 g1031)) g987)) (if (memv g1038 (quote (module-form))) ((lambda (g1039) (g982 (append (g401 g1039) g1036) g1032 g985 g986 (cons (list g1033 g1034 g1037 g1039) g987))) (g416 g1031)) (error (quote sc-expand-internal) (quote "unexpected module binding type")))))) g1033)) (append g1035 g1022) (g101 ((lambda (g1040) ((lambda (g1041) (if (g90 g1041) (annotation-expression g1041) g1041)) (if (g204 g1040) (g205 g1040) g1040))) g1021)))) (g412 g1031) (g414 g1031) (g415 g1031))) (lambda () (g982 g1022 g984 g985 g986 g987))))) (car g983) (cdr g983)))))) g982) g978 g980 (quote ()) (quote ()) (quote ()))))) (g401 g976)))) (g421 (lambda (g1042 g1043) (vector-set! g1042 (quote 5) g1043))) (g420 (lambda (g1044 g1045) (vector-set! g1044 (quote 4) g1045))) (g419 (lambda (g1046 g1047) (vector-set! g1046 (quote 3) g1047))) (g418 (lambda (g1048 g1049) (vector-set! g1048 (quote 2) g1049))) (g417 (lambda (g1050 g1051) (vector-set! g1050 (quote 1) g1051))) (g416 (lambda (g1052) (vector-ref g1052 (quote 5)))) (g415 (lambda (g1053) (vector-ref g1053 (quote 4)))) (g414 (lambda (g1054) (vector-ref g1054 (quote 3)))) (g413 (lambda (g1055) (vector-ref g1055 (quote 2)))) (g412 (lambda (g1056) (vector-ref g1056 (quote 1)))) (g411 (lambda (g1057) (if (vector? g1057) (if (= (vector-length g1057) (quote 6)) (eq? (vector-ref g1057 (quote 0)) (quote module-binding)) (quote #f)) (quote #f)))) (g410 (lambda (g1058 g1059 g1060 g1061 g1062) (vector (quote module-binding) g1058 g1059 g1060 g1061 g1062))) (g409 (lambda (g1063 g1064) (g402 (list->vector (map (lambda (g1065) (g369 (if (pair? g1065) (car g1065) g1065))) g1063)) g1064))) (g408 (lambda (g1066) (g402 (list->vector (map (lambda (g1067) (if (pair? g1067) (car g1067) g1067)) g1066)) (quote #f)))) (g407 (lambda (g1068 g1069) (vector-set! g1068 (quote 2) g1069))) (g406 (lambda (g1070 g1071) (vector-set! g1070 (quote 1) g1071))) (g405 (lambda (g1072) (vector-ref g1072 (quote 2)))) (g404 (lambda (g1073) (vector-ref g1073 (quote 1)))) (g403 (lambda (g1074) (if (vector? g1074) (if (= (vector-length g1074) (quote 3)) (eq? (vector-ref g1074 (quote 0)) (quote interface)) (quote #f)) (quote #f)))) (g402 (lambda (g1075 g1076) (vector (quote interface) g1075 g1076))) (g401 (lambda (g1077) ((letrec ((g1078 (lambda (g1079 g1080) (if (null? g1079) g1080 (g1078 (cdr g1079) (if (pair? (car g1079)) (g1078 (car g1079) g1080) (cons (car g1079) g1080))))))) g1078) g1077 (quote ())))) (g400 (lambda (g1081 g1082 g1083 g1084 g1085 g1086) (call-with-values (lambda () (g398 g1081 g1082 g1083 (quote #f) g1086)) (lambda (g1093 g1094 g1095 g1096 g1097) ((lambda (g1098) (if (memv g1098 (quote (begin-form))) ((lambda (g1099) ((lambda (g1100) (if g1100 (apply (lambda (g1101) (g446)) g1100) ((lambda (g1102) (if g1102 (apply (lambda (g1103 g1104 g1105) (g396 (cons g1104 g1105) g1082 g1096 g1097 g1084 g1085 g1086)) g1102) (syntax-error g1099))) ($syntax-dispatch g1099 (quote (any any . each-any)))))) ($syntax-dispatch g1099 (quote (any))))) g1095) (if (memv g1098 (quote (local-syntax-form))) (g445 g1094 g1095 g1082 g1096 g1097 (lambda (g1107 g1108 g1109 g1110) (g396 g1107 g1108 g1109 g1110 g1084 g1085 g1086))) (if (memv g1098 (quote (eval-when-form))) ((lambda (g1111) ((lambda (g1112) (if g1112 (apply (lambda (g1113 g1114 g1115 g1116) ((lambda (g1117 g1118) (if (eq? g1084 (quote e)) (if (memq (quote eval) g1117) (g396 g1118 g1082 g1096 g1097 (quote e) (quote (eval)) g1086) (g446)) (if (memq (quote load) g1117) (if ((lambda (g1119) (if g1119 g1119 (if (eq? g1084 (quote c&e)) (memq (quote eval) g1117) (quote #f)))) (memq (quote compile) g1117)) (g396 g1118 g1082 g1096 g1097 (quote c&e) (quote (compile load)) g1086) (if (memq g1084 (quote (c c&e))) (g396 g1118 g1082 g1096 g1097 (quote c) (quote (load)) g1086) (g446))) (if ((lambda (g1120) (if g1120 g1120 (if (eq? g1084 (quote c&e)) (memq (quote eval) g1117) (quote #f)))) (memq (quote compile) g1117)) (begin (g91 (g396 g1118 g1082 g1096 g1097 (quote e) (quote (eval)) g1086)) (g446)) (g446))))) (g397 g1095 g1114 g1096) (cons g1115 g1116))) g1112) (syntax-error g1111))) ($syntax-dispatch g1111 (quote (any each-any any . each-any))))) g1095) (if (memv g1098 (quote (define-syntax-form))) (g443 g1095 g1096 g1097 (lambda (g1123 g1124 g1125) ((lambda (g1126) (begin ((lambda (g1127) ((lambda (g1128) ((lambda (g1129) (if (memv g1129 (quote (displaced-lexical))) (g250 g1126) (void))) (g232 g1128))) (g253 g1127 g1082))) (g377 g1126 (quote (())))) (g431 g1084 g1085 (lambda () (list (quote $sc-put-cte) (list (quote quote) ((lambda (g1130) (if (g373 (g264 (g206 g1126)) (g264 (quote ((top))))) g1130 ((lambda (g1131) (g203 g1130 (g263 g1131 (list (g304 (vector g1130) (vector g1131) (vector (g101 g1130))))))) (g264 (g206 g1126))))) ((lambda (g1132) ((lambda (g1133) (if (g90 g1133) (annotation-expression g1133) g1133)) (if (g204 g1132) (g205 g1132) g1132))) g1126))) (g432 g1124 (g249 g1082) g1125)))))) (g393 g1123 g1125)))) (if (memv g1098 (quote (define-form))) (g442 g1095 g1096 g1097 (lambda (g1134 g1135 g1136) ((lambda (g1137) (begin ((lambda (g1138) ((lambda (g1139) ((lambda (g1140) (if (memv g1140 (quote (displaced-lexical))) (g250 g1137) (void))) (g232 g1139))) (g253 g1138 g1082))) (g377 g1137 (quote (())))) ((lambda (g1141) ((lambda (g1142) (g190 (quote #f) (list (g431 g1084 g1085 (lambda () (list (quote $sc-put-cte) (list (quote quote) (if (eq? g1141 g1142) g1141 ((lambda (g1143) (g203 g1141 (g263 g1143 (list (g304 (vector g1141) (vector g1143) (vector g1142)))))) (g264 (g206 g1137))))) (list (quote quote) (g231 (quote global) g1142))))) ((lambda (g1144) (begin (if (eq? g1084 (quote c&e)) (g91 g1144) (void)) g1144)) (list (quote define) g1142 (g432 g1135 g1082 g1136)))))) (if (g373 (g264 (g206 g1137)) (g264 (quote ((top))))) g1141 (g101 g1141)))) ((lambda (g1145) ((lambda (g1146) (if (g90 g1146) (annotation-expression g1146) g1146)) (if (g204 g1145) (g205 g1145) g1145))) g1137)))) (g393 g1134 g1136)))) (if (memv g1098 (quote (module-form))) ((lambda (g1147 g1148) (g440 g1095 g1096 g1097 (g263 (g264 g1096) (cons g1148 (g265 g1096))) (lambda (g1149 g1150 g1151) (if g1149 (begin ((lambda (g1152) ((lambda (g1153) ((lambda (g1154) (if (memv g1154 (quote (displaced-lexical))) (g250 (g393 g1149 g1096)) (void))) (g232 g1153))) (g253 g1152 g1147))) (g377 g1149 (quote (())))) (g422 g1095 g1147 g1148 g1096 g1097 g1084 g1085 g1149 g1150 g1151)) (g422 g1095 g1147 g1148 g1096 g1097 g1084 g1085 (quote #f) g1150 g1151))))) (cons (quote ("top-level module placeholder" placeholder)) g1082) (g304 (quote ()) (quote ()) (quote ()))) (if (memv g1098 (quote (import-form))) (g441 g1095 g1096 g1097 (lambda (g1155) (g431 g1084 g1085 (lambda () (begin (if g1094 (syntax-error (g394 g1095 g1096 g1097) (quote "not valid at top-level")) (void)) ((lambda (g1156) ((lambda (g1157) (if (memv g1157 (quote (module))) (g430 g1155 (g405 (g233 g1156))) (if (memv g1157 (quote (displaced-lexical))) (g250 g1155) (syntax-error g1155 (quote "import from unknown module"))))) (g232 g1156))) (g253 (g377 g1155 (quote (()))) (quote ())))))))) ((lambda (g1158) (begin (if (eq? g1084 (quote c&e)) (g91 g1158) (void)) g1158)) (g433 g1093 g1094 g1095 g1082 g1096 g1097)))))))))) g1093))))) (g399 (lambda (g1159 g1160 g1161 g1162) (call-with-values (lambda () (g398 g1159 g1160 g1161 (quote #f) g1162)) (lambda (g1163 g1164 g1165 g1166 g1167) (g433 g1163 g1164 g1165 g1160 g1166 g1167))))) (g398 (lambda (g1168 g1169 g1170 g1171 g1172) (if (symbol? g1168) ((lambda (g1173) ((lambda (g1174) ((lambda (g1175) ((lambda () ((lambda (g1176) (if (memv g1176 (quote (lexical))) (values g1175 (g233 g1174) g1168 g1170 g1171) (if (memv g1176 (quote (global))) (values g1175 (g233 g1174) g1168 g1170 g1171) (if (memv g1176 (quote (macro macro!))) (g398 (g436 (g233 g1174) g1168 g1169 g1170 g1171 g1172) g1169 (quote (())) (quote #f) g1172) (values g1175 (g233 g1174) g1168 g1170 g1171))))) g1175)))) (g232 g1174))) (g253 g1173 g1169))) (g377 g1168 g1170)) (if (pair? g1168) ((lambda (g1177) (if (g256 g1177) ((lambda (g1178) ((lambda (g1179) ((lambda (g1180) ((lambda () ((lambda (g1181) (if (memv g1181 (quote (lexical))) (values (quote lexical-call) (g233 g1179) g1168 g1170 g1171) (if (memv g1181 (quote (macro macro!))) (g398 (g436 (g233 g1179) g1168 g1169 g1170 g1171 g1172) g1169 (quote (())) (quote #f) g1172) (if (memv g1181 (quote (core))) (values g1180 (g233 g1179) g1168 g1170 g1171) (if (memv g1181 (quote (local-syntax))) (values (quote local-syntax-form) (g233 g1179) g1168 g1170 g1171) (if (memv g1181 (quote (begin))) (values (quote begin-form) (quote #f) g1168 g1170 g1171) (if (memv g1181 (quote (eval-when))) (values (quote eval-when-form) (quote #f) g1168 g1170 g1171) (if (memv g1181 (quote (define))) (values (quote define-form) (quote #f) g1168 g1170 g1171) (if (memv g1181 (quote (define-syntax))) (values (quote define-syntax-form) (quote #f) g1168 g1170 g1171) (if (memv g1181 (quote (module-key))) (values (quote module-form) (quote #f) g1168 g1170 g1171) (if (memv g1181 (quote (import))) (values (quote import-form) (if (g233 g1179) (g393 g1177 g1170) (quote #f)) g1168 g1170 g1171) (if (memv g1181 (quote (set!))) (g435 g1168 g1169 g1170 g1171 g1172) (values (quote call) (quote #f) g1168 g1170 g1171))))))))))))) g1180)))) (g232 g1179))) (g253 g1178 g1169))) (g377 g1177 g1170)) (values (quote call) (quote #f) g1168 g1170 g1171))) (car g1168)) (if (g204 g1168) (g398 (g205 g1168) g1169 (g371 g1170 (g206 g1168)) (quote #f) g1172) (if (g90 g1168) (g398 (annotation-expression g1168) g1169 g1170 (annotation-source g1168) g1172) (if ((lambda (g1182) ((lambda (g1183) (if g1183 g1183 ((lambda (g1184) (if g1184 g1184 ((lambda (g1185) (if g1185 g1185 ((lambda (g1186) (if g1186 g1186 (null? g1182))) (char? g1182)))) (string? g1182)))) (number? g1182)))) (boolean? g1182))) g1168) (values (quote constant) (quote #f) g1168 g1170 g1171) (values (quote other) (quote #f) g1168 g1170 g1171)))))))) (g397 (lambda (g1187 g1188 g1189) ((letrec ((g1190 (lambda (g1191 g1192) (if (null? g1191) g1192 (g1190 (cdr g1191) (cons ((lambda (g1193) (if (g378 g1193 (quote #(syntax-object compile ((top) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(when-list situations) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(e when-list w) #((top) (top) (top)) #("i" "i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-define-syntax parse-define parse-import parse-module do-import! chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi ct-eval/residualize do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports extend-store! id-set-diff chi-top-module set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-trimmed-interface set-interface-token! set-interface-exports! interface-token interface-exports interface? make-interface flatten-exports chi-top chi-top-expr syntax-type chi-when-list chi-top-sequence chi-sequence source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks same-marks? join-marks join-wraps smart-append make-trimmed-syntax-object make-binding-wrap lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! extend-ribcage! make-empty-ribcage import-token-key import-token? make-import-token barrier-marker new-mark anti-mark the-anti-mark only-top-marked? top-marked? top-wrap empty-wrap set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage set-indirect-label! get-indirect-label indirect-label? gen-indirect-label gen-labels label? gen-label make-rename rename-marks rename-new rename-old subst-rename? wrap-subst wrap-marks make-wrap id-sym-name&marks id-sym-name id? nonsymbol-id? global-extend lookup sanitize-binding lookup* displaced-lexical-error transformer-env extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding arg-check source-annotation no-source unannotate set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object self-evaluating? build-lexical-var build-letrec build-sequence build-data build-primref build-lambda build-cte-install build-module-definition build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id get-import-binding get-global-definition-hook put-global-definition-hook gensym-hook error-hook local-eval-hook top-level-eval-hook annotation? fx< fx= fx- fx+ noexpand define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage ((import-token . *top*)) () ()) #(ribcage ((import-token . *top*)) () ()))))) (quote compile) (if (g378 g1193 (quote #(syntax-object load ((top) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(when-list situations) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(e when-list w) #((top) (top) (top)) #("i" "i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-define-syntax parse-define parse-import parse-module do-import! chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi ct-eval/residualize do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports extend-store! id-set-diff chi-top-module set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-trimmed-interface set-interface-token! set-interface-exports! interface-token interface-exports interface? make-interface flatten-exports chi-top chi-top-expr syntax-type chi-when-list chi-top-sequence chi-sequence source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks same-marks? join-marks join-wraps smart-append make-trimmed-syntax-object make-binding-wrap lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! extend-ribcage! make-empty-ribcage import-token-key import-token? make-import-token barrier-marker new-mark anti-mark the-anti-mark only-top-marked? top-marked? top-wrap empty-wrap set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage set-indirect-label! get-indirect-label indirect-label? gen-indirect-label gen-labels label? gen-label make-rename rename-marks rename-new rename-old subst-rename? wrap-subst wrap-marks make-wrap id-sym-name&marks id-sym-name id? nonsymbol-id? global-extend lookup sanitize-binding lookup* displaced-lexical-error transformer-env extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding arg-check source-annotation no-source unannotate set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object self-evaluating? build-lexical-var build-letrec build-sequence build-data build-primref build-lambda build-cte-install build-module-definition build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id get-import-binding get-global-definition-hook put-global-definition-hook gensym-hook error-hook local-eval-hook top-level-eval-hook annotation? fx< fx= fx- fx+ noexpand define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage ((import-token . *top*)) () ()) #(ribcage ((import-token . *top*)) () ()))))) (quote load) (if (g378 g1193 (quote #(syntax-object eval ((top) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(when-list situations) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(e when-list w) #((top) (top) (top)) #("i" "i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-define-syntax parse-define parse-import parse-module do-import! chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi ct-eval/residualize do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports extend-store! id-set-diff chi-top-module set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-trimmed-interface set-interface-token! set-interface-exports! interface-token interface-exports interface? make-interface flatten-exports chi-top chi-top-expr syntax-type chi-when-list chi-top-sequence chi-sequence source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks same-marks? join-marks join-wraps smart-append make-trimmed-syntax-object make-binding-wrap lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! extend-ribcage! make-empty-ribcage import-token-key import-token? make-import-token barrier-marker new-mark anti-mark the-anti-mark only-top-marked? top-marked? top-wrap empty-wrap set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage set-indirect-label! get-indirect-label indirect-label? gen-indirect-label gen-labels label? gen-label make-rename rename-marks rename-new rename-old subst-rename? wrap-subst wrap-marks make-wrap id-sym-name&marks id-sym-name id? nonsymbol-id? global-extend lookup sanitize-binding lookup* displaced-lexical-error transformer-env extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding arg-check source-annotation no-source unannotate set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object self-evaluating? build-lexical-var build-letrec build-sequence build-data build-primref build-lambda build-cte-install build-module-definition build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id get-import-binding get-global-definition-hook put-global-definition-hook gensym-hook error-hook local-eval-hook top-level-eval-hook annotation? fx< fx= fx- fx+ noexpand define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage ((import-token . *top*)) () ()) #(ribcage ((import-token . *top*)) () ()))))) (quote eval) (syntax-error (g393 g1193 g1189) (quote "invalid eval-when situation")))))) (car g1191)) g1192)))))) g1190) g1188 (quote ())))) (g396 (lambda (g1194 g1195 g1196 g1197 g1198 g1199 g1200) (g190 g1197 ((letrec ((g1201 (lambda (g1202 g1203 g1204 g1205 g1206) (if (null? g1202) (quote ()) ((lambda (g1207) (cons g1207 (g1201 (cdr g1202) g1203 g1204 g1205 g1206))) (g400 (car g1202) g1203 g1204 g1205 g1206 g1200)))))) g1201) g1194 g1195 g1196 g1198 g1199)))) (g395 (lambda (g1208 g1209 g1210 g1211) (g190 g1211 ((letrec ((g1212 (lambda (g1213 g1214 g1215) (if (null? g1213) (quote ()) ((lambda (g1216) (cons g1216 (g1212 (cdr g1213) g1214 g1215))) (g432 (car g1213) g1214 g1215)))))) g1212) g1208 g1209 g1210)))) (g394 (lambda (g1217 g1218 g1219) (g393 (if g1219 (make-annotation g1217 g1219 (quote #f)) g1217) g1218))) (g393 (lambda (g1220 g1221) (if (if (null? (g264 g1221)) (null? (g265 g1221)) (quote #f)) g1220 (if (g204 g1220) (g203 (g205 g1220) (g371 g1221 (g206 g1220))) (if (null? g1220) g1220 (g203 g1220 g1221)))))) (g392 (lambda (g1222 g1223) (if (not (null? g1223)) ((lambda (g1224) (if g1224 g1224 (g392 g1222 (cdr g1223)))) (g388 g1222 (car g1223))) (quote #f)))) (g391 (lambda (g1225 g1226 g1227) ((letrec ((g1228 (lambda (g1229 g1230) (if (null? g1229) (syntax-error g1226) (if (g256 (car g1229)) (if (g392 (car g1229) g1230) (syntax-error (car g1229) (quote "duplicate ") g1227) (g1228 (cdr g1229) (cons (car g1229) g1230))) (syntax-error (car g1229) (quote "invalid ") g1227)))))) g1228) g1225 (quote ())))) (g390 (lambda (g1231) ((letrec ((g1232 (lambda (g1233) ((lambda (g1234) (if g1234 g1234 (if (not (g392 (car g1233) (cdr g1233))) (g1232 (cdr g1233)) (quote #f)))) (null? g1233))))) g1232) g1231))) (g389 (lambda (g1235) (if ((letrec ((g1236 (lambda (g1237) ((lambda (g1238) (if g1238 g1238 (if (g256 (car g1237)) (g1236 (cdr g1237)) (quote #f)))) (null? g1237))))) g1236) g1235) (g390 g1235) (quote #f)))) (g388 (lambda (g1239 g1240) (if (if (g204 g1239) (g204 g1240) (quote #f)) (if (eq? ((lambda (g1241) (if (g90 g1241) (annotation-expression g1241) g1241)) (g205 g1239)) ((lambda (g1242) (if (g90 g1242) (annotation-expression g1242) g1242)) (g205 g1240))) (g373 (g264 (g206 g1239)) (g264 (g206 g1240))) (quote #f)) (eq? ((lambda (g1243) (if (g90 g1243) (annotation-expression g1243) g1243)) g1239) ((lambda (g1244) (if (g90 g1244) (annotation-expression g1244) g1244)) g1240))))) (g378 (lambda (g1245 g1246) (if (eq? ((lambda (g1247) ((lambda (g1248) (if (g90 g1248) (annotation-expression g1248) g1248)) (if (g204 g1247) (g205 g1247) g1247))) g1245) ((lambda (g1249) ((lambda (g1250) (if (g90 g1250) (annotation-expression g1250) g1250)) (if (g204 g1249) (g205 g1249) g1249))) g1246)) (eq? (g377 g1245 (quote (()))) (g377 g1246 (quote (())))) (quote #f)))) (g377 (lambda (g1251 g1252) (call-with-values (lambda () (g374 g1251 g1252)) (lambda (g1253 g1254) (if (g301 g1253) (g302 g1253) g1253))))) (g376 (lambda (g1255 g1256) (call-with-values (lambda () (g374 g1255 g1256)) (lambda (g1257 g1258) g1257)))) (g375 (lambda (g1259 g1260) (call-with-values (lambda () (g374 g1259 g1260)) (lambda (g1261 g1262) (values (if (g301 g1261) (g302 g1261) g1261) g1262))))) (g374 (lambda (g1263 g1264) (letrec ((g1267 (lambda (g1268 g1269 g1270 g1271 g1272) ((lambda (g1273) ((letrec ((g1274 (lambda (g1275) (if (= g1275 g1273) (g1265 g1268 (cdr g1269) g1270) (if (if (eq? (vector-ref g1271 g1275) g1268) (g373 g1270 (vector-ref (g307 g1272) g1275)) (quote #f)) (values (vector-ref (g308 g1272) g1275) g1270) (g1274 (+ g1275 (quote 1)))))))) g1274) (quote 0))) (vector-length g1271)))) (g1266 (lambda (g1276 g1277 g1278 g1279 g1280) ((letrec ((g1281 (lambda (g1282 g1283) (if (null? g1282) (g1265 g1276 (cdr g1277) g1278) (if (if (eq? (car g1282) g1276) (g373 g1278 (list-ref (g307 g1280) g1283)) (quote #f)) (values (list-ref (g308 g1280) g1283) g1278) (if (g357 (car g1282)) ((lambda (g1284) (if g1284 ((lambda (g1285) (if (symbol? g1285) (values g1285 g1278) (g375 g1285 (quote (()))))) g1284) (g1281 (cdr g1282) g1283))) (g367 g1276 (g358 (car g1282)) g1278)) (if (if (eq? (car g1282) g354) (g373 g1278 (list-ref (g307 g1280) g1283)) (quote #f)) (values (quote #f) g1278) (g1281 (cdr g1282) (+ g1283 (quote 1)))))))))) g1281) g1279 (quote 0)))) (g1265 (lambda (g1286 g1287 g1288) (if (null? g1287) (values g1286 g1288) ((lambda (g1289) (if (eq? g1289 (quote shift)) (g1265 g1286 (cdr g1287) (cdr g1288)) ((lambda (g1290) (if (vector? g1290) (g1267 g1286 g1287 g1288 g1290 g1289) (g1266 g1286 g1287 g1288 g1290 g1289))) (g306 g1289)))) (car g1287)))))) (if (symbol? g1263) (g1265 g1263 (g265 g1264) (g264 g1264)) (if (g204 g1263) ((lambda (g1291 g1292) ((lambda (g1293) (call-with-values (lambda () (g1265 g1291 (g265 g1264) g1293)) (lambda (g1294 g1295) (if (eq? g1294 g1291) (g1265 g1291 (g265 g1292) g1295) (values g1294 g1295))))) (g372 (g264 g1264) (g264 g1292)))) ((lambda (g1296) (if (g90 g1296) (annotation-expression g1296) g1296)) (g205 g1263)) (g206 g1263)) (if (g90 g1263) (g1265 ((lambda (g1297) (if (g90 g1297) (annotation-expression g1297) g1297)) g1263) (g265 g1264) (g264 g1264)) (g93 (quote id-var-name) (quote "invalid id") g1263))))))) (g373 (lambda (g1298 g1299) ((lambda (g1300) (if g1300 g1300 (if (not (null? g1298)) (if (not (null? g1299)) (if (eq? (car g1298) (car g1299)) (g373 (cdr g1298) (cdr g1299)) (quote #f)) (quote #f)) (quote #f)))) (eq? g1298 g1299)))) (g372 (lambda (g1301 g1302) (g370 g1301 g1302))) (g371 (lambda (g1303 g1304) ((lambda (g1305 g1306) (if (null? g1305) (if (null? g1306) g1304 (g263 (g264 g1304) (g370 g1306 (g265 g1304)))) (g263 (g370 g1305 (g264 g1304)) (g370 g1306 (g265 g1304))))) (g264 g1303) (g265 g1303)))) (g370 (lambda (g1307 g1308) (if (null? g1308) g1307 (append g1307 g1308)))) (g369 (lambda (g1309) (call-with-values (lambda () (g375 g1309 (quote (())))) (lambda (g1310 g1311) (begin (if (not g1310) (syntax-error g1309 (quote "identifier not visible for export")) (void)) ((lambda (g1312) (g203 g1312 (g263 g1311 (list (g304 (vector g1312) (vector g1311) (vector g1310)))))) ((lambda (g1313) ((lambda (g1314) (if (g90 g1314) (annotation-expression g1314) g1314)) (if (g204 g1313) (g205 g1313) g1313))) g1309))))))) (g368 (lambda (g1315 g1316 g1317) (if (null? g1315) g1317 (g263 (g264 g1317) (cons ((lambda (g1318) ((lambda (g1319) ((lambda (g1320 g1321) (begin ((letrec ((g1322 (lambda (g1323 g1324) (if (not (null? g1323)) (call-with-values (lambda () (g262 (car g1323) g1317)) (lambda (g1325 g1326) (begin (vector-set! g1320 g1324 g1325) (vector-set! g1321 g1324 g1326) (g1322 (cdr g1323) (+ g1324 (quote 1)))))) (void))))) g1322) g1315 (quote 0)) (g304 g1320 g1321 g1318))) (make-vector g1319) (make-vector g1319))) (vector-length g1318))) (list->vector g1316)) (g265 g1317)))))) (g367 (lambda (g1327 g1328 g1329) ((lambda (g1330) (if g1330 ((letrec ((g1331 (lambda (g1332) (if (pair? g1332) ((lambda (g1333) (if g1333 g1333 (g1331 (cdr g1332)))) (g1331 (car g1332))) (if (g373 g1329 (g264 (g206 g1332))) g1332 (quote #f)))))) g1331) g1330) (quote #f))) (g100 g1327 g1328)))) (g366 (lambda (g1334 g1335) (g309 g1334 (cons (g356 g1335) (g306 g1334))))) (g365 (lambda (g1336 g1337) (begin (g309 g1336 (cons g354 (g306 g1336))) (g310 g1336 (cons (g264 g1337) (g307 g1336)))))) (g364 (lambda (g1338 g1339) (g365 g1338 (g206 g1339)))) (g363 (lambda (g1340 g1341 g1342) (begin (g309 g1340 (cons ((lambda (g1343) (if (g90 g1343) (annotation-expression g1343) g1343)) (g205 g1341)) (g306 g1340))) (g310 g1340 (cons (g264 (g206 g1341)) (g307 g1340))) (g311 g1340 (cons g1342 (g308 g1340)))))) (g358 cdr) (g357 (lambda (g1344) (if (pair? g1344) (eq? (car g1344) g355) (quote #f)))) (g356 (lambda (g1345) (cons g355 g1345))) (g355 (quote import-token)) (g354 (quote #f)) (g349 (lambda (g1346) (g263 (cons (quote #f) (g264 g1346)) (cons (quote shift) (g265 g1346))))) (g311 (lambda (g1347 g1348) (vector-set! g1347 (quote 3) g1348))) (g310 (lambda (g1349 g1350) (vector-set! g1349 (quote 2) g1350))) (g309 (lambda (g1351 g1352) (vector-set! g1351 (quote 1) g1352))) (g308 (lambda (g1353) (vector-ref g1353 (quote 3)))) (g307 (lambda (g1354) (vector-ref g1354 (quote 2)))) (g306 (lambda (g1355) (vector-ref g1355 (quote 1)))) (g305 (lambda (g1356) (if (vector? g1356) (if (= (vector-length g1356) (quote 4)) (eq? (vector-ref g1356 (quote 0)) (quote ribcage)) (quote #f)) (quote #f)))) (g304 (lambda (g1357 g1358 g1359) (vector (quote ribcage) g1357 g1358 g1359))) (g303 set-car!) (g302 car) (g301 pair?) (g300 (lambda () (list (g297)))) (g299 (lambda (g1360) (if (null? g1360) (quote ()) (cons (g297) (g299 (cdr g1360)))))) (g298 (lambda (g1361) ((lambda (g1362) (if g1362 g1362 ((lambda (g1363) (if g1363 g1363 (g301 g1361))) (symbol? g1361)))) (string? g1361)))) (g297 (lambda () (string (quote #\i)))) (g265 cdr) (g264 car) (g263 cons) (g262 (lambda (g1364 g1365) (if (g204 g1364) (values ((lambda (g1366) (if (g90 g1366) (annotation-expression g1366) g1366)) (g205 g1364)) (g372 (g264 g1365) (g264 (g206 g1364)))) (values ((lambda (g1367) (if (g90 g1367) (annotation-expression g1367) g1367)) g1364) (g264 g1365))))) (g256 (lambda (g1368) (if (symbol? g1368) (quote #t) (if (g204 g1368) (symbol? ((lambda (g1369) (if (g90 g1369) (annotation-expression g1369) g1369)) (g205 g1368))) (if (g90 g1368) (symbol? (annotation-expression g1368)) (quote #f)))))) (g255 (lambda (g1370) (if (g204 g1370) (symbol? ((lambda (g1371) (if (g90 g1371) (annotation-expression g1371) g1371)) (g205 g1370))) (quote #f)))) (g254 (lambda (g1372 g1373 g1374) (g98 g1373 (g231 g1372 g1374)))) (g253 (lambda (g1375 g1376) (letrec ((g1377 (lambda (g1378 g1379) (begin (g234 g1378 (g232 g1379)) (g235 g1378 (g233 g1379)))))) ((lambda (g1380) ((lambda (g1381) (if (memv g1381 (quote (deferred))) (begin (g1377 g1380 ((lambda (g1382) ((lambda (g1383) (if g1383 g1383 (syntax-error g1382 (quote "invalid transformer")))) (g252 g1382))) (g92 (g233 g1380)))) ((lambda (g1384) g1380) (g232 g1380))) g1380)) (g232 g1380))) (g251 g1375 g1376))))) (g252 (lambda (g1385) (if (procedure? g1385) (g231 (quote macro) g1385) (if (g236 g1385) ((lambda (g1386) (if (memv g1386 (quote (core macro macro!))) (if (procedure? (g233 g1385)) g1385 (quote #f)) (if (memv g1386 (quote (module))) (if (g403 (g233 g1385)) g1385 (quote #f)) g1385))) (g232 g1385)) (quote #f))))) (g251 (lambda (g1387 g1388) ((lambda (g1389) (if g1389 (cdr g1389) (if (symbol? g1387) ((lambda (g1390) (if g1390 g1390 (g231 (quote global) g1387))) (g99 g1387)) (g231 (quote displaced-lexical) (quote #f))))) (assq g1387 g1388)))) (g250 (lambda (g1391) (syntax-error g1391 (if (g377 g1391 (quote (()))) (quote "identifier out of context") (quote "identifier not visible"))))) (g249 (lambda (g1392) (if (null? g1392) (quote ()) ((lambda (g1393) (if (eq? (cadr g1393) (quote lexical)) (g249 (cdr g1392)) (cons g1393 (g249 (cdr g1392))))) (car g1392))))) (g248 (lambda (g1394 g1395 g1396) (if (null? g1394) g1396 (g248 (cdr g1394) (cdr g1395) (g246 (car g1394) (g231 (quote lexical) (car g1395)) g1396))))) (g247 (lambda (g1397 g1398 g1399) (if (null? g1397) g1399 (g247 (cdr g1397) (cdr g1398) (g246 (car g1397) (car g1398) g1399))))) (g246 (lambda (g1400 g1401 g1402) (cons (cons g1400 g1401) g1402))) (g236 (lambda (g1403) (if (pair? g1403) (symbol? (car g1403)) (quote #f)))) (g235 set-cdr!) (g234 set-car!) (g233 cdr) (g232 car) (g231 (lambda (g1404 g1405) (cons g1404 g1405))) (g223 (lambda (g1406) (if (g90 g1406) (annotation-source g1406) (if (g204 g1406) (g223 (g205 g1406)) (quote #f))))) (g208 (lambda (g1407 g1408) (vector-set! g1407 (quote 2) g1408))) (g207 (lambda (g1409 g1410) (vector-set! g1409 (quote 1) g1410))) (g206 (lambda (g1411) (vector-ref g1411 (quote 2)))) (g205 (lambda (g1412) (vector-ref g1412 (quote 1)))) (g204 (lambda (g1413) (if (vector? g1413) (if (= (vector-length g1413) (quote 3)) (eq? (vector-ref g1413 (quote 0)) (quote syntax-object)) (quote #f)) (quote #f)))) (g203 (lambda (g1414 g1415) (vector (quote syntax-object) g1414 g1415))) (g191 (lambda (g1416 g1417 g1418 g1419) (if (null? g1417) g1419 (list (quote letrec) (map list g1417 g1418) g1419)))) (g190 (lambda (g1420 g1421) (if (null? (cdr g1421)) (car g1421) (cons (quote begin) g1421)))) (g101 ((lambda (g1422) (letrec ((g1425 (lambda (g1426) ((letrec ((g1427 (lambda (g1428 g1429) (if (< g1428 g1422) (list->string (cons (g1424 g1428) g1429)) ((lambda (g1430 g1431) (g1427 g1431 (cons (g1424 g1430) g1429))) (modulo g1428 g1422) (quotient g1428 g1422)))))) g1427) g1426 (quote ())))) (g1424 (lambda (g1432) (integer->char (+ g1432 (quote 33))))) (g1423 (lambda () (quote 0)))) ((lambda (g1433 g1434) (lambda (g1435) (begin (set! g1434 (+ g1434 (quote 1))) ((lambda (g1436) g1436) (string->symbol (string-append (quote "#") g1433 (g1425 g1434))))))) (g1425 (g1423)) (quote -1)))) (- (quote 127) (quote 32) (quote 2)))) (g100 (lambda (g1437 g1438) (getprop g1437 g1438))) (g99 (lambda (g1439) (getprop g1439 (quote *sc-expander*)))) (g98 (lambda (g1440 g1441) ($sc-put-cte g1440 g1441))) (g93 (lambda (g1442 g1443 g1444) (error g1443 g1444))) (g92 sc-eval) (g91 sc-eval) (g90 (lambda (g1445) (quote #f))) (g53 (quote "noexpand"))) (begin (set! $sc-put-cte (lambda (g1446 g1447) (letrec ((g1450 (lambda (g1451 g1452) ((lambda (g1453) (putprop g1453 (quote *sc-expander*) g1452)) (if (symbol? g1451) g1451 (g377 g1451 (quote (()))))))) (g1449 (lambda (g1454 g1455) (g429 (lambda (g1456) (g1448 g1456 g1455)) g1454))) (g1448 (lambda (g1457 g1458) (letrec ((g1460 (lambda (g1461 g1462) (if (pair? g1462) (if (g388 (car g1462) g1461) (g1460 g1461 (cdr g1462)) (g1459 (car g1462) (g1460 g1461 (cdr g1462)))) (if ((lambda (g1463) (if g1463 g1463 (g388 g1462 g1461))) (not g1462)) (quote #f) g1462)))) (g1459 (lambda (g1464 g1465) (if (not g1465) g1464 (cons g1464 g1465))))) ((lambda (g1466) ((lambda (g1467) (if (if (not g1467) (symbol? g1457) (quote #f)) (remprop g1466 g1458) (putprop g1466 g1458 (g1459 g1457 g1467)))) (g1460 g1457 (getprop g1466 g1458)))) ((lambda (g1468) ((lambda (g1469) (if (g90 g1469) (annotation-expression g1469) g1469)) (if (g204 g1468) (g205 g1468) g1468))) g1457)))))) ((lambda (g1470) ((lambda (g1471) (if (memv g1471 (quote (module))) (begin ((lambda (g1472) (g1449 (g404 g1472) (g405 g1472))) (g233 g1470)) (g1450 g1446 g1470)) (if (memv g1471 (quote (do-import))) ((lambda (g1473) ((lambda (g1474) ((lambda (g1475) (if (memv g1475 (quote (module))) ((lambda (g1476) (begin (if (not (eq? (g405 g1476) g1473)) (syntax-error g1446 (quote "import mismatch for module")) (void)) (g1449 (g404 g1476) (quote *top*)))) (g233 g1474)) (syntax-error g1446 (quote "import from unknown module")))) (g232 g1474))) (g253 (g377 g1446 (quote (()))) (quote ())))) (g233 g1447)) (g1450 g1446 g1470)))) (g232 g1470))) ((lambda (g1477) (if g1477 g1477 (error (quote define-syntax) (quote "invalid transformer ~s") g1447))) (g252 g1447)))))) (g254 (quote local-syntax) (quote letrec-syntax) (quote #t)) (g254 (quote local-syntax) (quote let-syntax) (quote #f)) (g254 (quote core) (quote fluid-let-syntax) (lambda (g1478 g1479 g1480 g1481) ((lambda (g1482) ((lambda (g1483) (if (if g1483 (apply (lambda (g1484 g1485 g1486 g1487 g1488) (g389 g1485)) g1483) (quote #f)) (apply (lambda (g1490 g1491 g1492 g1493 g1494) ((lambda (g1495) (begin (for-each (lambda (g1496 g1497) ((lambda (g1498) (if (memv g1498 (quote (displaced-lexical))) (g250 (g393 g1496 g1480)) (void))) (g232 (g253 g1497 g1479)))) g1491 g1495) (g437 (cons g1493 g1494) (g394 g1478 g1480 g1481) (g247 g1495 ((lambda (g1501) (map (lambda (g1502) (g231 (quote deferred) (g432 g1502 g1501 g1480))) g1492)) (g249 g1479)) g1479) g1480))) (map (lambda (g1504) (g377 g1504 g1480)) g1491))) g1483) ((lambda (g1506) (syntax-error (g394 g1478 g1480 g1481))) g1482))) ($syntax-dispatch g1482 (quote (any #(each (any any)) any . each-any))))) g1478))) (g254 (quote core) (quote quote) (lambda (g1507 g1508 g1509 g1510) ((lambda (g1511) ((lambda (g1512) (if g1512 (apply (lambda (g1513 g1514) (list (quote quote) (g450 g1514 g1509))) g1512) ((lambda (g1515) (syntax-error (g394 g1507 g1509 g1510))) g1511))) ($syntax-dispatch g1511 (quote (any any))))) g1507))) (g254 (quote core) (quote syntax) ((lambda () (letrec ((g1523 (lambda (g1524) ((lambda (g1525) (if (memv g1525 (quote (ref))) (cadr g1524) (if (memv g1525 (quote (primitive))) (cadr g1524) (if (memv g1525 (quote (quote))) (list (quote quote) (cadr g1524)) (if (memv g1525 (quote (lambda))) (list (quote lambda) (cadr g1524) (g1523 (caddr g1524))) (if (memv g1525 (quote (map))) ((lambda (g1526) (cons (if (= (length g1526) (quote 2)) (quote map) (quote map)) g1526)) (map g1523 (cdr g1524))) (cons (car g1524) (map g1523 (cdr g1524))))))))) (car g1524)))) (g1522 (lambda (g1527) (if (eq? (car g1527) (quote list)) (cons (quote vector) (cdr g1527)) (if (eq? (car g1527) (quote quote)) (list (quote quote) (list->vector (cadr g1527))) (list (quote list->vector) g1527))))) (g1521 (lambda (g1528 g1529) (if (equal? g1529 (quote (quote ()))) g1528 (list (quote append) g1528 g1529)))) (g1520 (lambda (g1530 g1531) ((lambda (g1532) (if (memv g1532 (quote (quote))) (if (eq? (car g1530) (quote quote)) (list (quote quote) (cons (cadr g1530) (cadr g1531))) (if (eq? (cadr g1531) (quote ())) (list (quote list) g1530) (list (quote cons) g1530 g1531))) (if (memv g1532 (quote (list))) (cons (quote list) (cons g1530 (cdr g1531))) (list (quote cons) g1530 g1531)))) (car g1531)))) (g1519 (lambda (g1533 g1534) ((lambda (g1535 g1536) (if (eq? (car g1533) (quote ref)) (car g1536) (if (andmap (lambda (g1537) (if (eq? (car g1537) (quote ref)) (memq (cadr g1537) g1535) (quote #f))) (cdr g1533)) (cons (quote map) (cons (list (quote primitive) (car g1533)) (map ((lambda (g1538) (lambda (g1539) (cdr (assq (cadr g1539) g1538)))) (map cons g1535 g1536)) (cdr g1533)))) (cons (quote map) (cons (list (quote lambda) g1535 g1533) g1536))))) (map cdr g1534) (map (lambda (g1540) (list (quote ref) (car g1540))) g1534)))) (g1518 (lambda (g1541 g1542) (list (quote apply) (quote (primitive append)) (g1519 g1541 g1542)))) (g1517 (lambda (g1543 g1544 g1545 g1546) (if (= g1545 (quote 0)) (values g1544 g1546) (if (null? g1546) (syntax-error g1543 (quote "missing ellipsis in syntax form")) (call-with-values (lambda () (g1517 g1543 g1544 (- g1545 (quote 1)) (cdr g1546))) (lambda (g1547 g1548) ((lambda (g1549) (if g1549 (values (cdr g1549) g1546) ((lambda (g1550) (values g1550 (cons (cons (cons g1547 g1550) (car g1546)) g1548))) (g451 (quote tmp))))) (assq g1547 (car g1546))))))))) (g1516 (lambda (g1551 g1552 g1553 g1554 g1555) (if (g256 g1552) ((lambda (g1556) ((lambda (g1557) (if (eq? (g232 g1557) (quote syntax)) (call-with-values (lambda () ((lambda (g1558) (g1517 g1551 (car g1558) (cdr g1558) g1554)) (g233 g1557))) (lambda (g1559 g1560) (values (list (quote ref) g1559) g1560))) (if (g1555 g1552) (syntax-error g1551 (quote "misplaced ellipsis in syntax form")) (values (list (quote quote) g1552) g1554)))) (g253 g1556 g1553))) (g377 g1552 (quote (())))) ((lambda (g1561) ((lambda (g1562) (if (if g1562 (apply (lambda (g1563 g1564) (g1555 g1563)) g1562) (quote #f)) (apply (lambda (g1565 g1566) (g1516 g1551 g1566 g1553 g1554 (lambda (g1567) (quote #f)))) g1562) ((lambda (g1568) (if (if g1568 (apply (lambda (g1569 g1570 g1571) (g1555 g1570)) g1568) (quote #f)) (apply (lambda (g1572 g1573 g1574) ((letrec ((g1575 (lambda (g1576 g1577) ((lambda (g1578) ((lambda (g1579) (if (if g1579 (apply (lambda (g1580 g1581) (g1555 g1580)) g1579) (quote #f)) (apply (lambda (g1582 g1583) (g1575 g1583 (lambda (g1584) (call-with-values (lambda () (g1577 (cons (quote ()) g1584))) (lambda (g1585 g1586) (if (null? (car g1586)) (syntax-error g1551 (quote "extra ellipsis in syntax form")) (values (g1518 g1585 (car g1586)) (cdr g1586)))))))) g1579) ((lambda (g1587) (call-with-values (lambda () (g1516 g1551 g1576 g1553 g1554 g1555)) (lambda (g1588 g1589) (call-with-values (lambda () (g1577 g1589)) (lambda (g1590 g1591) (values (g1521 g1590 g1588) g1591)))))) g1578))) ($syntax-dispatch g1578 (quote (any . any))))) g1576)))) g1575) g1574 (lambda (g1592) (call-with-values (lambda () (g1516 g1551 g1572 g1553 (cons (quote ()) g1592) g1555)) (lambda (g1593 g1594) (if (null? (car g1594)) (syntax-error g1551 (quote "extra ellipsis in syntax form")) (values (g1519 g1593 (car g1594)) (cdr g1594)))))))) g1568) ((lambda (g1595) (if g1595 (apply (lambda (g1596 g1597) (call-with-values (lambda () (g1516 g1551 g1596 g1553 g1554 g1555)) (lambda (g1598 g1599) (call-with-values (lambda () (g1516 g1551 g1597 g1553 g1599 g1555)) (lambda (g1600 g1601) (values (g1520 g1598 g1600) g1601)))))) g1595) ((lambda (g1602) (if g1602 (apply (lambda (g1603 g1604) (call-with-values (lambda () (g1516 g1551 (cons g1603 g1604) g1553 g1554 g1555)) (lambda (g1606 g1607) (values (g1522 g1606) g1607)))) g1602) ((lambda (g1608) (values (list (quote quote) g1552) g1554)) g1561))) ($syntax-dispatch g1561 (quote #(vector (any . each-any))))))) ($syntax-dispatch g1561 (quote (any . any)))))) ($syntax-dispatch g1561 (quote (any any . any)))))) ($syntax-dispatch g1561 (quote (any any))))) g1552))))) (lambda (g1609 g1610 g1611 g1612) ((lambda (g1613) ((lambda (g1614) ((lambda (g1615) (if g1615 (apply (lambda (g1616 g1617) (call-with-values (lambda () (g1516 g1613 g1617 g1610 (quote ()) g447)) (lambda (g1618 g1619) (g1523 g1618)))) g1615) ((lambda (g1620) (syntax-error g1613)) g1614))) ($syntax-dispatch g1614 (quote (any any))))) g1613)) (g394 g1609 g1611 g1612))))))) (g254 (quote core) (quote lambda) (lambda (g1621 g1622 g1623 g1624) ((lambda (g1625) ((lambda (g1626) (if g1626 (apply (lambda (g1627 g1628) (g444 (g394 g1621 g1623 g1624) g1628 g1622 g1623 (lambda (g1629 g1630) (list (quote lambda) g1629 g1630)))) g1626) (syntax-error g1625))) ($syntax-dispatch g1625 (quote (any . any))))) g1621))) (g254 (quote core) (quote letrec) (lambda (g1631 g1632 g1633 g1634) ((lambda (g1635) ((lambda (g1636) (if g1636 (apply (lambda (g1637 g1638 g1639 g1640 g1641) ((lambda (g1642) (if (not (g389 g1642)) (g391 (map (lambda (g1643) (g393 g1643 g1633)) g1642) (g394 g1631 g1633 g1634) (quote "bound variable")) ((lambda (g1644 g1645) ((lambda (g1646 g1647) (g191 g1634 g1645 (map (lambda (g1648) (g432 g1648 g1647 g1646)) g1639) (g437 (cons g1640 g1641) (g394 g1631 g1646 g1634) g1647 g1646))) (g368 g1642 g1644 g1633) (g248 g1644 g1645 g1632))) (g299 g1642) (map g451 g1642)))) g1638)) g1636) ((lambda (g1652) (syntax-error (g394 g1631 g1633 g1634))) g1635))) ($syntax-dispatch g1635 (quote (any #(each (any any)) any . each-any))))) g1631))) (g254 (quote core) (quote if) (lambda (g1653 g1654 g1655 g1656) ((lambda (g1657) ((lambda (g1658) (if g1658 (apply (lambda (g1659 g1660 g1661) (list (quote if) (g432 g1660 g1654 g1655) (g432 g1661 g1654 g1655) (g446))) g1658) ((lambda (g1662) (if g1662 (apply (lambda (g1663 g1664 g1665 g1666) (list (quote if) (g432 g1664 g1654 g1655) (g432 g1665 g1654 g1655) (g432 g1666 g1654 g1655))) g1662) ((lambda (g1667) (syntax-error (g394 g1653 g1655 g1656))) g1657))) ($syntax-dispatch g1657 (quote (any any any any)))))) ($syntax-dispatch g1657 (quote (any any any))))) g1653))) (g254 (quote set!) (quote set!) (quote ())) (g254 (quote begin) (quote begin) (quote ())) (g254 (quote module-key) (quote module) (quote ())) (g254 (quote import) (quote import) (quote #f)) (g254 (quote import) (quote import-only) (quote #t)) (g254 (quote define) (quote define) (quote ())) (g254 (quote define-syntax) (quote define-syntax) (quote ())) (g254 (quote eval-when) (quote eval-when) (quote ())) (g254 (quote core) (quote syntax-case) ((lambda () (letrec ((g1671 (lambda (g1672 g1673 g1674 g1675) (if (null? g1674) (list (quote syntax-error) g1672) ((lambda (g1676) ((lambda (g1677) (if g1677 (apply (lambda (g1678 g1679) (if (if (g256 g1678) (if (not (g392 g1678 g1673)) (not (g447 g1678)) (quote #f)) (quote #f)) ((lambda (g1680 g1681) (list (list (quote lambda) (list g1681) (g432 g1679 (g246 g1680 (g231 (quote syntax) (cons g1681 (quote 0))) g1675) (g368 (list g1678) (list g1680) (quote (()))))) g1672)) (g297) (g451 g1678)) (g1670 g1672 g1673 (cdr g1674) g1675 g1678 (quote #t) g1679))) g1677) ((lambda (g1682) (if g1682 (apply (lambda (g1683 g1684 g1685) (g1670 g1672 g1673 (cdr g1674) g1675 g1683 g1684 g1685)) g1682) ((lambda (g1686) (syntax-error (car g1674) (quote "invalid syntax-case clause"))) g1676))) ($syntax-dispatch g1676 (quote (any any any)))))) ($syntax-dispatch g1676 (quote (any any))))) (car g1674))))) (g1670 (lambda (g1687 g1688 g1689 g1690 g1691 g1692 g1693) (call-with-values (lambda () (g1668 g1691 g1688)) (lambda (g1694 g1695) (if (not (g390 (map car g1695))) (g391 (map car g1695) g1691 (quote "pattern variable")) (if (not (andmap (lambda (g1696) (not (g447 (car g1696)))) g1695)) (syntax-error g1691 (quote "misplaced ellipsis in syntax-case pattern")) ((lambda (g1697) (list (list (quote lambda) (list g1697) (list (quote if) ((lambda (g1707) ((lambda (g1708) (if g1708 (apply (lambda () g1697) g1708) ((lambda (g1709) (list (quote if) g1697 (g1669 g1695 g1692 g1697 g1690) (list (quote quote) (quote #f)))) g1707))) ($syntax-dispatch g1707 (quote #(atom #t))))) g1692) (g1669 g1695 g1693 g1697 g1690) (g1671 g1687 g1688 g1689 g1690))) (if (eq? g1694 (quote any)) (list (quote list) g1687) (list (quote $syntax-dispatch) g1687 (list (quote quote) g1694))))) (g451 (quote tmp))))))))) (g1669 (lambda (g1710 g1711 g1712 g1713) ((lambda (g1714 g1715) ((lambda (g1716 g1717) (list (quote apply) (list (quote lambda) g1717 (g432 g1711 (g247 g1716 (map (lambda (g1718 g1719) (g231 (quote syntax) (cons g1718 g1719))) g1717 (map cdr g1710)) g1713) (g368 g1714 g1716 (quote (()))))) g1712)) (g299 g1714) (map g451 g1714))) (map car g1710) (map cdr g1710)))) (g1668 (lambda (g1720 g1721) ((letrec ((g1722 (lambda (g1723 g1724 g1725) (if (g256 g1723) (if (g392 g1723 g1721) (values (vector (quote free-id) g1723) g1725) (values (quote any) (cons (cons g1723 g1724) g1725))) ((lambda (g1726) ((lambda (g1727) (if (if g1727 (apply (lambda (g1728 g1729) (g447 g1729)) g1727) (quote #f)) (apply (lambda (g1730 g1731) (call-with-values (lambda () (g1722 g1730 (+ g1724 (quote 1)) g1725)) (lambda (g1732 g1733) (values (if (eq? g1732 (quote any)) (quote each-any) (vector (quote each) g1732)) g1733)))) g1727) ((lambda (g1734) (if g1734 (apply (lambda (g1735 g1736) (call-with-values (lambda () (g1722 g1736 g1724 g1725)) (lambda (g1737 g1738) (call-with-values (lambda () (g1722 g1735 g1724 g1738)) (lambda (g1739 g1740) (values (cons g1739 g1737) g1740)))))) g1734) ((lambda (g1741) (if g1741 (apply (lambda () (values (quote ()) g1725)) g1741) ((lambda (g1742) (if g1742 (apply (lambda (g1743) (call-with-values (lambda () (g1722 g1743 g1724 g1725)) (lambda (g1745 g1746) (values (vector (quote vector) g1745) g1746)))) g1742) ((lambda (g1747) (values (vector (quote atom) (g450 g1723 (quote (())))) g1725)) g1726))) ($syntax-dispatch g1726 (quote #(vector each-any)))))) ($syntax-dispatch g1726 (quote ()))))) ($syntax-dispatch g1726 (quote (any . any)))))) ($syntax-dispatch g1726 (quote (any any))))) g1723))))) g1722) g1720 (quote 0) (quote ()))))) (lambda (g1748 g1749 g1750 g1751) ((lambda (g1752) ((lambda (g1753) ((lambda (g1754) (if g1754 (apply (lambda (g1755 g1756 g1757 g1758) (if (andmap (lambda (g1759) (if (g256 g1759) (not (g447 g1759)) (quote #f))) g1757) ((lambda (g1761) (list (list (quote lambda) (list g1761) (g1671 g1761 g1757 g1758 g1749)) (g432 g1756 g1749 (quote (()))))) (g451 (quote tmp))) (syntax-error g1752 (quote "invalid literals list in")))) g1754) (syntax-error g1753))) ($syntax-dispatch g1753 (quote (any any each-any . each-any))))) g1752)) (g394 g1748 g1750 g1751))))))) (set! sc-expand ((lambda (g1764 g1765 g1766) ((lambda (g1767) (lambda (g1768) (if (if (pair? g1768) (equal? (car g1768) g53) (quote #f)) (cadr g1768) (g400 g1768 (quote ()) g1767 g1764 g1765 g1766)))) (g263 (g264 (quote ((top)))) (cons g1766 (g265 (quote ((top)))))))) (quote e) (quote (eval)) ((lambda (g1769) (begin (g366 g1769 (quote *top*)) g1769)) (g304 (quote ()) (quote ()) (quote ()))))) (set! identifier? (lambda (g1770) (g255 g1770))) (set! datum->syntax-object (lambda (g1771 g1772) (begin ((lambda (g1773) (if (not (g255 g1773)) (g93 (quote datum->syntax-object) (quote "invalid argument") g1773) (void))) g1771) (g203 g1772 (g206 g1771))))) (set! syntax-object->datum (lambda (g1774) (g450 g1774 (quote (()))))) (set! generate-temporaries (lambda (g1775) (begin ((lambda (g1776) (if (not (list? g1776)) (g93 (quote generate-temporaries) (quote "invalid argument") g1776) (void))) g1775) (map (lambda (g1777) (g393 (gensym) (quote ((top))))) g1775)))) (set! free-identifier=? (lambda (g1778 g1779) (begin ((lambda (g1780) (if (not (g255 g1780)) (g93 (quote free-identifier=?) (quote "invalid argument") g1780) (void))) g1778) ((lambda (g1781) (if (not (g255 g1781)) (g93 (quote free-identifier=?) (quote "invalid argument") g1781) (void))) g1779) (g378 g1778 g1779)))) (set! bound-identifier=? (lambda (g1782 g1783) (begin ((lambda (g1784) (if (not (g255 g1784)) (g93 (quote bound-identifier=?) (quote "invalid argument") g1784) (void))) g1782) ((lambda (g1785) (if (not (g255 g1785)) (g93 (quote bound-identifier=?) (quote "invalid argument") g1785) (void))) g1783) (g388 g1782 g1783)))) (set! syntax-error (lambda (g1787 . g1786) (begin (for-each (lambda (g1788) ((lambda (g1789) (if (not (string? g1789)) (g93 (quote syntax-error) (quote "invalid argument") g1789) (void))) g1788)) g1786) ((lambda (g1790) (g93 (quote #f) g1790 (g450 g1787 (quote (()))))) (if (null? g1786) (quote "invalid syntax") (apply string-append g1786)))))) ((lambda () (letrec ((g1795 (lambda (g1796 g1797 g1798 g1799) (if (not g1799) (quote #f) (if (eq? g1797 (quote any)) (cons (g393 g1796 g1798) g1799) (if (g204 g1796) (g1794 ((lambda (g1800) (if (g90 g1800) (annotation-expression g1800) g1800)) (g205 g1796)) g1797 (g371 g1798 (g206 g1796)) g1799) (g1794 ((lambda (g1801) (if (g90 g1801) (annotation-expression g1801) g1801)) g1796) g1797 g1798 g1799)))))) (g1794 (lambda (g1802 g1803 g1804 g1805) (if (null? g1803) (if (null? g1802) g1805 (quote #f)) (if (pair? g1803) (if (pair? g1802) (g1795 (car g1802) (car g1803) g1804 (g1795 (cdr g1802) (cdr g1803) g1804 g1805)) (quote #f)) (if (eq? g1803 (quote each-any)) ((lambda (g1806) (if g1806 (cons g1806 g1805) (quote #f))) (g1792 g1802 g1804)) ((lambda (g1807) (if (memv g1807 (quote (each))) (if (null? g1802) (g1793 (vector-ref g1803 (quote 1)) g1805) ((lambda (g1808) (if g1808 ((letrec ((g1809 (lambda (g1810) (if (null? (car g1810)) g1805 (cons (map car g1810) (g1809 (map cdr g1810))))))) g1809) g1808) (quote #f))) (g1791 g1802 (vector-ref g1803 (quote 1)) g1804))) (if (memv g1807 (quote (free-id))) (if (g256 g1802) (if (g378 (g393 g1802 g1804) (vector-ref g1803 (quote 1))) g1805 (quote #f)) (quote #f)) (if (memv g1807 (quote (atom))) (if (equal? (vector-ref g1803 (quote 1)) (g450 g1802 g1804)) g1805 (quote #f)) (if (memv g1807 (quote (vector))) (if (vector? g1802) (g1795 (vector->list g1802) (vector-ref g1803 (quote 1)) g1804 g1805) (quote #f)) (void)))))) (vector-ref g1803 (quote 0)))))))) (g1793 (lambda (g1811 g1812) (if (null? g1811) g1812 (if (eq? g1811 (quote any)) (cons (quote ()) g1812) (if (pair? g1811) (g1793 (car g1811) (g1793 (cdr g1811) g1812)) (if (eq? g1811 (quote each-any)) (cons (quote ()) g1812) ((lambda (g1813) (if (memv g1813 (quote (each))) (g1793 (vector-ref g1811 (quote 1)) g1812) (if (memv g1813 (quote (free-id atom))) g1812 (if (memv g1813 (quote (vector))) (g1793 (vector-ref g1811 (quote 1)) g1812) (void))))) (vector-ref g1811 (quote 0))))))))) (g1792 (lambda (g1814 g1815) (if (g90 g1814) (g1792 (annotation-expression g1814) g1815) (if (pair? g1814) ((lambda (g1816) (if g1816 (cons (g393 (car g1814) g1815) g1816) (quote #f))) (g1792 (cdr g1814) g1815)) (if (null? g1814) (quote ()) (if (g204 g1814) (g1792 (g205 g1814) (g371 g1815 (g206 g1814))) (quote #f))))))) (g1791 (lambda (g1817 g1818 g1819) (if (g90 g1817) (g1791 (annotation-expression g1817) g1818 g1819) (if (pair? g1817) ((lambda (g1820) (if g1820 ((lambda (g1821) (if g1821 (cons g1820 g1821) (quote #f))) (g1791 (cdr g1817) g1818 g1819)) (quote #f))) (g1795 (car g1817) g1818 g1819 (quote ()))) (if (null? g1817) (quote ()) (if (g204 g1817) (g1791 (g205 g1817) g1818 (g371 g1819 (g206 g1817))) (quote #f)))))))) (set! $syntax-dispatch (lambda (g1822 g1823) (if (eq? g1823 (quote any)) (list g1822) (if (g204 g1822) (g1794 ((lambda (g1824) (if (g90 g1824) (annotation-expression g1824) g1824)) (g205 g1822)) g1823 (g206 g1822) (quote ())) (g1794 ((lambda (g1825) (if (g90 g1825) (annotation-expression g1825) g1825)) g1822) g1823 (quote (())) (quote ())))))))))))))($sc-put-cte (quote with-syntax) (lambda (g1826) ((lambda (g1827) ((lambda (g1828) (if g1828 (apply (lambda (g1829 g1830 g1831) (cons (quote #(syntax-object begin ((top) #(ribcage #(_ e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (cons g1830 g1831))) g1828) ((lambda (g1833) (if g1833 (apply (lambda (g1834 g1835 g1836 g1837 g1838) (list (quote #(syntax-object syntax-case ((top) #(ribcage #(_ out in e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) g1836 (quote ()) (list g1835 (cons (quote #(syntax-object begin ((top) #(ribcage #(_ out in e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (cons g1837 g1838))))) g1833) ((lambda (g1840) (if g1840 (apply (lambda (g1841 g1842 g1843 g1844 g1845) (list (quote #(syntax-object syntax-case ((top) #(ribcage #(_ out in e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (cons (quote #(syntax-object list ((top) #(ribcage #(_ out in e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) g1843) (quote ()) (list g1842 (cons (quote #(syntax-object begin ((top) #(ribcage #(_ out in e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (cons g1844 g1845))))) g1840) (syntax-error g1827))) ($syntax-dispatch g1827 (quote (any #(each (any any)) any . each-any)))))) ($syntax-dispatch g1827 (quote (any ((any any)) any . each-any)))))) ($syntax-dispatch g1827 (quote (any () any . each-any))))) g1826)))($sc-put-cte (quote syntax-rules) (lambda (g1849) ((lambda (g1850) ((lambda (g1851) (if g1851 (apply (lambda (g1852 g1853 g1854 g1855 g1856) (list (quote #(syntax-object lambda ((top) #(ribcage #(_ k keyword pattern template) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (quote (#(syntax-object x ((top) #(ribcage #(_ k keyword pattern template) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ()))))) (cons (quote #(syntax-object syntax-case ((top) #(ribcage #(_ k keyword pattern template) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (cons (quote #(syntax-object x ((top) #(ribcage #(_ k keyword pattern template) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (cons g1853 (map (lambda (g1859 g1858) (list (cons (quote #(syntax-object dummy ((top) #(ribcage #(_ k keyword pattern template) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) g1858) (list (quote #(syntax-object syntax ((top) #(ribcage #(_ k keyword pattern template) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) g1859))) g1856 g1855)))))) g1851) (syntax-error g1850))) ($syntax-dispatch g1850 (quote (any each-any . #(each ((any . any) any))))))) g1849)))($sc-put-cte (quote or) (lambda (g1860) ((lambda (g1861) ((lambda (g1862) (if g1862 (apply (lambda (g1863) (quote #(syntax-object #f ((top) #(ribcage #(_) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ()))))) g1862) ((lambda (g1864) (if g1864 (apply (lambda (g1865 g1866) g1866) g1864) ((lambda (g1867) (if g1867 (apply (lambda (g1868 g1869 g1870 g1871) (list (quote #(syntax-object let ((top) #(ribcage #(_ e1 e2 e3) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (list (list (quote #(syntax-object t ((top) #(ribcage #(_ e1 e2 e3) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) g1869)) (list (quote #(syntax-object if ((top) #(ribcage #(_ e1 e2 e3) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (quote #(syntax-object t ((top) #(ribcage #(_ e1 e2 e3) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (quote #(syntax-object t ((top) #(ribcage #(_ e1 e2 e3) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (cons (quote #(syntax-object or ((top) #(ribcage #(_ e1 e2 e3) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (cons g1870 g1871))))) g1867) (syntax-error g1861))) ($syntax-dispatch g1861 (quote (any any any . each-any)))))) ($syntax-dispatch g1861 (quote (any any)))))) ($syntax-dispatch g1861 (quote (any))))) g1860)))($sc-put-cte (quote and) (lambda (g1873) ((lambda (g1874) ((lambda (g1875) (if g1875 (apply (lambda (g1876 g1877 g1878 g1879) (cons (quote #(syntax-object if ((top) #(ribcage #(_ e1 e2 e3) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (cons g1877 (cons (cons (quote #(syntax-object and ((top) #(ribcage #(_ e1 e2 e3) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (cons g1878 g1879)) (quote (#(syntax-object #f ((top) #(ribcage #(_ e1 e2 e3) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ()))))))))) g1875) ((lambda (g1881) (if g1881 (apply (lambda (g1882 g1883) g1883) g1881) ((lambda (g1884) (if g1884 (apply (lambda (g1885) (quote #(syntax-object #t ((top) #(ribcage #(_) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ()))))) g1884) (syntax-error g1874))) ($syntax-dispatch g1874 (quote (any)))))) ($syntax-dispatch g1874 (quote (any any)))))) ($syntax-dispatch g1874 (quote (any any any . each-any))))) g1873)))($sc-put-cte (quote let) (lambda (g1886) ((lambda (g1887) ((lambda (g1888) (if (if g1888 (apply (lambda (g1889 g1890 g1891 g1892 g1893) (andmap identifier? g1890)) g1888) (quote #f)) (apply (lambda (g1895 g1896 g1897 g1898 g1899) (cons (cons (quote #(syntax-object lambda ((top) #(ribcage #(_ x v e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (cons g1896 (cons g1898 g1899))) g1897)) g1888) ((lambda (g1903) (if (if g1903 (apply (lambda (g1904 g1905 g1906 g1907 g1908 g1909) (andmap identifier? (cons g1905 g1906))) g1903) (quote #f)) (apply (lambda (g1911 g1912 g1913 g1914 g1915 g1916) (cons (list (quote #(syntax-object letrec ((top) #(ribcage #(_ f x v e1 e2) #((top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (list (list g1912 (cons (quote #(syntax-object lambda ((top) #(ribcage #(_ f x v e1 e2) #((top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (cons g1913 (cons g1915 g1916))))) g1912) g1914)) g1903) (syntax-error g1887))) ($syntax-dispatch g1887 (quote (any any #(each (any any)) any . each-any)))))) ($syntax-dispatch g1887 (quote (any #(each (any any)) any . each-any))))) g1886)))($sc-put-cte (quote let*) (lambda (g1920) ((lambda (g1921) ((lambda (g1922) (if (if g1922 (apply (lambda (g1923 g1924 g1925 g1926 g1927) (andmap identifier? g1924)) g1922) (quote #f)) (apply (lambda (g1929 g1930 g1931 g1932 g1933) ((letrec ((g1934 (lambda (g1935) (if (null? g1935) (cons (quote #(syntax-object let ((top) #(ribcage () () ()) #(ribcage #(bindings) #((top)) #("i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(let* x v e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (cons (quote ()) (cons g1932 g1933))) ((lambda (g1937) ((lambda (g1938) (if g1938 (apply (lambda (g1939 g1940) (list (quote #(syntax-object let ((top) #(ribcage #(body binding) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(bindings) #((top)) #("i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(let* x v e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (list g1940) g1939)) g1938) (syntax-error g1937))) ($syntax-dispatch g1937 (quote (any any))))) (list (g1934 (cdr g1935)) (car g1935))))))) g1934) (map list g1930 g1931))) g1922) (syntax-error g1921))) ($syntax-dispatch g1921 (quote (any #(each (any any)) any . each-any))))) g1920)))($sc-put-cte (quote cond) (lambda (g1943) ((lambda (g1944) ((lambda (g1945) (if g1945 (apply (lambda (g1946 g1947 g1948) ((letrec ((g1949 (lambda (g1950 g1951) (if (null? g1951) ((lambda (g1952) ((lambda (g1953) (if g1953 (apply (lambda (g1954 g1955) (cons (quote #(syntax-object begin ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (cons g1954 g1955))) g1953) ((lambda (g1957) (if g1957 (apply (lambda (g1958) (cons (quote #(syntax-object let ((top) #(ribcage #(e0) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (cons (list (list (quote #(syntax-object t ((top) #(ribcage #(e0) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) g1958)) (quote ((#(syntax-object if ((top) #(ribcage #(e0) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ()))) #(syntax-object t ((top) #(ribcage #(e0) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ()))) #(syntax-object t ((top) #(ribcage #(e0) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ()))))))))) g1957) ((lambda (g1959) (if g1959 (apply (lambda (g1960 g1961) (list (quote #(syntax-object let ((top) #(ribcage #(e0 e1) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (list (list (quote #(syntax-object t ((top) #(ribcage #(e0 e1) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) g1960)) (list (quote #(syntax-object if ((top) #(ribcage #(e0 e1) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (quote #(syntax-object t ((top) #(ribcage #(e0 e1) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (cons g1961 (quote (#(syntax-object t ((top) #(ribcage #(e0 e1) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ()))))))))) g1959) ((lambda (g1962) (if g1962 (apply (lambda (g1963 g1964 g1965) (list (quote #(syntax-object if ((top) #(ribcage #(e0 e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) g1963 (cons (quote #(syntax-object begin ((top) #(ribcage #(e0 e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (cons g1964 g1965)))) g1962) ((lambda (g1967) (syntax-error g1943)) g1952))) ($syntax-dispatch g1952 (quote (any any . each-any)))))) ($syntax-dispatch g1952 (quote (any #(free-id #(syntax-object => ((top) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) any)))))) ($syntax-dispatch g1952 (quote (any)))))) ($syntax-dispatch g1952 (quote (#(free-id #(syntax-object else ((top) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) any . each-any))))) g1950) ((lambda (g1968) ((lambda (g1969) ((lambda (g1970) ((lambda (g1971) (if g1971 (apply (lambda (g1972) (list (quote #(syntax-object let ((top) #(ribcage #(e0) #((top)) #("i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (list (list (quote #(syntax-object t ((top) #(ribcage #(e0) #((top)) #("i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) g1972)) (list (quote #(syntax-object if ((top) #(ribcage #(e0) #((top)) #("i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (quote #(syntax-object t ((top) #(ribcage #(e0) #((top)) #("i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (quote #(syntax-object t ((top) #(ribcage #(e0) #((top)) #("i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) g1969))) g1971) ((lambda (g1973) (if g1973 (apply (lambda (g1974 g1975) (list (quote #(syntax-object let ((top) #(ribcage #(e0 e1) #((top) (top)) #("i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (list (list (quote #(syntax-object t ((top) #(ribcage #(e0 e1) #((top) (top)) #("i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) g1974)) (list (quote #(syntax-object if ((top) #(ribcage #(e0 e1) #((top) (top)) #("i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (quote #(syntax-object t ((top) #(ribcage #(e0 e1) #((top) (top)) #("i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (cons g1975 (quote (#(syntax-object t ((top) #(ribcage #(e0 e1) #((top) (top)) #("i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))))) g1969))) g1973) ((lambda (g1976) (if g1976 (apply (lambda (g1977 g1978 g1979) (list (quote #(syntax-object if ((top) #(ribcage #(e0 e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) g1977 (cons (quote #(syntax-object begin ((top) #(ribcage #(e0 e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (cons g1978 g1979)) g1969)) g1976) ((lambda (g1981) (syntax-error g1943)) g1970))) ($syntax-dispatch g1970 (quote (any any . each-any)))))) ($syntax-dispatch g1970 (quote (any #(free-id #(syntax-object => ((top) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) any)))))) ($syntax-dispatch g1970 (quote (any))))) g1950)) g1968)) (g1949 (car g1951) (cdr g1951))))))) g1949) g1947 g1948)) g1945) (syntax-error g1944))) ($syntax-dispatch g1944 (quote (any any . each-any))))) g1943)))($sc-put-cte (quote do) (lambda (g1983) ((lambda (g1984) ((lambda (g1985) (if g1985 (apply (lambda (g1986 g1987 g1988 g1989 g1990 g1991 g1992) ((lambda (g1993) ((lambda (g1994) (if g1994 (apply (lambda (g1995) ((lambda (g1996) ((lambda (g1997) (if g1997 (apply (lambda () (list (quote #(syntax-object let ((top) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (quote #(syntax-object doloop ((top) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (map list g1987 g1988) (list (quote #(syntax-object if ((top) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (list (quote #(syntax-object not ((top) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) g1990) (cons (quote #(syntax-object begin ((top) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (append g1992 (list (cons (quote #(syntax-object doloop ((top) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) g1995))))))) g1997) ((lambda (g2002) (if g2002 (apply (lambda (g2003 g2004) (list (quote #(syntax-object let ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (quote #(syntax-object doloop ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (map list g1987 g1988) (list (quote #(syntax-object if ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) g1990 (cons (quote #(syntax-object begin ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (cons g2003 g2004)) (cons (quote #(syntax-object begin ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (append g1992 (list (cons (quote #(syntax-object doloop ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) g1995))))))) g2002) (syntax-error g1996))) ($syntax-dispatch g1996 (quote (any . each-any)))))) ($syntax-dispatch g1996 (quote ())))) g1991)) g1994) (syntax-error g1993))) ($syntax-dispatch g1993 (quote each-any)))) (map (lambda (g2011 g2012) ((lambda (g2013) ((lambda (g2014) (if g2014 (apply (lambda () g2011) g2014) ((lambda (g2015) (if g2015 (apply (lambda (g2016) g2016) g2015) ((lambda (g2017) (syntax-error g1983)) g2013))) ($syntax-dispatch g2013 (quote (any)))))) ($syntax-dispatch g2013 (quote ())))) g2012)) g1987 g1989))) g1985) (syntax-error g1984))) ($syntax-dispatch g1984 (quote (any #(each (any any . any)) (any . each-any) . each-any))))) g1983)))($sc-put-cte (quote quasiquote) (letrec ((g2020 (lambda (g2029) (if (identifier? g2029) (free-identifier=? g2029 (quote #(syntax-object quote ((top) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage ((import-token . *top*)) () ()))))) (quote #f)))) (g2021 (lambda (g2030) (if (identifier? g2030) (free-identifier=? g2030 (quote #(syntax-object list ((top) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage ((import-token . *top*)) () ()))))) (quote #f)))) (g2022 (lambda (g2031) (if (identifier? g2031) (free-identifier=? g2031 (quote #(syntax-object cons ((top) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage ((import-token . *top*)) () ()))))) (quote #f)))) (g2023 (lambda (g2032) ((lambda (g2033) ((lambda (g2034) (if g2034 (apply (lambda (g2035) (g2020 g2035)) g2034) ((lambda (g2036) (quote #f)) g2033))) ($syntax-dispatch g2033 (quote (any ()))))) g2032))) (g2024 (lambda (g2037 g2038) ((letrec ((g2039 (lambda (g2040) (if (null? g2040) g2038 (g2025 (car g2040) (g2039 (cdr g2040))))))) g2039) g2037))) (g2025 (lambda (g2041 g2042) ((lambda (g2043) ((lambda (g2044) (if g2044 (apply (lambda (g2045 g2046) ((lambda (g2047) ((lambda (g2048) (if (if g2048 (apply (lambda (g2049 g2050) (g2020 g2049)) g2048) (quote #f)) (apply (lambda (g2051 g2052) ((lambda (g2053) ((lambda (g2054) (if (if g2054 (apply (lambda (g2055 g2056) (g2020 g2055)) g2054) (quote #f)) (apply (lambda (g2057 g2058) (list (quote #(syntax-object quote ((top) #(ribcage #(quote? dx) #((top) (top)) #("i" "i")) #(ribcage #(quote? dy) #((top) (top)) #("i" "i")) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage ((import-token . *top*)) () ())))) (cons g2058 g2052))) g2054) ((lambda (g2059) (if (null? g2052) (list (quote #(syntax-object list ((top) #(ribcage #(_) #((top)) #("i")) #(ribcage #(quote? dy) #((top) (top)) #("i" "i")) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage ((import-token . *top*)) () ())))) g2045) (list (quote #(syntax-object cons ((top) #(ribcage #(_) #((top)) #("i")) #(ribcage #(quote? dy) #((top) (top)) #("i" "i")) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage ((import-token . *top*)) () ())))) g2045 g2046))) g2053))) ($syntax-dispatch g2053 (quote (any any))))) g2045)) g2048) ((lambda (g2060) (if (if g2060 (apply (lambda (g2061 g2062) (g2021 g2061)) g2060) (quote #f)) (apply (lambda (g2063 g2064) (cons (quote #(syntax-object list ((top) #(ribcage #(listp stuff) #((top) (top)) #("i" "i")) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage ((import-token . *top*)) () ())))) (cons g2045 g2064))) g2060) ((lambda (g2065) (list (quote #(syntax-object cons ((top) #(ribcage #(else) #((top)) #("i")) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage ((import-token . *top*)) () ())))) g2045 g2046)) g2047))) ($syntax-dispatch g2047 (quote (any . any)))))) ($syntax-dispatch g2047 (quote (any any))))) g2046)) g2044) (syntax-error g2043))) ($syntax-dispatch g2043 (quote (any any))))) (list g2041 g2042)))) (g2026 (lambda (g2066 g2067) ((lambda (g2068) (if (null? g2068) (quote (#(syntax-object quote ((top) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(ls) #((top)) #("i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage ((import-token . *top*)) () ()))) ())) (if (null? (cdr g2068)) (car g2068) ((lambda (g2069) ((lambda (g2070) (if g2070 (apply (lambda (g2071) (cons (quote #(syntax-object append ((top) #(ribcage #(p) #((top)) #("i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(ls) #((top)) #("i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage ((import-token . *top*)) () ())))) g2071)) g2070) (syntax-error g2069))) ($syntax-dispatch g2069 (quote each-any)))) g2068)))) ((letrec ((g2073 (lambda (g2074) (if (null? g2074) (if (g2023 g2067) (quote ()) (list g2067)) (if (g2023 (car g2074)) (g2073 (cdr g2074)) (cons (car g2074) (g2073 (cdr g2074)))))))) g2073) g2066)))) (g2027 (lambda (g2075) ((lambda (g2076) ((lambda (g2077) ((lambda (g2078) ((lambda (g2079) (if (if g2079 (apply (lambda (g2080 g2081) (g2020 g2080)) g2079) (quote #f)) (apply (lambda (g2082 g2083) (list (quote #(syntax-object quote ((top) #(ribcage #(quote? x) #((top) (top)) #("i" "i")) #(ribcage #(pat-x) #((top)) #("i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage ((import-token . *top*)) () ())))) (list->vector g2083))) g2079) ((lambda (g2085) ((letrec ((g2086 (lambda (g2087 g2088) ((lambda (g2089) ((lambda (g2090) (if (if g2090 (apply (lambda (g2091 g2092) (g2020 g2091)) g2090) (quote #f)) (apply (lambda (g2093 g2094) (g2088 (map (lambda (g2095) (list (quote #(syntax-object quote ((top) #(ribcage #(quote? x) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x k) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_) #((top)) #("i")) #(ribcage #(pat-x) #((top)) #("i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage ((import-token . *top*)) () ())))) g2095)) g2094))) g2090) ((lambda (g2096) (if (if g2096 (apply (lambda (g2097 g2098) (g2021 g2097)) g2096) (quote #f)) (apply (lambda (g2099 g2100) (g2088 g2100)) g2096) ((lambda (g2102) (if (if g2102 (apply (lambda (g2103 g2104 g2105) (g2022 g2103)) g2102) (quote #f)) (apply (lambda (g2106 g2107 g2108) (g2086 g2108 (lambda (g2109) (g2088 (cons g2107 g2109))))) g2102) ((lambda (g2110) (list (quote #(syntax-object list->vector ((top) #(ribcage #(else) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(x k) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_) #((top)) #("i")) #(ribcage #(pat-x) #((top)) #("i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage ((import-token . *top*)) () ())))) g2077)) g2089))) ($syntax-dispatch g2089 (quote (any any any)))))) ($syntax-dispatch g2089 (quote (any . each-any)))))) ($syntax-dispatch g2089 (quote (any each-any))))) g2087)))) g2086) g2075 (lambda (g2111) (cons (quote #(syntax-object vector ((top) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(ls) #((top)) #("i")) #(ribcage #(_) #((top)) #("i")) #(ribcage #(pat-x) #((top)) #("i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage ((import-token . *top*)) () ())))) g2111)))) g2078))) ($syntax-dispatch g2078 (quote (any each-any))))) g2077)) g2076)) g2075))) (g2028 (lambda (g2112 g2113) ((lambda (g2114) ((lambda (g2115) (if g2115 (apply (lambda (g2116) (if (= g2113 (quote 0)) g2116 (g2025 (quote (#(syntax-object quote ((top) #(ribcage #(p) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage ((import-token . *top*)) () ()))) #(syntax-object unquote ((top) #(ribcage #(p) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage ((import-token . *top*)) () ()))))) (g2028 (list g2116) (- g2113 (quote 1)))))) g2115) ((lambda (g2117) (if g2117 (apply (lambda (g2118 g2119) (if (= g2113 (quote 0)) (g2024 g2118 (g2028 g2119 g2113)) (g2025 (g2025 (quote (#(syntax-object quote ((top) #(ribcage #(p q) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage ((import-token . *top*)) () ()))) #(syntax-object unquote ((top) #(ribcage #(p q) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage ((import-token . *top*)) () ()))))) (g2028 g2118 (- g2113 (quote 1)))) (g2028 g2119 g2113)))) g2117) ((lambda (g2122) (if g2122 (apply (lambda (g2123 g2124) (if (= g2113 (quote 0)) (g2026 g2123 (g2028 g2124 g2113)) (g2025 (g2025 (quote (#(syntax-object quote ((top) #(ribcage #(p q) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage ((import-token . *top*)) () ()))) #(syntax-object unquote-splicing ((top) #(ribcage #(p q) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage ((import-token . *top*)) () ()))))) (g2028 g2123 (- g2113 (quote 1)))) (g2028 g2124 g2113)))) g2122) ((lambda (g2127) (if g2127 (apply (lambda (g2128) (g2025 (quote (#(syntax-object quote ((top) #(ribcage #(p) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage ((import-token . *top*)) () ()))) #(syntax-object quasiquote ((top) #(ribcage #(p) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage ((import-token . *top*)) () ()))))) (g2028 (list g2128) (+ g2113 (quote 1))))) g2127) ((lambda (g2129) (if g2129 (apply (lambda (g2130 g2131) (g2025 (g2028 g2130 g2113) (g2028 g2131 g2113))) g2129) ((lambda (g2132) (if g2132 (apply (lambda (g2133) (g2027 (g2028 g2133 g2113))) g2132) ((lambda (g2135) (list (quote #(syntax-object quote ((top) #(ribcage #(p) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage ((import-token . *top*)) () ())))) g2135)) g2114))) ($syntax-dispatch g2114 (quote #(vector each-any)))))) ($syntax-dispatch g2114 (quote (any . any)))))) ($syntax-dispatch g2114 (quote (#(free-id #(syntax-object quasiquote ((top) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage ((import-token . *top*)) () ())))) any)))))) ($syntax-dispatch g2114 (quote ((#(free-id #(syntax-object unquote-splicing ((top) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage ((import-token . *top*)) () ())))) . each-any) . any)))))) ($syntax-dispatch g2114 (quote ((#(free-id #(syntax-object unquote ((top) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage ((import-token . *top*)) () ())))) . each-any) . any)))))) ($syntax-dispatch g2114 (quote (#(free-id #(syntax-object unquote ((top) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage ((import-token . *top*)) () ())))) any))))) g2112)))) (lambda (g2136) ((lambda (g2137) ((lambda (g2138) (if g2138 (apply (lambda (g2139 g2140) (g2028 g2140 (quote 0))) g2138) (syntax-error g2137))) ($syntax-dispatch g2137 (quote (any any))))) g2136))))($sc-put-cte (quote include) (lambda (g2141) (letrec ((g2142 (lambda (g2143 g2144) ((lambda (g2145) ((letrec ((g2146 (lambda () ((lambda (g2147) (if (eof-object? g2147) (begin (close-input-port g2145) (quote ())) (cons (datum->syntax-object g2144 g2147) (g2146)))) (read g2145))))) g2146))) (open-input-file g2143))))) ((lambda (g2148) ((lambda (g2149) (if g2149 (apply (lambda (g2150 g2151) ((lambda (g2152) ((lambda (g2153) ((lambda (g2154) (if g2154 (apply (lambda (g2155) (cons (quote #(syntax-object begin ((top) #(ribcage #(exp) #((top)) #("i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(fn) #((top)) #("i")) #(ribcage #(k filename) #((top) (top)) #("i" "i")) #(ribcage (read-file) ((top)) ("i")) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) g2155)) g2154) (syntax-error g2153))) ($syntax-dispatch g2153 (quote each-any)))) (g2142 g2152 g2150))) (syntax-object->datum g2151))) g2149) (syntax-error g2148))) ($syntax-dispatch g2148 (quote (any any))))) g2141))))($sc-put-cte (quote unquote) (lambda (g2157) ((lambda (g2158) ((lambda (g2159) (if g2159 (apply (lambda (g2160 g2161) (syntax-error g2157 (quote "expression not valid outside of quasiquote"))) g2159) (syntax-error g2158))) ($syntax-dispatch g2158 (quote (any . each-any))))) g2157)))($sc-put-cte (quote unquote-splicing) (lambda (g2162) ((lambda (g2163) ((lambda (g2164) (if g2164 (apply (lambda (g2165 g2166) (syntax-error g2162 (quote "expression not valid outside of quasiquote"))) g2164) (syntax-error g2163))) ($syntax-dispatch g2163 (quote (any . each-any))))) g2162)))($sc-put-cte (quote case) (lambda (g2167) ((lambda (g2168) ((lambda (g2169) (if g2169 (apply (lambda (g2170 g2171 g2172 g2173) ((lambda (g2174) ((lambda (g2175) (list (quote #(syntax-object let ((top) #(ribcage #(body) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (list (list (quote #(syntax-object t ((top) #(ribcage #(body) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) g2171)) g2175)) g2174)) ((letrec ((g2176 (lambda (g2177 g2178) (if (null? g2178) ((lambda (g2179) ((lambda (g2180) (if g2180 (apply (lambda (g2181 g2182) (cons (quote #(syntax-object begin ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (cons g2181 g2182))) g2180) ((lambda (g2184) (if g2184 (apply (lambda (g2185 g2186 g2187) (list (quote #(syntax-object if ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (list (quote #(syntax-object memv ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (quote #(syntax-object t ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (list (quote #(syntax-object quote ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) g2185)) (cons (quote #(syntax-object begin ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (cons g2186 g2187)))) g2184) ((lambda (g2190) (syntax-error g2167)) g2179))) ($syntax-dispatch g2179 (quote (each-any any . each-any)))))) ($syntax-dispatch g2179 (quote (#(free-id #(syntax-object else ((top) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) any . each-any))))) g2177) ((lambda (g2191) ((lambda (g2192) ((lambda (g2193) ((lambda (g2194) (if g2194 (apply (lambda (g2195 g2196 g2197) (list (quote #(syntax-object if ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (list (quote #(syntax-object memv ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (quote #(syntax-object t ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (list (quote #(syntax-object quote ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) g2195)) (cons (quote #(syntax-object begin ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (cons g2196 g2197)) g2192)) g2194) ((lambda (g2200) (syntax-error g2167)) g2193))) ($syntax-dispatch g2193 (quote (each-any any . each-any))))) g2177)) g2191)) (g2176 (car g2178) (cdr g2178))))))) g2176) g2172 g2173))) g2169) (syntax-error g2168))) ($syntax-dispatch g2168 (quote (any any any . each-any))))) g2167)))($sc-put-cte (quote identifier-syntax) (lambda (g2202) ((lambda (g2203) ((lambda (g2204) (if g2204 (apply (lambda (g2205 g2206) (list (quote #(syntax-object lambda ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (quote (#(syntax-object x ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ()))))) (list (quote #(syntax-object syntax-case ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (quote #(syntax-object x ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (quote ()) (list (quote #(syntax-object id ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (quote (#(syntax-object identifier? ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ()))) (#(syntax-object syntax ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ()))) #(syntax-object id ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))))) (list (quote #(syntax-object syntax ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) g2206)) (list (cons g2205 (quote (#(syntax-object x ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ()))) #(syntax-object ... ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))))) (list (quote #(syntax-object syntax ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (cons g2206 (quote (#(syntax-object x ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ()))) #(syntax-object ... ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ()))))))))))) g2204) ((lambda (g2207) (if (if g2207 (apply (lambda (g2208 g2209 g2210 g2211 g2212 g2213) (if (identifier? g2209) (identifier? g2211) (quote #f))) g2207) (quote #f)) (apply (lambda (g2214 g2215 g2216 g2217 g2218 g2219) (list (quote #(syntax-object cons ((top) #(ribcage #(_ id exp1 var val exp2) #((top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (quote (#(syntax-object quote ((top) #(ribcage #(_ id exp1 var val exp2) #((top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ()))) #(syntax-object macro! ((top) #(ribcage #(_ id exp1 var val exp2) #((top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ()))))) (list (quote #(syntax-object lambda ((top) #(ribcage #(_ id exp1 var val exp2) #((top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (quote (#(syntax-object x ((top) #(ribcage #(_ id exp1 var val exp2) #((top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ()))))) (list (quote #(syntax-object syntax-case ((top) #(ribcage #(_ id exp1 var val exp2) #((top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (quote #(syntax-object x ((top) #(ribcage #(_ id exp1 var val exp2) #((top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (quote (#(syntax-object set! ((top) #(ribcage #(_ id exp1 var val exp2) #((top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ()))))) (list (list (quote #(syntax-object set! ((top) #(ribcage #(_ id exp1 var val exp2) #((top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) g2217 g2218) (list (quote #(syntax-object syntax ((top) #(ribcage #(_ id exp1 var val exp2) #((top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) g2219)) (list (cons g2215 (quote (#(syntax-object x ((top) #(ribcage #(_ id exp1 var val exp2) #((top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ()))) #(syntax-object ... ((top) #(ribcage #(_ id exp1 var val exp2) #((top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))))) (list (quote #(syntax-object syntax ((top) #(ribcage #(_ id exp1 var val exp2) #((top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (cons g2216 (quote (#(syntax-object x ((top) #(ribcage #(_ id exp1 var val exp2) #((top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ()))) #(syntax-object ... ((top) #(ribcage #(_ id exp1 var val exp2) #((top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))))))) (list g2215 (list (quote #(syntax-object identifier? ((top) #(ribcage #(_ id exp1 var val exp2) #((top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) (list (quote #(syntax-object syntax ((top) #(ribcage #(_ id exp1 var val exp2) #((top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) g2215)) (list (quote #(syntax-object syntax ((top) #(ribcage #(_ id exp1 var val exp2) #((top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) g2216)))))) g2207) (syntax-error g2203))) ($syntax-dispatch g2203 (quote (any (any any) ((#(free-id #(syntax-object set! ((top) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage ((import-token . *top*)) () ())))) any any) any))))))) ($syntax-dispatch g2203 (quote (any any))))) g2202)))