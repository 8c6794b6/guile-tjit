(eval-when (compile) (set-current-module (resolve-module (quote (guile)))))
(if #f #f)

(letrec*
  ((#{and-map*\ 38}#
     (lambda (#{f\ 202}# #{first\ 203}# . #{rest\ 204}#)
       (begin
         (let ((#{t\ 210}# (null? #{first\ 203}#)))
           (if #{t\ 210}#
             #{t\ 210}#
             (if (null? #{rest\ 204}#)
               (letrec*
                 ((#{andmap\ 214}#
                    (lambda (#{first\ 215}#)
                      (begin
                        (let ((#{x\ 218}# (car #{first\ 215}#))
                              (#{first\ 219}# (cdr #{first\ 215}#)))
                          (if (null? #{first\ 219}#)
                            (#{f\ 202}# #{x\ 218}#)
                            (if (#{f\ 202}# #{x\ 218}#)
                              (#{andmap\ 214}# #{first\ 219}#)
                              #f)))))))
                 (begin (#{andmap\ 214}# #{first\ 203}#)))
               (letrec*
                 ((#{andmap\ 225}#
                    (lambda (#{first\ 226}# #{rest\ 227}#)
                      (begin
                        (let ((#{x\ 232}# (car #{first\ 226}#))
                              (#{xr\ 233}# (map car #{rest\ 227}#))
                              (#{first\ 234}# (cdr #{first\ 226}#))
                              (#{rest\ 235}# (map cdr #{rest\ 227}#)))
                          (if (null? #{first\ 234}#)
                            (@apply #{f\ 202}# #{x\ 232}# #{xr\ 233}#)
                            (if (@apply #{f\ 202}# #{x\ 232}# #{xr\ 233}#)
                              (#{andmap\ 225}# #{first\ 234}# #{rest\ 235}#)
                              #f)))))))
                 (begin
                   (#{andmap\ 225}# #{first\ 203}# #{rest\ 204}#))))))))))
  (begin
    (let ((#{make-primitive-ref\ 244}# (if #f #f))
          (#{fx+\ 283}# (if #f #f))
          (#{fx-\ 285}# (if #f #f))
          (#{fx=\ 287}# (if #f #f))
          (#{fx<\ 289}# (if #f #f))
          (#{set-syntax-object-expression!\ 354}#
            (if #f #f))
          (#{set-syntax-object-wrap!\ 356}# (if #f #f))
          (#{set-syntax-object-module!\ 358}# (if #f #f))
          (#{ribcage?\ 400}# (if #f #f)))
      (letrec*
        ((#{make-void\ 240}#
           (lambda (#{src\ 750}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 0)
               #{src\ 750}#)))
         (#{make-const\ 242}#
           (lambda (#{src\ 752}# #{exp\ 753}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 1)
               #{src\ 752}#
               #{exp\ 753}#)))
         (#{make-lexical-ref\ 246}#
           (lambda (#{src\ 760}# #{name\ 761}# #{gensym\ 762}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 3)
               #{src\ 760}#
               #{name\ 761}#
               #{gensym\ 762}#)))
         (#{make-lexical-set\ 248}#
           (lambda (#{src\ 766}#
                    #{name\ 767}#
                    #{gensym\ 768}#
                    #{exp\ 769}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 4)
               #{src\ 766}#
               #{name\ 767}#
               #{gensym\ 768}#
               #{exp\ 769}#)))
         (#{make-module-ref\ 250}#
           (lambda (#{src\ 774}#
                    #{mod\ 775}#
                    #{name\ 776}#
                    #{public?\ 777}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 5)
               #{src\ 774}#
               #{mod\ 775}#
               #{name\ 776}#
               #{public?\ 777}#)))
         (#{make-module-set\ 252}#
           (lambda (#{src\ 782}#
                    #{mod\ 783}#
                    #{name\ 784}#
                    #{public?\ 785}#
                    #{exp\ 786}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 6)
               #{src\ 782}#
               #{mod\ 783}#
               #{name\ 784}#
               #{public?\ 785}#
               #{exp\ 786}#)))
         (#{make-toplevel-ref\ 254}#
           (lambda (#{src\ 792}# #{name\ 793}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 7)
               #{src\ 792}#
               #{name\ 793}#)))
         (#{make-toplevel-set\ 256}#
           (lambda (#{src\ 796}# #{name\ 797}# #{exp\ 798}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 8)
               #{src\ 796}#
               #{name\ 797}#
               #{exp\ 798}#)))
         (#{make-toplevel-define\ 258}#
           (lambda (#{src\ 802}# #{name\ 803}# #{exp\ 804}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 9)
               #{src\ 802}#
               #{name\ 803}#
               #{exp\ 804}#)))
         (#{make-conditional\ 260}#
           (lambda (#{src\ 808}#
                    #{test\ 809}#
                    #{consequent\ 810}#
                    #{alternate\ 811}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 10)
               #{src\ 808}#
               #{test\ 809}#
               #{consequent\ 810}#
               #{alternate\ 811}#)))
         (#{make-application\ 262}#
           (lambda (#{src\ 816}# #{proc\ 817}# #{args\ 818}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 11)
               #{src\ 816}#
               #{proc\ 817}#
               #{args\ 818}#)))
         (#{make-sequence\ 264}#
           (lambda (#{src\ 822}# #{exps\ 823}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 12)
               #{src\ 822}#
               #{exps\ 823}#)))
         (#{make-lambda\ 266}#
           (lambda (#{src\ 826}# #{meta\ 827}# #{body\ 828}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 13)
               #{src\ 826}#
               #{meta\ 827}#
               #{body\ 828}#)))
         (#{make-lambda-case\ 268}#
           (lambda (#{src\ 832}#
                    #{req\ 833}#
                    #{opt\ 834}#
                    #{rest\ 835}#
                    #{kw\ 836}#
                    #{inits\ 837}#
                    #{gensyms\ 838}#
                    #{body\ 839}#
                    #{alternate\ 840}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 14)
               #{src\ 832}#
               #{req\ 833}#
               #{opt\ 834}#
               #{rest\ 835}#
               #{kw\ 836}#
               #{inits\ 837}#
               #{gensyms\ 838}#
               #{body\ 839}#
               #{alternate\ 840}#)))
         (#{make-let\ 270}#
           (lambda (#{src\ 850}#
                    #{names\ 851}#
                    #{gensyms\ 852}#
                    #{vals\ 853}#
                    #{body\ 854}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 15)
               #{src\ 850}#
               #{names\ 851}#
               #{gensyms\ 852}#
               #{vals\ 853}#
               #{body\ 854}#)))
         (#{make-letrec\ 272}#
           (lambda (#{src\ 860}#
                    #{in-order?\ 861}#
                    #{names\ 862}#
                    #{gensyms\ 863}#
                    #{vals\ 864}#
                    #{body\ 865}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 16)
               #{src\ 860}#
               #{in-order?\ 861}#
               #{names\ 862}#
               #{gensyms\ 863}#
               #{vals\ 864}#
               #{body\ 865}#)))
         (#{make-dynlet\ 274}#
           (lambda (#{src\ 872}#
                    #{fluids\ 873}#
                    #{vals\ 874}#
                    #{body\ 875}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 17)
               #{src\ 872}#
               #{fluids\ 873}#
               #{vals\ 874}#
               #{body\ 875}#)))
         (#{lambda?\ 277}#
           (lambda (#{x\ 880}#)
             (if (struct? #{x\ 880}#)
               (eq? (struct-vtable #{x\ 880}#)
                    (vector-ref %expanded-vtables 13))
               #f)))
         (#{lambda-meta\ 279}#
           (lambda (#{x\ 884}#) (struct-ref #{x\ 884}# 1)))
         (#{set-lambda-meta!\ 281}#
           (lambda (#{x\ 886}# #{v\ 887}#)
             (struct-set! #{x\ 886}# 1 #{v\ 887}#)))
         (#{top-level-eval-hook\ 291}#
           (lambda (#{x\ 890}# #{mod\ 891}#)
             (primitive-eval #{x\ 890}#)))
         (#{local-eval-hook\ 293}#
           (lambda (#{x\ 894}# #{mod\ 895}#)
             (primitive-eval #{x\ 894}#)))
         (#{put-global-definition-hook\ 296}#
           (lambda (#{symbol\ 898}# #{type\ 899}# #{val\ 900}#)
             (module-define!
               (current-module)
               #{symbol\ 898}#
               (make-syntax-transformer
                 #{symbol\ 898}#
                 #{type\ 899}#
                 #{val\ 900}#))))
         (#{get-global-definition-hook\ 298}#
           (lambda (#{symbol\ 904}# #{module\ 905}#)
             (begin
               (if (if (not #{module\ 905}#) (current-module) #f)
                 (warn "module system is booted, we should have a module"
                       #{symbol\ 904}#))
               (begin
                 (let ((#{v\ 911}# (module-variable
                                     (if #{module\ 905}#
                                       (resolve-module (cdr #{module\ 905}#))
                                       (current-module))
                                     #{symbol\ 904}#)))
                   (if #{v\ 911}#
                     (if (variable-bound? #{v\ 911}#)
                       (begin
                         (let ((#{val\ 916}# (variable-ref #{v\ 911}#)))
                           (if (macro? #{val\ 916}#)
                             (if (macro-type #{val\ 916}#)
                               (cons (macro-type #{val\ 916}#)
                                     (macro-binding #{val\ 916}#))
                               #f)
                             #f)))
                       #f)
                     #f))))))
         (#{decorate-source\ 300}#
           (lambda (#{e\ 920}# #{s\ 921}#)
             (begin
               (if (if (pair? #{e\ 920}#) #{s\ 921}# #f)
                 (set-source-properties! #{e\ 920}# #{s\ 921}#))
               #{e\ 920}#)))
         (#{maybe-name-value!\ 302}#
           (lambda (#{name\ 926}# #{val\ 927}#)
             (if (#{lambda?\ 277}# #{val\ 927}#)
               (begin
                 (let ((#{meta\ 931}#
                         (#{lambda-meta\ 279}# #{val\ 927}#)))
                   (if (not (assq 'name #{meta\ 931}#))
                     (#{set-lambda-meta!\ 281}#
                       #{val\ 927}#
                       (cons (cons 'name #{name\ 926}#) #{meta\ 931}#))))))))
         (#{build-void\ 304}#
           (lambda (#{source\ 932}#)
             (#{make-void\ 240}# #{source\ 932}#)))
         (#{build-application\ 306}#
           (lambda (#{source\ 934}#
                    #{fun-exp\ 935}#
                    #{arg-exps\ 936}#)
             (#{make-application\ 262}#
               #{source\ 934}#
               #{fun-exp\ 935}#
               #{arg-exps\ 936}#)))
         (#{build-conditional\ 308}#
           (lambda (#{source\ 940}#
                    #{test-exp\ 941}#
                    #{then-exp\ 942}#
                    #{else-exp\ 943}#)
             (#{make-conditional\ 260}#
               #{source\ 940}#
               #{test-exp\ 941}#
               #{then-exp\ 942}#
               #{else-exp\ 943}#)))
         (#{build-dynlet\ 310}#
           (lambda (#{source\ 948}#
                    #{fluids\ 949}#
                    #{vals\ 950}#
                    #{body\ 951}#)
             (#{make-dynlet\ 274}#
               #{source\ 948}#
               #{fluids\ 949}#
               #{vals\ 950}#
               #{body\ 951}#)))
         (#{build-lexical-reference\ 312}#
           (lambda (#{type\ 956}#
                    #{source\ 957}#
                    #{name\ 958}#
                    #{var\ 959}#)
             (#{make-lexical-ref\ 246}#
               #{source\ 957}#
               #{name\ 958}#
               #{var\ 959}#)))
         (#{build-lexical-assignment\ 314}#
           (lambda (#{source\ 964}#
                    #{name\ 965}#
                    #{var\ 966}#
                    #{exp\ 967}#)
             (begin
               (#{maybe-name-value!\ 302}#
                 #{name\ 965}#
                 #{exp\ 967}#)
               (#{make-lexical-set\ 248}#
                 #{source\ 964}#
                 #{name\ 965}#
                 #{var\ 966}#
                 #{exp\ 967}#))))
         (#{analyze-variable\ 316}#
           (lambda (#{mod\ 972}#
                    #{var\ 973}#
                    #{modref-cont\ 974}#
                    #{bare-cont\ 975}#)
             (if (not #{mod\ 972}#)
               (#{bare-cont\ 975}# #{var\ 973}#)
               (begin
                 (let ((#{kind\ 982}# (car #{mod\ 972}#))
                       (#{mod\ 983}# (cdr #{mod\ 972}#)))
                   (if (eqv? #{kind\ 982}# 'public)
                     (#{modref-cont\ 974}#
                       #{mod\ 983}#
                       #{var\ 973}#
                       #t)
                     (if (eqv? #{kind\ 982}# 'private)
                       (if (not (equal?
                                  #{mod\ 983}#
                                  (module-name (current-module))))
                         (#{modref-cont\ 974}#
                           #{mod\ 983}#
                           #{var\ 973}#
                           #f)
                         (#{bare-cont\ 975}# #{var\ 973}#))
                       (if (eqv? #{kind\ 982}# 'bare)
                         (#{bare-cont\ 975}# #{var\ 973}#)
                         (if (eqv? #{kind\ 982}# 'hygiene)
                           (if (if (not (equal?
                                          #{mod\ 983}#
                                          (module-name (current-module))))
                                 (module-variable
                                   (resolve-module #{mod\ 983}#)
                                   #{var\ 973}#)
                                 #f)
                             (#{modref-cont\ 974}#
                               #{mod\ 983}#
                               #{var\ 973}#
                               #f)
                             (#{bare-cont\ 975}# #{var\ 973}#))
                           (syntax-violation
                             #f
                             "bad module kind"
                             #{var\ 973}#
                             #{mod\ 983}#))))))))))
         (#{build-global-reference\ 318}#
           (lambda (#{source\ 991}# #{var\ 992}# #{mod\ 993}#)
             (#{analyze-variable\ 316}#
               #{mod\ 993}#
               #{var\ 992}#
               (lambda (#{mod\ 997}# #{var\ 998}# #{public?\ 999}#)
                 (#{make-module-ref\ 250}#
                   #{source\ 991}#
                   #{mod\ 997}#
                   #{var\ 998}#
                   #{public?\ 999}#))
               (lambda (#{var\ 1003}#)
                 (#{make-toplevel-ref\ 254}#
                   #{source\ 991}#
                   #{var\ 1003}#)))))
         (#{build-global-assignment\ 320}#
           (lambda (#{source\ 1005}#
                    #{var\ 1006}#
                    #{exp\ 1007}#
                    #{mod\ 1008}#)
             (begin
               (#{maybe-name-value!\ 302}#
                 #{var\ 1006}#
                 #{exp\ 1007}#)
               (#{analyze-variable\ 316}#
                 #{mod\ 1008}#
                 #{var\ 1006}#
                 (lambda (#{mod\ 1013}# #{var\ 1014}# #{public?\ 1015}#)
                   (#{make-module-set\ 252}#
                     #{source\ 1005}#
                     #{mod\ 1013}#
                     #{var\ 1014}#
                     #{public?\ 1015}#
                     #{exp\ 1007}#))
                 (lambda (#{var\ 1019}#)
                   (#{make-toplevel-set\ 256}#
                     #{source\ 1005}#
                     #{var\ 1019}#
                     #{exp\ 1007}#))))))
         (#{build-global-definition\ 322}#
           (lambda (#{source\ 1021}# #{var\ 1022}# #{exp\ 1023}#)
             (begin
               (#{maybe-name-value!\ 302}#
                 #{var\ 1022}#
                 #{exp\ 1023}#)
               (#{make-toplevel-define\ 258}#
                 #{source\ 1021}#
                 #{var\ 1022}#
                 #{exp\ 1023}#))))
         (#{build-simple-lambda\ 324}#
           (lambda (#{src\ 1027}#
                    #{req\ 1028}#
                    #{rest\ 1029}#
                    #{vars\ 1030}#
                    #{meta\ 1031}#
                    #{exp\ 1032}#)
             (#{make-lambda\ 266}#
               #{src\ 1027}#
               #{meta\ 1031}#
               (#{make-lambda-case\ 268}#
                 #{src\ 1027}#
                 #{req\ 1028}#
                 #f
                 #{rest\ 1029}#
                 #f
                 '()
                 #{vars\ 1030}#
                 #{exp\ 1032}#
                 #f))))
         (#{build-case-lambda\ 326}#
           (lambda (#{src\ 1039}# #{meta\ 1040}# #{body\ 1041}#)
             (#{make-lambda\ 266}#
               #{src\ 1039}#
               #{meta\ 1040}#
               #{body\ 1041}#)))
         (#{build-lambda-case\ 328}#
           (lambda (#{src\ 1045}#
                    #{req\ 1046}#
                    #{opt\ 1047}#
                    #{rest\ 1048}#
                    #{kw\ 1049}#
                    #{inits\ 1050}#
                    #{vars\ 1051}#
                    #{body\ 1052}#
                    #{else-case\ 1053}#)
             (#{make-lambda-case\ 268}#
               #{src\ 1045}#
               #{req\ 1046}#
               #{opt\ 1047}#
               #{rest\ 1048}#
               #{kw\ 1049}#
               #{inits\ 1050}#
               #{vars\ 1051}#
               #{body\ 1052}#
               #{else-case\ 1053}#)))
         (#{build-primref\ 330}#
           (lambda (#{src\ 1063}# #{name\ 1064}#)
             (if (equal? (module-name (current-module)) '(guile))
               (#{make-toplevel-ref\ 254}#
                 #{src\ 1063}#
                 #{name\ 1064}#)
               (#{make-module-ref\ 250}#
                 #{src\ 1063}#
                 '(guile)
                 #{name\ 1064}#
                 #f))))
         (#{build-data\ 332}#
           (lambda (#{src\ 1067}# #{exp\ 1068}#)
             (#{make-const\ 242}# #{src\ 1067}# #{exp\ 1068}#)))
         (#{build-sequence\ 334}#
           (lambda (#{src\ 1071}# #{exps\ 1072}#)
             (if (null? (cdr #{exps\ 1072}#))
               (car #{exps\ 1072}#)
               (#{make-sequence\ 264}#
                 #{src\ 1071}#
                 #{exps\ 1072}#))))
         (#{build-let\ 336}#
           (lambda (#{src\ 1075}#
                    #{ids\ 1076}#
                    #{vars\ 1077}#
                    #{val-exps\ 1078}#
                    #{body-exp\ 1079}#)
             (begin
               (for-each
                 #{maybe-name-value!\ 302}#
                 #{ids\ 1076}#
                 #{val-exps\ 1078}#)
               (if (null? #{vars\ 1077}#)
                 #{body-exp\ 1079}#
                 (#{make-let\ 270}#
                   #{src\ 1075}#
                   #{ids\ 1076}#
                   #{vars\ 1077}#
                   #{val-exps\ 1078}#
                   #{body-exp\ 1079}#)))))
         (#{build-named-let\ 338}#
           (lambda (#{src\ 1085}#
                    #{ids\ 1086}#
                    #{vars\ 1087}#
                    #{val-exps\ 1088}#
                    #{body-exp\ 1089}#)
             (begin
               (let ((#{f\ 1099}# (car #{vars\ 1087}#))
                     (#{f-name\ 1100}# (car #{ids\ 1086}#))
                     (#{vars\ 1101}# (cdr #{vars\ 1087}#))
                     (#{ids\ 1102}# (cdr #{ids\ 1086}#)))
                 (begin
                   (let ((#{proc\ 1104}#
                           (#{build-simple-lambda\ 324}#
                             #{src\ 1085}#
                             #{ids\ 1102}#
                             #f
                             #{vars\ 1101}#
                             '()
                             #{body-exp\ 1089}#)))
                     (begin
                       (#{maybe-name-value!\ 302}#
                         #{f-name\ 1100}#
                         #{proc\ 1104}#)
                       (for-each
                         #{maybe-name-value!\ 302}#
                         #{ids\ 1102}#
                         #{val-exps\ 1088}#)
                       (#{make-letrec\ 272}#
                         #{src\ 1085}#
                         #f
                         (list #{f-name\ 1100}#)
                         (list #{f\ 1099}#)
                         (list #{proc\ 1104}#)
                         (#{build-application\ 306}#
                           #{src\ 1085}#
                           (#{build-lexical-reference\ 312}#
                             'fun
                             #{src\ 1085}#
                             #{f-name\ 1100}#
                             #{f\ 1099}#)
                           #{val-exps\ 1088}#)))))))))
         (#{build-letrec\ 340}#
           (lambda (#{src\ 1105}#
                    #{in-order?\ 1106}#
                    #{ids\ 1107}#
                    #{vars\ 1108}#
                    #{val-exps\ 1109}#
                    #{body-exp\ 1110}#)
             (if (null? #{vars\ 1108}#)
               #{body-exp\ 1110}#
               (begin
                 (for-each
                   #{maybe-name-value!\ 302}#
                   #{ids\ 1107}#
                   #{val-exps\ 1109}#)
                 (#{make-letrec\ 272}#
                   #{src\ 1105}#
                   #{in-order?\ 1106}#
                   #{ids\ 1107}#
                   #{vars\ 1108}#
                   #{val-exps\ 1109}#
                   #{body-exp\ 1110}#)))))
         (#{make-syntax-object\ 344}#
           (lambda (#{expression\ 1117}#
                    #{wrap\ 1118}#
                    #{module\ 1119}#)
             (vector
               'syntax-object
               #{expression\ 1117}#
               #{wrap\ 1118}#
               #{module\ 1119}#)))
         (#{syntax-object?\ 346}#
           (lambda (#{x\ 1123}#)
             (if (vector? #{x\ 1123}#)
               (if (= (vector-length #{x\ 1123}#) 4)
                 (eq? (vector-ref #{x\ 1123}# 0) 'syntax-object)
                 #f)
               #f)))
         (#{syntax-object-expression\ 348}#
           (lambda (#{x\ 1128}#) (vector-ref #{x\ 1128}# 1)))
         (#{syntax-object-wrap\ 350}#
           (lambda (#{x\ 1130}#) (vector-ref #{x\ 1130}# 2)))
         (#{syntax-object-module\ 352}#
           (lambda (#{x\ 1132}#) (vector-ref #{x\ 1132}# 3)))
         (#{source-annotation\ 361}#
           (lambda (#{x\ 1146}#)
             (if (#{syntax-object?\ 346}# #{x\ 1146}#)
               (#{source-annotation\ 361}#
                 (#{syntax-object-expression\ 348}# #{x\ 1146}#))
               (if (pair? #{x\ 1146}#)
                 (begin
                   (let ((#{props\ 1153}# (source-properties #{x\ 1146}#)))
                     (if (pair? #{props\ 1153}#) #{props\ 1153}# #f)))
                 #f))))
         (#{extend-env\ 368}#
           (lambda (#{labels\ 1155}# #{bindings\ 1156}# #{r\ 1157}#)
             (if (null? #{labels\ 1155}#)
               #{r\ 1157}#
               (#{extend-env\ 368}#
                 (cdr #{labels\ 1155}#)
                 (cdr #{bindings\ 1156}#)
                 (cons (cons (car #{labels\ 1155}#)
                             (car #{bindings\ 1156}#))
                       #{r\ 1157}#)))))
         (#{extend-var-env\ 370}#
           (lambda (#{labels\ 1161}# #{vars\ 1162}# #{r\ 1163}#)
             (if (null? #{labels\ 1161}#)
               #{r\ 1163}#
               (#{extend-var-env\ 370}#
                 (cdr #{labels\ 1161}#)
                 (cdr #{vars\ 1162}#)
                 (cons (cons (car #{labels\ 1161}#)
                             (cons 'lexical (car #{vars\ 1162}#)))
                       #{r\ 1163}#)))))
         (#{macros-only-env\ 372}#
           (lambda (#{r\ 1168}#)
             (if (null? #{r\ 1168}#)
               '()
               (begin
                 (let ((#{a\ 1171}# (car #{r\ 1168}#)))
                   (if (eq? (car (cdr #{a\ 1171}#)) 'macro)
                     (cons #{a\ 1171}#
                           (#{macros-only-env\ 372}# (cdr #{r\ 1168}#)))
                     (#{macros-only-env\ 372}# (cdr #{r\ 1168}#))))))))
         (#{lookup\ 374}#
           (lambda (#{x\ 1172}# #{r\ 1173}# #{mod\ 1174}#)
             (begin
               (let ((#{t\ 1180}# (assq #{x\ 1172}# #{r\ 1173}#)))
                 (if #{t\ 1180}#
                   (cdr #{t\ 1180}#)
                   (if (symbol? #{x\ 1172}#)
                     (begin
                       (let ((#{t\ 1186}#
                               (#{get-global-definition-hook\ 298}#
                                 #{x\ 1172}#
                                 #{mod\ 1174}#)))
                         (if #{t\ 1186}# #{t\ 1186}# '(global))))
                     '(displaced-lexical)))))))
         (#{global-extend\ 376}#
           (lambda (#{type\ 1191}# #{sym\ 1192}# #{val\ 1193}#)
             (#{put-global-definition-hook\ 296}#
               #{sym\ 1192}#
               #{type\ 1191}#
               #{val\ 1193}#)))
         (#{nonsymbol-id?\ 378}#
           (lambda (#{x\ 1197}#)
             (if (#{syntax-object?\ 346}# #{x\ 1197}#)
               (symbol?
                 (#{syntax-object-expression\ 348}# #{x\ 1197}#))
               #f)))
         (#{id?\ 380}#
           (lambda (#{x\ 1201}#)
             (if (symbol? #{x\ 1201}#)
               #t
               (if (#{syntax-object?\ 346}# #{x\ 1201}#)
                 (symbol?
                   (#{syntax-object-expression\ 348}# #{x\ 1201}#))
                 #f))))
         (#{id-sym-name&marks\ 383}#
           (lambda (#{x\ 1208}# #{w\ 1209}#)
             (if (#{syntax-object?\ 346}# #{x\ 1208}#)
               (values
                 (#{syntax-object-expression\ 348}# #{x\ 1208}#)
                 (#{join-marks\ 430}#
                   (car #{w\ 1209}#)
                   (car (#{syntax-object-wrap\ 350}# #{x\ 1208}#))))
               (values #{x\ 1208}# (car #{w\ 1209}#)))))
         (#{gen-label\ 393}#
           (lambda () (symbol->string (gensym "i"))))
         (#{gen-labels\ 395}#
           (lambda (#{ls\ 1215}#)
             (if (null? #{ls\ 1215}#)
               '()
               (cons (#{gen-label\ 393}#)
                     (#{gen-labels\ 395}# (cdr #{ls\ 1215}#))))))
         (#{make-ribcage\ 398}#
           (lambda (#{symnames\ 1217}#
                    #{marks\ 1218}#
                    #{labels\ 1219}#)
             (vector
               'ribcage
               #{symnames\ 1217}#
               #{marks\ 1218}#
               #{labels\ 1219}#)))
         (#{ribcage-symnames\ 402}#
           (lambda (#{x\ 1228}#) (vector-ref #{x\ 1228}# 1)))
         (#{ribcage-marks\ 404}#
           (lambda (#{x\ 1230}#) (vector-ref #{x\ 1230}# 2)))
         (#{ribcage-labels\ 406}#
           (lambda (#{x\ 1232}#) (vector-ref #{x\ 1232}# 3)))
         (#{set-ribcage-symnames!\ 408}#
           (lambda (#{x\ 1234}# #{update\ 1235}#)
             (vector-set! #{x\ 1234}# 1 #{update\ 1235}#)))
         (#{set-ribcage-marks!\ 410}#
           (lambda (#{x\ 1238}# #{update\ 1239}#)
             (vector-set! #{x\ 1238}# 2 #{update\ 1239}#)))
         (#{set-ribcage-labels!\ 412}#
           (lambda (#{x\ 1242}# #{update\ 1243}#)
             (vector-set! #{x\ 1242}# 3 #{update\ 1243}#)))
         (#{anti-mark\ 418}#
           (lambda (#{w\ 1246}#)
             (cons (cons #f (car #{w\ 1246}#))
                   (cons 'shift (cdr #{w\ 1246}#)))))
         (#{extend-ribcage!\ 422}#
           (lambda (#{ribcage\ 1252}# #{id\ 1253}# #{label\ 1254}#)
             (begin
               (#{set-ribcage-symnames!\ 408}#
                 #{ribcage\ 1252}#
                 (cons (#{syntax-object-expression\ 348}# #{id\ 1253}#)
                       (#{ribcage-symnames\ 402}# #{ribcage\ 1252}#)))
               (#{set-ribcage-marks!\ 410}#
                 #{ribcage\ 1252}#
                 (cons (car (#{syntax-object-wrap\ 350}# #{id\ 1253}#))
                       (#{ribcage-marks\ 404}# #{ribcage\ 1252}#)))
               (#{set-ribcage-labels!\ 412}#
                 #{ribcage\ 1252}#
                 (cons #{label\ 1254}#
                       (#{ribcage-labels\ 406}# #{ribcage\ 1252}#))))))
         (#{make-binding-wrap\ 424}#
           (lambda (#{ids\ 1259}# #{labels\ 1260}# #{w\ 1261}#)
             (if (null? #{ids\ 1259}#)
               #{w\ 1261}#
               (cons (car #{w\ 1261}#)
                     (cons (begin
                             (let ((#{labelvec\ 1268}#
                                     (list->vector #{labels\ 1260}#)))
                               (begin
                                 (let ((#{n\ 1270}#
                                         (vector-length #{labelvec\ 1268}#)))
                                   (begin
                                     (let ((#{symnamevec\ 1273}#
                                             (make-vector #{n\ 1270}#))
                                           (#{marksvec\ 1274}#
                                             (make-vector #{n\ 1270}#)))
                                       (begin
                                         (letrec*
                                           ((#{f\ 1278}#
                                              (lambda (#{ids\ 1279}#
                                                       #{i\ 1280}#)
                                                (if (not (null? #{ids\ 1279}#))
                                                  (call-with-values
                                                    (lambda ()
                                                      (#{id-sym-name&marks\ 383}#
                                                        (car #{ids\ 1279}#)
                                                        #{w\ 1261}#))
                                                    (lambda (#{symname\ 1281}#
                                                             #{marks\ 1282}#)
                                                      (begin
                                                        (vector-set!
                                                          #{symnamevec\ 1273}#
                                                          #{i\ 1280}#
                                                          #{symname\ 1281}#)
                                                        (vector-set!
                                                          #{marksvec\ 1274}#
                                                          #{i\ 1280}#
                                                          #{marks\ 1282}#)
                                                        (#{f\ 1278}#
                                                          (cdr #{ids\ 1279}#)
                                                          (#{fx+\ 283}#
                                                            #{i\ 1280}#
                                                            1)))))))))
                                           (begin
                                             (#{f\ 1278}# #{ids\ 1259}# 0)))
                                         (#{make-ribcage\ 398}#
                                           #{symnamevec\ 1273}#
                                           #{marksvec\ 1274}#
                                           #{labelvec\ 1268}#))))))))
                           (cdr #{w\ 1261}#))))))
         (#{smart-append\ 426}#
           (lambda (#{m1\ 1286}# #{m2\ 1287}#)
             (if (null? #{m2\ 1287}#)
               #{m1\ 1286}#
               (append #{m1\ 1286}# #{m2\ 1287}#))))
         (#{join-wraps\ 428}#
           (lambda (#{w1\ 1290}# #{w2\ 1291}#)
             (begin
               (let ((#{m1\ 1296}# (car #{w1\ 1290}#))
                     (#{s1\ 1297}# (cdr #{w1\ 1290}#)))
                 (if (null? #{m1\ 1296}#)
                   (if (null? #{s1\ 1297}#)
                     #{w2\ 1291}#
                     (cons (car #{w2\ 1291}#)
                           (#{smart-append\ 426}#
                             #{s1\ 1297}#
                             (cdr #{w2\ 1291}#))))
                   (cons (#{smart-append\ 426}#
                           #{m1\ 1296}#
                           (car #{w2\ 1291}#))
                         (#{smart-append\ 426}#
                           #{s1\ 1297}#
                           (cdr #{w2\ 1291}#))))))))
         (#{join-marks\ 430}#
           (lambda (#{m1\ 1306}# #{m2\ 1307}#)
             (#{smart-append\ 426}# #{m1\ 1306}# #{m2\ 1307}#)))
         (#{same-marks?\ 432}#
           (lambda (#{x\ 1310}# #{y\ 1311}#)
             (begin
               (let ((#{t\ 1316}# (eq? #{x\ 1310}# #{y\ 1311}#)))
                 (if #{t\ 1316}#
                   #{t\ 1316}#
                   (if (not (null? #{x\ 1310}#))
                     (if (not (null? #{y\ 1311}#))
                       (if (eq? (car #{x\ 1310}#) (car #{y\ 1311}#))
                         (#{same-marks?\ 432}#
                           (cdr #{x\ 1310}#)
                           (cdr #{y\ 1311}#))
                         #f)
                       #f)
                     #f))))))
         (#{id-var-name\ 434}#
           (lambda (#{id\ 1322}# #{w\ 1323}#)
             (letrec*
               ((#{search\ 1328}#
                  (lambda (#{sym\ 1344}# #{subst\ 1345}# #{marks\ 1346}#)
                    (if (null? #{subst\ 1345}#)
                      (values #f #{marks\ 1346}#)
                      (begin
                        (let ((#{fst\ 1351}# (car #{subst\ 1345}#)))
                          (if (eq? #{fst\ 1351}# 'shift)
                            (#{search\ 1328}#
                              #{sym\ 1344}#
                              (cdr #{subst\ 1345}#)
                              (cdr #{marks\ 1346}#))
                            (begin
                              (let ((#{symnames\ 1353}#
                                      (#{ribcage-symnames\ 402}#
                                        #{fst\ 1351}#)))
                                (if (vector? #{symnames\ 1353}#)
                                  (#{search-vector-rib\ 1332}#
                                    #{sym\ 1344}#
                                    #{subst\ 1345}#
                                    #{marks\ 1346}#
                                    #{symnames\ 1353}#
                                    #{fst\ 1351}#)
                                  (#{search-list-rib\ 1330}#
                                    #{sym\ 1344}#
                                    #{subst\ 1345}#
                                    #{marks\ 1346}#
                                    #{symnames\ 1353}#
                                    #{fst\ 1351}#))))))))))
                (#{search-list-rib\ 1330}#
                  (lambda (#{sym\ 1354}#
                           #{subst\ 1355}#
                           #{marks\ 1356}#
                           #{symnames\ 1357}#
                           #{ribcage\ 1358}#)
                    (letrec*
                      ((#{f\ 1367}#
                         (lambda (#{symnames\ 1368}# #{i\ 1369}#)
                           (if (null? #{symnames\ 1368}#)
                             (#{search\ 1328}#
                               #{sym\ 1354}#
                               (cdr #{subst\ 1355}#)
                               #{marks\ 1356}#)
                             (if (if (eq? (car #{symnames\ 1368}#)
                                          #{sym\ 1354}#)
                                   (#{same-marks?\ 432}#
                                     #{marks\ 1356}#
                                     (list-ref
                                       (#{ribcage-marks\ 404}#
                                         #{ribcage\ 1358}#)
                                       #{i\ 1369}#))
                                   #f)
                               (values
                                 (list-ref
                                   (#{ribcage-labels\ 406}# #{ribcage\ 1358}#)
                                   #{i\ 1369}#)
                                 #{marks\ 1356}#)
                               (#{f\ 1367}#
                                 (cdr #{symnames\ 1368}#)
                                 (#{fx+\ 283}# #{i\ 1369}# 1)))))))
                      (begin (#{f\ 1367}# #{symnames\ 1357}# 0)))))
                (#{search-vector-rib\ 1332}#
                  (lambda (#{sym\ 1377}#
                           #{subst\ 1378}#
                           #{marks\ 1379}#
                           #{symnames\ 1380}#
                           #{ribcage\ 1381}#)
                    (begin
                      (let ((#{n\ 1388}# (vector-length #{symnames\ 1380}#)))
                        (letrec*
                          ((#{f\ 1391}#
                             (lambda (#{i\ 1392}#)
                               (if (#{fx=\ 287}# #{i\ 1392}# #{n\ 1388}#)
                                 (#{search\ 1328}#
                                   #{sym\ 1377}#
                                   (cdr #{subst\ 1378}#)
                                   #{marks\ 1379}#)
                                 (if (if (eq? (vector-ref
                                                #{symnames\ 1380}#
                                                #{i\ 1392}#)
                                              #{sym\ 1377}#)
                                       (#{same-marks?\ 432}#
                                         #{marks\ 1379}#
                                         (vector-ref
                                           (#{ribcage-marks\ 404}#
                                             #{ribcage\ 1381}#)
                                           #{i\ 1392}#))
                                       #f)
                                   (values
                                     (vector-ref
                                       (#{ribcage-labels\ 406}#
                                         #{ribcage\ 1381}#)
                                       #{i\ 1392}#)
                                     #{marks\ 1379}#)
                                   (#{f\ 1391}#
                                     (#{fx+\ 283}# #{i\ 1392}# 1)))))))
                          (begin (#{f\ 1391}# 0))))))))
               (begin
                 (if (symbol? #{id\ 1322}#)
                   (begin
                     (let ((#{t\ 1402}#
                             (call-with-values
                               (lambda ()
                                 (#{search\ 1328}#
                                   #{id\ 1322}#
                                   (cdr #{w\ 1323}#)
                                   (car #{w\ 1323}#)))
                               (lambda (#{x\ 1406}# . #{ignore\ 1407}#)
                                 #{x\ 1406}#))))
                       (if #{t\ 1402}# #{t\ 1402}# #{id\ 1322}#)))
                   (if (#{syntax-object?\ 346}# #{id\ 1322}#)
                     (begin
                       (let ((#{id\ 1415}#
                               (#{syntax-object-expression\ 348}#
                                 #{id\ 1322}#))
                             (#{w1\ 1416}#
                               (#{syntax-object-wrap\ 350}# #{id\ 1322}#)))
                         (begin
                           (let ((#{marks\ 1418}#
                                   (#{join-marks\ 430}#
                                     (car #{w\ 1323}#)
                                     (car #{w1\ 1416}#))))
                             (call-with-values
                               (lambda ()
                                 (#{search\ 1328}#
                                   #{id\ 1415}#
                                   (cdr #{w\ 1323}#)
                                   #{marks\ 1418}#))
                               (lambda (#{new-id\ 1422}# #{marks\ 1423}#)
                                 (begin
                                   (let ((#{t\ 1428}# #{new-id\ 1422}#))
                                     (if #{t\ 1428}#
                                       #{t\ 1428}#
                                       (begin
                                         (let ((#{t\ 1431}#
                                                 (call-with-values
                                                   (lambda ()
                                                     (#{search\ 1328}#
                                                       #{id\ 1415}#
                                                       (cdr #{w1\ 1416}#)
                                                       #{marks\ 1423}#))
                                                   (lambda (#{x\ 1434}#
                                                            .
                                                            #{ignore\ 1435}#)
                                                     #{x\ 1434}#))))
                                           (if #{t\ 1431}#
                                             #{t\ 1431}#
                                             #{id\ 1415}#))))))))))))
                     (syntax-violation
                       'id-var-name
                       "invalid id"
                       #{id\ 1322}#)))))))
         (#{free-id=?\ 436}#
           (lambda (#{i\ 1440}# #{j\ 1441}#)
             (if (eq? (begin
                        (let ((#{x\ 1447}# #{i\ 1440}#))
                          (if (#{syntax-object?\ 346}# #{x\ 1447}#)
                            (#{syntax-object-expression\ 348}# #{x\ 1447}#)
                            #{x\ 1447}#)))
                      (begin
                        (let ((#{x\ 1450}# #{j\ 1441}#))
                          (if (#{syntax-object?\ 346}# #{x\ 1450}#)
                            (#{syntax-object-expression\ 348}# #{x\ 1450}#)
                            #{x\ 1450}#))))
               (eq? (#{id-var-name\ 434}# #{i\ 1440}# '(()))
                    (#{id-var-name\ 434}# #{j\ 1441}# '(())))
               #f)))
         (#{bound-id=?\ 438}#
           (lambda (#{i\ 1454}# #{j\ 1455}#)
             (if (if (#{syntax-object?\ 346}# #{i\ 1454}#)
                   (#{syntax-object?\ 346}# #{j\ 1455}#)
                   #f)
               (if (eq? (#{syntax-object-expression\ 348}# #{i\ 1454}#)
                        (#{syntax-object-expression\ 348}# #{j\ 1455}#))
                 (#{same-marks?\ 432}#
                   (car (#{syntax-object-wrap\ 350}# #{i\ 1454}#))
                   (car (#{syntax-object-wrap\ 350}# #{j\ 1455}#)))
                 #f)
               (eq? #{i\ 1454}# #{j\ 1455}#))))
         (#{valid-bound-ids?\ 440}#
           (lambda (#{ids\ 1464}#)
             (if (letrec*
                   ((#{all-ids?\ 1469}#
                      (lambda (#{ids\ 1470}#)
                        (begin
                          (let ((#{t\ 1473}# (null? #{ids\ 1470}#)))
                            (if #{t\ 1473}#
                              #{t\ 1473}#
                              (if (#{id?\ 380}# (car #{ids\ 1470}#))
                                (#{all-ids?\ 1469}# (cdr #{ids\ 1470}#))
                                #f)))))))
                   (begin (#{all-ids?\ 1469}# #{ids\ 1464}#)))
               (#{distinct-bound-ids?\ 442}# #{ids\ 1464}#)
               #f)))
         (#{distinct-bound-ids?\ 442}#
           (lambda (#{ids\ 1478}#)
             (letrec*
               ((#{distinct?\ 1482}#
                  (lambda (#{ids\ 1483}#)
                    (begin
                      (let ((#{t\ 1486}# (null? #{ids\ 1483}#)))
                        (if #{t\ 1486}#
                          #{t\ 1486}#
                          (if (not (#{bound-id-member?\ 444}#
                                     (car #{ids\ 1483}#)
                                     (cdr #{ids\ 1483}#)))
                            (#{distinct?\ 1482}# (cdr #{ids\ 1483}#))
                            #f)))))))
               (begin (#{distinct?\ 1482}# #{ids\ 1478}#)))))
         (#{bound-id-member?\ 444}#
           (lambda (#{x\ 1490}# #{list\ 1491}#)
             (if (not (null? #{list\ 1491}#))
               (begin
                 (let ((#{t\ 1498}#
                         (#{bound-id=?\ 438}#
                           #{x\ 1490}#
                           (car #{list\ 1491}#))))
                   (if #{t\ 1498}#
                     #{t\ 1498}#
                     (#{bound-id-member?\ 444}#
                       #{x\ 1490}#
                       (cdr #{list\ 1491}#)))))
               #f)))
         (#{wrap\ 446}#
           (lambda (#{x\ 1500}# #{w\ 1501}# #{defmod\ 1502}#)
             (if (if (null? (car #{w\ 1501}#))
                   (null? (cdr #{w\ 1501}#))
                   #f)
               #{x\ 1500}#
               (if (#{syntax-object?\ 346}# #{x\ 1500}#)
                 (#{make-syntax-object\ 344}#
                   (#{syntax-object-expression\ 348}# #{x\ 1500}#)
                   (#{join-wraps\ 428}#
                     #{w\ 1501}#
                     (#{syntax-object-wrap\ 350}# #{x\ 1500}#))
                   (#{syntax-object-module\ 352}# #{x\ 1500}#))
                 (if (null? #{x\ 1500}#)
                   #{x\ 1500}#
                   (#{make-syntax-object\ 344}#
                     #{x\ 1500}#
                     #{w\ 1501}#
                     #{defmod\ 1502}#))))))
         (#{source-wrap\ 448}#
           (lambda (#{x\ 1517}#
                    #{w\ 1518}#
                    #{s\ 1519}#
                    #{defmod\ 1520}#)
             (#{wrap\ 446}#
               (#{decorate-source\ 300}#
                 #{x\ 1517}#
                 #{s\ 1519}#)
               #{w\ 1518}#
               #{defmod\ 1520}#)))
         (#{chi-sequence\ 450}#
           (lambda (#{body\ 1525}#
                    #{r\ 1526}#
                    #{w\ 1527}#
                    #{s\ 1528}#
                    #{mod\ 1529}#)
             (#{build-sequence\ 334}#
               #{s\ 1528}#
               (letrec*
                 ((#{dobody\ 1540}#
                    (lambda (#{body\ 1541}#
                             #{r\ 1542}#
                             #{w\ 1543}#
                             #{mod\ 1544}#)
                      (if (null? #{body\ 1541}#)
                        '()
                        (begin
                          (let ((#{first\ 1546}#
                                  (#{chi\ 460}#
                                    (car #{body\ 1541}#)
                                    #{r\ 1542}#
                                    #{w\ 1543}#
                                    #{mod\ 1544}#)))
                            (cons #{first\ 1546}#
                                  (#{dobody\ 1540}#
                                    (cdr #{body\ 1541}#)
                                    #{r\ 1542}#
                                    #{w\ 1543}#
                                    #{mod\ 1544}#))))))))
                 (begin
                   (#{dobody\ 1540}#
                     #{body\ 1525}#
                     #{r\ 1526}#
                     #{w\ 1527}#
                     #{mod\ 1529}#))))))
         (#{chi-top-sequence\ 452}#
           (lambda (#{body\ 1547}#
                    #{r\ 1548}#
                    #{w\ 1549}#
                    #{s\ 1550}#
                    #{m\ 1551}#
                    #{esew\ 1552}#
                    #{mod\ 1553}#)
             (letrec*
               ((#{scan\ 1562}#
                  (lambda (#{body\ 1563}#
                           #{r\ 1564}#
                           #{w\ 1565}#
                           #{s\ 1566}#
                           #{m\ 1567}#
                           #{esew\ 1568}#
                           #{mod\ 1569}#
                           #{exps\ 1570}#)
                    (if (null? #{body\ 1563}#)
                      #{exps\ 1570}#
                      (call-with-values
                        (lambda ()
                          (call-with-values
                            (lambda ()
                              (begin
                                (let ((#{e\ 1583}# (car #{body\ 1563}#)))
                                  (#{syntax-type\ 458}#
                                    #{e\ 1583}#
                                    #{r\ 1564}#
                                    #{w\ 1565}#
                                    (begin
                                      (let ((#{t\ 1586}#
                                              (#{source-annotation\ 361}#
                                                #{e\ 1583}#)))
                                        (if #{t\ 1586}#
                                          #{t\ 1586}#
                                          #{s\ 1566}#)))
                                    #f
                                    #{mod\ 1569}#
                                    #f))))
                            (lambda (#{type\ 1588}#
                                     #{value\ 1589}#
                                     #{e\ 1590}#
                                     #{w\ 1591}#
                                     #{s\ 1592}#
                                     #{mod\ 1593}#)
                              (if (eqv? #{type\ 1588}# 'begin-form)
                                (let ((#{tmp\ 1601}# #{e\ 1590}#))
                                  (let ((#{tmp\ 1602}#
                                          ($sc-dispatch #{tmp\ 1601}# '(_))))
                                    (if #{tmp\ 1602}#
                                      (@apply
                                        (lambda () #{exps\ 1570}#)
                                        #{tmp\ 1602}#)
                                      (let ((#{tmp\ 1603}#
                                              ($sc-dispatch
                                                #{tmp\ 1601}#
                                                '(_ any . each-any))))
                                        (if #{tmp\ 1603}#
                                          (@apply
                                            (lambda (#{e1\ 1606}# #{e2\ 1607}#)
                                              (#{scan\ 1562}#
                                                (cons #{e1\ 1606}#
                                                      #{e2\ 1607}#)
                                                #{r\ 1564}#
                                                #{w\ 1591}#
                                                #{s\ 1592}#
                                                #{m\ 1567}#
                                                #{esew\ 1568}#
                                                #{mod\ 1593}#
                                                #{exps\ 1570}#))
                                            #{tmp\ 1603}#)
                                          (syntax-violation
                                            #f
                                            "source expression failed to match any pattern"
                                            #{tmp\ 1601}#))))))
                                (if (eqv? #{type\ 1588}# 'local-syntax-form)
                                  (#{chi-local-syntax\ 470}#
                                    #{value\ 1589}#
                                    #{e\ 1590}#
                                    #{r\ 1564}#
                                    #{w\ 1591}#
                                    #{s\ 1592}#
                                    #{mod\ 1593}#
                                    (lambda (#{body\ 1610}#
                                             #{r\ 1611}#
                                             #{w\ 1612}#
                                             #{s\ 1613}#
                                             #{mod\ 1614}#)
                                      (#{scan\ 1562}#
                                        #{body\ 1610}#
                                        #{r\ 1611}#
                                        #{w\ 1612}#
                                        #{s\ 1613}#
                                        #{m\ 1567}#
                                        #{esew\ 1568}#
                                        #{mod\ 1614}#
                                        #{exps\ 1570}#)))
                                  (if (eqv? #{type\ 1588}# 'eval-when-form)
                                    (let ((#{tmp\ 1621}# #{e\ 1590}#))
                                      (let ((#{tmp\ 1622}#
                                              ($sc-dispatch
                                                #{tmp\ 1621}#
                                                '(_ each-any any . each-any))))
                                        (if #{tmp\ 1622}#
                                          (@apply
                                            (lambda (#{x\ 1626}#
                                                     #{e1\ 1627}#
                                                     #{e2\ 1628}#)
                                              (begin
                                                (let ((#{when-list\ 1631}#
                                                        (#{chi-when-list\ 456}#
                                                          #{e\ 1590}#
                                                          #{x\ 1626}#
                                                          #{w\ 1591}#))
                                                      (#{body\ 1632}#
                                                        (cons #{e1\ 1627}#
                                                              #{e2\ 1628}#)))
                                                  (if (eq? #{m\ 1567}# 'e)
                                                    (if (memq 'eval
                                                              #{when-list\ 1631}#)
                                                      (#{scan\ 1562}#
                                                        #{body\ 1632}#
                                                        #{r\ 1564}#
                                                        #{w\ 1591}#
                                                        #{s\ 1592}#
                                                        (if (memq 'expand
                                                                  #{when-list\ 1631}#)
                                                          'c&e
                                                          'e)
                                                        '(eval)
                                                        #{mod\ 1593}#
                                                        #{exps\ 1570}#)
                                                      (begin
                                                        (if (memq 'expand
                                                                  #{when-list\ 1631}#)
                                                          (#{top-level-eval-hook\ 291}#
                                                            (#{chi-top-sequence\ 452}#
                                                              #{body\ 1632}#
                                                              #{r\ 1564}#
                                                              #{w\ 1591}#
                                                              #{s\ 1592}#
                                                              'e
                                                              '(eval)
                                                              #{mod\ 1593}#)
                                                            #{mod\ 1593}#))
                                                        #{exps\ 1570}#))
                                                    (if (memq 'load
                                                              #{when-list\ 1631}#)
                                                      (if (begin
                                                            (let ((#{t\ 1641}#
                                                                    (memq 'compile
                                                                          #{when-list\ 1631}#)))
                                                              (if #{t\ 1641}#
                                                                #{t\ 1641}#
                                                                (begin
                                                                  (let ((#{t\ 1644}#
                                                                          (memq 'expand
                                                                                #{when-list\ 1631}#)))
                                                                    (if #{t\ 1644}#
                                                                      #{t\ 1644}#
                                                                      (if (eq? #{m\ 1567}#
                                                                               'c&e)
                                                                        (memq 'eval
                                                                              #{when-list\ 1631}#)
                                                                        #f)))))))
                                                        (#{scan\ 1562}#
                                                          #{body\ 1632}#
                                                          #{r\ 1564}#
                                                          #{w\ 1591}#
                                                          #{s\ 1592}#
                                                          'c&e
                                                          '(compile load)
                                                          #{mod\ 1593}#
                                                          #{exps\ 1570}#)
                                                        (if (if (eq? #{m\ 1567}#
                                                                     'c)
                                                              #t
                                                              (eq? #{m\ 1567}#
                                                                   'c&e))
                                                          (#{scan\ 1562}#
                                                            #{body\ 1632}#
                                                            #{r\ 1564}#
                                                            #{w\ 1591}#
                                                            #{s\ 1592}#
                                                            'c
                                                            '(load)
                                                            #{mod\ 1593}#
                                                            #{exps\ 1570}#)
                                                          #{exps\ 1570}#))
                                                      (if (begin
                                                            (let ((#{t\ 1652}#
                                                                    (memq 'compile
                                                                          #{when-list\ 1631}#)))
                                                              (if #{t\ 1652}#
                                                                #{t\ 1652}#
                                                                (begin
                                                                  (let ((#{t\ 1655}#
                                                                          (memq 'expand
                                                                                #{when-list\ 1631}#)))
                                                                    (if #{t\ 1655}#
                                                                      #{t\ 1655}#
                                                                      (if (eq? #{m\ 1567}#
                                                                               'c&e)
                                                                        (memq 'eval
                                                                              #{when-list\ 1631}#)
                                                                        #f)))))))
                                                        (begin
                                                          (#{top-level-eval-hook\ 291}#
                                                            (#{chi-top-sequence\ 452}#
                                                              #{body\ 1632}#
                                                              #{r\ 1564}#
                                                              #{w\ 1591}#
                                                              #{s\ 1592}#
                                                              'e
                                                              '(eval)
                                                              #{mod\ 1593}#)
                                                            #{mod\ 1593}#)
                                                          #{exps\ 1570}#)
                                                        #{exps\ 1570}#))))))
                                            #{tmp\ 1622}#)
                                          (syntax-violation
                                            #f
                                            "source expression failed to match any pattern"
                                            #{tmp\ 1621}#))))
                                    (if (eqv? #{type\ 1588}#
                                              'define-syntax-form)
                                      (begin
                                        (let ((#{n\ 1663}#
                                                (#{id-var-name\ 434}#
                                                  #{value\ 1589}#
                                                  #{w\ 1591}#))
                                              (#{r\ 1664}#
                                                (#{macros-only-env\ 372}#
                                                  #{r\ 1564}#)))
                                          (if (eqv? #{m\ 1567}# 'c)
                                            (if (memq 'compile #{esew\ 1568}#)
                                              (begin
                                                (let ((#{e\ 1667}#
                                                        (#{chi-install-global\ 454}#
                                                          #{n\ 1663}#
                                                          (#{chi\ 460}#
                                                            #{e\ 1590}#
                                                            #{r\ 1664}#
                                                            #{w\ 1591}#
                                                            #{mod\ 1593}#))))
                                                  (begin
                                                    (#{top-level-eval-hook\ 291}#
                                                      #{e\ 1667}#
                                                      #{mod\ 1593}#)
                                                    (if (memq 'load
                                                              #{esew\ 1568}#)
                                                      (cons #{e\ 1667}#
                                                            #{exps\ 1570}#)
                                                      #{exps\ 1570}#))))
                                              (if (memq 'load #{esew\ 1568}#)
                                                (cons (#{chi-install-global\ 454}#
                                                        #{n\ 1663}#
                                                        (#{chi\ 460}#
                                                          #{e\ 1590}#
                                                          #{r\ 1664}#
                                                          #{w\ 1591}#
                                                          #{mod\ 1593}#))
                                                      #{exps\ 1570}#)
                                                #{exps\ 1570}#))
                                            (if (eqv? #{m\ 1567}# 'c&e)
                                              (begin
                                                (let ((#{e\ 1670}#
                                                        (#{chi-install-global\ 454}#
                                                          #{n\ 1663}#
                                                          (#{chi\ 460}#
                                                            #{e\ 1590}#
                                                            #{r\ 1664}#
                                                            #{w\ 1591}#
                                                            #{mod\ 1593}#))))
                                                  (begin
                                                    (#{top-level-eval-hook\ 291}#
                                                      #{e\ 1670}#
                                                      #{mod\ 1593}#)
                                                    (cons #{e\ 1670}#
                                                          #{exps\ 1570}#))))
                                              (begin
                                                (if (memq 'eval #{esew\ 1568}#)
                                                  (#{top-level-eval-hook\ 291}#
                                                    (#{chi-install-global\ 454}#
                                                      #{n\ 1663}#
                                                      (#{chi\ 460}#
                                                        #{e\ 1590}#
                                                        #{r\ 1664}#
                                                        #{w\ 1591}#
                                                        #{mod\ 1593}#))
                                                    #{mod\ 1593}#))
                                                #{exps\ 1570}#)))))
                                      (if (eqv? #{type\ 1588}# 'define-form)
                                        (begin
                                          (let ((#{n\ 1675}#
                                                  (#{id-var-name\ 434}#
                                                    #{value\ 1589}#
                                                    #{w\ 1591}#)))
                                            (begin
                                              (let ((#{type\ 1677}#
                                                      (car (#{lookup\ 374}#
                                                             #{n\ 1675}#
                                                             #{r\ 1564}#
                                                             #{mod\ 1593}#))))
                                                (if (if (eqv? #{type\ 1677}#
                                                              'global)
                                                      #t
                                                      (if (eqv? #{type\ 1677}#
                                                                'core)
                                                        #t
                                                        (if (eqv? #{type\ 1677}#
                                                                  'macro)
                                                          #t
                                                          (eqv? #{type\ 1677}#
                                                                'module-ref))))
                                                  (begin
                                                    (if (if (if (eq? #{m\ 1567}#
                                                                     'c)
                                                              #t
                                                              (eq? #{m\ 1567}#
                                                                   'c&e))
                                                          (if (not (module-local-variable
                                                                     (current-module)
                                                                     #{n\ 1675}#))
                                                            (current-module)
                                                            #f)
                                                          #f)
                                                      (begin
                                                        (let ((#{old\ 1684}#
                                                                (module-variable
                                                                  (current-module)
                                                                  #{n\ 1675}#)))
                                                          (if (if (variable?
                                                                    #{old\ 1684}#)
                                                                (variable-bound?
                                                                  #{old\ 1684}#)
                                                                #f)
                                                            (module-define!
                                                              (current-module)
                                                              #{n\ 1675}#
                                                              (variable-ref
                                                                #{old\ 1684}#))
                                                            (module-add!
                                                              (current-module)
                                                              #{n\ 1675}#
                                                              (make-undefined-variable))))))
                                                    (cons (if (eq? #{m\ 1567}#
                                                                   'c&e)
                                                            (begin
                                                              (let ((#{x\ 1688}#
                                                                      (#{build-global-definition\ 322}#
                                                                        #{s\ 1592}#
                                                                        #{n\ 1675}#
                                                                        (#{chi\ 460}#
                                                                          #{e\ 1590}#
                                                                          #{r\ 1564}#
                                                                          #{w\ 1591}#
                                                                          #{mod\ 1593}#))))
                                                                (begin
                                                                  (#{top-level-eval-hook\ 291}#
                                                                    #{x\ 1688}#
                                                                    #{mod\ 1593}#)
                                                                  #{x\ 1688}#)))
                                                            (lambda ()
                                                              (#{build-global-definition\ 322}#
                                                                #{s\ 1592}#
                                                                #{n\ 1675}#
                                                                (#{chi\ 460}#
                                                                  #{e\ 1590}#
                                                                  #{r\ 1564}#
                                                                  #{w\ 1591}#
                                                                  #{mod\ 1593}#))))
                                                          #{exps\ 1570}#))
                                                  (if (eqv? #{type\ 1677}#
                                                            'displaced-lexical)
                                                    (syntax-violation
                                                      #f
                                                      "identifier out of context"
                                                      #{e\ 1590}#
                                                      (#{wrap\ 446}#
                                                        #{value\ 1589}#
                                                        #{w\ 1591}#
                                                        #{mod\ 1593}#))
                                                    (syntax-violation
                                                      #f
                                                      "cannot define keyword at top level"
                                                      #{e\ 1590}#
                                                      (#{wrap\ 446}#
                                                        #{value\ 1589}#
                                                        #{w\ 1591}#
                                                        #{mod\ 1593}#))))))))
                                        (cons (if (eq? #{m\ 1567}# 'c&e)
                                                (begin
                                                  (let ((#{x\ 1693}#
                                                          (#{chi-expr\ 462}#
                                                            #{type\ 1588}#
                                                            #{value\ 1589}#
                                                            #{e\ 1590}#
                                                            #{r\ 1564}#
                                                            #{w\ 1591}#
                                                            #{s\ 1592}#
                                                            #{mod\ 1593}#)))
                                                    (begin
                                                      (#{top-level-eval-hook\ 291}#
                                                        #{x\ 1693}#
                                                        #{mod\ 1593}#)
                                                      #{x\ 1693}#)))
                                                (lambda ()
                                                  (#{chi-expr\ 462}#
                                                    #{type\ 1588}#
                                                    #{value\ 1589}#
                                                    #{e\ 1590}#
                                                    #{r\ 1564}#
                                                    #{w\ 1591}#
                                                    #{s\ 1592}#
                                                    #{mod\ 1593}#)))
                                              #{exps\ 1570}#)))))))))
                        (lambda (#{exps\ 1694}#)
                          (#{scan\ 1562}#
                            (cdr #{body\ 1563}#)
                            #{r\ 1564}#
                            #{w\ 1565}#
                            #{s\ 1566}#
                            #{m\ 1567}#
                            #{esew\ 1568}#
                            #{mod\ 1569}#
                            #{exps\ 1694}#)))))))
               (begin
                 (call-with-values
                   (lambda ()
                     (#{scan\ 1562}#
                       #{body\ 1547}#
                       #{r\ 1548}#
                       #{w\ 1549}#
                       #{s\ 1550}#
                       #{m\ 1551}#
                       #{esew\ 1552}#
                       #{mod\ 1553}#
                       '()))
                   (lambda (#{exps\ 1696}#)
                     (if (null? #{exps\ 1696}#)
                       (#{build-void\ 304}# #{s\ 1550}#)
                       (#{build-sequence\ 334}#
                         #{s\ 1550}#
                         (letrec*
                           ((#{lp\ 1701}#
                              (lambda (#{in\ 1702}# #{out\ 1703}#)
                                (if (null? #{in\ 1702}#)
                                  #{out\ 1703}#
                                  (begin
                                    (let ((#{e\ 1705}# (car #{in\ 1702}#)))
                                      (#{lp\ 1701}#
                                        (cdr #{in\ 1702}#)
                                        (cons (if (procedure? #{e\ 1705}#)
                                                (#{e\ 1705}#)
                                                #{e\ 1705}#)
                                              #{out\ 1703}#))))))))
                           (begin (#{lp\ 1701}# #{exps\ 1696}# '())))))))))))
         (#{chi-install-global\ 454}#
           (lambda (#{name\ 1706}# #{e\ 1707}#)
             (#{build-global-definition\ 322}#
               #f
               #{name\ 1706}#
               (#{build-application\ 306}#
                 #f
                 (#{build-primref\ 330}#
                   #f
                   'make-syntax-transformer)
                 (list (#{build-data\ 332}# #f #{name\ 1706}#)
                       (#{build-data\ 332}# #f 'macro)
                       #{e\ 1707}#)))))
         (#{chi-when-list\ 456}#
           (lambda (#{e\ 1715}# #{when-list\ 1716}# #{w\ 1717}#)
             (letrec*
               ((#{f\ 1724}#
                  (lambda (#{when-list\ 1725}# #{situations\ 1726}#)
                    (if (null? #{when-list\ 1725}#)
                      #{situations\ 1726}#
                      (#{f\ 1724}#
                        (cdr #{when-list\ 1725}#)
                        (cons (begin
                                (let ((#{x\ 1728}# (car #{when-list\ 1725}#)))
                                  (if (#{free-id=?\ 436}#
                                        #{x\ 1728}#
                                        '#(syntax-object
                                           compile
                                           ((top)
                                            #(ribcage () () ())
                                            #(ribcage () () ())
                                            #(ribcage () () ())
                                            #(ribcage #(x) #((top)) #("i1727"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(f when-list situations)
                                              #((top) (top) (top))
                                              #("i1721" "i1722" "i1723"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(e when-list w)
                                              #((top) (top) (top))
                                              #("i1718" "i1719" "i1720"))
                                            #(ribcage
                                              (lambda-var-list
                                                gen-var
                                                strip
                                                chi-lambda-case
                                                lambda*-formals
                                                chi-simple-lambda
                                                lambda-formals
                                                ellipsis?
                                                chi-void
                                                eval-local-transformer
                                                chi-local-syntax
                                                chi-body
                                                chi-macro
                                                chi-application
                                                chi-expr
                                                chi
                                                syntax-type
                                                chi-when-list
                                                chi-install-global
                                                chi-top-sequence
                                                chi-sequence
                                                source-wrap
                                                wrap
                                                bound-id-member?
                                                distinct-bound-ids?
                                                valid-bound-ids?
                                                bound-id=?
                                                free-id=?
                                                id-var-name
                                                same-marks?
                                                join-marks
                                                join-wraps
                                                smart-append
                                                make-binding-wrap
                                                extend-ribcage!
                                                make-empty-ribcage
                                                new-mark
                                                anti-mark
                                                the-anti-mark
                                                top-marked?
                                                top-wrap
                                                empty-wrap
                                                set-ribcage-labels!
                                                set-ribcage-marks!
                                                set-ribcage-symnames!
                                                ribcage-labels
                                                ribcage-marks
                                                ribcage-symnames
                                                ribcage?
                                                make-ribcage
                                                gen-labels
                                                gen-label
                                                make-rename
                                                rename-marks
                                                rename-new
                                                rename-old
                                                subst-rename?
                                                wrap-subst
                                                wrap-marks
                                                make-wrap
                                                id-sym-name&marks
                                                id-sym-name
                                                id?
                                                nonsymbol-id?
                                                global-extend
                                                lookup
                                                macros-only-env
                                                extend-var-env
                                                extend-env
                                                null-env
                                                binding-value
                                                binding-type
                                                make-binding
                                                arg-check
                                                source-annotation
                                                no-source
                                                set-syntax-object-module!
                                                set-syntax-object-wrap!
                                                set-syntax-object-expression!
                                                syntax-object-module
                                                syntax-object-wrap
                                                syntax-object-expression
                                                syntax-object?
                                                make-syntax-object
                                                build-lexical-var
                                                build-letrec
                                                build-named-let
                                                build-let
                                                build-sequence
                                                build-data
                                                build-primref
                                                build-lambda-case
                                                build-case-lambda
                                                build-simple-lambda
                                                build-global-definition
                                                build-global-assignment
                                                build-global-reference
                                                analyze-variable
                                                build-lexical-assignment
                                                build-lexical-reference
                                                build-dynlet
                                                build-conditional
                                                build-application
                                                build-void
                                                maybe-name-value!
                                                decorate-source
                                                get-global-definition-hook
                                                put-global-definition-hook
                                                gensym-hook
                                                local-eval-hook
                                                top-level-eval-hook
                                                fx<
                                                fx=
                                                fx-
                                                fx+
                                                set-lambda-meta!
                                                lambda-meta
                                                lambda?
                                                make-dynlet
                                                make-letrec
                                                make-let
                                                make-lambda-case
                                                make-lambda
                                                make-sequence
                                                make-application
                                                make-conditional
                                                make-toplevel-define
                                                make-toplevel-set
                                                make-toplevel-ref
                                                make-module-set
                                                make-module-ref
                                                make-lexical-set
                                                make-lexical-ref
                                                make-primitive-ref
                                                make-const
                                                make-void)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("i489"
                                               "i487"
                                               "i485"
                                               "i483"
                                               "i481"
                                               "i479"
                                               "i477"
                                               "i475"
                                               "i473"
                                               "i471"
                                               "i469"
                                               "i467"
                                               "i465"
                                               "i463"
                                               "i461"
                                               "i459"
                                               "i457"
                                               "i455"
                                               "i453"
                                               "i451"
                                               "i449"
                                               "i447"
                                               "i445"
                                               "i443"
                                               "i441"
                                               "i439"
                                               "i437"
                                               "i435"
                                               "i433"
                                               "i431"
                                               "i429"
                                               "i427"
                                               "i425"
                                               "i423"
                                               "i421"
                                               "i420"
                                               "i419"
                                               "i417"
                                               "i416"
                                               "i415"
                                               "i414"
                                               "i413"
                                               "i411"
                                               "i409"
                                               "i407"
                                               "i405"
                                               "i403"
                                               "i401"
                                               "i399"
                                               "i397"
                                               "i394"
                                               "i392"
                                               "i391"
                                               "i390"
                                               "i389"
                                               "i388"
                                               "i387"
                                               "i386"
                                               "i385"
                                               "i384"
                                               "i382"
                                               "i381"
                                               "i379"
                                               "i377"
                                               "i375"
                                               "i373"
                                               "i371"
                                               "i369"
                                               "i367"
                                               "i366"
                                               "i365"
                                               "i364"
                                               "i363"
                                               "i362"
                                               "i360"
                                               "i359"
                                               "i357"
                                               "i355"
                                               "i353"
                                               "i351"
                                               "i349"
                                               "i347"
                                               "i345"
                                               "i343"
                                               "i341"
                                               "i339"
                                               "i337"
                                               "i335"
                                               "i333"
                                               "i331"
                                               "i329"
                                               "i327"
                                               "i325"
                                               "i323"
                                               "i321"
                                               "i319"
                                               "i317"
                                               "i315"
                                               "i313"
                                               "i311"
                                               "i309"
                                               "i307"
                                               "i305"
                                               "i303"
                                               "i301"
                                               "i299"
                                               "i297"
                                               "i295"
                                               "i294"
                                               "i292"
                                               "i290"
                                               "i288"
                                               "i286"
                                               "i284"
                                               "i282"
                                               "i280"
                                               "i278"
                                               "i276"
                                               "i273"
                                               "i271"
                                               "i269"
                                               "i267"
                                               "i265"
                                               "i263"
                                               "i261"
                                               "i259"
                                               "i257"
                                               "i255"
                                               "i253"
                                               "i251"
                                               "i249"
                                               "i247"
                                               "i245"
                                               "i243"
                                               "i241"
                                               "i239"))
                                            #(ribcage
                                              (define-structure
                                                define-expansion-accessors
                                                define-expansion-constructors
                                                and-map*)
                                              ((top) (top) (top) (top))
                                              ("i41" "i40" "i39" "i37")))
                                           (hygiene guile)))
                                    'compile
                                    (if (#{free-id=?\ 436}#
                                          #{x\ 1728}#
                                          '#(syntax-object
                                             load
                                             ((top)
                                              #(ribcage () () ())
                                              #(ribcage () () ())
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("i1727"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(f when-list situations)
                                                #((top) (top) (top))
                                                #("i1721" "i1722" "i1723"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(e when-list w)
                                                #((top) (top) (top))
                                                #("i1718" "i1719" "i1720"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  chi-lambda-case
                                                  lambda*-formals
                                                  chi-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  chi-void
                                                  eval-local-transformer
                                                  chi-local-syntax
                                                  chi-body
                                                  chi-macro
                                                  chi-application
                                                  chi-expr
                                                  chi
                                                  syntax-type
                                                  chi-when-list
                                                  chi-install-global
                                                  chi-top-sequence
                                                  chi-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i489"
                                                 "i487"
                                                 "i485"
                                                 "i483"
                                                 "i481"
                                                 "i479"
                                                 "i477"
                                                 "i475"
                                                 "i473"
                                                 "i471"
                                                 "i469"
                                                 "i467"
                                                 "i465"
                                                 "i463"
                                                 "i461"
                                                 "i459"
                                                 "i457"
                                                 "i455"
                                                 "i453"
                                                 "i451"
                                                 "i449"
                                                 "i447"
                                                 "i445"
                                                 "i443"
                                                 "i441"
                                                 "i439"
                                                 "i437"
                                                 "i435"
                                                 "i433"
                                                 "i431"
                                                 "i429"
                                                 "i427"
                                                 "i425"
                                                 "i423"
                                                 "i421"
                                                 "i420"
                                                 "i419"
                                                 "i417"
                                                 "i416"
                                                 "i415"
                                                 "i414"
                                                 "i413"
                                                 "i411"
                                                 "i409"
                                                 "i407"
                                                 "i405"
                                                 "i403"
                                                 "i401"
                                                 "i399"
                                                 "i397"
                                                 "i394"
                                                 "i392"
                                                 "i391"
                                                 "i390"
                                                 "i389"
                                                 "i388"
                                                 "i387"
                                                 "i386"
                                                 "i385"
                                                 "i384"
                                                 "i382"
                                                 "i381"
                                                 "i379"
                                                 "i377"
                                                 "i375"
                                                 "i373"
                                                 "i371"
                                                 "i369"
                                                 "i367"
                                                 "i366"
                                                 "i365"
                                                 "i364"
                                                 "i363"
                                                 "i362"
                                                 "i360"
                                                 "i359"
                                                 "i357"
                                                 "i355"
                                                 "i353"
                                                 "i351"
                                                 "i349"
                                                 "i347"
                                                 "i345"
                                                 "i343"
                                                 "i341"
                                                 "i339"
                                                 "i337"
                                                 "i335"
                                                 "i333"
                                                 "i331"
                                                 "i329"
                                                 "i327"
                                                 "i325"
                                                 "i323"
                                                 "i321"
                                                 "i319"
                                                 "i317"
                                                 "i315"
                                                 "i313"
                                                 "i311"
                                                 "i309"
                                                 "i307"
                                                 "i305"
                                                 "i303"
                                                 "i301"
                                                 "i299"
                                                 "i297"
                                                 "i295"
                                                 "i294"
                                                 "i292"
                                                 "i290"
                                                 "i288"
                                                 "i286"
                                                 "i284"
                                                 "i282"
                                                 "i280"
                                                 "i278"
                                                 "i276"
                                                 "i273"
                                                 "i271"
                                                 "i269"
                                                 "i267"
                                                 "i265"
                                                 "i263"
                                                 "i261"
                                                 "i259"
                                                 "i257"
                                                 "i255"
                                                 "i253"
                                                 "i251"
                                                 "i249"
                                                 "i247"
                                                 "i245"
                                                 "i243"
                                                 "i241"
                                                 "i239"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors
                                                  and-map*)
                                                ((top) (top) (top) (top))
                                                ("i41" "i40" "i39" "i37")))
                                             (hygiene guile)))
                                      'load
                                      (if (#{free-id=?\ 436}#
                                            #{x\ 1728}#
                                            '#(syntax-object
                                               eval
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage () () ())
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x)
                                                  #((top))
                                                  #("i1727"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(f when-list situations)
                                                  #((top) (top) (top))
                                                  #("i1721" "i1722" "i1723"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(e when-list w)
                                                  #((top) (top) (top))
                                                  #("i1718" "i1719" "i1720"))
                                                #(ribcage
                                                  (lambda-var-list
                                                    gen-var
                                                    strip
                                                    chi-lambda-case
                                                    lambda*-formals
                                                    chi-simple-lambda
                                                    lambda-formals
                                                    ellipsis?
                                                    chi-void
                                                    eval-local-transformer
                                                    chi-local-syntax
                                                    chi-body
                                                    chi-macro
                                                    chi-application
                                                    chi-expr
                                                    chi
                                                    syntax-type
                                                    chi-when-list
                                                    chi-install-global
                                                    chi-top-sequence
                                                    chi-sequence
                                                    source-wrap
                                                    wrap
                                                    bound-id-member?
                                                    distinct-bound-ids?
                                                    valid-bound-ids?
                                                    bound-id=?
                                                    free-id=?
                                                    id-var-name
                                                    same-marks?
                                                    join-marks
                                                    join-wraps
                                                    smart-append
                                                    make-binding-wrap
                                                    extend-ribcage!
                                                    make-empty-ribcage
                                                    new-mark
                                                    anti-mark
                                                    the-anti-mark
                                                    top-marked?
                                                    top-wrap
                                                    empty-wrap
                                                    set-ribcage-labels!
                                                    set-ribcage-marks!
                                                    set-ribcage-symnames!
                                                    ribcage-labels
                                                    ribcage-marks
                                                    ribcage-symnames
                                                    ribcage?
                                                    make-ribcage
                                                    gen-labels
                                                    gen-label
                                                    make-rename
                                                    rename-marks
                                                    rename-new
                                                    rename-old
                                                    subst-rename?
                                                    wrap-subst
                                                    wrap-marks
                                                    make-wrap
                                                    id-sym-name&marks
                                                    id-sym-name
                                                    id?
                                                    nonsymbol-id?
                                                    global-extend
                                                    lookup
                                                    macros-only-env
                                                    extend-var-env
                                                    extend-env
                                                    null-env
                                                    binding-value
                                                    binding-type
                                                    make-binding
                                                    arg-check
                                                    source-annotation
                                                    no-source
                                                    set-syntax-object-module!
                                                    set-syntax-object-wrap!
                                                    set-syntax-object-expression!
                                                    syntax-object-module
                                                    syntax-object-wrap
                                                    syntax-object-expression
                                                    syntax-object?
                                                    make-syntax-object
                                                    build-lexical-var
                                                    build-letrec
                                                    build-named-let
                                                    build-let
                                                    build-sequence
                                                    build-data
                                                    build-primref
                                                    build-lambda-case
                                                    build-case-lambda
                                                    build-simple-lambda
                                                    build-global-definition
                                                    build-global-assignment
                                                    build-global-reference
                                                    analyze-variable
                                                    build-lexical-assignment
                                                    build-lexical-reference
                                                    build-dynlet
                                                    build-conditional
                                                    build-application
                                                    build-void
                                                    maybe-name-value!
                                                    decorate-source
                                                    get-global-definition-hook
                                                    put-global-definition-hook
                                                    gensym-hook
                                                    local-eval-hook
                                                    top-level-eval-hook
                                                    fx<
                                                    fx=
                                                    fx-
                                                    fx+
                                                    set-lambda-meta!
                                                    lambda-meta
                                                    lambda?
                                                    make-dynlet
                                                    make-letrec
                                                    make-let
                                                    make-lambda-case
                                                    make-lambda
                                                    make-sequence
                                                    make-application
                                                    make-conditional
                                                    make-toplevel-define
                                                    make-toplevel-set
                                                    make-toplevel-ref
                                                    make-module-set
                                                    make-module-ref
                                                    make-lexical-set
                                                    make-lexical-ref
                                                    make-primitive-ref
                                                    make-const
                                                    make-void)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i489"
                                                   "i487"
                                                   "i485"
                                                   "i483"
                                                   "i481"
                                                   "i479"
                                                   "i477"
                                                   "i475"
                                                   "i473"
                                                   "i471"
                                                   "i469"
                                                   "i467"
                                                   "i465"
                                                   "i463"
                                                   "i461"
                                                   "i459"
                                                   "i457"
                                                   "i455"
                                                   "i453"
                                                   "i451"
                                                   "i449"
                                                   "i447"
                                                   "i445"
                                                   "i443"
                                                   "i441"
                                                   "i439"
                                                   "i437"
                                                   "i435"
                                                   "i433"
                                                   "i431"
                                                   "i429"
                                                   "i427"
                                                   "i425"
                                                   "i423"
                                                   "i421"
                                                   "i420"
                                                   "i419"
                                                   "i417"
                                                   "i416"
                                                   "i415"
                                                   "i414"
                                                   "i413"
                                                   "i411"
                                                   "i409"
                                                   "i407"
                                                   "i405"
                                                   "i403"
                                                   "i401"
                                                   "i399"
                                                   "i397"
                                                   "i394"
                                                   "i392"
                                                   "i391"
                                                   "i390"
                                                   "i389"
                                                   "i388"
                                                   "i387"
                                                   "i386"
                                                   "i385"
                                                   "i384"
                                                   "i382"
                                                   "i381"
                                                   "i379"
                                                   "i377"
                                                   "i375"
                                                   "i373"
                                                   "i371"
                                                   "i369"
                                                   "i367"
                                                   "i366"
                                                   "i365"
                                                   "i364"
                                                   "i363"
                                                   "i362"
                                                   "i360"
                                                   "i359"
                                                   "i357"
                                                   "i355"
                                                   "i353"
                                                   "i351"
                                                   "i349"
                                                   "i347"
                                                   "i345"
                                                   "i343"
                                                   "i341"
                                                   "i339"
                                                   "i337"
                                                   "i335"
                                                   "i333"
                                                   "i331"
                                                   "i329"
                                                   "i327"
                                                   "i325"
                                                   "i323"
                                                   "i321"
                                                   "i319"
                                                   "i317"
                                                   "i315"
                                                   "i313"
                                                   "i311"
                                                   "i309"
                                                   "i307"
                                                   "i305"
                                                   "i303"
                                                   "i301"
                                                   "i299"
                                                   "i297"
                                                   "i295"
                                                   "i294"
                                                   "i292"
                                                   "i290"
                                                   "i288"
                                                   "i286"
                                                   "i284"
                                                   "i282"
                                                   "i280"
                                                   "i278"
                                                   "i276"
                                                   "i273"
                                                   "i271"
                                                   "i269"
                                                   "i267"
                                                   "i265"
                                                   "i263"
                                                   "i261"
                                                   "i259"
                                                   "i257"
                                                   "i255"
                                                   "i253"
                                                   "i251"
                                                   "i249"
                                                   "i247"
                                                   "i245"
                                                   "i243"
                                                   "i241"
                                                   "i239"))
                                                #(ribcage
                                                  (define-structure
                                                    define-expansion-accessors
                                                    define-expansion-constructors
                                                    and-map*)
                                                  ((top) (top) (top) (top))
                                                  ("i41" "i40" "i39" "i37")))
                                               (hygiene guile)))
                                        'eval
                                        (if (#{free-id=?\ 436}#
                                              #{x\ 1728}#
                                              '#(syntax-object
                                                 expand
                                                 ((top)
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(x)
                                                    #((top))
                                                    #("i1727"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(f when-list situations)
                                                    #((top) (top) (top))
                                                    #("i1721" "i1722" "i1723"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(e when-list w)
                                                    #((top) (top) (top))
                                                    #("i1718" "i1719" "i1720"))
                                                  #(ribcage
                                                    (lambda-var-list
                                                      gen-var
                                                      strip
                                                      chi-lambda-case
                                                      lambda*-formals
                                                      chi-simple-lambda
                                                      lambda-formals
                                                      ellipsis?
                                                      chi-void
                                                      eval-local-transformer
                                                      chi-local-syntax
                                                      chi-body
                                                      chi-macro
                                                      chi-application
                                                      chi-expr
                                                      chi
                                                      syntax-type
                                                      chi-when-list
                                                      chi-install-global
                                                      chi-top-sequence
                                                      chi-sequence
                                                      source-wrap
                                                      wrap
                                                      bound-id-member?
                                                      distinct-bound-ids?
                                                      valid-bound-ids?
                                                      bound-id=?
                                                      free-id=?
                                                      id-var-name
                                                      same-marks?
                                                      join-marks
                                                      join-wraps
                                                      smart-append
                                                      make-binding-wrap
                                                      extend-ribcage!
                                                      make-empty-ribcage
                                                      new-mark
                                                      anti-mark
                                                      the-anti-mark
                                                      top-marked?
                                                      top-wrap
                                                      empty-wrap
                                                      set-ribcage-labels!
                                                      set-ribcage-marks!
                                                      set-ribcage-symnames!
                                                      ribcage-labels
                                                      ribcage-marks
                                                      ribcage-symnames
                                                      ribcage?
                                                      make-ribcage
                                                      gen-labels
                                                      gen-label
                                                      make-rename
                                                      rename-marks
                                                      rename-new
                                                      rename-old
                                                      subst-rename?
                                                      wrap-subst
                                                      wrap-marks
                                                      make-wrap
                                                      id-sym-name&marks
                                                      id-sym-name
                                                      id?
                                                      nonsymbol-id?
                                                      global-extend
                                                      lookup
                                                      macros-only-env
                                                      extend-var-env
                                                      extend-env
                                                      null-env
                                                      binding-value
                                                      binding-type
                                                      make-binding
                                                      arg-check
                                                      source-annotation
                                                      no-source
                                                      set-syntax-object-module!
                                                      set-syntax-object-wrap!
                                                      set-syntax-object-expression!
                                                      syntax-object-module
                                                      syntax-object-wrap
                                                      syntax-object-expression
                                                      syntax-object?
                                                      make-syntax-object
                                                      build-lexical-var
                                                      build-letrec
                                                      build-named-let
                                                      build-let
                                                      build-sequence
                                                      build-data
                                                      build-primref
                                                      build-lambda-case
                                                      build-case-lambda
                                                      build-simple-lambda
                                                      build-global-definition
                                                      build-global-assignment
                                                      build-global-reference
                                                      analyze-variable
                                                      build-lexical-assignment
                                                      build-lexical-reference
                                                      build-dynlet
                                                      build-conditional
                                                      build-application
                                                      build-void
                                                      maybe-name-value!
                                                      decorate-source
                                                      get-global-definition-hook
                                                      put-global-definition-hook
                                                      gensym-hook
                                                      local-eval-hook
                                                      top-level-eval-hook
                                                      fx<
                                                      fx=
                                                      fx-
                                                      fx+
                                                      set-lambda-meta!
                                                      lambda-meta
                                                      lambda?
                                                      make-dynlet
                                                      make-letrec
                                                      make-let
                                                      make-lambda-case
                                                      make-lambda
                                                      make-sequence
                                                      make-application
                                                      make-conditional
                                                      make-toplevel-define
                                                      make-toplevel-set
                                                      make-toplevel-ref
                                                      make-module-set
                                                      make-module-ref
                                                      make-lexical-set
                                                      make-lexical-ref
                                                      make-primitive-ref
                                                      make-const
                                                      make-void)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i489"
                                                     "i487"
                                                     "i485"
                                                     "i483"
                                                     "i481"
                                                     "i479"
                                                     "i477"
                                                     "i475"
                                                     "i473"
                                                     "i471"
                                                     "i469"
                                                     "i467"
                                                     "i465"
                                                     "i463"
                                                     "i461"
                                                     "i459"
                                                     "i457"
                                                     "i455"
                                                     "i453"
                                                     "i451"
                                                     "i449"
                                                     "i447"
                                                     "i445"
                                                     "i443"
                                                     "i441"
                                                     "i439"
                                                     "i437"
                                                     "i435"
                                                     "i433"
                                                     "i431"
                                                     "i429"
                                                     "i427"
                                                     "i425"
                                                     "i423"
                                                     "i421"
                                                     "i420"
                                                     "i419"
                                                     "i417"
                                                     "i416"
                                                     "i415"
                                                     "i414"
                                                     "i413"
                                                     "i411"
                                                     "i409"
                                                     "i407"
                                                     "i405"
                                                     "i403"
                                                     "i401"
                                                     "i399"
                                                     "i397"
                                                     "i394"
                                                     "i392"
                                                     "i391"
                                                     "i390"
                                                     "i389"
                                                     "i388"
                                                     "i387"
                                                     "i386"
                                                     "i385"
                                                     "i384"
                                                     "i382"
                                                     "i381"
                                                     "i379"
                                                     "i377"
                                                     "i375"
                                                     "i373"
                                                     "i371"
                                                     "i369"
                                                     "i367"
                                                     "i366"
                                                     "i365"
                                                     "i364"
                                                     "i363"
                                                     "i362"
                                                     "i360"
                                                     "i359"
                                                     "i357"
                                                     "i355"
                                                     "i353"
                                                     "i351"
                                                     "i349"
                                                     "i347"
                                                     "i345"
                                                     "i343"
                                                     "i341"
                                                     "i339"
                                                     "i337"
                                                     "i335"
                                                     "i333"
                                                     "i331"
                                                     "i329"
                                                     "i327"
                                                     "i325"
                                                     "i323"
                                                     "i321"
                                                     "i319"
                                                     "i317"
                                                     "i315"
                                                     "i313"
                                                     "i311"
                                                     "i309"
                                                     "i307"
                                                     "i305"
                                                     "i303"
                                                     "i301"
                                                     "i299"
                                                     "i297"
                                                     "i295"
                                                     "i294"
                                                     "i292"
                                                     "i290"
                                                     "i288"
                                                     "i286"
                                                     "i284"
                                                     "i282"
                                                     "i280"
                                                     "i278"
                                                     "i276"
                                                     "i273"
                                                     "i271"
                                                     "i269"
                                                     "i267"
                                                     "i265"
                                                     "i263"
                                                     "i261"
                                                     "i259"
                                                     "i257"
                                                     "i255"
                                                     "i253"
                                                     "i251"
                                                     "i249"
                                                     "i247"
                                                     "i245"
                                                     "i243"
                                                     "i241"
                                                     "i239"))
                                                  #(ribcage
                                                    (define-structure
                                                      define-expansion-accessors
                                                      define-expansion-constructors
                                                      and-map*)
                                                    ((top) (top) (top) (top))
                                                    ("i41" "i40" "i39" "i37")))
                                                 (hygiene guile)))
                                          'expand
                                          (syntax-violation
                                            'eval-when
                                            "invalid situation"
                                            #{e\ 1715}#
                                            (#{wrap\ 446}#
                                              #{x\ 1728}#
                                              #{w\ 1717}#
                                              #f))))))))
                              #{situations\ 1726}#))))))
               (begin (#{f\ 1724}# #{when-list\ 1716}# '())))))
         (#{syntax-type\ 458}#
           (lambda (#{e\ 1738}#
                    #{r\ 1739}#
                    #{w\ 1740}#
                    #{s\ 1741}#
                    #{rib\ 1742}#
                    #{mod\ 1743}#
                    #{for-car?\ 1744}#)
             (if (symbol? #{e\ 1738}#)
               (begin
                 (let ((#{n\ 1756}#
                         (#{id-var-name\ 434}# #{e\ 1738}# #{w\ 1740}#)))
                   (begin
                     (let ((#{b\ 1758}#
                             (#{lookup\ 374}#
                               #{n\ 1756}#
                               #{r\ 1739}#
                               #{mod\ 1743}#)))
                       (begin
                         (let ((#{type\ 1760}# (car #{b\ 1758}#)))
                           (if (eqv? #{type\ 1760}# 'lexical)
                             (values
                               #{type\ 1760}#
                               (cdr #{b\ 1758}#)
                               #{e\ 1738}#
                               #{w\ 1740}#
                               #{s\ 1741}#
                               #{mod\ 1743}#)
                             (if (eqv? #{type\ 1760}# 'global)
                               (values
                                 #{type\ 1760}#
                                 #{n\ 1756}#
                                 #{e\ 1738}#
                                 #{w\ 1740}#
                                 #{s\ 1741}#
                                 #{mod\ 1743}#)
                               (if (eqv? #{type\ 1760}# 'macro)
                                 (if #{for-car?\ 1744}#
                                   (values
                                     #{type\ 1760}#
                                     (cdr #{b\ 1758}#)
                                     #{e\ 1738}#
                                     #{w\ 1740}#
                                     #{s\ 1741}#
                                     #{mod\ 1743}#)
                                   (#{syntax-type\ 458}#
                                     (#{chi-macro\ 466}#
                                       (cdr #{b\ 1758}#)
                                       #{e\ 1738}#
                                       #{r\ 1739}#
                                       #{w\ 1740}#
                                       #{s\ 1741}#
                                       #{rib\ 1742}#
                                       #{mod\ 1743}#)
                                     #{r\ 1739}#
                                     '(())
                                     #{s\ 1741}#
                                     #{rib\ 1742}#
                                     #{mod\ 1743}#
                                     #f))
                                 (values
                                   #{type\ 1760}#
                                   (cdr #{b\ 1758}#)
                                   #{e\ 1738}#
                                   #{w\ 1740}#
                                   #{s\ 1741}#
                                   #{mod\ 1743}#))))))))))
               (if (pair? #{e\ 1738}#)
                 (begin
                   (let ((#{first\ 1774}# (car #{e\ 1738}#)))
                     (call-with-values
                       (lambda ()
                         (#{syntax-type\ 458}#
                           #{first\ 1774}#
                           #{r\ 1739}#
                           #{w\ 1740}#
                           #{s\ 1741}#
                           #{rib\ 1742}#
                           #{mod\ 1743}#
                           #t))
                       (lambda (#{ftype\ 1775}#
                                #{fval\ 1776}#
                                #{fe\ 1777}#
                                #{fw\ 1778}#
                                #{fs\ 1779}#
                                #{fmod\ 1780}#)
                         (if (eqv? #{ftype\ 1775}# 'lexical)
                           (values
                             'lexical-call
                             #{fval\ 1776}#
                             #{e\ 1738}#
                             #{w\ 1740}#
                             #{s\ 1741}#
                             #{mod\ 1743}#)
                           (if (eqv? #{ftype\ 1775}# 'global)
                             (values
                               'global-call
                               (#{make-syntax-object\ 344}#
                                 #{fval\ 1776}#
                                 #{w\ 1740}#
                                 #{fmod\ 1780}#)
                               #{e\ 1738}#
                               #{w\ 1740}#
                               #{s\ 1741}#
                               #{mod\ 1743}#)
                             (if (eqv? #{ftype\ 1775}# 'macro)
                               (#{syntax-type\ 458}#
                                 (#{chi-macro\ 466}#
                                   #{fval\ 1776}#
                                   #{e\ 1738}#
                                   #{r\ 1739}#
                                   #{w\ 1740}#
                                   #{s\ 1741}#
                                   #{rib\ 1742}#
                                   #{mod\ 1743}#)
                                 #{r\ 1739}#
                                 '(())
                                 #{s\ 1741}#
                                 #{rib\ 1742}#
                                 #{mod\ 1743}#
                                 #{for-car?\ 1744}#)
                               (if (eqv? #{ftype\ 1775}# 'module-ref)
                                 (call-with-values
                                   (lambda ()
                                     (#{fval\ 1776}#
                                       #{e\ 1738}#
                                       #{r\ 1739}#
                                       #{w\ 1740}#))
                                   (lambda (#{e\ 1792}#
                                            #{r\ 1793}#
                                            #{w\ 1794}#
                                            #{s\ 1795}#
                                            #{mod\ 1796}#)
                                     (#{syntax-type\ 458}#
                                       #{e\ 1792}#
                                       #{r\ 1793}#
                                       #{w\ 1794}#
                                       #{s\ 1795}#
                                       #{rib\ 1742}#
                                       #{mod\ 1796}#
                                       #{for-car?\ 1744}#)))
                                 (if (eqv? #{ftype\ 1775}# 'core)
                                   (values
                                     'core-form
                                     #{fval\ 1776}#
                                     #{e\ 1738}#
                                     #{w\ 1740}#
                                     #{s\ 1741}#
                                     #{mod\ 1743}#)
                                   (if (eqv? #{ftype\ 1775}# 'local-syntax)
                                     (values
                                       'local-syntax-form
                                       #{fval\ 1776}#
                                       #{e\ 1738}#
                                       #{w\ 1740}#
                                       #{s\ 1741}#
                                       #{mod\ 1743}#)
                                     (if (eqv? #{ftype\ 1775}# 'begin)
                                       (values
                                         'begin-form
                                         #f
                                         #{e\ 1738}#
                                         #{w\ 1740}#
                                         #{s\ 1741}#
                                         #{mod\ 1743}#)
                                       (if (eqv? #{ftype\ 1775}# 'eval-when)
                                         (values
                                           'eval-when-form
                                           #f
                                           #{e\ 1738}#
                                           #{w\ 1740}#
                                           #{s\ 1741}#
                                           #{mod\ 1743}#)
                                         (if (eqv? #{ftype\ 1775}# 'define)
                                           (let ((#{tmp\ 1807}# #{e\ 1738}#))
                                             (let ((#{tmp\ 1808}#
                                                     ($sc-dispatch
                                                       #{tmp\ 1807}#
                                                       '(_ any any))))
                                               (if (if #{tmp\ 1808}#
                                                     (@apply
                                                       (lambda (#{name\ 1811}#
                                                                #{val\ 1812}#)
                                                         (#{id?\ 380}#
                                                           #{name\ 1811}#))
                                                       #{tmp\ 1808}#)
                                                     #f)
                                                 (@apply
                                                   (lambda (#{name\ 1815}#
                                                            #{val\ 1816}#)
                                                     (values
                                                       'define-form
                                                       #{name\ 1815}#
                                                       #{val\ 1816}#
                                                       #{w\ 1740}#
                                                       #{s\ 1741}#
                                                       #{mod\ 1743}#))
                                                   #{tmp\ 1808}#)
                                                 (let ((#{tmp\ 1817}#
                                                         ($sc-dispatch
                                                           #{tmp\ 1807}#
                                                           '(_ (any . any)
                                                               any
                                                               .
                                                               each-any))))
                                                   (if (if #{tmp\ 1817}#
                                                         (@apply
                                                           (lambda (#{name\ 1822}#
                                                                    #{args\ 1823}#
                                                                    #{e1\ 1824}#
                                                                    #{e2\ 1825}#)
                                                             (if (#{id?\ 380}#
                                                                   #{name\ 1822}#)
                                                               (#{valid-bound-ids?\ 440}#
                                                                 (#{lambda-var-list\ 490}#
                                                                   #{args\ 1823}#))
                                                               #f))
                                                           #{tmp\ 1817}#)
                                                         #f)
                                                     (@apply
                                                       (lambda (#{name\ 1832}#
                                                                #{args\ 1833}#
                                                                #{e1\ 1834}#
                                                                #{e2\ 1835}#)
                                                         (values
                                                           'define-form
                                                           (#{wrap\ 446}#
                                                             #{name\ 1832}#
                                                             #{w\ 1740}#
                                                             #{mod\ 1743}#)
                                                           (#{decorate-source\ 300}#
                                                             (cons '#(syntax-object
                                                                      lambda
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(name
                                                                           args
                                                                           e1
                                                                           e2)
                                                                         #((top)
                                                                           (top)
                                                                           (top)
                                                                           (top))
                                                                         #("i1828"
                                                                           "i1829"
                                                                           "i1830"
                                                                           "i1831"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(ftype
                                                                           fval
                                                                           fe
                                                                           fw
                                                                           fs
                                                                           fmod)
                                                                         #((top)
                                                                           (top)
                                                                           (top)
                                                                           (top)
                                                                           (top)
                                                                           (top))
                                                                         #("i1781"
                                                                           "i1782"
                                                                           "i1783"
                                                                           "i1784"
                                                                           "i1785"
                                                                           "i1786"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(first)
                                                                         #((top))
                                                                         #("i1773"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(e
                                                                           r
                                                                           w
                                                                           s
                                                                           rib
                                                                           mod
                                                                           for-car?)
                                                                         #((top)
                                                                           (top)
                                                                           (top)
                                                                           (top)
                                                                           (top)
                                                                           (top)
                                                                           (top))
                                                                         #("i1745"
                                                                           "i1746"
                                                                           "i1747"
                                                                           "i1748"
                                                                           "i1749"
                                                                           "i1750"
                                                                           "i1751"))
                                                                       #(ribcage
                                                                         (lambda-var-list
                                                                           gen-var
                                                                           strip
                                                                           chi-lambda-case
                                                                           lambda*-formals
                                                                           chi-simple-lambda
                                                                           lambda-formals
                                                                           ellipsis?
                                                                           chi-void
                                                                           eval-local-transformer
                                                                           chi-local-syntax
                                                                           chi-body
                                                                           chi-macro
                                                                           chi-application
                                                                           chi-expr
                                                                           chi
                                                                           syntax-type
                                                                           chi-when-list
                                                                           chi-install-global
                                                                           chi-top-sequence
                                                                           chi-sequence
                                                                           source-wrap
                                                                           wrap
                                                                           bound-id-member?
                                                                           distinct-bound-ids?
                                                                           valid-bound-ids?
                                                                           bound-id=?
                                                                           free-id=?
                                                                           id-var-name
                                                                           same-marks?
                                                                           join-marks
                                                                           join-wraps
                                                                           smart-append
                                                                           make-binding-wrap
                                                                           extend-ribcage!
                                                                           make-empty-ribcage
                                                                           new-mark
                                                                           anti-mark
                                                                           the-anti-mark
                                                                           top-marked?
                                                                           top-wrap
                                                                           empty-wrap
                                                                           set-ribcage-labels!
                                                                           set-ribcage-marks!
                                                                           set-ribcage-symnames!
                                                                           ribcage-labels
                                                                           ribcage-marks
                                                                           ribcage-symnames
                                                                           ribcage?
                                                                           make-ribcage
                                                                           gen-labels
                                                                           gen-label
                                                                           make-rename
                                                                           rename-marks
                                                                           rename-new
                                                                           rename-old
                                                                           subst-rename?
                                                                           wrap-subst
                                                                           wrap-marks
                                                                           make-wrap
                                                                           id-sym-name&marks
                                                                           id-sym-name
                                                                           id?
                                                                           nonsymbol-id?
                                                                           global-extend
                                                                           lookup
                                                                           macros-only-env
                                                                           extend-var-env
                                                                           extend-env
                                                                           null-env
                                                                           binding-value
                                                                           binding-type
                                                                           make-binding
                                                                           arg-check
                                                                           source-annotation
                                                                           no-source
                                                                           set-syntax-object-module!
                                                                           set-syntax-object-wrap!
                                                                           set-syntax-object-expression!
                                                                           syntax-object-module
                                                                           syntax-object-wrap
                                                                           syntax-object-expression
                                                                           syntax-object?
                                                                           make-syntax-object
                                                                           build-lexical-var
                                                                           build-letrec
                                                                           build-named-let
                                                                           build-let
                                                                           build-sequence
                                                                           build-data
                                                                           build-primref
                                                                           build-lambda-case
                                                                           build-case-lambda
                                                                           build-simple-lambda
                                                                           build-global-definition
                                                                           build-global-assignment
                                                                           build-global-reference
                                                                           analyze-variable
                                                                           build-lexical-assignment
                                                                           build-lexical-reference
                                                                           build-dynlet
                                                                           build-conditional
                                                                           build-application
                                                                           build-void
                                                                           maybe-name-value!
                                                                           decorate-source
                                                                           get-global-definition-hook
                                                                           put-global-definition-hook
                                                                           gensym-hook
                                                                           local-eval-hook
                                                                           top-level-eval-hook
                                                                           fx<
                                                                           fx=
                                                                           fx-
                                                                           fx+
                                                                           set-lambda-meta!
                                                                           lambda-meta
                                                                           lambda?
                                                                           make-dynlet
                                                                           make-letrec
                                                                           make-let
                                                                           make-lambda-case
                                                                           make-lambda
                                                                           make-sequence
                                                                           make-application
                                                                           make-conditional
                                                                           make-toplevel-define
                                                                           make-toplevel-set
                                                                           make-toplevel-ref
                                                                           make-module-set
                                                                           make-module-ref
                                                                           make-lexical-set
                                                                           make-lexical-ref
                                                                           make-primitive-ref
                                                                           make-const
                                                                           make-void)
                                                                         ((top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                         ("i489"
                                                                          "i487"
                                                                          "i485"
                                                                          "i483"
                                                                          "i481"
                                                                          "i479"
                                                                          "i477"
                                                                          "i475"
                                                                          "i473"
                                                                          "i471"
                                                                          "i469"
                                                                          "i467"
                                                                          "i465"
                                                                          "i463"
                                                                          "i461"
                                                                          "i459"
                                                                          "i457"
                                                                          "i455"
                                                                          "i453"
                                                                          "i451"
                                                                          "i449"
                                                                          "i447"
                                                                          "i445"
                                                                          "i443"
                                                                          "i441"
                                                                          "i439"
                                                                          "i437"
                                                                          "i435"
                                                                          "i433"
                                                                          "i431"
                                                                          "i429"
                                                                          "i427"
                                                                          "i425"
                                                                          "i423"
                                                                          "i421"
                                                                          "i420"
                                                                          "i419"
                                                                          "i417"
                                                                          "i416"
                                                                          "i415"
                                                                          "i414"
                                                                          "i413"
                                                                          "i411"
                                                                          "i409"
                                                                          "i407"
                                                                          "i405"
                                                                          "i403"
                                                                          "i401"
                                                                          "i399"
                                                                          "i397"
                                                                          "i394"
                                                                          "i392"
                                                                          "i391"
                                                                          "i390"
                                                                          "i389"
                                                                          "i388"
                                                                          "i387"
                                                                          "i386"
                                                                          "i385"
                                                                          "i384"
                                                                          "i382"
                                                                          "i381"
                                                                          "i379"
                                                                          "i377"
                                                                          "i375"
                                                                          "i373"
                                                                          "i371"
                                                                          "i369"
                                                                          "i367"
                                                                          "i366"
                                                                          "i365"
                                                                          "i364"
                                                                          "i363"
                                                                          "i362"
                                                                          "i360"
                                                                          "i359"
                                                                          "i357"
                                                                          "i355"
                                                                          "i353"
                                                                          "i351"
                                                                          "i349"
                                                                          "i347"
                                                                          "i345"
                                                                          "i343"
                                                                          "i341"
                                                                          "i339"
                                                                          "i337"
                                                                          "i335"
                                                                          "i333"
                                                                          "i331"
                                                                          "i329"
                                                                          "i327"
                                                                          "i325"
                                                                          "i323"
                                                                          "i321"
                                                                          "i319"
                                                                          "i317"
                                                                          "i315"
                                                                          "i313"
                                                                          "i311"
                                                                          "i309"
                                                                          "i307"
                                                                          "i305"
                                                                          "i303"
                                                                          "i301"
                                                                          "i299"
                                                                          "i297"
                                                                          "i295"
                                                                          "i294"
                                                                          "i292"
                                                                          "i290"
                                                                          "i288"
                                                                          "i286"
                                                                          "i284"
                                                                          "i282"
                                                                          "i280"
                                                                          "i278"
                                                                          "i276"
                                                                          "i273"
                                                                          "i271"
                                                                          "i269"
                                                                          "i267"
                                                                          "i265"
                                                                          "i263"
                                                                          "i261"
                                                                          "i259"
                                                                          "i257"
                                                                          "i255"
                                                                          "i253"
                                                                          "i251"
                                                                          "i249"
                                                                          "i247"
                                                                          "i245"
                                                                          "i243"
                                                                          "i241"
                                                                          "i239"))
                                                                       #(ribcage
                                                                         (define-structure
                                                                           define-expansion-accessors
                                                                           define-expansion-constructors
                                                                           and-map*)
                                                                         ((top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                         ("i41"
                                                                          "i40"
                                                                          "i39"
                                                                          "i37")))
                                                                      (hygiene
                                                                        guile))
                                                                   (#{wrap\ 446}#
                                                                     (cons #{args\ 1833}#
                                                                           (cons #{e1\ 1834}#
                                                                                 #{e2\ 1835}#))
                                                                     #{w\ 1740}#
                                                                     #{mod\ 1743}#))
                                                             #{s\ 1741}#)
                                                           '(())
                                                           #{s\ 1741}#
                                                           #{mod\ 1743}#))
                                                       #{tmp\ 1817}#)
                                                     (let ((#{tmp\ 1838}#
                                                             ($sc-dispatch
                                                               #{tmp\ 1807}#
                                                               '(_ any))))
                                                       (if (if #{tmp\ 1838}#
                                                             (@apply
                                                               (lambda (#{name\ 1840}#)
                                                                 (#{id?\ 380}#
                                                                   #{name\ 1840}#))
                                                               #{tmp\ 1838}#)
                                                             #f)
                                                         (@apply
                                                           (lambda (#{name\ 1842}#)
                                                             (values
                                                               'define-form
                                                               (#{wrap\ 446}#
                                                                 #{name\ 1842}#
                                                                 #{w\ 1740}#
                                                                 #{mod\ 1743}#)
                                                               '(#(syntax-object
                                                                   if
                                                                   ((top)
                                                                    #(ribcage
                                                                      #(name)
                                                                      #((top))
                                                                      #("i1841"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(ftype
                                                                        fval
                                                                        fe
                                                                        fw
                                                                        fs
                                                                        fmod)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("i1781"
                                                                        "i1782"
                                                                        "i1783"
                                                                        "i1784"
                                                                        "i1785"
                                                                        "i1786"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(first)
                                                                      #((top))
                                                                      #("i1773"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(e
                                                                        r
                                                                        w
                                                                        s
                                                                        rib
                                                                        mod
                                                                        for-car?)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("i1745"
                                                                        "i1746"
                                                                        "i1747"
                                                                        "i1748"
                                                                        "i1749"
                                                                        "i1750"
                                                                        "i1751"))
                                                                    #(ribcage
                                                                      (lambda-var-list
                                                                        gen-var
                                                                        strip
                                                                        chi-lambda-case
                                                                        lambda*-formals
                                                                        chi-simple-lambda
                                                                        lambda-formals
                                                                        ellipsis?
                                                                        chi-void
                                                                        eval-local-transformer
                                                                        chi-local-syntax
                                                                        chi-body
                                                                        chi-macro
                                                                        chi-application
                                                                        chi-expr
                                                                        chi
                                                                        syntax-type
                                                                        chi-when-list
                                                                        chi-install-global
                                                                        chi-top-sequence
                                                                        chi-sequence
                                                                        source-wrap
                                                                        wrap
                                                                        bound-id-member?
                                                                        distinct-bound-ids?
                                                                        valid-bound-ids?
                                                                        bound-id=?
                                                                        free-id=?
                                                                        id-var-name
                                                                        same-marks?
                                                                        join-marks
                                                                        join-wraps
                                                                        smart-append
                                                                        make-binding-wrap
                                                                        extend-ribcage!
                                                                        make-empty-ribcage
                                                                        new-mark
                                                                        anti-mark
                                                                        the-anti-mark
                                                                        top-marked?
                                                                        top-wrap
                                                                        empty-wrap
                                                                        set-ribcage-labels!
                                                                        set-ribcage-marks!
                                                                        set-ribcage-symnames!
                                                                        ribcage-labels
                                                                        ribcage-marks
                                                                        ribcage-symnames
                                                                        ribcage?
                                                                        make-ribcage
                                                                        gen-labels
                                                                        gen-label
                                                                        make-rename
                                                                        rename-marks
                                                                        rename-new
                                                                        rename-old
                                                                        subst-rename?
                                                                        wrap-subst
                                                                        wrap-marks
                                                                        make-wrap
                                                                        id-sym-name&marks
                                                                        id-sym-name
                                                                        id?
                                                                        nonsymbol-id?
                                                                        global-extend
                                                                        lookup
                                                                        macros-only-env
                                                                        extend-var-env
                                                                        extend-env
                                                                        null-env
                                                                        binding-value
                                                                        binding-type
                                                                        make-binding
                                                                        arg-check
                                                                        source-annotation
                                                                        no-source
                                                                        set-syntax-object-module!
                                                                        set-syntax-object-wrap!
                                                                        set-syntax-object-expression!
                                                                        syntax-object-module
                                                                        syntax-object-wrap
                                                                        syntax-object-expression
                                                                        syntax-object?
                                                                        make-syntax-object
                                                                        build-lexical-var
                                                                        build-letrec
                                                                        build-named-let
                                                                        build-let
                                                                        build-sequence
                                                                        build-data
                                                                        build-primref
                                                                        build-lambda-case
                                                                        build-case-lambda
                                                                        build-simple-lambda
                                                                        build-global-definition
                                                                        build-global-assignment
                                                                        build-global-reference
                                                                        analyze-variable
                                                                        build-lexical-assignment
                                                                        build-lexical-reference
                                                                        build-dynlet
                                                                        build-conditional
                                                                        build-application
                                                                        build-void
                                                                        maybe-name-value!
                                                                        decorate-source
                                                                        get-global-definition-hook
                                                                        put-global-definition-hook
                                                                        gensym-hook
                                                                        local-eval-hook
                                                                        top-level-eval-hook
                                                                        fx<
                                                                        fx=
                                                                        fx-
                                                                        fx+
                                                                        set-lambda-meta!
                                                                        lambda-meta
                                                                        lambda?
                                                                        make-dynlet
                                                                        make-letrec
                                                                        make-let
                                                                        make-lambda-case
                                                                        make-lambda
                                                                        make-sequence
                                                                        make-application
                                                                        make-conditional
                                                                        make-toplevel-define
                                                                        make-toplevel-set
                                                                        make-toplevel-ref
                                                                        make-module-set
                                                                        make-module-ref
                                                                        make-lexical-set
                                                                        make-lexical-ref
                                                                        make-primitive-ref
                                                                        make-const
                                                                        make-void)
                                                                      ((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                      ("i489"
                                                                       "i487"
                                                                       "i485"
                                                                       "i483"
                                                                       "i481"
                                                                       "i479"
                                                                       "i477"
                                                                       "i475"
                                                                       "i473"
                                                                       "i471"
                                                                       "i469"
                                                                       "i467"
                                                                       "i465"
                                                                       "i463"
                                                                       "i461"
                                                                       "i459"
                                                                       "i457"
                                                                       "i455"
                                                                       "i453"
                                                                       "i451"
                                                                       "i449"
                                                                       "i447"
                                                                       "i445"
                                                                       "i443"
                                                                       "i441"
                                                                       "i439"
                                                                       "i437"
                                                                       "i435"
                                                                       "i433"
                                                                       "i431"
                                                                       "i429"
                                                                       "i427"
                                                                       "i425"
                                                                       "i423"
                                                                       "i421"
                                                                       "i420"
                                                                       "i419"
                                                                       "i417"
                                                                       "i416"
                                                                       "i415"
                                                                       "i414"
                                                                       "i413"
                                                                       "i411"
                                                                       "i409"
                                                                       "i407"
                                                                       "i405"
                                                                       "i403"
                                                                       "i401"
                                                                       "i399"
                                                                       "i397"
                                                                       "i394"
                                                                       "i392"
                                                                       "i391"
                                                                       "i390"
                                                                       "i389"
                                                                       "i388"
                                                                       "i387"
                                                                       "i386"
                                                                       "i385"
                                                                       "i384"
                                                                       "i382"
                                                                       "i381"
                                                                       "i379"
                                                                       "i377"
                                                                       "i375"
                                                                       "i373"
                                                                       "i371"
                                                                       "i369"
                                                                       "i367"
                                                                       "i366"
                                                                       "i365"
                                                                       "i364"
                                                                       "i363"
                                                                       "i362"
                                                                       "i360"
                                                                       "i359"
                                                                       "i357"
                                                                       "i355"
                                                                       "i353"
                                                                       "i351"
                                                                       "i349"
                                                                       "i347"
                                                                       "i345"
                                                                       "i343"
                                                                       "i341"
                                                                       "i339"
                                                                       "i337"
                                                                       "i335"
                                                                       "i333"
                                                                       "i331"
                                                                       "i329"
                                                                       "i327"
                                                                       "i325"
                                                                       "i323"
                                                                       "i321"
                                                                       "i319"
                                                                       "i317"
                                                                       "i315"
                                                                       "i313"
                                                                       "i311"
                                                                       "i309"
                                                                       "i307"
                                                                       "i305"
                                                                       "i303"
                                                                       "i301"
                                                                       "i299"
                                                                       "i297"
                                                                       "i295"
                                                                       "i294"
                                                                       "i292"
                                                                       "i290"
                                                                       "i288"
                                                                       "i286"
                                                                       "i284"
                                                                       "i282"
                                                                       "i280"
                                                                       "i278"
                                                                       "i276"
                                                                       "i273"
                                                                       "i271"
                                                                       "i269"
                                                                       "i267"
                                                                       "i265"
                                                                       "i263"
                                                                       "i261"
                                                                       "i259"
                                                                       "i257"
                                                                       "i255"
                                                                       "i253"
                                                                       "i251"
                                                                       "i249"
                                                                       "i247"
                                                                       "i245"
                                                                       "i243"
                                                                       "i241"
                                                                       "i239"))
                                                                    #(ribcage
                                                                      (define-structure
                                                                        define-expansion-accessors
                                                                        define-expansion-constructors
                                                                        and-map*)
                                                                      ((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                      ("i41"
                                                                       "i40"
                                                                       "i39"
                                                                       "i37")))
                                                                   (hygiene
                                                                     guile))
                                                                 #(syntax-object
                                                                   #f
                                                                   ((top)
                                                                    #(ribcage
                                                                      #(name)
                                                                      #((top))
                                                                      #("i1841"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(ftype
                                                                        fval
                                                                        fe
                                                                        fw
                                                                        fs
                                                                        fmod)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("i1781"
                                                                        "i1782"
                                                                        "i1783"
                                                                        "i1784"
                                                                        "i1785"
                                                                        "i1786"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(first)
                                                                      #((top))
                                                                      #("i1773"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(e
                                                                        r
                                                                        w
                                                                        s
                                                                        rib
                                                                        mod
                                                                        for-car?)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("i1745"
                                                                        "i1746"
                                                                        "i1747"
                                                                        "i1748"
                                                                        "i1749"
                                                                        "i1750"
                                                                        "i1751"))
                                                                    #(ribcage
                                                                      (lambda-var-list
                                                                        gen-var
                                                                        strip
                                                                        chi-lambda-case
                                                                        lambda*-formals
                                                                        chi-simple-lambda
                                                                        lambda-formals
                                                                        ellipsis?
                                                                        chi-void
                                                                        eval-local-transformer
                                                                        chi-local-syntax
                                                                        chi-body
                                                                        chi-macro
                                                                        chi-application
                                                                        chi-expr
                                                                        chi
                                                                        syntax-type
                                                                        chi-when-list
                                                                        chi-install-global
                                                                        chi-top-sequence
                                                                        chi-sequence
                                                                        source-wrap
                                                                        wrap
                                                                        bound-id-member?
                                                                        distinct-bound-ids?
                                                                        valid-bound-ids?
                                                                        bound-id=?
                                                                        free-id=?
                                                                        id-var-name
                                                                        same-marks?
                                                                        join-marks
                                                                        join-wraps
                                                                        smart-append
                                                                        make-binding-wrap
                                                                        extend-ribcage!
                                                                        make-empty-ribcage
                                                                        new-mark
                                                                        anti-mark
                                                                        the-anti-mark
                                                                        top-marked?
                                                                        top-wrap
                                                                        empty-wrap
                                                                        set-ribcage-labels!
                                                                        set-ribcage-marks!
                                                                        set-ribcage-symnames!
                                                                        ribcage-labels
                                                                        ribcage-marks
                                                                        ribcage-symnames
                                                                        ribcage?
                                                                        make-ribcage
                                                                        gen-labels
                                                                        gen-label
                                                                        make-rename
                                                                        rename-marks
                                                                        rename-new
                                                                        rename-old
                                                                        subst-rename?
                                                                        wrap-subst
                                                                        wrap-marks
                                                                        make-wrap
                                                                        id-sym-name&marks
                                                                        id-sym-name
                                                                        id?
                                                                        nonsymbol-id?
                                                                        global-extend
                                                                        lookup
                                                                        macros-only-env
                                                                        extend-var-env
                                                                        extend-env
                                                                        null-env
                                                                        binding-value
                                                                        binding-type
                                                                        make-binding
                                                                        arg-check
                                                                        source-annotation
                                                                        no-source
                                                                        set-syntax-object-module!
                                                                        set-syntax-object-wrap!
                                                                        set-syntax-object-expression!
                                                                        syntax-object-module
                                                                        syntax-object-wrap
                                                                        syntax-object-expression
                                                                        syntax-object?
                                                                        make-syntax-object
                                                                        build-lexical-var
                                                                        build-letrec
                                                                        build-named-let
                                                                        build-let
                                                                        build-sequence
                                                                        build-data
                                                                        build-primref
                                                                        build-lambda-case
                                                                        build-case-lambda
                                                                        build-simple-lambda
                                                                        build-global-definition
                                                                        build-global-assignment
                                                                        build-global-reference
                                                                        analyze-variable
                                                                        build-lexical-assignment
                                                                        build-lexical-reference
                                                                        build-dynlet
                                                                        build-conditional
                                                                        build-application
                                                                        build-void
                                                                        maybe-name-value!
                                                                        decorate-source
                                                                        get-global-definition-hook
                                                                        put-global-definition-hook
                                                                        gensym-hook
                                                                        local-eval-hook
                                                                        top-level-eval-hook
                                                                        fx<
                                                                        fx=
                                                                        fx-
                                                                        fx+
                                                                        set-lambda-meta!
                                                                        lambda-meta
                                                                        lambda?
                                                                        make-dynlet
                                                                        make-letrec
                                                                        make-let
                                                                        make-lambda-case
                                                                        make-lambda
                                                                        make-sequence
                                                                        make-application
                                                                        make-conditional
                                                                        make-toplevel-define
                                                                        make-toplevel-set
                                                                        make-toplevel-ref
                                                                        make-module-set
                                                                        make-module-ref
                                                                        make-lexical-set
                                                                        make-lexical-ref
                                                                        make-primitive-ref
                                                                        make-const
                                                                        make-void)
                                                                      ((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                      ("i489"
                                                                       "i487"
                                                                       "i485"
                                                                       "i483"
                                                                       "i481"
                                                                       "i479"
                                                                       "i477"
                                                                       "i475"
                                                                       "i473"
                                                                       "i471"
                                                                       "i469"
                                                                       "i467"
                                                                       "i465"
                                                                       "i463"
                                                                       "i461"
                                                                       "i459"
                                                                       "i457"
                                                                       "i455"
                                                                       "i453"
                                                                       "i451"
                                                                       "i449"
                                                                       "i447"
                                                                       "i445"
                                                                       "i443"
                                                                       "i441"
                                                                       "i439"
                                                                       "i437"
                                                                       "i435"
                                                                       "i433"
                                                                       "i431"
                                                                       "i429"
                                                                       "i427"
                                                                       "i425"
                                                                       "i423"
                                                                       "i421"
                                                                       "i420"
                                                                       "i419"
                                                                       "i417"
                                                                       "i416"
                                                                       "i415"
                                                                       "i414"
                                                                       "i413"
                                                                       "i411"
                                                                       "i409"
                                                                       "i407"
                                                                       "i405"
                                                                       "i403"
                                                                       "i401"
                                                                       "i399"
                                                                       "i397"
                                                                       "i394"
                                                                       "i392"
                                                                       "i391"
                                                                       "i390"
                                                                       "i389"
                                                                       "i388"
                                                                       "i387"
                                                                       "i386"
                                                                       "i385"
                                                                       "i384"
                                                                       "i382"
                                                                       "i381"
                                                                       "i379"
                                                                       "i377"
                                                                       "i375"
                                                                       "i373"
                                                                       "i371"
                                                                       "i369"
                                                                       "i367"
                                                                       "i366"
                                                                       "i365"
                                                                       "i364"
                                                                       "i363"
                                                                       "i362"
                                                                       "i360"
                                                                       "i359"
                                                                       "i357"
                                                                       "i355"
                                                                       "i353"
                                                                       "i351"
                                                                       "i349"
                                                                       "i347"
                                                                       "i345"
                                                                       "i343"
                                                                       "i341"
                                                                       "i339"
                                                                       "i337"
                                                                       "i335"
                                                                       "i333"
                                                                       "i331"
                                                                       "i329"
                                                                       "i327"
                                                                       "i325"
                                                                       "i323"
                                                                       "i321"
                                                                       "i319"
                                                                       "i317"
                                                                       "i315"
                                                                       "i313"
                                                                       "i311"
                                                                       "i309"
                                                                       "i307"
                                                                       "i305"
                                                                       "i303"
                                                                       "i301"
                                                                       "i299"
                                                                       "i297"
                                                                       "i295"
                                                                       "i294"
                                                                       "i292"
                                                                       "i290"
                                                                       "i288"
                                                                       "i286"
                                                                       "i284"
                                                                       "i282"
                                                                       "i280"
                                                                       "i278"
                                                                       "i276"
                                                                       "i273"
                                                                       "i271"
                                                                       "i269"
                                                                       "i267"
                                                                       "i265"
                                                                       "i263"
                                                                       "i261"
                                                                       "i259"
                                                                       "i257"
                                                                       "i255"
                                                                       "i253"
                                                                       "i251"
                                                                       "i249"
                                                                       "i247"
                                                                       "i245"
                                                                       "i243"
                                                                       "i241"
                                                                       "i239"))
                                                                    #(ribcage
                                                                      (define-structure
                                                                        define-expansion-accessors
                                                                        define-expansion-constructors
                                                                        and-map*)
                                                                      ((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                      ("i41"
                                                                       "i40"
                                                                       "i39"
                                                                       "i37")))
                                                                   (hygiene
                                                                     guile))
                                                                 #(syntax-object
                                                                   #f
                                                                   ((top)
                                                                    #(ribcage
                                                                      #(name)
                                                                      #((top))
                                                                      #("i1841"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(ftype
                                                                        fval
                                                                        fe
                                                                        fw
                                                                        fs
                                                                        fmod)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("i1781"
                                                                        "i1782"
                                                                        "i1783"
                                                                        "i1784"
                                                                        "i1785"
                                                                        "i1786"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(first)
                                                                      #((top))
                                                                      #("i1773"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(e
                                                                        r
                                                                        w
                                                                        s
                                                                        rib
                                                                        mod
                                                                        for-car?)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("i1745"
                                                                        "i1746"
                                                                        "i1747"
                                                                        "i1748"
                                                                        "i1749"
                                                                        "i1750"
                                                                        "i1751"))
                                                                    #(ribcage
                                                                      (lambda-var-list
                                                                        gen-var
                                                                        strip
                                                                        chi-lambda-case
                                                                        lambda*-formals
                                                                        chi-simple-lambda
                                                                        lambda-formals
                                                                        ellipsis?
                                                                        chi-void
                                                                        eval-local-transformer
                                                                        chi-local-syntax
                                                                        chi-body
                                                                        chi-macro
                                                                        chi-application
                                                                        chi-expr
                                                                        chi
                                                                        syntax-type
                                                                        chi-when-list
                                                                        chi-install-global
                                                                        chi-top-sequence
                                                                        chi-sequence
                                                                        source-wrap
                                                                        wrap
                                                                        bound-id-member?
                                                                        distinct-bound-ids?
                                                                        valid-bound-ids?
                                                                        bound-id=?
                                                                        free-id=?
                                                                        id-var-name
                                                                        same-marks?
                                                                        join-marks
                                                                        join-wraps
                                                                        smart-append
                                                                        make-binding-wrap
                                                                        extend-ribcage!
                                                                        make-empty-ribcage
                                                                        new-mark
                                                                        anti-mark
                                                                        the-anti-mark
                                                                        top-marked?
                                                                        top-wrap
                                                                        empty-wrap
                                                                        set-ribcage-labels!
                                                                        set-ribcage-marks!
                                                                        set-ribcage-symnames!
                                                                        ribcage-labels
                                                                        ribcage-marks
                                                                        ribcage-symnames
                                                                        ribcage?
                                                                        make-ribcage
                                                                        gen-labels
                                                                        gen-label
                                                                        make-rename
                                                                        rename-marks
                                                                        rename-new
                                                                        rename-old
                                                                        subst-rename?
                                                                        wrap-subst
                                                                        wrap-marks
                                                                        make-wrap
                                                                        id-sym-name&marks
                                                                        id-sym-name
                                                                        id?
                                                                        nonsymbol-id?
                                                                        global-extend
                                                                        lookup
                                                                        macros-only-env
                                                                        extend-var-env
                                                                        extend-env
                                                                        null-env
                                                                        binding-value
                                                                        binding-type
                                                                        make-binding
                                                                        arg-check
                                                                        source-annotation
                                                                        no-source
                                                                        set-syntax-object-module!
                                                                        set-syntax-object-wrap!
                                                                        set-syntax-object-expression!
                                                                        syntax-object-module
                                                                        syntax-object-wrap
                                                                        syntax-object-expression
                                                                        syntax-object?
                                                                        make-syntax-object
                                                                        build-lexical-var
                                                                        build-letrec
                                                                        build-named-let
                                                                        build-let
                                                                        build-sequence
                                                                        build-data
                                                                        build-primref
                                                                        build-lambda-case
                                                                        build-case-lambda
                                                                        build-simple-lambda
                                                                        build-global-definition
                                                                        build-global-assignment
                                                                        build-global-reference
                                                                        analyze-variable
                                                                        build-lexical-assignment
                                                                        build-lexical-reference
                                                                        build-dynlet
                                                                        build-conditional
                                                                        build-application
                                                                        build-void
                                                                        maybe-name-value!
                                                                        decorate-source
                                                                        get-global-definition-hook
                                                                        put-global-definition-hook
                                                                        gensym-hook
                                                                        local-eval-hook
                                                                        top-level-eval-hook
                                                                        fx<
                                                                        fx=
                                                                        fx-
                                                                        fx+
                                                                        set-lambda-meta!
                                                                        lambda-meta
                                                                        lambda?
                                                                        make-dynlet
                                                                        make-letrec
                                                                        make-let
                                                                        make-lambda-case
                                                                        make-lambda
                                                                        make-sequence
                                                                        make-application
                                                                        make-conditional
                                                                        make-toplevel-define
                                                                        make-toplevel-set
                                                                        make-toplevel-ref
                                                                        make-module-set
                                                                        make-module-ref
                                                                        make-lexical-set
                                                                        make-lexical-ref
                                                                        make-primitive-ref
                                                                        make-const
                                                                        make-void)
                                                                      ((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                      ("i489"
                                                                       "i487"
                                                                       "i485"
                                                                       "i483"
                                                                       "i481"
                                                                       "i479"
                                                                       "i477"
                                                                       "i475"
                                                                       "i473"
                                                                       "i471"
                                                                       "i469"
                                                                       "i467"
                                                                       "i465"
                                                                       "i463"
                                                                       "i461"
                                                                       "i459"
                                                                       "i457"
                                                                       "i455"
                                                                       "i453"
                                                                       "i451"
                                                                       "i449"
                                                                       "i447"
                                                                       "i445"
                                                                       "i443"
                                                                       "i441"
                                                                       "i439"
                                                                       "i437"
                                                                       "i435"
                                                                       "i433"
                                                                       "i431"
                                                                       "i429"
                                                                       "i427"
                                                                       "i425"
                                                                       "i423"
                                                                       "i421"
                                                                       "i420"
                                                                       "i419"
                                                                       "i417"
                                                                       "i416"
                                                                       "i415"
                                                                       "i414"
                                                                       "i413"
                                                                       "i411"
                                                                       "i409"
                                                                       "i407"
                                                                       "i405"
                                                                       "i403"
                                                                       "i401"
                                                                       "i399"
                                                                       "i397"
                                                                       "i394"
                                                                       "i392"
                                                                       "i391"
                                                                       "i390"
                                                                       "i389"
                                                                       "i388"
                                                                       "i387"
                                                                       "i386"
                                                                       "i385"
                                                                       "i384"
                                                                       "i382"
                                                                       "i381"
                                                                       "i379"
                                                                       "i377"
                                                                       "i375"
                                                                       "i373"
                                                                       "i371"
                                                                       "i369"
                                                                       "i367"
                                                                       "i366"
                                                                       "i365"
                                                                       "i364"
                                                                       "i363"
                                                                       "i362"
                                                                       "i360"
                                                                       "i359"
                                                                       "i357"
                                                                       "i355"
                                                                       "i353"
                                                                       "i351"
                                                                       "i349"
                                                                       "i347"
                                                                       "i345"
                                                                       "i343"
                                                                       "i341"
                                                                       "i339"
                                                                       "i337"
                                                                       "i335"
                                                                       "i333"
                                                                       "i331"
                                                                       "i329"
                                                                       "i327"
                                                                       "i325"
                                                                       "i323"
                                                                       "i321"
                                                                       "i319"
                                                                       "i317"
                                                                       "i315"
                                                                       "i313"
                                                                       "i311"
                                                                       "i309"
                                                                       "i307"
                                                                       "i305"
                                                                       "i303"
                                                                       "i301"
                                                                       "i299"
                                                                       "i297"
                                                                       "i295"
                                                                       "i294"
                                                                       "i292"
                                                                       "i290"
                                                                       "i288"
                                                                       "i286"
                                                                       "i284"
                                                                       "i282"
                                                                       "i280"
                                                                       "i278"
                                                                       "i276"
                                                                       "i273"
                                                                       "i271"
                                                                       "i269"
                                                                       "i267"
                                                                       "i265"
                                                                       "i263"
                                                                       "i261"
                                                                       "i259"
                                                                       "i257"
                                                                       "i255"
                                                                       "i253"
                                                                       "i251"
                                                                       "i249"
                                                                       "i247"
                                                                       "i245"
                                                                       "i243"
                                                                       "i241"
                                                                       "i239"))
                                                                    #(ribcage
                                                                      (define-structure
                                                                        define-expansion-accessors
                                                                        define-expansion-constructors
                                                                        and-map*)
                                                                      ((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                      ("i41"
                                                                       "i40"
                                                                       "i39"
                                                                       "i37")))
                                                                   (hygiene
                                                                     guile)))
                                                               '(())
                                                               #{s\ 1741}#
                                                               #{mod\ 1743}#))
                                                           #{tmp\ 1838}#)
                                                         (syntax-violation
                                                           #f
                                                           "source expression failed to match any pattern"
                                                           #{tmp\ 1807}#))))))))
                                           (if (eqv? #{ftype\ 1775}#
                                                     'define-syntax)
                                             (let ((#{tmp\ 1845}# #{e\ 1738}#))
                                               (let ((#{tmp\ 1846}#
                                                       ($sc-dispatch
                                                         #{tmp\ 1845}#
                                                         '(_ any any))))
                                                 (if (if #{tmp\ 1846}#
                                                       (@apply
                                                         (lambda (#{name\ 1849}#
                                                                  #{val\ 1850}#)
                                                           (#{id?\ 380}#
                                                             #{name\ 1849}#))
                                                         #{tmp\ 1846}#)
                                                       #f)
                                                   (@apply
                                                     (lambda (#{name\ 1853}#
                                                              #{val\ 1854}#)
                                                       (values
                                                         'define-syntax-form
                                                         #{name\ 1853}#
                                                         #{val\ 1854}#
                                                         #{w\ 1740}#
                                                         #{s\ 1741}#
                                                         #{mod\ 1743}#))
                                                     #{tmp\ 1846}#)
                                                   (syntax-violation
                                                     #f
                                                     "source expression failed to match any pattern"
                                                     #{tmp\ 1845}#))))
                                             (values
                                               'call
                                               #f
                                               #{e\ 1738}#
                                               #{w\ 1740}#
                                               #{s\ 1741}#
                                               #{mod\ 1743}#)))))))))))))))
                 (if (#{syntax-object?\ 346}# #{e\ 1738}#)
                   (#{syntax-type\ 458}#
                     (#{syntax-object-expression\ 348}# #{e\ 1738}#)
                     #{r\ 1739}#
                     (#{join-wraps\ 428}#
                       #{w\ 1740}#
                       (#{syntax-object-wrap\ 350}# #{e\ 1738}#))
                     (begin
                       (let ((#{t\ 1860}#
                               (#{source-annotation\ 361}# #{e\ 1738}#)))
                         (if #{t\ 1860}# #{t\ 1860}# #{s\ 1741}#)))
                     #{rib\ 1742}#
                     (begin
                       (let ((#{t\ 1864}#
                               (#{syntax-object-module\ 352}# #{e\ 1738}#)))
                         (if #{t\ 1864}# #{t\ 1864}# #{mod\ 1743}#)))
                     #{for-car?\ 1744}#)
                   (if (self-evaluating? #{e\ 1738}#)
                     (values
                       'constant
                       #f
                       #{e\ 1738}#
                       #{w\ 1740}#
                       #{s\ 1741}#
                       #{mod\ 1743}#)
                     (values
                       'other
                       #f
                       #{e\ 1738}#
                       #{w\ 1740}#
                       #{s\ 1741}#
                       #{mod\ 1743}#)))))))
         (#{chi\ 460}#
           (lambda (#{e\ 1869}#
                    #{r\ 1870}#
                    #{w\ 1871}#
                    #{mod\ 1872}#)
             (call-with-values
               (lambda ()
                 (#{syntax-type\ 458}#
                   #{e\ 1869}#
                   #{r\ 1870}#
                   #{w\ 1871}#
                   (#{source-annotation\ 361}# #{e\ 1869}#)
                   #f
                   #{mod\ 1872}#
                   #f))
               (lambda (#{type\ 1877}#
                        #{value\ 1878}#
                        #{e\ 1879}#
                        #{w\ 1880}#
                        #{s\ 1881}#
                        #{mod\ 1882}#)
                 (#{chi-expr\ 462}#
                   #{type\ 1877}#
                   #{value\ 1878}#
                   #{e\ 1879}#
                   #{r\ 1870}#
                   #{w\ 1880}#
                   #{s\ 1881}#
                   #{mod\ 1882}#)))))
         (#{chi-expr\ 462}#
           (lambda (#{type\ 1889}#
                    #{value\ 1890}#
                    #{e\ 1891}#
                    #{r\ 1892}#
                    #{w\ 1893}#
                    #{s\ 1894}#
                    #{mod\ 1895}#)
             (if (eqv? #{type\ 1889}# 'lexical)
               (#{build-lexical-reference\ 312}#
                 'value
                 #{s\ 1894}#
                 #{e\ 1891}#
                 #{value\ 1890}#)
               (if (if (eqv? #{type\ 1889}# 'core)
                     #t
                     (eqv? #{type\ 1889}# 'core-form))
                 (#{value\ 1890}#
                   #{e\ 1891}#
                   #{r\ 1892}#
                   #{w\ 1893}#
                   #{s\ 1894}#
                   #{mod\ 1895}#)
                 (if (eqv? #{type\ 1889}# 'module-ref)
                   (call-with-values
                     (lambda ()
                       (#{value\ 1890}#
                         #{e\ 1891}#
                         #{r\ 1892}#
                         #{w\ 1893}#))
                     (lambda (#{e\ 1906}#
                              #{r\ 1907}#
                              #{w\ 1908}#
                              #{s\ 1909}#
                              #{mod\ 1910}#)
                       (#{chi\ 460}#
                         #{e\ 1906}#
                         #{r\ 1907}#
                         #{w\ 1908}#
                         #{mod\ 1910}#)))
                   (if (eqv? #{type\ 1889}# 'lexical-call)
                     (#{chi-application\ 464}#
                       (begin
                         (let ((#{id\ 1918}# (car #{e\ 1891}#)))
                           (#{build-lexical-reference\ 312}#
                             'fun
                             (#{source-annotation\ 361}# #{id\ 1918}#)
                             (if (#{syntax-object?\ 346}# #{id\ 1918}#)
                               (syntax->datum #{id\ 1918}#)
                               #{id\ 1918}#)
                             #{value\ 1890}#)))
                       #{e\ 1891}#
                       #{r\ 1892}#
                       #{w\ 1893}#
                       #{s\ 1894}#
                       #{mod\ 1895}#)
                     (if (eqv? #{type\ 1889}# 'global-call)
                       (#{chi-application\ 464}#
                         (#{build-global-reference\ 318}#
                           (#{source-annotation\ 361}# (car #{e\ 1891}#))
                           (if (#{syntax-object?\ 346}# #{value\ 1890}#)
                             (#{syntax-object-expression\ 348}#
                               #{value\ 1890}#)
                             #{value\ 1890}#)
                           (if (#{syntax-object?\ 346}# #{value\ 1890}#)
                             (#{syntax-object-module\ 352}# #{value\ 1890}#)
                             #{mod\ 1895}#))
                         #{e\ 1891}#
                         #{r\ 1892}#
                         #{w\ 1893}#
                         #{s\ 1894}#
                         #{mod\ 1895}#)
                       (if (eqv? #{type\ 1889}# 'constant)
                         (#{build-data\ 332}#
                           #{s\ 1894}#
                           (#{strip\ 486}#
                             (#{source-wrap\ 448}#
                               #{e\ 1891}#
                               #{w\ 1893}#
                               #{s\ 1894}#
                               #{mod\ 1895}#)
                             '(())))
                         (if (eqv? #{type\ 1889}# 'global)
                           (#{build-global-reference\ 318}#
                             #{s\ 1894}#
                             #{value\ 1890}#
                             #{mod\ 1895}#)
                           (if (eqv? #{type\ 1889}# 'call)
                             (#{chi-application\ 464}#
                               (#{chi\ 460}#
                                 (car #{e\ 1891}#)
                                 #{r\ 1892}#
                                 #{w\ 1893}#
                                 #{mod\ 1895}#)
                               #{e\ 1891}#
                               #{r\ 1892}#
                               #{w\ 1893}#
                               #{s\ 1894}#
                               #{mod\ 1895}#)
                             (if (eqv? #{type\ 1889}# 'begin-form)
                               (let ((#{tmp\ 1925}# #{e\ 1891}#))
                                 (let ((#{tmp\ 1926}#
                                         ($sc-dispatch
                                           #{tmp\ 1925}#
                                           '(_ any . each-any))))
                                   (if #{tmp\ 1926}#
                                     (@apply
                                       (lambda (#{e1\ 1929}# #{e2\ 1930}#)
                                         (#{chi-sequence\ 450}#
                                           (cons #{e1\ 1929}# #{e2\ 1930}#)
                                           #{r\ 1892}#
                                           #{w\ 1893}#
                                           #{s\ 1894}#
                                           #{mod\ 1895}#))
                                       #{tmp\ 1926}#)
                                     (syntax-violation
                                       #f
                                       "source expression failed to match any pattern"
                                       #{tmp\ 1925}#))))
                               (if (eqv? #{type\ 1889}# 'local-syntax-form)
                                 (#{chi-local-syntax\ 470}#
                                   #{value\ 1890}#
                                   #{e\ 1891}#
                                   #{r\ 1892}#
                                   #{w\ 1893}#
                                   #{s\ 1894}#
                                   #{mod\ 1895}#
                                   #{chi-sequence\ 450}#)
                                 (if (eqv? #{type\ 1889}# 'eval-when-form)
                                   (let ((#{tmp\ 1934}# #{e\ 1891}#))
                                     (let ((#{tmp\ 1935}#
                                             ($sc-dispatch
                                               #{tmp\ 1934}#
                                               '(_ each-any any . each-any))))
                                       (if #{tmp\ 1935}#
                                         (@apply
                                           (lambda (#{x\ 1939}#
                                                    #{e1\ 1940}#
                                                    #{e2\ 1941}#)
                                             (begin
                                               (let ((#{when-list\ 1943}#
                                                       (#{chi-when-list\ 456}#
                                                         #{e\ 1891}#
                                                         #{x\ 1939}#
                                                         #{w\ 1893}#)))
                                                 (if (memq 'eval
                                                           #{when-list\ 1943}#)
                                                   (#{chi-sequence\ 450}#
                                                     (cons #{e1\ 1940}#
                                                           #{e2\ 1941}#)
                                                     #{r\ 1892}#
                                                     #{w\ 1893}#
                                                     #{s\ 1894}#
                                                     #{mod\ 1895}#)
                                                   (#{chi-void\ 474}#)))))
                                           #{tmp\ 1935}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp\ 1934}#))))
                                   (if (if (eqv? #{type\ 1889}# 'define-form)
                                         #t
                                         (eqv? #{type\ 1889}#
                                               'define-syntax-form))
                                     (syntax-violation
                                       #f
                                       "definition in expression context"
                                       #{e\ 1891}#
                                       (#{wrap\ 446}#
                                         #{value\ 1890}#
                                         #{w\ 1893}#
                                         #{mod\ 1895}#))
                                     (if (eqv? #{type\ 1889}# 'syntax)
                                       (syntax-violation
                                         #f
                                         "reference to pattern variable outside syntax form"
                                         (#{source-wrap\ 448}#
                                           #{e\ 1891}#
                                           #{w\ 1893}#
                                           #{s\ 1894}#
                                           #{mod\ 1895}#))
                                       (if (eqv? #{type\ 1889}#
                                                 'displaced-lexical)
                                         (syntax-violation
                                           #f
                                           "reference to identifier outside its scope"
                                           (#{source-wrap\ 448}#
                                             #{e\ 1891}#
                                             #{w\ 1893}#
                                             #{s\ 1894}#
                                             #{mod\ 1895}#))
                                         (syntax-violation
                                           #f
                                           "unexpected syntax"
                                           (#{source-wrap\ 448}#
                                             #{e\ 1891}#
                                             #{w\ 1893}#
                                             #{s\ 1894}#
                                             #{mod\ 1895}#))))))))))))))))))
         (#{chi-application\ 464}#
           (lambda (#{x\ 1950}#
                    #{e\ 1951}#
                    #{r\ 1952}#
                    #{w\ 1953}#
                    #{s\ 1954}#
                    #{mod\ 1955}#)
             (let ((#{tmp\ 1962}# #{e\ 1951}#))
               (let ((#{tmp\ 1963}#
                       ($sc-dispatch #{tmp\ 1962}# '(any . each-any))))
                 (if #{tmp\ 1963}#
                   (@apply
                     (lambda (#{e0\ 1966}# #{e1\ 1967}#)
                       (#{build-application\ 306}#
                         #{s\ 1954}#
                         #{x\ 1950}#
                         (map (lambda (#{e\ 1968}#)
                                (#{chi\ 460}#
                                  #{e\ 1968}#
                                  #{r\ 1952}#
                                  #{w\ 1953}#
                                  #{mod\ 1955}#))
                              #{e1\ 1967}#)))
                     #{tmp\ 1963}#)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     #{tmp\ 1962}#))))))
         (#{chi-macro\ 466}#
           (lambda (#{p\ 1971}#
                    #{e\ 1972}#
                    #{r\ 1973}#
                    #{w\ 1974}#
                    #{s\ 1975}#
                    #{rib\ 1976}#
                    #{mod\ 1977}#)
             (letrec*
               ((#{rebuild-macro-output\ 1986}#
                  (lambda (#{x\ 1987}# #{m\ 1988}#)
                    (if (pair? #{x\ 1987}#)
                      (#{decorate-source\ 300}#
                        (cons (#{rebuild-macro-output\ 1986}#
                                (car #{x\ 1987}#)
                                #{m\ 1988}#)
                              (#{rebuild-macro-output\ 1986}#
                                (cdr #{x\ 1987}#)
                                #{m\ 1988}#))
                        #{s\ 1975}#)
                      (if (#{syntax-object?\ 346}# #{x\ 1987}#)
                        (begin
                          (let ((#{w\ 1996}#
                                  (#{syntax-object-wrap\ 350}# #{x\ 1987}#)))
                            (begin
                              (let ((#{ms\ 1999}# (car #{w\ 1996}#))
                                    (#{s\ 2000}# (cdr #{w\ 1996}#)))
                                (if (if (pair? #{ms\ 1999}#)
                                      (eq? (car #{ms\ 1999}#) #f)
                                      #f)
                                  (#{make-syntax-object\ 344}#
                                    (#{syntax-object-expression\ 348}#
                                      #{x\ 1987}#)
                                    (cons (cdr #{ms\ 1999}#)
                                          (if #{rib\ 1976}#
                                            (cons #{rib\ 1976}#
                                                  (cdr #{s\ 2000}#))
                                            (cdr #{s\ 2000}#)))
                                    (#{syntax-object-module\ 352}#
                                      #{x\ 1987}#))
                                  (#{make-syntax-object\ 344}#
                                    (#{decorate-source\ 300}#
                                      (#{syntax-object-expression\ 348}#
                                        #{x\ 1987}#)
                                      #{s\ 2000}#)
                                    (cons (cons #{m\ 1988}# #{ms\ 1999}#)
                                          (if #{rib\ 1976}#
                                            (cons #{rib\ 1976}#
                                                  (cons 'shift #{s\ 2000}#))
                                            (cons 'shift #{s\ 2000}#)))
                                    (#{syntax-object-module\ 352}#
                                      #{x\ 1987}#)))))))
                        (if (vector? #{x\ 1987}#)
                          (begin
                            (let ((#{n\ 2012}# (vector-length #{x\ 1987}#)))
                              (begin
                                (let ((#{v\ 2014}#
                                        (#{decorate-source\ 300}#
                                          (make-vector #{n\ 2012}#)
                                          #{x\ 1987}#)))
                                  (letrec*
                                    ((#{loop\ 2017}#
                                       (lambda (#{i\ 2018}#)
                                         (if (#{fx=\ 287}#
                                               #{i\ 2018}#
                                               #{n\ 2012}#)
                                           (begin (if #f #f) #{v\ 2014}#)
                                           (begin
                                             (vector-set!
                                               #{v\ 2014}#
                                               #{i\ 2018}#
                                               (#{rebuild-macro-output\ 1986}#
                                                 (vector-ref
                                                   #{x\ 1987}#
                                                   #{i\ 2018}#)
                                                 #{m\ 1988}#))
                                             (#{loop\ 2017}#
                                               (#{fx+\ 283}#
                                                 #{i\ 2018}#
                                                 1)))))))
                                    (begin (#{loop\ 2017}# 0)))))))
                          (if (symbol? #{x\ 1987}#)
                            (syntax-violation
                              #f
                              "encountered raw symbol in macro output"
                              (#{source-wrap\ 448}#
                                #{e\ 1972}#
                                #{w\ 1974}#
                                (cdr #{w\ 1974}#)
                                #{mod\ 1977}#)
                              #{x\ 1987}#)
                            (#{decorate-source\ 300}#
                              #{x\ 1987}#
                              #{s\ 1975}#))))))))
               (begin
                 (#{rebuild-macro-output\ 1986}#
                   (#{p\ 1971}#
                     (#{source-wrap\ 448}#
                       #{e\ 1972}#
                       (#{anti-mark\ 418}# #{w\ 1974}#)
                       #{s\ 1975}#
                       #{mod\ 1977}#))
                   (gensym "m"))))))
         (#{chi-body\ 468}#
           (lambda (#{body\ 2026}#
                    #{outer-form\ 2027}#
                    #{r\ 2028}#
                    #{w\ 2029}#
                    #{mod\ 2030}#)
             (begin
               (let ((#{r\ 2038}#
                       (cons '("placeholder" placeholder) #{r\ 2028}#)))
                 (begin
                   (let ((#{ribcage\ 2040}#
                           (#{make-ribcage\ 398}# '() '() '())))
                     (begin
                       (let ((#{w\ 2043}#
                               (cons (car #{w\ 2029}#)
                                     (cons #{ribcage\ 2040}#
                                           (cdr #{w\ 2029}#)))))
                         (letrec*
                           ((#{parse\ 2055}#
                              (lambda (#{body\ 2056}#
                                       #{ids\ 2057}#
                                       #{labels\ 2058}#
                                       #{var-ids\ 2059}#
                                       #{vars\ 2060}#
                                       #{vals\ 2061}#
                                       #{bindings\ 2062}#)
                                (if (null? #{body\ 2056}#)
                                  (syntax-violation
                                    #f
                                    "no expressions in body"
                                    #{outer-form\ 2027}#)
                                  (begin
                                    (let ((#{e\ 2067}#
                                            (cdr (car #{body\ 2056}#)))
                                          (#{er\ 2068}#
                                            (car (car #{body\ 2056}#))))
                                      (call-with-values
                                        (lambda ()
                                          (#{syntax-type\ 458}#
                                            #{e\ 2067}#
                                            #{er\ 2068}#
                                            '(())
                                            (#{source-annotation\ 361}#
                                              #{er\ 2068}#)
                                            #{ribcage\ 2040}#
                                            #{mod\ 2030}#
                                            #f))
                                        (lambda (#{type\ 2070}#
                                                 #{value\ 2071}#
                                                 #{e\ 2072}#
                                                 #{w\ 2073}#
                                                 #{s\ 2074}#
                                                 #{mod\ 2075}#)
                                          (if (eqv? #{type\ 2070}#
                                                    'define-form)
                                            (begin
                                              (let ((#{id\ 2085}#
                                                      (#{wrap\ 446}#
                                                        #{value\ 2071}#
                                                        #{w\ 2073}#
                                                        #{mod\ 2075}#))
                                                    (#{label\ 2086}#
                                                      (#{gen-label\ 393}#)))
                                                (begin
                                                  (let ((#{var\ 2088}#
                                                          (#{gen-var\ 488}#
                                                            #{id\ 2085}#)))
                                                    (begin
                                                      (#{extend-ribcage!\ 422}#
                                                        #{ribcage\ 2040}#
                                                        #{id\ 2085}#
                                                        #{label\ 2086}#)
                                                      (#{parse\ 2055}#
                                                        (cdr #{body\ 2056}#)
                                                        (cons #{id\ 2085}#
                                                              #{ids\ 2057}#)
                                                        (cons #{label\ 2086}#
                                                              #{labels\ 2058}#)
                                                        (cons #{id\ 2085}#
                                                              #{var-ids\ 2059}#)
                                                        (cons #{var\ 2088}#
                                                              #{vars\ 2060}#)
                                                        (cons (cons #{er\ 2068}#
                                                                    (#{wrap\ 446}#
                                                                      #{e\ 2072}#
                                                                      #{w\ 2073}#
                                                                      #{mod\ 2075}#))
                                                              #{vals\ 2061}#)
                                                        (cons (cons 'lexical
                                                                    #{var\ 2088}#)
                                                              #{bindings\ 2062}#)))))))
                                            (if (eqv? #{type\ 2070}#
                                                      'define-syntax-form)
                                              (begin
                                                (let ((#{id\ 2093}#
                                                        (#{wrap\ 446}#
                                                          #{value\ 2071}#
                                                          #{w\ 2073}#
                                                          #{mod\ 2075}#))
                                                      (#{label\ 2094}#
                                                        (#{gen-label\ 393}#)))
                                                  (begin
                                                    (#{extend-ribcage!\ 422}#
                                                      #{ribcage\ 2040}#
                                                      #{id\ 2093}#
                                                      #{label\ 2094}#)
                                                    (#{parse\ 2055}#
                                                      (cdr #{body\ 2056}#)
                                                      (cons #{id\ 2093}#
                                                            #{ids\ 2057}#)
                                                      (cons #{label\ 2094}#
                                                            #{labels\ 2058}#)
                                                      #{var-ids\ 2059}#
                                                      #{vars\ 2060}#
                                                      #{vals\ 2061}#
                                                      (cons (cons 'macro
                                                                  (cons #{er\ 2068}#
                                                                        (#{wrap\ 446}#
                                                                          #{e\ 2072}#
                                                                          #{w\ 2073}#
                                                                          #{mod\ 2075}#)))
                                                            #{bindings\ 2062}#)))))
                                              (if (eqv? #{type\ 2070}#
                                                        'begin-form)
                                                (let ((#{tmp\ 2097}#
                                                        #{e\ 2072}#))
                                                  (let ((#{tmp\ 2098}#
                                                          ($sc-dispatch
                                                            #{tmp\ 2097}#
                                                            '(_ . each-any))))
                                                    (if #{tmp\ 2098}#
                                                      (@apply
                                                        (lambda (#{e1\ 2100}#)
                                                          (#{parse\ 2055}#
                                                            (letrec*
                                                              ((#{f\ 2103}#
                                                                 (lambda (#{forms\ 2104}#)
                                                                   (if (null? #{forms\ 2104}#)
                                                                     (cdr #{body\ 2056}#)
                                                                     (cons (cons #{er\ 2068}#
                                                                                 (#{wrap\ 446}#
                                                                                   (car #{forms\ 2104}#)
                                                                                   #{w\ 2073}#
                                                                                   #{mod\ 2075}#))
                                                                           (#{f\ 2103}#
                                                                             (cdr #{forms\ 2104}#)))))))
                                                              (begin
                                                                (#{f\ 2103}#
                                                                  #{e1\ 2100}#)))
                                                            #{ids\ 2057}#
                                                            #{labels\ 2058}#
                                                            #{var-ids\ 2059}#
                                                            #{vars\ 2060}#
                                                            #{vals\ 2061}#
                                                            #{bindings\ 2062}#))
                                                        #{tmp\ 2098}#)
                                                      (syntax-violation
                                                        #f
                                                        "source expression failed to match any pattern"
                                                        #{tmp\ 2097}#))))
                                                (if (eqv? #{type\ 2070}#
                                                          'local-syntax-form)
                                                  (#{chi-local-syntax\ 470}#
                                                    #{value\ 2071}#
                                                    #{e\ 2072}#
                                                    #{er\ 2068}#
                                                    #{w\ 2073}#
                                                    #{s\ 2074}#
                                                    #{mod\ 2075}#
                                                    (lambda (#{forms\ 2107}#
                                                             #{er\ 2108}#
                                                             #{w\ 2109}#
                                                             #{s\ 2110}#
                                                             #{mod\ 2111}#)
                                                      (#{parse\ 2055}#
                                                        (letrec*
                                                          ((#{f\ 2119}#
                                                             (lambda (#{forms\ 2120}#)
                                                               (if (null? #{forms\ 2120}#)
                                                                 (cdr #{body\ 2056}#)
                                                                 (cons (cons #{er\ 2108}#
                                                                             (#{wrap\ 446}#
                                                                               (car #{forms\ 2120}#)
                                                                               #{w\ 2109}#
                                                                               #{mod\ 2111}#))
                                                                       (#{f\ 2119}#
                                                                         (cdr #{forms\ 2120}#)))))))
                                                          (begin
                                                            (#{f\ 2119}#
                                                              #{forms\ 2107}#)))
                                                        #{ids\ 2057}#
                                                        #{labels\ 2058}#
                                                        #{var-ids\ 2059}#
                                                        #{vars\ 2060}#
                                                        #{vals\ 2061}#
                                                        #{bindings\ 2062}#)))
                                                  (if (null? #{ids\ 2057}#)
                                                    (#{build-sequence\ 334}#
                                                      #f
                                                      (map (lambda (#{x\ 2123}#)
                                                             (#{chi\ 460}#
                                                               (cdr #{x\ 2123}#)
                                                               (car #{x\ 2123}#)
                                                               '(())
                                                               #{mod\ 2075}#))
                                                           (cons (cons #{er\ 2068}#
                                                                       (#{source-wrap\ 448}#
                                                                         #{e\ 2072}#
                                                                         #{w\ 2073}#
                                                                         #{s\ 2074}#
                                                                         #{mod\ 2075}#))
                                                                 (cdr #{body\ 2056}#))))
                                                    (begin
                                                      (if (not (#{valid-bound-ids?\ 440}#
                                                                 #{ids\ 2057}#))
                                                        (syntax-violation
                                                          #f
                                                          "invalid or duplicate identifier in definition"
                                                          #{outer-form\ 2027}#))
                                                      (letrec*
                                                        ((#{loop\ 2130}#
                                                           (lambda (#{bs\ 2131}#
                                                                    #{er-cache\ 2132}#
                                                                    #{r-cache\ 2133}#)
                                                             (if (not (null? #{bs\ 2131}#))
                                                               (begin
                                                                 (let ((#{b\ 2136}#
                                                                         (car #{bs\ 2131}#)))
                                                                   (if (eq? (car #{b\ 2136}#)
                                                                            'macro)
                                                                     (begin
                                                                       (let ((#{er\ 2139}#
                                                                               (car (cdr #{b\ 2136}#))))
                                                                         (begin
                                                                           (let ((#{r-cache\ 2141}#
                                                                                   (if (eq? #{er\ 2139}#
                                                                                            #{er-cache\ 2132}#)
                                                                                     #{r-cache\ 2133}#
                                                                                     (#{macros-only-env\ 372}#
                                                                                       #{er\ 2139}#))))
                                                                             (begin
                                                                               (set-cdr!
                                                                                 #{b\ 2136}#
                                                                                 (#{eval-local-transformer\ 472}#
                                                                                   (#{chi\ 460}#
                                                                                     (cdr (cdr #{b\ 2136}#))
                                                                                     #{r-cache\ 2141}#
                                                                                     '(())
                                                                                     #{mod\ 2075}#)
                                                                                   #{mod\ 2075}#))
                                                                               (#{loop\ 2130}#
                                                                                 (cdr #{bs\ 2131}#)
                                                                                 #{er\ 2139}#
                                                                                 #{r-cache\ 2141}#))))))
                                                                     (#{loop\ 2130}#
                                                                       (cdr #{bs\ 2131}#)
                                                                       #{er-cache\ 2132}#
                                                                       #{r-cache\ 2133}#))))))))
                                                        (begin
                                                          (#{loop\ 2130}#
                                                            #{bindings\ 2062}#
                                                            #f
                                                            #f)))
                                                      (set-cdr!
                                                        #{r\ 2038}#
                                                        (#{extend-env\ 368}#
                                                          #{labels\ 2058}#
                                                          #{bindings\ 2062}#
                                                          (cdr #{r\ 2038}#)))
                                                      (#{build-letrec\ 340}#
                                                        #f
                                                        #t
                                                        (reverse
                                                          (map syntax->datum
                                                               #{var-ids\ 2059}#))
                                                        (reverse
                                                          #{vars\ 2060}#)
                                                        (map (lambda (#{x\ 2144}#)
                                                               (#{chi\ 460}#
                                                                 (cdr #{x\ 2144}#)
                                                                 (car #{x\ 2144}#)
                                                                 '(())
                                                                 #{mod\ 2075}#))
                                                             (reverse
                                                               #{vals\ 2061}#))
                                                        (#{build-sequence\ 334}#
                                                          #f
                                                          (map (lambda (#{x\ 2148}#)
                                                                 (#{chi\ 460}#
                                                                   (cdr #{x\ 2148}#)
                                                                   (car #{x\ 2148}#)
                                                                   '(())
                                                                   #{mod\ 2075}#))
                                                               (cons (cons #{er\ 2068}#
                                                                           (#{source-wrap\ 448}#
                                                                             #{e\ 2072}#
                                                                             #{w\ 2073}#
                                                                             #{s\ 2074}#
                                                                             #{mod\ 2075}#))
                                                                     (cdr #{body\ 2056}#)))))))))))))))))))
                           (begin
                             (#{parse\ 2055}#
                               (map (lambda (#{x\ 2063}#)
                                      (cons #{r\ 2038}#
                                            (#{wrap\ 446}#
                                              #{x\ 2063}#
                                              #{w\ 2043}#
                                              #{mod\ 2030}#)))
                                    #{body\ 2026}#)
                               '()
                               '()
                               '()
                               '()
                               '()
                               '())))))))))))
         (#{chi-local-syntax\ 470}#
           (lambda (#{rec?\ 2151}#
                    #{e\ 2152}#
                    #{r\ 2153}#
                    #{w\ 2154}#
                    #{s\ 2155}#
                    #{mod\ 2156}#
                    #{k\ 2157}#)
             (let ((#{tmp\ 2165}# #{e\ 2152}#))
               (let ((#{tmp\ 2166}#
                       ($sc-dispatch
                         #{tmp\ 2165}#
                         '(_ #(each (any any)) any . each-any))))
                 (if #{tmp\ 2166}#
                   (@apply
                     (lambda (#{id\ 2171}#
                              #{val\ 2172}#
                              #{e1\ 2173}#
                              #{e2\ 2174}#)
                       (begin
                         (let ((#{ids\ 2176}# #{id\ 2171}#))
                           (if (not (#{valid-bound-ids?\ 440}# #{ids\ 2176}#))
                             (syntax-violation
                               #f
                               "duplicate bound keyword"
                               #{e\ 2152}#)
                             (begin
                               (let ((#{labels\ 2179}#
                                       (#{gen-labels\ 395}# #{ids\ 2176}#)))
                                 (begin
                                   (let ((#{new-w\ 2181}#
                                           (#{make-binding-wrap\ 424}#
                                             #{ids\ 2176}#
                                             #{labels\ 2179}#
                                             #{w\ 2154}#)))
                                     (#{k\ 2157}#
                                       (cons #{e1\ 2173}# #{e2\ 2174}#)
                                       (#{extend-env\ 368}#
                                         #{labels\ 2179}#
                                         (begin
                                           (let ((#{w\ 2185}#
                                                   (if #{rec?\ 2151}#
                                                     #{new-w\ 2181}#
                                                     #{w\ 2154}#))
                                                 (#{trans-r\ 2186}#
                                                   (#{macros-only-env\ 372}#
                                                     #{r\ 2153}#)))
                                             (map (lambda (#{x\ 2187}#)
                                                    (cons 'macro
                                                          (#{eval-local-transformer\ 472}#
                                                            (#{chi\ 460}#
                                                              #{x\ 2187}#
                                                              #{trans-r\ 2186}#
                                                              #{w\ 2185}#
                                                              #{mod\ 2156}#)
                                                            #{mod\ 2156}#)))
                                                  #{val\ 2172}#)))
                                         #{r\ 2153}#)
                                       #{new-w\ 2181}#
                                       #{s\ 2155}#
                                       #{mod\ 2156}#)))))))))
                     #{tmp\ 2166}#)
                   (let ((#{_\ 2192}# #{tmp\ 2165}#))
                     (syntax-violation
                       #f
                       "bad local syntax definition"
                       (#{source-wrap\ 448}#
                         #{e\ 2152}#
                         #{w\ 2154}#
                         #{s\ 2155}#
                         #{mod\ 2156}#))))))))
         (#{eval-local-transformer\ 472}#
           (lambda (#{expanded\ 2193}# #{mod\ 2194}#)
             (begin
               (let ((#{p\ 2198}#
                       (#{local-eval-hook\ 293}#
                         #{expanded\ 2193}#
                         #{mod\ 2194}#)))
                 (if (procedure? #{p\ 2198}#)
                   #{p\ 2198}#
                   (syntax-violation
                     #f
                     "nonprocedure transformer"
                     #{p\ 2198}#))))))
         (#{chi-void\ 474}#
           (lambda () (#{build-void\ 304}# #f)))
         (#{ellipsis?\ 476}#
           (lambda (#{x\ 2200}#)
             (if (#{nonsymbol-id?\ 378}# #{x\ 2200}#)
               (#{free-id=?\ 436}#
                 #{x\ 2200}#
                 '#(syntax-object
                    ...
                    ((top)
                     #(ribcage () () ())
                     #(ribcage () () ())
                     #(ribcage #(x) #((top)) #("i2201"))
                     #(ribcage
                       (lambda-var-list
                         gen-var
                         strip
                         chi-lambda-case
                         lambda*-formals
                         chi-simple-lambda
                         lambda-formals
                         ellipsis?
                         chi-void
                         eval-local-transformer
                         chi-local-syntax
                         chi-body
                         chi-macro
                         chi-application
                         chi-expr
                         chi
                         syntax-type
                         chi-when-list
                         chi-install-global
                         chi-top-sequence
                         chi-sequence
                         source-wrap
                         wrap
                         bound-id-member?
                         distinct-bound-ids?
                         valid-bound-ids?
                         bound-id=?
                         free-id=?
                         id-var-name
                         same-marks?
                         join-marks
                         join-wraps
                         smart-append
                         make-binding-wrap
                         extend-ribcage!
                         make-empty-ribcage
                         new-mark
                         anti-mark
                         the-anti-mark
                         top-marked?
                         top-wrap
                         empty-wrap
                         set-ribcage-labels!
                         set-ribcage-marks!
                         set-ribcage-symnames!
                         ribcage-labels
                         ribcage-marks
                         ribcage-symnames
                         ribcage?
                         make-ribcage
                         gen-labels
                         gen-label
                         make-rename
                         rename-marks
                         rename-new
                         rename-old
                         subst-rename?
                         wrap-subst
                         wrap-marks
                         make-wrap
                         id-sym-name&marks
                         id-sym-name
                         id?
                         nonsymbol-id?
                         global-extend
                         lookup
                         macros-only-env
                         extend-var-env
                         extend-env
                         null-env
                         binding-value
                         binding-type
                         make-binding
                         arg-check
                         source-annotation
                         no-source
                         set-syntax-object-module!
                         set-syntax-object-wrap!
                         set-syntax-object-expression!
                         syntax-object-module
                         syntax-object-wrap
                         syntax-object-expression
                         syntax-object?
                         make-syntax-object
                         build-lexical-var
                         build-letrec
                         build-named-let
                         build-let
                         build-sequence
                         build-data
                         build-primref
                         build-lambda-case
                         build-case-lambda
                         build-simple-lambda
                         build-global-definition
                         build-global-assignment
                         build-global-reference
                         analyze-variable
                         build-lexical-assignment
                         build-lexical-reference
                         build-dynlet
                         build-conditional
                         build-application
                         build-void
                         maybe-name-value!
                         decorate-source
                         get-global-definition-hook
                         put-global-definition-hook
                         gensym-hook
                         local-eval-hook
                         top-level-eval-hook
                         fx<
                         fx=
                         fx-
                         fx+
                         set-lambda-meta!
                         lambda-meta
                         lambda?
                         make-dynlet
                         make-letrec
                         make-let
                         make-lambda-case
                         make-lambda
                         make-sequence
                         make-application
                         make-conditional
                         make-toplevel-define
                         make-toplevel-set
                         make-toplevel-ref
                         make-module-set
                         make-module-ref
                         make-lexical-set
                         make-lexical-ref
                         make-primitive-ref
                         make-const
                         make-void)
                       ((top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top))
                       ("i489"
                        "i487"
                        "i485"
                        "i483"
                        "i481"
                        "i479"
                        "i477"
                        "i475"
                        "i473"
                        "i471"
                        "i469"
                        "i467"
                        "i465"
                        "i463"
                        "i461"
                        "i459"
                        "i457"
                        "i455"
                        "i453"
                        "i451"
                        "i449"
                        "i447"
                        "i445"
                        "i443"
                        "i441"
                        "i439"
                        "i437"
                        "i435"
                        "i433"
                        "i431"
                        "i429"
                        "i427"
                        "i425"
                        "i423"
                        "i421"
                        "i420"
                        "i419"
                        "i417"
                        "i416"
                        "i415"
                        "i414"
                        "i413"
                        "i411"
                        "i409"
                        "i407"
                        "i405"
                        "i403"
                        "i401"
                        "i399"
                        "i397"
                        "i394"
                        "i392"
                        "i391"
                        "i390"
                        "i389"
                        "i388"
                        "i387"
                        "i386"
                        "i385"
                        "i384"
                        "i382"
                        "i381"
                        "i379"
                        "i377"
                        "i375"
                        "i373"
                        "i371"
                        "i369"
                        "i367"
                        "i366"
                        "i365"
                        "i364"
                        "i363"
                        "i362"
                        "i360"
                        "i359"
                        "i357"
                        "i355"
                        "i353"
                        "i351"
                        "i349"
                        "i347"
                        "i345"
                        "i343"
                        "i341"
                        "i339"
                        "i337"
                        "i335"
                        "i333"
                        "i331"
                        "i329"
                        "i327"
                        "i325"
                        "i323"
                        "i321"
                        "i319"
                        "i317"
                        "i315"
                        "i313"
                        "i311"
                        "i309"
                        "i307"
                        "i305"
                        "i303"
                        "i301"
                        "i299"
                        "i297"
                        "i295"
                        "i294"
                        "i292"
                        "i290"
                        "i288"
                        "i286"
                        "i284"
                        "i282"
                        "i280"
                        "i278"
                        "i276"
                        "i273"
                        "i271"
                        "i269"
                        "i267"
                        "i265"
                        "i263"
                        "i261"
                        "i259"
                        "i257"
                        "i255"
                        "i253"
                        "i251"
                        "i249"
                        "i247"
                        "i245"
                        "i243"
                        "i241"
                        "i239"))
                     #(ribcage
                       (define-structure
                         define-expansion-accessors
                         define-expansion-constructors
                         and-map*)
                       ((top) (top) (top) (top))
                       ("i41" "i40" "i39" "i37")))
                    (hygiene guile)))
               #f)))
         (#{lambda-formals\ 478}#
           (lambda (#{orig-args\ 2204}#)
             (letrec*
               ((#{req\ 2207}#
                  (lambda (#{args\ 2210}# #{rreq\ 2211}#)
                    (let ((#{tmp\ 2214}# #{args\ 2210}#))
                      (let ((#{tmp\ 2215}# ($sc-dispatch #{tmp\ 2214}# '())))
                        (if #{tmp\ 2215}#
                          (@apply
                            (lambda ()
                              (#{check\ 2209}# (reverse #{rreq\ 2211}#) #f))
                            #{tmp\ 2215}#)
                          (let ((#{tmp\ 2216}#
                                  ($sc-dispatch #{tmp\ 2214}# '(any . any))))
                            (if (if #{tmp\ 2216}#
                                  (@apply
                                    (lambda (#{a\ 2219}# #{b\ 2220}#)
                                      (#{id?\ 380}# #{a\ 2219}#))
                                    #{tmp\ 2216}#)
                                  #f)
                              (@apply
                                (lambda (#{a\ 2223}# #{b\ 2224}#)
                                  (#{req\ 2207}#
                                    #{b\ 2224}#
                                    (cons #{a\ 2223}# #{rreq\ 2211}#)))
                                #{tmp\ 2216}#)
                              (let ((#{tmp\ 2225}# (list #{tmp\ 2214}#)))
                                (if (if #{tmp\ 2225}#
                                      (@apply
                                        (lambda (#{r\ 2227}#)
                                          (#{id?\ 380}# #{r\ 2227}#))
                                        #{tmp\ 2225}#)
                                      #f)
                                  (@apply
                                    (lambda (#{r\ 2229}#)
                                      (#{check\ 2209}#
                                        (reverse #{rreq\ 2211}#)
                                        #{r\ 2229}#))
                                    #{tmp\ 2225}#)
                                  (let ((#{else\ 2231}# #{tmp\ 2214}#))
                                    (syntax-violation
                                      'lambda
                                      "invalid argument list"
                                      #{orig-args\ 2204}#
                                      #{args\ 2210}#)))))))))))
                (#{check\ 2209}#
                  (lambda (#{req\ 2232}# #{rest\ 2233}#)
                    (if (#{distinct-bound-ids?\ 442}#
                          (if #{rest\ 2233}#
                            (cons #{rest\ 2233}# #{req\ 2232}#)
                            #{req\ 2232}#))
                      (values #{req\ 2232}# #f #{rest\ 2233}# #f)
                      (syntax-violation
                        'lambda
                        "duplicate identifier in argument list"
                        #{orig-args\ 2204}#)))))
               (begin (#{req\ 2207}# #{orig-args\ 2204}# '())))))
         (#{chi-simple-lambda\ 480}#
           (lambda (#{e\ 2239}#
                    #{r\ 2240}#
                    #{w\ 2241}#
                    #{s\ 2242}#
                    #{mod\ 2243}#
                    #{req\ 2244}#
                    #{rest\ 2245}#
                    #{meta\ 2246}#
                    #{body\ 2247}#)
             (begin
               (let ((#{ids\ 2259}#
                       (if #{rest\ 2245}#
                         (append #{req\ 2244}# (list #{rest\ 2245}#))
                         #{req\ 2244}#)))
                 (begin
                   (let ((#{vars\ 2261}#
                           (map #{gen-var\ 488}# #{ids\ 2259}#)))
                     (begin
                       (let ((#{labels\ 2263}#
                               (#{gen-labels\ 395}# #{ids\ 2259}#)))
                         (#{build-simple-lambda\ 324}#
                           #{s\ 2242}#
                           (map syntax->datum #{req\ 2244}#)
                           (if #{rest\ 2245}#
                             (syntax->datum #{rest\ 2245}#)
                             #f)
                           #{vars\ 2261}#
                           #{meta\ 2246}#
                           (#{chi-body\ 468}#
                             #{body\ 2247}#
                             (#{source-wrap\ 448}#
                               #{e\ 2239}#
                               #{w\ 2241}#
                               #{s\ 2242}#
                               #{mod\ 2243}#)
                             (#{extend-var-env\ 370}#
                               #{labels\ 2263}#
                               #{vars\ 2261}#
                               #{r\ 2240}#)
                             (#{make-binding-wrap\ 424}#
                               #{ids\ 2259}#
                               #{labels\ 2263}#
                               #{w\ 2241}#)
                             #{mod\ 2243}#))))))))))
         (#{lambda*-formals\ 482}#
           (lambda (#{orig-args\ 2266}#)
             (letrec*
               ((#{req\ 2269}#
                  (lambda (#{args\ 2278}# #{rreq\ 2279}#)
                    (let ((#{tmp\ 2282}# #{args\ 2278}#))
                      (let ((#{tmp\ 2283}# ($sc-dispatch #{tmp\ 2282}# '())))
                        (if #{tmp\ 2283}#
                          (@apply
                            (lambda ()
                              (#{check\ 2277}#
                                (reverse #{rreq\ 2279}#)
                                '()
                                #f
                                '()))
                            #{tmp\ 2283}#)
                          (let ((#{tmp\ 2284}#
                                  ($sc-dispatch #{tmp\ 2282}# '(any . any))))
                            (if (if #{tmp\ 2284}#
                                  (@apply
                                    (lambda (#{a\ 2287}# #{b\ 2288}#)
                                      (#{id?\ 380}# #{a\ 2287}#))
                                    #{tmp\ 2284}#)
                                  #f)
                              (@apply
                                (lambda (#{a\ 2291}# #{b\ 2292}#)
                                  (#{req\ 2269}#
                                    #{b\ 2292}#
                                    (cons #{a\ 2291}# #{rreq\ 2279}#)))
                                #{tmp\ 2284}#)
                              (let ((#{tmp\ 2293}#
                                      ($sc-dispatch
                                        #{tmp\ 2282}#
                                        '(any . any))))
                                (if (if #{tmp\ 2293}#
                                      (@apply
                                        (lambda (#{a\ 2296}# #{b\ 2297}#)
                                          (eq? (syntax->datum #{a\ 2296}#)
                                               #:optional))
                                        #{tmp\ 2293}#)
                                      #f)
                                  (@apply
                                    (lambda (#{a\ 2300}# #{b\ 2301}#)
                                      (#{opt\ 2271}#
                                        #{b\ 2301}#
                                        (reverse #{rreq\ 2279}#)
                                        '()))
                                    #{tmp\ 2293}#)
                                  (let ((#{tmp\ 2302}#
                                          ($sc-dispatch
                                            #{tmp\ 2282}#
                                            '(any . any))))
                                    (if (if #{tmp\ 2302}#
                                          (@apply
                                            (lambda (#{a\ 2305}# #{b\ 2306}#)
                                              (eq? (syntax->datum #{a\ 2305}#)
                                                   #:key))
                                            #{tmp\ 2302}#)
                                          #f)
                                      (@apply
                                        (lambda (#{a\ 2309}# #{b\ 2310}#)
                                          (#{key\ 2273}#
                                            #{b\ 2310}#
                                            (reverse #{rreq\ 2279}#)
                                            '()
                                            '()))
                                        #{tmp\ 2302}#)
                                      (let ((#{tmp\ 2311}#
                                              ($sc-dispatch
                                                #{tmp\ 2282}#
                                                '(any any))))
                                        (if (if #{tmp\ 2311}#
                                              (@apply
                                                (lambda (#{a\ 2314}#
                                                         #{b\ 2315}#)
                                                  (eq? (syntax->datum
                                                         #{a\ 2314}#)
                                                       #:rest))
                                                #{tmp\ 2311}#)
                                              #f)
                                          (@apply
                                            (lambda (#{a\ 2318}# #{b\ 2319}#)
                                              (#{rest\ 2275}#
                                                #{b\ 2319}#
                                                (reverse #{rreq\ 2279}#)
                                                '()
                                                '()))
                                            #{tmp\ 2311}#)
                                          (let ((#{tmp\ 2320}#
                                                  (list #{tmp\ 2282}#)))
                                            (if (if #{tmp\ 2320}#
                                                  (@apply
                                                    (lambda (#{r\ 2322}#)
                                                      (#{id?\ 380}#
                                                        #{r\ 2322}#))
                                                    #{tmp\ 2320}#)
                                                  #f)
                                              (@apply
                                                (lambda (#{r\ 2324}#)
                                                  (#{rest\ 2275}#
                                                    #{r\ 2324}#
                                                    (reverse #{rreq\ 2279}#)
                                                    '()
                                                    '()))
                                                #{tmp\ 2320}#)
                                              (let ((#{else\ 2326}#
                                                      #{tmp\ 2282}#))
                                                (syntax-violation
                                                  'lambda*
                                                  "invalid argument list"
                                                  #{orig-args\ 2266}#
                                                  #{args\ 2278}#)))))))))))))))))
                (#{opt\ 2271}#
                  (lambda (#{args\ 2327}# #{req\ 2328}# #{ropt\ 2329}#)
                    (let ((#{tmp\ 2333}# #{args\ 2327}#))
                      (let ((#{tmp\ 2334}# ($sc-dispatch #{tmp\ 2333}# '())))
                        (if #{tmp\ 2334}#
                          (@apply
                            (lambda ()
                              (#{check\ 2277}#
                                #{req\ 2328}#
                                (reverse #{ropt\ 2329}#)
                                #f
                                '()))
                            #{tmp\ 2334}#)
                          (let ((#{tmp\ 2335}#
                                  ($sc-dispatch #{tmp\ 2333}# '(any . any))))
                            (if (if #{tmp\ 2335}#
                                  (@apply
                                    (lambda (#{a\ 2338}# #{b\ 2339}#)
                                      (#{id?\ 380}# #{a\ 2338}#))
                                    #{tmp\ 2335}#)
                                  #f)
                              (@apply
                                (lambda (#{a\ 2342}# #{b\ 2343}#)
                                  (#{opt\ 2271}#
                                    #{b\ 2343}#
                                    #{req\ 2328}#
                                    (cons (cons #{a\ 2342}#
                                                '(#(syntax-object
                                                    #f
                                                    ((top)
                                                     #(ribcage
                                                       #(a b)
                                                       #((top) (top))
                                                       #("i2340" "i2341"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(args req ropt)
                                                       #((top) (top) (top))
                                                       #("i2330"
                                                         "i2331"
                                                         "i2332"))
                                                     #(ribcage
                                                       (check rest key opt req)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i2276"
                                                        "i2274"
                                                        "i2272"
                                                        "i2270"
                                                        "i2268"))
                                                     #(ribcage
                                                       #(orig-args)
                                                       #((top))
                                                       #("i2267"))
                                                     #(ribcage
                                                       (lambda-var-list
                                                         gen-var
                                                         strip
                                                         chi-lambda-case
                                                         lambda*-formals
                                                         chi-simple-lambda
                                                         lambda-formals
                                                         ellipsis?
                                                         chi-void
                                                         eval-local-transformer
                                                         chi-local-syntax
                                                         chi-body
                                                         chi-macro
                                                         chi-application
                                                         chi-expr
                                                         chi
                                                         syntax-type
                                                         chi-when-list
                                                         chi-install-global
                                                         chi-top-sequence
                                                         chi-sequence
                                                         source-wrap
                                                         wrap
                                                         bound-id-member?
                                                         distinct-bound-ids?
                                                         valid-bound-ids?
                                                         bound-id=?
                                                         free-id=?
                                                         id-var-name
                                                         same-marks?
                                                         join-marks
                                                         join-wraps
                                                         smart-append
                                                         make-binding-wrap
                                                         extend-ribcage!
                                                         make-empty-ribcage
                                                         new-mark
                                                         anti-mark
                                                         the-anti-mark
                                                         top-marked?
                                                         top-wrap
                                                         empty-wrap
                                                         set-ribcage-labels!
                                                         set-ribcage-marks!
                                                         set-ribcage-symnames!
                                                         ribcage-labels
                                                         ribcage-marks
                                                         ribcage-symnames
                                                         ribcage?
                                                         make-ribcage
                                                         gen-labels
                                                         gen-label
                                                         make-rename
                                                         rename-marks
                                                         rename-new
                                                         rename-old
                                                         subst-rename?
                                                         wrap-subst
                                                         wrap-marks
                                                         make-wrap
                                                         id-sym-name&marks
                                                         id-sym-name
                                                         id?
                                                         nonsymbol-id?
                                                         global-extend
                                                         lookup
                                                         macros-only-env
                                                         extend-var-env
                                                         extend-env
                                                         null-env
                                                         binding-value
                                                         binding-type
                                                         make-binding
                                                         arg-check
                                                         source-annotation
                                                         no-source
                                                         set-syntax-object-module!
                                                         set-syntax-object-wrap!
                                                         set-syntax-object-expression!
                                                         syntax-object-module
                                                         syntax-object-wrap
                                                         syntax-object-expression
                                                         syntax-object?
                                                         make-syntax-object
                                                         build-lexical-var
                                                         build-letrec
                                                         build-named-let
                                                         build-let
                                                         build-sequence
                                                         build-data
                                                         build-primref
                                                         build-lambda-case
                                                         build-case-lambda
                                                         build-simple-lambda
                                                         build-global-definition
                                                         build-global-assignment
                                                         build-global-reference
                                                         analyze-variable
                                                         build-lexical-assignment
                                                         build-lexical-reference
                                                         build-dynlet
                                                         build-conditional
                                                         build-application
                                                         build-void
                                                         maybe-name-value!
                                                         decorate-source
                                                         get-global-definition-hook
                                                         put-global-definition-hook
                                                         gensym-hook
                                                         local-eval-hook
                                                         top-level-eval-hook
                                                         fx<
                                                         fx=
                                                         fx-
                                                         fx+
                                                         set-lambda-meta!
                                                         lambda-meta
                                                         lambda?
                                                         make-dynlet
                                                         make-letrec
                                                         make-let
                                                         make-lambda-case
                                                         make-lambda
                                                         make-sequence
                                                         make-application
                                                         make-conditional
                                                         make-toplevel-define
                                                         make-toplevel-set
                                                         make-toplevel-ref
                                                         make-module-set
                                                         make-module-ref
                                                         make-lexical-set
                                                         make-lexical-ref
                                                         make-primitive-ref
                                                         make-const
                                                         make-void)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i489"
                                                        "i487"
                                                        "i485"
                                                        "i483"
                                                        "i481"
                                                        "i479"
                                                        "i477"
                                                        "i475"
                                                        "i473"
                                                        "i471"
                                                        "i469"
                                                        "i467"
                                                        "i465"
                                                        "i463"
                                                        "i461"
                                                        "i459"
                                                        "i457"
                                                        "i455"
                                                        "i453"
                                                        "i451"
                                                        "i449"
                                                        "i447"
                                                        "i445"
                                                        "i443"
                                                        "i441"
                                                        "i439"
                                                        "i437"
                                                        "i435"
                                                        "i433"
                                                        "i431"
                                                        "i429"
                                                        "i427"
                                                        "i425"
                                                        "i423"
                                                        "i421"
                                                        "i420"
                                                        "i419"
                                                        "i417"
                                                        "i416"
                                                        "i415"
                                                        "i414"
                                                        "i413"
                                                        "i411"
                                                        "i409"
                                                        "i407"
                                                        "i405"
                                                        "i403"
                                                        "i401"
                                                        "i399"
                                                        "i397"
                                                        "i394"
                                                        "i392"
                                                        "i391"
                                                        "i390"
                                                        "i389"
                                                        "i388"
                                                        "i387"
                                                        "i386"
                                                        "i385"
                                                        "i384"
                                                        "i382"
                                                        "i381"
                                                        "i379"
                                                        "i377"
                                                        "i375"
                                                        "i373"
                                                        "i371"
                                                        "i369"
                                                        "i367"
                                                        "i366"
                                                        "i365"
                                                        "i364"
                                                        "i363"
                                                        "i362"
                                                        "i360"
                                                        "i359"
                                                        "i357"
                                                        "i355"
                                                        "i353"
                                                        "i351"
                                                        "i349"
                                                        "i347"
                                                        "i345"
                                                        "i343"
                                                        "i341"
                                                        "i339"
                                                        "i337"
                                                        "i335"
                                                        "i333"
                                                        "i331"
                                                        "i329"
                                                        "i327"
                                                        "i325"
                                                        "i323"
                                                        "i321"
                                                        "i319"
                                                        "i317"
                                                        "i315"
                                                        "i313"
                                                        "i311"
                                                        "i309"
                                                        "i307"
                                                        "i305"
                                                        "i303"
                                                        "i301"
                                                        "i299"
                                                        "i297"
                                                        "i295"
                                                        "i294"
                                                        "i292"
                                                        "i290"
                                                        "i288"
                                                        "i286"
                                                        "i284"
                                                        "i282"
                                                        "i280"
                                                        "i278"
                                                        "i276"
                                                        "i273"
                                                        "i271"
                                                        "i269"
                                                        "i267"
                                                        "i265"
                                                        "i263"
                                                        "i261"
                                                        "i259"
                                                        "i257"
                                                        "i255"
                                                        "i253"
                                                        "i251"
                                                        "i249"
                                                        "i247"
                                                        "i245"
                                                        "i243"
                                                        "i241"
                                                        "i239"))
                                                     #(ribcage
                                                       (define-structure
                                                         define-expansion-accessors
                                                         define-expansion-constructors
                                                         and-map*)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i41"
                                                        "i40"
                                                        "i39"
                                                        "i37")))
                                                    (hygiene guile))))
                                          #{ropt\ 2329}#)))
                                #{tmp\ 2335}#)
                              (let ((#{tmp\ 2344}#
                                      ($sc-dispatch
                                        #{tmp\ 2333}#
                                        '((any any) . any))))
                                (if (if #{tmp\ 2344}#
                                      (@apply
                                        (lambda (#{a\ 2348}#
                                                 #{init\ 2349}#
                                                 #{b\ 2350}#)
                                          (#{id?\ 380}# #{a\ 2348}#))
                                        #{tmp\ 2344}#)
                                      #f)
                                  (@apply
                                    (lambda (#{a\ 2354}#
                                             #{init\ 2355}#
                                             #{b\ 2356}#)
                                      (#{opt\ 2271}#
                                        #{b\ 2356}#
                                        #{req\ 2328}#
                                        (cons (list #{a\ 2354}# #{init\ 2355}#)
                                              #{ropt\ 2329}#)))
                                    #{tmp\ 2344}#)
                                  (let ((#{tmp\ 2357}#
                                          ($sc-dispatch
                                            #{tmp\ 2333}#
                                            '(any . any))))
                                    (if (if #{tmp\ 2357}#
                                          (@apply
                                            (lambda (#{a\ 2360}# #{b\ 2361}#)
                                              (eq? (syntax->datum #{a\ 2360}#)
                                                   #:key))
                                            #{tmp\ 2357}#)
                                          #f)
                                      (@apply
                                        (lambda (#{a\ 2364}# #{b\ 2365}#)
                                          (#{key\ 2273}#
                                            #{b\ 2365}#
                                            #{req\ 2328}#
                                            (reverse #{ropt\ 2329}#)
                                            '()))
                                        #{tmp\ 2357}#)
                                      (let ((#{tmp\ 2366}#
                                              ($sc-dispatch
                                                #{tmp\ 2333}#
                                                '(any any))))
                                        (if (if #{tmp\ 2366}#
                                              (@apply
                                                (lambda (#{a\ 2369}#
                                                         #{b\ 2370}#)
                                                  (eq? (syntax->datum
                                                         #{a\ 2369}#)
                                                       #:rest))
                                                #{tmp\ 2366}#)
                                              #f)
                                          (@apply
                                            (lambda (#{a\ 2373}# #{b\ 2374}#)
                                              (#{rest\ 2275}#
                                                #{b\ 2374}#
                                                #{req\ 2328}#
                                                (reverse #{ropt\ 2329}#)
                                                '()))
                                            #{tmp\ 2366}#)
                                          (let ((#{tmp\ 2375}#
                                                  (list #{tmp\ 2333}#)))
                                            (if (if #{tmp\ 2375}#
                                                  (@apply
                                                    (lambda (#{r\ 2377}#)
                                                      (#{id?\ 380}#
                                                        #{r\ 2377}#))
                                                    #{tmp\ 2375}#)
                                                  #f)
                                              (@apply
                                                (lambda (#{r\ 2379}#)
                                                  (#{rest\ 2275}#
                                                    #{r\ 2379}#
                                                    #{req\ 2328}#
                                                    (reverse #{ropt\ 2329}#)
                                                    '()))
                                                #{tmp\ 2375}#)
                                              (let ((#{else\ 2381}#
                                                      #{tmp\ 2333}#))
                                                (syntax-violation
                                                  'lambda*
                                                  "invalid optional argument list"
                                                  #{orig-args\ 2266}#
                                                  #{args\ 2327}#)))))))))))))))))
                (#{key\ 2273}#
                  (lambda (#{args\ 2382}#
                           #{req\ 2383}#
                           #{opt\ 2384}#
                           #{rkey\ 2385}#)
                    (let ((#{tmp\ 2390}# #{args\ 2382}#))
                      (let ((#{tmp\ 2391}# ($sc-dispatch #{tmp\ 2390}# '())))
                        (if #{tmp\ 2391}#
                          (@apply
                            (lambda ()
                              (#{check\ 2277}#
                                #{req\ 2383}#
                                #{opt\ 2384}#
                                #f
                                (cons #f (reverse #{rkey\ 2385}#))))
                            #{tmp\ 2391}#)
                          (let ((#{tmp\ 2392}#
                                  ($sc-dispatch #{tmp\ 2390}# '(any . any))))
                            (if (if #{tmp\ 2392}#
                                  (@apply
                                    (lambda (#{a\ 2395}# #{b\ 2396}#)
                                      (#{id?\ 380}# #{a\ 2395}#))
                                    #{tmp\ 2392}#)
                                  #f)
                              (@apply
                                (lambda (#{a\ 2399}# #{b\ 2400}#)
                                  (let ((#{tmp\ 2402}#
                                          (symbol->keyword
                                            (syntax->datum #{a\ 2399}#))))
                                    (let ((#{k\ 2404}# #{tmp\ 2402}#))
                                      (#{key\ 2273}#
                                        #{b\ 2400}#
                                        #{req\ 2383}#
                                        #{opt\ 2384}#
                                        (cons (cons #{k\ 2404}#
                                                    (cons #{a\ 2399}#
                                                          '(#(syntax-object
                                                              #f
                                                              ((top)
                                                               #(ribcage
                                                                 #(k)
                                                                 #((top))
                                                                 #("i2403"))
                                                               #(ribcage
                                                                 #(a b)
                                                                 #((top) (top))
                                                                 #("i2397"
                                                                   "i2398"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(args
                                                                   req
                                                                   opt
                                                                   rkey)
                                                                 #((top)
                                                                   (top)
                                                                   (top)
                                                                   (top))
                                                                 #("i2386"
                                                                   "i2387"
                                                                   "i2388"
                                                                   "i2389"))
                                                               #(ribcage
                                                                 (check rest
                                                                        key
                                                                        opt
                                                                        req)
                                                                 ((top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top))
                                                                 ("i2276"
                                                                  "i2274"
                                                                  "i2272"
                                                                  "i2270"
                                                                  "i2268"))
                                                               #(ribcage
                                                                 #(orig-args)
                                                                 #((top))
                                                                 #("i2267"))
                                                               #(ribcage
                                                                 (lambda-var-list
                                                                   gen-var
                                                                   strip
                                                                   chi-lambda-case
                                                                   lambda*-formals
                                                                   chi-simple-lambda
                                                                   lambda-formals
                                                                   ellipsis?
                                                                   chi-void
                                                                   eval-local-transformer
                                                                   chi-local-syntax
                                                                   chi-body
                                                                   chi-macro
                                                                   chi-application
                                                                   chi-expr
                                                                   chi
                                                                   syntax-type
                                                                   chi-when-list
                                                                   chi-install-global
                                                                   chi-top-sequence
                                                                   chi-sequence
                                                                   source-wrap
                                                                   wrap
                                                                   bound-id-member?
                                                                   distinct-bound-ids?
                                                                   valid-bound-ids?
                                                                   bound-id=?
                                                                   free-id=?
                                                                   id-var-name
                                                                   same-marks?
                                                                   join-marks
                                                                   join-wraps
                                                                   smart-append
                                                                   make-binding-wrap
                                                                   extend-ribcage!
                                                                   make-empty-ribcage
                                                                   new-mark
                                                                   anti-mark
                                                                   the-anti-mark
                                                                   top-marked?
                                                                   top-wrap
                                                                   empty-wrap
                                                                   set-ribcage-labels!
                                                                   set-ribcage-marks!
                                                                   set-ribcage-symnames!
                                                                   ribcage-labels
                                                                   ribcage-marks
                                                                   ribcage-symnames
                                                                   ribcage?
                                                                   make-ribcage
                                                                   gen-labels
                                                                   gen-label
                                                                   make-rename
                                                                   rename-marks
                                                                   rename-new
                                                                   rename-old
                                                                   subst-rename?
                                                                   wrap-subst
                                                                   wrap-marks
                                                                   make-wrap
                                                                   id-sym-name&marks
                                                                   id-sym-name
                                                                   id?
                                                                   nonsymbol-id?
                                                                   global-extend
                                                                   lookup
                                                                   macros-only-env
                                                                   extend-var-env
                                                                   extend-env
                                                                   null-env
                                                                   binding-value
                                                                   binding-type
                                                                   make-binding
                                                                   arg-check
                                                                   source-annotation
                                                                   no-source
                                                                   set-syntax-object-module!
                                                                   set-syntax-object-wrap!
                                                                   set-syntax-object-expression!
                                                                   syntax-object-module
                                                                   syntax-object-wrap
                                                                   syntax-object-expression
                                                                   syntax-object?
                                                                   make-syntax-object
                                                                   build-lexical-var
                                                                   build-letrec
                                                                   build-named-let
                                                                   build-let
                                                                   build-sequence
                                                                   build-data
                                                                   build-primref
                                                                   build-lambda-case
                                                                   build-case-lambda
                                                                   build-simple-lambda
                                                                   build-global-definition
                                                                   build-global-assignment
                                                                   build-global-reference
                                                                   analyze-variable
                                                                   build-lexical-assignment
                                                                   build-lexical-reference
                                                                   build-dynlet
                                                                   build-conditional
                                                                   build-application
                                                                   build-void
                                                                   maybe-name-value!
                                                                   decorate-source
                                                                   get-global-definition-hook
                                                                   put-global-definition-hook
                                                                   gensym-hook
                                                                   local-eval-hook
                                                                   top-level-eval-hook
                                                                   fx<
                                                                   fx=
                                                                   fx-
                                                                   fx+
                                                                   set-lambda-meta!
                                                                   lambda-meta
                                                                   lambda?
                                                                   make-dynlet
                                                                   make-letrec
                                                                   make-let
                                                                   make-lambda-case
                                                                   make-lambda
                                                                   make-sequence
                                                                   make-application
                                                                   make-conditional
                                                                   make-toplevel-define
                                                                   make-toplevel-set
                                                                   make-toplevel-ref
                                                                   make-module-set
                                                                   make-module-ref
                                                                   make-lexical-set
                                                                   make-lexical-ref
                                                                   make-primitive-ref
                                                                   make-const
                                                                   make-void)
                                                                 ((top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top))
                                                                 ("i489"
                                                                  "i487"
                                                                  "i485"
                                                                  "i483"
                                                                  "i481"
                                                                  "i479"
                                                                  "i477"
                                                                  "i475"
                                                                  "i473"
                                                                  "i471"
                                                                  "i469"
                                                                  "i467"
                                                                  "i465"
                                                                  "i463"
                                                                  "i461"
                                                                  "i459"
                                                                  "i457"
                                                                  "i455"
                                                                  "i453"
                                                                  "i451"
                                                                  "i449"
                                                                  "i447"
                                                                  "i445"
                                                                  "i443"
                                                                  "i441"
                                                                  "i439"
                                                                  "i437"
                                                                  "i435"
                                                                  "i433"
                                                                  "i431"
                                                                  "i429"
                                                                  "i427"
                                                                  "i425"
                                                                  "i423"
                                                                  "i421"
                                                                  "i420"
                                                                  "i419"
                                                                  "i417"
                                                                  "i416"
                                                                  "i415"
                                                                  "i414"
                                                                  "i413"
                                                                  "i411"
                                                                  "i409"
                                                                  "i407"
                                                                  "i405"
                                                                  "i403"
                                                                  "i401"
                                                                  "i399"
                                                                  "i397"
                                                                  "i394"
                                                                  "i392"
                                                                  "i391"
                                                                  "i390"
                                                                  "i389"
                                                                  "i388"
                                                                  "i387"
                                                                  "i386"
                                                                  "i385"
                                                                  "i384"
                                                                  "i382"
                                                                  "i381"
                                                                  "i379"
                                                                  "i377"
                                                                  "i375"
                                                                  "i373"
                                                                  "i371"
                                                                  "i369"
                                                                  "i367"
                                                                  "i366"
                                                                  "i365"
                                                                  "i364"
                                                                  "i363"
                                                                  "i362"
                                                                  "i360"
                                                                  "i359"
                                                                  "i357"
                                                                  "i355"
                                                                  "i353"
                                                                  "i351"
                                                                  "i349"
                                                                  "i347"
                                                                  "i345"
                                                                  "i343"
                                                                  "i341"
                                                                  "i339"
                                                                  "i337"
                                                                  "i335"
                                                                  "i333"
                                                                  "i331"
                                                                  "i329"
                                                                  "i327"
                                                                  "i325"
                                                                  "i323"
                                                                  "i321"
                                                                  "i319"
                                                                  "i317"
                                                                  "i315"
                                                                  "i313"
                                                                  "i311"
                                                                  "i309"
                                                                  "i307"
                                                                  "i305"
                                                                  "i303"
                                                                  "i301"
                                                                  "i299"
                                                                  "i297"
                                                                  "i295"
                                                                  "i294"
                                                                  "i292"
                                                                  "i290"
                                                                  "i288"
                                                                  "i286"
                                                                  "i284"
                                                                  "i282"
                                                                  "i280"
                                                                  "i278"
                                                                  "i276"
                                                                  "i273"
                                                                  "i271"
                                                                  "i269"
                                                                  "i267"
                                                                  "i265"
                                                                  "i263"
                                                                  "i261"
                                                                  "i259"
                                                                  "i257"
                                                                  "i255"
                                                                  "i253"
                                                                  "i251"
                                                                  "i249"
                                                                  "i247"
                                                                  "i245"
                                                                  "i243"
                                                                  "i241"
                                                                  "i239"))
                                                               #(ribcage
                                                                 (define-structure
                                                                   define-expansion-accessors
                                                                   define-expansion-constructors
                                                                   and-map*)
                                                                 ((top)
                                                                  (top)
                                                                  (top)
                                                                  (top))
                                                                 ("i41"
                                                                  "i40"
                                                                  "i39"
                                                                  "i37")))
                                                              (hygiene
                                                                guile)))))
                                              #{rkey\ 2385}#)))))
                                #{tmp\ 2392}#)
                              (let ((#{tmp\ 2405}#
                                      ($sc-dispatch
                                        #{tmp\ 2390}#
                                        '((any any) . any))))
                                (if (if #{tmp\ 2405}#
                                      (@apply
                                        (lambda (#{a\ 2409}#
                                                 #{init\ 2410}#
                                                 #{b\ 2411}#)
                                          (#{id?\ 380}# #{a\ 2409}#))
                                        #{tmp\ 2405}#)
                                      #f)
                                  (@apply
                                    (lambda (#{a\ 2415}#
                                             #{init\ 2416}#
                                             #{b\ 2417}#)
                                      (let ((#{tmp\ 2419}#
                                              (symbol->keyword
                                                (syntax->datum #{a\ 2415}#))))
                                        (let ((#{k\ 2421}# #{tmp\ 2419}#))
                                          (#{key\ 2273}#
                                            #{b\ 2417}#
                                            #{req\ 2383}#
                                            #{opt\ 2384}#
                                            (cons (list #{k\ 2421}#
                                                        #{a\ 2415}#
                                                        #{init\ 2416}#)
                                                  #{rkey\ 2385}#)))))
                                    #{tmp\ 2405}#)
                                  (let ((#{tmp\ 2422}#
                                          ($sc-dispatch
                                            #{tmp\ 2390}#
                                            '((any any any) . any))))
                                    (if (if #{tmp\ 2422}#
                                          (@apply
                                            (lambda (#{a\ 2427}#
                                                     #{init\ 2428}#
                                                     #{k\ 2429}#
                                                     #{b\ 2430}#)
                                              (if (#{id?\ 380}# #{a\ 2427}#)
                                                (keyword?
                                                  (syntax->datum #{k\ 2429}#))
                                                #f))
                                            #{tmp\ 2422}#)
                                          #f)
                                      (@apply
                                        (lambda (#{a\ 2437}#
                                                 #{init\ 2438}#
                                                 #{k\ 2439}#
                                                 #{b\ 2440}#)
                                          (#{key\ 2273}#
                                            #{b\ 2440}#
                                            #{req\ 2383}#
                                            #{opt\ 2384}#
                                            (cons (list #{k\ 2439}#
                                                        #{a\ 2437}#
                                                        #{init\ 2438}#)
                                                  #{rkey\ 2385}#)))
                                        #{tmp\ 2422}#)
                                      (let ((#{tmp\ 2441}#
                                              ($sc-dispatch
                                                #{tmp\ 2390}#
                                                '(any))))
                                        (if (if #{tmp\ 2441}#
                                              (@apply
                                                (lambda (#{aok\ 2443}#)
                                                  (eq? (syntax->datum
                                                         #{aok\ 2443}#)
                                                       #:allow-other-keys))
                                                #{tmp\ 2441}#)
                                              #f)
                                          (@apply
                                            (lambda (#{aok\ 2445}#)
                                              (#{check\ 2277}#
                                                #{req\ 2383}#
                                                #{opt\ 2384}#
                                                #f
                                                (cons #t
                                                      (reverse
                                                        #{rkey\ 2385}#))))
                                            #{tmp\ 2441}#)
                                          (let ((#{tmp\ 2446}#
                                                  ($sc-dispatch
                                                    #{tmp\ 2390}#
                                                    '(any any any))))
                                            (if (if #{tmp\ 2446}#
                                                  (@apply
                                                    (lambda (#{aok\ 2450}#
                                                             #{a\ 2451}#
                                                             #{b\ 2452}#)
                                                      (if (eq? (syntax->datum
                                                                 #{aok\ 2450}#)
                                                               #:allow-other-keys)
                                                        (eq? (syntax->datum
                                                               #{a\ 2451}#)
                                                             #:rest)
                                                        #f))
                                                    #{tmp\ 2446}#)
                                                  #f)
                                              (@apply
                                                (lambda (#{aok\ 2458}#
                                                         #{a\ 2459}#
                                                         #{b\ 2460}#)
                                                  (#{rest\ 2275}#
                                                    #{b\ 2460}#
                                                    #{req\ 2383}#
                                                    #{opt\ 2384}#
                                                    (cons #t
                                                          (reverse
                                                            #{rkey\ 2385}#))))
                                                #{tmp\ 2446}#)
                                              (let ((#{tmp\ 2461}#
                                                      ($sc-dispatch
                                                        #{tmp\ 2390}#
                                                        '(any . any))))
                                                (if (if #{tmp\ 2461}#
                                                      (@apply
                                                        (lambda (#{aok\ 2464}#
                                                                 #{r\ 2465}#)
                                                          (if (eq? (syntax->datum
                                                                     #{aok\ 2464}#)
                                                                   #:allow-other-keys)
                                                            (#{id?\ 380}#
                                                              #{r\ 2465}#)
                                                            #f))
                                                        #{tmp\ 2461}#)
                                                      #f)
                                                  (@apply
                                                    (lambda (#{aok\ 2470}#
                                                             #{r\ 2471}#)
                                                      (#{rest\ 2275}#
                                                        #{r\ 2471}#
                                                        #{req\ 2383}#
                                                        #{opt\ 2384}#
                                                        (cons #t
                                                              (reverse
                                                                #{rkey\ 2385}#))))
                                                    #{tmp\ 2461}#)
                                                  (let ((#{tmp\ 2472}#
                                                          ($sc-dispatch
                                                            #{tmp\ 2390}#
                                                            '(any any))))
                                                    (if (if #{tmp\ 2472}#
                                                          (@apply
                                                            (lambda (#{a\ 2475}#
                                                                     #{b\ 2476}#)
                                                              (eq? (syntax->datum
                                                                     #{a\ 2475}#)
                                                                   #:rest))
                                                            #{tmp\ 2472}#)
                                                          #f)
                                                      (@apply
                                                        (lambda (#{a\ 2479}#
                                                                 #{b\ 2480}#)
                                                          (#{rest\ 2275}#
                                                            #{b\ 2480}#
                                                            #{req\ 2383}#
                                                            #{opt\ 2384}#
                                                            (cons #f
                                                                  (reverse
                                                                    #{rkey\ 2385}#))))
                                                        #{tmp\ 2472}#)
                                                      (let ((#{tmp\ 2481}#
                                                              (list #{tmp\ 2390}#)))
                                                        (if (if #{tmp\ 2481}#
                                                              (@apply
                                                                (lambda (#{r\ 2483}#)
                                                                  (#{id?\ 380}#
                                                                    #{r\ 2483}#))
                                                                #{tmp\ 2481}#)
                                                              #f)
                                                          (@apply
                                                            (lambda (#{r\ 2485}#)
                                                              (#{rest\ 2275}#
                                                                #{r\ 2485}#
                                                                #{req\ 2383}#
                                                                #{opt\ 2384}#
                                                                (cons #f
                                                                      (reverse
                                                                        #{rkey\ 2385}#))))
                                                            #{tmp\ 2481}#)
                                                          (let ((#{else\ 2487}#
                                                                  #{tmp\ 2390}#))
                                                            (syntax-violation
                                                              'lambda*
                                                              "invalid keyword argument list"
                                                              #{orig-args\ 2266}#
                                                              #{args\ 2382}#)))))))))))))))))))))))
                (#{rest\ 2275}#
                  (lambda (#{args\ 2488}#
                           #{req\ 2489}#
                           #{opt\ 2490}#
                           #{kw\ 2491}#)
                    (let ((#{tmp\ 2496}# #{args\ 2488}#))
                      (let ((#{tmp\ 2497}# (list #{tmp\ 2496}#)))
                        (if (if #{tmp\ 2497}#
                              (@apply
                                (lambda (#{r\ 2499}#)
                                  (#{id?\ 380}# #{r\ 2499}#))
                                #{tmp\ 2497}#)
                              #f)
                          (@apply
                            (lambda (#{r\ 2501}#)
                              (#{check\ 2277}#
                                #{req\ 2489}#
                                #{opt\ 2490}#
                                #{r\ 2501}#
                                #{kw\ 2491}#))
                            #{tmp\ 2497}#)
                          (let ((#{else\ 2503}# #{tmp\ 2496}#))
                            (syntax-violation
                              'lambda*
                              "invalid rest argument"
                              #{orig-args\ 2266}#
                              #{args\ 2488}#)))))))
                (#{check\ 2277}#
                  (lambda (#{req\ 2504}#
                           #{opt\ 2505}#
                           #{rest\ 2506}#
                           #{kw\ 2507}#)
                    (if (#{distinct-bound-ids?\ 442}#
                          (append
                            #{req\ 2504}#
                            (map car #{opt\ 2505}#)
                            (if #{rest\ 2506}# (list #{rest\ 2506}#) '())
                            (if (pair? #{kw\ 2507}#)
                              (map cadr (cdr #{kw\ 2507}#))
                              '())))
                      (values
                        #{req\ 2504}#
                        #{opt\ 2505}#
                        #{rest\ 2506}#
                        #{kw\ 2507}#)
                      (syntax-violation
                        'lambda*
                        "duplicate identifier in argument list"
                        #{orig-args\ 2266}#)))))
               (begin (#{req\ 2269}# #{orig-args\ 2266}# '())))))
         (#{chi-lambda-case\ 484}#
           (lambda (#{e\ 2515}#
                    #{r\ 2516}#
                    #{w\ 2517}#
                    #{s\ 2518}#
                    #{mod\ 2519}#
                    #{get-formals\ 2520}#
                    #{clauses\ 2521}#)
             (letrec*
               ((#{expand-req\ 2530}#
                  (lambda (#{req\ 2537}#
                           #{opt\ 2538}#
                           #{rest\ 2539}#
                           #{kw\ 2540}#
                           #{body\ 2541}#)
                    (begin
                      (let ((#{vars\ 2549}#
                              (map #{gen-var\ 488}# #{req\ 2537}#))
                            (#{labels\ 2550}#
                              (#{gen-labels\ 395}# #{req\ 2537}#)))
                        (begin
                          (let ((#{r*\ 2553}#
                                  (#{extend-var-env\ 370}#
                                    #{labels\ 2550}#
                                    #{vars\ 2549}#
                                    #{r\ 2516}#))
                                (#{w*\ 2554}#
                                  (#{make-binding-wrap\ 424}#
                                    #{req\ 2537}#
                                    #{labels\ 2550}#
                                    #{w\ 2517}#)))
                            (#{expand-opt\ 2532}#
                              (map syntax->datum #{req\ 2537}#)
                              #{opt\ 2538}#
                              #{rest\ 2539}#
                              #{kw\ 2540}#
                              #{body\ 2541}#
                              (reverse #{vars\ 2549}#)
                              #{r*\ 2553}#
                              #{w*\ 2554}#
                              '()
                              '())))))))
                (#{expand-opt\ 2532}#
                  (lambda (#{req\ 2555}#
                           #{opt\ 2556}#
                           #{rest\ 2557}#
                           #{kw\ 2558}#
                           #{body\ 2559}#
                           #{vars\ 2560}#
                           #{r*\ 2561}#
                           #{w*\ 2562}#
                           #{out\ 2563}#
                           #{inits\ 2564}#)
                    (if (pair? #{opt\ 2556}#)
                      (let ((#{tmp\ 2577}# (car #{opt\ 2556}#)))
                        (let ((#{tmp\ 2578}#
                                ($sc-dispatch #{tmp\ 2577}# '(any any))))
                          (if #{tmp\ 2578}#
                            (@apply
                              (lambda (#{id\ 2581}# #{i\ 2582}#)
                                (begin
                                  (let ((#{v\ 2585}#
                                          (#{gen-var\ 488}# #{id\ 2581}#)))
                                    (begin
                                      (let ((#{l\ 2587}#
                                              (#{gen-labels\ 395}#
                                                (list #{v\ 2585}#))))
                                        (begin
                                          (let ((#{r**\ 2589}#
                                                  (#{extend-var-env\ 370}#
                                                    #{l\ 2587}#
                                                    (list #{v\ 2585}#)
                                                    #{r*\ 2561}#)))
                                            (begin
                                              (let ((#{w**\ 2591}#
                                                      (#{make-binding-wrap\ 424}#
                                                        (list #{id\ 2581}#)
                                                        #{l\ 2587}#
                                                        #{w*\ 2562}#)))
                                                (#{expand-opt\ 2532}#
                                                  #{req\ 2555}#
                                                  (cdr #{opt\ 2556}#)
                                                  #{rest\ 2557}#
                                                  #{kw\ 2558}#
                                                  #{body\ 2559}#
                                                  (cons #{v\ 2585}#
                                                        #{vars\ 2560}#)
                                                  #{r**\ 2589}#
                                                  #{w**\ 2591}#
                                                  (cons (syntax->datum
                                                          #{id\ 2581}#)
                                                        #{out\ 2563}#)
                                                  (cons (#{chi\ 460}#
                                                          #{i\ 2582}#
                                                          #{r*\ 2561}#
                                                          #{w*\ 2562}#
                                                          #{mod\ 2519}#)
                                                        #{inits\ 2564}#)))))))))))
                              #{tmp\ 2578}#)
                            (syntax-violation
                              #f
                              "source expression failed to match any pattern"
                              #{tmp\ 2577}#))))
                      (if #{rest\ 2557}#
                        (begin
                          (let ((#{v\ 2596}#
                                  (#{gen-var\ 488}# #{rest\ 2557}#)))
                            (begin
                              (let ((#{l\ 2598}#
                                      (#{gen-labels\ 395}#
                                        (list #{v\ 2596}#))))
                                (begin
                                  (let ((#{r*\ 2600}#
                                          (#{extend-var-env\ 370}#
                                            #{l\ 2598}#
                                            (list #{v\ 2596}#)
                                            #{r*\ 2561}#)))
                                    (begin
                                      (let ((#{w*\ 2602}#
                                              (#{make-binding-wrap\ 424}#
                                                (list #{rest\ 2557}#)
                                                #{l\ 2598}#
                                                #{w*\ 2562}#)))
                                        (#{expand-kw\ 2534}#
                                          #{req\ 2555}#
                                          (if (pair? #{out\ 2563}#)
                                            (reverse #{out\ 2563}#)
                                            #f)
                                          (syntax->datum #{rest\ 2557}#)
                                          (if (pair? #{kw\ 2558}#)
                                            (cdr #{kw\ 2558}#)
                                            #{kw\ 2558}#)
                                          #{body\ 2559}#
                                          (cons #{v\ 2596}# #{vars\ 2560}#)
                                          #{r*\ 2600}#
                                          #{w*\ 2602}#
                                          (if (pair? #{kw\ 2558}#)
                                            (car #{kw\ 2558}#)
                                            #f)
                                          '()
                                          #{inits\ 2564}#)))))))))
                        (#{expand-kw\ 2534}#
                          #{req\ 2555}#
                          (if (pair? #{out\ 2563}#)
                            (reverse #{out\ 2563}#)
                            #f)
                          #f
                          (if (pair? #{kw\ 2558}#)
                            (cdr #{kw\ 2558}#)
                            #{kw\ 2558}#)
                          #{body\ 2559}#
                          #{vars\ 2560}#
                          #{r*\ 2561}#
                          #{w*\ 2562}#
                          (if (pair? #{kw\ 2558}#) (car #{kw\ 2558}#) #f)
                          '()
                          #{inits\ 2564}#)))))
                (#{expand-kw\ 2534}#
                  (lambda (#{req\ 2604}#
                           #{opt\ 2605}#
                           #{rest\ 2606}#
                           #{kw\ 2607}#
                           #{body\ 2608}#
                           #{vars\ 2609}#
                           #{r*\ 2610}#
                           #{w*\ 2611}#
                           #{aok\ 2612}#
                           #{out\ 2613}#
                           #{inits\ 2614}#)
                    (if (pair? #{kw\ 2607}#)
                      (let ((#{tmp\ 2628}# (car #{kw\ 2607}#)))
                        (let ((#{tmp\ 2629}#
                                ($sc-dispatch #{tmp\ 2628}# '(any any any))))
                          (if #{tmp\ 2629}#
                            (@apply
                              (lambda (#{k\ 2633}# #{id\ 2634}# #{i\ 2635}#)
                                (begin
                                  (let ((#{v\ 2638}#
                                          (#{gen-var\ 488}# #{id\ 2634}#)))
                                    (begin
                                      (let ((#{l\ 2640}#
                                              (#{gen-labels\ 395}#
                                                (list #{v\ 2638}#))))
                                        (begin
                                          (let ((#{r**\ 2642}#
                                                  (#{extend-var-env\ 370}#
                                                    #{l\ 2640}#
                                                    (list #{v\ 2638}#)
                                                    #{r*\ 2610}#)))
                                            (begin
                                              (let ((#{w**\ 2644}#
                                                      (#{make-binding-wrap\ 424}#
                                                        (list #{id\ 2634}#)
                                                        #{l\ 2640}#
                                                        #{w*\ 2611}#)))
                                                (#{expand-kw\ 2534}#
                                                  #{req\ 2604}#
                                                  #{opt\ 2605}#
                                                  #{rest\ 2606}#
                                                  (cdr #{kw\ 2607}#)
                                                  #{body\ 2608}#
                                                  (cons #{v\ 2638}#
                                                        #{vars\ 2609}#)
                                                  #{r**\ 2642}#
                                                  #{w**\ 2644}#
                                                  #{aok\ 2612}#
                                                  (cons (list (syntax->datum
                                                                #{k\ 2633}#)
                                                              (syntax->datum
                                                                #{id\ 2634}#)
                                                              #{v\ 2638}#)
                                                        #{out\ 2613}#)
                                                  (cons (#{chi\ 460}#
                                                          #{i\ 2635}#
                                                          #{r*\ 2610}#
                                                          #{w*\ 2611}#
                                                          #{mod\ 2519}#)
                                                        #{inits\ 2614}#)))))))))))
                              #{tmp\ 2629}#)
                            (syntax-violation
                              #f
                              "source expression failed to match any pattern"
                              #{tmp\ 2628}#))))
                      (#{expand-body\ 2536}#
                        #{req\ 2604}#
                        #{opt\ 2605}#
                        #{rest\ 2606}#
                        (if (begin
                              (let ((#{t\ 2648}# #{aok\ 2612}#))
                                (if #{t\ 2648}#
                                  #{t\ 2648}#
                                  (pair? #{out\ 2613}#))))
                          (cons #{aok\ 2612}# (reverse #{out\ 2613}#))
                          #f)
                        #{body\ 2608}#
                        (reverse #{vars\ 2609}#)
                        #{r*\ 2610}#
                        #{w*\ 2611}#
                        (reverse #{inits\ 2614}#)
                        '()))))
                (#{expand-body\ 2536}#
                  (lambda (#{req\ 2650}#
                           #{opt\ 2651}#
                           #{rest\ 2652}#
                           #{kw\ 2653}#
                           #{body\ 2654}#
                           #{vars\ 2655}#
                           #{r*\ 2656}#
                           #{w*\ 2657}#
                           #{inits\ 2658}#
                           #{meta\ 2659}#)
                    (let ((#{tmp\ 2670}# #{body\ 2654}#))
                      (let ((#{tmp\ 2671}#
                              ($sc-dispatch
                                #{tmp\ 2670}#
                                '(any any . each-any))))
                        (if (if #{tmp\ 2671}#
                              (@apply
                                (lambda (#{docstring\ 2675}#
                                         #{e1\ 2676}#
                                         #{e2\ 2677}#)
                                  (string?
                                    (syntax->datum #{docstring\ 2675}#)))
                                #{tmp\ 2671}#)
                              #f)
                          (@apply
                            (lambda (#{docstring\ 2681}#
                                     #{e1\ 2682}#
                                     #{e2\ 2683}#)
                              (#{expand-body\ 2536}#
                                #{req\ 2650}#
                                #{opt\ 2651}#
                                #{rest\ 2652}#
                                #{kw\ 2653}#
                                (cons #{e1\ 2682}# #{e2\ 2683}#)
                                #{vars\ 2655}#
                                #{r*\ 2656}#
                                #{w*\ 2657}#
                                #{inits\ 2658}#
                                (append
                                  #{meta\ 2659}#
                                  (list (cons 'documentation
                                              (syntax->datum
                                                #{docstring\ 2681}#))))))
                            #{tmp\ 2671}#)
                          (let ((#{tmp\ 2686}#
                                  ($sc-dispatch
                                    #{tmp\ 2670}#
                                    '(#(vector #(each (any . any)))
                                      any
                                      .
                                      each-any))))
                            (if #{tmp\ 2686}#
                              (@apply
                                (lambda (#{k\ 2691}#
                                         #{v\ 2692}#
                                         #{e1\ 2693}#
                                         #{e2\ 2694}#)
                                  (#{expand-body\ 2536}#
                                    #{req\ 2650}#
                                    #{opt\ 2651}#
                                    #{rest\ 2652}#
                                    #{kw\ 2653}#
                                    (cons #{e1\ 2693}# #{e2\ 2694}#)
                                    #{vars\ 2655}#
                                    #{r*\ 2656}#
                                    #{w*\ 2657}#
                                    #{inits\ 2658}#
                                    (append
                                      #{meta\ 2659}#
                                      (syntax->datum
                                        (map cons #{k\ 2691}# #{v\ 2692}#)))))
                                #{tmp\ 2686}#)
                              (let ((#{tmp\ 2698}#
                                      ($sc-dispatch
                                        #{tmp\ 2670}#
                                        '(any . each-any))))
                                (if #{tmp\ 2698}#
                                  (@apply
                                    (lambda (#{e1\ 2701}# #{e2\ 2702}#)
                                      (values
                                        #{meta\ 2659}#
                                        #{req\ 2650}#
                                        #{opt\ 2651}#
                                        #{rest\ 2652}#
                                        #{kw\ 2653}#
                                        #{inits\ 2658}#
                                        #{vars\ 2655}#
                                        (#{chi-body\ 468}#
                                          (cons #{e1\ 2701}# #{e2\ 2702}#)
                                          (#{source-wrap\ 448}#
                                            #{e\ 2515}#
                                            #{w\ 2517}#
                                            #{s\ 2518}#
                                            #{mod\ 2519}#)
                                          #{r*\ 2656}#
                                          #{w*\ 2657}#
                                          #{mod\ 2519}#)))
                                    #{tmp\ 2698}#)
                                  (syntax-violation
                                    #f
                                    "source expression failed to match any pattern"
                                    #{tmp\ 2670}#)))))))))))
               (begin
                 (let ((#{tmp\ 2704}# #{clauses\ 2521}#))
                   (let ((#{tmp\ 2705}# ($sc-dispatch #{tmp\ 2704}# '())))
                     (if #{tmp\ 2705}#
                       (@apply
                         (lambda () (values '() #f))
                         #{tmp\ 2705}#)
                       (let ((#{tmp\ 2706}#
                               ($sc-dispatch
                                 #{tmp\ 2704}#
                                 '((any any . each-any)
                                   .
                                   #(each (any any . each-any))))))
                         (if #{tmp\ 2706}#
                           (@apply
                             (lambda (#{args\ 2713}#
                                      #{e1\ 2714}#
                                      #{e2\ 2715}#
                                      #{args*\ 2716}#
                                      #{e1*\ 2717}#
                                      #{e2*\ 2718}#)
                               (call-with-values
                                 (lambda ()
                                   (#{get-formals\ 2520}# #{args\ 2713}#))
                                 (lambda (#{req\ 2719}#
                                          #{opt\ 2720}#
                                          #{rest\ 2721}#
                                          #{kw\ 2722}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{expand-req\ 2530}#
                                         #{req\ 2719}#
                                         #{opt\ 2720}#
                                         #{rest\ 2721}#
                                         #{kw\ 2722}#
                                         (cons #{e1\ 2714}# #{e2\ 2715}#)))
                                     (lambda (#{meta\ 2728}#
                                              #{req\ 2729}#
                                              #{opt\ 2730}#
                                              #{rest\ 2731}#
                                              #{kw\ 2732}#
                                              #{inits\ 2733}#
                                              #{vars\ 2734}#
                                              #{body\ 2735}#)
                                       (call-with-values
                                         (lambda ()
                                           (#{chi-lambda-case\ 484}#
                                             #{e\ 2515}#
                                             #{r\ 2516}#
                                             #{w\ 2517}#
                                             #{s\ 2518}#
                                             #{mod\ 2519}#
                                             #{get-formals\ 2520}#
                                             (map (lambda (#{tmp\ 2746}#
                                                           #{tmp\ 2745}#
                                                           #{tmp\ 2744}#)
                                                    (cons #{tmp\ 2744}#
                                                          (cons #{tmp\ 2745}#
                                                                #{tmp\ 2746}#)))
                                                  #{e2*\ 2718}#
                                                  #{e1*\ 2717}#
                                                  #{args*\ 2716}#)))
                                         (lambda (#{meta*\ 2748}#
                                                  #{else*\ 2749}#)
                                           (values
                                             (append
                                               #{meta\ 2728}#
                                               #{meta*\ 2748}#)
                                             (#{build-lambda-case\ 328}#
                                               #{s\ 2518}#
                                               #{req\ 2729}#
                                               #{opt\ 2730}#
                                               #{rest\ 2731}#
                                               #{kw\ 2732}#
                                               #{inits\ 2733}#
                                               #{vars\ 2734}#
                                               #{body\ 2735}#
                                               #{else*\ 2749}#)))))))))
                             #{tmp\ 2706}#)
                           (syntax-violation
                             #f
                             "source expression failed to match any pattern"
                             #{tmp\ 2704}#))))))))))
         (#{strip\ 486}#
           (lambda (#{x\ 2752}# #{w\ 2753}#)
             (if (memq 'top (car #{w\ 2753}#))
               #{x\ 2752}#
               (letrec*
                 ((#{f\ 2760}#
                    (lambda (#{x\ 2761}#)
                      (if (#{syntax-object?\ 346}# #{x\ 2761}#)
                        (#{strip\ 486}#
                          (#{syntax-object-expression\ 348}# #{x\ 2761}#)
                          (#{syntax-object-wrap\ 350}# #{x\ 2761}#))
                        (if (pair? #{x\ 2761}#)
                          (begin
                            (let ((#{a\ 2768}# (#{f\ 2760}# (car #{x\ 2761}#)))
                                  (#{d\ 2769}#
                                    (#{f\ 2760}# (cdr #{x\ 2761}#))))
                              (if (if (eq? #{a\ 2768}# (car #{x\ 2761}#))
                                    (eq? #{d\ 2769}# (cdr #{x\ 2761}#))
                                    #f)
                                #{x\ 2761}#
                                (cons #{a\ 2768}# #{d\ 2769}#))))
                          (if (vector? #{x\ 2761}#)
                            (begin
                              (let ((#{old\ 2775}# (vector->list #{x\ 2761}#)))
                                (begin
                                  (let ((#{new\ 2777}#
                                          (map #{f\ 2760}# #{old\ 2775}#)))
                                    (if (#{and-map*\ 38}#
                                          eq?
                                          #{old\ 2775}#
                                          #{new\ 2777}#)
                                      #{x\ 2761}#
                                      (list->vector #{new\ 2777}#))))))
                            #{x\ 2761}#))))))
                 (begin (#{f\ 2760}# #{x\ 2752}#))))))
         (#{gen-var\ 488}#
           (lambda (#{id\ 2779}#)
             (begin
               (let ((#{id\ 2782}#
                       (if (#{syntax-object?\ 346}# #{id\ 2779}#)
                         (#{syntax-object-expression\ 348}# #{id\ 2779}#)
                         #{id\ 2779}#)))
                 (gensym
                   (string-append (symbol->string #{id\ 2782}#) " "))))))
         (#{lambda-var-list\ 490}#
           (lambda (#{vars\ 2784}#)
             (letrec*
               ((#{lvl\ 2790}#
                  (lambda (#{vars\ 2791}# #{ls\ 2792}# #{w\ 2793}#)
                    (if (pair? #{vars\ 2791}#)
                      (#{lvl\ 2790}#
                        (cdr #{vars\ 2791}#)
                        (cons (#{wrap\ 446}#
                                (car #{vars\ 2791}#)
                                #{w\ 2793}#
                                #f)
                              #{ls\ 2792}#)
                        #{w\ 2793}#)
                      (if (#{id?\ 380}# #{vars\ 2791}#)
                        (cons (#{wrap\ 446}# #{vars\ 2791}# #{w\ 2793}# #f)
                              #{ls\ 2792}#)
                        (if (null? #{vars\ 2791}#)
                          #{ls\ 2792}#
                          (if (#{syntax-object?\ 346}# #{vars\ 2791}#)
                            (#{lvl\ 2790}#
                              (#{syntax-object-expression\ 348}#
                                #{vars\ 2791}#)
                              #{ls\ 2792}#
                              (#{join-wraps\ 428}#
                                #{w\ 2793}#
                                (#{syntax-object-wrap\ 350}# #{vars\ 2791}#)))
                            (cons #{vars\ 2791}# #{ls\ 2792}#))))))))
               (begin (#{lvl\ 2790}# #{vars\ 2784}# '() '(())))))))
        (begin
          (set! #{make-primitive-ref\ 244}#
            (lambda (#{src\ 756}# #{name\ 757}#)
              (make-struct/no-tail
                (vector-ref %expanded-vtables 2)
                #{src\ 756}#
                #{name\ 757}#)))
          (set! #{fx+\ 283}# +)
          (set! #{fx-\ 285}# -)
          (set! #{fx=\ 287}# =)
          (set! #{fx<\ 289}# <)
          (set! #{set-syntax-object-expression!\ 354}#
            (lambda (#{x\ 1134}# #{update\ 1135}#)
              (vector-set! #{x\ 1134}# 1 #{update\ 1135}#)))
          (set! #{set-syntax-object-wrap!\ 356}#
            (lambda (#{x\ 1138}# #{update\ 1139}#)
              (vector-set! #{x\ 1138}# 2 #{update\ 1139}#)))
          (set! #{set-syntax-object-module!\ 358}#
            (lambda (#{x\ 1142}# #{update\ 1143}#)
              (vector-set! #{x\ 1142}# 3 #{update\ 1143}#)))
          (set! #{ribcage?\ 400}#
            (lambda (#{x\ 1223}#)
              (if (vector? #{x\ 1223}#)
                (if (= (vector-length #{x\ 1223}#) 4)
                  (eq? (vector-ref #{x\ 1223}# 0) 'ribcage)
                  #f)
                #f)))
          (begin
            (#{global-extend\ 376}#
              'local-syntax
              'letrec-syntax
              #t)
            (#{global-extend\ 376}#
              'local-syntax
              'let-syntax
              #f)
            (#{global-extend\ 376}#
              'core
              'fluid-let-syntax
              (lambda (#{e\ 2804}#
                       #{r\ 2805}#
                       #{w\ 2806}#
                       #{s\ 2807}#
                       #{mod\ 2808}#)
                (let ((#{tmp\ 2814}# #{e\ 2804}#))
                  (let ((#{tmp\ 2815}#
                          ($sc-dispatch
                            #{tmp\ 2814}#
                            '(_ #(each (any any)) any . each-any))))
                    (if (if #{tmp\ 2815}#
                          (@apply
                            (lambda (#{var\ 2820}#
                                     #{val\ 2821}#
                                     #{e1\ 2822}#
                                     #{e2\ 2823}#)
                              (#{valid-bound-ids?\ 440}# #{var\ 2820}#))
                            #{tmp\ 2815}#)
                          #f)
                      (@apply
                        (lambda (#{var\ 2829}#
                                 #{val\ 2830}#
                                 #{e1\ 2831}#
                                 #{e2\ 2832}#)
                          (begin
                            (let ((#{names\ 2834}#
                                    (map (lambda (#{x\ 2835}#)
                                           (#{id-var-name\ 434}#
                                             #{x\ 2835}#
                                             #{w\ 2806}#))
                                         #{var\ 2829}#)))
                              (begin
                                (for-each
                                  (lambda (#{id\ 2838}# #{n\ 2839}#)
                                    (begin
                                      (let ((#{atom-key\ 2844}#
                                              (car (#{lookup\ 374}#
                                                     #{n\ 2839}#
                                                     #{r\ 2805}#
                                                     #{mod\ 2808}#))))
                                        (if (eqv? #{atom-key\ 2844}#
                                                  'displaced-lexical)
                                          (syntax-violation
                                            'fluid-let-syntax
                                            "identifier out of context"
                                            #{e\ 2804}#
                                            (#{source-wrap\ 448}#
                                              #{id\ 2838}#
                                              #{w\ 2806}#
                                              #{s\ 2807}#
                                              #{mod\ 2808}#))))))
                                  #{var\ 2829}#
                                  #{names\ 2834}#)
                                (#{chi-body\ 468}#
                                  (cons #{e1\ 2831}# #{e2\ 2832}#)
                                  (#{source-wrap\ 448}#
                                    #{e\ 2804}#
                                    #{w\ 2806}#
                                    #{s\ 2807}#
                                    #{mod\ 2808}#)
                                  (#{extend-env\ 368}#
                                    #{names\ 2834}#
                                    (begin
                                      (let ((#{trans-r\ 2850}#
                                              (#{macros-only-env\ 372}#
                                                #{r\ 2805}#)))
                                        (map (lambda (#{x\ 2851}#)
                                               (cons 'macro
                                                     (#{eval-local-transformer\ 472}#
                                                       (#{chi\ 460}#
                                                         #{x\ 2851}#
                                                         #{trans-r\ 2850}#
                                                         #{w\ 2806}#
                                                         #{mod\ 2808}#)
                                                       #{mod\ 2808}#)))
                                             #{val\ 2830}#)))
                                    #{r\ 2805}#)
                                  #{w\ 2806}#
                                  #{mod\ 2808}#)))))
                        #{tmp\ 2815}#)
                      (let ((#{_\ 2856}# #{tmp\ 2814}#))
                        (syntax-violation
                          'fluid-let-syntax
                          "bad syntax"
                          (#{source-wrap\ 448}#
                            #{e\ 2804}#
                            #{w\ 2806}#
                            #{s\ 2807}#
                            #{mod\ 2808}#))))))))
            (#{global-extend\ 376}#
              'core
              'quote
              (lambda (#{e\ 2857}#
                       #{r\ 2858}#
                       #{w\ 2859}#
                       #{s\ 2860}#
                       #{mod\ 2861}#)
                (let ((#{tmp\ 2867}# #{e\ 2857}#))
                  (let ((#{tmp\ 2868}#
                          ($sc-dispatch #{tmp\ 2867}# '(_ any))))
                    (if #{tmp\ 2868}#
                      (@apply
                        (lambda (#{e\ 2870}#)
                          (#{build-data\ 332}#
                            #{s\ 2860}#
                            (#{strip\ 486}# #{e\ 2870}# #{w\ 2859}#)))
                        #{tmp\ 2868}#)
                      (let ((#{_\ 2872}# #{tmp\ 2867}#))
                        (syntax-violation
                          'quote
                          "bad syntax"
                          (#{source-wrap\ 448}#
                            #{e\ 2857}#
                            #{w\ 2859}#
                            #{s\ 2860}#
                            #{mod\ 2861}#))))))))
            (#{global-extend\ 376}#
              'core
              'syntax
              (letrec*
                ((#{gen-syntax\ 2874}#
                   (lambda (#{src\ 2889}#
                            #{e\ 2890}#
                            #{r\ 2891}#
                            #{maps\ 2892}#
                            #{ellipsis?\ 2893}#
                            #{mod\ 2894}#)
                     (if (#{id?\ 380}# #{e\ 2890}#)
                       (begin
                         (let ((#{label\ 2902}#
                                 (#{id-var-name\ 434}# #{e\ 2890}# '(()))))
                           (begin
                             (let ((#{b\ 2905}#
                                     (#{lookup\ 374}#
                                       #{label\ 2902}#
                                       #{r\ 2891}#
                                       #{mod\ 2894}#)))
                               (if (eq? (car #{b\ 2905}#) 'syntax)
                                 (call-with-values
                                   (lambda ()
                                     (begin
                                       (let ((#{var.lev\ 2908}#
                                               (cdr #{b\ 2905}#)))
                                         (#{gen-ref\ 2876}#
                                           #{src\ 2889}#
                                           (car #{var.lev\ 2908}#)
                                           (cdr #{var.lev\ 2908}#)
                                           #{maps\ 2892}#))))
                                   (lambda (#{var\ 2910}# #{maps\ 2911}#)
                                     (values
                                       (list 'ref #{var\ 2910}#)
                                       #{maps\ 2911}#)))
                                 (if (#{ellipsis?\ 2893}# #{e\ 2890}#)
                                   (syntax-violation
                                     'syntax
                                     "misplaced ellipsis"
                                     #{src\ 2889}#)
                                   (values
                                     (list 'quote #{e\ 2890}#)
                                     #{maps\ 2892}#)))))))
                       (let ((#{tmp\ 2916}# #{e\ 2890}#))
                         (let ((#{tmp\ 2917}#
                                 ($sc-dispatch #{tmp\ 2916}# '(any any))))
                           (if (if #{tmp\ 2917}#
                                 (@apply
                                   (lambda (#{dots\ 2920}# #{e\ 2921}#)
                                     (#{ellipsis?\ 2893}# #{dots\ 2920}#))
                                   #{tmp\ 2917}#)
                                 #f)
                             (@apply
                               (lambda (#{dots\ 2924}# #{e\ 2925}#)
                                 (#{gen-syntax\ 2874}#
                                   #{src\ 2889}#
                                   #{e\ 2925}#
                                   #{r\ 2891}#
                                   #{maps\ 2892}#
                                   (lambda (#{x\ 2926}#) #f)
                                   #{mod\ 2894}#))
                               #{tmp\ 2917}#)
                             (let ((#{tmp\ 2928}#
                                     ($sc-dispatch
                                       #{tmp\ 2916}#
                                       '(any any . any))))
                               (if (if #{tmp\ 2928}#
                                     (@apply
                                       (lambda (#{x\ 2932}#
                                                #{dots\ 2933}#
                                                #{y\ 2934}#)
                                         (#{ellipsis?\ 2893}# #{dots\ 2933}#))
                                       #{tmp\ 2928}#)
                                     #f)
                                 (@apply
                                   (lambda (#{x\ 2938}#
                                            #{dots\ 2939}#
                                            #{y\ 2940}#)
                                     (letrec*
                                       ((#{f\ 2944}#
                                          (lambda (#{y\ 2945}# #{k\ 2946}#)
                                            (let ((#{tmp\ 2953}# #{y\ 2945}#))
                                              (let ((#{tmp\ 2954}#
                                                      ($sc-dispatch
                                                        #{tmp\ 2953}#
                                                        '(any . any))))
                                                (if (if #{tmp\ 2954}#
                                                      (@apply
                                                        (lambda (#{dots\ 2957}#
                                                                 #{y\ 2958}#)
                                                          (#{ellipsis?\ 2893}#
                                                            #{dots\ 2957}#))
                                                        #{tmp\ 2954}#)
                                                      #f)
                                                  (@apply
                                                    (lambda (#{dots\ 2961}#
                                                             #{y\ 2962}#)
                                                      (#{f\ 2944}#
                                                        #{y\ 2962}#
                                                        (lambda (#{maps\ 2963}#)
                                                          (call-with-values
                                                            (lambda ()
                                                              (#{k\ 2946}#
                                                                (cons '()
                                                                      #{maps\ 2963}#)))
                                                            (lambda (#{x\ 2965}#
                                                                     #{maps\ 2966}#)
                                                              (if (null? (car #{maps\ 2966}#))
                                                                (syntax-violation
                                                                  'syntax
                                                                  "extra ellipsis"
                                                                  #{src\ 2889}#)
                                                                (values
                                                                  (#{gen-mappend\ 2878}#
                                                                    #{x\ 2965}#
                                                                    (car #{maps\ 2966}#))
                                                                  (cdr #{maps\ 2966}#))))))))
                                                    #{tmp\ 2954}#)
                                                  (let ((#{_\ 2970}#
                                                          #{tmp\ 2953}#))
                                                    (call-with-values
                                                      (lambda ()
                                                        (#{gen-syntax\ 2874}#
                                                          #{src\ 2889}#
                                                          #{y\ 2945}#
                                                          #{r\ 2891}#
                                                          #{maps\ 2892}#
                                                          #{ellipsis?\ 2893}#
                                                          #{mod\ 2894}#))
                                                      (lambda (#{y\ 2971}#
                                                               #{maps\ 2972}#)
                                                        (call-with-values
                                                          (lambda ()
                                                            (#{k\ 2946}#
                                                              #{maps\ 2972}#))
                                                          (lambda (#{x\ 2975}#
                                                                   #{maps\ 2976}#)
                                                            (values
                                                              (#{gen-append\ 2884}#
                                                                #{x\ 2975}#
                                                                #{y\ 2971}#)
                                                              #{maps\ 2976}#))))))))))))
                                       (begin
                                         (#{f\ 2944}#
                                           #{y\ 2940}#
                                           (lambda (#{maps\ 2947}#)
                                             (call-with-values
                                               (lambda ()
                                                 (#{gen-syntax\ 2874}#
                                                   #{src\ 2889}#
                                                   #{x\ 2938}#
                                                   #{r\ 2891}#
                                                   (cons '() #{maps\ 2947}#)
                                                   #{ellipsis?\ 2893}#
                                                   #{mod\ 2894}#))
                                               (lambda (#{x\ 2949}#
                                                        #{maps\ 2950}#)
                                                 (if (null? (car #{maps\ 2950}#))
                                                   (syntax-violation
                                                     'syntax
                                                     "extra ellipsis"
                                                     #{src\ 2889}#)
                                                   (values
                                                     (#{gen-map\ 2880}#
                                                       #{x\ 2949}#
                                                       (car #{maps\ 2950}#))
                                                     (cdr #{maps\ 2950}#))))))))))
                                   #{tmp\ 2928}#)
                                 (let ((#{tmp\ 2979}#
                                         ($sc-dispatch
                                           #{tmp\ 2916}#
                                           '(any . any))))
                                   (if #{tmp\ 2979}#
                                     (@apply
                                       (lambda (#{x\ 2982}# #{y\ 2983}#)
                                         (call-with-values
                                           (lambda ()
                                             (#{gen-syntax\ 2874}#
                                               #{src\ 2889}#
                                               #{x\ 2982}#
                                               #{r\ 2891}#
                                               #{maps\ 2892}#
                                               #{ellipsis?\ 2893}#
                                               #{mod\ 2894}#))
                                           (lambda (#{x\ 2984}# #{maps\ 2985}#)
                                             (call-with-values
                                               (lambda ()
                                                 (#{gen-syntax\ 2874}#
                                                   #{src\ 2889}#
                                                   #{y\ 2983}#
                                                   #{r\ 2891}#
                                                   #{maps\ 2985}#
                                                   #{ellipsis?\ 2893}#
                                                   #{mod\ 2894}#))
                                               (lambda (#{y\ 2988}#
                                                        #{maps\ 2989}#)
                                                 (values
                                                   (#{gen-cons\ 2882}#
                                                     #{x\ 2984}#
                                                     #{y\ 2988}#)
                                                   #{maps\ 2989}#))))))
                                       #{tmp\ 2979}#)
                                     (let ((#{tmp\ 2992}#
                                             ($sc-dispatch
                                               #{tmp\ 2916}#
                                               '#(vector (any . each-any)))))
                                       (if #{tmp\ 2992}#
                                         (@apply
                                           (lambda (#{e1\ 2995}# #{e2\ 2996}#)
                                             (call-with-values
                                               (lambda ()
                                                 (#{gen-syntax\ 2874}#
                                                   #{src\ 2889}#
                                                   (cons #{e1\ 2995}#
                                                         #{e2\ 2996}#)
                                                   #{r\ 2891}#
                                                   #{maps\ 2892}#
                                                   #{ellipsis?\ 2893}#
                                                   #{mod\ 2894}#))
                                               (lambda (#{e\ 2998}#
                                                        #{maps\ 2999}#)
                                                 (values
                                                   (#{gen-vector\ 2886}#
                                                     #{e\ 2998}#)
                                                   #{maps\ 2999}#))))
                                           #{tmp\ 2992}#)
                                         (let ((#{_\ 3003}# #{tmp\ 2916}#))
                                           (values
                                             (list 'quote #{e\ 2890}#)
                                             #{maps\ 2892}#))))))))))))))
                 (#{gen-ref\ 2876}#
                   (lambda (#{src\ 3005}#
                            #{var\ 3006}#
                            #{level\ 3007}#
                            #{maps\ 3008}#)
                     (if (#{fx=\ 287}# #{level\ 3007}# 0)
                       (values #{var\ 3006}# #{maps\ 3008}#)
                       (if (null? #{maps\ 3008}#)
                         (syntax-violation
                           'syntax
                           "missing ellipsis"
                           #{src\ 3005}#)
                         (call-with-values
                           (lambda ()
                             (#{gen-ref\ 2876}#
                               #{src\ 3005}#
                               #{var\ 3006}#
                               (#{fx-\ 285}# #{level\ 3007}# 1)
                               (cdr #{maps\ 3008}#)))
                           (lambda (#{outer-var\ 3013}# #{outer-maps\ 3014}#)
                             (begin
                               (let ((#{b\ 3018}#
                                       (assq #{outer-var\ 3013}#
                                             (car #{maps\ 3008}#))))
                                 (if #{b\ 3018}#
                                   (values (cdr #{b\ 3018}#) #{maps\ 3008}#)
                                   (begin
                                     (let ((#{inner-var\ 3020}#
                                             (#{gen-var\ 488}# 'tmp)))
                                       (values
                                         #{inner-var\ 3020}#
                                         (cons (cons (cons #{outer-var\ 3013}#
                                                           #{inner-var\ 3020}#)
                                                     (car #{maps\ 3008}#))
                                               #{outer-maps\ 3014}#)))))))))))))
                 (#{gen-mappend\ 2878}#
                   (lambda (#{e\ 3021}# #{map-env\ 3022}#)
                     (list 'apply
                           '(primitive append)
                           (#{gen-map\ 2880}# #{e\ 3021}# #{map-env\ 3022}#))))
                 (#{gen-map\ 2880}#
                   (lambda (#{e\ 3026}# #{map-env\ 3027}#)
                     (begin
                       (let ((#{formals\ 3032}# (map cdr #{map-env\ 3027}#))
                             (#{actuals\ 3033}#
                               (map (lambda (#{x\ 3034}#)
                                      (list 'ref (car #{x\ 3034}#)))
                                    #{map-env\ 3027}#)))
                         (if (eq? (car #{e\ 3026}#) 'ref)
                           (car #{actuals\ 3033}#)
                           (if (and-map
                                 (lambda (#{x\ 3041}#)
                                   (if (eq? (car #{x\ 3041}#) 'ref)
                                     (memq (car (cdr #{x\ 3041}#))
                                           #{formals\ 3032}#)
                                     #f))
                                 (cdr #{e\ 3026}#))
                             (cons 'map
                                   (cons (list 'primitive (car #{e\ 3026}#))
                                         (map (begin
                                                (let ((#{r\ 3047}#
                                                        (map cons
                                                             #{formals\ 3032}#
                                                             #{actuals\ 3033}#)))
                                                  (lambda (#{x\ 3048}#)
                                                    (cdr (assq (car (cdr #{x\ 3048}#))
                                                               #{r\ 3047}#)))))
                                              (cdr #{e\ 3026}#))))
                             (cons 'map
                                   (cons (list 'lambda
                                               #{formals\ 3032}#
                                               #{e\ 3026}#)
                                         #{actuals\ 3033}#))))))))
                 (#{gen-cons\ 2882}#
                   (lambda (#{x\ 3052}# #{y\ 3053}#)
                     (begin
                       (let ((#{atom-key\ 3058}# (car #{y\ 3053}#)))
                         (if (eqv? #{atom-key\ 3058}# 'quote)
                           (if (eq? (car #{x\ 3052}#) 'quote)
                             (list 'quote
                                   (cons (car (cdr #{x\ 3052}#))
                                         (car (cdr #{y\ 3053}#))))
                             (if (eq? (car (cdr #{y\ 3053}#)) '())
                               (list 'list #{x\ 3052}#)
                               (list 'cons #{x\ 3052}# #{y\ 3053}#)))
                           (if (eqv? #{atom-key\ 3058}# 'list)
                             (cons 'list (cons #{x\ 3052}# (cdr #{y\ 3053}#)))
                             (list 'cons #{x\ 3052}# #{y\ 3053}#)))))))
                 (#{gen-append\ 2884}#
                   (lambda (#{x\ 3067}# #{y\ 3068}#)
                     (if (equal? #{y\ 3068}# ''())
                       #{x\ 3067}#
                       (list 'append #{x\ 3067}# #{y\ 3068}#))))
                 (#{gen-vector\ 2886}#
                   (lambda (#{x\ 3072}#)
                     (if (eq? (car #{x\ 3072}#) 'list)
                       (cons 'vector (cdr #{x\ 3072}#))
                       (if (eq? (car #{x\ 3072}#) 'quote)
                         (list 'quote
                               (list->vector (car (cdr #{x\ 3072}#))))
                         (list 'list->vector #{x\ 3072}#)))))
                 (#{regen\ 2888}#
                   (lambda (#{x\ 3082}#)
                     (begin
                       (let ((#{atom-key\ 3086}# (car #{x\ 3082}#)))
                         (if (eqv? #{atom-key\ 3086}# 'ref)
                           (#{build-lexical-reference\ 312}#
                             'value
                             #f
                             (car (cdr #{x\ 3082}#))
                             (car (cdr #{x\ 3082}#)))
                           (if (eqv? #{atom-key\ 3086}# 'primitive)
                             (#{build-primref\ 330}#
                               #f
                               (car (cdr #{x\ 3082}#)))
                             (if (eqv? #{atom-key\ 3086}# 'quote)
                               (#{build-data\ 332}# #f (car (cdr #{x\ 3082}#)))
                               (if (eqv? #{atom-key\ 3086}# 'lambda)
                                 (if (list? (car (cdr #{x\ 3082}#)))
                                   (#{build-simple-lambda\ 324}#
                                     #f
                                     (car (cdr #{x\ 3082}#))
                                     #f
                                     (car (cdr #{x\ 3082}#))
                                     '()
                                     (#{regen\ 2888}#
                                       (car (cdr (cdr #{x\ 3082}#)))))
                                   (error "how did we get here" #{x\ 3082}#))
                                 (#{build-application\ 306}#
                                   #f
                                   (#{build-primref\ 330}#
                                     #f
                                     (car #{x\ 3082}#))
                                   (map #{regen\ 2888}#
                                        (cdr #{x\ 3082}#))))))))))))
                (begin
                  (lambda (#{e\ 3098}#
                           #{r\ 3099}#
                           #{w\ 3100}#
                           #{s\ 3101}#
                           #{mod\ 3102}#)
                    (begin
                      (let ((#{e\ 3109}#
                              (#{source-wrap\ 448}#
                                #{e\ 3098}#
                                #{w\ 3100}#
                                #{s\ 3101}#
                                #{mod\ 3102}#)))
                        (let ((#{tmp\ 3110}# #{e\ 3109}#))
                          (let ((#{tmp\ 3111}#
                                  ($sc-dispatch #{tmp\ 3110}# '(_ any))))
                            (if #{tmp\ 3111}#
                              (@apply
                                (lambda (#{x\ 3113}#)
                                  (call-with-values
                                    (lambda ()
                                      (#{gen-syntax\ 2874}#
                                        #{e\ 3109}#
                                        #{x\ 3113}#
                                        #{r\ 3099}#
                                        '()
                                        #{ellipsis?\ 476}#
                                        #{mod\ 3102}#))
                                    (lambda (#{e\ 3114}# #{maps\ 3115}#)
                                      (#{regen\ 2888}# #{e\ 3114}#))))
                                #{tmp\ 3111}#)
                              (let ((#{_\ 3119}# #{tmp\ 3110}#))
                                (syntax-violation
                                  'syntax
                                  "bad `syntax' form"
                                  #{e\ 3109}#)))))))))))
            (#{global-extend\ 376}#
              'core
              'lambda
              (lambda (#{e\ 3120}#
                       #{r\ 3121}#
                       #{w\ 3122}#
                       #{s\ 3123}#
                       #{mod\ 3124}#)
                (let ((#{tmp\ 3130}# #{e\ 3120}#))
                  (let ((#{tmp\ 3131}#
                          ($sc-dispatch
                            #{tmp\ 3130}#
                            '(_ any any . each-any))))
                    (if #{tmp\ 3131}#
                      (@apply
                        (lambda (#{args\ 3135}# #{e1\ 3136}# #{e2\ 3137}#)
                          (call-with-values
                            (lambda ()
                              (#{lambda-formals\ 478}# #{args\ 3135}#))
                            (lambda (#{req\ 3138}#
                                     #{opt\ 3139}#
                                     #{rest\ 3140}#
                                     #{kw\ 3141}#)
                              (letrec*
                                ((#{lp\ 3149}#
                                   (lambda (#{body\ 3150}# #{meta\ 3151}#)
                                     (let ((#{tmp\ 3153}# #{body\ 3150}#))
                                       (let ((#{tmp\ 3154}#
                                               ($sc-dispatch
                                                 #{tmp\ 3153}#
                                                 '(any any . each-any))))
                                         (if (if #{tmp\ 3154}#
                                               (@apply
                                                 (lambda (#{docstring\ 3158}#
                                                          #{e1\ 3159}#
                                                          #{e2\ 3160}#)
                                                   (string?
                                                     (syntax->datum
                                                       #{docstring\ 3158}#)))
                                                 #{tmp\ 3154}#)
                                               #f)
                                           (@apply
                                             (lambda (#{docstring\ 3164}#
                                                      #{e1\ 3165}#
                                                      #{e2\ 3166}#)
                                               (#{lp\ 3149}#
                                                 (cons #{e1\ 3165}#
                                                       #{e2\ 3166}#)
                                                 (append
                                                   #{meta\ 3151}#
                                                   (list (cons 'documentation
                                                               (syntax->datum
                                                                 #{docstring\ 3164}#))))))
                                             #{tmp\ 3154}#)
                                           (let ((#{tmp\ 3169}#
                                                   ($sc-dispatch
                                                     #{tmp\ 3153}#
                                                     '(#(vector
                                                         #(each (any . any)))
                                                       any
                                                       .
                                                       each-any))))
                                             (if #{tmp\ 3169}#
                                               (@apply
                                                 (lambda (#{k\ 3174}#
                                                          #{v\ 3175}#
                                                          #{e1\ 3176}#
                                                          #{e2\ 3177}#)
                                                   (#{lp\ 3149}#
                                                     (cons #{e1\ 3176}#
                                                           #{e2\ 3177}#)
                                                     (append
                                                       #{meta\ 3151}#
                                                       (syntax->datum
                                                         (map cons
                                                              #{k\ 3174}#
                                                              #{v\ 3175}#)))))
                                                 #{tmp\ 3169}#)
                                               (let ((#{_\ 3182}#
                                                       #{tmp\ 3153}#))
                                                 (#{chi-simple-lambda\ 480}#
                                                   #{e\ 3120}#
                                                   #{r\ 3121}#
                                                   #{w\ 3122}#
                                                   #{s\ 3123}#
                                                   #{mod\ 3124}#
                                                   #{req\ 3138}#
                                                   #{rest\ 3140}#
                                                   #{meta\ 3151}#
                                                   #{body\ 3150}#))))))))))
                                (begin
                                  (#{lp\ 3149}#
                                    (cons #{e1\ 3136}# #{e2\ 3137}#)
                                    '()))))))
                        #{tmp\ 3131}#)
                      (let ((#{_\ 3184}# #{tmp\ 3130}#))
                        (syntax-violation
                          'lambda
                          "bad lambda"
                          #{e\ 3120}#)))))))
            (#{global-extend\ 376}#
              'core
              'lambda*
              (lambda (#{e\ 3185}#
                       #{r\ 3186}#
                       #{w\ 3187}#
                       #{s\ 3188}#
                       #{mod\ 3189}#)
                (let ((#{tmp\ 3195}# #{e\ 3185}#))
                  (let ((#{tmp\ 3196}#
                          ($sc-dispatch
                            #{tmp\ 3195}#
                            '(_ any any . each-any))))
                    (if #{tmp\ 3196}#
                      (@apply
                        (lambda (#{args\ 3200}# #{e1\ 3201}# #{e2\ 3202}#)
                          (call-with-values
                            (lambda ()
                              (#{chi-lambda-case\ 484}#
                                #{e\ 3185}#
                                #{r\ 3186}#
                                #{w\ 3187}#
                                #{s\ 3188}#
                                #{mod\ 3189}#
                                #{lambda*-formals\ 482}#
                                (list (cons #{args\ 3200}#
                                            (cons #{e1\ 3201}#
                                                  #{e2\ 3202}#)))))
                            (lambda (#{meta\ 3204}# #{lcase\ 3205}#)
                              (#{build-case-lambda\ 326}#
                                #{s\ 3188}#
                                #{meta\ 3204}#
                                #{lcase\ 3205}#))))
                        #{tmp\ 3196}#)
                      (let ((#{_\ 3209}# #{tmp\ 3195}#))
                        (syntax-violation
                          'lambda
                          "bad lambda*"
                          #{e\ 3185}#)))))))
            (#{global-extend\ 376}#
              'core
              'case-lambda
              (lambda (#{e\ 3210}#
                       #{r\ 3211}#
                       #{w\ 3212}#
                       #{s\ 3213}#
                       #{mod\ 3214}#)
                (let ((#{tmp\ 3220}# #{e\ 3210}#))
                  (let ((#{tmp\ 3221}#
                          ($sc-dispatch
                            #{tmp\ 3220}#
                            '(_ (any any . each-any)
                                .
                                #(each (any any . each-any))))))
                    (if #{tmp\ 3221}#
                      (@apply
                        (lambda (#{args\ 3228}#
                                 #{e1\ 3229}#
                                 #{e2\ 3230}#
                                 #{args*\ 3231}#
                                 #{e1*\ 3232}#
                                 #{e2*\ 3233}#)
                          (call-with-values
                            (lambda ()
                              (#{chi-lambda-case\ 484}#
                                #{e\ 3210}#
                                #{r\ 3211}#
                                #{w\ 3212}#
                                #{s\ 3213}#
                                #{mod\ 3214}#
                                #{lambda-formals\ 478}#
                                (cons (cons #{args\ 3228}#
                                            (cons #{e1\ 3229}# #{e2\ 3230}#))
                                      (map (lambda (#{tmp\ 3237}#
                                                    #{tmp\ 3236}#
                                                    #{tmp\ 3235}#)
                                             (cons #{tmp\ 3235}#
                                                   (cons #{tmp\ 3236}#
                                                         #{tmp\ 3237}#)))
                                           #{e2*\ 3233}#
                                           #{e1*\ 3232}#
                                           #{args*\ 3231}#))))
                            (lambda (#{meta\ 3239}# #{lcase\ 3240}#)
                              (#{build-case-lambda\ 326}#
                                #{s\ 3213}#
                                #{meta\ 3239}#
                                #{lcase\ 3240}#))))
                        #{tmp\ 3221}#)
                      (let ((#{_\ 3244}# #{tmp\ 3220}#))
                        (syntax-violation
                          'case-lambda
                          "bad case-lambda"
                          #{e\ 3210}#)))))))
            (#{global-extend\ 376}#
              'core
              'case-lambda*
              (lambda (#{e\ 3245}#
                       #{r\ 3246}#
                       #{w\ 3247}#
                       #{s\ 3248}#
                       #{mod\ 3249}#)
                (let ((#{tmp\ 3255}# #{e\ 3245}#))
                  (let ((#{tmp\ 3256}#
                          ($sc-dispatch
                            #{tmp\ 3255}#
                            '(_ (any any . each-any)
                                .
                                #(each (any any . each-any))))))
                    (if #{tmp\ 3256}#
                      (@apply
                        (lambda (#{args\ 3263}#
                                 #{e1\ 3264}#
                                 #{e2\ 3265}#
                                 #{args*\ 3266}#
                                 #{e1*\ 3267}#
                                 #{e2*\ 3268}#)
                          (call-with-values
                            (lambda ()
                              (#{chi-lambda-case\ 484}#
                                #{e\ 3245}#
                                #{r\ 3246}#
                                #{w\ 3247}#
                                #{s\ 3248}#
                                #{mod\ 3249}#
                                #{lambda*-formals\ 482}#
                                (cons (cons #{args\ 3263}#
                                            (cons #{e1\ 3264}# #{e2\ 3265}#))
                                      (map (lambda (#{tmp\ 3272}#
                                                    #{tmp\ 3271}#
                                                    #{tmp\ 3270}#)
                                             (cons #{tmp\ 3270}#
                                                   (cons #{tmp\ 3271}#
                                                         #{tmp\ 3272}#)))
                                           #{e2*\ 3268}#
                                           #{e1*\ 3267}#
                                           #{args*\ 3266}#))))
                            (lambda (#{meta\ 3274}# #{lcase\ 3275}#)
                              (#{build-case-lambda\ 326}#
                                #{s\ 3248}#
                                #{meta\ 3274}#
                                #{lcase\ 3275}#))))
                        #{tmp\ 3256}#)
                      (let ((#{_\ 3279}# #{tmp\ 3255}#))
                        (syntax-violation
                          'case-lambda
                          "bad case-lambda*"
                          #{e\ 3245}#)))))))
            (#{global-extend\ 376}#
              'core
              'let
              (letrec*
                ((#{chi-let\ 3281}#
                   (lambda (#{e\ 3282}#
                            #{r\ 3283}#
                            #{w\ 3284}#
                            #{s\ 3285}#
                            #{mod\ 3286}#
                            #{constructor\ 3287}#
                            #{ids\ 3288}#
                            #{vals\ 3289}#
                            #{exps\ 3290}#)
                     (if (not (#{valid-bound-ids?\ 440}# #{ids\ 3288}#))
                       (syntax-violation
                         'let
                         "duplicate bound variable"
                         #{e\ 3282}#)
                       (begin
                         (let ((#{labels\ 3302}#
                                 (#{gen-labels\ 395}# #{ids\ 3288}#))
                               (#{new-vars\ 3303}#
                                 (map #{gen-var\ 488}# #{ids\ 3288}#)))
                           (begin
                             (let ((#{nw\ 3306}#
                                     (#{make-binding-wrap\ 424}#
                                       #{ids\ 3288}#
                                       #{labels\ 3302}#
                                       #{w\ 3284}#))
                                   (#{nr\ 3307}#
                                     (#{extend-var-env\ 370}#
                                       #{labels\ 3302}#
                                       #{new-vars\ 3303}#
                                       #{r\ 3283}#)))
                               (#{constructor\ 3287}#
                                 #{s\ 3285}#
                                 (map syntax->datum #{ids\ 3288}#)
                                 #{new-vars\ 3303}#
                                 (map (lambda (#{x\ 3308}#)
                                        (#{chi\ 460}#
                                          #{x\ 3308}#
                                          #{r\ 3283}#
                                          #{w\ 3284}#
                                          #{mod\ 3286}#))
                                      #{vals\ 3289}#)
                                 (#{chi-body\ 468}#
                                   #{exps\ 3290}#
                                   (#{source-wrap\ 448}#
                                     #{e\ 3282}#
                                     #{nw\ 3306}#
                                     #{s\ 3285}#
                                     #{mod\ 3286}#)
                                   #{nr\ 3307}#
                                   #{nw\ 3306}#
                                   #{mod\ 3286}#))))))))))
                (begin
                  (lambda (#{e\ 3310}#
                           #{r\ 3311}#
                           #{w\ 3312}#
                           #{s\ 3313}#
                           #{mod\ 3314}#)
                    (let ((#{tmp\ 3320}# #{e\ 3310}#))
                      (let ((#{tmp\ 3321}#
                              ($sc-dispatch
                                #{tmp\ 3320}#
                                '(_ #(each (any any)) any . each-any))))
                        (if (if #{tmp\ 3321}#
                              (@apply
                                (lambda (#{id\ 3326}#
                                         #{val\ 3327}#
                                         #{e1\ 3328}#
                                         #{e2\ 3329}#)
                                  (and-map #{id?\ 380}# #{id\ 3326}#))
                                #{tmp\ 3321}#)
                              #f)
                          (@apply
                            (lambda (#{id\ 3335}#
                                     #{val\ 3336}#
                                     #{e1\ 3337}#
                                     #{e2\ 3338}#)
                              (#{chi-let\ 3281}#
                                #{e\ 3310}#
                                #{r\ 3311}#
                                #{w\ 3312}#
                                #{s\ 3313}#
                                #{mod\ 3314}#
                                #{build-let\ 336}#
                                #{id\ 3335}#
                                #{val\ 3336}#
                                (cons #{e1\ 3337}# #{e2\ 3338}#)))
                            #{tmp\ 3321}#)
                          (let ((#{tmp\ 3342}#
                                  ($sc-dispatch
                                    #{tmp\ 3320}#
                                    '(_ any
                                        #(each (any any))
                                        any
                                        .
                                        each-any))))
                            (if (if #{tmp\ 3342}#
                                  (@apply
                                    (lambda (#{f\ 3348}#
                                             #{id\ 3349}#
                                             #{val\ 3350}#
                                             #{e1\ 3351}#
                                             #{e2\ 3352}#)
                                      (if (#{id?\ 380}# #{f\ 3348}#)
                                        (and-map #{id?\ 380}# #{id\ 3349}#)
                                        #f))
                                    #{tmp\ 3342}#)
                                  #f)
                              (@apply
                                (lambda (#{f\ 3361}#
                                         #{id\ 3362}#
                                         #{val\ 3363}#
                                         #{e1\ 3364}#
                                         #{e2\ 3365}#)
                                  (#{chi-let\ 3281}#
                                    #{e\ 3310}#
                                    #{r\ 3311}#
                                    #{w\ 3312}#
                                    #{s\ 3313}#
                                    #{mod\ 3314}#
                                    #{build-named-let\ 338}#
                                    (cons #{f\ 3361}# #{id\ 3362}#)
                                    #{val\ 3363}#
                                    (cons #{e1\ 3364}# #{e2\ 3365}#)))
                                #{tmp\ 3342}#)
                              (let ((#{_\ 3370}# #{tmp\ 3320}#))
                                (syntax-violation
                                  'let
                                  "bad let"
                                  (#{source-wrap\ 448}#
                                    #{e\ 3310}#
                                    #{w\ 3312}#
                                    #{s\ 3313}#
                                    #{mod\ 3314}#))))))))))))
            (#{global-extend\ 376}#
              'core
              'letrec
              (lambda (#{e\ 3371}#
                       #{r\ 3372}#
                       #{w\ 3373}#
                       #{s\ 3374}#
                       #{mod\ 3375}#)
                (let ((#{tmp\ 3381}# #{e\ 3371}#))
                  (let ((#{tmp\ 3382}#
                          ($sc-dispatch
                            #{tmp\ 3381}#
                            '(_ #(each (any any)) any . each-any))))
                    (if (if #{tmp\ 3382}#
                          (@apply
                            (lambda (#{id\ 3387}#
                                     #{val\ 3388}#
                                     #{e1\ 3389}#
                                     #{e2\ 3390}#)
                              (and-map #{id?\ 380}# #{id\ 3387}#))
                            #{tmp\ 3382}#)
                          #f)
                      (@apply
                        (lambda (#{id\ 3396}#
                                 #{val\ 3397}#
                                 #{e1\ 3398}#
                                 #{e2\ 3399}#)
                          (begin
                            (let ((#{ids\ 3401}# #{id\ 3396}#))
                              (if (not (#{valid-bound-ids?\ 440}#
                                         #{ids\ 3401}#))
                                (syntax-violation
                                  'letrec
                                  "duplicate bound variable"
                                  #{e\ 3371}#)
                                (begin
                                  (let ((#{labels\ 3405}#
                                          (#{gen-labels\ 395}# #{ids\ 3401}#))
                                        (#{new-vars\ 3406}#
                                          (map #{gen-var\ 488}#
                                               #{ids\ 3401}#)))
                                    (begin
                                      (let ((#{w\ 3409}#
                                              (#{make-binding-wrap\ 424}#
                                                #{ids\ 3401}#
                                                #{labels\ 3405}#
                                                #{w\ 3373}#))
                                            (#{r\ 3410}#
                                              (#{extend-var-env\ 370}#
                                                #{labels\ 3405}#
                                                #{new-vars\ 3406}#
                                                #{r\ 3372}#)))
                                        (#{build-letrec\ 340}#
                                          #{s\ 3374}#
                                          #f
                                          (map syntax->datum #{ids\ 3401}#)
                                          #{new-vars\ 3406}#
                                          (map (lambda (#{x\ 3411}#)
                                                 (#{chi\ 460}#
                                                   #{x\ 3411}#
                                                   #{r\ 3410}#
                                                   #{w\ 3409}#
                                                   #{mod\ 3375}#))
                                               #{val\ 3397}#)
                                          (#{chi-body\ 468}#
                                            (cons #{e1\ 3398}# #{e2\ 3399}#)
                                            (#{source-wrap\ 448}#
                                              #{e\ 3371}#
                                              #{w\ 3409}#
                                              #{s\ 3374}#
                                              #{mod\ 3375}#)
                                            #{r\ 3410}#
                                            #{w\ 3409}#
                                            #{mod\ 3375}#))))))))))
                        #{tmp\ 3382}#)
                      (let ((#{_\ 3416}# #{tmp\ 3381}#))
                        (syntax-violation
                          'letrec
                          "bad letrec"
                          (#{source-wrap\ 448}#
                            #{e\ 3371}#
                            #{w\ 3373}#
                            #{s\ 3374}#
                            #{mod\ 3375}#))))))))
            (#{global-extend\ 376}#
              'core
              'letrec*
              (lambda (#{e\ 3417}#
                       #{r\ 3418}#
                       #{w\ 3419}#
                       #{s\ 3420}#
                       #{mod\ 3421}#)
                (let ((#{tmp\ 3427}# #{e\ 3417}#))
                  (let ((#{tmp\ 3428}#
                          ($sc-dispatch
                            #{tmp\ 3427}#
                            '(_ #(each (any any)) any . each-any))))
                    (if (if #{tmp\ 3428}#
                          (@apply
                            (lambda (#{id\ 3433}#
                                     #{val\ 3434}#
                                     #{e1\ 3435}#
                                     #{e2\ 3436}#)
                              (and-map #{id?\ 380}# #{id\ 3433}#))
                            #{tmp\ 3428}#)
                          #f)
                      (@apply
                        (lambda (#{id\ 3442}#
                                 #{val\ 3443}#
                                 #{e1\ 3444}#
                                 #{e2\ 3445}#)
                          (begin
                            (let ((#{ids\ 3447}# #{id\ 3442}#))
                              (if (not (#{valid-bound-ids?\ 440}#
                                         #{ids\ 3447}#))
                                (syntax-violation
                                  'letrec*
                                  "duplicate bound variable"
                                  #{e\ 3417}#)
                                (begin
                                  (let ((#{labels\ 3451}#
                                          (#{gen-labels\ 395}# #{ids\ 3447}#))
                                        (#{new-vars\ 3452}#
                                          (map #{gen-var\ 488}#
                                               #{ids\ 3447}#)))
                                    (begin
                                      (let ((#{w\ 3455}#
                                              (#{make-binding-wrap\ 424}#
                                                #{ids\ 3447}#
                                                #{labels\ 3451}#
                                                #{w\ 3419}#))
                                            (#{r\ 3456}#
                                              (#{extend-var-env\ 370}#
                                                #{labels\ 3451}#
                                                #{new-vars\ 3452}#
                                                #{r\ 3418}#)))
                                        (#{build-letrec\ 340}#
                                          #{s\ 3420}#
                                          #t
                                          (map syntax->datum #{ids\ 3447}#)
                                          #{new-vars\ 3452}#
                                          (map (lambda (#{x\ 3457}#)
                                                 (#{chi\ 460}#
                                                   #{x\ 3457}#
                                                   #{r\ 3456}#
                                                   #{w\ 3455}#
                                                   #{mod\ 3421}#))
                                               #{val\ 3443}#)
                                          (#{chi-body\ 468}#
                                            (cons #{e1\ 3444}# #{e2\ 3445}#)
                                            (#{source-wrap\ 448}#
                                              #{e\ 3417}#
                                              #{w\ 3455}#
                                              #{s\ 3420}#
                                              #{mod\ 3421}#)
                                            #{r\ 3456}#
                                            #{w\ 3455}#
                                            #{mod\ 3421}#))))))))))
                        #{tmp\ 3428}#)
                      (let ((#{_\ 3462}# #{tmp\ 3427}#))
                        (syntax-violation
                          'letrec*
                          "bad letrec*"
                          (#{source-wrap\ 448}#
                            #{e\ 3417}#
                            #{w\ 3419}#
                            #{s\ 3420}#
                            #{mod\ 3421}#))))))))
            (#{global-extend\ 376}#
              'core
              'set!
              (lambda (#{e\ 3463}#
                       #{r\ 3464}#
                       #{w\ 3465}#
                       #{s\ 3466}#
                       #{mod\ 3467}#)
                (let ((#{tmp\ 3473}# #{e\ 3463}#))
                  (let ((#{tmp\ 3474}#
                          ($sc-dispatch #{tmp\ 3473}# '(_ any any))))
                    (if (if #{tmp\ 3474}#
                          (@apply
                            (lambda (#{id\ 3477}# #{val\ 3478}#)
                              (#{id?\ 380}# #{id\ 3477}#))
                            #{tmp\ 3474}#)
                          #f)
                      (@apply
                        (lambda (#{id\ 3481}# #{val\ 3482}#)
                          (begin
                            (let ((#{n\ 3485}#
                                    (#{id-var-name\ 434}#
                                      #{id\ 3481}#
                                      #{w\ 3465}#))
                                  (#{id-mod\ 3486}#
                                    (if (#{syntax-object?\ 346}# #{id\ 3481}#)
                                      (#{syntax-object-module\ 352}#
                                        #{id\ 3481}#)
                                      #{mod\ 3467}#)))
                              (begin
                                (let ((#{b\ 3488}#
                                        (#{lookup\ 374}#
                                          #{n\ 3485}#
                                          #{r\ 3464}#
                                          #{id-mod\ 3486}#)))
                                  (begin
                                    (let ((#{atom-key\ 3491}#
                                            (car #{b\ 3488}#)))
                                      (if (eqv? #{atom-key\ 3491}# 'lexical)
                                        (#{build-lexical-assignment\ 314}#
                                          #{s\ 3466}#
                                          (syntax->datum #{id\ 3481}#)
                                          (cdr #{b\ 3488}#)
                                          (#{chi\ 460}#
                                            #{val\ 3482}#
                                            #{r\ 3464}#
                                            #{w\ 3465}#
                                            #{mod\ 3467}#))
                                        (if (eqv? #{atom-key\ 3491}# 'global)
                                          (#{build-global-assignment\ 320}#
                                            #{s\ 3466}#
                                            #{n\ 3485}#
                                            (#{chi\ 460}#
                                              #{val\ 3482}#
                                              #{r\ 3464}#
                                              #{w\ 3465}#
                                              #{mod\ 3467}#)
                                            #{id-mod\ 3486}#)
                                          (if (eqv? #{atom-key\ 3491}# 'macro)
                                            (begin
                                              (let ((#{p\ 3498}#
                                                      (cdr #{b\ 3488}#)))
                                                (if (procedure-property
                                                      #{p\ 3498}#
                                                      'variable-transformer)
                                                  (#{chi\ 460}#
                                                    (#{chi-macro\ 466}#
                                                      #{p\ 3498}#
                                                      #{e\ 3463}#
                                                      #{r\ 3464}#
                                                      #{w\ 3465}#
                                                      #{s\ 3466}#
                                                      #f
                                                      #{mod\ 3467}#)
                                                    #{r\ 3464}#
                                                    '(())
                                                    #{mod\ 3467}#)
                                                  (syntax-violation
                                                    'set!
                                                    "not a variable transformer"
                                                    (#{wrap\ 446}#
                                                      #{e\ 3463}#
                                                      #{w\ 3465}#
                                                      #{mod\ 3467}#)
                                                    (#{wrap\ 446}#
                                                      #{id\ 3481}#
                                                      #{w\ 3465}#
                                                      #{id-mod\ 3486}#)))))
                                            (if (eqv? #{atom-key\ 3491}#
                                                      'displaced-lexical)
                                              (syntax-violation
                                                'set!
                                                "identifier out of context"
                                                (#{wrap\ 446}#
                                                  #{id\ 3481}#
                                                  #{w\ 3465}#
                                                  #{mod\ 3467}#))
                                              (syntax-violation
                                                'set!
                                                "bad set!"
                                                (#{source-wrap\ 448}#
                                                  #{e\ 3463}#
                                                  #{w\ 3465}#
                                                  #{s\ 3466}#
                                                  #{mod\ 3467}#)))))))))))))
                        #{tmp\ 3474}#)
                      (let ((#{tmp\ 3503}#
                              ($sc-dispatch
                                #{tmp\ 3473}#
                                '(_ (any . each-any) any))))
                        (if #{tmp\ 3503}#
                          (@apply
                            (lambda (#{head\ 3507}#
                                     #{tail\ 3508}#
                                     #{val\ 3509}#)
                              (call-with-values
                                (lambda ()
                                  (#{syntax-type\ 458}#
                                    #{head\ 3507}#
                                    #{r\ 3464}#
                                    '(())
                                    #f
                                    #f
                                    #{mod\ 3467}#
                                    #t))
                                (lambda (#{type\ 3512}#
                                         #{value\ 3513}#
                                         #{ee\ 3514}#
                                         #{ww\ 3515}#
                                         #{ss\ 3516}#
                                         #{modmod\ 3517}#)
                                  (if (eqv? #{type\ 3512}# 'module-ref)
                                    (begin
                                      (let ((#{val\ 3526}#
                                              (#{chi\ 460}#
                                                #{val\ 3509}#
                                                #{r\ 3464}#
                                                #{w\ 3465}#
                                                #{mod\ 3467}#)))
                                        (call-with-values
                                          (lambda ()
                                            (#{value\ 3513}#
                                              (cons #{head\ 3507}#
                                                    #{tail\ 3508}#)
                                              #{r\ 3464}#
                                              #{w\ 3465}#))
                                          (lambda (#{e\ 3528}#
                                                   #{r\ 3529}#
                                                   #{w\ 3530}#
                                                   #{s*\ 3531}#
                                                   #{mod\ 3532}#)
                                            (let ((#{tmp\ 3538}# #{e\ 3528}#))
                                              (let ((#{tmp\ 3539}#
                                                      (list #{tmp\ 3538}#)))
                                                (if (if #{tmp\ 3539}#
                                                      (@apply
                                                        (lambda (#{e\ 3541}#)
                                                          (#{id?\ 380}#
                                                            #{e\ 3541}#))
                                                        #{tmp\ 3539}#)
                                                      #f)
                                                  (@apply
                                                    (lambda (#{e\ 3543}#)
                                                      (#{build-global-assignment\ 320}#
                                                        #{s\ 3466}#
                                                        (syntax->datum
                                                          #{e\ 3543}#)
                                                        #{val\ 3526}#
                                                        #{mod\ 3532}#))
                                                    #{tmp\ 3539}#)
                                                  (syntax-violation
                                                    #f
                                                    "source expression failed to match any pattern"
                                                    #{tmp\ 3538}#))))))))
                                    (#{build-application\ 306}#
                                      #{s\ 3466}#
                                      (#{chi\ 460}#
                                        (list '#(syntax-object
                                                 setter
                                                 ((top)
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(type
                                                      value
                                                      ee
                                                      ww
                                                      ss
                                                      modmod)
                                                    #((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                    #("i3518"
                                                      "i3519"
                                                      "i3520"
                                                      "i3521"
                                                      "i3522"
                                                      "i3523"))
                                                  #(ribcage
                                                    #(head tail val)
                                                    #((top) (top) (top))
                                                    #("i3504" "i3505" "i3506"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(e r w s mod)
                                                    #((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                    #("i3468"
                                                      "i3469"
                                                      "i3470"
                                                      "i3471"
                                                      "i3472"))
                                                  #(ribcage
                                                    (lambda-var-list
                                                      gen-var
                                                      strip
                                                      chi-lambda-case
                                                      lambda*-formals
                                                      chi-simple-lambda
                                                      lambda-formals
                                                      ellipsis?
                                                      chi-void
                                                      eval-local-transformer
                                                      chi-local-syntax
                                                      chi-body
                                                      chi-macro
                                                      chi-application
                                                      chi-expr
                                                      chi
                                                      syntax-type
                                                      chi-when-list
                                                      chi-install-global
                                                      chi-top-sequence
                                                      chi-sequence
                                                      source-wrap
                                                      wrap
                                                      bound-id-member?
                                                      distinct-bound-ids?
                                                      valid-bound-ids?
                                                      bound-id=?
                                                      free-id=?
                                                      id-var-name
                                                      same-marks?
                                                      join-marks
                                                      join-wraps
                                                      smart-append
                                                      make-binding-wrap
                                                      extend-ribcage!
                                                      make-empty-ribcage
                                                      new-mark
                                                      anti-mark
                                                      the-anti-mark
                                                      top-marked?
                                                      top-wrap
                                                      empty-wrap
                                                      set-ribcage-labels!
                                                      set-ribcage-marks!
                                                      set-ribcage-symnames!
                                                      ribcage-labels
                                                      ribcage-marks
                                                      ribcage-symnames
                                                      ribcage?
                                                      make-ribcage
                                                      gen-labels
                                                      gen-label
                                                      make-rename
                                                      rename-marks
                                                      rename-new
                                                      rename-old
                                                      subst-rename?
                                                      wrap-subst
                                                      wrap-marks
                                                      make-wrap
                                                      id-sym-name&marks
                                                      id-sym-name
                                                      id?
                                                      nonsymbol-id?
                                                      global-extend
                                                      lookup
                                                      macros-only-env
                                                      extend-var-env
                                                      extend-env
                                                      null-env
                                                      binding-value
                                                      binding-type
                                                      make-binding
                                                      arg-check
                                                      source-annotation
                                                      no-source
                                                      set-syntax-object-module!
                                                      set-syntax-object-wrap!
                                                      set-syntax-object-expression!
                                                      syntax-object-module
                                                      syntax-object-wrap
                                                      syntax-object-expression
                                                      syntax-object?
                                                      make-syntax-object
                                                      build-lexical-var
                                                      build-letrec
                                                      build-named-let
                                                      build-let
                                                      build-sequence
                                                      build-data
                                                      build-primref
                                                      build-lambda-case
                                                      build-case-lambda
                                                      build-simple-lambda
                                                      build-global-definition
                                                      build-global-assignment
                                                      build-global-reference
                                                      analyze-variable
                                                      build-lexical-assignment
                                                      build-lexical-reference
                                                      build-dynlet
                                                      build-conditional
                                                      build-application
                                                      build-void
                                                      maybe-name-value!
                                                      decorate-source
                                                      get-global-definition-hook
                                                      put-global-definition-hook
                                                      gensym-hook
                                                      local-eval-hook
                                                      top-level-eval-hook
                                                      fx<
                                                      fx=
                                                      fx-
                                                      fx+
                                                      set-lambda-meta!
                                                      lambda-meta
                                                      lambda?
                                                      make-dynlet
                                                      make-letrec
                                                      make-let
                                                      make-lambda-case
                                                      make-lambda
                                                      make-sequence
                                                      make-application
                                                      make-conditional
                                                      make-toplevel-define
                                                      make-toplevel-set
                                                      make-toplevel-ref
                                                      make-module-set
                                                      make-module-ref
                                                      make-lexical-set
                                                      make-lexical-ref
                                                      make-primitive-ref
                                                      make-const
                                                      make-void)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i489"
                                                     "i487"
                                                     "i485"
                                                     "i483"
                                                     "i481"
                                                     "i479"
                                                     "i477"
                                                     "i475"
                                                     "i473"
                                                     "i471"
                                                     "i469"
                                                     "i467"
                                                     "i465"
                                                     "i463"
                                                     "i461"
                                                     "i459"
                                                     "i457"
                                                     "i455"
                                                     "i453"
                                                     "i451"
                                                     "i449"
                                                     "i447"
                                                     "i445"
                                                     "i443"
                                                     "i441"
                                                     "i439"
                                                     "i437"
                                                     "i435"
                                                     "i433"
                                                     "i431"
                                                     "i429"
                                                     "i427"
                                                     "i425"
                                                     "i423"
                                                     "i421"
                                                     "i420"
                                                     "i419"
                                                     "i417"
                                                     "i416"
                                                     "i415"
                                                     "i414"
                                                     "i413"
                                                     "i411"
                                                     "i409"
                                                     "i407"
                                                     "i405"
                                                     "i403"
                                                     "i401"
                                                     "i399"
                                                     "i397"
                                                     "i394"
                                                     "i392"
                                                     "i391"
                                                     "i390"
                                                     "i389"
                                                     "i388"
                                                     "i387"
                                                     "i386"
                                                     "i385"
                                                     "i384"
                                                     "i382"
                                                     "i381"
                                                     "i379"
                                                     "i377"
                                                     "i375"
                                                     "i373"
                                                     "i371"
                                                     "i369"
                                                     "i367"
                                                     "i366"
                                                     "i365"
                                                     "i364"
                                                     "i363"
                                                     "i362"
                                                     "i360"
                                                     "i359"
                                                     "i357"
                                                     "i355"
                                                     "i353"
                                                     "i351"
                                                     "i349"
                                                     "i347"
                                                     "i345"
                                                     "i343"
                                                     "i341"
                                                     "i339"
                                                     "i337"
                                                     "i335"
                                                     "i333"
                                                     "i331"
                                                     "i329"
                                                     "i327"
                                                     "i325"
                                                     "i323"
                                                     "i321"
                                                     "i319"
                                                     "i317"
                                                     "i315"
                                                     "i313"
                                                     "i311"
                                                     "i309"
                                                     "i307"
                                                     "i305"
                                                     "i303"
                                                     "i301"
                                                     "i299"
                                                     "i297"
                                                     "i295"
                                                     "i294"
                                                     "i292"
                                                     "i290"
                                                     "i288"
                                                     "i286"
                                                     "i284"
                                                     "i282"
                                                     "i280"
                                                     "i278"
                                                     "i276"
                                                     "i273"
                                                     "i271"
                                                     "i269"
                                                     "i267"
                                                     "i265"
                                                     "i263"
                                                     "i261"
                                                     "i259"
                                                     "i257"
                                                     "i255"
                                                     "i253"
                                                     "i251"
                                                     "i249"
                                                     "i247"
                                                     "i245"
                                                     "i243"
                                                     "i241"
                                                     "i239"))
                                                  #(ribcage
                                                    (define-structure
                                                      define-expansion-accessors
                                                      define-expansion-constructors
                                                      and-map*)
                                                    ((top) (top) (top) (top))
                                                    ("i41" "i40" "i39" "i37")))
                                                 (hygiene guile))
                                              #{head\ 3507}#)
                                        #{r\ 3464}#
                                        #{w\ 3465}#
                                        #{mod\ 3467}#)
                                      (map (lambda (#{e\ 3545}#)
                                             (#{chi\ 460}#
                                               #{e\ 3545}#
                                               #{r\ 3464}#
                                               #{w\ 3465}#
                                               #{mod\ 3467}#))
                                           (append
                                             #{tail\ 3508}#
                                             (list #{val\ 3509}#))))))))
                            #{tmp\ 3503}#)
                          (let ((#{_\ 3549}# #{tmp\ 3473}#))
                            (syntax-violation
                              'set!
                              "bad set!"
                              (#{source-wrap\ 448}#
                                #{e\ 3463}#
                                #{w\ 3465}#
                                #{s\ 3466}#
                                #{mod\ 3467}#))))))))))
            (#{global-extend\ 376}#
              'module-ref
              '@
              (lambda (#{e\ 3550}# #{r\ 3551}# #{w\ 3552}#)
                (let ((#{tmp\ 3556}# #{e\ 3550}#))
                  (let ((#{tmp\ 3557}#
                          ($sc-dispatch #{tmp\ 3556}# '(_ each-any any))))
                    (if (if #{tmp\ 3557}#
                          (@apply
                            (lambda (#{mod\ 3560}# #{id\ 3561}#)
                              (if (and-map #{id?\ 380}# #{mod\ 3560}#)
                                (#{id?\ 380}# #{id\ 3561}#)
                                #f))
                            #{tmp\ 3557}#)
                          #f)
                      (@apply
                        (lambda (#{mod\ 3567}# #{id\ 3568}#)
                          (values
                            (syntax->datum #{id\ 3568}#)
                            #{r\ 3551}#
                            #{w\ 3552}#
                            #f
                            (syntax->datum
                              (cons '#(syntax-object
                                       public
                                       ((top)
                                        #(ribcage
                                          #(mod id)
                                          #((top) (top))
                                          #("i3565" "i3566"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(e r w)
                                          #((top) (top) (top))
                                          #("i3553" "i3554" "i3555"))
                                        #(ribcage
                                          (lambda-var-list
                                            gen-var
                                            strip
                                            chi-lambda-case
                                            lambda*-formals
                                            chi-simple-lambda
                                            lambda-formals
                                            ellipsis?
                                            chi-void
                                            eval-local-transformer
                                            chi-local-syntax
                                            chi-body
                                            chi-macro
                                            chi-application
                                            chi-expr
                                            chi
                                            syntax-type
                                            chi-when-list
                                            chi-install-global
                                            chi-top-sequence
                                            chi-sequence
                                            source-wrap
                                            wrap
                                            bound-id-member?
                                            distinct-bound-ids?
                                            valid-bound-ids?
                                            bound-id=?
                                            free-id=?
                                            id-var-name
                                            same-marks?
                                            join-marks
                                            join-wraps
                                            smart-append
                                            make-binding-wrap
                                            extend-ribcage!
                                            make-empty-ribcage
                                            new-mark
                                            anti-mark
                                            the-anti-mark
                                            top-marked?
                                            top-wrap
                                            empty-wrap
                                            set-ribcage-labels!
                                            set-ribcage-marks!
                                            set-ribcage-symnames!
                                            ribcage-labels
                                            ribcage-marks
                                            ribcage-symnames
                                            ribcage?
                                            make-ribcage
                                            gen-labels
                                            gen-label
                                            make-rename
                                            rename-marks
                                            rename-new
                                            rename-old
                                            subst-rename?
                                            wrap-subst
                                            wrap-marks
                                            make-wrap
                                            id-sym-name&marks
                                            id-sym-name
                                            id?
                                            nonsymbol-id?
                                            global-extend
                                            lookup
                                            macros-only-env
                                            extend-var-env
                                            extend-env
                                            null-env
                                            binding-value
                                            binding-type
                                            make-binding
                                            arg-check
                                            source-annotation
                                            no-source
                                            set-syntax-object-module!
                                            set-syntax-object-wrap!
                                            set-syntax-object-expression!
                                            syntax-object-module
                                            syntax-object-wrap
                                            syntax-object-expression
                                            syntax-object?
                                            make-syntax-object
                                            build-lexical-var
                                            build-letrec
                                            build-named-let
                                            build-let
                                            build-sequence
                                            build-data
                                            build-primref
                                            build-lambda-case
                                            build-case-lambda
                                            build-simple-lambda
                                            build-global-definition
                                            build-global-assignment
                                            build-global-reference
                                            analyze-variable
                                            build-lexical-assignment
                                            build-lexical-reference
                                            build-dynlet
                                            build-conditional
                                            build-application
                                            build-void
                                            maybe-name-value!
                                            decorate-source
                                            get-global-definition-hook
                                            put-global-definition-hook
                                            gensym-hook
                                            local-eval-hook
                                            top-level-eval-hook
                                            fx<
                                            fx=
                                            fx-
                                            fx+
                                            set-lambda-meta!
                                            lambda-meta
                                            lambda?
                                            make-dynlet
                                            make-letrec
                                            make-let
                                            make-lambda-case
                                            make-lambda
                                            make-sequence
                                            make-application
                                            make-conditional
                                            make-toplevel-define
                                            make-toplevel-set
                                            make-toplevel-ref
                                            make-module-set
                                            make-module-ref
                                            make-lexical-set
                                            make-lexical-ref
                                            make-primitive-ref
                                            make-const
                                            make-void)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("i489"
                                           "i487"
                                           "i485"
                                           "i483"
                                           "i481"
                                           "i479"
                                           "i477"
                                           "i475"
                                           "i473"
                                           "i471"
                                           "i469"
                                           "i467"
                                           "i465"
                                           "i463"
                                           "i461"
                                           "i459"
                                           "i457"
                                           "i455"
                                           "i453"
                                           "i451"
                                           "i449"
                                           "i447"
                                           "i445"
                                           "i443"
                                           "i441"
                                           "i439"
                                           "i437"
                                           "i435"
                                           "i433"
                                           "i431"
                                           "i429"
                                           "i427"
                                           "i425"
                                           "i423"
                                           "i421"
                                           "i420"
                                           "i419"
                                           "i417"
                                           "i416"
                                           "i415"
                                           "i414"
                                           "i413"
                                           "i411"
                                           "i409"
                                           "i407"
                                           "i405"
                                           "i403"
                                           "i401"
                                           "i399"
                                           "i397"
                                           "i394"
                                           "i392"
                                           "i391"
                                           "i390"
                                           "i389"
                                           "i388"
                                           "i387"
                                           "i386"
                                           "i385"
                                           "i384"
                                           "i382"
                                           "i381"
                                           "i379"
                                           "i377"
                                           "i375"
                                           "i373"
                                           "i371"
                                           "i369"
                                           "i367"
                                           "i366"
                                           "i365"
                                           "i364"
                                           "i363"
                                           "i362"
                                           "i360"
                                           "i359"
                                           "i357"
                                           "i355"
                                           "i353"
                                           "i351"
                                           "i349"
                                           "i347"
                                           "i345"
                                           "i343"
                                           "i341"
                                           "i339"
                                           "i337"
                                           "i335"
                                           "i333"
                                           "i331"
                                           "i329"
                                           "i327"
                                           "i325"
                                           "i323"
                                           "i321"
                                           "i319"
                                           "i317"
                                           "i315"
                                           "i313"
                                           "i311"
                                           "i309"
                                           "i307"
                                           "i305"
                                           "i303"
                                           "i301"
                                           "i299"
                                           "i297"
                                           "i295"
                                           "i294"
                                           "i292"
                                           "i290"
                                           "i288"
                                           "i286"
                                           "i284"
                                           "i282"
                                           "i280"
                                           "i278"
                                           "i276"
                                           "i273"
                                           "i271"
                                           "i269"
                                           "i267"
                                           "i265"
                                           "i263"
                                           "i261"
                                           "i259"
                                           "i257"
                                           "i255"
                                           "i253"
                                           "i251"
                                           "i249"
                                           "i247"
                                           "i245"
                                           "i243"
                                           "i241"
                                           "i239"))
                                        #(ribcage
                                          (define-structure
                                            define-expansion-accessors
                                            define-expansion-constructors
                                            and-map*)
                                          ((top) (top) (top) (top))
                                          ("i41" "i40" "i39" "i37")))
                                       (hygiene guile))
                                    #{mod\ 3567}#))))
                        #{tmp\ 3557}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp\ 3556}#))))))
            (#{global-extend\ 376}#
              'module-ref
              '@@
              (lambda (#{e\ 3570}# #{r\ 3571}# #{w\ 3572}#)
                (letrec*
                  ((#{remodulate\ 3577}#
                     (lambda (#{x\ 3578}# #{mod\ 3579}#)
                       (if (pair? #{x\ 3578}#)
                         (cons (#{remodulate\ 3577}#
                                 (car #{x\ 3578}#)
                                 #{mod\ 3579}#)
                               (#{remodulate\ 3577}#
                                 (cdr #{x\ 3578}#)
                                 #{mod\ 3579}#))
                         (if (#{syntax-object?\ 346}# #{x\ 3578}#)
                           (#{make-syntax-object\ 344}#
                             (#{remodulate\ 3577}#
                               (#{syntax-object-expression\ 348}# #{x\ 3578}#)
                               #{mod\ 3579}#)
                             (#{syntax-object-wrap\ 350}# #{x\ 3578}#)
                             #{mod\ 3579}#)
                           (if (vector? #{x\ 3578}#)
                             (begin
                               (let ((#{n\ 3590}# (vector-length #{x\ 3578}#)))
                                 (begin
                                   (let ((#{v\ 3592}#
                                           (make-vector #{n\ 3590}#)))
                                     (letrec*
                                       ((#{loop\ 3595}#
                                          (lambda (#{i\ 3596}#)
                                            (if (#{fx=\ 287}#
                                                  #{i\ 3596}#
                                                  #{n\ 3590}#)
                                              (begin (if #f #f) #{v\ 3592}#)
                                              (begin
                                                (vector-set!
                                                  #{v\ 3592}#
                                                  #{i\ 3596}#
                                                  (#{remodulate\ 3577}#
                                                    (vector-ref
                                                      #{x\ 3578}#
                                                      #{i\ 3596}#)
                                                    #{mod\ 3579}#))
                                                (#{loop\ 3595}#
                                                  (#{fx+\ 283}#
                                                    #{i\ 3596}#
                                                    1)))))))
                                       (begin (#{loop\ 3595}# 0)))))))
                             #{x\ 3578}#))))))
                  (begin
                    (let ((#{tmp\ 3600}# #{e\ 3570}#))
                      (let ((#{tmp\ 3601}#
                              ($sc-dispatch #{tmp\ 3600}# '(_ each-any any))))
                        (if (if #{tmp\ 3601}#
                              (@apply
                                (lambda (#{mod\ 3604}# #{exp\ 3605}#)
                                  (and-map #{id?\ 380}# #{mod\ 3604}#))
                                #{tmp\ 3601}#)
                              #f)
                          (@apply
                            (lambda (#{mod\ 3609}# #{exp\ 3610}#)
                              (begin
                                (let ((#{mod\ 3612}#
                                        (syntax->datum
                                          (cons '#(syntax-object
                                                   private
                                                   ((top)
                                                    #(ribcage
                                                      #(mod exp)
                                                      #((top) (top))
                                                      #("i3607" "i3608"))
                                                    #(ribcage
                                                      (remodulate)
                                                      ((top))
                                                      ("i3576"))
                                                    #(ribcage
                                                      #(e r w)
                                                      #((top) (top) (top))
                                                      #("i3573"
                                                        "i3574"
                                                        "i3575"))
                                                    #(ribcage
                                                      (lambda-var-list
                                                        gen-var
                                                        strip
                                                        chi-lambda-case
                                                        lambda*-formals
                                                        chi-simple-lambda
                                                        lambda-formals
                                                        ellipsis?
                                                        chi-void
                                                        eval-local-transformer
                                                        chi-local-syntax
                                                        chi-body
                                                        chi-macro
                                                        chi-application
                                                        chi-expr
                                                        chi
                                                        syntax-type
                                                        chi-when-list
                                                        chi-install-global
                                                        chi-top-sequence
                                                        chi-sequence
                                                        source-wrap
                                                        wrap
                                                        bound-id-member?
                                                        distinct-bound-ids?
                                                        valid-bound-ids?
                                                        bound-id=?
                                                        free-id=?
                                                        id-var-name
                                                        same-marks?
                                                        join-marks
                                                        join-wraps
                                                        smart-append
                                                        make-binding-wrap
                                                        extend-ribcage!
                                                        make-empty-ribcage
                                                        new-mark
                                                        anti-mark
                                                        the-anti-mark
                                                        top-marked?
                                                        top-wrap
                                                        empty-wrap
                                                        set-ribcage-labels!
                                                        set-ribcage-marks!
                                                        set-ribcage-symnames!
                                                        ribcage-labels
                                                        ribcage-marks
                                                        ribcage-symnames
                                                        ribcage?
                                                        make-ribcage
                                                        gen-labels
                                                        gen-label
                                                        make-rename
                                                        rename-marks
                                                        rename-new
                                                        rename-old
                                                        subst-rename?
                                                        wrap-subst
                                                        wrap-marks
                                                        make-wrap
                                                        id-sym-name&marks
                                                        id-sym-name
                                                        id?
                                                        nonsymbol-id?
                                                        global-extend
                                                        lookup
                                                        macros-only-env
                                                        extend-var-env
                                                        extend-env
                                                        null-env
                                                        binding-value
                                                        binding-type
                                                        make-binding
                                                        arg-check
                                                        source-annotation
                                                        no-source
                                                        set-syntax-object-module!
                                                        set-syntax-object-wrap!
                                                        set-syntax-object-expression!
                                                        syntax-object-module
                                                        syntax-object-wrap
                                                        syntax-object-expression
                                                        syntax-object?
                                                        make-syntax-object
                                                        build-lexical-var
                                                        build-letrec
                                                        build-named-let
                                                        build-let
                                                        build-sequence
                                                        build-data
                                                        build-primref
                                                        build-lambda-case
                                                        build-case-lambda
                                                        build-simple-lambda
                                                        build-global-definition
                                                        build-global-assignment
                                                        build-global-reference
                                                        analyze-variable
                                                        build-lexical-assignment
                                                        build-lexical-reference
                                                        build-dynlet
                                                        build-conditional
                                                        build-application
                                                        build-void
                                                        maybe-name-value!
                                                        decorate-source
                                                        get-global-definition-hook
                                                        put-global-definition-hook
                                                        gensym-hook
                                                        local-eval-hook
                                                        top-level-eval-hook
                                                        fx<
                                                        fx=
                                                        fx-
                                                        fx+
                                                        set-lambda-meta!
                                                        lambda-meta
                                                        lambda?
                                                        make-dynlet
                                                        make-letrec
                                                        make-let
                                                        make-lambda-case
                                                        make-lambda
                                                        make-sequence
                                                        make-application
                                                        make-conditional
                                                        make-toplevel-define
                                                        make-toplevel-set
                                                        make-toplevel-ref
                                                        make-module-set
                                                        make-module-ref
                                                        make-lexical-set
                                                        make-lexical-ref
                                                        make-primitive-ref
                                                        make-const
                                                        make-void)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i489"
                                                       "i487"
                                                       "i485"
                                                       "i483"
                                                       "i481"
                                                       "i479"
                                                       "i477"
                                                       "i475"
                                                       "i473"
                                                       "i471"
                                                       "i469"
                                                       "i467"
                                                       "i465"
                                                       "i463"
                                                       "i461"
                                                       "i459"
                                                       "i457"
                                                       "i455"
                                                       "i453"
                                                       "i451"
                                                       "i449"
                                                       "i447"
                                                       "i445"
                                                       "i443"
                                                       "i441"
                                                       "i439"
                                                       "i437"
                                                       "i435"
                                                       "i433"
                                                       "i431"
                                                       "i429"
                                                       "i427"
                                                       "i425"
                                                       "i423"
                                                       "i421"
                                                       "i420"
                                                       "i419"
                                                       "i417"
                                                       "i416"
                                                       "i415"
                                                       "i414"
                                                       "i413"
                                                       "i411"
                                                       "i409"
                                                       "i407"
                                                       "i405"
                                                       "i403"
                                                       "i401"
                                                       "i399"
                                                       "i397"
                                                       "i394"
                                                       "i392"
                                                       "i391"
                                                       "i390"
                                                       "i389"
                                                       "i388"
                                                       "i387"
                                                       "i386"
                                                       "i385"
                                                       "i384"
                                                       "i382"
                                                       "i381"
                                                       "i379"
                                                       "i377"
                                                       "i375"
                                                       "i373"
                                                       "i371"
                                                       "i369"
                                                       "i367"
                                                       "i366"
                                                       "i365"
                                                       "i364"
                                                       "i363"
                                                       "i362"
                                                       "i360"
                                                       "i359"
                                                       "i357"
                                                       "i355"
                                                       "i353"
                                                       "i351"
                                                       "i349"
                                                       "i347"
                                                       "i345"
                                                       "i343"
                                                       "i341"
                                                       "i339"
                                                       "i337"
                                                       "i335"
                                                       "i333"
                                                       "i331"
                                                       "i329"
                                                       "i327"
                                                       "i325"
                                                       "i323"
                                                       "i321"
                                                       "i319"
                                                       "i317"
                                                       "i315"
                                                       "i313"
                                                       "i311"
                                                       "i309"
                                                       "i307"
                                                       "i305"
                                                       "i303"
                                                       "i301"
                                                       "i299"
                                                       "i297"
                                                       "i295"
                                                       "i294"
                                                       "i292"
                                                       "i290"
                                                       "i288"
                                                       "i286"
                                                       "i284"
                                                       "i282"
                                                       "i280"
                                                       "i278"
                                                       "i276"
                                                       "i273"
                                                       "i271"
                                                       "i269"
                                                       "i267"
                                                       "i265"
                                                       "i263"
                                                       "i261"
                                                       "i259"
                                                       "i257"
                                                       "i255"
                                                       "i253"
                                                       "i251"
                                                       "i249"
                                                       "i247"
                                                       "i245"
                                                       "i243"
                                                       "i241"
                                                       "i239"))
                                                    #(ribcage
                                                      (define-structure
                                                        define-expansion-accessors
                                                        define-expansion-constructors
                                                        and-map*)
                                                      ((top) (top) (top) (top))
                                                      ("i41"
                                                       "i40"
                                                       "i39"
                                                       "i37")))
                                                   (hygiene guile))
                                                #{mod\ 3609}#))))
                                  (values
                                    (#{remodulate\ 3577}#
                                      #{exp\ 3610}#
                                      #{mod\ 3612}#)
                                    #{r\ 3571}#
                                    #{w\ 3572}#
                                    (#{source-annotation\ 361}# #{exp\ 3610}#)
                                    #{mod\ 3612}#))))
                            #{tmp\ 3601}#)
                          (syntax-violation
                            #f
                            "source expression failed to match any pattern"
                            #{tmp\ 3600}#))))))))
            (#{global-extend\ 376}#
              'core
              'if
              (lambda (#{e\ 3614}#
                       #{r\ 3615}#
                       #{w\ 3616}#
                       #{s\ 3617}#
                       #{mod\ 3618}#)
                (let ((#{tmp\ 3624}# #{e\ 3614}#))
                  (let ((#{tmp\ 3625}#
                          ($sc-dispatch #{tmp\ 3624}# '(_ any any))))
                    (if #{tmp\ 3625}#
                      (@apply
                        (lambda (#{test\ 3628}# #{then\ 3629}#)
                          (#{build-conditional\ 308}#
                            #{s\ 3617}#
                            (#{chi\ 460}#
                              #{test\ 3628}#
                              #{r\ 3615}#
                              #{w\ 3616}#
                              #{mod\ 3618}#)
                            (#{chi\ 460}#
                              #{then\ 3629}#
                              #{r\ 3615}#
                              #{w\ 3616}#
                              #{mod\ 3618}#)
                            (#{build-void\ 304}# #f)))
                        #{tmp\ 3625}#)
                      (let ((#{tmp\ 3631}#
                              ($sc-dispatch #{tmp\ 3624}# '(_ any any any))))
                        (if #{tmp\ 3631}#
                          (@apply
                            (lambda (#{test\ 3635}#
                                     #{then\ 3636}#
                                     #{else\ 3637}#)
                              (#{build-conditional\ 308}#
                                #{s\ 3617}#
                                (#{chi\ 460}#
                                  #{test\ 3635}#
                                  #{r\ 3615}#
                                  #{w\ 3616}#
                                  #{mod\ 3618}#)
                                (#{chi\ 460}#
                                  #{then\ 3636}#
                                  #{r\ 3615}#
                                  #{w\ 3616}#
                                  #{mod\ 3618}#)
                                (#{chi\ 460}#
                                  #{else\ 3637}#
                                  #{r\ 3615}#
                                  #{w\ 3616}#
                                  #{mod\ 3618}#)))
                            #{tmp\ 3631}#)
                          (syntax-violation
                            #f
                            "source expression failed to match any pattern"
                            #{tmp\ 3624}#))))))))
            (#{global-extend\ 376}#
              'core
              'with-fluids
              (lambda (#{e\ 3638}#
                       #{r\ 3639}#
                       #{w\ 3640}#
                       #{s\ 3641}#
                       #{mod\ 3642}#)
                (let ((#{tmp\ 3648}# #{e\ 3638}#))
                  (let ((#{tmp\ 3649}#
                          ($sc-dispatch
                            #{tmp\ 3648}#
                            '(_ #(each (any any)) any . each-any))))
                    (if #{tmp\ 3649}#
                      (@apply
                        (lambda (#{fluid\ 3654}#
                                 #{val\ 3655}#
                                 #{b\ 3656}#
                                 #{b*\ 3657}#)
                          (#{build-dynlet\ 310}#
                            #{s\ 3641}#
                            (map (lambda (#{x\ 3658}#)
                                   (#{chi\ 460}#
                                     #{x\ 3658}#
                                     #{r\ 3639}#
                                     #{w\ 3640}#
                                     #{mod\ 3642}#))
                                 #{fluid\ 3654}#)
                            (map (lambda (#{x\ 3661}#)
                                   (#{chi\ 460}#
                                     #{x\ 3661}#
                                     #{r\ 3639}#
                                     #{w\ 3640}#
                                     #{mod\ 3642}#))
                                 #{val\ 3655}#)
                            (#{chi-body\ 468}#
                              (cons #{b\ 3656}# #{b*\ 3657}#)
                              (#{source-wrap\ 448}#
                                #{e\ 3638}#
                                #{w\ 3640}#
                                #{s\ 3641}#
                                #{mod\ 3642}#)
                              #{r\ 3639}#
                              #{w\ 3640}#
                              #{mod\ 3642}#)))
                        #{tmp\ 3649}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp\ 3648}#))))))
            (#{global-extend\ 376}# 'begin 'begin '())
            (#{global-extend\ 376}# 'define 'define '())
            (#{global-extend\ 376}#
              'define-syntax
              'define-syntax
              '())
            (#{global-extend\ 376}#
              'eval-when
              'eval-when
              '())
            (#{global-extend\ 376}#
              'core
              'syntax-case
              (letrec*
                ((#{convert-pattern\ 3666}#
                   (lambda (#{pattern\ 3673}# #{keys\ 3674}#)
                     (letrec*
                       ((#{cvt*\ 3678}#
                          (lambda (#{p*\ 3681}# #{n\ 3682}# #{ids\ 3683}#)
                            (if (null? #{p*\ 3681}#)
                              (values '() #{ids\ 3683}#)
                              (call-with-values
                                (lambda ()
                                  (#{cvt*\ 3678}#
                                    (cdr #{p*\ 3681}#)
                                    #{n\ 3682}#
                                    #{ids\ 3683}#))
                                (lambda (#{y\ 3687}# #{ids\ 3688}#)
                                  (call-with-values
                                    (lambda ()
                                      (#{cvt\ 3680}#
                                        (car #{p*\ 3681}#)
                                        #{n\ 3682}#
                                        #{ids\ 3688}#))
                                    (lambda (#{x\ 3691}# #{ids\ 3692}#)
                                      (values
                                        (cons #{x\ 3691}# #{y\ 3687}#)
                                        #{ids\ 3692}#))))))))
                        (#{cvt\ 3680}#
                          (lambda (#{p\ 3695}# #{n\ 3696}# #{ids\ 3697}#)
                            (if (#{id?\ 380}# #{p\ 3695}#)
                              (if (#{bound-id-member?\ 444}#
                                    #{p\ 3695}#
                                    #{keys\ 3674}#)
                                (values
                                  (vector 'free-id #{p\ 3695}#)
                                  #{ids\ 3697}#)
                                (if (#{free-id=?\ 436}#
                                      #{p\ 3695}#
                                      '#(syntax-object
                                         _
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p n ids)
                                            #((top) (top) (top))
                                            #("i3698" "i3699" "i3700"))
                                          #(ribcage
                                            (cvt cvt*)
                                            ((top) (top))
                                            ("i3679" "i3677"))
                                          #(ribcage
                                            #(pattern keys)
                                            #((top) (top))
                                            #("i3675" "i3676"))
                                          #(ribcage
                                            (gen-syntax-case
                                              gen-clause
                                              build-dispatch-call
                                              convert-pattern)
                                            ((top) (top) (top) (top))
                                            ("i3671" "i3669" "i3667" "i3665"))
                                          #(ribcage
                                            (lambda-var-list
                                              gen-var
                                              strip
                                              chi-lambda-case
                                              lambda*-formals
                                              chi-simple-lambda
                                              lambda-formals
                                              ellipsis?
                                              chi-void
                                              eval-local-transformer
                                              chi-local-syntax
                                              chi-body
                                              chi-macro
                                              chi-application
                                              chi-expr
                                              chi
                                              syntax-type
                                              chi-when-list
                                              chi-install-global
                                              chi-top-sequence
                                              chi-sequence
                                              source-wrap
                                              wrap
                                              bound-id-member?
                                              distinct-bound-ids?
                                              valid-bound-ids?
                                              bound-id=?
                                              free-id=?
                                              id-var-name
                                              same-marks?
                                              join-marks
                                              join-wraps
                                              smart-append
                                              make-binding-wrap
                                              extend-ribcage!
                                              make-empty-ribcage
                                              new-mark
                                              anti-mark
                                              the-anti-mark
                                              top-marked?
                                              top-wrap
                                              empty-wrap
                                              set-ribcage-labels!
                                              set-ribcage-marks!
                                              set-ribcage-symnames!
                                              ribcage-labels
                                              ribcage-marks
                                              ribcage-symnames
                                              ribcage?
                                              make-ribcage
                                              gen-labels
                                              gen-label
                                              make-rename
                                              rename-marks
                                              rename-new
                                              rename-old
                                              subst-rename?
                                              wrap-subst
                                              wrap-marks
                                              make-wrap
                                              id-sym-name&marks
                                              id-sym-name
                                              id?
                                              nonsymbol-id?
                                              global-extend
                                              lookup
                                              macros-only-env
                                              extend-var-env
                                              extend-env
                                              null-env
                                              binding-value
                                              binding-type
                                              make-binding
                                              arg-check
                                              source-annotation
                                              no-source
                                              set-syntax-object-module!
                                              set-syntax-object-wrap!
                                              set-syntax-object-expression!
                                              syntax-object-module
                                              syntax-object-wrap
                                              syntax-object-expression
                                              syntax-object?
                                              make-syntax-object
                                              build-lexical-var
                                              build-letrec
                                              build-named-let
                                              build-let
                                              build-sequence
                                              build-data
                                              build-primref
                                              build-lambda-case
                                              build-case-lambda
                                              build-simple-lambda
                                              build-global-definition
                                              build-global-assignment
                                              build-global-reference
                                              analyze-variable
                                              build-lexical-assignment
                                              build-lexical-reference
                                              build-dynlet
                                              build-conditional
                                              build-application
                                              build-void
                                              maybe-name-value!
                                              decorate-source
                                              get-global-definition-hook
                                              put-global-definition-hook
                                              gensym-hook
                                              local-eval-hook
                                              top-level-eval-hook
                                              fx<
                                              fx=
                                              fx-
                                              fx+
                                              set-lambda-meta!
                                              lambda-meta
                                              lambda?
                                              make-dynlet
                                              make-letrec
                                              make-let
                                              make-lambda-case
                                              make-lambda
                                              make-sequence
                                              make-application
                                              make-conditional
                                              make-toplevel-define
                                              make-toplevel-set
                                              make-toplevel-ref
                                              make-module-set
                                              make-module-ref
                                              make-lexical-set
                                              make-lexical-ref
                                              make-primitive-ref
                                              make-const
                                              make-void)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i489"
                                             "i487"
                                             "i485"
                                             "i483"
                                             "i481"
                                             "i479"
                                             "i477"
                                             "i475"
                                             "i473"
                                             "i471"
                                             "i469"
                                             "i467"
                                             "i465"
                                             "i463"
                                             "i461"
                                             "i459"
                                             "i457"
                                             "i455"
                                             "i453"
                                             "i451"
                                             "i449"
                                             "i447"
                                             "i445"
                                             "i443"
                                             "i441"
                                             "i439"
                                             "i437"
                                             "i435"
                                             "i433"
                                             "i431"
                                             "i429"
                                             "i427"
                                             "i425"
                                             "i423"
                                             "i421"
                                             "i420"
                                             "i419"
                                             "i417"
                                             "i416"
                                             "i415"
                                             "i414"
                                             "i413"
                                             "i411"
                                             "i409"
                                             "i407"
                                             "i405"
                                             "i403"
                                             "i401"
                                             "i399"
                                             "i397"
                                             "i394"
                                             "i392"
                                             "i391"
                                             "i390"
                                             "i389"
                                             "i388"
                                             "i387"
                                             "i386"
                                             "i385"
                                             "i384"
                                             "i382"
                                             "i381"
                                             "i379"
                                             "i377"
                                             "i375"
                                             "i373"
                                             "i371"
                                             "i369"
                                             "i367"
                                             "i366"
                                             "i365"
                                             "i364"
                                             "i363"
                                             "i362"
                                             "i360"
                                             "i359"
                                             "i357"
                                             "i355"
                                             "i353"
                                             "i351"
                                             "i349"
                                             "i347"
                                             "i345"
                                             "i343"
                                             "i341"
                                             "i339"
                                             "i337"
                                             "i335"
                                             "i333"
                                             "i331"
                                             "i329"
                                             "i327"
                                             "i325"
                                             "i323"
                                             "i321"
                                             "i319"
                                             "i317"
                                             "i315"
                                             "i313"
                                             "i311"
                                             "i309"
                                             "i307"
                                             "i305"
                                             "i303"
                                             "i301"
                                             "i299"
                                             "i297"
                                             "i295"
                                             "i294"
                                             "i292"
                                             "i290"
                                             "i288"
                                             "i286"
                                             "i284"
                                             "i282"
                                             "i280"
                                             "i278"
                                             "i276"
                                             "i273"
                                             "i271"
                                             "i269"
                                             "i267"
                                             "i265"
                                             "i263"
                                             "i261"
                                             "i259"
                                             "i257"
                                             "i255"
                                             "i253"
                                             "i251"
                                             "i249"
                                             "i247"
                                             "i245"
                                             "i243"
                                             "i241"
                                             "i239"))
                                          #(ribcage
                                            (define-structure
                                              define-expansion-accessors
                                              define-expansion-constructors
                                              and-map*)
                                            ((top) (top) (top) (top))
                                            ("i41" "i40" "i39" "i37")))
                                         (hygiene guile)))
                                  (values '_ #{ids\ 3697}#)
                                  (values
                                    'any
                                    (cons (cons #{p\ 3695}# #{n\ 3696}#)
                                          #{ids\ 3697}#))))
                              (let ((#{tmp\ 3706}# #{p\ 3695}#))
                                (let ((#{tmp\ 3707}#
                                        ($sc-dispatch
                                          #{tmp\ 3706}#
                                          '(any any))))
                                  (if (if #{tmp\ 3707}#
                                        (@apply
                                          (lambda (#{x\ 3710}# #{dots\ 3711}#)
                                            (#{ellipsis?\ 476}#
                                              #{dots\ 3711}#))
                                          #{tmp\ 3707}#)
                                        #f)
                                    (@apply
                                      (lambda (#{x\ 3714}# #{dots\ 3715}#)
                                        (call-with-values
                                          (lambda ()
                                            (#{cvt\ 3680}#
                                              #{x\ 3714}#
                                              (#{fx+\ 283}# #{n\ 3696}# 1)
                                              #{ids\ 3697}#))
                                          (lambda (#{p\ 3716}# #{ids\ 3717}#)
                                            (values
                                              (if (eq? #{p\ 3716}# 'any)
                                                'each-any
                                                (vector 'each #{p\ 3716}#))
                                              #{ids\ 3717}#))))
                                      #{tmp\ 3707}#)
                                    (let ((#{tmp\ 3720}#
                                            ($sc-dispatch
                                              #{tmp\ 3706}#
                                              '(any any . each-any))))
                                      (if (if #{tmp\ 3720}#
                                            (@apply
                                              (lambda (#{x\ 3724}#
                                                       #{dots\ 3725}#
                                                       #{ys\ 3726}#)
                                                (#{ellipsis?\ 476}#
                                                  #{dots\ 3725}#))
                                              #{tmp\ 3720}#)
                                            #f)
                                        (@apply
                                          (lambda (#{x\ 3730}#
                                                   #{dots\ 3731}#
                                                   #{ys\ 3732}#)
                                            (call-with-values
                                              (lambda ()
                                                (#{cvt*\ 3678}#
                                                  #{ys\ 3732}#
                                                  #{n\ 3696}#
                                                  #{ids\ 3697}#))
                                              (lambda (#{ys\ 3734}#
                                                       #{ids\ 3735}#)
                                                (call-with-values
                                                  (lambda ()
                                                    (#{cvt\ 3680}#
                                                      #{x\ 3730}#
                                                      (1+ #{n\ 3696}#)
                                                      #{ids\ 3735}#))
                                                  (lambda (#{x\ 3738}#
                                                           #{ids\ 3739}#)
                                                    (values
                                                      (vector
                                                        'each+
                                                        #{x\ 3738}#
                                                        (reverse #{ys\ 3734}#)
                                                        '())
                                                      #{ids\ 3739}#))))))
                                          #{tmp\ 3720}#)
                                        (let ((#{tmp\ 3743}#
                                                ($sc-dispatch
                                                  #{tmp\ 3706}#
                                                  '(any . any))))
                                          (if #{tmp\ 3743}#
                                            (@apply
                                              (lambda (#{x\ 3746}# #{y\ 3747}#)
                                                (call-with-values
                                                  (lambda ()
                                                    (#{cvt\ 3680}#
                                                      #{y\ 3747}#
                                                      #{n\ 3696}#
                                                      #{ids\ 3697}#))
                                                  (lambda (#{y\ 3748}#
                                                           #{ids\ 3749}#)
                                                    (call-with-values
                                                      (lambda ()
                                                        (#{cvt\ 3680}#
                                                          #{x\ 3746}#
                                                          #{n\ 3696}#
                                                          #{ids\ 3749}#))
                                                      (lambda (#{x\ 3752}#
                                                               #{ids\ 3753}#)
                                                        (values
                                                          (cons #{x\ 3752}#
                                                                #{y\ 3748}#)
                                                          #{ids\ 3753}#))))))
                                              #{tmp\ 3743}#)
                                            (let ((#{tmp\ 3756}#
                                                    ($sc-dispatch
                                                      #{tmp\ 3706}#
                                                      '())))
                                              (if #{tmp\ 3756}#
                                                (@apply
                                                  (lambda ()
                                                    (values '() #{ids\ 3697}#))
                                                  #{tmp\ 3756}#)
                                                (let ((#{tmp\ 3757}#
                                                        ($sc-dispatch
                                                          #{tmp\ 3706}#
                                                          '#(vector
                                                             each-any))))
                                                  (if #{tmp\ 3757}#
                                                    (@apply
                                                      (lambda (#{x\ 3759}#)
                                                        (call-with-values
                                                          (lambda ()
                                                            (#{cvt\ 3680}#
                                                              #{x\ 3759}#
                                                              #{n\ 3696}#
                                                              #{ids\ 3697}#))
                                                          (lambda (#{p\ 3761}#
                                                                   #{ids\ 3762}#)
                                                            (values
                                                              (vector
                                                                'vector
                                                                #{p\ 3761}#)
                                                              #{ids\ 3762}#))))
                                                      #{tmp\ 3757}#)
                                                    (let ((#{x\ 3766}#
                                                            #{tmp\ 3706}#))
                                                      (values
                                                        (vector
                                                          'atom
                                                          (#{strip\ 486}#
                                                            #{p\ 3695}#
                                                            '(())))
                                                        #{ids\ 3697}#)))))))))))))))))
                       (begin (#{cvt\ 3680}# #{pattern\ 3673}# 0 '())))))
                 (#{build-dispatch-call\ 3668}#
                   (lambda (#{pvars\ 3768}#
                            #{exp\ 3769}#
                            #{y\ 3770}#
                            #{r\ 3771}#
                            #{mod\ 3772}#)
                     (begin
                       (map cdr #{pvars\ 3768}#)
                       (let ((#{ids\ 3780}# (map car #{pvars\ 3768}#)))
                         (begin
                           (let ((#{labels\ 3784}#
                                   (#{gen-labels\ 395}# #{ids\ 3780}#))
                                 (#{new-vars\ 3785}#
                                   (map #{gen-var\ 488}# #{ids\ 3780}#)))
                             (#{build-application\ 306}#
                               #f
                               (#{build-primref\ 330}# #f 'apply)
                               (list (#{build-simple-lambda\ 324}#
                                       #f
                                       (map syntax->datum #{ids\ 3780}#)
                                       #f
                                       #{new-vars\ 3785}#
                                       '()
                                       (#{chi\ 460}#
                                         #{exp\ 3769}#
                                         (#{extend-env\ 368}#
                                           #{labels\ 3784}#
                                           (map (lambda (#{var\ 3789}#
                                                         #{level\ 3790}#)
                                                  (cons 'syntax
                                                        (cons #{var\ 3789}#
                                                              #{level\ 3790}#)))
                                                #{new-vars\ 3785}#
                                                (map cdr #{pvars\ 3768}#))
                                           #{r\ 3771}#)
                                         (#{make-binding-wrap\ 424}#
                                           #{ids\ 3780}#
                                           #{labels\ 3784}#
                                           '(()))
                                         #{mod\ 3772}#))
                                     #{y\ 3770}#))))))))
                 (#{gen-clause\ 3670}#
                   (lambda (#{x\ 3796}#
                            #{keys\ 3797}#
                            #{clauses\ 3798}#
                            #{r\ 3799}#
                            #{pat\ 3800}#
                            #{fender\ 3801}#
                            #{exp\ 3802}#
                            #{mod\ 3803}#)
                     (call-with-values
                       (lambda ()
                         (#{convert-pattern\ 3666}#
                           #{pat\ 3800}#
                           #{keys\ 3797}#))
                       (lambda (#{p\ 3812}# #{pvars\ 3813}#)
                         (if (not (#{distinct-bound-ids?\ 442}#
                                    (map car #{pvars\ 3813}#)))
                           (syntax-violation
                             'syntax-case
                             "duplicate pattern variable"
                             #{pat\ 3800}#)
                           (if (not (and-map
                                      (lambda (#{x\ 3820}#)
                                        (not (#{ellipsis?\ 476}#
                                               (car #{x\ 3820}#))))
                                      #{pvars\ 3813}#))
                             (syntax-violation
                               'syntax-case
                               "misplaced ellipsis"
                               #{pat\ 3800}#)
                             (begin
                               (let ((#{y\ 3824}# (#{gen-var\ 488}# 'tmp)))
                                 (#{build-application\ 306}#
                                   #f
                                   (#{build-simple-lambda\ 324}#
                                     #f
                                     (list 'tmp)
                                     #f
                                     (list #{y\ 3824}#)
                                     '()
                                     (begin
                                       (let ((#{y\ 3828}#
                                               (#{build-lexical-reference\ 312}#
                                                 'value
                                                 #f
                                                 'tmp
                                                 #{y\ 3824}#)))
                                         (#{build-conditional\ 308}#
                                           #f
                                           (let ((#{tmp\ 3831}#
                                                   #{fender\ 3801}#))
                                             (let ((#{tmp\ 3832}#
                                                     ($sc-dispatch
                                                       #{tmp\ 3831}#
                                                       '#(atom #t))))
                                               (if #{tmp\ 3832}#
                                                 (@apply
                                                   (lambda () #{y\ 3828}#)
                                                   #{tmp\ 3832}#)
                                                 (let ((#{_\ 3834}#
                                                         #{tmp\ 3831}#))
                                                   (#{build-conditional\ 308}#
                                                     #f
                                                     #{y\ 3828}#
                                                     (#{build-dispatch-call\ 3668}#
                                                       #{pvars\ 3813}#
                                                       #{fender\ 3801}#
                                                       #{y\ 3828}#
                                                       #{r\ 3799}#
                                                       #{mod\ 3803}#)
                                                     (#{build-data\ 332}#
                                                       #f
                                                       #f))))))
                                           (#{build-dispatch-call\ 3668}#
                                             #{pvars\ 3813}#
                                             #{exp\ 3802}#
                                             #{y\ 3828}#
                                             #{r\ 3799}#
                                             #{mod\ 3803}#)
                                           (#{gen-syntax-case\ 3672}#
                                             #{x\ 3796}#
                                             #{keys\ 3797}#
                                             #{clauses\ 3798}#
                                             #{r\ 3799}#
                                             #{mod\ 3803}#)))))
                                   (list (if (eq? #{p\ 3812}# 'any)
                                           (#{build-application\ 306}#
                                             #f
                                             (#{build-primref\ 330}# #f 'list)
                                             (list #{x\ 3796}#))
                                           (#{build-application\ 306}#
                                             #f
                                             (#{build-primref\ 330}#
                                               #f
                                               '$sc-dispatch)
                                             (list #{x\ 3796}#
                                                   (#{build-data\ 332}#
                                                     #f
                                                     #{p\ 3812}#))))))))))))))
                 (#{gen-syntax-case\ 3672}#
                   (lambda (#{x\ 3842}#
                            #{keys\ 3843}#
                            #{clauses\ 3844}#
                            #{r\ 3845}#
                            #{mod\ 3846}#)
                     (if (null? #{clauses\ 3844}#)
                       (#{build-application\ 306}#
                         #f
                         (#{build-primref\ 330}# #f 'syntax-violation)
                         (list (#{build-data\ 332}# #f #f)
                               (#{build-data\ 332}#
                                 #f
                                 "source expression failed to match any pattern")
                               #{x\ 3842}#))
                       (let ((#{tmp\ 3856}# (car #{clauses\ 3844}#)))
                         (let ((#{tmp\ 3857}#
                                 ($sc-dispatch #{tmp\ 3856}# '(any any))))
                           (if #{tmp\ 3857}#
                             (@apply
                               (lambda (#{pat\ 3860}# #{exp\ 3861}#)
                                 (if (if (#{id?\ 380}# #{pat\ 3860}#)
                                       (and-map
                                         (lambda (#{x\ 3864}#)
                                           (not (#{free-id=?\ 436}#
                                                  #{pat\ 3860}#
                                                  #{x\ 3864}#)))
                                         (cons '#(syntax-object
                                                  ...
                                                  ((top)
                                                   #(ribcage
                                                     #(pat exp)
                                                     #((top) (top))
                                                     #("i3858" "i3859"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x keys clauses r mod)
                                                     #((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                     #("i3847"
                                                       "i3848"
                                                       "i3849"
                                                       "i3850"
                                                       "i3851"))
                                                   #(ribcage
                                                     (gen-syntax-case
                                                       gen-clause
                                                       build-dispatch-call
                                                       convert-pattern)
                                                     ((top) (top) (top) (top))
                                                     ("i3671"
                                                      "i3669"
                                                      "i3667"
                                                      "i3665"))
                                                   #(ribcage
                                                     (lambda-var-list
                                                       gen-var
                                                       strip
                                                       chi-lambda-case
                                                       lambda*-formals
                                                       chi-simple-lambda
                                                       lambda-formals
                                                       ellipsis?
                                                       chi-void
                                                       eval-local-transformer
                                                       chi-local-syntax
                                                       chi-body
                                                       chi-macro
                                                       chi-application
                                                       chi-expr
                                                       chi
                                                       syntax-type
                                                       chi-when-list
                                                       chi-install-global
                                                       chi-top-sequence
                                                       chi-sequence
                                                       source-wrap
                                                       wrap
                                                       bound-id-member?
                                                       distinct-bound-ids?
                                                       valid-bound-ids?
                                                       bound-id=?
                                                       free-id=?
                                                       id-var-name
                                                       same-marks?
                                                       join-marks
                                                       join-wraps
                                                       smart-append
                                                       make-binding-wrap
                                                       extend-ribcage!
                                                       make-empty-ribcage
                                                       new-mark
                                                       anti-mark
                                                       the-anti-mark
                                                       top-marked?
                                                       top-wrap
                                                       empty-wrap
                                                       set-ribcage-labels!
                                                       set-ribcage-marks!
                                                       set-ribcage-symnames!
                                                       ribcage-labels
                                                       ribcage-marks
                                                       ribcage-symnames
                                                       ribcage?
                                                       make-ribcage
                                                       gen-labels
                                                       gen-label
                                                       make-rename
                                                       rename-marks
                                                       rename-new
                                                       rename-old
                                                       subst-rename?
                                                       wrap-subst
                                                       wrap-marks
                                                       make-wrap
                                                       id-sym-name&marks
                                                       id-sym-name
                                                       id?
                                                       nonsymbol-id?
                                                       global-extend
                                                       lookup
                                                       macros-only-env
                                                       extend-var-env
                                                       extend-env
                                                       null-env
                                                       binding-value
                                                       binding-type
                                                       make-binding
                                                       arg-check
                                                       source-annotation
                                                       no-source
                                                       set-syntax-object-module!
                                                       set-syntax-object-wrap!
                                                       set-syntax-object-expression!
                                                       syntax-object-module
                                                       syntax-object-wrap
                                                       syntax-object-expression
                                                       syntax-object?
                                                       make-syntax-object
                                                       build-lexical-var
                                                       build-letrec
                                                       build-named-let
                                                       build-let
                                                       build-sequence
                                                       build-data
                                                       build-primref
                                                       build-lambda-case
                                                       build-case-lambda
                                                       build-simple-lambda
                                                       build-global-definition
                                                       build-global-assignment
                                                       build-global-reference
                                                       analyze-variable
                                                       build-lexical-assignment
                                                       build-lexical-reference
                                                       build-dynlet
                                                       build-conditional
                                                       build-application
                                                       build-void
                                                       maybe-name-value!
                                                       decorate-source
                                                       get-global-definition-hook
                                                       put-global-definition-hook
                                                       gensym-hook
                                                       local-eval-hook
                                                       top-level-eval-hook
                                                       fx<
                                                       fx=
                                                       fx-
                                                       fx+
                                                       set-lambda-meta!
                                                       lambda-meta
                                                       lambda?
                                                       make-dynlet
                                                       make-letrec
                                                       make-let
                                                       make-lambda-case
                                                       make-lambda
                                                       make-sequence
                                                       make-application
                                                       make-conditional
                                                       make-toplevel-define
                                                       make-toplevel-set
                                                       make-toplevel-ref
                                                       make-module-set
                                                       make-module-ref
                                                       make-lexical-set
                                                       make-lexical-ref
                                                       make-primitive-ref
                                                       make-const
                                                       make-void)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i489"
                                                      "i487"
                                                      "i485"
                                                      "i483"
                                                      "i481"
                                                      "i479"
                                                      "i477"
                                                      "i475"
                                                      "i473"
                                                      "i471"
                                                      "i469"
                                                      "i467"
                                                      "i465"
                                                      "i463"
                                                      "i461"
                                                      "i459"
                                                      "i457"
                                                      "i455"
                                                      "i453"
                                                      "i451"
                                                      "i449"
                                                      "i447"
                                                      "i445"
                                                      "i443"
                                                      "i441"
                                                      "i439"
                                                      "i437"
                                                      "i435"
                                                      "i433"
                                                      "i431"
                                                      "i429"
                                                      "i427"
                                                      "i425"
                                                      "i423"
                                                      "i421"
                                                      "i420"
                                                      "i419"
                                                      "i417"
                                                      "i416"
                                                      "i415"
                                                      "i414"
                                                      "i413"
                                                      "i411"
                                                      "i409"
                                                      "i407"
                                                      "i405"
                                                      "i403"
                                                      "i401"
                                                      "i399"
                                                      "i397"
                                                      "i394"
                                                      "i392"
                                                      "i391"
                                                      "i390"
                                                      "i389"
                                                      "i388"
                                                      "i387"
                                                      "i386"
                                                      "i385"
                                                      "i384"
                                                      "i382"
                                                      "i381"
                                                      "i379"
                                                      "i377"
                                                      "i375"
                                                      "i373"
                                                      "i371"
                                                      "i369"
                                                      "i367"
                                                      "i366"
                                                      "i365"
                                                      "i364"
                                                      "i363"
                                                      "i362"
                                                      "i360"
                                                      "i359"
                                                      "i357"
                                                      "i355"
                                                      "i353"
                                                      "i351"
                                                      "i349"
                                                      "i347"
                                                      "i345"
                                                      "i343"
                                                      "i341"
                                                      "i339"
                                                      "i337"
                                                      "i335"
                                                      "i333"
                                                      "i331"
                                                      "i329"
                                                      "i327"
                                                      "i325"
                                                      "i323"
                                                      "i321"
                                                      "i319"
                                                      "i317"
                                                      "i315"
                                                      "i313"
                                                      "i311"
                                                      "i309"
                                                      "i307"
                                                      "i305"
                                                      "i303"
                                                      "i301"
                                                      "i299"
                                                      "i297"
                                                      "i295"
                                                      "i294"
                                                      "i292"
                                                      "i290"
                                                      "i288"
                                                      "i286"
                                                      "i284"
                                                      "i282"
                                                      "i280"
                                                      "i278"
                                                      "i276"
                                                      "i273"
                                                      "i271"
                                                      "i269"
                                                      "i267"
                                                      "i265"
                                                      "i263"
                                                      "i261"
                                                      "i259"
                                                      "i257"
                                                      "i255"
                                                      "i253"
                                                      "i251"
                                                      "i249"
                                                      "i247"
                                                      "i245"
                                                      "i243"
                                                      "i241"
                                                      "i239"))
                                                   #(ribcage
                                                     (define-structure
                                                       define-expansion-accessors
                                                       define-expansion-constructors
                                                       and-map*)
                                                     ((top) (top) (top) (top))
                                                     ("i41"
                                                      "i40"
                                                      "i39"
                                                      "i37")))
                                                  (hygiene guile))
                                               #{keys\ 3843}#))
                                       #f)
                                   (if (#{free-id=?\ 436}#
                                         '#(syntax-object
                                            pad
                                            ((top)
                                             #(ribcage
                                               #(pat exp)
                                               #((top) (top))
                                               #("i3858" "i3859"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x keys clauses r mod)
                                               #((top) (top) (top) (top) (top))
                                               #("i3847"
                                                 "i3848"
                                                 "i3849"
                                                 "i3850"
                                                 "i3851"))
                                             #(ribcage
                                               (gen-syntax-case
                                                 gen-clause
                                                 build-dispatch-call
                                                 convert-pattern)
                                               ((top) (top) (top) (top))
                                               ("i3671"
                                                "i3669"
                                                "i3667"
                                                "i3665"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 chi-lambda-case
                                                 lambda*-formals
                                                 chi-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 chi-void
                                                 eval-local-transformer
                                                 chi-local-syntax
                                                 chi-body
                                                 chi-macro
                                                 chi-application
                                                 chi-expr
                                                 chi
                                                 syntax-type
                                                 chi-when-list
                                                 chi-install-global
                                                 chi-top-sequence
                                                 chi-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-application
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-sequence
                                                 make-application
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i489"
                                                "i487"
                                                "i485"
                                                "i483"
                                                "i481"
                                                "i479"
                                                "i477"
                                                "i475"
                                                "i473"
                                                "i471"
                                                "i469"
                                                "i467"
                                                "i465"
                                                "i463"
                                                "i461"
                                                "i459"
                                                "i457"
                                                "i455"
                                                "i453"
                                                "i451"
                                                "i449"
                                                "i447"
                                                "i445"
                                                "i443"
                                                "i441"
                                                "i439"
                                                "i437"
                                                "i435"
                                                "i433"
                                                "i431"
                                                "i429"
                                                "i427"
                                                "i425"
                                                "i423"
                                                "i421"
                                                "i420"
                                                "i419"
                                                "i417"
                                                "i416"
                                                "i415"
                                                "i414"
                                                "i413"
                                                "i411"
                                                "i409"
                                                "i407"
                                                "i405"
                                                "i403"
                                                "i401"
                                                "i399"
                                                "i397"
                                                "i394"
                                                "i392"
                                                "i391"
                                                "i390"
                                                "i389"
                                                "i388"
                                                "i387"
                                                "i386"
                                                "i385"
                                                "i384"
                                                "i382"
                                                "i381"
                                                "i379"
                                                "i377"
                                                "i375"
                                                "i373"
                                                "i371"
                                                "i369"
                                                "i367"
                                                "i366"
                                                "i365"
                                                "i364"
                                                "i363"
                                                "i362"
                                                "i360"
                                                "i359"
                                                "i357"
                                                "i355"
                                                "i353"
                                                "i351"
                                                "i349"
                                                "i347"
                                                "i345"
                                                "i343"
                                                "i341"
                                                "i339"
                                                "i337"
                                                "i335"
                                                "i333"
                                                "i331"
                                                "i329"
                                                "i327"
                                                "i325"
                                                "i323"
                                                "i321"
                                                "i319"
                                                "i317"
                                                "i315"
                                                "i313"
                                                "i311"
                                                "i309"
                                                "i307"
                                                "i305"
                                                "i303"
                                                "i301"
                                                "i299"
                                                "i297"
                                                "i295"
                                                "i294"
                                                "i292"
                                                "i290"
                                                "i288"
                                                "i286"
                                                "i284"
                                                "i282"
                                                "i280"
                                                "i278"
                                                "i276"
                                                "i273"
                                                "i271"
                                                "i269"
                                                "i267"
                                                "i265"
                                                "i263"
                                                "i261"
                                                "i259"
                                                "i257"
                                                "i255"
                                                "i253"
                                                "i251"
                                                "i249"
                                                "i247"
                                                "i245"
                                                "i243"
                                                "i241"
                                                "i239"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors
                                                 and-map*)
                                               ((top) (top) (top) (top))
                                               ("i41" "i40" "i39" "i37")))
                                            (hygiene guile))
                                         '#(syntax-object
                                            _
                                            ((top)
                                             #(ribcage
                                               #(pat exp)
                                               #((top) (top))
                                               #("i3858" "i3859"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x keys clauses r mod)
                                               #((top) (top) (top) (top) (top))
                                               #("i3847"
                                                 "i3848"
                                                 "i3849"
                                                 "i3850"
                                                 "i3851"))
                                             #(ribcage
                                               (gen-syntax-case
                                                 gen-clause
                                                 build-dispatch-call
                                                 convert-pattern)
                                               ((top) (top) (top) (top))
                                               ("i3671"
                                                "i3669"
                                                "i3667"
                                                "i3665"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 chi-lambda-case
                                                 lambda*-formals
                                                 chi-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 chi-void
                                                 eval-local-transformer
                                                 chi-local-syntax
                                                 chi-body
                                                 chi-macro
                                                 chi-application
                                                 chi-expr
                                                 chi
                                                 syntax-type
                                                 chi-when-list
                                                 chi-install-global
                                                 chi-top-sequence
                                                 chi-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-application
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-sequence
                                                 make-application
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i489"
                                                "i487"
                                                "i485"
                                                "i483"
                                                "i481"
                                                "i479"
                                                "i477"
                                                "i475"
                                                "i473"
                                                "i471"
                                                "i469"
                                                "i467"
                                                "i465"
                                                "i463"
                                                "i461"
                                                "i459"
                                                "i457"
                                                "i455"
                                                "i453"
                                                "i451"
                                                "i449"
                                                "i447"
                                                "i445"
                                                "i443"
                                                "i441"
                                                "i439"
                                                "i437"
                                                "i435"
                                                "i433"
                                                "i431"
                                                "i429"
                                                "i427"
                                                "i425"
                                                "i423"
                                                "i421"
                                                "i420"
                                                "i419"
                                                "i417"
                                                "i416"
                                                "i415"
                                                "i414"
                                                "i413"
                                                "i411"
                                                "i409"
                                                "i407"
                                                "i405"
                                                "i403"
                                                "i401"
                                                "i399"
                                                "i397"
                                                "i394"
                                                "i392"
                                                "i391"
                                                "i390"
                                                "i389"
                                                "i388"
                                                "i387"
                                                "i386"
                                                "i385"
                                                "i384"
                                                "i382"
                                                "i381"
                                                "i379"
                                                "i377"
                                                "i375"
                                                "i373"
                                                "i371"
                                                "i369"
                                                "i367"
                                                "i366"
                                                "i365"
                                                "i364"
                                                "i363"
                                                "i362"
                                                "i360"
                                                "i359"
                                                "i357"
                                                "i355"
                                                "i353"
                                                "i351"
                                                "i349"
                                                "i347"
                                                "i345"
                                                "i343"
                                                "i341"
                                                "i339"
                                                "i337"
                                                "i335"
                                                "i333"
                                                "i331"
                                                "i329"
                                                "i327"
                                                "i325"
                                                "i323"
                                                "i321"
                                                "i319"
                                                "i317"
                                                "i315"
                                                "i313"
                                                "i311"
                                                "i309"
                                                "i307"
                                                "i305"
                                                "i303"
                                                "i301"
                                                "i299"
                                                "i297"
                                                "i295"
                                                "i294"
                                                "i292"
                                                "i290"
                                                "i288"
                                                "i286"
                                                "i284"
                                                "i282"
                                                "i280"
                                                "i278"
                                                "i276"
                                                "i273"
                                                "i271"
                                                "i269"
                                                "i267"
                                                "i265"
                                                "i263"
                                                "i261"
                                                "i259"
                                                "i257"
                                                "i255"
                                                "i253"
                                                "i251"
                                                "i249"
                                                "i247"
                                                "i245"
                                                "i243"
                                                "i241"
                                                "i239"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors
                                                 and-map*)
                                               ((top) (top) (top) (top))
                                               ("i41" "i40" "i39" "i37")))
                                            (hygiene guile)))
                                     (#{chi\ 460}#
                                       #{exp\ 3861}#
                                       #{r\ 3845}#
                                       '(())
                                       #{mod\ 3846}#)
                                     (begin
                                       (let ((#{labels\ 3869}#
                                               (list (#{gen-label\ 393}#)))
                                             (#{var\ 3870}#
                                               (#{gen-var\ 488}#
                                                 #{pat\ 3860}#)))
                                         (#{build-application\ 306}#
                                           #f
                                           (#{build-simple-lambda\ 324}#
                                             #f
                                             (list (syntax->datum
                                                     #{pat\ 3860}#))
                                             #f
                                             (list #{var\ 3870}#)
                                             '()
                                             (#{chi\ 460}#
                                               #{exp\ 3861}#
                                               (#{extend-env\ 368}#
                                                 #{labels\ 3869}#
                                                 (list (cons 'syntax
                                                             (cons #{var\ 3870}#
                                                                   0)))
                                                 #{r\ 3845}#)
                                               (#{make-binding-wrap\ 424}#
                                                 (list #{pat\ 3860}#)
                                                 #{labels\ 3869}#
                                                 '(()))
                                               #{mod\ 3846}#))
                                           (list #{x\ 3842}#)))))
                                   (#{gen-clause\ 3670}#
                                     #{x\ 3842}#
                                     #{keys\ 3843}#
                                     (cdr #{clauses\ 3844}#)
                                     #{r\ 3845}#
                                     #{pat\ 3860}#
                                     #t
                                     #{exp\ 3861}#
                                     #{mod\ 3846}#)))
                               #{tmp\ 3857}#)
                             (let ((#{tmp\ 3876}#
                                     ($sc-dispatch
                                       #{tmp\ 3856}#
                                       '(any any any))))
                               (if #{tmp\ 3876}#
                                 (@apply
                                   (lambda (#{pat\ 3880}#
                                            #{fender\ 3881}#
                                            #{exp\ 3882}#)
                                     (#{gen-clause\ 3670}#
                                       #{x\ 3842}#
                                       #{keys\ 3843}#
                                       (cdr #{clauses\ 3844}#)
                                       #{r\ 3845}#
                                       #{pat\ 3880}#
                                       #{fender\ 3881}#
                                       #{exp\ 3882}#
                                       #{mod\ 3846}#))
                                   #{tmp\ 3876}#)
                                 (let ((#{_\ 3884}# #{tmp\ 3856}#))
                                   (syntax-violation
                                     'syntax-case
                                     "invalid clause"
                                     (car #{clauses\ 3844}#))))))))))))
                (begin
                  (lambda (#{e\ 3885}#
                           #{r\ 3886}#
                           #{w\ 3887}#
                           #{s\ 3888}#
                           #{mod\ 3889}#)
                    (begin
                      (let ((#{e\ 3896}#
                              (#{source-wrap\ 448}#
                                #{e\ 3885}#
                                #{w\ 3887}#
                                #{s\ 3888}#
                                #{mod\ 3889}#)))
                        (let ((#{tmp\ 3897}# #{e\ 3896}#))
                          (let ((#{tmp\ 3898}#
                                  ($sc-dispatch
                                    #{tmp\ 3897}#
                                    '(_ any each-any . each-any))))
                            (if #{tmp\ 3898}#
                              (@apply
                                (lambda (#{val\ 3902}#
                                         #{key\ 3903}#
                                         #{m\ 3904}#)
                                  (if (and-map
                                        (lambda (#{x\ 3905}#)
                                          (if (#{id?\ 380}# #{x\ 3905}#)
                                            (not (#{ellipsis?\ 476}#
                                                   #{x\ 3905}#))
                                            #f))
                                        #{key\ 3903}#)
                                    (begin
                                      (let ((#{x\ 3911}#
                                              (#{gen-var\ 488}# 'tmp)))
                                        (#{build-application\ 306}#
                                          #{s\ 3888}#
                                          (#{build-simple-lambda\ 324}#
                                            #f
                                            (list 'tmp)
                                            #f
                                            (list #{x\ 3911}#)
                                            '()
                                            (#{gen-syntax-case\ 3672}#
                                              (#{build-lexical-reference\ 312}#
                                                'value
                                                #f
                                                'tmp
                                                #{x\ 3911}#)
                                              #{key\ 3903}#
                                              #{m\ 3904}#
                                              #{r\ 3886}#
                                              #{mod\ 3889}#))
                                          (list (#{chi\ 460}#
                                                  #{val\ 3902}#
                                                  #{r\ 3886}#
                                                  '(())
                                                  #{mod\ 3889}#)))))
                                    (syntax-violation
                                      'syntax-case
                                      "invalid literals list"
                                      #{e\ 3896}#)))
                                #{tmp\ 3898}#)
                              (syntax-violation
                                #f
                                "source expression failed to match any pattern"
                                #{tmp\ 3897}#))))))))))
            (set! macroexpand
              (lambda*
                (#{x\ 3917}#
                  #:optional
                  (#{m\ 3919}# 'e)
                  (#{esew\ 3921}# '(eval)))
                (#{chi-top-sequence\ 452}#
                  (list #{x\ 3917}#)
                  '()
                  '((top))
                  #f
                  #{m\ 3919}#
                  #{esew\ 3921}#
                  (cons 'hygiene (module-name (current-module))))))
            (set! identifier?
              (lambda (#{x\ 3925}#)
                (#{nonsymbol-id?\ 378}# #{x\ 3925}#)))
            (set! datum->syntax
              (lambda (#{id\ 3927}# #{datum\ 3928}#)
                (#{make-syntax-object\ 344}#
                  #{datum\ 3928}#
                  (#{syntax-object-wrap\ 350}# #{id\ 3927}#)
                  (#{syntax-object-module\ 352}# #{id\ 3927}#))))
            (set! syntax->datum
              (lambda (#{x\ 3931}#)
                (#{strip\ 486}# #{x\ 3931}# '(()))))
            (set! syntax-source
              (lambda (#{x\ 3934}#)
                (#{source-annotation\ 361}# #{x\ 3934}#)))
            (set! generate-temporaries
              (lambda (#{ls\ 3936}#)
                (begin
                  (begin
                    (let ((#{x\ 3940}# #{ls\ 3936}#))
                      (if (not (list? #{x\ 3940}#))
                        (syntax-violation
                          'generate-temporaries
                          "invalid argument"
                          #{x\ 3940}#))))
                  (map (lambda (#{x\ 3941}#)
                         (#{wrap\ 446}# (gensym) '((top)) #f))
                       #{ls\ 3936}#))))
            (set! free-identifier=?
              (lambda (#{x\ 3945}# #{y\ 3946}#)
                (begin
                  (begin
                    (let ((#{x\ 3951}# #{x\ 3945}#))
                      (if (not (#{nonsymbol-id?\ 378}# #{x\ 3951}#))
                        (syntax-violation
                          'free-identifier=?
                          "invalid argument"
                          #{x\ 3951}#))))
                  (begin
                    (let ((#{x\ 3954}# #{y\ 3946}#))
                      (if (not (#{nonsymbol-id?\ 378}# #{x\ 3954}#))
                        (syntax-violation
                          'free-identifier=?
                          "invalid argument"
                          #{x\ 3954}#))))
                  (#{free-id=?\ 436}# #{x\ 3945}# #{y\ 3946}#))))
            (set! bound-identifier=?
              (lambda (#{x\ 3955}# #{y\ 3956}#)
                (begin
                  (begin
                    (let ((#{x\ 3961}# #{x\ 3955}#))
                      (if (not (#{nonsymbol-id?\ 378}# #{x\ 3961}#))
                        (syntax-violation
                          'bound-identifier=?
                          "invalid argument"
                          #{x\ 3961}#))))
                  (begin
                    (let ((#{x\ 3964}# #{y\ 3956}#))
                      (if (not (#{nonsymbol-id?\ 378}# #{x\ 3964}#))
                        (syntax-violation
                          'bound-identifier=?
                          "invalid argument"
                          #{x\ 3964}#))))
                  (#{bound-id=?\ 438}# #{x\ 3955}# #{y\ 3956}#))))
            (set! syntax-violation
              (lambda*
                (#{who\ 3965}#
                  #{message\ 3966}#
                  #{form\ 3967}#
                  #:optional
                  (#{subform\ 3971}# #f))
                (begin
                  (begin
                    (let ((#{x\ 3975}# #{who\ 3965}#))
                      (if (not (let ((#{x\ 3976}# #{x\ 3975}#))
                                 (begin
                                   (let ((#{t\ 3980}# (not #{x\ 3976}#)))
                                     (if #{t\ 3980}#
                                       #{t\ 3980}#
                                       (begin
                                         (let ((#{t\ 3983}#
                                                 (string? #{x\ 3976}#)))
                                           (if #{t\ 3983}#
                                             #{t\ 3983}#
                                             (symbol? #{x\ 3976}#)))))))))
                        (syntax-violation
                          'syntax-violation
                          "invalid argument"
                          #{x\ 3975}#))))
                  (begin
                    (let ((#{x\ 3987}# #{message\ 3966}#))
                      (if (not (string? #{x\ 3987}#))
                        (syntax-violation
                          'syntax-violation
                          "invalid argument"
                          #{x\ 3987}#))))
                  (throw 'syntax-error
                         #{who\ 3965}#
                         #{message\ 3966}#
                         (#{source-annotation\ 361}#
                           (begin
                             (let ((#{t\ 3990}# #{form\ 3967}#))
                               (if #{t\ 3990}#
                                 #{t\ 3990}#
                                 #{subform\ 3971}#))))
                         (#{strip\ 486}# #{form\ 3967}# '(()))
                         (if #{subform\ 3971}#
                           (#{strip\ 486}# #{subform\ 3971}# '(()))
                           #f)))))
            (letrec*
              ((#{match-each\ 3997}#
                 (lambda (#{e\ 4010}#
                          #{p\ 4011}#
                          #{w\ 4012}#
                          #{mod\ 4013}#)
                   (if (pair? #{e\ 4010}#)
                     (begin
                       (let ((#{first\ 4021}#
                               (#{match\ 4009}#
                                 (car #{e\ 4010}#)
                                 #{p\ 4011}#
                                 #{w\ 4012}#
                                 '()
                                 #{mod\ 4013}#)))
                         (if #{first\ 4021}#
                           (begin
                             (let ((#{rest\ 4025}#
                                     (#{match-each\ 3997}#
                                       (cdr #{e\ 4010}#)
                                       #{p\ 4011}#
                                       #{w\ 4012}#
                                       #{mod\ 4013}#)))
                               (if #{rest\ 4025}#
                                 (cons #{first\ 4021}# #{rest\ 4025}#)
                                 #f)))
                           #f)))
                     (if (null? #{e\ 4010}#)
                       '()
                       (if (#{syntax-object?\ 346}# #{e\ 4010}#)
                         (#{match-each\ 3997}#
                           (#{syntax-object-expression\ 348}# #{e\ 4010}#)
                           #{p\ 4011}#
                           (#{join-wraps\ 428}#
                             #{w\ 4012}#
                             (#{syntax-object-wrap\ 350}# #{e\ 4010}#))
                           (#{syntax-object-module\ 352}# #{e\ 4010}#))
                         #f)))))
               (#{match-each+\ 3999}#
                 (lambda (#{e\ 4033}#
                          #{x-pat\ 4034}#
                          #{y-pat\ 4035}#
                          #{z-pat\ 4036}#
                          #{w\ 4037}#
                          #{r\ 4038}#
                          #{mod\ 4039}#)
                   (letrec*
                     ((#{f\ 4050}#
                        (lambda (#{e\ 4051}# #{w\ 4052}#)
                          (if (pair? #{e\ 4051}#)
                            (call-with-values
                              (lambda ()
                                (#{f\ 4050}# (cdr #{e\ 4051}#) #{w\ 4052}#))
                              (lambda (#{xr*\ 4055}#
                                       #{y-pat\ 4056}#
                                       #{r\ 4057}#)
                                (if #{r\ 4057}#
                                  (if (null? #{y-pat\ 4056}#)
                                    (begin
                                      (let ((#{xr\ 4062}#
                                              (#{match\ 4009}#
                                                (car #{e\ 4051}#)
                                                #{x-pat\ 4034}#
                                                #{w\ 4052}#
                                                '()
                                                #{mod\ 4039}#)))
                                        (if #{xr\ 4062}#
                                          (values
                                            (cons #{xr\ 4062}# #{xr*\ 4055}#)
                                            #{y-pat\ 4056}#
                                            #{r\ 4057}#)
                                          (values #f #f #f))))
                                    (values
                                      '()
                                      (cdr #{y-pat\ 4056}#)
                                      (#{match\ 4009}#
                                        (car #{e\ 4051}#)
                                        (car #{y-pat\ 4056}#)
                                        #{w\ 4052}#
                                        #{r\ 4057}#
                                        #{mod\ 4039}#)))
                                  (values #f #f #f))))
                            (if (#{syntax-object?\ 346}# #{e\ 4051}#)
                              (#{f\ 4050}#
                                (#{syntax-object-expression\ 348}# #{e\ 4051}#)
                                (#{join-wraps\ 428}# #{w\ 4052}# #{e\ 4051}#))
                              (values
                                '()
                                #{y-pat\ 4035}#
                                (#{match\ 4009}#
                                  #{e\ 4051}#
                                  #{z-pat\ 4036}#
                                  #{w\ 4052}#
                                  #{r\ 4038}#
                                  #{mod\ 4039}#)))))))
                     (begin (#{f\ 4050}# #{e\ 4033}# #{w\ 4037}#)))))
               (#{match-each-any\ 4001}#
                 (lambda (#{e\ 4066}# #{w\ 4067}# #{mod\ 4068}#)
                   (if (pair? #{e\ 4066}#)
                     (begin
                       (let ((#{l\ 4075}#
                               (#{match-each-any\ 4001}#
                                 (cdr #{e\ 4066}#)
                                 #{w\ 4067}#
                                 #{mod\ 4068}#)))
                         (if #{l\ 4075}#
                           (cons (#{wrap\ 446}#
                                   (car #{e\ 4066}#)
                                   #{w\ 4067}#
                                   #{mod\ 4068}#)
                                 #{l\ 4075}#)
                           #f)))
                     (if (null? #{e\ 4066}#)
                       '()
                       (if (#{syntax-object?\ 346}# #{e\ 4066}#)
                         (#{match-each-any\ 4001}#
                           (#{syntax-object-expression\ 348}# #{e\ 4066}#)
                           (#{join-wraps\ 428}#
                             #{w\ 4067}#
                             (#{syntax-object-wrap\ 350}# #{e\ 4066}#))
                           #{mod\ 4068}#)
                         #f)))))
               (#{match-empty\ 4003}#
                 (lambda (#{p\ 4083}# #{r\ 4084}#)
                   (if (null? #{p\ 4083}#)
                     #{r\ 4084}#
                     (if (eq? #{p\ 4083}# '_)
                       #{r\ 4084}#
                       (if (eq? #{p\ 4083}# 'any)
                         (cons '() #{r\ 4084}#)
                         (if (pair? #{p\ 4083}#)
                           (#{match-empty\ 4003}#
                             (car #{p\ 4083}#)
                             (#{match-empty\ 4003}#
                               (cdr #{p\ 4083}#)
                               #{r\ 4084}#))
                           (if (eq? #{p\ 4083}# 'each-any)
                             (cons '() #{r\ 4084}#)
                             (begin
                               (let ((#{atom-key\ 4100}#
                                       (vector-ref #{p\ 4083}# 0)))
                                 (if (eqv? #{atom-key\ 4100}# 'each)
                                   (#{match-empty\ 4003}#
                                     (vector-ref #{p\ 4083}# 1)
                                     #{r\ 4084}#)
                                   (if (eqv? #{atom-key\ 4100}# 'each+)
                                     (#{match-empty\ 4003}#
                                       (vector-ref #{p\ 4083}# 1)
                                       (#{match-empty\ 4003}#
                                         (reverse (vector-ref #{p\ 4083}# 2))
                                         (#{match-empty\ 4003}#
                                           (vector-ref #{p\ 4083}# 3)
                                           #{r\ 4084}#)))
                                     (if (if (eqv? #{atom-key\ 4100}# 'free-id)
                                           #t
                                           (eqv? #{atom-key\ 4100}# 'atom))
                                       #{r\ 4084}#
                                       (if (eqv? #{atom-key\ 4100}# 'vector)
                                         (#{match-empty\ 4003}#
                                           (vector-ref #{p\ 4083}# 1)
                                           #{r\ 4084}#))))))))))))))
               (#{combine\ 4005}#
                 (lambda (#{r*\ 4105}# #{r\ 4106}#)
                   (if (null? (car #{r*\ 4105}#))
                     #{r\ 4106}#
                     (cons (map car #{r*\ 4105}#)
                           (#{combine\ 4005}#
                             (map cdr #{r*\ 4105}#)
                             #{r\ 4106}#)))))
               (#{match*\ 4007}#
                 (lambda (#{e\ 4109}#
                          #{p\ 4110}#
                          #{w\ 4111}#
                          #{r\ 4112}#
                          #{mod\ 4113}#)
                   (if (null? #{p\ 4110}#)
                     (if (null? #{e\ 4109}#) #{r\ 4112}# #f)
                     (if (pair? #{p\ 4110}#)
                       (if (pair? #{e\ 4109}#)
                         (#{match\ 4009}#
                           (car #{e\ 4109}#)
                           (car #{p\ 4110}#)
                           #{w\ 4111}#
                           (#{match\ 4009}#
                             (cdr #{e\ 4109}#)
                             (cdr #{p\ 4110}#)
                             #{w\ 4111}#
                             #{r\ 4112}#
                             #{mod\ 4113}#)
                           #{mod\ 4113}#)
                         #f)
                       (if (eq? #{p\ 4110}# 'each-any)
                         (begin
                           (let ((#{l\ 4130}#
                                   (#{match-each-any\ 4001}#
                                     #{e\ 4109}#
                                     #{w\ 4111}#
                                     #{mod\ 4113}#)))
                             (if #{l\ 4130}#
                               (cons #{l\ 4130}# #{r\ 4112}#)
                               #f)))
                         (begin
                           (let ((#{atom-key\ 4136}#
                                   (vector-ref #{p\ 4110}# 0)))
                             (if (eqv? #{atom-key\ 4136}# 'each)
                               (if (null? #{e\ 4109}#)
                                 (#{match-empty\ 4003}#
                                   (vector-ref #{p\ 4110}# 1)
                                   #{r\ 4112}#)
                                 (begin
                                   (let ((#{l\ 4139}#
                                           (#{match-each\ 3997}#
                                             #{e\ 4109}#
                                             (vector-ref #{p\ 4110}# 1)
                                             #{w\ 4111}#
                                             #{mod\ 4113}#)))
                                     (if #{l\ 4139}#
                                       (letrec*
                                         ((#{collect\ 4144}#
                                            (lambda (#{l\ 4145}#)
                                              (if (null? (car #{l\ 4145}#))
                                                #{r\ 4112}#
                                                (cons (map car #{l\ 4145}#)
                                                      (#{collect\ 4144}#
                                                        (map cdr
                                                             #{l\ 4145}#)))))))
                                         (begin
                                           (#{collect\ 4144}# #{l\ 4139}#)))
                                       #f))))
                               (if (eqv? #{atom-key\ 4136}# 'each+)
                                 (call-with-values
                                   (lambda ()
                                     (#{match-each+\ 3999}#
                                       #{e\ 4109}#
                                       (vector-ref #{p\ 4110}# 1)
                                       (vector-ref #{p\ 4110}# 2)
                                       (vector-ref #{p\ 4110}# 3)
                                       #{w\ 4111}#
                                       #{r\ 4112}#
                                       #{mod\ 4113}#))
                                   (lambda (#{xr*\ 4147}#
                                            #{y-pat\ 4148}#
                                            #{r\ 4149}#)
                                     (if #{r\ 4149}#
                                       (if (null? #{y-pat\ 4148}#)
                                         (if (null? #{xr*\ 4147}#)
                                           (#{match-empty\ 4003}#
                                             (vector-ref #{p\ 4110}# 1)
                                             #{r\ 4149}#)
                                           (#{combine\ 4005}#
                                             #{xr*\ 4147}#
                                             #{r\ 4149}#))
                                         #f)
                                       #f)))
                                 (if (eqv? #{atom-key\ 4136}# 'free-id)
                                   (if (#{id?\ 380}# #{e\ 4109}#)
                                     (if (#{free-id=?\ 436}#
                                           (#{wrap\ 446}#
                                             #{e\ 4109}#
                                             #{w\ 4111}#
                                             #{mod\ 4113}#)
                                           (vector-ref #{p\ 4110}# 1))
                                       #{r\ 4112}#
                                       #f)
                                     #f)
                                   (if (eqv? #{atom-key\ 4136}# 'atom)
                                     (if (equal?
                                           (vector-ref #{p\ 4110}# 1)
                                           (#{strip\ 486}#
                                             #{e\ 4109}#
                                             #{w\ 4111}#))
                                       #{r\ 4112}#
                                       #f)
                                     (if (eqv? #{atom-key\ 4136}# 'vector)
                                       (if (vector? #{e\ 4109}#)
                                         (#{match\ 4009}#
                                           (vector->list #{e\ 4109}#)
                                           (vector-ref #{p\ 4110}# 1)
                                           #{w\ 4111}#
                                           #{r\ 4112}#
                                           #{mod\ 4113}#)
                                         #f)))))))))))))
               (#{match\ 4009}#
                 (lambda (#{e\ 4166}#
                          #{p\ 4167}#
                          #{w\ 4168}#
                          #{r\ 4169}#
                          #{mod\ 4170}#)
                   (if (not #{r\ 4169}#)
                     #f
                     (if (eq? #{p\ 4167}# '_)
                       #{r\ 4169}#
                       (if (eq? #{p\ 4167}# 'any)
                         (cons (#{wrap\ 446}#
                                 #{e\ 4166}#
                                 #{w\ 4168}#
                                 #{mod\ 4170}#)
                               #{r\ 4169}#)
                         (if (#{syntax-object?\ 346}# #{e\ 4166}#)
                           (#{match*\ 4007}#
                             (#{syntax-object-expression\ 348}# #{e\ 4166}#)
                             #{p\ 4167}#
                             (#{join-wraps\ 428}#
                               #{w\ 4168}#
                               (#{syntax-object-wrap\ 350}# #{e\ 4166}#))
                             #{r\ 4169}#
                             (#{syntax-object-module\ 352}# #{e\ 4166}#))
                           (#{match*\ 4007}#
                             #{e\ 4166}#
                             #{p\ 4167}#
                             #{w\ 4168}#
                             #{r\ 4169}#
                             #{mod\ 4170}#))))))))
              (begin
                (set! $sc-dispatch
                  (lambda (#{e\ 4185}# #{p\ 4186}#)
                    (if (eq? #{p\ 4186}# 'any)
                      (list #{e\ 4185}#)
                      (if (eq? #{p\ 4186}# '_)
                        '()
                        (if (#{syntax-object?\ 346}# #{e\ 4185}#)
                          (#{match*\ 4007}#
                            (#{syntax-object-expression\ 348}# #{e\ 4185}#)
                            #{p\ 4186}#
                            (#{syntax-object-wrap\ 350}# #{e\ 4185}#)
                            '()
                            (#{syntax-object-module\ 352}# #{e\ 4185}#))
                          (#{match*\ 4007}#
                            #{e\ 4185}#
                            #{p\ 4186}#
                            '(())
                            '()
                            #f))))))))))))))

(define with-syntax
  (make-syntax-transformer
    'with-syntax
    'macro
    (lambda (#{x\ 4197}#)
      (let ((#{tmp\ 4199}# #{x\ 4197}#))
        (let ((#{tmp\ 4200}#
                ($sc-dispatch
                  #{tmp\ 4199}#
                  '(_ () any . each-any))))
          (if #{tmp\ 4200}#
            (@apply
              (lambda (#{e1\ 4203}# #{e2\ 4204}#)
                (cons '#(syntax-object
                         begin
                         ((top)
                          #(ribcage
                            #(e1 e2)
                            #((top) (top))
                            #("i4201" "i4202"))
                          #(ribcage () () ())
                          #(ribcage #(x) #((top)) #("i4198")))
                         (hygiene guile))
                      (cons #{e1\ 4203}# #{e2\ 4204}#)))
              #{tmp\ 4200}#)
            (let ((#{tmp\ 4206}#
                    ($sc-dispatch
                      #{tmp\ 4199}#
                      '(_ ((any any)) any . each-any))))
              (if #{tmp\ 4206}#
                (@apply
                  (lambda (#{out\ 4211}#
                           #{in\ 4212}#
                           #{e1\ 4213}#
                           #{e2\ 4214}#)
                    (list '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage
                                #(out in e1 e2)
                                #((top) (top) (top) (top))
                                #("i4207" "i4208" "i4209" "i4210"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i4198")))
                             (hygiene guile))
                          #{in\ 4212}#
                          '()
                          (list #{out\ 4211}#
                                (cons '#(syntax-object
                                         begin
                                         ((top)
                                          #(ribcage
                                            #(out in e1 e2)
                                            #((top) (top) (top) (top))
                                            #("i4207" "i4208" "i4209" "i4210"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i4198")))
                                         (hygiene guile))
                                      (cons #{e1\ 4213}# #{e2\ 4214}#)))))
                  #{tmp\ 4206}#)
                (let ((#{tmp\ 4216}#
                        ($sc-dispatch
                          #{tmp\ 4199}#
                          '(_ #(each (any any)) any . each-any))))
                  (if #{tmp\ 4216}#
                    (@apply
                      (lambda (#{out\ 4221}#
                               #{in\ 4222}#
                               #{e1\ 4223}#
                               #{e2\ 4224}#)
                        (list '#(syntax-object
                                 syntax-case
                                 ((top)
                                  #(ribcage
                                    #(out in e1 e2)
                                    #((top) (top) (top) (top))
                                    #("i4217" "i4218" "i4219" "i4220"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i4198")))
                                 (hygiene guile))
                              (cons '#(syntax-object
                                       list
                                       ((top)
                                        #(ribcage
                                          #(out in e1 e2)
                                          #((top) (top) (top) (top))
                                          #("i4217" "i4218" "i4219" "i4220"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i4198")))
                                       (hygiene guile))
                                    #{in\ 4222}#)
                              '()
                              (list #{out\ 4221}#
                                    (cons '#(syntax-object
                                             begin
                                             ((top)
                                              #(ribcage
                                                #(out in e1 e2)
                                                #((top) (top) (top) (top))
                                                #("i4217"
                                                  "i4218"
                                                  "i4219"
                                                  "i4220"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("i4198")))
                                             (hygiene guile))
                                          (cons #{e1\ 4223}# #{e2\ 4224}#)))))
                      #{tmp\ 4216}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 4199}#)))))))))))

(define syntax-rules
  (make-syntax-transformer
    'syntax-rules
    'macro
    (lambda (#{x\ 4228}#)
      (let ((#{tmp\ 4230}# #{x\ 4228}#))
        (let ((#{tmp\ 4231}#
                ($sc-dispatch
                  #{tmp\ 4230}#
                  '(_ each-any . #(each ((any . any) any))))))
          (if #{tmp\ 4231}#
            (@apply
              (lambda (#{k\ 4236}#
                       #{keyword\ 4237}#
                       #{pattern\ 4238}#
                       #{template\ 4239}#)
                (list '#(syntax-object
                         lambda
                         ((top)
                          #(ribcage
                            #(k keyword pattern template)
                            #((top) (top) (top) (top))
                            #("i4232" "i4233" "i4234" "i4235"))
                          #(ribcage () () ())
                          #(ribcage #(x) #((top)) #("i4229")))
                         (hygiene guile))
                      '(#(syntax-object
                          x
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("i4232" "i4233" "i4234" "i4235"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i4229")))
                          (hygiene guile)))
                      (vector
                        '(#(syntax-object
                            macro-type
                            ((top)
                             #(ribcage
                               #(k keyword pattern template)
                               #((top) (top) (top) (top))
                               #("i4232" "i4233" "i4234" "i4235"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i4229")))
                            (hygiene guile))
                          .
                          #(syntax-object
                            syntax-rules
                            ((top)
                             #(ribcage
                               #(k keyword pattern template)
                               #((top) (top) (top) (top))
                               #("i4232" "i4233" "i4234" "i4235"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i4229")))
                            (hygiene guile)))
                        (cons '#(syntax-object
                                 patterns
                                 ((top)
                                  #(ribcage
                                    #(k keyword pattern template)
                                    #((top) (top) (top) (top))
                                    #("i4232" "i4233" "i4234" "i4235"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i4229")))
                                 (hygiene guile))
                              #{pattern\ 4238}#))
                      (cons '#(syntax-object
                               syntax-case
                               ((top)
                                #(ribcage
                                  #(k keyword pattern template)
                                  #((top) (top) (top) (top))
                                  #("i4232" "i4233" "i4234" "i4235"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i4229")))
                               (hygiene guile))
                            (cons '#(syntax-object
                                     x
                                     ((top)
                                      #(ribcage
                                        #(k keyword pattern template)
                                        #((top) (top) (top) (top))
                                        #("i4232" "i4233" "i4234" "i4235"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i4229")))
                                     (hygiene guile))
                                  (cons #{k\ 4236}#
                                        (map (lambda (#{tmp\ 4243}#
                                                      #{tmp\ 4242}#)
                                               (list (cons '#(syntax-object
                                                              dummy
                                                              ((top)
                                                               #(ribcage
                                                                 #(k
                                                                   keyword
                                                                   pattern
                                                                   template)
                                                                 #((top)
                                                                   (top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4232"
                                                                   "i4233"
                                                                   "i4234"
                                                                   "i4235"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i4229")))
                                                              (hygiene guile))
                                                           #{tmp\ 4242}#)
                                                     (list '#(syntax-object
                                                              syntax
                                                              ((top)
                                                               #(ribcage
                                                                 #(k
                                                                   keyword
                                                                   pattern
                                                                   template)
                                                                 #((top)
                                                                   (top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4232"
                                                                   "i4233"
                                                                   "i4234"
                                                                   "i4235"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i4229")))
                                                              (hygiene guile))
                                                           #{tmp\ 4243}#)))
                                             #{template\ 4239}#
                                             #{pattern\ 4238}#))))))
              #{tmp\ 4231}#)
            (let ((#{tmp\ 4244}#
                    ($sc-dispatch
                      #{tmp\ 4230}#
                      '(_ each-any any . #(each ((any . any) any))))))
              (if (if #{tmp\ 4244}#
                    (@apply
                      (lambda (#{k\ 4250}#
                               #{docstring\ 4251}#
                               #{keyword\ 4252}#
                               #{pattern\ 4253}#
                               #{template\ 4254}#)
                        (string? (syntax->datum #{docstring\ 4251}#)))
                      #{tmp\ 4244}#)
                    #f)
                (@apply
                  (lambda (#{k\ 4260}#
                           #{docstring\ 4261}#
                           #{keyword\ 4262}#
                           #{pattern\ 4263}#
                           #{template\ 4264}#)
                    (list '#(syntax-object
                             lambda
                             ((top)
                              #(ribcage
                                #(k docstring keyword pattern template)
                                #((top) (top) (top) (top) (top))
                                #("i4255" "i4256" "i4257" "i4258" "i4259"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i4229")))
                             (hygiene guile))
                          '(#(syntax-object
                              x
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("i4255" "i4256" "i4257" "i4258" "i4259"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i4229")))
                              (hygiene guile)))
                          #{docstring\ 4261}#
                          (vector
                            '(#(syntax-object
                                macro-type
                                ((top)
                                 #(ribcage
                                   #(k docstring keyword pattern template)
                                   #((top) (top) (top) (top) (top))
                                   #("i4255" "i4256" "i4257" "i4258" "i4259"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("i4229")))
                                (hygiene guile))
                              .
                              #(syntax-object
                                syntax-rules
                                ((top)
                                 #(ribcage
                                   #(k docstring keyword pattern template)
                                   #((top) (top) (top) (top) (top))
                                   #("i4255" "i4256" "i4257" "i4258" "i4259"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("i4229")))
                                (hygiene guile)))
                            (cons '#(syntax-object
                                     patterns
                                     ((top)
                                      #(ribcage
                                        #(k docstring keyword pattern template)
                                        #((top) (top) (top) (top) (top))
                                        #("i4255"
                                          "i4256"
                                          "i4257"
                                          "i4258"
                                          "i4259"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i4229")))
                                     (hygiene guile))
                                  #{pattern\ 4263}#))
                          (cons '#(syntax-object
                                   syntax-case
                                   ((top)
                                    #(ribcage
                                      #(k docstring keyword pattern template)
                                      #((top) (top) (top) (top) (top))
                                      #("i4255"
                                        "i4256"
                                        "i4257"
                                        "i4258"
                                        "i4259"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i4229")))
                                   (hygiene guile))
                                (cons '#(syntax-object
                                         x
                                         ((top)
                                          #(ribcage
                                            #(k
                                              docstring
                                              keyword
                                              pattern
                                              template)
                                            #((top) (top) (top) (top) (top))
                                            #("i4255"
                                              "i4256"
                                              "i4257"
                                              "i4258"
                                              "i4259"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i4229")))
                                         (hygiene guile))
                                      (cons #{k\ 4260}#
                                            (map (lambda (#{tmp\ 4268}#
                                                          #{tmp\ 4267}#)
                                                   (list (cons '#(syntax-object
                                                                  dummy
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(k
                                                                       docstring
                                                                       keyword
                                                                       pattern
                                                                       template)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i4255"
                                                                       "i4256"
                                                                       "i4257"
                                                                       "i4258"
                                                                       "i4259"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(x)
                                                                     #((top))
                                                                     #("i4229")))
                                                                  (hygiene
                                                                    guile))
                                                               #{tmp\ 4267}#)
                                                         (list '#(syntax-object
                                                                  syntax
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(k
                                                                       docstring
                                                                       keyword
                                                                       pattern
                                                                       template)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i4255"
                                                                       "i4256"
                                                                       "i4257"
                                                                       "i4258"
                                                                       "i4259"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(x)
                                                                     #((top))
                                                                     #("i4229")))
                                                                  (hygiene
                                                                    guile))
                                                               #{tmp\ 4268}#)))
                                                 #{template\ 4264}#
                                                 #{pattern\ 4263}#))))))
                  #{tmp\ 4244}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{tmp\ 4230}#)))))))))

(define let*
  (make-syntax-transformer
    'let*
    'macro
    (lambda (#{x\ 4269}#)
      (let ((#{tmp\ 4271}# #{x\ 4269}#))
        (let ((#{tmp\ 4272}#
                ($sc-dispatch
                  #{tmp\ 4271}#
                  '(any #(each (any any)) any . each-any))))
          (if (if #{tmp\ 4272}#
                (@apply
                  (lambda (#{let*\ 4278}#
                           #{x\ 4279}#
                           #{v\ 4280}#
                           #{e1\ 4281}#
                           #{e2\ 4282}#)
                    (and-map identifier? #{x\ 4279}#))
                  #{tmp\ 4272}#)
                #f)
            (@apply
              (lambda (#{let*\ 4289}#
                       #{x\ 4290}#
                       #{v\ 4291}#
                       #{e1\ 4292}#
                       #{e2\ 4293}#)
                (letrec*
                  ((#{f\ 4296}#
                     (lambda (#{bindings\ 4297}#)
                       (if (null? #{bindings\ 4297}#)
                         (cons '#(syntax-object
                                  let
                                  ((top)
                                   #(ribcage () () ())
                                   #(ribcage
                                     #(f bindings)
                                     #((top) (top))
                                     #("i4294" "i4295"))
                                   #(ribcage
                                     #(let* x v e1 e2)
                                     #((top) (top) (top) (top) (top))
                                     #("i4284"
                                       "i4285"
                                       "i4286"
                                       "i4287"
                                       "i4288"))
                                   #(ribcage () () ())
                                   #(ribcage #(x) #((top)) #("i4270")))
                                  (hygiene guile))
                               (cons '() (cons #{e1\ 4292}# #{e2\ 4293}#)))
                         (let ((#{tmp\ 4302}#
                                 (list (#{f\ 4296}# (cdr #{bindings\ 4297}#))
                                       (car #{bindings\ 4297}#))))
                           (let ((#{tmp\ 4303}#
                                   ($sc-dispatch #{tmp\ 4302}# '(any any))))
                             (if #{tmp\ 4303}#
                               (@apply
                                 (lambda (#{body\ 4306}# #{binding\ 4307}#)
                                   (list '#(syntax-object
                                            let
                                            ((top)
                                             #(ribcage
                                               #(body binding)
                                               #((top) (top))
                                               #("i4304" "i4305"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(f bindings)
                                               #((top) (top))
                                               #("i4294" "i4295"))
                                             #(ribcage
                                               #(let* x v e1 e2)
                                               #((top) (top) (top) (top) (top))
                                               #("i4284"
                                                 "i4285"
                                                 "i4286"
                                                 "i4287"
                                                 "i4288"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i4270")))
                                            (hygiene guile))
                                         (list #{binding\ 4307}#)
                                         #{body\ 4306}#))
                                 #{tmp\ 4303}#)
                               (syntax-violation
                                 #f
                                 "source expression failed to match any pattern"
                                 #{tmp\ 4302}#))))))))
                  (begin
                    (#{f\ 4296}# (map list #{x\ 4290}# #{v\ 4291}#)))))
              #{tmp\ 4272}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{tmp\ 4271}#)))))))

(define do
  (make-syntax-transformer
    'do
    'macro
    (lambda (#{orig-x\ 4308}#)
      (let ((#{tmp\ 4310}# #{orig-x\ 4308}#))
        (let ((#{tmp\ 4311}#
                ($sc-dispatch
                  #{tmp\ 4310}#
                  '(_ #(each (any any . any))
                      (any . each-any)
                      .
                      each-any))))
          (if #{tmp\ 4311}#
            (@apply
              (lambda (#{var\ 4318}#
                       #{init\ 4319}#
                       #{step\ 4320}#
                       #{e0\ 4321}#
                       #{e1\ 4322}#
                       #{c\ 4323}#)
                (let ((#{tmp\ 4325}#
                        (map (lambda (#{v\ 4346}# #{s\ 4347}#)
                               (let ((#{tmp\ 4350}# #{s\ 4347}#))
                                 (let ((#{tmp\ 4351}#
                                         ($sc-dispatch #{tmp\ 4350}# '())))
                                   (if #{tmp\ 4351}#
                                     (@apply
                                       (lambda () #{v\ 4346}#)
                                       #{tmp\ 4351}#)
                                     (let ((#{tmp\ 4352}#
                                             ($sc-dispatch
                                               #{tmp\ 4350}#
                                               '(any))))
                                       (if #{tmp\ 4352}#
                                         (@apply
                                           (lambda (#{e\ 4354}#) #{e\ 4354}#)
                                           #{tmp\ 4352}#)
                                         (let ((#{_\ 4356}# #{tmp\ 4350}#))
                                           (syntax-violation
                                             'do
                                             "bad step expression"
                                             #{orig-x\ 4308}#
                                             #{s\ 4347}#))))))))
                             #{var\ 4318}#
                             #{step\ 4320}#)))
                  (let ((#{tmp\ 4326}#
                          ($sc-dispatch #{tmp\ 4325}# 'each-any)))
                    (if #{tmp\ 4326}#
                      (@apply
                        (lambda (#{step\ 4328}#)
                          (let ((#{tmp\ 4329}# #{e1\ 4322}#))
                            (let ((#{tmp\ 4330}#
                                    ($sc-dispatch #{tmp\ 4329}# '())))
                              (if #{tmp\ 4330}#
                                (@apply
                                  (lambda ()
                                    (list '#(syntax-object
                                             let
                                             ((top)
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("i4327"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i4312"
                                                  "i4313"
                                                  "i4314"
                                                  "i4315"
                                                  "i4316"
                                                  "i4317"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("i4309")))
                                             (hygiene guile))
                                          '#(syntax-object
                                             doloop
                                             ((top)
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("i4327"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i4312"
                                                  "i4313"
                                                  "i4314"
                                                  "i4315"
                                                  "i4316"
                                                  "i4317"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("i4309")))
                                             (hygiene guile))
                                          (map list
                                               #{var\ 4318}#
                                               #{init\ 4319}#)
                                          (list '#(syntax-object
                                                   if
                                                   ((top)
                                                    #(ribcage
                                                      #(step)
                                                      #((top))
                                                      #("i4327"))
                                                    #(ribcage
                                                      #(var init step e0 e1 c)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i4312"
                                                        "i4313"
                                                        "i4314"
                                                        "i4315"
                                                        "i4316"
                                                        "i4317"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(orig-x)
                                                      #((top))
                                                      #("i4309")))
                                                   (hygiene guile))
                                                (list '#(syntax-object
                                                         not
                                                         ((top)
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("i4327"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i4312"
                                                              "i4313"
                                                              "i4314"
                                                              "i4315"
                                                              "i4316"
                                                              "i4317"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("i4309")))
                                                         (hygiene guile))
                                                      #{e0\ 4321}#)
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("i4327"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i4312"
                                                              "i4313"
                                                              "i4314"
                                                              "i4315"
                                                              "i4316"
                                                              "i4317"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("i4309")))
                                                         (hygiene guile))
                                                      (append
                                                        #{c\ 4323}#
                                                        (list (cons '#(syntax-object
                                                                       doloop
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(step)
                                                                          #((top))
                                                                          #("i4327"))
                                                                        #(ribcage
                                                                          #(var
                                                                            init
                                                                            step
                                                                            e0
                                                                            e1
                                                                            c)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i4312"
                                                                            "i4313"
                                                                            "i4314"
                                                                            "i4315"
                                                                            "i4316"
                                                                            "i4317"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(orig-x)
                                                                          #((top))
                                                                          #("i4309")))
                                                                       (hygiene
                                                                         guile))
                                                                    #{step\ 4328}#)))))))
                                  #{tmp\ 4330}#)
                                (let ((#{tmp\ 4335}#
                                        ($sc-dispatch
                                          #{tmp\ 4329}#
                                          '(any . each-any))))
                                  (if #{tmp\ 4335}#
                                    (@apply
                                      (lambda (#{e1\ 4338}# #{e2\ 4339}#)
                                        (list '#(syntax-object
                                                 let
                                                 ((top)
                                                  #(ribcage
                                                    #(e1 e2)
                                                    #((top) (top))
                                                    #("i4336" "i4337"))
                                                  #(ribcage
                                                    #(step)
                                                    #((top))
                                                    #("i4327"))
                                                  #(ribcage
                                                    #(var init step e0 e1 c)
                                                    #((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                    #("i4312"
                                                      "i4313"
                                                      "i4314"
                                                      "i4315"
                                                      "i4316"
                                                      "i4317"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(orig-x)
                                                    #((top))
                                                    #("i4309")))
                                                 (hygiene guile))
                                              '#(syntax-object
                                                 doloop
                                                 ((top)
                                                  #(ribcage
                                                    #(e1 e2)
                                                    #((top) (top))
                                                    #("i4336" "i4337"))
                                                  #(ribcage
                                                    #(step)
                                                    #((top))
                                                    #("i4327"))
                                                  #(ribcage
                                                    #(var init step e0 e1 c)
                                                    #((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                    #("i4312"
                                                      "i4313"
                                                      "i4314"
                                                      "i4315"
                                                      "i4316"
                                                      "i4317"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(orig-x)
                                                    #((top))
                                                    #("i4309")))
                                                 (hygiene guile))
                                              (map list
                                                   #{var\ 4318}#
                                                   #{init\ 4319}#)
                                              (list '#(syntax-object
                                                       if
                                                       ((top)
                                                        #(ribcage
                                                          #(e1 e2)
                                                          #((top) (top))
                                                          #("i4336" "i4337"))
                                                        #(ribcage
                                                          #(step)
                                                          #((top))
                                                          #("i4327"))
                                                        #(ribcage
                                                          #(var
                                                            init
                                                            step
                                                            e0
                                                            e1
                                                            c)
                                                          #((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                          #("i4312"
                                                            "i4313"
                                                            "i4314"
                                                            "i4315"
                                                            "i4316"
                                                            "i4317"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(orig-x)
                                                          #((top))
                                                          #("i4309")))
                                                       (hygiene guile))
                                                    #{e0\ 4321}#
                                                    (cons '#(syntax-object
                                                             begin
                                                             ((top)
                                                              #(ribcage
                                                                #(e1 e2)
                                                                #((top) (top))
                                                                #("i4336"
                                                                  "i4337"))
                                                              #(ribcage
                                                                #(step)
                                                                #((top))
                                                                #("i4327"))
                                                              #(ribcage
                                                                #(var
                                                                  init
                                                                  step
                                                                  e0
                                                                  e1
                                                                  c)
                                                                #((top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top))
                                                                #("i4312"
                                                                  "i4313"
                                                                  "i4314"
                                                                  "i4315"
                                                                  "i4316"
                                                                  "i4317"))
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                #(orig-x)
                                                                #((top))
                                                                #("i4309")))
                                                             (hygiene guile))
                                                          (cons #{e1\ 4338}#
                                                                #{e2\ 4339}#))
                                                    (cons '#(syntax-object
                                                             begin
                                                             ((top)
                                                              #(ribcage
                                                                #(e1 e2)
                                                                #((top) (top))
                                                                #("i4336"
                                                                  "i4337"))
                                                              #(ribcage
                                                                #(step)
                                                                #((top))
                                                                #("i4327"))
                                                              #(ribcage
                                                                #(var
                                                                  init
                                                                  step
                                                                  e0
                                                                  e1
                                                                  c)
                                                                #((top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top))
                                                                #("i4312"
                                                                  "i4313"
                                                                  "i4314"
                                                                  "i4315"
                                                                  "i4316"
                                                                  "i4317"))
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                #(orig-x)
                                                                #((top))
                                                                #("i4309")))
                                                             (hygiene guile))
                                                          (append
                                                            #{c\ 4323}#
                                                            (list (cons '#(syntax-object
                                                                           doloop
                                                                           ((top)
                                                                            #(ribcage
                                                                              #(e1
                                                                                e2)
                                                                              #((top)
                                                                                (top))
                                                                              #("i4336"
                                                                                "i4337"))
                                                                            #(ribcage
                                                                              #(step)
                                                                              #((top))
                                                                              #("i4327"))
                                                                            #(ribcage
                                                                              #(var
                                                                                init
                                                                                step
                                                                                e0
                                                                                e1
                                                                                c)
                                                                              #((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                              #("i4312"
                                                                                "i4313"
                                                                                "i4314"
                                                                                "i4315"
                                                                                "i4316"
                                                                                "i4317"))
                                                                            #(ribcage
                                                                              ()
                                                                              ()
                                                                              ())
                                                                            #(ribcage
                                                                              #(orig-x)
                                                                              #((top))
                                                                              #("i4309")))
                                                                           (hygiene
                                                                             guile))
                                                                        #{step\ 4328}#)))))))
                                      #{tmp\ 4335}#)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      #{tmp\ 4329}#)))))))
                        #{tmp\ 4326}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp\ 4325}#)))))
              #{tmp\ 4311}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{tmp\ 4310}#)))))))

(define quasiquote
  (make-syntax-transformer
    'quasiquote
    'macro
    (letrec*
      ((#{quasi\ 4360}#
         (lambda (#{p\ 4373}# #{lev\ 4374}#)
           (let ((#{tmp\ 4377}# #{p\ 4373}#))
             (let ((#{tmp\ 4378}#
                     ($sc-dispatch
                       #{tmp\ 4377}#
                       '(#(free-id
                           #(syntax-object
                             unquote
                             ((top)
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i4375" "i4376"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("i4371"
                                 "i4369"
                                 "i4367"
                                 "i4365"
                                 "i4363"
                                 "i4361"
                                 "i4359")))
                             (hygiene guile)))
                         any))))
               (if #{tmp\ 4378}#
                 (@apply
                   (lambda (#{p\ 4380}#)
                     (if (= #{lev\ 4374}# 0)
                       (list '#(syntax-object
                                "value"
                                ((top)
                                 #(ribcage #(p) #((top)) #("i4379"))
                                 #(ribcage () () ())
                                 #(ribcage
                                   #(p lev)
                                   #((top) (top))
                                   #("i4375" "i4376"))
                                 #(ribcage
                                   (emit quasivector
                                         quasilist*
                                         quasiappend
                                         quasicons
                                         vquasi
                                         quasi)
                                   ((top) (top) (top) (top) (top) (top) (top))
                                   ("i4371"
                                    "i4369"
                                    "i4367"
                                    "i4365"
                                    "i4363"
                                    "i4361"
                                    "i4359")))
                                (hygiene guile))
                             #{p\ 4380}#)
                       (#{quasicons\ 4364}#
                         '(#(syntax-object
                             "quote"
                             ((top)
                              #(ribcage #(p) #((top)) #("i4379"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i4375" "i4376"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("i4371"
                                 "i4369"
                                 "i4367"
                                 "i4365"
                                 "i4363"
                                 "i4361"
                                 "i4359")))
                             (hygiene guile))
                           #(syntax-object
                             unquote
                             ((top)
                              #(ribcage #(p) #((top)) #("i4379"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i4375" "i4376"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("i4371"
                                 "i4369"
                                 "i4367"
                                 "i4365"
                                 "i4363"
                                 "i4361"
                                 "i4359")))
                             (hygiene guile)))
                         (#{quasi\ 4360}#
                           (list #{p\ 4380}#)
                           (1- #{lev\ 4374}#)))))
                   #{tmp\ 4378}#)
                 (let ((#{tmp\ 4381}#
                         ($sc-dispatch
                           #{tmp\ 4377}#
                           '(#(free-id
                               #(syntax-object
                                 quasiquote
                                 ((top)
                                  #(ribcage () () ())
                                  #(ribcage
                                    #(p lev)
                                    #((top) (top))
                                    #("i4375" "i4376"))
                                  #(ribcage
                                    (emit quasivector
                                          quasilist*
                                          quasiappend
                                          quasicons
                                          vquasi
                                          quasi)
                                    ((top) (top) (top) (top) (top) (top) (top))
                                    ("i4371"
                                     "i4369"
                                     "i4367"
                                     "i4365"
                                     "i4363"
                                     "i4361"
                                     "i4359")))
                                 (hygiene guile)))
                             any))))
                   (if #{tmp\ 4381}#
                     (@apply
                       (lambda (#{p\ 4383}#)
                         (#{quasicons\ 4364}#
                           '(#(syntax-object
                               "quote"
                               ((top)
                                #(ribcage #(p) #((top)) #("i4382"))
                                #(ribcage () () ())
                                #(ribcage
                                  #(p lev)
                                  #((top) (top))
                                  #("i4375" "i4376"))
                                #(ribcage
                                  (emit quasivector
                                        quasilist*
                                        quasiappend
                                        quasicons
                                        vquasi
                                        quasi)
                                  ((top) (top) (top) (top) (top) (top) (top))
                                  ("i4371"
                                   "i4369"
                                   "i4367"
                                   "i4365"
                                   "i4363"
                                   "i4361"
                                   "i4359")))
                               (hygiene guile))
                             #(syntax-object
                               quasiquote
                               ((top)
                                #(ribcage #(p) #((top)) #("i4382"))
                                #(ribcage () () ())
                                #(ribcage
                                  #(p lev)
                                  #((top) (top))
                                  #("i4375" "i4376"))
                                #(ribcage
                                  (emit quasivector
                                        quasilist*
                                        quasiappend
                                        quasicons
                                        vquasi
                                        quasi)
                                  ((top) (top) (top) (top) (top) (top) (top))
                                  ("i4371"
                                   "i4369"
                                   "i4367"
                                   "i4365"
                                   "i4363"
                                   "i4361"
                                   "i4359")))
                               (hygiene guile)))
                           (#{quasi\ 4360}#
                             (list #{p\ 4383}#)
                             (1+ #{lev\ 4374}#))))
                       #{tmp\ 4381}#)
                     (let ((#{tmp\ 4384}#
                             ($sc-dispatch #{tmp\ 4377}# '(any . any))))
                       (if #{tmp\ 4384}#
                         (@apply
                           (lambda (#{p\ 4387}# #{q\ 4388}#)
                             (let ((#{tmp\ 4389}# #{p\ 4387}#))
                               (let ((#{tmp\ 4390}#
                                       ($sc-dispatch
                                         #{tmp\ 4389}#
                                         '(#(free-id
                                             #(syntax-object
                                               unquote
                                               ((top)
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("i4385" "i4386"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("i4375" "i4376"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i4371"
                                                   "i4369"
                                                   "i4367"
                                                   "i4365"
                                                   "i4363"
                                                   "i4361"
                                                   "i4359")))
                                               (hygiene guile)))
                                           .
                                           each-any))))
                                 (if #{tmp\ 4390}#
                                   (@apply
                                     (lambda (#{p\ 4392}#)
                                       (if (= #{lev\ 4374}# 0)
                                         (#{quasilist*\ 4368}#
                                           (map (lambda (#{tmp\ 4393}#)
                                                  (list '#(syntax-object
                                                           "value"
                                                           ((top)
                                                            #(ribcage
                                                              #(p)
                                                              #((top))
                                                              #("i4391"))
                                                            #(ribcage
                                                              #(p q)
                                                              #((top) (top))
                                                              #("i4385"
                                                                "i4386"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(p lev)
                                                              #((top) (top))
                                                              #("i4375"
                                                                "i4376"))
                                                            #(ribcage
                                                              (emit quasivector
                                                                    quasilist*
                                                                    quasiappend
                                                                    quasicons
                                                                    vquasi
                                                                    quasi)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("i4371"
                                                               "i4369"
                                                               "i4367"
                                                               "i4365"
                                                               "i4363"
                                                               "i4361"
                                                               "i4359")))
                                                           (hygiene guile))
                                                        #{tmp\ 4393}#))
                                                #{p\ 4392}#)
                                           (#{quasi\ 4360}#
                                             #{q\ 4388}#
                                             #{lev\ 4374}#))
                                         (#{quasicons\ 4364}#
                                           (#{quasicons\ 4364}#
                                             '(#(syntax-object
                                                 "quote"
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("i4391"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("i4385" "i4386"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("i4375" "i4376"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i4371"
                                                     "i4369"
                                                     "i4367"
                                                     "i4365"
                                                     "i4363"
                                                     "i4361"
                                                     "i4359")))
                                                 (hygiene guile))
                                               #(syntax-object
                                                 unquote
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("i4391"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("i4385" "i4386"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("i4375" "i4376"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i4371"
                                                     "i4369"
                                                     "i4367"
                                                     "i4365"
                                                     "i4363"
                                                     "i4361"
                                                     "i4359")))
                                                 (hygiene guile)))
                                             (#{quasi\ 4360}#
                                               #{p\ 4392}#
                                               (1- #{lev\ 4374}#)))
                                           (#{quasi\ 4360}#
                                             #{q\ 4388}#
                                             #{lev\ 4374}#))))
                                     #{tmp\ 4390}#)
                                   (let ((#{tmp\ 4395}#
                                           ($sc-dispatch
                                             #{tmp\ 4389}#
                                             '(#(free-id
                                                 #(syntax-object
                                                   unquote-splicing
                                                   ((top)
                                                    #(ribcage
                                                      #(p q)
                                                      #((top) (top))
                                                      #("i4385" "i4386"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(p lev)
                                                      #((top) (top))
                                                      #("i4375" "i4376"))
                                                    #(ribcage
                                                      (emit quasivector
                                                            quasilist*
                                                            quasiappend
                                                            quasicons
                                                            vquasi
                                                            quasi)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i4371"
                                                       "i4369"
                                                       "i4367"
                                                       "i4365"
                                                       "i4363"
                                                       "i4361"
                                                       "i4359")))
                                                   (hygiene guile)))
                                               .
                                               each-any))))
                                     (if #{tmp\ 4395}#
                                       (@apply
                                         (lambda (#{p\ 4397}#)
                                           (if (= #{lev\ 4374}# 0)
                                             (#{quasiappend\ 4366}#
                                               (map (lambda (#{tmp\ 4398}#)
                                                      (list '#(syntax-object
                                                               "value"
                                                               ((top)
                                                                #(ribcage
                                                                  #(p)
                                                                  #((top))
                                                                  #("i4396"))
                                                                #(ribcage
                                                                  #(p q)
                                                                  #((top)
                                                                    (top))
                                                                  #("i4385"
                                                                    "i4386"))
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  #(p lev)
                                                                  #((top)
                                                                    (top))
                                                                  #("i4375"
                                                                    "i4376"))
                                                                #(ribcage
                                                                  (emit quasivector
                                                                        quasilist*
                                                                        quasiappend
                                                                        quasicons
                                                                        vquasi
                                                                        quasi)
                                                                  ((top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top))
                                                                  ("i4371"
                                                                   "i4369"
                                                                   "i4367"
                                                                   "i4365"
                                                                   "i4363"
                                                                   "i4361"
                                                                   "i4359")))
                                                               (hygiene guile))
                                                            #{tmp\ 4398}#))
                                                    #{p\ 4397}#)
                                               (#{quasi\ 4360}#
                                                 #{q\ 4388}#
                                                 #{lev\ 4374}#))
                                             (#{quasicons\ 4364}#
                                               (#{quasicons\ 4364}#
                                                 '(#(syntax-object
                                                     "quote"
                                                     ((top)
                                                      #(ribcage
                                                        #(p)
                                                        #((top))
                                                        #("i4396"))
                                                      #(ribcage
                                                        #(p q)
                                                        #((top) (top))
                                                        #("i4385" "i4386"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(p lev)
                                                        #((top) (top))
                                                        #("i4375" "i4376"))
                                                      #(ribcage
                                                        (emit quasivector
                                                              quasilist*
                                                              quasiappend
                                                              quasicons
                                                              vquasi
                                                              quasi)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("i4371"
                                                         "i4369"
                                                         "i4367"
                                                         "i4365"
                                                         "i4363"
                                                         "i4361"
                                                         "i4359")))
                                                     (hygiene guile))
                                                   #(syntax-object
                                                     unquote-splicing
                                                     ((top)
                                                      #(ribcage
                                                        #(p)
                                                        #((top))
                                                        #("i4396"))
                                                      #(ribcage
                                                        #(p q)
                                                        #((top) (top))
                                                        #("i4385" "i4386"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(p lev)
                                                        #((top) (top))
                                                        #("i4375" "i4376"))
                                                      #(ribcage
                                                        (emit quasivector
                                                              quasilist*
                                                              quasiappend
                                                              quasicons
                                                              vquasi
                                                              quasi)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("i4371"
                                                         "i4369"
                                                         "i4367"
                                                         "i4365"
                                                         "i4363"
                                                         "i4361"
                                                         "i4359")))
                                                     (hygiene guile)))
                                                 (#{quasi\ 4360}#
                                                   #{p\ 4397}#
                                                   (1- #{lev\ 4374}#)))
                                               (#{quasi\ 4360}#
                                                 #{q\ 4388}#
                                                 #{lev\ 4374}#))))
                                         #{tmp\ 4395}#)
                                       (let ((#{_\ 4401}# #{tmp\ 4389}#))
                                         (#{quasicons\ 4364}#
                                           (#{quasi\ 4360}#
                                             #{p\ 4387}#
                                             #{lev\ 4374}#)
                                           (#{quasi\ 4360}#
                                             #{q\ 4388}#
                                             #{lev\ 4374}#)))))))))
                           #{tmp\ 4384}#)
                         (let ((#{tmp\ 4402}#
                                 ($sc-dispatch
                                   #{tmp\ 4377}#
                                   '#(vector each-any))))
                           (if #{tmp\ 4402}#
                             (@apply
                               (lambda (#{x\ 4404}#)
                                 (#{quasivector\ 4370}#
                                   (#{vquasi\ 4362}#
                                     #{x\ 4404}#
                                     #{lev\ 4374}#)))
                               #{tmp\ 4402}#)
                             (let ((#{p\ 4407}# #{tmp\ 4377}#))
                               (list '#(syntax-object
                                        "quote"
                                        ((top)
                                         #(ribcage #(p) #((top)) #("i4406"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(p lev)
                                           #((top) (top))
                                           #("i4375" "i4376"))
                                         #(ribcage
                                           (emit quasivector
                                                 quasilist*
                                                 quasiappend
                                                 quasicons
                                                 vquasi
                                                 quasi)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("i4371"
                                            "i4369"
                                            "i4367"
                                            "i4365"
                                            "i4363"
                                            "i4361"
                                            "i4359")))
                                        (hygiene guile))
                                     #{p\ 4407}#)))))))))))))
       (#{vquasi\ 4362}#
         (lambda (#{p\ 4408}# #{lev\ 4409}#)
           (let ((#{tmp\ 4412}# #{p\ 4408}#))
             (let ((#{tmp\ 4413}#
                     ($sc-dispatch #{tmp\ 4412}# '(any . any))))
               (if #{tmp\ 4413}#
                 (@apply
                   (lambda (#{p\ 4416}# #{q\ 4417}#)
                     (let ((#{tmp\ 4418}# #{p\ 4416}#))
                       (let ((#{tmp\ 4419}#
                               ($sc-dispatch
                                 #{tmp\ 4418}#
                                 '(#(free-id
                                     #(syntax-object
                                       unquote
                                       ((top)
                                        #(ribcage
                                          #(p q)
                                          #((top) (top))
                                          #("i4414" "i4415"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(p lev)
                                          #((top) (top))
                                          #("i4410" "i4411"))
                                        #(ribcage
                                          (emit quasivector
                                                quasilist*
                                                quasiappend
                                                quasicons
                                                vquasi
                                                quasi)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("i4371"
                                           "i4369"
                                           "i4367"
                                           "i4365"
                                           "i4363"
                                           "i4361"
                                           "i4359")))
                                       (hygiene guile)))
                                   .
                                   each-any))))
                         (if #{tmp\ 4419}#
                           (@apply
                             (lambda (#{p\ 4421}#)
                               (if (= #{lev\ 4409}# 0)
                                 (#{quasilist*\ 4368}#
                                   (map (lambda (#{tmp\ 4422}#)
                                          (list '#(syntax-object
                                                   "value"
                                                   ((top)
                                                    #(ribcage
                                                      #(p)
                                                      #((top))
                                                      #("i4420"))
                                                    #(ribcage
                                                      #(p q)
                                                      #((top) (top))
                                                      #("i4414" "i4415"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(p lev)
                                                      #((top) (top))
                                                      #("i4410" "i4411"))
                                                    #(ribcage
                                                      (emit quasivector
                                                            quasilist*
                                                            quasiappend
                                                            quasicons
                                                            vquasi
                                                            quasi)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i4371"
                                                       "i4369"
                                                       "i4367"
                                                       "i4365"
                                                       "i4363"
                                                       "i4361"
                                                       "i4359")))
                                                   (hygiene guile))
                                                #{tmp\ 4422}#))
                                        #{p\ 4421}#)
                                   (#{vquasi\ 4362}#
                                     #{q\ 4417}#
                                     #{lev\ 4409}#))
                                 (#{quasicons\ 4364}#
                                   (#{quasicons\ 4364}#
                                     '(#(syntax-object
                                         "quote"
                                         ((top)
                                          #(ribcage #(p) #((top)) #("i4420"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("i4414" "i4415"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("i4410" "i4411"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i4371"
                                             "i4369"
                                             "i4367"
                                             "i4365"
                                             "i4363"
                                             "i4361"
                                             "i4359")))
                                         (hygiene guile))
                                       #(syntax-object
                                         unquote
                                         ((top)
                                          #(ribcage #(p) #((top)) #("i4420"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("i4414" "i4415"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("i4410" "i4411"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i4371"
                                             "i4369"
                                             "i4367"
                                             "i4365"
                                             "i4363"
                                             "i4361"
                                             "i4359")))
                                         (hygiene guile)))
                                     (#{quasi\ 4360}#
                                       #{p\ 4421}#
                                       (1- #{lev\ 4409}#)))
                                   (#{vquasi\ 4362}#
                                     #{q\ 4417}#
                                     #{lev\ 4409}#))))
                             #{tmp\ 4419}#)
                           (let ((#{tmp\ 4424}#
                                   ($sc-dispatch
                                     #{tmp\ 4418}#
                                     '(#(free-id
                                         #(syntax-object
                                           unquote-splicing
                                           ((top)
                                            #(ribcage
                                              #(p q)
                                              #((top) (top))
                                              #("i4414" "i4415"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(p lev)
                                              #((top) (top))
                                              #("i4410" "i4411"))
                                            #(ribcage
                                              (emit quasivector
                                                    quasilist*
                                                    quasiappend
                                                    quasicons
                                                    vquasi
                                                    quasi)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("i4371"
                                               "i4369"
                                               "i4367"
                                               "i4365"
                                               "i4363"
                                               "i4361"
                                               "i4359")))
                                           (hygiene guile)))
                                       .
                                       each-any))))
                             (if #{tmp\ 4424}#
                               (@apply
                                 (lambda (#{p\ 4426}#)
                                   (if (= #{lev\ 4409}# 0)
                                     (#{quasiappend\ 4366}#
                                       (map (lambda (#{tmp\ 4427}#)
                                              (list '#(syntax-object
                                                       "value"
                                                       ((top)
                                                        #(ribcage
                                                          #(p)
                                                          #((top))
                                                          #("i4425"))
                                                        #(ribcage
                                                          #(p q)
                                                          #((top) (top))
                                                          #("i4414" "i4415"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p lev)
                                                          #((top) (top))
                                                          #("i4410" "i4411"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i4371"
                                                           "i4369"
                                                           "i4367"
                                                           "i4365"
                                                           "i4363"
                                                           "i4361"
                                                           "i4359")))
                                                       (hygiene guile))
                                                    #{tmp\ 4427}#))
                                            #{p\ 4426}#)
                                       (#{vquasi\ 4362}#
                                         #{q\ 4417}#
                                         #{lev\ 4409}#))
                                     (#{quasicons\ 4364}#
                                       (#{quasicons\ 4364}#
                                         '(#(syntax-object
                                             "quote"
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("i4425"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("i4414" "i4415"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i4410" "i4411"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i4371"
                                                 "i4369"
                                                 "i4367"
                                                 "i4365"
                                                 "i4363"
                                                 "i4361"
                                                 "i4359")))
                                             (hygiene guile))
                                           #(syntax-object
                                             unquote-splicing
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("i4425"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("i4414" "i4415"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i4410" "i4411"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i4371"
                                                 "i4369"
                                                 "i4367"
                                                 "i4365"
                                                 "i4363"
                                                 "i4361"
                                                 "i4359")))
                                             (hygiene guile)))
                                         (#{quasi\ 4360}#
                                           #{p\ 4426}#
                                           (1- #{lev\ 4409}#)))
                                       (#{vquasi\ 4362}#
                                         #{q\ 4417}#
                                         #{lev\ 4409}#))))
                                 #{tmp\ 4424}#)
                               (let ((#{_\ 4430}# #{tmp\ 4418}#))
                                 (#{quasicons\ 4364}#
                                   (#{quasi\ 4360}# #{p\ 4416}# #{lev\ 4409}#)
                                   (#{vquasi\ 4362}#
                                     #{q\ 4417}#
                                     #{lev\ 4409}#)))))))))
                   #{tmp\ 4413}#)
                 (let ((#{tmp\ 4431}# ($sc-dispatch #{tmp\ 4412}# '())))
                   (if #{tmp\ 4431}#
                     (@apply
                       (lambda ()
                         '(#(syntax-object
                             "quote"
                             ((top)
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i4410" "i4411"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("i4371"
                                 "i4369"
                                 "i4367"
                                 "i4365"
                                 "i4363"
                                 "i4361"
                                 "i4359")))
                             (hygiene guile))
                           ()))
                       #{tmp\ 4431}#)
                     (syntax-violation
                       #f
                       "source expression failed to match any pattern"
                       #{tmp\ 4412}#))))))))
       (#{quasicons\ 4364}#
         (lambda (#{x\ 4432}# #{y\ 4433}#)
           (let ((#{tmp\ 4437}# (list #{x\ 4432}# #{y\ 4433}#)))
             (let ((#{tmp\ 4438}#
                     ($sc-dispatch #{tmp\ 4437}# '(any any))))
               (if #{tmp\ 4438}#
                 (@apply
                   (lambda (#{x\ 4441}# #{y\ 4442}#)
                     (let ((#{tmp\ 4443}# #{y\ 4442}#))
                       (let ((#{tmp\ 4444}#
                               ($sc-dispatch
                                 #{tmp\ 4443}#
                                 '(#(atom "quote") any))))
                         (if #{tmp\ 4444}#
                           (@apply
                             (lambda (#{dy\ 4446}#)
                               (let ((#{tmp\ 4447}# #{x\ 4441}#))
                                 (let ((#{tmp\ 4448}#
                                         ($sc-dispatch
                                           #{tmp\ 4447}#
                                           '(#(atom "quote") any))))
                                   (if #{tmp\ 4448}#
                                     (@apply
                                       (lambda (#{dx\ 4450}#)
                                         (list '#(syntax-object
                                                  "quote"
                                                  ((top)
                                                   #(ribcage
                                                     #(dx)
                                                     #((top))
                                                     #("i4449"))
                                                   #(ribcage
                                                     #(dy)
                                                     #((top))
                                                     #("i4445"))
                                                   #(ribcage
                                                     #(x y)
                                                     #((top) (top))
                                                     #("i4439" "i4440"))
                                                   #(ribcage () () ())
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x y)
                                                     #((top) (top))
                                                     #("i4434" "i4435"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i4371"
                                                      "i4369"
                                                      "i4367"
                                                      "i4365"
                                                      "i4363"
                                                      "i4361"
                                                      "i4359")))
                                                  (hygiene guile))
                                               (cons #{dx\ 4450}#
                                                     #{dy\ 4446}#)))
                                       #{tmp\ 4448}#)
                                     (let ((#{_\ 4452}# #{tmp\ 4447}#))
                                       (if (null? #{dy\ 4446}#)
                                         (list '#(syntax-object
                                                  "list"
                                                  ((top)
                                                   #(ribcage
                                                     #(_)
                                                     #((top))
                                                     #("i4451"))
                                                   #(ribcage
                                                     #(dy)
                                                     #((top))
                                                     #("i4445"))
                                                   #(ribcage
                                                     #(x y)
                                                     #((top) (top))
                                                     #("i4439" "i4440"))
                                                   #(ribcage () () ())
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x y)
                                                     #((top) (top))
                                                     #("i4434" "i4435"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i4371"
                                                      "i4369"
                                                      "i4367"
                                                      "i4365"
                                                      "i4363"
                                                      "i4361"
                                                      "i4359")))
                                                  (hygiene guile))
                                               #{x\ 4441}#)
                                         (list '#(syntax-object
                                                  "list*"
                                                  ((top)
                                                   #(ribcage
                                                     #(_)
                                                     #((top))
                                                     #("i4451"))
                                                   #(ribcage
                                                     #(dy)
                                                     #((top))
                                                     #("i4445"))
                                                   #(ribcage
                                                     #(x y)
                                                     #((top) (top))
                                                     #("i4439" "i4440"))
                                                   #(ribcage () () ())
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x y)
                                                     #((top) (top))
                                                     #("i4434" "i4435"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i4371"
                                                      "i4369"
                                                      "i4367"
                                                      "i4365"
                                                      "i4363"
                                                      "i4361"
                                                      "i4359")))
                                                  (hygiene guile))
                                               #{x\ 4441}#
                                               #{y\ 4442}#)))))))
                             #{tmp\ 4444}#)
                           (let ((#{tmp\ 4453}#
                                   ($sc-dispatch
                                     #{tmp\ 4443}#
                                     '(#(atom "list") . any))))
                             (if #{tmp\ 4453}#
                               (@apply
                                 (lambda (#{stuff\ 4455}#)
                                   (cons '#(syntax-object
                                            "list"
                                            ((top)
                                             #(ribcage
                                               #(stuff)
                                               #((top))
                                               #("i4454"))
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i4439" "i4440"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i4434" "i4435"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i4371"
                                                "i4369"
                                                "i4367"
                                                "i4365"
                                                "i4363"
                                                "i4361"
                                                "i4359")))
                                            (hygiene guile))
                                         (cons #{x\ 4441}# #{stuff\ 4455}#)))
                                 #{tmp\ 4453}#)
                               (let ((#{tmp\ 4456}#
                                       ($sc-dispatch
                                         #{tmp\ 4443}#
                                         '(#(atom "list*") . any))))
                                 (if #{tmp\ 4456}#
                                   (@apply
                                     (lambda (#{stuff\ 4458}#)
                                       (cons '#(syntax-object
                                                "list*"
                                                ((top)
                                                 #(ribcage
                                                   #(stuff)
                                                   #((top))
                                                   #("i4457"))
                                                 #(ribcage
                                                   #(x y)
                                                   #((top) (top))
                                                   #("i4439" "i4440"))
                                                 #(ribcage () () ())
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x y)
                                                   #((top) (top))
                                                   #("i4434" "i4435"))
                                                 #(ribcage
                                                   (emit quasivector
                                                         quasilist*
                                                         quasiappend
                                                         quasicons
                                                         vquasi
                                                         quasi)
                                                   ((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                   ("i4371"
                                                    "i4369"
                                                    "i4367"
                                                    "i4365"
                                                    "i4363"
                                                    "i4361"
                                                    "i4359")))
                                                (hygiene guile))
                                             (cons #{x\ 4441}#
                                                   #{stuff\ 4458}#)))
                                     #{tmp\ 4456}#)
                                   (let ((#{_\ 4460}# #{tmp\ 4443}#))
                                     (list '#(syntax-object
                                              "list*"
                                              ((top)
                                               #(ribcage
                                                 #(_)
                                                 #((top))
                                                 #("i4459"))
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i4439" "i4440"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i4434" "i4435"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i4371"
                                                  "i4369"
                                                  "i4367"
                                                  "i4365"
                                                  "i4363"
                                                  "i4361"
                                                  "i4359")))
                                              (hygiene guile))
                                           #{x\ 4441}#
                                           #{y\ 4442}#))))))))))
                   #{tmp\ 4438}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{tmp\ 4437}#))))))
       (#{quasiappend\ 4366}#
         (lambda (#{x\ 4461}# #{y\ 4462}#)
           (let ((#{tmp\ 4465}# #{y\ 4462}#))
             (let ((#{tmp\ 4466}#
                     ($sc-dispatch
                       #{tmp\ 4465}#
                       '(#(atom "quote") ()))))
               (if #{tmp\ 4466}#
                 (@apply
                   (lambda ()
                     (if (null? #{x\ 4461}#)
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(x y)
                              #((top) (top))
                              #("i4463" "i4464"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i4371"
                               "i4369"
                               "i4367"
                               "i4365"
                               "i4363"
                               "i4361"
                               "i4359")))
                           (hygiene guile))
                         ())
                       (if (null? (cdr #{x\ 4461}#))
                         (car #{x\ 4461}#)
                         (let ((#{tmp\ 4473}# #{x\ 4461}#))
                           (let ((#{tmp\ 4474}#
                                   ($sc-dispatch #{tmp\ 4473}# 'each-any)))
                             (if #{tmp\ 4474}#
                               (@apply
                                 (lambda (#{p\ 4476}#)
                                   (cons '#(syntax-object
                                            "append"
                                            ((top)
                                             #(ribcage
                                               #(p)
                                               #((top))
                                               #("i4475"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i4463" "i4464"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i4371"
                                                "i4369"
                                                "i4367"
                                                "i4365"
                                                "i4363"
                                                "i4361"
                                                "i4359")))
                                            (hygiene guile))
                                         #{p\ 4476}#))
                                 #{tmp\ 4474}#)
                               (syntax-violation
                                 #f
                                 "source expression failed to match any pattern"
                                 #{tmp\ 4473}#)))))))
                   #{tmp\ 4466}#)
                 (let ((#{_\ 4479}# #{tmp\ 4465}#))
                   (if (null? #{x\ 4461}#)
                     #{y\ 4462}#
                     (let ((#{tmp\ 4484}# (list #{x\ 4461}# #{y\ 4462}#)))
                       (let ((#{tmp\ 4485}#
                               ($sc-dispatch #{tmp\ 4484}# '(each-any any))))
                         (if #{tmp\ 4485}#
                           (@apply
                             (lambda (#{p\ 4488}# #{y\ 4489}#)
                               (cons '#(syntax-object
                                        "append"
                                        ((top)
                                         #(ribcage
                                           #(p y)
                                           #((top) (top))
                                           #("i4486" "i4487"))
                                         #(ribcage #(_) #((top)) #("i4478"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(x y)
                                           #((top) (top))
                                           #("i4463" "i4464"))
                                         #(ribcage
                                           (emit quasivector
                                                 quasilist*
                                                 quasiappend
                                                 quasicons
                                                 vquasi
                                                 quasi)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("i4371"
                                            "i4369"
                                            "i4367"
                                            "i4365"
                                            "i4363"
                                            "i4361"
                                            "i4359")))
                                        (hygiene guile))
                                     (append #{p\ 4488}# (list #{y\ 4489}#))))
                             #{tmp\ 4485}#)
                           (syntax-violation
                             #f
                             "source expression failed to match any pattern"
                             #{tmp\ 4484}#)))))))))))
       (#{quasilist*\ 4368}#
         (lambda (#{x\ 4491}# #{y\ 4492}#)
           (letrec*
             ((#{f\ 4497}#
                (lambda (#{x\ 4498}#)
                  (if (null? #{x\ 4498}#)
                    #{y\ 4492}#
                    (#{quasicons\ 4364}#
                      (car #{x\ 4498}#)
                      (#{f\ 4497}# (cdr #{x\ 4498}#)))))))
             (begin (#{f\ 4497}# #{x\ 4491}#)))))
       (#{quasivector\ 4370}#
         (lambda (#{x\ 4499}#)
           (let ((#{tmp\ 4501}# #{x\ 4499}#))
             (let ((#{tmp\ 4502}#
                     ($sc-dispatch
                       #{tmp\ 4501}#
                       '(#(atom "quote") each-any))))
               (if #{tmp\ 4502}#
                 (@apply
                   (lambda (#{x\ 4504}#)
                     (list '#(syntax-object
                              "quote"
                              ((top)
                               #(ribcage #(x) #((top)) #("i4503"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i4500"))
                               #(ribcage
                                 (emit quasivector
                                       quasilist*
                                       quasiappend
                                       quasicons
                                       vquasi
                                       quasi)
                                 ((top) (top) (top) (top) (top) (top) (top))
                                 ("i4371"
                                  "i4369"
                                  "i4367"
                                  "i4365"
                                  "i4363"
                                  "i4361"
                                  "i4359")))
                              (hygiene guile))
                           (list->vector #{x\ 4504}#)))
                   #{tmp\ 4502}#)
                 (let ((#{_\ 4507}# #{tmp\ 4501}#))
                   (letrec*
                     ((#{f\ 4511}#
                        (lambda (#{y\ 4512}# #{k\ 4513}#)
                          (let ((#{tmp\ 4524}# #{y\ 4512}#))
                            (let ((#{tmp\ 4525}#
                                    ($sc-dispatch
                                      #{tmp\ 4524}#
                                      '(#(atom "quote") each-any))))
                              (if #{tmp\ 4525}#
                                (@apply
                                  (lambda (#{y\ 4527}#)
                                    (#{k\ 4513}#
                                      (map (lambda (#{tmp\ 4528}#)
                                             (list '#(syntax-object
                                                      "quote"
                                                      ((top)
                                                       #(ribcage
                                                         #(y)
                                                         #((top))
                                                         #("i4526"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(f y k)
                                                         #((top) (top) (top))
                                                         #("i4508"
                                                           "i4509"
                                                           "i4510"))
                                                       #(ribcage
                                                         #(_)
                                                         #((top))
                                                         #("i4506"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i4500"))
                                                       #(ribcage
                                                         (emit quasivector
                                                               quasilist*
                                                               quasiappend
                                                               quasicons
                                                               vquasi
                                                               quasi)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("i4371"
                                                          "i4369"
                                                          "i4367"
                                                          "i4365"
                                                          "i4363"
                                                          "i4361"
                                                          "i4359")))
                                                      (hygiene guile))
                                                   #{tmp\ 4528}#))
                                           #{y\ 4527}#)))
                                  #{tmp\ 4525}#)
                                (let ((#{tmp\ 4529}#
                                        ($sc-dispatch
                                          #{tmp\ 4524}#
                                          '(#(atom "list") . each-any))))
                                  (if #{tmp\ 4529}#
                                    (@apply
                                      (lambda (#{y\ 4531}#)
                                        (#{k\ 4513}# #{y\ 4531}#))
                                      #{tmp\ 4529}#)
                                    (let ((#{tmp\ 4533}#
                                            ($sc-dispatch
                                              #{tmp\ 4524}#
                                              '(#(atom "list*")
                                                .
                                                #(each+ any (any) ())))))
                                      (if #{tmp\ 4533}#
                                        (@apply
                                          (lambda (#{y\ 4536}# #{z\ 4537}#)
                                            (#{f\ 4511}#
                                              #{z\ 4537}#
                                              (lambda (#{ls\ 4538}#)
                                                (#{k\ 4513}#
                                                  (append
                                                    #{y\ 4536}#
                                                    #{ls\ 4538}#)))))
                                          #{tmp\ 4533}#)
                                        (let ((#{else\ 4542}# #{tmp\ 4524}#))
                                          (let ((#{tmp\ 4546}# #{x\ 4499}#))
                                            (let ((#{\ g4543\ 4548}#
                                                    #{tmp\ 4546}#))
                                              (list '#(syntax-object
                                                       "list->vector"
                                                       ((top)
                                                        #(ribcage
                                                          #(#{\ g4543}#)
                                                          #((m4544 top))
                                                          #("i4547"))
                                                        #(ribcage
                                                          #(else)
                                                          #((top))
                                                          #("i4541"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(f y k)
                                                          #((top) (top) (top))
                                                          #("i4508"
                                                            "i4509"
                                                            "i4510"))
                                                        #(ribcage
                                                          #(_)
                                                          #((top))
                                                          #("i4506"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i4500"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i4371"
                                                           "i4369"
                                                           "i4367"
                                                           "i4365"
                                                           "i4363"
                                                           "i4361"
                                                           "i4359")))
                                                       (hygiene guile))
                                                    #{\ g4543\ 4548}#))))))))))))))
                     (begin
                       (#{f\ 4511}#
                         #{x\ 4499}#
                         (lambda (#{ls\ 4514}#)
                           (let ((#{tmp\ 4519}# #{ls\ 4514}#))
                             (let ((#{tmp\ 4520}#
                                     ($sc-dispatch #{tmp\ 4519}# 'each-any)))
                               (if #{tmp\ 4520}#
                                 (@apply
                                   (lambda (#{\ g4516\ 4522}#)
                                     (cons '#(syntax-object
                                              "vector"
                                              ((top)
                                               #(ribcage
                                                 #(#{\ g4516}#)
                                                 #((m4517 top))
                                                 #("i4521"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(ls)
                                                 #((top))
                                                 #("i4515"))
                                               #(ribcage
                                                 #(_)
                                                 #((top))
                                                 #("i4506"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i4500"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i4371"
                                                  "i4369"
                                                  "i4367"
                                                  "i4365"
                                                  "i4363"
                                                  "i4361"
                                                  "i4359")))
                                              (hygiene guile))
                                           #{\ g4516\ 4522}#))
                                   #{tmp\ 4520}#)
                                 (syntax-violation
                                   #f
                                   "source expression failed to match any pattern"
                                   #{tmp\ 4519}#))))))))))))))
       (#{emit\ 4372}#
         (lambda (#{x\ 4549}#)
           (let ((#{tmp\ 4551}# #{x\ 4549}#))
             (let ((#{tmp\ 4552}#
                     ($sc-dispatch
                       #{tmp\ 4551}#
                       '(#(atom "quote") any))))
               (if #{tmp\ 4552}#
                 (@apply
                   (lambda (#{x\ 4554}#)
                     (list '#(syntax-object
                              quote
                              ((top)
                               #(ribcage #(x) #((top)) #("i4553"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i4550"))
                               #(ribcage
                                 (emit quasivector
                                       quasilist*
                                       quasiappend
                                       quasicons
                                       vquasi
                                       quasi)
                                 ((top) (top) (top) (top) (top) (top) (top))
                                 ("i4371"
                                  "i4369"
                                  "i4367"
                                  "i4365"
                                  "i4363"
                                  "i4361"
                                  "i4359")))
                              (hygiene guile))
                           #{x\ 4554}#))
                   #{tmp\ 4552}#)
                 (let ((#{tmp\ 4555}#
                         ($sc-dispatch
                           #{tmp\ 4551}#
                           '(#(atom "list") . each-any))))
                   (if #{tmp\ 4555}#
                     (@apply
                       (lambda (#{x\ 4557}#)
                         (let ((#{tmp\ 4561}#
                                 (map #{emit\ 4372}# #{x\ 4557}#)))
                           (let ((#{tmp\ 4562}#
                                   ($sc-dispatch #{tmp\ 4561}# 'each-any)))
                             (if #{tmp\ 4562}#
                               (@apply
                                 (lambda (#{\ g4558\ 4564}#)
                                   (cons '#(syntax-object
                                            list
                                            ((top)
                                             #(ribcage
                                               #(#{\ g4558}#)
                                               #((m4559 top))
                                               #("i4563"))
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i4556"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i4550"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i4371"
                                                "i4369"
                                                "i4367"
                                                "i4365"
                                                "i4363"
                                                "i4361"
                                                "i4359")))
                                            (hygiene guile))
                                         #{\ g4558\ 4564}#))
                                 #{tmp\ 4562}#)
                               (syntax-violation
                                 #f
                                 "source expression failed to match any pattern"
                                 #{tmp\ 4561}#)))))
                       #{tmp\ 4555}#)
                     (let ((#{tmp\ 4567}#
                             ($sc-dispatch
                               #{tmp\ 4551}#
                               '(#(atom "list*") . #(each+ any (any) ())))))
                       (if #{tmp\ 4567}#
                         (@apply
                           (lambda (#{x\ 4570}# #{y\ 4571}#)
                             (letrec*
                               ((#{f\ 4574}#
                                  (lambda (#{x*\ 4575}#)
                                    (if (null? #{x*\ 4575}#)
                                      (#{emit\ 4372}# #{y\ 4571}#)
                                      (let ((#{tmp\ 4581}#
                                              (list (#{emit\ 4372}#
                                                      (car #{x*\ 4575}#))
                                                    (#{f\ 4574}#
                                                      (cdr #{x*\ 4575}#)))))
                                        (let ((#{tmp\ 4582}#
                                                ($sc-dispatch
                                                  #{tmp\ 4581}#
                                                  '(any any))))
                                          (if #{tmp\ 4582}#
                                            (@apply
                                              (lambda (#{\ g4578\ 4585}#
                                                       #{\ g4577\ 4586}#)
                                                (list '#(syntax-object
                                                         cons
                                                         ((top)
                                                          #(ribcage
                                                            #(#{\ g4578}#
                                                              #{\ g4577}#)
                                                            #((m4579 top)
                                                              (m4579 top))
                                                            #("i4583" "i4584"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(f x*)
                                                            #((top) (top))
                                                            #("i4572" "i4573"))
                                                          #(ribcage
                                                            #(x y)
                                                            #((top) (top))
                                                            #("i4568" "i4569"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i4550"))
                                                          #(ribcage
                                                            (emit quasivector
                                                                  quasilist*
                                                                  quasiappend
                                                                  quasicons
                                                                  vquasi
                                                                  quasi)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i4371"
                                                             "i4369"
                                                             "i4367"
                                                             "i4365"
                                                             "i4363"
                                                             "i4361"
                                                             "i4359")))
                                                         (hygiene guile))
                                                      #{\ g4578\ 4585}#
                                                      #{\ g4577\ 4586}#))
                                              #{tmp\ 4582}#)
                                            (syntax-violation
                                              #f
                                              "source expression failed to match any pattern"
                                              #{tmp\ 4581}#))))))))
                               (begin (#{f\ 4574}# #{x\ 4570}#))))
                           #{tmp\ 4567}#)
                         (let ((#{tmp\ 4587}#
                                 ($sc-dispatch
                                   #{tmp\ 4551}#
                                   '(#(atom "append") . each-any))))
                           (if #{tmp\ 4587}#
                             (@apply
                               (lambda (#{x\ 4589}#)
                                 (let ((#{tmp\ 4593}#
                                         (map #{emit\ 4372}# #{x\ 4589}#)))
                                   (let ((#{tmp\ 4594}#
                                           ($sc-dispatch
                                             #{tmp\ 4593}#
                                             'each-any)))
                                     (if #{tmp\ 4594}#
                                       (@apply
                                         (lambda (#{\ g4590\ 4596}#)
                                           (cons '#(syntax-object
                                                    append
                                                    ((top)
                                                     #(ribcage
                                                       #(#{\ g4590}#)
                                                       #((m4591 top))
                                                       #("i4595"))
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i4588"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i4550"))
                                                     #(ribcage
                                                       (emit quasivector
                                                             quasilist*
                                                             quasiappend
                                                             quasicons
                                                             vquasi
                                                             quasi)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i4371"
                                                        "i4369"
                                                        "i4367"
                                                        "i4365"
                                                        "i4363"
                                                        "i4361"
                                                        "i4359")))
                                                    (hygiene guile))
                                                 #{\ g4590\ 4596}#))
                                         #{tmp\ 4594}#)
                                       (syntax-violation
                                         #f
                                         "source expression failed to match any pattern"
                                         #{tmp\ 4593}#)))))
                               #{tmp\ 4587}#)
                             (let ((#{tmp\ 4599}#
                                     ($sc-dispatch
                                       #{tmp\ 4551}#
                                       '(#(atom "vector") . each-any))))
                               (if #{tmp\ 4599}#
                                 (@apply
                                   (lambda (#{x\ 4601}#)
                                     (let ((#{tmp\ 4605}#
                                             (map #{emit\ 4372}# #{x\ 4601}#)))
                                       (let ((#{tmp\ 4606}#
                                               ($sc-dispatch
                                                 #{tmp\ 4605}#
                                                 'each-any)))
                                         (if #{tmp\ 4606}#
                                           (@apply
                                             (lambda (#{\ g4602\ 4608}#)
                                               (cons '#(syntax-object
                                                        vector
                                                        ((top)
                                                         #(ribcage
                                                           #(#{\ g4602}#)
                                                           #((m4603 top))
                                                           #("i4607"))
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i4600"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i4550"))
                                                         #(ribcage
                                                           (emit quasivector
                                                                 quasilist*
                                                                 quasiappend
                                                                 quasicons
                                                                 vquasi
                                                                 quasi)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("i4371"
                                                            "i4369"
                                                            "i4367"
                                                            "i4365"
                                                            "i4363"
                                                            "i4361"
                                                            "i4359")))
                                                        (hygiene guile))
                                                     #{\ g4602\ 4608}#))
                                             #{tmp\ 4606}#)
                                           (syntax-violation
                                             #f
                                             "source expression failed to match any pattern"
                                             #{tmp\ 4605}#)))))
                                   #{tmp\ 4599}#)
                                 (let ((#{tmp\ 4611}#
                                         ($sc-dispatch
                                           #{tmp\ 4551}#
                                           '(#(atom "list->vector") any))))
                                   (if #{tmp\ 4611}#
                                     (@apply
                                       (lambda (#{x\ 4613}#)
                                         (let ((#{tmp\ 4617}#
                                                 (#{emit\ 4372}# #{x\ 4613}#)))
                                           (let ((#{\ g4614\ 4619}#
                                                   #{tmp\ 4617}#))
                                             (list '#(syntax-object
                                                      list->vector
                                                      ((top)
                                                       #(ribcage
                                                         #(#{\ g4614}#)
                                                         #((m4615 top))
                                                         #("i4618"))
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i4612"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i4550"))
                                                       #(ribcage
                                                         (emit quasivector
                                                               quasilist*
                                                               quasiappend
                                                               quasicons
                                                               vquasi
                                                               quasi)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("i4371"
                                                          "i4369"
                                                          "i4367"
                                                          "i4365"
                                                          "i4363"
                                                          "i4361"
                                                          "i4359")))
                                                      (hygiene guile))
                                                   #{\ g4614\ 4619}#))))
                                       #{tmp\ 4611}#)
                                     (let ((#{tmp\ 4620}#
                                             ($sc-dispatch
                                               #{tmp\ 4551}#
                                               '(#(atom "value") any))))
                                       (if #{tmp\ 4620}#
                                         (@apply
                                           (lambda (#{x\ 4622}#) #{x\ 4622}#)
                                           #{tmp\ 4620}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp\ 4551}#)))))))))))))))))))
      (begin
        (lambda (#{x\ 4623}#)
          (let ((#{tmp\ 4625}# #{x\ 4623}#))
            (let ((#{tmp\ 4626}#
                    ($sc-dispatch #{tmp\ 4625}# '(_ any))))
              (if #{tmp\ 4626}#
                (@apply
                  (lambda (#{e\ 4628}#)
                    (#{emit\ 4372}# (#{quasi\ 4360}# #{e\ 4628}# 0)))
                  #{tmp\ 4626}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{tmp\ 4625}#)))))))))

(define include
  (make-syntax-transformer
    'include
    'macro
    (lambda (#{x\ 4629}#)
      (letrec*
        ((#{read-file\ 4632}#
           (lambda (#{fn\ 4633}# #{k\ 4634}#)
             (begin
               (let ((#{p\ 4638}# (open-input-file #{fn\ 4633}#)))
                 (letrec*
                   ((#{f\ 4642}#
                      (lambda (#{x\ 4643}# #{result\ 4644}#)
                        (if (eof-object? #{x\ 4643}#)
                          (begin
                            (close-input-port #{p\ 4638}#)
                            (reverse #{result\ 4644}#))
                          (#{f\ 4642}#
                            (read #{p\ 4638}#)
                            (cons (datum->syntax #{k\ 4634}# #{x\ 4643}#)
                                  #{result\ 4644}#))))))
                   (begin (#{f\ 4642}# (read #{p\ 4638}#) '()))))))))
        (begin
          (let ((#{tmp\ 4645}# #{x\ 4629}#))
            (let ((#{tmp\ 4646}#
                    ($sc-dispatch #{tmp\ 4645}# '(any any))))
              (if #{tmp\ 4646}#
                (@apply
                  (lambda (#{k\ 4649}# #{filename\ 4650}#)
                    (begin
                      (let ((#{fn\ 4652}# (syntax->datum #{filename\ 4650}#)))
                        (let ((#{tmp\ 4654}#
                                (#{read-file\ 4632}#
                                  #{fn\ 4652}#
                                  #{filename\ 4650}#)))
                          (let ((#{tmp\ 4655}#
                                  ($sc-dispatch #{tmp\ 4654}# 'each-any)))
                            (if #{tmp\ 4655}#
                              (@apply
                                (lambda (#{exp\ 4657}#)
                                  (cons '#(syntax-object
                                           begin
                                           ((top)
                                            #(ribcage
                                              #(exp)
                                              #((top))
                                              #("i4656"))
                                            #(ribcage () () ())
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(fn)
                                              #((top))
                                              #("i4651"))
                                            #(ribcage
                                              #(k filename)
                                              #((top) (top))
                                              #("i4647" "i4648"))
                                            #(ribcage
                                              (read-file)
                                              ((top))
                                              ("i4631"))
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i4630")))
                                           (hygiene guile))
                                        #{exp\ 4657}#))
                                #{tmp\ 4655}#)
                              (syntax-violation
                                #f
                                "source expression failed to match any pattern"
                                #{tmp\ 4654}#)))))))
                  #{tmp\ 4646}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{tmp\ 4645}#)))))))))

(define include-from-path
  (make-syntax-transformer
    'include-from-path
    'macro
    (lambda (#{x\ 4659}#)
      (let ((#{tmp\ 4661}# #{x\ 4659}#))
        (let ((#{tmp\ 4662}#
                ($sc-dispatch #{tmp\ 4661}# '(any any))))
          (if #{tmp\ 4662}#
            (@apply
              (lambda (#{k\ 4665}# #{filename\ 4666}#)
                (begin
                  (let ((#{fn\ 4668}# (syntax->datum #{filename\ 4666}#)))
                    (let ((#{tmp\ 4670}#
                            (datum->syntax
                              #{filename\ 4666}#
                              (begin
                                (let ((#{t\ 4675}#
                                        (%search-load-path #{fn\ 4668}#)))
                                  (if #{t\ 4675}#
                                    #{t\ 4675}#
                                    (syntax-violation
                                      'include-from-path
                                      "file not found in path"
                                      #{x\ 4659}#
                                      #{filename\ 4666}#)))))))
                      (let ((#{fn\ 4672}# #{tmp\ 4670}#))
                        (list '#(syntax-object
                                 include
                                 ((top)
                                  #(ribcage #(fn) #((top)) #("i4671"))
                                  #(ribcage () () ())
                                  #(ribcage () () ())
                                  #(ribcage #(fn) #((top)) #("i4667"))
                                  #(ribcage
                                    #(k filename)
                                    #((top) (top))
                                    #("i4663" "i4664"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i4660")))
                                 (hygiene guile))
                              #{fn\ 4672}#))))))
              #{tmp\ 4662}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{tmp\ 4661}#)))))))

(define unquote
  (make-syntax-transformer
    'unquote
    'macro
    (lambda (#{x\ 4677}#)
      (syntax-violation
        'unquote
        "expression not valid outside of quasiquote"
        #{x\ 4677}#))))

(define unquote-splicing
  (make-syntax-transformer
    'unquote-splicing
    'macro
    (lambda (#{x\ 4679}#)
      (syntax-violation
        'unquote-splicing
        "expression not valid outside of quasiquote"
        #{x\ 4679}#))))

(define case
  (make-syntax-transformer
    'case
    'macro
    (lambda (#{x\ 4681}#)
      (let ((#{tmp\ 4683}# #{x\ 4681}#))
        (let ((#{tmp\ 4684}#
                ($sc-dispatch
                  #{tmp\ 4683}#
                  '(_ any any . each-any))))
          (if #{tmp\ 4684}#
            (@apply
              (lambda (#{e\ 4688}# #{m1\ 4689}# #{m2\ 4690}#)
                (let ((#{tmp\ 4692}#
                        (letrec*
                          ((#{f\ 4698}#
                             (lambda (#{clause\ 4699}# #{clauses\ 4700}#)
                               (if (null? #{clauses\ 4700}#)
                                 (let ((#{tmp\ 4702}# #{clause\ 4699}#))
                                   (let ((#{tmp\ 4703}#
                                           ($sc-dispatch
                                             #{tmp\ 4702}#
                                             '(#(free-id
                                                 #(syntax-object
                                                   else
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(f clause clauses)
                                                      #((top) (top) (top))
                                                      #("i4695"
                                                        "i4696"
                                                        "i4697"))
                                                    #(ribcage
                                                      #(e m1 m2)
                                                      #((top) (top) (top))
                                                      #("i4685"
                                                        "i4686"
                                                        "i4687"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i4682")))
                                                   (hygiene guile)))
                                               any
                                               .
                                               each-any))))
                                     (if #{tmp\ 4703}#
                                       (@apply
                                         (lambda (#{e1\ 4706}# #{e2\ 4707}#)
                                           (cons '#(syntax-object
                                                    begin
                                                    ((top)
                                                     #(ribcage
                                                       #(e1 e2)
                                                       #((top) (top))
                                                       #("i4704" "i4705"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(f clause clauses)
                                                       #((top) (top) (top))
                                                       #("i4695"
                                                         "i4696"
                                                         "i4697"))
                                                     #(ribcage
                                                       #(e m1 m2)
                                                       #((top) (top) (top))
                                                       #("i4685"
                                                         "i4686"
                                                         "i4687"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i4682")))
                                                    (hygiene guile))
                                                 (cons #{e1\ 4706}#
                                                       #{e2\ 4707}#)))
                                         #{tmp\ 4703}#)
                                       (let ((#{tmp\ 4709}#
                                               ($sc-dispatch
                                                 #{tmp\ 4702}#
                                                 '(each-any any . each-any))))
                                         (if #{tmp\ 4709}#
                                           (@apply
                                             (lambda (#{k\ 4713}#
                                                      #{e1\ 4714}#
                                                      #{e2\ 4715}#)
                                               (list '#(syntax-object
                                                        if
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i4710"
                                                             "i4711"
                                                             "i4712"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i4695"
                                                             "i4696"
                                                             "i4697"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i4685"
                                                             "i4686"
                                                             "i4687"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i4682")))
                                                        (hygiene guile))
                                                     (list '#(syntax-object
                                                              memv
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4710"
                                                                   "i4711"
                                                                   "i4712"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4695"
                                                                   "i4696"
                                                                   "i4697"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4685"
                                                                   "i4686"
                                                                   "i4687"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i4682")))
                                                              (hygiene guile))
                                                           '#(syntax-object
                                                              t
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4710"
                                                                   "i4711"
                                                                   "i4712"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4695"
                                                                   "i4696"
                                                                   "i4697"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4685"
                                                                   "i4686"
                                                                   "i4687"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i4682")))
                                                              (hygiene guile))
                                                           (list '#(syntax-object
                                                                    quote
                                                                    ((top)
                                                                     #(ribcage
                                                                       #(k
                                                                         e1
                                                                         e2)
                                                                       #((top)
                                                                         (top)
                                                                         (top))
                                                                       #("i4710"
                                                                         "i4711"
                                                                         "i4712"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(f
                                                                         clause
                                                                         clauses)
                                                                       #((top)
                                                                         (top)
                                                                         (top))
                                                                       #("i4695"
                                                                         "i4696"
                                                                         "i4697"))
                                                                     #(ribcage
                                                                       #(e
                                                                         m1
                                                                         m2)
                                                                       #((top)
                                                                         (top)
                                                                         (top))
                                                                       #("i4685"
                                                                         "i4686"
                                                                         "i4687"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(x)
                                                                       #((top))
                                                                       #("i4682")))
                                                                    (hygiene
                                                                      guile))
                                                                 #{k\ 4713}#))
                                                     (cons '#(syntax-object
                                                              begin
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4710"
                                                                   "i4711"
                                                                   "i4712"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4695"
                                                                   "i4696"
                                                                   "i4697"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4685"
                                                                   "i4686"
                                                                   "i4687"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i4682")))
                                                              (hygiene guile))
                                                           (cons #{e1\ 4714}#
                                                                 #{e2\ 4715}#))))
                                             #{tmp\ 4709}#)
                                           (let ((#{_\ 4719}# #{tmp\ 4702}#))
                                             (syntax-violation
                                               'case
                                               "bad clause"
                                               #{x\ 4681}#
                                               #{clause\ 4699}#)))))))
                                 (let ((#{tmp\ 4721}#
                                         (#{f\ 4698}#
                                           (car #{clauses\ 4700}#)
                                           (cdr #{clauses\ 4700}#))))
                                   (let ((#{rest\ 4723}# #{tmp\ 4721}#))
                                     (let ((#{tmp\ 4724}# #{clause\ 4699}#))
                                       (let ((#{tmp\ 4725}#
                                               ($sc-dispatch
                                                 #{tmp\ 4724}#
                                                 '(each-any any . each-any))))
                                         (if #{tmp\ 4725}#
                                           (@apply
                                             (lambda (#{k\ 4729}#
                                                      #{e1\ 4730}#
                                                      #{e2\ 4731}#)
                                               (list '#(syntax-object
                                                        if
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i4726"
                                                             "i4727"
                                                             "i4728"))
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i4722"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i4695"
                                                             "i4696"
                                                             "i4697"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i4685"
                                                             "i4686"
                                                             "i4687"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i4682")))
                                                        (hygiene guile))
                                                     (list '#(syntax-object
                                                              memv
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4726"
                                                                   "i4727"
                                                                   "i4728"))
                                                               #(ribcage
                                                                 #(rest)
                                                                 #((top))
                                                                 #("i4722"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4695"
                                                                   "i4696"
                                                                   "i4697"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4685"
                                                                   "i4686"
                                                                   "i4687"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i4682")))
                                                              (hygiene guile))
                                                           '#(syntax-object
                                                              t
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4726"
                                                                   "i4727"
                                                                   "i4728"))
                                                               #(ribcage
                                                                 #(rest)
                                                                 #((top))
                                                                 #("i4722"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4695"
                                                                   "i4696"
                                                                   "i4697"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4685"
                                                                   "i4686"
                                                                   "i4687"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i4682")))
                                                              (hygiene guile))
                                                           (list '#(syntax-object
                                                                    quote
                                                                    ((top)
                                                                     #(ribcage
                                                                       #(k
                                                                         e1
                                                                         e2)
                                                                       #((top)
                                                                         (top)
                                                                         (top))
                                                                       #("i4726"
                                                                         "i4727"
                                                                         "i4728"))
                                                                     #(ribcage
                                                                       #(rest)
                                                                       #((top))
                                                                       #("i4722"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(f
                                                                         clause
                                                                         clauses)
                                                                       #((top)
                                                                         (top)
                                                                         (top))
                                                                       #("i4695"
                                                                         "i4696"
                                                                         "i4697"))
                                                                     #(ribcage
                                                                       #(e
                                                                         m1
                                                                         m2)
                                                                       #((top)
                                                                         (top)
                                                                         (top))
                                                                       #("i4685"
                                                                         "i4686"
                                                                         "i4687"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(x)
                                                                       #((top))
                                                                       #("i4682")))
                                                                    (hygiene
                                                                      guile))
                                                                 #{k\ 4729}#))
                                                     (cons '#(syntax-object
                                                              begin
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4726"
                                                                   "i4727"
                                                                   "i4728"))
                                                               #(ribcage
                                                                 #(rest)
                                                                 #((top))
                                                                 #("i4722"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4695"
                                                                   "i4696"
                                                                   "i4697"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4685"
                                                                   "i4686"
                                                                   "i4687"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i4682")))
                                                              (hygiene guile))
                                                           (cons #{e1\ 4730}#
                                                                 #{e2\ 4731}#))
                                                     #{rest\ 4723}#))
                                             #{tmp\ 4725}#)
                                           (let ((#{_\ 4735}# #{tmp\ 4724}#))
                                             (syntax-violation
                                               'case
                                               "bad clause"
                                               #{x\ 4681}#
                                               #{clause\ 4699}#)))))))))))
                          (begin (#{f\ 4698}# #{m1\ 4689}# #{m2\ 4690}#)))))
                  (let ((#{body\ 4694}# #{tmp\ 4692}#))
                    (list '#(syntax-object
                             let
                             ((top)
                              #(ribcage #(body) #((top)) #("i4693"))
                              #(ribcage
                                #(e m1 m2)
                                #((top) (top) (top))
                                #("i4685" "i4686" "i4687"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i4682")))
                             (hygiene guile))
                          (list (list '#(syntax-object
                                         t
                                         ((top)
                                          #(ribcage
                                            #(body)
                                            #((top))
                                            #("i4693"))
                                          #(ribcage
                                            #(e m1 m2)
                                            #((top) (top) (top))
                                            #("i4685" "i4686" "i4687"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i4682")))
                                         (hygiene guile))
                                      #{e\ 4688}#))
                          #{body\ 4694}#))))
              #{tmp\ 4684}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{tmp\ 4683}#)))))))

(define make-variable-transformer
  (lambda (#{proc\ 4736}#)
    (if (procedure? #{proc\ 4736}#)
      (begin
        (letrec*
          ((#{trans\ 4739}#
             (lambda (#{x\ 4740}#)
               (#{proc\ 4736}# #{x\ 4740}#))))
          (begin
            (set-procedure-property!
              #{trans\ 4739}#
              'variable-transformer
              #t)
            #{trans\ 4739}#)))
      (error "variable transformer not a procedure"
             #{proc\ 4736}#))))

(define identifier-syntax
  (make-syntax-transformer
    'identifier-syntax
    'macro
    (lambda (#{x\ 4742}#)
      (let ((#{tmp\ 4744}# #{x\ 4742}#))
        (let ((#{tmp\ 4745}#
                ($sc-dispatch #{tmp\ 4744}# '(_ any))))
          (if #{tmp\ 4745}#
            (@apply
              (lambda (#{e\ 4747}#)
                (list '#(syntax-object
                         lambda
                         ((top)
                          #(ribcage #(e) #((top)) #("i4746"))
                          #(ribcage () () ())
                          #(ribcage #(x) #((top)) #("i4743")))
                         (hygiene guile))
                      '(#(syntax-object
                          x
                          ((top)
                           #(ribcage #(e) #((top)) #("i4746"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i4743")))
                          (hygiene guile)))
                      '#((#(syntax-object
                            macro-type
                            ((top)
                             #(ribcage #(e) #((top)) #("i4746"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i4743")))
                            (hygiene guile))
                          .
                          #(syntax-object
                            identifier-syntax
                            ((top)
                             #(ribcage #(e) #((top)) #("i4746"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i4743")))
                            (hygiene guile))))
                      (list '#(syntax-object
                               syntax-case
                               ((top)
                                #(ribcage #(e) #((top)) #("i4746"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i4743")))
                               (hygiene guile))
                            '#(syntax-object
                               x
                               ((top)
                                #(ribcage #(e) #((top)) #("i4746"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i4743")))
                               (hygiene guile))
                            '()
                            (list '#(syntax-object
                                     id
                                     ((top)
                                      #(ribcage #(e) #((top)) #("i4746"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i4743")))
                                     (hygiene guile))
                                  '(#(syntax-object
                                      identifier?
                                      ((top)
                                       #(ribcage #(e) #((top)) #("i4746"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4743")))
                                      (hygiene guile))
                                    (#(syntax-object
                                       syntax
                                       ((top)
                                        #(ribcage #(e) #((top)) #("i4746"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i4743")))
                                       (hygiene guile))
                                     #(syntax-object
                                       id
                                       ((top)
                                        #(ribcage #(e) #((top)) #("i4746"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i4743")))
                                       (hygiene guile))))
                                  (list '#(syntax-object
                                           syntax
                                           ((top)
                                            #(ribcage #(e) #((top)) #("i4746"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i4743")))
                                           (hygiene guile))
                                        #{e\ 4747}#))
                            (list '(#(syntax-object
                                      _
                                      ((top)
                                       #(ribcage #(e) #((top)) #("i4746"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4743")))
                                      (hygiene guile))
                                    #(syntax-object
                                      x
                                      ((top)
                                       #(ribcage #(e) #((top)) #("i4746"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4743")))
                                      (hygiene guile))
                                    #(syntax-object
                                      ...
                                      ((top)
                                       #(ribcage #(e) #((top)) #("i4746"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4743")))
                                      (hygiene guile)))
                                  (list '#(syntax-object
                                           syntax
                                           ((top)
                                            #(ribcage #(e) #((top)) #("i4746"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i4743")))
                                           (hygiene guile))
                                        (cons #{e\ 4747}#
                                              '(#(syntax-object
                                                  x
                                                  ((top)
                                                   #(ribcage
                                                     #(e)
                                                     #((top))
                                                     #("i4746"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i4743")))
                                                  (hygiene guile))
                                                #(syntax-object
                                                  ...
                                                  ((top)
                                                   #(ribcage
                                                     #(e)
                                                     #((top))
                                                     #("i4746"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i4743")))
                                                  (hygiene guile)))))))))
              #{tmp\ 4745}#)
            (let ((#{tmp\ 4748}#
                    ($sc-dispatch
                      #{tmp\ 4744}#
                      '(_ (any any)
                          ((#(free-id
                              #(syntax-object
                                set!
                                ((top)
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("i4743")))
                                (hygiene guile)))
                            any
                            any)
                           any)))))
              (if (if #{tmp\ 4748}#
                    (@apply
                      (lambda (#{id\ 4754}#
                               #{exp1\ 4755}#
                               #{var\ 4756}#
                               #{val\ 4757}#
                               #{exp2\ 4758}#)
                        (if (identifier? #{id\ 4754}#)
                          (identifier? #{var\ 4756}#)
                          #f))
                      #{tmp\ 4748}#)
                    #f)
                (@apply
                  (lambda (#{id\ 4766}#
                           #{exp1\ 4767}#
                           #{var\ 4768}#
                           #{val\ 4769}#
                           #{exp2\ 4770}#)
                    (list '#(syntax-object
                             make-variable-transformer
                             ((top)
                              #(ribcage
                                #(id exp1 var val exp2)
                                #((top) (top) (top) (top) (top))
                                #("i4761" "i4762" "i4763" "i4764" "i4765"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i4743")))
                             (hygiene guile))
                          (list '#(syntax-object
                                   lambda
                                   ((top)
                                    #(ribcage
                                      #(id exp1 var val exp2)
                                      #((top) (top) (top) (top) (top))
                                      #("i4761"
                                        "i4762"
                                        "i4763"
                                        "i4764"
                                        "i4765"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i4743")))
                                   (hygiene guile))
                                '(#(syntax-object
                                    x
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("i4761"
                                         "i4762"
                                         "i4763"
                                         "i4764"
                                         "i4765"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i4743")))
                                    (hygiene guile)))
                                '#((#(syntax-object
                                      macro-type
                                      ((top)
                                       #(ribcage
                                         #(id exp1 var val exp2)
                                         #((top) (top) (top) (top) (top))
                                         #("i4761"
                                           "i4762"
                                           "i4763"
                                           "i4764"
                                           "i4765"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4743")))
                                      (hygiene guile))
                                    .
                                    #(syntax-object
                                      variable-transformer
                                      ((top)
                                       #(ribcage
                                         #(id exp1 var val exp2)
                                         #((top) (top) (top) (top) (top))
                                         #("i4761"
                                           "i4762"
                                           "i4763"
                                           "i4764"
                                           "i4765"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4743")))
                                      (hygiene guile))))
                                (list '#(syntax-object
                                         syntax-case
                                         ((top)
                                          #(ribcage
                                            #(id exp1 var val exp2)
                                            #((top) (top) (top) (top) (top))
                                            #("i4761"
                                              "i4762"
                                              "i4763"
                                              "i4764"
                                              "i4765"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i4743")))
                                         (hygiene guile))
                                      '#(syntax-object
                                         x
                                         ((top)
                                          #(ribcage
                                            #(id exp1 var val exp2)
                                            #((top) (top) (top) (top) (top))
                                            #("i4761"
                                              "i4762"
                                              "i4763"
                                              "i4764"
                                              "i4765"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i4743")))
                                         (hygiene guile))
                                      '(#(syntax-object
                                          set!
                                          ((top)
                                           #(ribcage
                                             #(id exp1 var val exp2)
                                             #((top) (top) (top) (top) (top))
                                             #("i4761"
                                               "i4762"
                                               "i4763"
                                               "i4764"
                                               "i4765"))
                                           #(ribcage () () ())
                                           #(ribcage #(x) #((top)) #("i4743")))
                                          (hygiene guile)))
                                      (list (list '#(syntax-object
                                                     set!
                                                     ((top)
                                                      #(ribcage
                                                        #(id exp1 var val exp2)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i4761"
                                                          "i4762"
                                                          "i4763"
                                                          "i4764"
                                                          "i4765"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i4743")))
                                                     (hygiene guile))
                                                  #{var\ 4768}#
                                                  #{val\ 4769}#)
                                            (list '#(syntax-object
                                                     syntax
                                                     ((top)
                                                      #(ribcage
                                                        #(id exp1 var val exp2)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i4761"
                                                          "i4762"
                                                          "i4763"
                                                          "i4764"
                                                          "i4765"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i4743")))
                                                     (hygiene guile))
                                                  #{exp2\ 4770}#))
                                      (list (cons #{id\ 4766}#
                                                  '(#(syntax-object
                                                      x
                                                      ((top)
                                                       #(ribcage
                                                         #(id
                                                           exp1
                                                           var
                                                           val
                                                           exp2)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("i4761"
                                                           "i4762"
                                                           "i4763"
                                                           "i4764"
                                                           "i4765"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i4743")))
                                                      (hygiene guile))
                                                    #(syntax-object
                                                      ...
                                                      ((top)
                                                       #(ribcage
                                                         #(id
                                                           exp1
                                                           var
                                                           val
                                                           exp2)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("i4761"
                                                           "i4762"
                                                           "i4763"
                                                           "i4764"
                                                           "i4765"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i4743")))
                                                      (hygiene guile))))
                                            (list '#(syntax-object
                                                     syntax
                                                     ((top)
                                                      #(ribcage
                                                        #(id exp1 var val exp2)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i4761"
                                                          "i4762"
                                                          "i4763"
                                                          "i4764"
                                                          "i4765"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i4743")))
                                                     (hygiene guile))
                                                  (cons #{exp1\ 4767}#
                                                        '(#(syntax-object
                                                            x
                                                            ((top)
                                                             #(ribcage
                                                               #(id
                                                                 exp1
                                                                 var
                                                                 val
                                                                 exp2)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i4761"
                                                                 "i4762"
                                                                 "i4763"
                                                                 "i4764"
                                                                 "i4765"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i4743")))
                                                            (hygiene guile))
                                                          #(syntax-object
                                                            ...
                                                            ((top)
                                                             #(ribcage
                                                               #(id
                                                                 exp1
                                                                 var
                                                                 val
                                                                 exp2)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i4761"
                                                                 "i4762"
                                                                 "i4763"
                                                                 "i4764"
                                                                 "i4765"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i4743")))
                                                            (hygiene
                                                              guile))))))
                                      (list #{id\ 4766}#
                                            (list '#(syntax-object
                                                     identifier?
                                                     ((top)
                                                      #(ribcage
                                                        #(id exp1 var val exp2)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i4761"
                                                          "i4762"
                                                          "i4763"
                                                          "i4764"
                                                          "i4765"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i4743")))
                                                     (hygiene guile))
                                                  (list '#(syntax-object
                                                           syntax
                                                           ((top)
                                                            #(ribcage
                                                              #(id
                                                                exp1
                                                                var
                                                                val
                                                                exp2)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("i4761"
                                                                "i4762"
                                                                "i4763"
                                                                "i4764"
                                                                "i4765"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(x)
                                                              #((top))
                                                              #("i4743")))
                                                           (hygiene guile))
                                                        #{id\ 4766}#))
                                            (list '#(syntax-object
                                                     syntax
                                                     ((top)
                                                      #(ribcage
                                                        #(id exp1 var val exp2)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i4761"
                                                          "i4762"
                                                          "i4763"
                                                          "i4764"
                                                          "i4765"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i4743")))
                                                     (hygiene guile))
                                                  #{exp1\ 4767}#))))))
                  #{tmp\ 4748}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{tmp\ 4744}#)))))))))

(define define*
  (make-syntax-transformer
    'define*
    'macro
    (lambda (#{x\ 4771}#)
      (let ((#{tmp\ 4773}# #{x\ 4771}#))
        (let ((#{tmp\ 4774}#
                ($sc-dispatch
                  #{tmp\ 4773}#
                  '(_ (any . any) any . each-any))))
          (if #{tmp\ 4774}#
            (@apply
              (lambda (#{id\ 4779}#
                       #{args\ 4780}#
                       #{b0\ 4781}#
                       #{b1\ 4782}#)
                (list '#(syntax-object
                         define
                         ((top)
                          #(ribcage
                            #(id args b0 b1)
                            #((top) (top) (top) (top))
                            #("i4775" "i4776" "i4777" "i4778"))
                          #(ribcage () () ())
                          #(ribcage #(x) #((top)) #("i4772")))
                         (hygiene guile))
                      #{id\ 4779}#
                      (cons '#(syntax-object
                               lambda*
                               ((top)
                                #(ribcage
                                  #(id args b0 b1)
                                  #((top) (top) (top) (top))
                                  #("i4775" "i4776" "i4777" "i4778"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i4772")))
                               (hygiene guile))
                            (cons #{args\ 4780}#
                                  (cons #{b0\ 4781}# #{b1\ 4782}#)))))
              #{tmp\ 4774}#)
            (let ((#{tmp\ 4784}#
                    ($sc-dispatch #{tmp\ 4773}# '(_ any any))))
              (if (if #{tmp\ 4784}#
                    (@apply
                      (lambda (#{id\ 4787}# #{val\ 4788}#)
                        (identifier?
                          '#(syntax-object
                             x
                             ((top)
                              #(ribcage
                                #(id val)
                                #((top) (top))
                                #("i4785" "i4786"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i4772")))
                             (hygiene guile))))
                      #{tmp\ 4784}#)
                    #f)
                (@apply
                  (lambda (#{id\ 4791}# #{val\ 4792}#)
                    (list '#(syntax-object
                             define
                             ((top)
                              #(ribcage
                                #(id val)
                                #((top) (top))
                                #("i4789" "i4790"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i4772")))
                             (hygiene guile))
                          #{id\ 4791}#
                          #{val\ 4792}#))
                  #{tmp\ 4784}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{tmp\ 4773}#)))))))))

