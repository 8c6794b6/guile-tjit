(eval-when (compile) (set-current-module (resolve-module (quote (guile)))))
(if #f #f)

(letrec*
  ((#{top-level-eval-hook 4300}#
     (lambda (#{x 36829}# #{mod 36830}#)
       (primitive-eval #{x 36829}#)))
   (#{maybe-name-value! 4305}#
     (lambda (#{name 19449}# #{val 19450}#)
       (if (if (struct? #{val 19450}#)
             (eq? (struct-vtable #{val 19450}#)
                  (vector-ref %expanded-vtables 14))
             #f)
         (let ((#{meta 19457}# (struct-ref #{val 19450}# 1)))
           (if (not (assq 'name #{meta 19457}#))
             (let ((#{v 19462}#
                     (cons (cons 'name #{name 19449}#) #{meta 19457}#)))
               (struct-set! #{val 19450}# 1 #{v 19462}#)))))))
   (#{build-call 4307}#
     (lambda (#{source 19194}#
              #{fun-exp 19195}#
              #{arg-exps 19196}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 11)
         #{source 19194}#
         #{fun-exp 19195}#
         #{arg-exps 19196}#)))
   (#{build-conditional 4308}#
     (lambda (#{source 19202}#
              #{test-exp 19203}#
              #{then-exp 19204}#
              #{else-exp 19205}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 10)
         #{source 19202}#
         #{test-exp 19203}#
         #{then-exp 19204}#
         #{else-exp 19205}#)))
   (#{build-dynlet 4309}#
     (lambda (#{source 19212}#
              #{fluids 19213}#
              #{vals 19214}#
              #{body 19215}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 18)
         #{source 19212}#
         #{fluids 19213}#
         #{vals 19214}#
         #{body 19215}#)))
   (#{build-lexical-reference 4310}#
     (lambda (#{type 36831}#
              #{source 36832}#
              #{name 36833}#
              #{var 36834}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 3)
         #{source 36832}#
         #{name 36833}#
         #{var 36834}#)))
   (#{build-lexical-assignment 4311}#
     (lambda (#{source 19222}#
              #{name 19223}#
              #{var 19224}#
              #{exp 19225}#)
       (begin
         (if (if (struct? #{exp 19225}#)
               (eq? (struct-vtable #{exp 19225}#)
                    (vector-ref %expanded-vtables 14))
               #f)
           (let ((#{meta 19241}# (struct-ref #{exp 19225}# 1)))
             (if (not (assq 'name #{meta 19241}#))
               (let ((#{v 19248}#
                       (cons (cons 'name #{name 19223}#) #{meta 19241}#)))
                 (struct-set! #{exp 19225}# 1 #{v 19248}#)))))
         (make-struct/no-tail
           (vector-ref %expanded-vtables 4)
           #{source 19222}#
           #{name 19223}#
           #{var 19224}#
           #{exp 19225}#))))
   (#{analyze-variable 4312}#
     (lambda (#{mod 36840}#
              #{var 36841}#
              #{modref-cont 36842}#
              #{bare-cont 36843}#)
       (if (not #{mod 36840}#)
         (#{bare-cont 36843}# #{var 36841}#)
         (let ((#{kind 36844}# (car #{mod 36840}#))
               (#{mod 36845}# (cdr #{mod 36840}#)))
           (if (eqv? #{kind 36844}# 'public)
             (#{modref-cont 36842}#
               #{mod 36845}#
               #{var 36841}#
               #t)
             (if (eqv? #{kind 36844}# 'private)
               (if (not (equal?
                          #{mod 36845}#
                          (module-name (current-module))))
                 (#{modref-cont 36842}#
                   #{mod 36845}#
                   #{var 36841}#
                   #f)
                 (#{bare-cont 36843}# #{var 36841}#))
               (if (eqv? #{kind 36844}# 'bare)
                 (#{bare-cont 36843}# #{var 36841}#)
                 (if (eqv? #{kind 36844}# 'hygiene)
                   (if (if (not (equal?
                                  #{mod 36845}#
                                  (module-name (current-module))))
                         (module-variable
                           (resolve-module #{mod 36845}#)
                           #{var 36841}#)
                         #f)
                     (#{modref-cont 36842}#
                       #{mod 36845}#
                       #{var 36841}#
                       #f)
                     (#{bare-cont 36843}# #{var 36841}#))
                   (syntax-violation
                     #f
                     "bad module kind"
                     #{var 36841}#
                     #{mod 36845}#)))))))))
   (#{build-global-reference 4313}#
     (lambda (#{source 36860}# #{var 36861}# #{mod 36862}#)
       (#{analyze-variable 4312}#
         #{mod 36862}#
         #{var 36861}#
         (lambda (#{mod 36865}# #{var 36866}# #{public? 36867}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 5)
             #{source 36860}#
             #{mod 36865}#
             #{var 36866}#
             #{public? 36867}#))
         (lambda (#{var 36874}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 7)
             #{source 36860}#
             #{var 36874}#)))))
   (#{build-global-assignment 4314}#
     (lambda (#{source 19257}#
              #{var 19258}#
              #{exp 19259}#
              #{mod 19260}#)
       (begin
         (if (if (struct? #{exp 19259}#)
               (eq? (struct-vtable #{exp 19259}#)
                    (vector-ref %expanded-vtables 14))
               #f)
           (let ((#{meta 19276}# (struct-ref #{exp 19259}# 1)))
             (if (not (assq 'name #{meta 19276}#))
               (let ((#{v 19283}#
                       (cons (cons 'name #{var 19258}#) #{meta 19276}#)))
                 (struct-set! #{exp 19259}# 1 #{v 19283}#)))))
         (#{analyze-variable 4312}#
           #{mod 19260}#
           #{var 19258}#
           (lambda (#{mod 19288}# #{var 19289}# #{public? 19290}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 6)
               #{source 19257}#
               #{mod 19288}#
               #{var 19289}#
               #{public? 19290}#
               #{exp 19259}#))
           (lambda (#{var 19298}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 8)
               #{source 19257}#
               #{var 19298}#
               #{exp 19259}#))))))
   (#{build-global-definition 4315}#
     (lambda (#{source 36879}# #{var 36880}# #{exp 36881}#)
       (begin
         (if (if (struct? #{exp 36881}#)
               (eq? (struct-vtable #{exp 36881}#)
                    (vector-ref %expanded-vtables 14))
               #f)
           (let ((#{meta 36897}# (struct-ref #{exp 36881}# 1)))
             (if (not (assq 'name #{meta 36897}#))
               (let ((#{v 36904}#
                       (cons (cons 'name #{var 36880}#) #{meta 36897}#)))
                 (struct-set! #{exp 36881}# 1 #{v 36904}#)))))
         (make-struct/no-tail
           (vector-ref %expanded-vtables 9)
           #{source 36879}#
           #{var 36880}#
           #{exp 36881}#))))
   (#{build-simple-lambda 4316}#
     (lambda (#{src 19304}#
              #{req 19305}#
              #{rest 19306}#
              #{vars 19307}#
              #{meta 19308}#
              #{exp 19309}#)
       (let ((#{body 19315}#
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 15)
                 #{src 19304}#
                 #{req 19305}#
                 #f
                 #{rest 19306}#
                 #f
                 '()
                 #{vars 19307}#
                 #{exp 19309}#
                 #f)))
         (make-struct/no-tail
           (vector-ref %expanded-vtables 14)
           #{src 19304}#
           #{meta 19308}#
           #{body 19315}#))))
   (#{build-primcall 4319}#
     (lambda (#{src 19327}# #{name 19328}# #{args 19329}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 12)
         #{src 19327}#
         #{name 19328}#
         #{args 19329}#)))
   (#{build-sequence 4322}#
     (lambda (#{src 36912}# #{exps 36913}#)
       (if (null? (cdr #{exps 36913}#))
         (car #{exps 36913}#)
         (let ((#{head 36917}# (car #{exps 36913}#))
               (#{tail 36918}#
                 (#{build-sequence 4322}# #f (cdr #{exps 36913}#))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 13)
             #{src 36912}#
             #{head 36917}#
             #{tail 36918}#)))))
   (#{build-named-let 4324}#
     (lambda (#{src 19335}#
              #{ids 19336}#
              #{vars 19337}#
              #{val-exps 19338}#
              #{body-exp 19339}#)
       (let ((#{f 19340}# (car #{vars 19337}#))
             (#{f-name 19341}# (car #{ids 19336}#))
             (#{vars 19342}# (cdr #{vars 19337}#))
             (#{ids 19343}# (cdr #{ids 19336}#)))
         (let ((#{proc 19344}#
                 (let ((#{body 19364}#
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 15)
                           #{src 19335}#
                           #{ids 19343}#
                           #f
                           #f
                           #f
                           '()
                           #{vars 19342}#
                           #{body-exp 19339}#
                           #f)))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 14)
                     #{src 19335}#
                     '()
                     #{body 19364}#))))
           (begin
             (if (if (struct? #{proc 19344}#)
                   (eq? (struct-vtable #{proc 19344}#)
                        (vector-ref %expanded-vtables 14))
                   #f)
               (let ((#{meta 19388}# (struct-ref #{proc 19344}# 1)))
                 (if (not (assq 'name #{meta 19388}#))
                   (let ((#{v 19395}#
                           (cons (cons 'name #{f-name 19341}#)
                                 #{meta 19388}#)))
                     (struct-set! #{proc 19344}# 1 #{v 19395}#)))))
             (for-each
               #{maybe-name-value! 4305}#
               #{ids 19343}#
               #{val-exps 19338}#)
             (let ((#{names 19419}# (list #{f-name 19341}#))
                   (#{gensyms 19420}# (list #{f 19340}#))
                   (#{vals 19421}# (list #{proc 19344}#))
                   (#{body 19422}#
                     (let ((#{fun-exp 19426}#
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 3)
                               #{src 19335}#
                               #{f-name 19341}#
                               #{f 19340}#)))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 11)
                         #{src 19335}#
                         #{fun-exp 19426}#
                         #{val-exps 19338}#))))
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 17)
                 #{src 19335}#
                 #f
                 #{names 19419}#
                 #{gensyms 19420}#
                 #{vals 19421}#
                 #{body 19422}#)))))))
   (#{build-letrec 4325}#
     (lambda (#{src 19442}#
              #{in-order? 19443}#
              #{ids 19444}#
              #{vars 19445}#
              #{val-exps 19446}#
              #{body-exp 19447}#)
       (if (null? #{vars 19445}#)
         #{body-exp 19447}#
         (begin
           (for-each
             #{maybe-name-value! 4305}#
             #{ids 19444}#
             #{val-exps 19446}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 17)
             #{src 19442}#
             #{in-order? 19443}#
             #{ids 19444}#
             #{vars 19445}#
             #{val-exps 19446}#
             #{body-exp 19447}#)))))
   (#{source-annotation 4334}#
     (lambda (#{x 19473}#)
       (if (if (vector? #{x 19473}#)
             (if (= (vector-length #{x 19473}#) 4)
               (eq? (vector-ref #{x 19473}# 0) 'syntax-object)
               #f)
             #f)
         (#{source-annotation 4334}#
           (vector-ref #{x 19473}# 1))
         (if (pair? #{x 19473}#)
           (let ((#{props 19488}# (source-properties #{x 19473}#)))
             (if (pair? #{props 19488}#) #{props 19488}# #f))
           #f))))
   (#{extend-env 4335}#
     (lambda (#{labels 19490}# #{bindings 19491}# #{r 19492}#)
       (if (null? #{labels 19490}#)
         #{r 19492}#
         (#{extend-env 4335}#
           (cdr #{labels 19490}#)
           (cdr #{bindings 19491}#)
           (cons (cons (car #{labels 19490}#)
                       (car #{bindings 19491}#))
                 #{r 19492}#)))))
   (#{extend-var-env 4336}#
     (lambda (#{labels 19493}# #{vars 19494}# #{r 19495}#)
       (if (null? #{labels 19493}#)
         #{r 19495}#
         (#{extend-var-env 4336}#
           (cdr #{labels 19493}#)
           (cdr #{vars 19494}#)
           (cons (cons (car #{labels 19493}#)
                       (cons 'lexical (car #{vars 19494}#)))
                 #{r 19495}#)))))
   (#{macros-only-env 4337}#
     (lambda (#{r 19496}#)
       (if (null? #{r 19496}#)
         '()
         (let ((#{a 19497}# (car #{r 19496}#)))
           (if (eq? (car (cdr #{a 19497}#)) 'macro)
             (cons #{a 19497}#
                   (#{macros-only-env 4337}# (cdr #{r 19496}#)))
             (#{macros-only-env 4337}# (cdr #{r 19496}#)))))))
   (#{global-extend 4339}#
     (lambda (#{type 19499}# #{sym 19500}# #{val 19501}#)
       (module-define!
         (current-module)
         #{sym 19500}#
         (make-syntax-transformer
           #{sym 19500}#
           #{type 19499}#
           #{val 19501}#))))
   (#{id? 4341}#
     (lambda (#{x 12436}#)
       (if (symbol? #{x 12436}#)
         #t
         (if (if (vector? #{x 12436}#)
               (if (= (vector-length #{x 12436}#) 4)
                 (eq? (vector-ref #{x 12436}# 0) 'syntax-object)
                 #f)
               #f)
           (symbol? (vector-ref #{x 12436}# 1))
           #f))))
   (#{gen-labels 4344}#
     (lambda (#{ls 19511}#)
       (if (null? #{ls 19511}#)
         '()
         (cons (symbol->string (gensym "i"))
               (#{gen-labels 4344}# (cdr #{ls 19511}#))))))
   (#{make-binding-wrap 4355}#
     (lambda (#{ids 19515}# #{labels 19516}# #{w 19517}#)
       (if (null? #{ids 19515}#)
         #{w 19517}#
         (cons (car #{w 19517}#)
               (cons (let ((#{labelvec 19518}#
                             (list->vector #{labels 19516}#)))
                       (let ((#{n 19519}# (vector-length #{labelvec 19518}#)))
                         (let ((#{symnamevec 19520}# (make-vector #{n 19519}#))
                               (#{marksvec 19521}# (make-vector #{n 19519}#)))
                           (begin
                             (letrec*
                               ((#{f 19522}#
                                  (lambda (#{ids 19721}# #{i 19722}#)
                                    (if (not (null? #{ids 19721}#))
                                      (call-with-values
                                        (lambda ()
                                          (let ((#{x 19725}#
                                                  (car #{ids 19721}#)))
                                            (if (if (vector? #{x 19725}#)
                                                  (if (= (vector-length
                                                           #{x 19725}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{x 19725}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (values
                                                (vector-ref #{x 19725}# 1)
                                                (let ((#{m1 19741}#
                                                        (car #{w 19517}#))
                                                      (#{m2 19742}#
                                                        (car (vector-ref
                                                               #{x 19725}#
                                                               2))))
                                                  (if (null? #{m2 19742}#)
                                                    #{m1 19741}#
                                                    (append
                                                      #{m1 19741}#
                                                      #{m2 19742}#))))
                                              (values
                                                #{x 19725}#
                                                (car #{w 19517}#)))))
                                        (lambda (#{symname 19762}#
                                                 #{marks 19763}#)
                                          (begin
                                            (vector-set!
                                              #{symnamevec 19520}#
                                              #{i 19722}#
                                              #{symname 19762}#)
                                            (vector-set!
                                              #{marksvec 19521}#
                                              #{i 19722}#
                                              #{marks 19763}#)
                                            (#{f 19522}#
                                              (cdr #{ids 19721}#)
                                              (#{1+}# #{i 19722}#)))))))))
                               (#{f 19522}# #{ids 19515}# 0))
                             (vector
                               'ribcage
                               #{symnamevec 19520}#
                               #{marksvec 19521}#
                               #{labelvec 19518}#)))))
                     (cdr #{w 19517}#))))))
   (#{same-marks? 4359}#
     (lambda (#{x 36919}# #{y 36920}#)
       (if (eq? #{x 36919}# #{y 36920}#)
         (eq? #{x 36919}# #{y 36920}#)
         (if (not (null? #{x 36919}#))
           (if (not (null? #{y 36920}#))
             (if (eq? (car #{x 36919}#) (car #{y 36920}#))
               (#{same-marks? 4359}#
                 (cdr #{x 36919}#)
                 (cdr #{y 36920}#))
               #f)
             #f)
           #f))))
   (#{id-var-name 4360}#
     (lambda (#{id 19770}# #{w 19771}#)
       (letrec*
         ((#{search 19772}#
            (lambda (#{sym 19833}# #{subst 19834}# #{marks 19835}#)
              (if (null? #{subst 19834}#)
                (values #f #{marks 19835}#)
                (let ((#{fst 19836}# (car #{subst 19834}#)))
                  (if (eq? #{fst 19836}# 'shift)
                    (#{search 19772}#
                      #{sym 19833}#
                      (cdr #{subst 19834}#)
                      (cdr #{marks 19835}#))
                    (let ((#{symnames 19838}# (vector-ref #{fst 19836}# 1)))
                      (if (vector? #{symnames 19838}#)
                        (#{search-vector-rib 19774}#
                          #{sym 19833}#
                          #{subst 19834}#
                          #{marks 19835}#
                          #{symnames 19838}#
                          #{fst 19836}#)
                        (#{search-list-rib 19773}#
                          #{sym 19833}#
                          #{subst 19834}#
                          #{marks 19835}#
                          #{symnames 19838}#
                          #{fst 19836}#))))))))
          (#{search-list-rib 19773}#
            (lambda (#{sym 20008}#
                     #{subst 20009}#
                     #{marks 20010}#
                     #{symnames 20011}#
                     #{ribcage 20012}#)
              (letrec*
                ((#{f 20013}#
                   (lambda (#{symnames 20016}# #{i 20017}#)
                     (if (null? #{symnames 20016}#)
                       (#{search 19772}#
                         #{sym 20008}#
                         (cdr #{subst 20009}#)
                         #{marks 20010}#)
                       (if (if (eq? (car #{symnames 20016}#) #{sym 20008}#)
                             (#{same-marks? 4359}#
                               #{marks 20010}#
                               (list-ref
                                 (vector-ref #{ribcage 20012}# 2)
                                 #{i 20017}#))
                             #f)
                         (values
                           (list-ref
                             (vector-ref #{ribcage 20012}# 3)
                             #{i 20017}#)
                           #{marks 20010}#)
                         (#{f 20013}#
                           (cdr #{symnames 20016}#)
                           (#{1+}# #{i 20017}#)))))))
                (#{f 20013}# #{symnames 20011}# 0))))
          (#{search-vector-rib 19774}#
            (lambda (#{sym 20167}#
                     #{subst 20168}#
                     #{marks 20169}#
                     #{symnames 20170}#
                     #{ribcage 20171}#)
              (let ((#{n 20172}# (vector-length #{symnames 20170}#)))
                (letrec*
                  ((#{f 20173}#
                     (lambda (#{i 20230}#)
                       (if (= #{i 20230}# #{n 20172}#)
                         (#{search 19772}#
                           #{sym 20167}#
                           (cdr #{subst 20168}#)
                           #{marks 20169}#)
                         (if (if (eq? (vector-ref
                                        #{symnames 20170}#
                                        #{i 20230}#)
                                      #{sym 20167}#)
                               (#{same-marks? 4359}#
                                 #{marks 20169}#
                                 (vector-ref
                                   (vector-ref #{ribcage 20171}# 2)
                                   #{i 20230}#))
                               #f)
                           (values
                             (vector-ref
                               (vector-ref #{ribcage 20171}# 3)
                               #{i 20230}#)
                             #{marks 20169}#)
                           (#{f 20173}# (#{1+}# #{i 20230}#)))))))
                  (#{f 20173}# 0))))))
         (if (symbol? #{id 19770}#)
           (let ((#{t 19775}#
                   (#{search 19772}#
                     #{id 19770}#
                     (cdr #{w 19771}#)
                     (car #{w 19771}#))))
             (if #{t 19775}# #{t 19775}# #{id 19770}#))
           (if (if (vector? #{id 19770}#)
                 (if (= (vector-length #{id 19770}#) 4)
                   (eq? (vector-ref #{id 19770}# 0) 'syntax-object)
                   #f)
                 #f)
             (let ((#{id 19790}# (vector-ref #{id 19770}# 1))
                   (#{w1 19791}# (vector-ref #{id 19770}# 2)))
               (let ((#{marks 19792}#
                       (let ((#{m1 19802}# (car #{w 19771}#))
                             (#{m2 19803}# (car #{w1 19791}#)))
                         (if (null? #{m2 19803}#)
                           #{m1 19802}#
                           (append #{m1 19802}# #{m2 19803}#)))))
                 (call-with-values
                   (lambda ()
                     (#{search 19772}#
                       #{id 19790}#
                       (cdr #{w 19771}#)
                       #{marks 19792}#))
                   (lambda (#{new-id 19819}# #{marks 19820}#)
                     (if #{new-id 19819}#
                       #{new-id 19819}#
                       (let ((#{t 19828}#
                               (#{search 19772}#
                                 #{id 19790}#
                                 (cdr #{w1 19791}#)
                                 #{marks 19820}#)))
                         (if #{t 19828}# #{t 19828}# #{id 19790}#)))))))
             (syntax-violation
               'id-var-name
               "invalid id"
               #{id 19770}#))))))
   (#{free-id=? 4361}#
     (lambda (#{i 20380}# #{j 20381}#)
       (let ((#{ni 20382}#
               (#{id-var-name 4360}# #{i 20380}# '(())))
             (#{nj 20383}#
               (#{id-var-name 4360}# #{j 20381}# '(()))))
         (if (eq? #{ni 20382}#
                  (if (if (vector? #{i 20380}#)
                        (if (= (vector-length #{i 20380}#) 4)
                          (eq? (vector-ref #{i 20380}# 0) 'syntax-object)
                          #f)
                        #f)
                    (vector-ref #{i 20380}# 1)
                    #{i 20380}#))
           (if (eq? #{nj 20383}#
                    (if (if (vector? #{j 20381}#)
                          (if (= (vector-length #{j 20381}#) 4)
                            (eq? (vector-ref #{j 20381}# 0) 'syntax-object)
                            #f)
                          #f)
                      (vector-ref #{j 20381}# 1)
                      #{j 20381}#))
             (if (let ((#{bi 20441}#
                         (let ((#{mod 20710}#
                                 (if (if (vector? #{i 20380}#)
                                       (if (= (vector-length #{i 20380}#) 4)
                                         (eq? (vector-ref #{i 20380}# 0)
                                              'syntax-object)
                                         #f)
                                       #f)
                                   (vector-ref #{i 20380}# 3)
                                   #f)))
                           (module-variable
                             (if #{mod 20710}#
                               (resolve-module (cdr #{mod 20710}#))
                               (current-module))
                             (if (if (vector? #{i 20380}#)
                                   (if (= (vector-length #{i 20380}#) 4)
                                     (eq? (vector-ref #{i 20380}# 0)
                                          'syntax-object)
                                     #f)
                                   #f)
                               (vector-ref #{i 20380}# 1)
                               #{i 20380}#)))))
                   (if #{bi 20441}#
                     (eq? #{bi 20441}#
                          (let ((#{mod 20554}#
                                  (if (if (vector? #{j 20381}#)
                                        (if (= (vector-length #{j 20381}#) 4)
                                          (eq? (vector-ref #{j 20381}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (vector-ref #{j 20381}# 3)
                                    #f)))
                            (module-variable
                              (if #{mod 20554}#
                                (resolve-module (cdr #{mod 20554}#))
                                (current-module))
                              (if (if (vector? #{j 20381}#)
                                    (if (= (vector-length #{j 20381}#) 4)
                                      (eq? (vector-ref #{j 20381}# 0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (vector-ref #{j 20381}# 1)
                                #{j 20381}#))))
                     (if (not (let ((#{mod 20632}#
                                      (if (if (vector? #{j 20381}#)
                                            (if (= (vector-length #{j 20381}#)
                                                   4)
                                              (eq? (vector-ref #{j 20381}# 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (vector-ref #{j 20381}# 3)
                                        #f)))
                                (module-variable
                                  (if #{mod 20632}#
                                    (resolve-module (cdr #{mod 20632}#))
                                    (current-module))
                                  (if (if (vector? #{j 20381}#)
                                        (if (= (vector-length #{j 20381}#) 4)
                                          (eq? (vector-ref #{j 20381}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (vector-ref #{j 20381}# 1)
                                    #{j 20381}#))))
                       (eq? #{ni 20382}# #{nj 20383}#)
                       #f)))
               (eq? (let ((#{mod 20788}#
                            (if (if (vector? #{i 20380}#)
                                  (if (= (vector-length #{i 20380}#) 4)
                                    (eq? (vector-ref #{i 20380}# 0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (vector-ref #{i 20380}# 3)
                              #f)))
                      (module-variable
                        (if #{mod 20788}#
                          (resolve-module (cdr #{mod 20788}#))
                          (current-module))
                        (if (if (vector? #{i 20380}#)
                              (if (= (vector-length #{i 20380}#) 4)
                                (eq? (vector-ref #{i 20380}# 0) 'syntax-object)
                                #f)
                              #f)
                          (vector-ref #{i 20380}# 1)
                          #{i 20380}#)))
                    (let ((#{mod 20866}#
                            (if (if (vector? #{j 20381}#)
                                  (if (= (vector-length #{j 20381}#) 4)
                                    (eq? (vector-ref #{j 20381}# 0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (vector-ref #{j 20381}# 3)
                              #f)))
                      (module-variable
                        (if #{mod 20866}#
                          (resolve-module (cdr #{mod 20866}#))
                          (current-module))
                        (if (if (vector? #{j 20381}#)
                              (if (= (vector-length #{j 20381}#) 4)
                                (eq? (vector-ref #{j 20381}# 0) 'syntax-object)
                                #f)
                              #f)
                          (vector-ref #{j 20381}# 1)
                          #{j 20381}#))))
               #f)
             #f)
           (if (eq? #{ni 20382}# #{nj 20383}#)
             (not (eq? #{nj 20383}#
                       (if (if (vector? #{j 20381}#)
                             (if (= (vector-length #{j 20381}#) 4)
                               (eq? (vector-ref #{j 20381}# 0) 'syntax-object)
                               #f)
                             #f)
                         (vector-ref #{j 20381}# 1)
                         #{j 20381}#)))
             #f)))))
   (#{bound-id=? 4362}#
     (lambda (#{i 20966}# #{j 20967}#)
       (if (if (if (vector? #{i 20966}#)
                 (if (= (vector-length #{i 20966}#) 4)
                   (eq? (vector-ref #{i 20966}# 0) 'syntax-object)
                   #f)
                 #f)
             (if (vector? #{j 20967}#)
               (if (= (vector-length #{j 20967}#) 4)
                 (eq? (vector-ref #{j 20967}# 0) 'syntax-object)
                 #f)
               #f)
             #f)
         (if (eq? (vector-ref #{i 20966}# 1)
                  (vector-ref #{j 20967}# 1))
           (#{same-marks? 4359}#
             (car (vector-ref #{i 20966}# 2))
             (car (vector-ref #{j 20967}# 2)))
           #f)
         (eq? #{i 20966}# #{j 20967}#))))
   (#{valid-bound-ids? 4363}#
     (lambda (#{ids 21136}#)
       (if (letrec*
             ((#{all-ids? 21137}#
                (lambda (#{ids 21334}#)
                  (if (null? #{ids 21334}#)
                    (null? #{ids 21334}#)
                    (if (let ((#{x 21345}# (car #{ids 21334}#)))
                          (if (symbol? #{x 21345}#)
                            #t
                            (if (if (vector? #{x 21345}#)
                                  (if (= (vector-length #{x 21345}#) 4)
                                    (eq? (vector-ref #{x 21345}# 0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (symbol? (vector-ref #{x 21345}# 1))
                              #f)))
                      (#{all-ids? 21137}# (cdr #{ids 21334}#))
                      #f)))))
             (#{all-ids? 21137}# #{ids 21136}#))
         (#{distinct-bound-ids? 4364}# #{ids 21136}#)
         #f)))
   (#{distinct-bound-ids? 4364}#
     (lambda (#{ids 21466}#)
       (letrec*
         ((#{distinct? 21467}#
            (lambda (#{ids 21572}#)
              (if (null? #{ids 21572}#)
                (null? #{ids 21572}#)
                (if (not (#{bound-id-member? 4365}#
                           (car #{ids 21572}#)
                           (cdr #{ids 21572}#)))
                  (#{distinct? 21467}# (cdr #{ids 21572}#))
                  #f)))))
         (#{distinct? 21467}# #{ids 21466}#))))
   (#{bound-id-member? 4365}#
     (lambda (#{x 21668}# #{list 21669}#)
       (if (not (null? #{list 21669}#))
         (let ((#{t 21670}#
                 (#{bound-id=? 4362}#
                   #{x 21668}#
                   (car #{list 21669}#))))
           (if #{t 21670}#
             #{t 21670}#
             (#{bound-id-member? 4365}#
               #{x 21668}#
               (cdr #{list 21669}#))))
         #f)))
   (#{source-wrap 4367}#
     (lambda (#{x 21848}#
              #{w 21849}#
              #{s 21850}#
              #{defmod 21851}#)
       (let ((#{x 21855}#
               (begin
                 (if (if (pair? #{x 21848}#) #{s 21850}# #f)
                   (set-source-properties! #{x 21848}# #{s 21850}#))
                 #{x 21848}#)))
         (if (if (null? (car #{w 21849}#))
               (null? (cdr #{w 21849}#))
               #f)
           #{x 21855}#
           (if (if (vector? #{x 21855}#)
                 (if (= (vector-length #{x 21855}#) 4)
                   (eq? (vector-ref #{x 21855}# 0) 'syntax-object)
                   #f)
                 #f)
             (let ((#{expression 21887}# (vector-ref #{x 21855}# 1))
                   (#{wrap 21888}#
                     (let ((#{w2 21896}# (vector-ref #{x 21855}# 2)))
                       (let ((#{m1 21897}# (car #{w 21849}#))
                             (#{s1 21898}# (cdr #{w 21849}#)))
                         (if (null? #{m1 21897}#)
                           (if (null? #{s1 21898}#)
                             #{w2 21896}#
                             (cons (car #{w2 21896}#)
                                   (let ((#{m2 21913}# (cdr #{w2 21896}#)))
                                     (if (null? #{m2 21913}#)
                                       #{s1 21898}#
                                       (append #{s1 21898}# #{m2 21913}#)))))
                           (cons (let ((#{m2 21921}# (car #{w2 21896}#)))
                                   (if (null? #{m2 21921}#)
                                     #{m1 21897}#
                                     (append #{m1 21897}# #{m2 21921}#)))
                                 (let ((#{m2 21929}# (cdr #{w2 21896}#)))
                                   (if (null? #{m2 21929}#)
                                     #{s1 21898}#
                                     (append #{s1 21898}# #{m2 21929}#))))))))
                   (#{module 21889}# (vector-ref #{x 21855}# 3)))
               (vector
                 'syntax-object
                 #{expression 21887}#
                 #{wrap 21888}#
                 #{module 21889}#))
             (if (null? #{x 21855}#)
               #{x 21855}#
               (vector
                 'syntax-object
                 #{x 21855}#
                 #{w 21849}#
                 #{defmod 21851}#)))))))
   (#{chi-sequence 4368}#
     (lambda (#{body 36928}#
              #{r 36929}#
              #{w 36930}#
              #{s 36931}#
              #{mod 36932}#)
       (#{build-sequence 4322}#
         #{s 36931}#
         (letrec*
           ((#{dobody 37024}#
              (lambda (#{body 37111}#
                       #{r 37112}#
                       #{w 37113}#
                       #{mod 37114}#)
                (if (null? #{body 37111}#)
                  '()
                  (let ((#{first 37115}#
                          (#{chi 4373}#
                            (car #{body 37111}#)
                            #{r 37112}#
                            #{w 37113}#
                            #{mod 37114}#)))
                    (cons #{first 37115}#
                          (#{dobody 37024}#
                            (cdr #{body 37111}#)
                            #{r 37112}#
                            #{w 37113}#
                            #{mod 37114}#)))))))
           (#{dobody 37024}#
             #{body 36928}#
             #{r 36929}#
             #{w 36930}#
             #{mod 36932}#)))))
   (#{chi-top-sequence 4369}#
     (lambda (#{body 21944}#
              #{r 21945}#
              #{w 21946}#
              #{s 21947}#
              #{m 21948}#
              #{esew 21949}#
              #{mod 21950}#)
       (letrec*
         ((#{scan 21951}#
            (lambda (#{body 22098}#
                     #{r 22099}#
                     #{w 22100}#
                     #{s 22101}#
                     #{m 22102}#
                     #{esew 22103}#
                     #{mod 22104}#
                     #{exps 22105}#)
              (if (null? #{body 22098}#)
                #{exps 22105}#
                (#{scan 21951}#
                  (cdr #{body 22098}#)
                  #{r 22099}#
                  #{w 22100}#
                  #{s 22101}#
                  #{m 22102}#
                  #{esew 22103}#
                  #{mod 22104}#
                  (call-with-values
                    (lambda ()
                      (let ((#{e 22106}# (car #{body 22098}#)))
                        (#{syntax-type 4372}#
                          #{e 22106}#
                          #{r 22099}#
                          #{w 22100}#
                          (let ((#{t 22110}#
                                  (#{source-annotation 4334}# #{e 22106}#)))
                            (if #{t 22110}# #{t 22110}# #{s 22101}#))
                          #f
                          #{mod 22104}#
                          #f)))
                    (lambda (#{type 22408}#
                             #{value 22409}#
                             #{e 22410}#
                             #{w 22411}#
                             #{s 22412}#
                             #{mod 22413}#)
                      (if (eqv? #{type 22408}# 'begin-form)
                        (let ((#{tmp 22418}# ($sc-dispatch #{e 22410}# '(_))))
                          (if #{tmp 22418}#
                            (@apply (lambda () #{exps 22105}#) #{tmp 22418}#)
                            (let ((#{tmp 22422}#
                                    ($sc-dispatch
                                      #{e 22410}#
                                      '(_ any . each-any))))
                              (if #{tmp 22422}#
                                (@apply
                                  (lambda (#{e1 22426}# #{e2 22427}#)
                                    (#{scan 21951}#
                                      (cons #{e1 22426}# #{e2 22427}#)
                                      #{r 22099}#
                                      #{w 22411}#
                                      #{s 22412}#
                                      #{m 22102}#
                                      #{esew 22103}#
                                      #{mod 22413}#
                                      #{exps 22105}#))
                                  #{tmp 22422}#)
                                (syntax-violation
                                  #f
                                  "source expression failed to match any pattern"
                                  #{e 22410}#)))))
                        (if (eqv? #{type 22408}# 'local-syntax-form)
                          (#{chi-local-syntax 4378}#
                            #{value 22409}#
                            #{e 22410}#
                            #{r 22099}#
                            #{w 22411}#
                            #{s 22412}#
                            #{mod 22413}#
                            (lambda (#{body 22442}#
                                     #{r 22443}#
                                     #{w 22444}#
                                     #{s 22445}#
                                     #{mod 22446}#)
                              (#{scan 21951}#
                                #{body 22442}#
                                #{r 22443}#
                                #{w 22444}#
                                #{s 22445}#
                                #{m 22102}#
                                #{esew 22103}#
                                #{mod 22446}#
                                #{exps 22105}#)))
                          (if (eqv? #{type 22408}# 'eval-when-form)
                            (let ((#{tmp 22451}#
                                    ($sc-dispatch
                                      #{e 22410}#
                                      '(_ each-any any . each-any))))
                              (if #{tmp 22451}#
                                (@apply
                                  (lambda (#{x 22455}#
                                           #{e1 22456}#
                                           #{e2 22457}#)
                                    (let ((#{when-list 22458}#
                                            (#{chi-when-list 4371}#
                                              #{e 22410}#
                                              #{x 22455}#
                                              #{w 22411}#))
                                          (#{body 22459}#
                                            (cons #{e1 22456}# #{e2 22457}#)))
                                      (if (eq? #{m 22102}# 'e)
                                        (if (memq 'eval #{when-list 22458}#)
                                          (#{scan 21951}#
                                            #{body 22459}#
                                            #{r 22099}#
                                            #{w 22411}#
                                            #{s 22412}#
                                            (if (memq 'expand
                                                      #{when-list 22458}#)
                                              'c&e
                                              'e)
                                            '(eval)
                                            #{mod 22413}#
                                            #{exps 22105}#)
                                          (begin
                                            (if (memq 'expand
                                                      #{when-list 22458}#)
                                              (let ((#{x 22466}#
                                                      (#{chi-top-sequence 4369}#
                                                        #{body 22459}#
                                                        #{r 22099}#
                                                        #{w 22411}#
                                                        #{s 22412}#
                                                        'e
                                                        '(eval)
                                                        #{mod 22413}#)))
                                                (primitive-eval #{x 22466}#)))
                                            #{exps 22105}#))
                                        (if (memq 'load #{when-list 22458}#)
                                          (if (let ((#{t 22468}#
                                                      (memq 'compile
                                                            #{when-list 22458}#)))
                                                (if #{t 22468}#
                                                  #{t 22468}#
                                                  (let ((#{t 22470}#
                                                          (memq 'expand
                                                                #{when-list 22458}#)))
                                                    (if #{t 22470}#
                                                      #{t 22470}#
                                                      (if (eq? #{m 22102}#
                                                               'c&e)
                                                        (memq 'eval
                                                              #{when-list 22458}#)
                                                        #f)))))
                                            (#{scan 21951}#
                                              #{body 22459}#
                                              #{r 22099}#
                                              #{w 22411}#
                                              #{s 22412}#
                                              'c&e
                                              '(compile load)
                                              #{mod 22413}#
                                              #{exps 22105}#)
                                            (if (if (eq? #{m 22102}# 'c)
                                                  #t
                                                  (eq? #{m 22102}# 'c&e))
                                              (#{scan 21951}#
                                                #{body 22459}#
                                                #{r 22099}#
                                                #{w 22411}#
                                                #{s 22412}#
                                                'c
                                                '(load)
                                                #{mod 22413}#
                                                #{exps 22105}#)
                                              #{exps 22105}#))
                                          (if (let ((#{t 22480}#
                                                      (memq 'compile
                                                            #{when-list 22458}#)))
                                                (if #{t 22480}#
                                                  #{t 22480}#
                                                  (let ((#{t 22482}#
                                                          (memq 'expand
                                                                #{when-list 22458}#)))
                                                    (if #{t 22482}#
                                                      #{t 22482}#
                                                      (if (eq? #{m 22102}#
                                                               'c&e)
                                                        (memq 'eval
                                                              #{when-list 22458}#)
                                                        #f)))))
                                            (begin
                                              (let ((#{x 22487}#
                                                      (#{chi-top-sequence 4369}#
                                                        #{body 22459}#
                                                        #{r 22099}#
                                                        #{w 22411}#
                                                        #{s 22412}#
                                                        'e
                                                        '(eval)
                                                        #{mod 22413}#)))
                                                (primitive-eval #{x 22487}#))
                                              #{exps 22105}#)
                                            #{exps 22105}#)))))
                                  #{tmp 22451}#)
                                (syntax-violation
                                  #f
                                  "source expression failed to match any pattern"
                                  #{e 22410}#)))
                            (if (eqv? #{type 22408}# 'define-syntax-form)
                              (let ((#{n 22498}#
                                      (#{id-var-name 4360}#
                                        #{value 22409}#
                                        #{w 22411}#))
                                    (#{r 22499}#
                                      (#{macros-only-env 4337}# #{r 22099}#)))
                                (if (eqv? #{m 22102}# 'c)
                                  (if (memq 'compile #{esew 22103}#)
                                    (let ((#{e 22503}#
                                            (#{chi-install-global 4370}#
                                              #{n 22498}#
                                              (#{chi 4373}#
                                                #{e 22410}#
                                                #{r 22499}#
                                                #{w 22411}#
                                                #{mod 22413}#))))
                                      (begin
                                        (#{top-level-eval-hook 4300}#
                                          #{e 22503}#
                                          #{mod 22413}#)
                                        (if (memq 'load #{esew 22103}#)
                                          (cons #{e 22503}# #{exps 22105}#)
                                          #{exps 22105}#)))
                                    (if (memq 'load #{esew 22103}#)
                                      (cons (#{chi-install-global 4370}#
                                              #{n 22498}#
                                              (#{chi 4373}#
                                                #{e 22410}#
                                                #{r 22499}#
                                                #{w 22411}#
                                                #{mod 22413}#))
                                            #{exps 22105}#)
                                      #{exps 22105}#))
                                  (if (eqv? #{m 22102}# 'c&e)
                                    (let ((#{e 22949}#
                                            (#{chi-install-global 4370}#
                                              #{n 22498}#
                                              (#{chi 4373}#
                                                #{e 22410}#
                                                #{r 22499}#
                                                #{w 22411}#
                                                #{mod 22413}#))))
                                      (begin
                                        (#{top-level-eval-hook 4300}#
                                          #{e 22949}#
                                          #{mod 22413}#)
                                        (cons #{e 22949}# #{exps 22105}#)))
                                    (begin
                                      (if (memq 'eval #{esew 22103}#)
                                        (#{top-level-eval-hook 4300}#
                                          (#{chi-install-global 4370}#
                                            #{n 22498}#
                                            (#{chi 4373}#
                                              #{e 22410}#
                                              #{r 22499}#
                                              #{w 22411}#
                                              #{mod 22413}#))
                                          #{mod 22413}#))
                                      #{exps 22105}#))))
                              (if (eqv? #{type 22408}# 'define-form)
                                (let ((#{n 23599}#
                                        (#{id-var-name 4360}#
                                          #{value 22409}#
                                          #{w 22411}#)))
                                  (let ((#{type 23600}#
                                          (car (let ((#{t 24602}#
                                                       (assq #{n 23599}#
                                                             #{r 22099}#)))
                                                 (if #{t 24602}#
                                                   (cdr #{t 24602}#)
                                                   (if (symbol? #{n 23599}#)
                                                     (let ((#{t 24607}#
                                                             (begin
                                                               (if (if (not #{mod 22413}#)
                                                                     (current-module)
                                                                     #f)
                                                                 (warn "module system is booted, we should have a module"
                                                                       #{n 23599}#))
                                                               (let ((#{v 24644}#
                                                                       (module-variable
                                                                         (if #{mod 22413}#
                                                                           (resolve-module
                                                                             (cdr #{mod 22413}#))
                                                                           (current-module))
                                                                         #{n 23599}#)))
                                                                 (if #{v 24644}#
                                                                   (if (variable-bound?
                                                                         #{v 24644}#)
                                                                     (let ((#{val 24653}#
                                                                             (variable-ref
                                                                               #{v 24644}#)))
                                                                       (if (macro?
                                                                             #{val 24653}#)
                                                                         (if (macro-type
                                                                               #{val 24653}#)
                                                                           (cons (macro-type
                                                                                   #{val 24653}#)
                                                                                 (macro-binding
                                                                                   #{val 24653}#))
                                                                           #f)
                                                                         #f))
                                                                     #f)
                                                                   #f)))))
                                                       (if #{t 24607}#
                                                         #{t 24607}#
                                                         '(global)))
                                                     '(displaced-lexical)))))))
                                    (if (let ((#{t 23634}# #{type 23600}#))
                                          (if (eqv? #{t 23634}# 'global)
                                            #t
                                            (if (eqv? #{t 23634}# 'core)
                                              #t
                                              (if (eqv? #{t 23634}# 'macro)
                                                #t
                                                (eqv? #{t 23634}#
                                                      'module-ref)))))
                                      (begin
                                        (if (if (if (eq? #{m 22102}# 'c)
                                                  #t
                                                  (eq? #{m 22102}# 'c&e))
                                              (if (not (module-local-variable
                                                         (current-module)
                                                         #{n 23599}#))
                                                (current-module)
                                                #f)
                                              #f)
                                          (let ((#{old 23798}#
                                                  (module-variable
                                                    (current-module)
                                                    #{n 23599}#)))
                                            (if (if (variable? #{old 23798}#)
                                                  (variable-bound?
                                                    #{old 23798}#)
                                                  #f)
                                              (module-define!
                                                (current-module)
                                                #{n 23599}#
                                                (variable-ref #{old 23798}#))
                                              (module-add!
                                                (current-module)
                                                #{n 23599}#
                                                (make-undefined-variable)))))
                                        (cons (if (eq? #{m 22102}# 'c&e)
                                                (let ((#{x 23800}#
                                                        (#{build-global-definition 4315}#
                                                          #{s 22412}#
                                                          #{n 23599}#
                                                          (#{chi 4373}#
                                                            #{e 22410}#
                                                            #{r 22099}#
                                                            #{w 22411}#
                                                            #{mod 22413}#))))
                                                  (begin
                                                    (#{top-level-eval-hook 4300}#
                                                      #{x 23800}#
                                                      #{mod 22413}#)
                                                    #{x 23800}#))
                                                (lambda ()
                                                  (#{build-global-definition 4315}#
                                                    #{s 22412}#
                                                    #{n 23599}#
                                                    (#{chi 4373}#
                                                      #{e 22410}#
                                                      #{r 22099}#
                                                      #{w 22411}#
                                                      #{mod 22413}#))))
                                              #{exps 22105}#))
                                      (if (let ((#{t 24337}# #{type 23600}#))
                                            (eqv? #{t 24337}#
                                                  'displaced-lexical))
                                        (syntax-violation
                                          #f
                                          "identifier out of context"
                                          #{e 22410}#
                                          (if (if (null? (car #{w 22411}#))
                                                (null? (cdr #{w 22411}#))
                                                #f)
                                            #{value 22409}#
                                            (if (if (vector? #{value 22409}#)
                                                  (if (= (vector-length
                                                           #{value 22409}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{value 22409}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (let ((#{expression 24429}#
                                                      (vector-ref
                                                        #{value 22409}#
                                                        1))
                                                    (#{wrap 24430}#
                                                      (let ((#{w2 24440}#
                                                              (vector-ref
                                                                #{value 22409}#
                                                                2)))
                                                        (let ((#{m1 24441}#
                                                                (car #{w 22411}#))
                                                              (#{s1 24442}#
                                                                (cdr #{w 22411}#)))
                                                          (if (null? #{m1 24441}#)
                                                            (if (null? #{s1 24442}#)
                                                              #{w2 24440}#
                                                              (cons (car #{w2 24440}#)
                                                                    (let ((#{m2 24459}#
                                                                            (cdr #{w2 24440}#)))
                                                                      (if (null? #{m2 24459}#)
                                                                        #{s1 24442}#
                                                                        (append
                                                                          #{s1 24442}#
                                                                          #{m2 24459}#)))))
                                                            (cons (let ((#{m2 24467}#
                                                                          (car #{w2 24440}#)))
                                                                    (if (null? #{m2 24467}#)
                                                                      #{m1 24441}#
                                                                      (append
                                                                        #{m1 24441}#
                                                                        #{m2 24467}#)))
                                                                  (let ((#{m2 24475}#
                                                                          (cdr #{w2 24440}#)))
                                                                    (if (null? #{m2 24475}#)
                                                                      #{s1 24442}#
                                                                      (append
                                                                        #{s1 24442}#
                                                                        #{m2 24475}#))))))))
                                                    (#{module 24431}#
                                                      (vector-ref
                                                        #{value 22409}#
                                                        3)))
                                                (vector
                                                  'syntax-object
                                                  #{expression 24429}#
                                                  #{wrap 24430}#
                                                  #{module 24431}#))
                                              (if (null? #{value 22409}#)
                                                #{value 22409}#
                                                (vector
                                                  'syntax-object
                                                  #{value 22409}#
                                                  #{w 22411}#
                                                  #{mod 22413}#)))))
                                        (syntax-violation
                                          #f
                                          "cannot define keyword at top level"
                                          #{e 22410}#
                                          (if (if (null? (car #{w 22411}#))
                                                (null? (cdr #{w 22411}#))
                                                #f)
                                            #{value 22409}#
                                            (if (if (vector? #{value 22409}#)
                                                  (if (= (vector-length
                                                           #{value 22409}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{value 22409}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (let ((#{expression 24527}#
                                                      (vector-ref
                                                        #{value 22409}#
                                                        1))
                                                    (#{wrap 24528}#
                                                      (let ((#{w2 24538}#
                                                              (vector-ref
                                                                #{value 22409}#
                                                                2)))
                                                        (let ((#{m1 24539}#
                                                                (car #{w 22411}#))
                                                              (#{s1 24540}#
                                                                (cdr #{w 22411}#)))
                                                          (if (null? #{m1 24539}#)
                                                            (if (null? #{s1 24540}#)
                                                              #{w2 24538}#
                                                              (cons (car #{w2 24538}#)
                                                                    (let ((#{m2 24557}#
                                                                            (cdr #{w2 24538}#)))
                                                                      (if (null? #{m2 24557}#)
                                                                        #{s1 24540}#
                                                                        (append
                                                                          #{s1 24540}#
                                                                          #{m2 24557}#)))))
                                                            (cons (let ((#{m2 24565}#
                                                                          (car #{w2 24538}#)))
                                                                    (if (null? #{m2 24565}#)
                                                                      #{m1 24539}#
                                                                      (append
                                                                        #{m1 24539}#
                                                                        #{m2 24565}#)))
                                                                  (let ((#{m2 24573}#
                                                                          (cdr #{w2 24538}#)))
                                                                    (if (null? #{m2 24573}#)
                                                                      #{s1 24540}#
                                                                      (append
                                                                        #{s1 24540}#
                                                                        #{m2 24573}#))))))))
                                                    (#{module 24529}#
                                                      (vector-ref
                                                        #{value 22409}#
                                                        3)))
                                                (vector
                                                  'syntax-object
                                                  #{expression 24527}#
                                                  #{wrap 24528}#
                                                  #{module 24529}#))
                                              (if (null? #{value 22409}#)
                                                #{value 22409}#
                                                (vector
                                                  'syntax-object
                                                  #{value 22409}#
                                                  #{w 22411}#
                                                  #{mod 22413}#)))))))))
                                (cons (if (eq? #{m 22102}# 'c&e)
                                        (let ((#{x 24664}#
                                                (#{chi-expr 4374}#
                                                  #{type 22408}#
                                                  #{value 22409}#
                                                  #{e 22410}#
                                                  #{r 22099}#
                                                  #{w 22411}#
                                                  #{s 22412}#
                                                  #{mod 22413}#)))
                                          (begin
                                            (primitive-eval #{x 24664}#)
                                            #{x 24664}#))
                                        (lambda ()
                                          (#{chi-expr 4374}#
                                            #{type 22408}#
                                            #{value 22409}#
                                            #{e 22410}#
                                            #{r 22099}#
                                            #{w 22411}#
                                            #{s 22412}#
                                            #{mod 22413}#)))
                                      #{exps 22105}#)))))))))))))
         (let ((#{exps 21952}#
                 (#{scan 21951}#
                   #{body 21944}#
                   #{r 21945}#
                   #{w 21946}#
                   #{s 21947}#
                   #{m 21948}#
                   #{esew 21949}#
                   #{mod 21950}#
                   '())))
           (if (null? #{exps 21952}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 0)
               #{s 21947}#)
             (#{build-sequence 4322}#
               #{s 21947}#
               (letrec*
                 ((#{lp 21998}#
                    (lambda (#{in 22094}# #{out 22095}#)
                      (if (null? #{in 22094}#)
                        #{out 22095}#
                        (let ((#{e 22096}# (car #{in 22094}#)))
                          (#{lp 21998}#
                            (cdr #{in 22094}#)
                            (cons (if (procedure? #{e 22096}#)
                                    (#{e 22096}#)
                                    #{e 22096}#)
                                  #{out 22095}#)))))))
                 (#{lp 21998}# #{exps 21952}# '()))))))))
   (#{chi-install-global 4370}#
     (lambda (#{name 24673}# #{e 24674}#)
       (let ((#{exp 24680}#
               (let ((#{args 24691}#
                       (list (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               #{name 24673}#)
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               'macro)
                             #{e 24674}#)))
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 12)
                   #f
                   'make-syntax-transformer
                   #{args 24691}#))))
         (begin
           (if (if (struct? #{exp 24680}#)
                 (eq? (struct-vtable #{exp 24680}#)
                      (vector-ref %expanded-vtables 14))
                 #f)
             (let ((#{meta 24718}# (struct-ref #{exp 24680}# 1)))
               (if (not (assq 'name #{meta 24718}#))
                 (let ((#{v 24725}#
                         (cons (cons 'name #{name 24673}#) #{meta 24718}#)))
                   (struct-set! #{exp 24680}# 1 #{v 24725}#)))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 9)
             #f
             #{name 24673}#
             #{exp 24680}#)))))
   (#{chi-when-list 4371}#
     (lambda (#{e 24736}# #{when-list 24737}# #{w 24738}#)
       (letrec*
         ((#{f 24739}#
            (lambda (#{when-list 24941}# #{situations 24942}#)
              (if (null? #{when-list 24941}#)
                #{situations 24942}#
                (#{f 24739}#
                  (cdr #{when-list 24941}#)
                  (cons (let ((#{x 24943}#
                                (syntax->datum (car #{when-list 24941}#))))
                          (if (if (eq? #{x 24943}# 'compile)
                                #t
                                (if (eq? #{x 24943}# 'load)
                                  #t
                                  (if (eq? #{x 24943}# 'eval)
                                    #t
                                    (eq? #{x 24943}# 'expand))))
                            #{x 24943}#
                            (syntax-violation
                              'eval-when
                              "invalid situation"
                              #{e 24736}#
                              (let ((#{x 24962}# (car #{when-list 24941}#)))
                                (if (if (null? (car #{w 24738}#))
                                      (null? (cdr #{w 24738}#))
                                      #f)
                                  #{x 24962}#
                                  (if (if (vector? #{x 24962}#)
                                        (if (= (vector-length #{x 24962}#) 4)
                                          (eq? (vector-ref #{x 24962}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (let ((#{expression 24980}#
                                            (vector-ref #{x 24962}# 1))
                                          (#{wrap 24981}#
                                            (let ((#{w2 24989}#
                                                    (vector-ref
                                                      #{x 24962}#
                                                      2)))
                                              (let ((#{m1 24990}#
                                                      (car #{w 24738}#))
                                                    (#{s1 24991}#
                                                      (cdr #{w 24738}#)))
                                                (if (null? #{m1 24990}#)
                                                  (if (null? #{s1 24991}#)
                                                    #{w2 24989}#
                                                    (cons (car #{w2 24989}#)
                                                          (let ((#{m2 25006}#
                                                                  (cdr #{w2 24989}#)))
                                                            (if (null? #{m2 25006}#)
                                                              #{s1 24991}#
                                                              (append
                                                                #{s1 24991}#
                                                                #{m2 25006}#)))))
                                                  (cons (let ((#{m2 25014}#
                                                                (car #{w2 24989}#)))
                                                          (if (null? #{m2 25014}#)
                                                            #{m1 24990}#
                                                            (append
                                                              #{m1 24990}#
                                                              #{m2 25014}#)))
                                                        (let ((#{m2 25022}#
                                                                (cdr #{w2 24989}#)))
                                                          (if (null? #{m2 25022}#)
                                                            #{s1 24991}#
                                                            (append
                                                              #{s1 24991}#
                                                              #{m2 25022}#))))))))
                                          (#{module 24982}#
                                            (vector-ref #{x 24962}# 3)))
                                      (vector
                                        'syntax-object
                                        #{expression 24980}#
                                        #{wrap 24981}#
                                        #{module 24982}#))
                                    (if (null? #{x 24962}#)
                                      #{x 24962}#
                                      (vector
                                        'syntax-object
                                        #{x 24962}#
                                        #{w 24738}#
                                        #f))))))))
                        #{situations 24942}#))))))
         (#{f 24739}# #{when-list 24737}# '()))))
   (#{syntax-type 4372}#
     (lambda (#{e 25037}#
              #{r 25038}#
              #{w 25039}#
              #{s 25040}#
              #{rib 25041}#
              #{mod 25042}#
              #{for-car? 25043}#)
       (if (symbol? #{e 25037}#)
         (let ((#{n 25044}#
                 (#{id-var-name 4360}# #{e 25037}# #{w 25039}#)))
           (let ((#{b 25045}#
                   (let ((#{t 25620}# (assq #{n 25044}# #{r 25038}#)))
                     (if #{t 25620}#
                       (cdr #{t 25620}#)
                       (if (symbol? #{n 25044}#)
                         (let ((#{t 25625}#
                                 (begin
                                   (if (if (not #{mod 25042}#)
                                         (current-module)
                                         #f)
                                     (warn "module system is booted, we should have a module"
                                           #{n 25044}#))
                                   (let ((#{v 25662}#
                                           (module-variable
                                             (if #{mod 25042}#
                                               (resolve-module
                                                 (cdr #{mod 25042}#))
                                               (current-module))
                                             #{n 25044}#)))
                                     (if #{v 25662}#
                                       (if (variable-bound? #{v 25662}#)
                                         (let ((#{val 25671}#
                                                 (variable-ref #{v 25662}#)))
                                           (if (macro? #{val 25671}#)
                                             (if (macro-type #{val 25671}#)
                                               (cons (macro-type #{val 25671}#)
                                                     (macro-binding
                                                       #{val 25671}#))
                                               #f)
                                             #f))
                                         #f)
                                       #f)))))
                           (if #{t 25625}# #{t 25625}# '(global)))
                         '(displaced-lexical))))))
             (let ((#{type 25046}# (car #{b 25045}#)))
               (if (let ((#{t 25080}# #{type 25046}#))
                     (eqv? #{t 25080}# 'lexical))
                 (values
                   #{type 25046}#
                   (cdr #{b 25045}#)
                   #{e 25037}#
                   #{w 25039}#
                   #{s 25040}#
                   #{mod 25042}#)
                 (if (let ((#{t 25237}# #{type 25046}#))
                       (eqv? #{t 25237}# 'global))
                   (values
                     #{type 25046}#
                     #{n 25044}#
                     #{e 25037}#
                     #{w 25039}#
                     #{s 25040}#
                     #{mod 25042}#)
                   (if (let ((#{t 25363}# #{type 25046}#))
                         (eqv? #{t 25363}# 'macro))
                     (if #{for-car? 25043}#
                       (values
                         #{type 25046}#
                         (cdr #{b 25045}#)
                         #{e 25037}#
                         #{w 25039}#
                         #{s 25040}#
                         #{mod 25042}#)
                       (#{syntax-type 4372}#
                         (#{chi-macro 4376}#
                           (cdr #{b 25045}#)
                           #{e 25037}#
                           #{r 25038}#
                           #{w 25039}#
                           #{s 25040}#
                           #{rib 25041}#
                           #{mod 25042}#)
                         #{r 25038}#
                         '(())
                         #{s 25040}#
                         #{rib 25041}#
                         #{mod 25042}#
                         #f))
                     (values
                       #{type 25046}#
                       (cdr #{b 25045}#)
                       #{e 25037}#
                       #{w 25039}#
                       #{s 25040}#
                       #{mod 25042}#)))))))
         (if (pair? #{e 25037}#)
           (let ((#{first 25682}# (car #{e 25037}#)))
             (call-with-values
               (lambda ()
                 (#{syntax-type 4372}#
                   #{first 25682}#
                   #{r 25038}#
                   #{w 25039}#
                   #{s 25040}#
                   #{rib 25041}#
                   #{mod 25042}#
                   #t))
               (lambda (#{ftype 25684}#
                        #{fval 25685}#
                        #{fe 25686}#
                        #{fw 25687}#
                        #{fs 25688}#
                        #{fmod 25689}#)
                 (if (eqv? #{ftype 25684}# 'lexical)
                   (values
                     'lexical-call
                     #{fval 25685}#
                     #{e 25037}#
                     #{w 25039}#
                     #{s 25040}#
                     #{mod 25042}#)
                   (if (eqv? #{ftype 25684}# 'global)
                     (values
                       'global-call
                       (vector
                         'syntax-object
                         #{fval 25685}#
                         #{w 25039}#
                         #{fmod 25689}#)
                       #{e 25037}#
                       #{w 25039}#
                       #{s 25040}#
                       #{mod 25042}#)
                     (if (eqv? #{ftype 25684}# 'macro)
                       (#{syntax-type 4372}#
                         (#{chi-macro 4376}#
                           #{fval 25685}#
                           #{e 25037}#
                           #{r 25038}#
                           #{w 25039}#
                           #{s 25040}#
                           #{rib 25041}#
                           #{mod 25042}#)
                         #{r 25038}#
                         '(())
                         #{s 25040}#
                         #{rib 25041}#
                         #{mod 25042}#
                         #{for-car? 25043}#)
                       (if (eqv? #{ftype 25684}# 'module-ref)
                         (call-with-values
                           (lambda ()
                             (#{fval 25685}#
                               #{e 25037}#
                               #{r 25038}#
                               #{w 25039}#))
                           (lambda (#{e 25710}#
                                    #{r 25711}#
                                    #{w 25712}#
                                    #{s 25713}#
                                    #{mod 25714}#)
                             (#{syntax-type 4372}#
                               #{e 25710}#
                               #{r 25711}#
                               #{w 25712}#
                               #{s 25713}#
                               #{rib 25041}#
                               #{mod 25714}#
                               #{for-car? 25043}#)))
                         (if (eqv? #{ftype 25684}# 'core)
                           (values
                             'core-form
                             #{fval 25685}#
                             #{e 25037}#
                             #{w 25039}#
                             #{s 25040}#
                             #{mod 25042}#)
                           (if (eqv? #{ftype 25684}# 'local-syntax)
                             (values
                               'local-syntax-form
                               #{fval 25685}#
                               #{e 25037}#
                               #{w 25039}#
                               #{s 25040}#
                               #{mod 25042}#)
                             (if (eqv? #{ftype 25684}# 'begin)
                               (values
                                 'begin-form
                                 #f
                                 #{e 25037}#
                                 #{w 25039}#
                                 #{s 25040}#
                                 #{mod 25042}#)
                               (if (eqv? #{ftype 25684}# 'eval-when)
                                 (values
                                   'eval-when-form
                                   #f
                                   #{e 25037}#
                                   #{w 25039}#
                                   #{s 25040}#
                                   #{mod 25042}#)
                                 (if (eqv? #{ftype 25684}# 'define)
                                   (let ((#{tmp 25731}#
                                           ($sc-dispatch
                                             #{e 25037}#
                                             '(_ any any))))
                                     (if (if #{tmp 25731}#
                                           (@apply
                                             (lambda (#{name 25735}#
                                                      #{val 25736}#)
                                               (if (symbol? #{name 25735}#)
                                                 #t
                                                 (if (if (vector?
                                                           #{name 25735}#)
                                                       (if (= (vector-length
                                                                #{name 25735}#)
                                                              4)
                                                         (eq? (vector-ref
                                                                #{name 25735}#
                                                                0)
                                                              'syntax-object)
                                                         #f)
                                                       #f)
                                                   (symbol?
                                                     (vector-ref
                                                       #{name 25735}#
                                                       1))
                                                   #f)))
                                             #{tmp 25731}#)
                                           #f)
                                       (@apply
                                         (lambda (#{name 25763}# #{val 25764}#)
                                           (values
                                             'define-form
                                             #{name 25763}#
                                             #{val 25764}#
                                             #{w 25039}#
                                             #{s 25040}#
                                             #{mod 25042}#))
                                         #{tmp 25731}#)
                                       (let ((#{tmp 25765}#
                                               ($sc-dispatch
                                                 #{e 25037}#
                                                 '(_ (any . any)
                                                     any
                                                     .
                                                     each-any))))
                                         (if (if #{tmp 25765}#
                                               (@apply
                                                 (lambda (#{name 25769}#
                                                          #{args 25770}#
                                                          #{e1 25771}#
                                                          #{e2 25772}#)
                                                   (if (if (symbol?
                                                             #{name 25769}#)
                                                         #t
                                                         (if (if (vector?
                                                                   #{name 25769}#)
                                                               (if (= (vector-length
                                                                        #{name 25769}#)
                                                                      4)
                                                                 (eq? (vector-ref
                                                                        #{name 25769}#
                                                                        0)
                                                                      'syntax-object)
                                                                 #f)
                                                               #f)
                                                           (symbol?
                                                             (vector-ref
                                                               #{name 25769}#
                                                               1))
                                                           #f))
                                                     (#{valid-bound-ids? 4363}#
                                                       (#{lambda-var-list 4388}#
                                                         #{args 25770}#))
                                                     #f))
                                                 #{tmp 25765}#)
                                               #f)
                                           (@apply
                                             (lambda (#{name 26253}#
                                                      #{args 26254}#
                                                      #{e1 26255}#
                                                      #{e2 26256}#)
                                               (values
                                                 'define-form
                                                 (if (if (null? (car #{w 25039}#))
                                                       (null? (cdr #{w 25039}#))
                                                       #f)
                                                   #{name 26253}#
                                                   (if (if (vector?
                                                             #{name 26253}#)
                                                         (if (= (vector-length
                                                                  #{name 26253}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{name 26253}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (let ((#{expression 26286}#
                                                             (vector-ref
                                                               #{name 26253}#
                                                               1))
                                                           (#{wrap 26287}#
                                                             (let ((#{w2 26297}#
                                                                     (vector-ref
                                                                       #{name 26253}#
                                                                       2)))
                                                               (let ((#{m1 26298}#
                                                                       (car #{w 25039}#))
                                                                     (#{s1 26299}#
                                                                       (cdr #{w 25039}#)))
                                                                 (if (null? #{m1 26298}#)
                                                                   (if (null? #{s1 26299}#)
                                                                     #{w2 26297}#
                                                                     (cons (car #{w2 26297}#)
                                                                           (let ((#{m2 26316}#
                                                                                   (cdr #{w2 26297}#)))
                                                                             (if (null? #{m2 26316}#)
                                                                               #{s1 26299}#
                                                                               (append
                                                                                 #{s1 26299}#
                                                                                 #{m2 26316}#)))))
                                                                   (cons (let ((#{m2 26324}#
                                                                                 (car #{w2 26297}#)))
                                                                           (if (null? #{m2 26324}#)
                                                                             #{m1 26298}#
                                                                             (append
                                                                               #{m1 26298}#
                                                                               #{m2 26324}#)))
                                                                         (let ((#{m2 26332}#
                                                                                 (cdr #{w2 26297}#)))
                                                                           (if (null? #{m2 26332}#)
                                                                             #{s1 26299}#
                                                                             (append
                                                                               #{s1 26299}#
                                                                               #{m2 26332}#))))))))
                                                           (#{module 26288}#
                                                             (vector-ref
                                                               #{name 26253}#
                                                               3)))
                                                       (vector
                                                         'syntax-object
                                                         #{expression 26286}#
                                                         #{wrap 26287}#
                                                         #{module 26288}#))
                                                     (if (null? #{name 26253}#)
                                                       #{name 26253}#
                                                       (vector
                                                         'syntax-object
                                                         #{name 26253}#
                                                         #{w 25039}#
                                                         #{mod 25042}#))))
                                                 (let ((#{e 26358}#
                                                         (cons '#(syntax-object
                                                                  lambda
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(name
                                                                       args
                                                                       e1
                                                                       e2)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i1886"
                                                                       "i1887"
                                                                       "i1888"
                                                                       "i1889"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(ftype
                                                                       fval
                                                                       fe
                                                                       fw
                                                                       fs
                                                                       fmod)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i1839"
                                                                       "i1840"
                                                                       "i1841"
                                                                       "i1842"
                                                                       "i1843"
                                                                       "i1844"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(first)
                                                                     #((top))
                                                                     #("i1831"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(e
                                                                       r
                                                                       w
                                                                       s
                                                                       rib
                                                                       mod
                                                                       for-car?)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i1803"
                                                                       "i1804"
                                                                       "i1805"
                                                                       "i1806"
                                                                       "i1807"
                                                                       "i1808"
                                                                       "i1809"))
                                                                   #(ribcage
                                                                     (lambda-var-list
                                                                       gen-var
                                                                       strip
                                                                       chi-lambda-case
                                                                       lambda*-formals
                                                                       chi-simple-lambda
                                                                       lambda-formals
                                                                       ellipsis?
                                                                       chi-void
                                                                       eval-local-transformer
                                                                       chi-local-syntax
                                                                       chi-body
                                                                       chi-macro
                                                                       chi-call
                                                                       chi-expr
                                                                       chi
                                                                       syntax-type
                                                                       chi-when-list
                                                                       chi-install-global
                                                                       chi-top-sequence
                                                                       chi-sequence
                                                                       source-wrap
                                                                       wrap
                                                                       bound-id-member?
                                                                       distinct-bound-ids?
                                                                       valid-bound-ids?
                                                                       bound-id=?
                                                                       free-id=?
                                                                       id-var-name
                                                                       same-marks?
                                                                       join-marks
                                                                       join-wraps
                                                                       smart-append
                                                                       make-binding-wrap
                                                                       extend-ribcage!
                                                                       make-empty-ribcage
                                                                       new-mark
                                                                       anti-mark
                                                                       the-anti-mark
                                                                       top-marked?
                                                                       top-wrap
                                                                       empty-wrap
                                                                       set-ribcage-labels!
                                                                       set-ribcage-marks!
                                                                       set-ribcage-symnames!
                                                                       ribcage-labels
                                                                       ribcage-marks
                                                                       ribcage-symnames
                                                                       ribcage?
                                                                       make-ribcage
                                                                       gen-labels
                                                                       gen-label
                                                                       make-rename
                                                                       rename-marks
                                                                       rename-new
                                                                       rename-old
                                                                       subst-rename?
                                                                       wrap-subst
                                                                       wrap-marks
                                                                       make-wrap
                                                                       id-sym-name&marks
                                                                       id-sym-name
                                                                       id?
                                                                       nonsymbol-id?
                                                                       global-extend
                                                                       lookup
                                                                       macros-only-env
                                                                       extend-var-env
                                                                       extend-env
                                                                       null-env
                                                                       binding-value
                                                                       binding-type
                                                                       make-binding
                                                                       arg-check
                                                                       source-annotation
                                                                       no-source
                                                                       set-syntax-object-module!
                                                                       set-syntax-object-wrap!
                                                                       set-syntax-object-expression!
                                                                       syntax-object-module
                                                                       syntax-object-wrap
                                                                       syntax-object-expression
                                                                       syntax-object?
                                                                       make-syntax-object
                                                                       build-lexical-var
                                                                       build-letrec
                                                                       build-named-let
                                                                       build-let
                                                                       build-sequence
                                                                       build-data
                                                                       build-primref
                                                                       build-primcall
                                                                       build-lambda-case
                                                                       build-case-lambda
                                                                       build-simple-lambda
                                                                       build-global-definition
                                                                       build-global-assignment
                                                                       build-global-reference
                                                                       analyze-variable
                                                                       build-lexical-assignment
                                                                       build-lexical-reference
                                                                       build-dynlet
                                                                       build-conditional
                                                                       build-call
                                                                       build-void
                                                                       maybe-name-value!
                                                                       decorate-source
                                                                       get-global-definition-hook
                                                                       put-global-definition-hook
                                                                       gensym-hook
                                                                       local-eval-hook
                                                                       top-level-eval-hook
                                                                       fx<
                                                                       fx=
                                                                       fx-
                                                                       fx+
                                                                       set-lambda-meta!
                                                                       lambda-meta
                                                                       lambda?
                                                                       make-dynlet
                                                                       make-letrec
                                                                       make-let
                                                                       make-lambda-case
                                                                       make-lambda
                                                                       make-seq
                                                                       make-primcall
                                                                       make-call
                                                                       make-conditional
                                                                       make-toplevel-define
                                                                       make-toplevel-set
                                                                       make-toplevel-ref
                                                                       make-module-set
                                                                       make-module-ref
                                                                       make-lexical-set
                                                                       make-lexical-ref
                                                                       make-primitive-ref
                                                                       make-const
                                                                       make-void)
                                                                     ((top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top))
                                                                     ("i471"
                                                                      "i469"
                                                                      "i467"
                                                                      "i465"
                                                                      "i463"
                                                                      "i461"
                                                                      "i459"
                                                                      "i457"
                                                                      "i455"
                                                                      "i453"
                                                                      "i451"
                                                                      "i449"
                                                                      "i447"
                                                                      "i445"
                                                                      "i443"
                                                                      "i441"
                                                                      "i439"
                                                                      "i437"
                                                                      "i435"
                                                                      "i433"
                                                                      "i431"
                                                                      "i429"
                                                                      "i427"
                                                                      "i425"
                                                                      "i423"
                                                                      "i421"
                                                                      "i419"
                                                                      "i417"
                                                                      "i415"
                                                                      "i413"
                                                                      "i411"
                                                                      "i409"
                                                                      "i407"
                                                                      "i405"
                                                                      "i403"
                                                                      "i402"
                                                                      "i400"
                                                                      "i397"
                                                                      "i396"
                                                                      "i395"
                                                                      "i393"
                                                                      "i392"
                                                                      "i390"
                                                                      "i388"
                                                                      "i386"
                                                                      "i384"
                                                                      "i382"
                                                                      "i380"
                                                                      "i378"
                                                                      "i376"
                                                                      "i373"
                                                                      "i371"
                                                                      "i370"
                                                                      "i368"
                                                                      "i366"
                                                                      "i364"
                                                                      "i362"
                                                                      "i361"
                                                                      "i360"
                                                                      "i359"
                                                                      "i357"
                                                                      "i356"
                                                                      "i353"
                                                                      "i351"
                                                                      "i349"
                                                                      "i347"
                                                                      "i345"
                                                                      "i343"
                                                                      "i341"
                                                                      "i340"
                                                                      "i339"
                                                                      "i337"
                                                                      "i335"
                                                                      "i334"
                                                                      "i331"
                                                                      "i330"
                                                                      "i328"
                                                                      "i326"
                                                                      "i324"
                                                                      "i322"
                                                                      "i320"
                                                                      "i318"
                                                                      "i316"
                                                                      "i314"
                                                                      "i312"
                                                                      "i309"
                                                                      "i307"
                                                                      "i305"
                                                                      "i303"
                                                                      "i301"
                                                                      "i299"
                                                                      "i297"
                                                                      "i295"
                                                                      "i293"
                                                                      "i291"
                                                                      "i289"
                                                                      "i287"
                                                                      "i285"
                                                                      "i283"
                                                                      "i281"
                                                                      "i279"
                                                                      "i277"
                                                                      "i275"
                                                                      "i273"
                                                                      "i271"
                                                                      "i269"
                                                                      "i267"
                                                                      "i265"
                                                                      "i263"
                                                                      "i262"
                                                                      "i259"
                                                                      "i257"
                                                                      "i256"
                                                                      "i255"
                                                                      "i254"
                                                                      "i253"
                                                                      "i251"
                                                                      "i249"
                                                                      "i247"
                                                                      "i244"
                                                                      "i242"
                                                                      "i240"
                                                                      "i238"
                                                                      "i236"
                                                                      "i234"
                                                                      "i232"
                                                                      "i230"
                                                                      "i228"
                                                                      "i226"
                                                                      "i224"
                                                                      "i222"
                                                                      "i220"
                                                                      "i218"
                                                                      "i216"
                                                                      "i214"
                                                                      "i212"
                                                                      "i210"
                                                                      "i208"))
                                                                   #(ribcage
                                                                     (define-structure
                                                                       define-expansion-accessors
                                                                       define-expansion-constructors)
                                                                     ((top)
                                                                      (top)
                                                                      (top))
                                                                     ("i46"
                                                                      "i45"
                                                                      "i44")))
                                                                  (hygiene
                                                                    guile))
                                                               (let ((#{x 26362}#
                                                                       (cons #{args 26254}#
                                                                             (cons #{e1 26255}#
                                                                                   #{e2 26256}#))))
                                                                 (if (if (null? (car #{w 25039}#))
                                                                       (null? (cdr #{w 25039}#))
                                                                       #f)
                                                                   #{x 26362}#
                                                                   (if (if (vector?
                                                                             #{x 26362}#)
                                                                         (if (= (vector-length
                                                                                  #{x 26362}#)
                                                                                4)
                                                                           (eq? (vector-ref
                                                                                  #{x 26362}#
                                                                                  0)
                                                                                'syntax-object)
                                                                           #f)
                                                                         #f)
                                                                     (let ((#{expression 26380}#
                                                                             (vector-ref
                                                                               #{x 26362}#
                                                                               1))
                                                                           (#{wrap 26381}#
                                                                             (let ((#{w2 26389}#
                                                                                     (vector-ref
                                                                                       #{x 26362}#
                                                                                       2)))
                                                                               (let ((#{m1 26390}#
                                                                                       (car #{w 25039}#))
                                                                                     (#{s1 26391}#
                                                                                       (cdr #{w 25039}#)))
                                                                                 (if (null? #{m1 26390}#)
                                                                                   (if (null? #{s1 26391}#)
                                                                                     #{w2 26389}#
                                                                                     (cons (car #{w2 26389}#)
                                                                                           (let ((#{m2 26406}#
                                                                                                   (cdr #{w2 26389}#)))
                                                                                             (if (null? #{m2 26406}#)
                                                                                               #{s1 26391}#
                                                                                               (append
                                                                                                 #{s1 26391}#
                                                                                                 #{m2 26406}#)))))
                                                                                   (cons (let ((#{m2 26414}#
                                                                                                 (car #{w2 26389}#)))
                                                                                           (if (null? #{m2 26414}#)
                                                                                             #{m1 26390}#
                                                                                             (append
                                                                                               #{m1 26390}#
                                                                                               #{m2 26414}#)))
                                                                                         (let ((#{m2 26422}#
                                                                                                 (cdr #{w2 26389}#)))
                                                                                           (if (null? #{m2 26422}#)
                                                                                             #{s1 26391}#
                                                                                             (append
                                                                                               #{s1 26391}#
                                                                                               #{m2 26422}#))))))))
                                                                           (#{module 26382}#
                                                                             (vector-ref
                                                                               #{x 26362}#
                                                                               3)))
                                                                       (vector
                                                                         'syntax-object
                                                                         #{expression 26380}#
                                                                         #{wrap 26381}#
                                                                         #{module 26382}#))
                                                                     (if (null? #{x 26362}#)
                                                                       #{x 26362}#
                                                                       (vector
                                                                         'syntax-object
                                                                         #{x 26362}#
                                                                         #{w 25039}#
                                                                         #{mod 25042}#))))))))
                                                   (begin
                                                     (if (if (pair? #{e 26358}#)
                                                           #{s 25040}#
                                                           #f)
                                                       (set-source-properties!
                                                         #{e 26358}#
                                                         #{s 25040}#))
                                                     #{e 26358}#))
                                                 '(())
                                                 #{s 25040}#
                                                 #{mod 25042}#))
                                             #{tmp 25765}#)
                                           (let ((#{tmp 26441}#
                                                   ($sc-dispatch
                                                     #{e 25037}#
                                                     '(_ any))))
                                             (if (if #{tmp 26441}#
                                                   (@apply
                                                     (lambda (#{name 26445}#)
                                                       (if (symbol?
                                                             #{name 26445}#)
                                                         #t
                                                         (if (if (vector?
                                                                   #{name 26445}#)
                                                               (if (= (vector-length
                                                                        #{name 26445}#)
                                                                      4)
                                                                 (eq? (vector-ref
                                                                        #{name 26445}#
                                                                        0)
                                                                      'syntax-object)
                                                                 #f)
                                                               #f)
                                                           (symbol?
                                                             (vector-ref
                                                               #{name 26445}#
                                                               1))
                                                           #f)))
                                                     #{tmp 26441}#)
                                                   #f)
                                               (@apply
                                                 (lambda (#{name 26472}#)
                                                   (values
                                                     'define-form
                                                     (if (if (null? (car #{w 25039}#))
                                                           (null? (cdr #{w 25039}#))
                                                           #f)
                                                       #{name 26472}#
                                                       (if (if (vector?
                                                                 #{name 26472}#)
                                                             (if (= (vector-length
                                                                      #{name 26472}#)
                                                                    4)
                                                               (eq? (vector-ref
                                                                      #{name 26472}#
                                                                      0)
                                                                    'syntax-object)
                                                               #f)
                                                             #f)
                                                         (let ((#{expression 26502}#
                                                                 (vector-ref
                                                                   #{name 26472}#
                                                                   1))
                                                               (#{wrap 26503}#
                                                                 (let ((#{w2 26513}#
                                                                         (vector-ref
                                                                           #{name 26472}#
                                                                           2)))
                                                                   (let ((#{m1 26514}#
                                                                           (car #{w 25039}#))
                                                                         (#{s1 26515}#
                                                                           (cdr #{w 25039}#)))
                                                                     (if (null? #{m1 26514}#)
                                                                       (if (null? #{s1 26515}#)
                                                                         #{w2 26513}#
                                                                         (cons (car #{w2 26513}#)
                                                                               (let ((#{m2 26532}#
                                                                                       (cdr #{w2 26513}#)))
                                                                                 (if (null? #{m2 26532}#)
                                                                                   #{s1 26515}#
                                                                                   (append
                                                                                     #{s1 26515}#
                                                                                     #{m2 26532}#)))))
                                                                       (cons (let ((#{m2 26540}#
                                                                                     (car #{w2 26513}#)))
                                                                               (if (null? #{m2 26540}#)
                                                                                 #{m1 26514}#
                                                                                 (append
                                                                                   #{m1 26514}#
                                                                                   #{m2 26540}#)))
                                                                             (let ((#{m2 26548}#
                                                                                     (cdr #{w2 26513}#)))
                                                                               (if (null? #{m2 26548}#)
                                                                                 #{s1 26515}#
                                                                                 (append
                                                                                   #{s1 26515}#
                                                                                   #{m2 26548}#))))))))
                                                               (#{module 26504}#
                                                                 (vector-ref
                                                                   #{name 26472}#
                                                                   3)))
                                                           (vector
                                                             'syntax-object
                                                             #{expression 26502}#
                                                             #{wrap 26503}#
                                                             #{module 26504}#))
                                                         (if (null? #{name 26472}#)
                                                           #{name 26472}#
                                                           (vector
                                                             'syntax-object
                                                             #{name 26472}#
                                                             #{w 25039}#
                                                             #{mod 25042}#))))
                                                     '(#(syntax-object
                                                         if
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i1899"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1839"
                                                              "i1840"
                                                              "i1841"
                                                              "i1842"
                                                              "i1843"
                                                              "i1844"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i1831"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1803"
                                                              "i1804"
                                                              "i1805"
                                                              "i1806"
                                                              "i1807"
                                                              "i1808"
                                                              "i1809"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              chi-lambda-case
                                                              lambda*-formals
                                                              chi-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              chi-void
                                                              eval-local-transformer
                                                              chi-local-syntax
                                                              chi-body
                                                              chi-macro
                                                              chi-call
                                                              chi-expr
                                                              chi
                                                              syntax-type
                                                              chi-when-list
                                                              chi-install-global
                                                              chi-top-sequence
                                                              chi-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-primcall
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-call
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-seq
                                                              make-primcall
                                                              make-call
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i471"
                                                             "i469"
                                                             "i467"
                                                             "i465"
                                                             "i463"
                                                             "i461"
                                                             "i459"
                                                             "i457"
                                                             "i455"
                                                             "i453"
                                                             "i451"
                                                             "i449"
                                                             "i447"
                                                             "i445"
                                                             "i443"
                                                             "i441"
                                                             "i439"
                                                             "i437"
                                                             "i435"
                                                             "i433"
                                                             "i431"
                                                             "i429"
                                                             "i427"
                                                             "i425"
                                                             "i423"
                                                             "i421"
                                                             "i419"
                                                             "i417"
                                                             "i415"
                                                             "i413"
                                                             "i411"
                                                             "i409"
                                                             "i407"
                                                             "i405"
                                                             "i403"
                                                             "i402"
                                                             "i400"
                                                             "i397"
                                                             "i396"
                                                             "i395"
                                                             "i393"
                                                             "i392"
                                                             "i390"
                                                             "i388"
                                                             "i386"
                                                             "i384"
                                                             "i382"
                                                             "i380"
                                                             "i378"
                                                             "i376"
                                                             "i373"
                                                             "i371"
                                                             "i370"
                                                             "i368"
                                                             "i366"
                                                             "i364"
                                                             "i362"
                                                             "i361"
                                                             "i360"
                                                             "i359"
                                                             "i357"
                                                             "i356"
                                                             "i353"
                                                             "i351"
                                                             "i349"
                                                             "i347"
                                                             "i345"
                                                             "i343"
                                                             "i341"
                                                             "i340"
                                                             "i339"
                                                             "i337"
                                                             "i335"
                                                             "i334"
                                                             "i331"
                                                             "i330"
                                                             "i328"
                                                             "i326"
                                                             "i324"
                                                             "i322"
                                                             "i320"
                                                             "i318"
                                                             "i316"
                                                             "i314"
                                                             "i312"
                                                             "i309"
                                                             "i307"
                                                             "i305"
                                                             "i303"
                                                             "i301"
                                                             "i299"
                                                             "i297"
                                                             "i295"
                                                             "i293"
                                                             "i291"
                                                             "i289"
                                                             "i287"
                                                             "i285"
                                                             "i283"
                                                             "i281"
                                                             "i279"
                                                             "i277"
                                                             "i275"
                                                             "i273"
                                                             "i271"
                                                             "i269"
                                                             "i267"
                                                             "i265"
                                                             "i263"
                                                             "i262"
                                                             "i259"
                                                             "i257"
                                                             "i256"
                                                             "i255"
                                                             "i254"
                                                             "i253"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i244"
                                                             "i242"
                                                             "i240"
                                                             "i238"
                                                             "i236"
                                                             "i234"
                                                             "i232"
                                                             "i230"
                                                             "i228"
                                                             "i226"
                                                             "i224"
                                                             "i222"
                                                             "i220"
                                                             "i218"
                                                             "i216"
                                                             "i214"
                                                             "i212"
                                                             "i210"
                                                             "i208"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i46"
                                                             "i45"
                                                             "i44")))
                                                         (hygiene guile))
                                                       #(syntax-object
                                                         #f
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i1899"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1839"
                                                              "i1840"
                                                              "i1841"
                                                              "i1842"
                                                              "i1843"
                                                              "i1844"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i1831"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1803"
                                                              "i1804"
                                                              "i1805"
                                                              "i1806"
                                                              "i1807"
                                                              "i1808"
                                                              "i1809"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              chi-lambda-case
                                                              lambda*-formals
                                                              chi-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              chi-void
                                                              eval-local-transformer
                                                              chi-local-syntax
                                                              chi-body
                                                              chi-macro
                                                              chi-call
                                                              chi-expr
                                                              chi
                                                              syntax-type
                                                              chi-when-list
                                                              chi-install-global
                                                              chi-top-sequence
                                                              chi-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-primcall
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-call
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-seq
                                                              make-primcall
                                                              make-call
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i471"
                                                             "i469"
                                                             "i467"
                                                             "i465"
                                                             "i463"
                                                             "i461"
                                                             "i459"
                                                             "i457"
                                                             "i455"
                                                             "i453"
                                                             "i451"
                                                             "i449"
                                                             "i447"
                                                             "i445"
                                                             "i443"
                                                             "i441"
                                                             "i439"
                                                             "i437"
                                                             "i435"
                                                             "i433"
                                                             "i431"
                                                             "i429"
                                                             "i427"
                                                             "i425"
                                                             "i423"
                                                             "i421"
                                                             "i419"
                                                             "i417"
                                                             "i415"
                                                             "i413"
                                                             "i411"
                                                             "i409"
                                                             "i407"
                                                             "i405"
                                                             "i403"
                                                             "i402"
                                                             "i400"
                                                             "i397"
                                                             "i396"
                                                             "i395"
                                                             "i393"
                                                             "i392"
                                                             "i390"
                                                             "i388"
                                                             "i386"
                                                             "i384"
                                                             "i382"
                                                             "i380"
                                                             "i378"
                                                             "i376"
                                                             "i373"
                                                             "i371"
                                                             "i370"
                                                             "i368"
                                                             "i366"
                                                             "i364"
                                                             "i362"
                                                             "i361"
                                                             "i360"
                                                             "i359"
                                                             "i357"
                                                             "i356"
                                                             "i353"
                                                             "i351"
                                                             "i349"
                                                             "i347"
                                                             "i345"
                                                             "i343"
                                                             "i341"
                                                             "i340"
                                                             "i339"
                                                             "i337"
                                                             "i335"
                                                             "i334"
                                                             "i331"
                                                             "i330"
                                                             "i328"
                                                             "i326"
                                                             "i324"
                                                             "i322"
                                                             "i320"
                                                             "i318"
                                                             "i316"
                                                             "i314"
                                                             "i312"
                                                             "i309"
                                                             "i307"
                                                             "i305"
                                                             "i303"
                                                             "i301"
                                                             "i299"
                                                             "i297"
                                                             "i295"
                                                             "i293"
                                                             "i291"
                                                             "i289"
                                                             "i287"
                                                             "i285"
                                                             "i283"
                                                             "i281"
                                                             "i279"
                                                             "i277"
                                                             "i275"
                                                             "i273"
                                                             "i271"
                                                             "i269"
                                                             "i267"
                                                             "i265"
                                                             "i263"
                                                             "i262"
                                                             "i259"
                                                             "i257"
                                                             "i256"
                                                             "i255"
                                                             "i254"
                                                             "i253"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i244"
                                                             "i242"
                                                             "i240"
                                                             "i238"
                                                             "i236"
                                                             "i234"
                                                             "i232"
                                                             "i230"
                                                             "i228"
                                                             "i226"
                                                             "i224"
                                                             "i222"
                                                             "i220"
                                                             "i218"
                                                             "i216"
                                                             "i214"
                                                             "i212"
                                                             "i210"
                                                             "i208"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i46"
                                                             "i45"
                                                             "i44")))
                                                         (hygiene guile))
                                                       #(syntax-object
                                                         #f
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i1899"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1839"
                                                              "i1840"
                                                              "i1841"
                                                              "i1842"
                                                              "i1843"
                                                              "i1844"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i1831"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1803"
                                                              "i1804"
                                                              "i1805"
                                                              "i1806"
                                                              "i1807"
                                                              "i1808"
                                                              "i1809"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              chi-lambda-case
                                                              lambda*-formals
                                                              chi-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              chi-void
                                                              eval-local-transformer
                                                              chi-local-syntax
                                                              chi-body
                                                              chi-macro
                                                              chi-call
                                                              chi-expr
                                                              chi
                                                              syntax-type
                                                              chi-when-list
                                                              chi-install-global
                                                              chi-top-sequence
                                                              chi-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-primcall
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-call
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-seq
                                                              make-primcall
                                                              make-call
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i471"
                                                             "i469"
                                                             "i467"
                                                             "i465"
                                                             "i463"
                                                             "i461"
                                                             "i459"
                                                             "i457"
                                                             "i455"
                                                             "i453"
                                                             "i451"
                                                             "i449"
                                                             "i447"
                                                             "i445"
                                                             "i443"
                                                             "i441"
                                                             "i439"
                                                             "i437"
                                                             "i435"
                                                             "i433"
                                                             "i431"
                                                             "i429"
                                                             "i427"
                                                             "i425"
                                                             "i423"
                                                             "i421"
                                                             "i419"
                                                             "i417"
                                                             "i415"
                                                             "i413"
                                                             "i411"
                                                             "i409"
                                                             "i407"
                                                             "i405"
                                                             "i403"
                                                             "i402"
                                                             "i400"
                                                             "i397"
                                                             "i396"
                                                             "i395"
                                                             "i393"
                                                             "i392"
                                                             "i390"
                                                             "i388"
                                                             "i386"
                                                             "i384"
                                                             "i382"
                                                             "i380"
                                                             "i378"
                                                             "i376"
                                                             "i373"
                                                             "i371"
                                                             "i370"
                                                             "i368"
                                                             "i366"
                                                             "i364"
                                                             "i362"
                                                             "i361"
                                                             "i360"
                                                             "i359"
                                                             "i357"
                                                             "i356"
                                                             "i353"
                                                             "i351"
                                                             "i349"
                                                             "i347"
                                                             "i345"
                                                             "i343"
                                                             "i341"
                                                             "i340"
                                                             "i339"
                                                             "i337"
                                                             "i335"
                                                             "i334"
                                                             "i331"
                                                             "i330"
                                                             "i328"
                                                             "i326"
                                                             "i324"
                                                             "i322"
                                                             "i320"
                                                             "i318"
                                                             "i316"
                                                             "i314"
                                                             "i312"
                                                             "i309"
                                                             "i307"
                                                             "i305"
                                                             "i303"
                                                             "i301"
                                                             "i299"
                                                             "i297"
                                                             "i295"
                                                             "i293"
                                                             "i291"
                                                             "i289"
                                                             "i287"
                                                             "i285"
                                                             "i283"
                                                             "i281"
                                                             "i279"
                                                             "i277"
                                                             "i275"
                                                             "i273"
                                                             "i271"
                                                             "i269"
                                                             "i267"
                                                             "i265"
                                                             "i263"
                                                             "i262"
                                                             "i259"
                                                             "i257"
                                                             "i256"
                                                             "i255"
                                                             "i254"
                                                             "i253"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i244"
                                                             "i242"
                                                             "i240"
                                                             "i238"
                                                             "i236"
                                                             "i234"
                                                             "i232"
                                                             "i230"
                                                             "i228"
                                                             "i226"
                                                             "i224"
                                                             "i222"
                                                             "i220"
                                                             "i218"
                                                             "i216"
                                                             "i214"
                                                             "i212"
                                                             "i210"
                                                             "i208"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i46"
                                                             "i45"
                                                             "i44")))
                                                         (hygiene guile)))
                                                     '(())
                                                     #{s 25040}#
                                                     #{mod 25042}#))
                                                 #{tmp 26441}#)
                                               (syntax-violation
                                                 #f
                                                 "source expression failed to match any pattern"
                                                 #{e 25037}#)))))))
                                   (if (eqv? #{ftype 25684}# 'define-syntax)
                                     (let ((#{tmp 26587}#
                                             ($sc-dispatch
                                               #{e 25037}#
                                               '(_ any any))))
                                       (if (if #{tmp 26587}#
                                             (@apply
                                               (lambda (#{name 26591}#
                                                        #{val 26592}#)
                                                 (if (symbol? #{name 26591}#)
                                                   #t
                                                   (if (if (vector?
                                                             #{name 26591}#)
                                                         (if (= (vector-length
                                                                  #{name 26591}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{name 26591}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (symbol?
                                                       (vector-ref
                                                         #{name 26591}#
                                                         1))
                                                     #f)))
                                               #{tmp 26587}#)
                                             #f)
                                         (@apply
                                           (lambda (#{name 26619}#
                                                    #{val 26620}#)
                                             (values
                                               'define-syntax-form
                                               #{name 26619}#
                                               #{val 26620}#
                                               #{w 25039}#
                                               #{s 25040}#
                                               #{mod 25042}#))
                                           #{tmp 26587}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{e 25037}#)))
                                     (values
                                       'call
                                       #f
                                       #{e 25037}#
                                       #{w 25039}#
                                       #{s 25040}#
                                       #{mod 25042}#))))))))))))))
           (if (if (vector? #{e 25037}#)
                 (if (= (vector-length #{e 25037}#) 4)
                   (eq? (vector-ref #{e 25037}# 0) 'syntax-object)
                   #f)
                 #f)
             (#{syntax-type 4372}#
               (vector-ref #{e 25037}# 1)
               #{r 25038}#
               (let ((#{w2 26645}# (vector-ref #{e 25037}# 2)))
                 (let ((#{m1 26646}# (car #{w 25039}#))
                       (#{s1 26647}# (cdr #{w 25039}#)))
                   (if (null? #{m1 26646}#)
                     (if (null? #{s1 26647}#)
                       #{w2 26645}#
                       (cons (car #{w2 26645}#)
                             (let ((#{m2 26658}# (cdr #{w2 26645}#)))
                               (if (null? #{m2 26658}#)
                                 #{s1 26647}#
                                 (append #{s1 26647}# #{m2 26658}#)))))
                     (cons (let ((#{m2 26666}# (car #{w2 26645}#)))
                             (if (null? #{m2 26666}#)
                               #{m1 26646}#
                               (append #{m1 26646}# #{m2 26666}#)))
                           (let ((#{m2 26674}# (cdr #{w2 26645}#)))
                             (if (null? #{m2 26674}#)
                               #{s1 26647}#
                               (append #{s1 26647}# #{m2 26674}#)))))))
               (let ((#{t 26679}#
                       (#{source-annotation 4334}# #{e 25037}#)))
                 (if #{t 26679}# #{t 26679}# #{s 25040}#))
               #{rib 25041}#
               (let ((#{t 26977}# (vector-ref #{e 25037}# 3)))
                 (if #{t 26977}# #{t 26977}# #{mod 25042}#))
               #{for-car? 25043}#)
             (if (self-evaluating? #{e 25037}#)
               (values
                 'constant
                 #f
                 #{e 25037}#
                 #{w 25039}#
                 #{s 25040}#
                 #{mod 25042}#)
               (values
                 'other
                 #f
                 #{e 25037}#
                 #{w 25039}#
                 #{s 25040}#
                 #{mod 25042}#)))))))
   (#{chi 4373}#
     (lambda (#{e 26986}#
              #{r 26987}#
              #{w 26988}#
              #{mod 26989}#)
       (call-with-values
         (lambda ()
           (#{syntax-type 4372}#
             #{e 26986}#
             #{r 26987}#
             #{w 26988}#
             (#{source-annotation 4334}# #{e 26986}#)
             #f
             #{mod 26989}#
             #f))
         (lambda (#{type 27193}#
                  #{value 27194}#
                  #{e 27195}#
                  #{w 27196}#
                  #{s 27197}#
                  #{mod 27198}#)
           (#{chi-expr 4374}#
             #{type 27193}#
             #{value 27194}#
             #{e 27195}#
             #{r 26987}#
             #{w 27196}#
             #{s 27197}#
             #{mod 27198}#)))))
   (#{chi-expr 4374}#
     (lambda (#{type 27201}#
              #{value 27202}#
              #{e 27203}#
              #{r 27204}#
              #{w 27205}#
              #{s 27206}#
              #{mod 27207}#)
       (if (eqv? #{type 27201}# 'lexical)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 3)
           #{s 27206}#
           #{e 27203}#
           #{value 27202}#)
         (if (if (eqv? #{type 27201}# 'core)
               #t
               (eqv? #{type 27201}# 'core-form))
           (#{value 27202}#
             #{e 27203}#
             #{r 27204}#
             #{w 27205}#
             #{s 27206}#
             #{mod 27207}#)
           (if (eqv? #{type 27201}# 'module-ref)
             (call-with-values
               (lambda ()
                 (#{value 27202}#
                   #{e 27203}#
                   #{r 27204}#
                   #{w 27205}#))
               (lambda (#{e 27233}#
                        #{r 27234}#
                        #{w 27235}#
                        #{s 27236}#
                        #{mod 27237}#)
                 (#{chi 4373}#
                   #{e 27233}#
                   #{r 27234}#
                   #{w 27235}#
                   #{mod 27237}#)))
             (if (eqv? #{type 27201}# 'lexical-call)
               (#{chi-call 4375}#
                 (let ((#{id 27418}# (car #{e 27203}#)))
                   (#{build-lexical-reference 4310}#
                     'fun
                     (#{source-annotation 4334}# #{id 27418}#)
                     (if (if (vector? #{id 27418}#)
                           (if (= (vector-length #{id 27418}#) 4)
                             (eq? (vector-ref #{id 27418}# 0) 'syntax-object)
                             #f)
                           #f)
                       (syntax->datum #{id 27418}#)
                       #{id 27418}#)
                     #{value 27202}#))
                 #{e 27203}#
                 #{r 27204}#
                 #{w 27205}#
                 #{s 27206}#
                 #{mod 27207}#)
               (if (eqv? #{type 27201}# 'global-call)
                 (#{chi-call 4375}#
                   (#{build-global-reference 4313}#
                     (#{source-annotation 4334}# (car #{e 27203}#))
                     (if (if (vector? #{value 27202}#)
                           (if (= (vector-length #{value 27202}#) 4)
                             (eq? (vector-ref #{value 27202}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{value 27202}# 1)
                       #{value 27202}#)
                     (if (if (vector? #{value 27202}#)
                           (if (= (vector-length #{value 27202}#) 4)
                             (eq? (vector-ref #{value 27202}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{value 27202}# 3)
                       #{mod 27207}#))
                   #{e 27203}#
                   #{r 27204}#
                   #{w 27205}#
                   #{s 27206}#
                   #{mod 27207}#)
                 (if (eqv? #{type 27201}# 'constant)
                   (let ((#{exp 28140}#
                           (#{strip 4386}#
                             (let ((#{x 28153}#
                                     (begin
                                       (if (if (pair? #{e 27203}#)
                                             #{s 27206}#
                                             #f)
                                         (set-source-properties!
                                           #{e 27203}#
                                           #{s 27206}#))
                                       #{e 27203}#)))
                               (if (if (null? (car #{w 27205}#))
                                     (null? (cdr #{w 27205}#))
                                     #f)
                                 #{x 28153}#
                                 (if (if (vector? #{x 28153}#)
                                       (if (= (vector-length #{x 28153}#) 4)
                                         (eq? (vector-ref #{x 28153}# 0)
                                              'syntax-object)
                                         #f)
                                       #f)
                                   (let ((#{expression 28185}#
                                           (vector-ref #{x 28153}# 1))
                                         (#{wrap 28186}#
                                           (let ((#{w2 28194}#
                                                   (vector-ref #{x 28153}# 2)))
                                             (let ((#{m1 28195}#
                                                     (car #{w 27205}#))
                                                   (#{s1 28196}#
                                                     (cdr #{w 27205}#)))
                                               (if (null? #{m1 28195}#)
                                                 (if (null? #{s1 28196}#)
                                                   #{w2 28194}#
                                                   (cons (car #{w2 28194}#)
                                                         (let ((#{m2 28211}#
                                                                 (cdr #{w2 28194}#)))
                                                           (if (null? #{m2 28211}#)
                                                             #{s1 28196}#
                                                             (append
                                                               #{s1 28196}#
                                                               #{m2 28211}#)))))
                                                 (cons (let ((#{m2 28219}#
                                                               (car #{w2 28194}#)))
                                                         (if (null? #{m2 28219}#)
                                                           #{m1 28195}#
                                                           (append
                                                             #{m1 28195}#
                                                             #{m2 28219}#)))
                                                       (let ((#{m2 28227}#
                                                               (cdr #{w2 28194}#)))
                                                         (if (null? #{m2 28227}#)
                                                           #{s1 28196}#
                                                           (append
                                                             #{s1 28196}#
                                                             #{m2 28227}#))))))))
                                         (#{module 28187}#
                                           (vector-ref #{x 28153}# 3)))
                                     (vector
                                       'syntax-object
                                       #{expression 28185}#
                                       #{wrap 28186}#
                                       #{module 28187}#))
                                   (if (null? #{x 28153}#)
                                     #{x 28153}#
                                     (vector
                                       'syntax-object
                                       #{x 28153}#
                                       #{w 27205}#
                                       #{mod 27207}#)))))
                             '(()))))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 1)
                       #{s 27206}#
                       #{exp 28140}#))
                   (if (eqv? #{type 27201}# 'global)
                     (#{analyze-variable 4312}#
                       #{mod 27207}#
                       #{value 27202}#
                       (lambda (#{mod 28252}# #{var 28253}# #{public? 28254}#)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #{s 27206}#
                           #{mod 28252}#
                           #{var 28253}#
                           #{public? 28254}#))
                       (lambda (#{var 28262}#)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #{s 27206}#
                           #{var 28262}#)))
                     (if (eqv? #{type 27201}# 'call)
                       (#{chi-call 4375}#
                         (#{chi 4373}#
                           (car #{e 27203}#)
                           #{r 27204}#
                           #{w 27205}#
                           #{mod 27207}#)
                         #{e 27203}#
                         #{r 27204}#
                         #{w 27205}#
                         #{s 27206}#
                         #{mod 27207}#)
                       (if (eqv? #{type 27201}# 'begin-form)
                         (let ((#{tmp 28440}#
                                 ($sc-dispatch
                                   #{e 27203}#
                                   '(_ any . each-any))))
                           (if #{tmp 28440}#
                             (@apply
                               (lambda (#{e1 28444}# #{e2 28445}#)
                                 (#{chi-sequence 4368}#
                                   (cons #{e1 28444}# #{e2 28445}#)
                                   #{r 27204}#
                                   #{w 27205}#
                                   #{s 27206}#
                                   #{mod 27207}#))
                               #{tmp 28440}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{e 27203}#)))
                         (if (eqv? #{type 27201}# 'local-syntax-form)
                           (#{chi-local-syntax 4378}#
                             #{value 27202}#
                             #{e 27203}#
                             #{r 27204}#
                             #{w 27205}#
                             #{s 27206}#
                             #{mod 27207}#
                             #{chi-sequence 4368}#)
                           (if (eqv? #{type 27201}# 'eval-when-form)
                             (let ((#{tmp 28625}#
                                     ($sc-dispatch
                                       #{e 27203}#
                                       '(_ each-any any . each-any))))
                               (if #{tmp 28625}#
                                 (@apply
                                   (lambda (#{x 28629}#
                                            #{e1 28630}#
                                            #{e2 28631}#)
                                     (let ((#{when-list 28632}#
                                             (#{chi-when-list 4371}#
                                               #{e 27203}#
                                               #{x 28629}#
                                               #{w 27205}#)))
                                       (if (memq 'eval #{when-list 28632}#)
                                         (#{chi-sequence 4368}#
                                           (cons #{e1 28630}# #{e2 28631}#)
                                           #{r 27204}#
                                           #{w 27205}#
                                           #{s 27206}#
                                           #{mod 27207}#)
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 0)
                                           #f))))
                                   #{tmp 28625}#)
                                 (syntax-violation
                                   #f
                                   "source expression failed to match any pattern"
                                   #{e 27203}#)))
                             (if (if (eqv? #{type 27201}# 'define-form)
                                   #t
                                   (eqv? #{type 27201}# 'define-syntax-form))
                               (syntax-violation
                                 #f
                                 "definition in expression context"
                                 #{e 27203}#
                                 (if (if (null? (car #{w 27205}#))
                                       (null? (cdr #{w 27205}#))
                                       #f)
                                   #{value 27202}#
                                   (if (if (vector? #{value 27202}#)
                                         (if (= (vector-length #{value 27202}#)
                                                4)
                                           (eq? (vector-ref #{value 27202}# 0)
                                                'syntax-object)
                                           #f)
                                         #f)
                                     (let ((#{expression 28783}#
                                             (vector-ref #{value 27202}# 1))
                                           (#{wrap 28784}#
                                             (let ((#{w2 28794}#
                                                     (vector-ref
                                                       #{value 27202}#
                                                       2)))
                                               (let ((#{m1 28795}#
                                                       (car #{w 27205}#))
                                                     (#{s1 28796}#
                                                       (cdr #{w 27205}#)))
                                                 (if (null? #{m1 28795}#)
                                                   (if (null? #{s1 28796}#)
                                                     #{w2 28794}#
                                                     (cons (car #{w2 28794}#)
                                                           (let ((#{m2 28813}#
                                                                   (cdr #{w2 28794}#)))
                                                             (if (null? #{m2 28813}#)
                                                               #{s1 28796}#
                                                               (append
                                                                 #{s1 28796}#
                                                                 #{m2 28813}#)))))
                                                   (cons (let ((#{m2 28821}#
                                                                 (car #{w2 28794}#)))
                                                           (if (null? #{m2 28821}#)
                                                             #{m1 28795}#
                                                             (append
                                                               #{m1 28795}#
                                                               #{m2 28821}#)))
                                                         (let ((#{m2 28829}#
                                                                 (cdr #{w2 28794}#)))
                                                           (if (null? #{m2 28829}#)
                                                             #{s1 28796}#
                                                             (append
                                                               #{s1 28796}#
                                                               #{m2 28829}#))))))))
                                           (#{module 28785}#
                                             (vector-ref #{value 27202}# 3)))
                                       (vector
                                         'syntax-object
                                         #{expression 28783}#
                                         #{wrap 28784}#
                                         #{module 28785}#))
                                     (if (null? #{value 27202}#)
                                       #{value 27202}#
                                       (vector
                                         'syntax-object
                                         #{value 27202}#
                                         #{w 27205}#
                                         #{mod 27207}#)))))
                               (if (eqv? #{type 27201}# 'syntax)
                                 (syntax-violation
                                   #f
                                   "reference to pattern variable outside syntax form"
                                   (let ((#{x 28864}#
                                           (begin
                                             (if (if (pair? #{e 27203}#)
                                                   #{s 27206}#
                                                   #f)
                                               (set-source-properties!
                                                 #{e 27203}#
                                                 #{s 27206}#))
                                             #{e 27203}#)))
                                     (if (if (null? (car #{w 27205}#))
                                           (null? (cdr #{w 27205}#))
                                           #f)
                                       #{x 28864}#
                                       (if (if (vector? #{x 28864}#)
                                             (if (= (vector-length #{x 28864}#)
                                                    4)
                                               (eq? (vector-ref #{x 28864}# 0)
                                                    'syntax-object)
                                               #f)
                                             #f)
                                         (let ((#{expression 28896}#
                                                 (vector-ref #{x 28864}# 1))
                                               (#{wrap 28897}#
                                                 (let ((#{w2 28905}#
                                                         (vector-ref
                                                           #{x 28864}#
                                                           2)))
                                                   (let ((#{m1 28906}#
                                                           (car #{w 27205}#))
                                                         (#{s1 28907}#
                                                           (cdr #{w 27205}#)))
                                                     (if (null? #{m1 28906}#)
                                                       (if (null? #{s1 28907}#)
                                                         #{w2 28905}#
                                                         (cons (car #{w2 28905}#)
                                                               (let ((#{m2 28922}#
                                                                       (cdr #{w2 28905}#)))
                                                                 (if (null? #{m2 28922}#)
                                                                   #{s1 28907}#
                                                                   (append
                                                                     #{s1 28907}#
                                                                     #{m2 28922}#)))))
                                                       (cons (let ((#{m2 28930}#
                                                                     (car #{w2 28905}#)))
                                                               (if (null? #{m2 28930}#)
                                                                 #{m1 28906}#
                                                                 (append
                                                                   #{m1 28906}#
                                                                   #{m2 28930}#)))
                                                             (let ((#{m2 28938}#
                                                                     (cdr #{w2 28905}#)))
                                                               (if (null? #{m2 28938}#)
                                                                 #{s1 28907}#
                                                                 (append
                                                                   #{s1 28907}#
                                                                   #{m2 28938}#))))))))
                                               (#{module 28898}#
                                                 (vector-ref #{x 28864}# 3)))
                                           (vector
                                             'syntax-object
                                             #{expression 28896}#
                                             #{wrap 28897}#
                                             #{module 28898}#))
                                         (if (null? #{x 28864}#)
                                           #{x 28864}#
                                           (vector
                                             'syntax-object
                                             #{x 28864}#
                                             #{w 27205}#
                                             #{mod 27207}#))))))
                                 (if (eqv? #{type 27201}# 'displaced-lexical)
                                   (syntax-violation
                                     #f
                                     "reference to identifier outside its scope"
                                     (let ((#{x 28965}#
                                             (begin
                                               (if (if (pair? #{e 27203}#)
                                                     #{s 27206}#
                                                     #f)
                                                 (set-source-properties!
                                                   #{e 27203}#
                                                   #{s 27206}#))
                                               #{e 27203}#)))
                                       (if (if (null? (car #{w 27205}#))
                                             (null? (cdr #{w 27205}#))
                                             #f)
                                         #{x 28965}#
                                         (if (if (vector? #{x 28965}#)
                                               (if (= (vector-length
                                                        #{x 28965}#)
                                                      4)
                                                 (eq? (vector-ref
                                                        #{x 28965}#
                                                        0)
                                                      'syntax-object)
                                                 #f)
                                               #f)
                                           (let ((#{expression 28997}#
                                                   (vector-ref #{x 28965}# 1))
                                                 (#{wrap 28998}#
                                                   (let ((#{w2 29006}#
                                                           (vector-ref
                                                             #{x 28965}#
                                                             2)))
                                                     (let ((#{m1 29007}#
                                                             (car #{w 27205}#))
                                                           (#{s1 29008}#
                                                             (cdr #{w 27205}#)))
                                                       (if (null? #{m1 29007}#)
                                                         (if (null? #{s1 29008}#)
                                                           #{w2 29006}#
                                                           (cons (car #{w2 29006}#)
                                                                 (let ((#{m2 29023}#
                                                                         (cdr #{w2 29006}#)))
                                                                   (if (null? #{m2 29023}#)
                                                                     #{s1 29008}#
                                                                     (append
                                                                       #{s1 29008}#
                                                                       #{m2 29023}#)))))
                                                         (cons (let ((#{m2 29031}#
                                                                       (car #{w2 29006}#)))
                                                                 (if (null? #{m2 29031}#)
                                                                   #{m1 29007}#
                                                                   (append
                                                                     #{m1 29007}#
                                                                     #{m2 29031}#)))
                                                               (let ((#{m2 29039}#
                                                                       (cdr #{w2 29006}#)))
                                                                 (if (null? #{m2 29039}#)
                                                                   #{s1 29008}#
                                                                   (append
                                                                     #{s1 29008}#
                                                                     #{m2 29039}#))))))))
                                                 (#{module 28999}#
                                                   (vector-ref #{x 28965}# 3)))
                                             (vector
                                               'syntax-object
                                               #{expression 28997}#
                                               #{wrap 28998}#
                                               #{module 28999}#))
                                           (if (null? #{x 28965}#)
                                             #{x 28965}#
                                             (vector
                                               'syntax-object
                                               #{x 28965}#
                                               #{w 27205}#
                                               #{mod 27207}#))))))
                                   (syntax-violation
                                     #f
                                     "unexpected syntax"
                                     (let ((#{x 29063}#
                                             (begin
                                               (if (if (pair? #{e 27203}#)
                                                     #{s 27206}#
                                                     #f)
                                                 (set-source-properties!
                                                   #{e 27203}#
                                                   #{s 27206}#))
                                               #{e 27203}#)))
                                       (if (if (null? (car #{w 27205}#))
                                             (null? (cdr #{w 27205}#))
                                             #f)
                                         #{x 29063}#
                                         (if (if (vector? #{x 29063}#)
                                               (if (= (vector-length
                                                        #{x 29063}#)
                                                      4)
                                                 (eq? (vector-ref
                                                        #{x 29063}#
                                                        0)
                                                      'syntax-object)
                                                 #f)
                                               #f)
                                           (let ((#{expression 29095}#
                                                   (vector-ref #{x 29063}# 1))
                                                 (#{wrap 29096}#
                                                   (let ((#{w2 29104}#
                                                           (vector-ref
                                                             #{x 29063}#
                                                             2)))
                                                     (let ((#{m1 29105}#
                                                             (car #{w 27205}#))
                                                           (#{s1 29106}#
                                                             (cdr #{w 27205}#)))
                                                       (if (null? #{m1 29105}#)
                                                         (if (null? #{s1 29106}#)
                                                           #{w2 29104}#
                                                           (cons (car #{w2 29104}#)
                                                                 (let ((#{m2 29121}#
                                                                         (cdr #{w2 29104}#)))
                                                                   (if (null? #{m2 29121}#)
                                                                     #{s1 29106}#
                                                                     (append
                                                                       #{s1 29106}#
                                                                       #{m2 29121}#)))))
                                                         (cons (let ((#{m2 29129}#
                                                                       (car #{w2 29104}#)))
                                                                 (if (null? #{m2 29129}#)
                                                                   #{m1 29105}#
                                                                   (append
                                                                     #{m1 29105}#
                                                                     #{m2 29129}#)))
                                                               (let ((#{m2 29137}#
                                                                       (cdr #{w2 29104}#)))
                                                                 (if (null? #{m2 29137}#)
                                                                   #{s1 29106}#
                                                                   (append
                                                                     #{s1 29106}#
                                                                     #{m2 29137}#))))))))
                                                 (#{module 29097}#
                                                   (vector-ref #{x 29063}# 3)))
                                             (vector
                                               'syntax-object
                                               #{expression 29095}#
                                               #{wrap 29096}#
                                               #{module 29097}#))
                                           (if (null? #{x 29063}#)
                                             #{x 29063}#
                                             (vector
                                               'syntax-object
                                               #{x 29063}#
                                               #{w 27205}#
                                               #{mod 27207}#))))))))))))))))))))))
   (#{chi-call 4375}#
     (lambda (#{x 29152}#
              #{e 29153}#
              #{r 29154}#
              #{w 29155}#
              #{s 29156}#
              #{mod 29157}#)
       (let ((#{tmp 29159}#
               ($sc-dispatch #{e 29153}# '(any . each-any))))
         (if #{tmp 29159}#
           (@apply
             (lambda (#{e0 29163}# #{e1 29164}#)
               (#{build-call 4307}#
                 #{s 29156}#
                 #{x 29152}#
                 (map (lambda (#{e 29256}#)
                        (#{chi 4373}#
                          #{e 29256}#
                          #{r 29154}#
                          #{w 29155}#
                          #{mod 29157}#))
                      #{e1 29164}#)))
             #{tmp 29159}#)
           (syntax-violation
             #f
             "source expression failed to match any pattern"
             #{e 29153}#)))))
   (#{chi-macro 4376}#
     (lambda (#{p 29344}#
              #{e 29345}#
              #{r 29346}#
              #{w 29347}#
              #{s 29348}#
              #{rib 29349}#
              #{mod 29350}#)
       (letrec*
         ((#{rebuild-macro-output 29351}#
            (lambda (#{x 29458}# #{m 29459}#)
              (if (pair? #{x 29458}#)
                (let ((#{e 29463}#
                        (cons (#{rebuild-macro-output 29351}#
                                (car #{x 29458}#)
                                #{m 29459}#)
                              (#{rebuild-macro-output 29351}#
                                (cdr #{x 29458}#)
                                #{m 29459}#))))
                  (begin
                    (if (if (pair? #{e 29463}#) #{s 29348}# #f)
                      (set-source-properties! #{e 29463}# #{s 29348}#))
                    #{e 29463}#))
                (if (if (vector? #{x 29458}#)
                      (if (= (vector-length #{x 29458}#) 4)
                        (eq? (vector-ref #{x 29458}# 0) 'syntax-object)
                        #f)
                      #f)
                  (let ((#{w 29479}# (vector-ref #{x 29458}# 2)))
                    (let ((#{ms 29480}# (car #{w 29479}#))
                          (#{s 29481}# (cdr #{w 29479}#)))
                      (if (if (pair? #{ms 29480}#)
                            (eq? (car #{ms 29480}#) #f)
                            #f)
                        (let ((#{expression 29489}# (vector-ref #{x 29458}# 1))
                              (#{wrap 29490}#
                                (cons (cdr #{ms 29480}#)
                                      (if #{rib 29349}#
                                        (cons #{rib 29349}# (cdr #{s 29481}#))
                                        (cdr #{s 29481}#))))
                              (#{module 29491}# (vector-ref #{x 29458}# 3)))
                          (vector
                            'syntax-object
                            #{expression 29489}#
                            #{wrap 29490}#
                            #{module 29491}#))
                        (let ((#{expression 29501}#
                                (let ((#{e 29506}# (vector-ref #{x 29458}# 1)))
                                  (begin
                                    (if (if (pair? #{e 29506}#) #{s 29481}# #f)
                                      (set-source-properties!
                                        #{e 29506}#
                                        #{s 29481}#))
                                    #{e 29506}#)))
                              (#{wrap 29502}#
                                (cons (cons #{m 29459}# #{ms 29480}#)
                                      (if #{rib 29349}#
                                        (cons #{rib 29349}#
                                              (cons 'shift #{s 29481}#))
                                        (cons 'shift #{s 29481}#))))
                              (#{module 29503}# (vector-ref #{x 29458}# 3)))
                          (vector
                            'syntax-object
                            #{expression 29501}#
                            #{wrap 29502}#
                            #{module 29503}#)))))
                  (if (vector? #{x 29458}#)
                    (let ((#{n 29518}# (vector-length #{x 29458}#)))
                      (let ((#{v 29519}#
                              (let ((#{e 29527}# (make-vector #{n 29518}#)))
                                (begin
                                  (if (if (pair? #{e 29527}#) #{x 29458}# #f)
                                    (set-source-properties!
                                      #{e 29527}#
                                      #{x 29458}#))
                                  #{e 29527}#))))
                        (letrec*
                          ((#{loop 29520}#
                             (lambda (#{i 29581}#)
                               (if (= #{i 29581}# #{n 29518}#)
                                 #{v 29519}#
                                 (begin
                                   (vector-set!
                                     #{v 29519}#
                                     #{i 29581}#
                                     (#{rebuild-macro-output 29351}#
                                       (vector-ref #{x 29458}# #{i 29581}#)
                                       #{m 29459}#))
                                   (#{loop 29520}# (#{1+}# #{i 29581}#)))))))
                          (#{loop 29520}# 0))))
                    (if (symbol? #{x 29458}#)
                      (syntax-violation
                        #f
                        "encountered raw symbol in macro output"
                        (let ((#{s 29587}# (cdr #{w 29347}#)))
                          (let ((#{x 29591}#
                                  (begin
                                    (if (if (pair? #{e 29345}#) #{s 29587}# #f)
                                      (set-source-properties!
                                        #{e 29345}#
                                        #{s 29587}#))
                                    #{e 29345}#)))
                            (if (if (null? (car #{w 29347}#))
                                  (null? (cdr #{w 29347}#))
                                  #f)
                              #{x 29591}#
                              (if (if (vector? #{x 29591}#)
                                    (if (= (vector-length #{x 29591}#) 4)
                                      (eq? (vector-ref #{x 29591}# 0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (let ((#{expression 29623}#
                                        (vector-ref #{x 29591}# 1))
                                      (#{wrap 29624}#
                                        (let ((#{w2 29632}#
                                                (vector-ref #{x 29591}# 2)))
                                          (let ((#{m1 29633}#
                                                  (car #{w 29347}#))
                                                (#{s1 29634}#
                                                  (cdr #{w 29347}#)))
                                            (if (null? #{m1 29633}#)
                                              (if (null? #{s1 29634}#)
                                                #{w2 29632}#
                                                (cons (car #{w2 29632}#)
                                                      (let ((#{m2 29649}#
                                                              (cdr #{w2 29632}#)))
                                                        (if (null? #{m2 29649}#)
                                                          #{s1 29634}#
                                                          (append
                                                            #{s1 29634}#
                                                            #{m2 29649}#)))))
                                              (cons (let ((#{m2 29657}#
                                                            (car #{w2 29632}#)))
                                                      (if (null? #{m2 29657}#)
                                                        #{m1 29633}#
                                                        (append
                                                          #{m1 29633}#
                                                          #{m2 29657}#)))
                                                    (let ((#{m2 29665}#
                                                            (cdr #{w2 29632}#)))
                                                      (if (null? #{m2 29665}#)
                                                        #{s1 29634}#
                                                        (append
                                                          #{s1 29634}#
                                                          #{m2 29665}#))))))))
                                      (#{module 29625}#
                                        (vector-ref #{x 29591}# 3)))
                                  (vector
                                    'syntax-object
                                    #{expression 29623}#
                                    #{wrap 29624}#
                                    #{module 29625}#))
                                (if (null? #{x 29591}#)
                                  #{x 29591}#
                                  (vector
                                    'syntax-object
                                    #{x 29591}#
                                    #{w 29347}#
                                    #{mod 29350}#))))))
                        #{x 29458}#)
                      (begin
                        (if (if (pair? #{x 29458}#) #{s 29348}# #f)
                          (set-source-properties! #{x 29458}# #{s 29348}#))
                        #{x 29458}#))))))))
         (#{rebuild-macro-output 29351}#
           (#{p 29344}#
             (let ((#{w 29358}#
                     (cons (cons #f (car #{w 29347}#))
                           (cons 'shift (cdr #{w 29347}#)))))
               (let ((#{x 29363}#
                       (begin
                         (if (if (pair? #{e 29345}#) #{s 29348}# #f)
                           (set-source-properties! #{e 29345}# #{s 29348}#))
                         #{e 29345}#)))
                 (if (if (null? (car #{w 29358}#))
                       (null? (cdr #{w 29358}#))
                       #f)
                   #{x 29363}#
                   (if (if (vector? #{x 29363}#)
                         (if (= (vector-length #{x 29363}#) 4)
                           (eq? (vector-ref #{x 29363}# 0) 'syntax-object)
                           #f)
                         #f)
                     (let ((#{expression 29401}# (vector-ref #{x 29363}# 1))
                           (#{wrap 29402}#
                             (let ((#{w2 29410}# (vector-ref #{x 29363}# 2)))
                               (let ((#{m1 29411}# (car #{w 29358}#))
                                     (#{s1 29412}# (cdr #{w 29358}#)))
                                 (if (null? #{m1 29411}#)
                                   (if (null? #{s1 29412}#)
                                     #{w2 29410}#
                                     (cons (car #{w2 29410}#)
                                           (let ((#{m2 29427}#
                                                   (cdr #{w2 29410}#)))
                                             (if (null? #{m2 29427}#)
                                               #{s1 29412}#
                                               (append
                                                 #{s1 29412}#
                                                 #{m2 29427}#)))))
                                   (cons (let ((#{m2 29435}#
                                                 (car #{w2 29410}#)))
                                           (if (null? #{m2 29435}#)
                                             #{m1 29411}#
                                             (append
                                               #{m1 29411}#
                                               #{m2 29435}#)))
                                         (let ((#{m2 29443}#
                                                 (cdr #{w2 29410}#)))
                                           (if (null? #{m2 29443}#)
                                             #{s1 29412}#
                                             (append
                                               #{s1 29412}#
                                               #{m2 29443}#))))))))
                           (#{module 29403}# (vector-ref #{x 29363}# 3)))
                       (vector
                         'syntax-object
                         #{expression 29401}#
                         #{wrap 29402}#
                         #{module 29403}#))
                     (if (null? #{x 29363}#)
                       #{x 29363}#
                       (vector
                         'syntax-object
                         #{x 29363}#
                         #{w 29358}#
                         #{mod 29350}#)))))))
           (gensym "m")))))
   (#{chi-body 4377}#
     (lambda (#{body 29695}#
              #{outer-form 29696}#
              #{r 29697}#
              #{w 29698}#
              #{mod 29699}#)
       (let ((#{r 29700}#
               (cons '("placeholder" placeholder) #{r 29697}#)))
         (let ((#{ribcage 29701}# (vector 'ribcage '() '() '())))
           (let ((#{w 29702}#
                   (cons (car #{w 29698}#)
                         (cons #{ribcage 29701}# (cdr #{w 29698}#)))))
             (letrec*
               ((#{parse 29703}#
                  (lambda (#{body 29811}#
                           #{ids 29812}#
                           #{labels 29813}#
                           #{var-ids 29814}#
                           #{vars 29815}#
                           #{vals 29816}#
                           #{bindings 29817}#)
                    (if (null? #{body 29811}#)
                      (syntax-violation
                        #f
                        "no expressions in body"
                        #{outer-form 29696}#)
                      (let ((#{e 29818}# (cdr (car #{body 29811}#)))
                            (#{er 29819}# (car (car #{body 29811}#))))
                        (call-with-values
                          (lambda ()
                            (#{syntax-type 4372}#
                              #{e 29818}#
                              #{er 29819}#
                              '(())
                              (#{source-annotation 4334}# #{er 29819}#)
                              #{ribcage 29701}#
                              #{mod 29699}#
                              #f))
                          (lambda (#{type 30025}#
                                   #{value 30026}#
                                   #{e 30027}#
                                   #{w 30028}#
                                   #{s 30029}#
                                   #{mod 30030}#)
                            (if (eqv? #{type 30025}# 'define-form)
                              (let ((#{id 30034}#
                                      (if (if (null? (car #{w 30028}#))
                                            (null? (cdr #{w 30028}#))
                                            #f)
                                        #{value 30026}#
                                        (if (if (vector? #{value 30026}#)
                                              (if (= (vector-length
                                                       #{value 30026}#)
                                                     4)
                                                (eq? (vector-ref
                                                       #{value 30026}#
                                                       0)
                                                     'syntax-object)
                                                #f)
                                              #f)
                                          (let ((#{expression 30079}#
                                                  (vector-ref
                                                    #{value 30026}#
                                                    1))
                                                (#{wrap 30080}#
                                                  (let ((#{w2 30090}#
                                                          (vector-ref
                                                            #{value 30026}#
                                                            2)))
                                                    (let ((#{m1 30091}#
                                                            (car #{w 30028}#))
                                                          (#{s1 30092}#
                                                            (cdr #{w 30028}#)))
                                                      (if (null? #{m1 30091}#)
                                                        (if (null? #{s1 30092}#)
                                                          #{w2 30090}#
                                                          (cons (car #{w2 30090}#)
                                                                (let ((#{m2 30109}#
                                                                        (cdr #{w2 30090}#)))
                                                                  (if (null? #{m2 30109}#)
                                                                    #{s1 30092}#
                                                                    (append
                                                                      #{s1 30092}#
                                                                      #{m2 30109}#)))))
                                                        (cons (let ((#{m2 30117}#
                                                                      (car #{w2 30090}#)))
                                                                (if (null? #{m2 30117}#)
                                                                  #{m1 30091}#
                                                                  (append
                                                                    #{m1 30091}#
                                                                    #{m2 30117}#)))
                                                              (let ((#{m2 30125}#
                                                                      (cdr #{w2 30090}#)))
                                                                (if (null? #{m2 30125}#)
                                                                  #{s1 30092}#
                                                                  (append
                                                                    #{s1 30092}#
                                                                    #{m2 30125}#))))))))
                                                (#{module 30081}#
                                                  (vector-ref
                                                    #{value 30026}#
                                                    3)))
                                            (vector
                                              'syntax-object
                                              #{expression 30079}#
                                              #{wrap 30080}#
                                              #{module 30081}#))
                                          (if (null? #{value 30026}#)
                                            #{value 30026}#
                                            (vector
                                              'syntax-object
                                              #{value 30026}#
                                              #{w 30028}#
                                              #{mod 30030}#)))))
                                    (#{label 30035}#
                                      (symbol->string (gensym "i"))))
                                (let ((#{var 30036}#
                                        (let ((#{id 30186}#
                                                (if (if (vector? #{id 30034}#)
                                                      (if (= (vector-length
                                                               #{id 30034}#)
                                                             4)
                                                        (eq? (vector-ref
                                                               #{id 30034}#
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (vector-ref #{id 30034}# 1)
                                                  #{id 30034}#)))
                                          (gensym
                                            (string-append
                                              (symbol->string #{id 30186}#)
                                              " ")))))
                                  (begin
                                    (begin
                                      (let ((#{update 30045}#
                                              (cons (vector-ref #{id 30034}# 1)
                                                    (vector-ref
                                                      #{ribcage 29701}#
                                                      1))))
                                        (vector-set!
                                          #{ribcage 29701}#
                                          1
                                          #{update 30045}#))
                                      (let ((#{update 30157}#
                                              (cons (car (vector-ref
                                                           #{id 30034}#
                                                           2))
                                                    (vector-ref
                                                      #{ribcage 29701}#
                                                      2))))
                                        (vector-set!
                                          #{ribcage 29701}#
                                          2
                                          #{update 30157}#))
                                      (let ((#{update 30172}#
                                              (cons #{label 30035}#
                                                    (vector-ref
                                                      #{ribcage 29701}#
                                                      3))))
                                        (vector-set!
                                          #{ribcage 29701}#
                                          3
                                          #{update 30172}#)))
                                    (#{parse 29703}#
                                      (cdr #{body 29811}#)
                                      (cons #{id 30034}# #{ids 29812}#)
                                      (cons #{label 30035}# #{labels 29813}#)
                                      (cons #{id 30034}# #{var-ids 29814}#)
                                      (cons #{var 30036}# #{vars 29815}#)
                                      (cons (cons #{er 29819}#
                                                  (if (if (null? (car #{w 30028}#))
                                                        (null? (cdr #{w 30028}#))
                                                        #f)
                                                    #{e 30027}#
                                                    (if (if (vector?
                                                              #{e 30027}#)
                                                          (if (= (vector-length
                                                                   #{e 30027}#)
                                                                 4)
                                                            (eq? (vector-ref
                                                                   #{e 30027}#
                                                                   0)
                                                                 'syntax-object)
                                                            #f)
                                                          #f)
                                                      (let ((#{expression 30238}#
                                                              (vector-ref
                                                                #{e 30027}#
                                                                1))
                                                            (#{wrap 30239}#
                                                              (let ((#{w2 30249}#
                                                                      (vector-ref
                                                                        #{e 30027}#
                                                                        2)))
                                                                (let ((#{m1 30250}#
                                                                        (car #{w 30028}#))
                                                                      (#{s1 30251}#
                                                                        (cdr #{w 30028}#)))
                                                                  (if (null? #{m1 30250}#)
                                                                    (if (null? #{s1 30251}#)
                                                                      #{w2 30249}#
                                                                      (cons (car #{w2 30249}#)
                                                                            (let ((#{m2 30268}#
                                                                                    (cdr #{w2 30249}#)))
                                                                              (if (null? #{m2 30268}#)
                                                                                #{s1 30251}#
                                                                                (append
                                                                                  #{s1 30251}#
                                                                                  #{m2 30268}#)))))
                                                                    (cons (let ((#{m2 30276}#
                                                                                  (car #{w2 30249}#)))
                                                                            (if (null? #{m2 30276}#)
                                                                              #{m1 30250}#
                                                                              (append
                                                                                #{m1 30250}#
                                                                                #{m2 30276}#)))
                                                                          (let ((#{m2 30284}#
                                                                                  (cdr #{w2 30249}#)))
                                                                            (if (null? #{m2 30284}#)
                                                                              #{s1 30251}#
                                                                              (append
                                                                                #{s1 30251}#
                                                                                #{m2 30284}#))))))))
                                                            (#{module 30240}#
                                                              (vector-ref
                                                                #{e 30027}#
                                                                3)))
                                                        (vector
                                                          'syntax-object
                                                          #{expression 30238}#
                                                          #{wrap 30239}#
                                                          #{module 30240}#))
                                                      (if (null? #{e 30027}#)
                                                        #{e 30027}#
                                                        (vector
                                                          'syntax-object
                                                          #{e 30027}#
                                                          #{w 30028}#
                                                          #{mod 30030}#)))))
                                            #{vals 29816}#)
                                      (cons (cons 'lexical #{var 30036}#)
                                            #{bindings 29817}#)))))
                              (if (eqv? #{type 30025}# 'define-syntax-form)
                                (let ((#{id 30310}#
                                        (if (if (null? (car #{w 30028}#))
                                              (null? (cdr #{w 30028}#))
                                              #f)
                                          #{value 30026}#
                                          (if (if (vector? #{value 30026}#)
                                                (if (= (vector-length
                                                         #{value 30026}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{value 30026}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (let ((#{expression 30354}#
                                                    (vector-ref
                                                      #{value 30026}#
                                                      1))
                                                  (#{wrap 30355}#
                                                    (let ((#{w2 30365}#
                                                            (vector-ref
                                                              #{value 30026}#
                                                              2)))
                                                      (let ((#{m1 30366}#
                                                              (car #{w 30028}#))
                                                            (#{s1 30367}#
                                                              (cdr #{w 30028}#)))
                                                        (if (null? #{m1 30366}#)
                                                          (if (null? #{s1 30367}#)
                                                            #{w2 30365}#
                                                            (cons (car #{w2 30365}#)
                                                                  (let ((#{m2 30384}#
                                                                          (cdr #{w2 30365}#)))
                                                                    (if (null? #{m2 30384}#)
                                                                      #{s1 30367}#
                                                                      (append
                                                                        #{s1 30367}#
                                                                        #{m2 30384}#)))))
                                                          (cons (let ((#{m2 30392}#
                                                                        (car #{w2 30365}#)))
                                                                  (if (null? #{m2 30392}#)
                                                                    #{m1 30366}#
                                                                    (append
                                                                      #{m1 30366}#
                                                                      #{m2 30392}#)))
                                                                (let ((#{m2 30400}#
                                                                        (cdr #{w2 30365}#)))
                                                                  (if (null? #{m2 30400}#)
                                                                    #{s1 30367}#
                                                                    (append
                                                                      #{s1 30367}#
                                                                      #{m2 30400}#))))))))
                                                  (#{module 30356}#
                                                    (vector-ref
                                                      #{value 30026}#
                                                      3)))
                                              (vector
                                                'syntax-object
                                                #{expression 30354}#
                                                #{wrap 30355}#
                                                #{module 30356}#))
                                            (if (null? #{value 30026}#)
                                              #{value 30026}#
                                              (vector
                                                'syntax-object
                                                #{value 30026}#
                                                #{w 30028}#
                                                #{mod 30030}#)))))
                                      (#{label 30311}#
                                        (symbol->string (gensym "i"))))
                                  (begin
                                    (begin
                                      (let ((#{update 30320}#
                                              (cons (vector-ref #{id 30310}# 1)
                                                    (vector-ref
                                                      #{ribcage 29701}#
                                                      1))))
                                        (vector-set!
                                          #{ribcage 29701}#
                                          1
                                          #{update 30320}#))
                                      (let ((#{update 30432}#
                                              (cons (car (vector-ref
                                                           #{id 30310}#
                                                           2))
                                                    (vector-ref
                                                      #{ribcage 29701}#
                                                      2))))
                                        (vector-set!
                                          #{ribcage 29701}#
                                          2
                                          #{update 30432}#))
                                      (let ((#{update 30447}#
                                              (cons #{label 30311}#
                                                    (vector-ref
                                                      #{ribcage 29701}#
                                                      3))))
                                        (vector-set!
                                          #{ribcage 29701}#
                                          3
                                          #{update 30447}#)))
                                    (#{parse 29703}#
                                      (cdr #{body 29811}#)
                                      (cons #{id 30310}# #{ids 29812}#)
                                      (cons #{label 30311}# #{labels 29813}#)
                                      #{var-ids 29814}#
                                      #{vars 29815}#
                                      #{vals 29816}#
                                      (cons (cons 'macro
                                                  (cons #{er 29819}#
                                                        (if (if (null? (car #{w 30028}#))
                                                              (null? (cdr #{w 30028}#))
                                                              #f)
                                                          #{e 30027}#
                                                          (if (if (vector?
                                                                    #{e 30027}#)
                                                                (if (= (vector-length
                                                                         #{e 30027}#)
                                                                       4)
                                                                  (eq? (vector-ref
                                                                         #{e 30027}#
                                                                         0)
                                                                       'syntax-object)
                                                                  #f)
                                                                #f)
                                                            (let ((#{expression 30486}#
                                                                    (vector-ref
                                                                      #{e 30027}#
                                                                      1))
                                                                  (#{wrap 30487}#
                                                                    (let ((#{w2 30497}#
                                                                            (vector-ref
                                                                              #{e 30027}#
                                                                              2)))
                                                                      (let ((#{m1 30498}#
                                                                              (car #{w 30028}#))
                                                                            (#{s1 30499}#
                                                                              (cdr #{w 30028}#)))
                                                                        (if (null? #{m1 30498}#)
                                                                          (if (null? #{s1 30499}#)
                                                                            #{w2 30497}#
                                                                            (cons (car #{w2 30497}#)
                                                                                  (let ((#{m2 30516}#
                                                                                          (cdr #{w2 30497}#)))
                                                                                    (if (null? #{m2 30516}#)
                                                                                      #{s1 30499}#
                                                                                      (append
                                                                                        #{s1 30499}#
                                                                                        #{m2 30516}#)))))
                                                                          (cons (let ((#{m2 30524}#
                                                                                        (car #{w2 30497}#)))
                                                                                  (if (null? #{m2 30524}#)
                                                                                    #{m1 30498}#
                                                                                    (append
                                                                                      #{m1 30498}#
                                                                                      #{m2 30524}#)))
                                                                                (let ((#{m2 30532}#
                                                                                        (cdr #{w2 30497}#)))
                                                                                  (if (null? #{m2 30532}#)
                                                                                    #{s1 30499}#
                                                                                    (append
                                                                                      #{s1 30499}#
                                                                                      #{m2 30532}#))))))))
                                                                  (#{module 30488}#
                                                                    (vector-ref
                                                                      #{e 30027}#
                                                                      3)))
                                                              (vector
                                                                'syntax-object
                                                                #{expression 30486}#
                                                                #{wrap 30487}#
                                                                #{module 30488}#))
                                                            (if (null? #{e 30027}#)
                                                              #{e 30027}#
                                                              (vector
                                                                'syntax-object
                                                                #{e 30027}#
                                                                #{w 30028}#
                                                                #{mod 30030}#))))))
                                            #{bindings 29817}#))))
                                (if (eqv? #{type 30025}# 'begin-form)
                                  (let ((#{tmp 30559}#
                                          ($sc-dispatch
                                            #{e 30027}#
                                            '(_ . each-any))))
                                    (if #{tmp 30559}#
                                      (@apply
                                        (lambda (#{e1 30563}#)
                                          (#{parse 29703}#
                                            (letrec*
                                              ((#{f 30564}#
                                                 (lambda (#{forms 30780}#)
                                                   (if (null? #{forms 30780}#)
                                                     (cdr #{body 29811}#)
                                                     (cons (cons #{er 29819}#
                                                                 (let ((#{x 30784}#
                                                                         (car #{forms 30780}#)))
                                                                   (if (if (null? (car #{w 30028}#))
                                                                         (null? (cdr #{w 30028}#))
                                                                         #f)
                                                                     #{x 30784}#
                                                                     (if (if (vector?
                                                                               #{x 30784}#)
                                                                           (if (= (vector-length
                                                                                    #{x 30784}#)
                                                                                  4)
                                                                             (eq? (vector-ref
                                                                                    #{x 30784}#
                                                                                    0)
                                                                                  'syntax-object)
                                                                             #f)
                                                                           #f)
                                                                       (let ((#{expression 30802}#
                                                                               (vector-ref
                                                                                 #{x 30784}#
                                                                                 1))
                                                                             (#{wrap 30803}#
                                                                               (let ((#{w2 30811}#
                                                                                       (vector-ref
                                                                                         #{x 30784}#
                                                                                         2)))
                                                                                 (let ((#{m1 30812}#
                                                                                         (car #{w 30028}#))
                                                                                       (#{s1 30813}#
                                                                                         (cdr #{w 30028}#)))
                                                                                   (if (null? #{m1 30812}#)
                                                                                     (if (null? #{s1 30813}#)
                                                                                       #{w2 30811}#
                                                                                       (cons (car #{w2 30811}#)
                                                                                             (let ((#{m2 30828}#
                                                                                                     (cdr #{w2 30811}#)))
                                                                                               (if (null? #{m2 30828}#)
                                                                                                 #{s1 30813}#
                                                                                                 (append
                                                                                                   #{s1 30813}#
                                                                                                   #{m2 30828}#)))))
                                                                                     (cons (let ((#{m2 30836}#
                                                                                                   (car #{w2 30811}#)))
                                                                                             (if (null? #{m2 30836}#)
                                                                                               #{m1 30812}#
                                                                                               (append
                                                                                                 #{m1 30812}#
                                                                                                 #{m2 30836}#)))
                                                                                           (let ((#{m2 30844}#
                                                                                                   (cdr #{w2 30811}#)))
                                                                                             (if (null? #{m2 30844}#)
                                                                                               #{s1 30813}#
                                                                                               (append
                                                                                                 #{s1 30813}#
                                                                                                 #{m2 30844}#))))))))
                                                                             (#{module 30804}#
                                                                               (vector-ref
                                                                                 #{x 30784}#
                                                                                 3)))
                                                                         (vector
                                                                           'syntax-object
                                                                           #{expression 30802}#
                                                                           #{wrap 30803}#
                                                                           #{module 30804}#))
                                                                       (if (null? #{x 30784}#)
                                                                         #{x 30784}#
                                                                         (vector
                                                                           'syntax-object
                                                                           #{x 30784}#
                                                                           #{w 30028}#
                                                                           #{mod 30030}#))))))
                                                           (#{f 30564}#
                                                             (cdr #{forms 30780}#)))))))
                                              (#{f 30564}# #{e1 30563}#))
                                            #{ids 29812}#
                                            #{labels 29813}#
                                            #{var-ids 29814}#
                                            #{vars 29815}#
                                            #{vals 29816}#
                                            #{bindings 29817}#))
                                        #{tmp 30559}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{e 30027}#)))
                                  (if (eqv? #{type 30025}# 'local-syntax-form)
                                    (#{chi-local-syntax 4378}#
                                      #{value 30026}#
                                      #{e 30027}#
                                      #{er 29819}#
                                      #{w 30028}#
                                      #{s 30029}#
                                      #{mod 30030}#
                                      (lambda (#{forms 30870}#
                                               #{er 30871}#
                                               #{w 30872}#
                                               #{s 30873}#
                                               #{mod 30874}#)
                                        (#{parse 29703}#
                                          (letrec*
                                            ((#{f 30875}#
                                               (lambda (#{forms 31091}#)
                                                 (if (null? #{forms 31091}#)
                                                   (cdr #{body 29811}#)
                                                   (cons (cons #{er 30871}#
                                                               (let ((#{x 31095}#
                                                                       (car #{forms 31091}#)))
                                                                 (if (if (null? (car #{w 30872}#))
                                                                       (null? (cdr #{w 30872}#))
                                                                       #f)
                                                                   #{x 31095}#
                                                                   (if (if (vector?
                                                                             #{x 31095}#)
                                                                         (if (= (vector-length
                                                                                  #{x 31095}#)
                                                                                4)
                                                                           (eq? (vector-ref
                                                                                  #{x 31095}#
                                                                                  0)
                                                                                'syntax-object)
                                                                           #f)
                                                                         #f)
                                                                     (let ((#{expression 31113}#
                                                                             (vector-ref
                                                                               #{x 31095}#
                                                                               1))
                                                                           (#{wrap 31114}#
                                                                             (let ((#{w2 31122}#
                                                                                     (vector-ref
                                                                                       #{x 31095}#
                                                                                       2)))
                                                                               (let ((#{m1 31123}#
                                                                                       (car #{w 30872}#))
                                                                                     (#{s1 31124}#
                                                                                       (cdr #{w 30872}#)))
                                                                                 (if (null? #{m1 31123}#)
                                                                                   (if (null? #{s1 31124}#)
                                                                                     #{w2 31122}#
                                                                                     (cons (car #{w2 31122}#)
                                                                                           (let ((#{m2 31139}#
                                                                                                   (cdr #{w2 31122}#)))
                                                                                             (if (null? #{m2 31139}#)
                                                                                               #{s1 31124}#
                                                                                               (append
                                                                                                 #{s1 31124}#
                                                                                                 #{m2 31139}#)))))
                                                                                   (cons (let ((#{m2 31147}#
                                                                                                 (car #{w2 31122}#)))
                                                                                           (if (null? #{m2 31147}#)
                                                                                             #{m1 31123}#
                                                                                             (append
                                                                                               #{m1 31123}#
                                                                                               #{m2 31147}#)))
                                                                                         (let ((#{m2 31155}#
                                                                                                 (cdr #{w2 31122}#)))
                                                                                           (if (null? #{m2 31155}#)
                                                                                             #{s1 31124}#
                                                                                             (append
                                                                                               #{s1 31124}#
                                                                                               #{m2 31155}#))))))))
                                                                           (#{module 31115}#
                                                                             (vector-ref
                                                                               #{x 31095}#
                                                                               3)))
                                                                       (vector
                                                                         'syntax-object
                                                                         #{expression 31113}#
                                                                         #{wrap 31114}#
                                                                         #{module 31115}#))
                                                                     (if (null? #{x 31095}#)
                                                                       #{x 31095}#
                                                                       (vector
                                                                         'syntax-object
                                                                         #{x 31095}#
                                                                         #{w 30872}#
                                                                         #{mod 30874}#))))))
                                                         (#{f 30875}#
                                                           (cdr #{forms 31091}#)))))))
                                            (#{f 30875}# #{forms 30870}#))
                                          #{ids 29812}#
                                          #{labels 29813}#
                                          #{var-ids 29814}#
                                          #{vars 29815}#
                                          #{vals 29816}#
                                          #{bindings 29817}#)))
                                    (if (null? #{ids 29812}#)
                                      (#{build-sequence 4322}#
                                        #f
                                        (map (lambda (#{x 31244}#)
                                               (#{chi 4373}#
                                                 (cdr #{x 31244}#)
                                                 (car #{x 31244}#)
                                                 '(())
                                                 #{mod 30030}#))
                                             (cons (cons #{er 29819}#
                                                         (let ((#{x 31323}#
                                                                 (begin
                                                                   (if (if (pair? #{e 30027}#)
                                                                         #{s 30029}#
                                                                         #f)
                                                                     (set-source-properties!
                                                                       #{e 30027}#
                                                                       #{s 30029}#))
                                                                   #{e 30027}#)))
                                                           (if (if (null? (car #{w 30028}#))
                                                                 (null? (cdr #{w 30028}#))
                                                                 #f)
                                                             #{x 31323}#
                                                             (if (if (vector?
                                                                       #{x 31323}#)
                                                                   (if (= (vector-length
                                                                            #{x 31323}#)
                                                                          4)
                                                                     (eq? (vector-ref
                                                                            #{x 31323}#
                                                                            0)
                                                                          'syntax-object)
                                                                     #f)
                                                                   #f)
                                                               (let ((#{expression 31355}#
                                                                       (vector-ref
                                                                         #{x 31323}#
                                                                         1))
                                                                     (#{wrap 31356}#
                                                                       (let ((#{w2 31364}#
                                                                               (vector-ref
                                                                                 #{x 31323}#
                                                                                 2)))
                                                                         (let ((#{m1 31365}#
                                                                                 (car #{w 30028}#))
                                                                               (#{s1 31366}#
                                                                                 (cdr #{w 30028}#)))
                                                                           (if (null? #{m1 31365}#)
                                                                             (if (null? #{s1 31366}#)
                                                                               #{w2 31364}#
                                                                               (cons (car #{w2 31364}#)
                                                                                     (let ((#{m2 31381}#
                                                                                             (cdr #{w2 31364}#)))
                                                                                       (if (null? #{m2 31381}#)
                                                                                         #{s1 31366}#
                                                                                         (append
                                                                                           #{s1 31366}#
                                                                                           #{m2 31381}#)))))
                                                                             (cons (let ((#{m2 31389}#
                                                                                           (car #{w2 31364}#)))
                                                                                     (if (null? #{m2 31389}#)
                                                                                       #{m1 31365}#
                                                                                       (append
                                                                                         #{m1 31365}#
                                                                                         #{m2 31389}#)))
                                                                                   (let ((#{m2 31397}#
                                                                                           (cdr #{w2 31364}#)))
                                                                                     (if (null? #{m2 31397}#)
                                                                                       #{s1 31366}#
                                                                                       (append
                                                                                         #{s1 31366}#
                                                                                         #{m2 31397}#))))))))
                                                                     (#{module 31357}#
                                                                       (vector-ref
                                                                         #{x 31323}#
                                                                         3)))
                                                                 (vector
                                                                   'syntax-object
                                                                   #{expression 31355}#
                                                                   #{wrap 31356}#
                                                                   #{module 31357}#))
                                                               (if (null? #{x 31323}#)
                                                                 #{x 31323}#
                                                                 (vector
                                                                   'syntax-object
                                                                   #{x 31323}#
                                                                   #{w 30028}#
                                                                   #{mod 30030}#))))))
                                                   (cdr #{body 29811}#))))
                                      (begin
                                        (if (not (#{valid-bound-ids? 4363}#
                                                   #{ids 29812}#))
                                          (syntax-violation
                                            #f
                                            "invalid or duplicate identifier in definition"
                                            #{outer-form 29696}#))
                                        (letrec*
                                          ((#{loop 31496}#
                                             (lambda (#{bs 31499}#
                                                      #{er-cache 31500}#
                                                      #{r-cache 31501}#)
                                               (if (not (null? #{bs 31499}#))
                                                 (let ((#{b 31502}#
                                                         (car #{bs 31499}#)))
                                                   (if (eq? (car #{b 31502}#)
                                                            'macro)
                                                     (let ((#{er 31504}#
                                                             (car (cdr #{b 31502}#))))
                                                       (let ((#{r-cache 31505}#
                                                               (if (eq? #{er 31504}#
                                                                        #{er-cache 31500}#)
                                                                 #{r-cache 31501}#
                                                                 (#{macros-only-env 4337}#
                                                                   #{er 31504}#))))
                                                         (begin
                                                           (set-cdr!
                                                             #{b 31502}#
                                                             (#{eval-local-transformer 4379}#
                                                               (#{chi 4373}#
                                                                 (cdr (cdr #{b 31502}#))
                                                                 #{r-cache 31505}#
                                                                 '(())
                                                                 #{mod 30030}#)
                                                               #{mod 30030}#))
                                                           (#{loop 31496}#
                                                             (cdr #{bs 31499}#)
                                                             #{er 31504}#
                                                             #{r-cache 31505}#))))
                                                     (#{loop 31496}#
                                                       (cdr #{bs 31499}#)
                                                       #{er-cache 31500}#
                                                       #{r-cache 31501}#)))))))
                                          (#{loop 31496}#
                                            #{bindings 29817}#
                                            #f
                                            #f))
                                        (set-cdr!
                                          #{r 29700}#
                                          (#{extend-env 4335}#
                                            #{labels 29813}#
                                            #{bindings 29817}#
                                            (cdr #{r 29700}#)))
                                        (#{build-letrec 4325}#
                                          #f
                                          #t
                                          (reverse
                                            (map syntax->datum
                                                 #{var-ids 29814}#))
                                          (reverse #{vars 29815}#)
                                          (map (lambda (#{x 31924}#)
                                                 (#{chi 4373}#
                                                   (cdr #{x 31924}#)
                                                   (car #{x 31924}#)
                                                   '(())
                                                   #{mod 30030}#))
                                               (reverse #{vals 29816}#))
                                          (#{build-sequence 4322}#
                                            #f
                                            (map (lambda (#{x 32068}#)
                                                   (#{chi 4373}#
                                                     (cdr #{x 32068}#)
                                                     (car #{x 32068}#)
                                                     '(())
                                                     #{mod 30030}#))
                                                 (cons (cons #{er 29819}#
                                                             (let ((#{x 32147}#
                                                                     (begin
                                                                       (if (if (pair? #{e 30027}#)
                                                                             #{s 30029}#
                                                                             #f)
                                                                         (set-source-properties!
                                                                           #{e 30027}#
                                                                           #{s 30029}#))
                                                                       #{e 30027}#)))
                                                               (if (if (null? (car #{w 30028}#))
                                                                     (null? (cdr #{w 30028}#))
                                                                     #f)
                                                                 #{x 32147}#
                                                                 (if (if (vector?
                                                                           #{x 32147}#)
                                                                       (if (= (vector-length
                                                                                #{x 32147}#)
                                                                              4)
                                                                         (eq? (vector-ref
                                                                                #{x 32147}#
                                                                                0)
                                                                              'syntax-object)
                                                                         #f)
                                                                       #f)
                                                                   (let ((#{expression 32179}#
                                                                           (vector-ref
                                                                             #{x 32147}#
                                                                             1))
                                                                         (#{wrap 32180}#
                                                                           (let ((#{w2 32188}#
                                                                                   (vector-ref
                                                                                     #{x 32147}#
                                                                                     2)))
                                                                             (let ((#{m1 32189}#
                                                                                     (car #{w 30028}#))
                                                                                   (#{s1 32190}#
                                                                                     (cdr #{w 30028}#)))
                                                                               (if (null? #{m1 32189}#)
                                                                                 (if (null? #{s1 32190}#)
                                                                                   #{w2 32188}#
                                                                                   (cons (car #{w2 32188}#)
                                                                                         (let ((#{m2 32205}#
                                                                                                 (cdr #{w2 32188}#)))
                                                                                           (if (null? #{m2 32205}#)
                                                                                             #{s1 32190}#
                                                                                             (append
                                                                                               #{s1 32190}#
                                                                                               #{m2 32205}#)))))
                                                                                 (cons (let ((#{m2 32213}#
                                                                                               (car #{w2 32188}#)))
                                                                                         (if (null? #{m2 32213}#)
                                                                                           #{m1 32189}#
                                                                                           (append
                                                                                             #{m1 32189}#
                                                                                             #{m2 32213}#)))
                                                                                       (let ((#{m2 32221}#
                                                                                               (cdr #{w2 32188}#)))
                                                                                         (if (null? #{m2 32221}#)
                                                                                           #{s1 32190}#
                                                                                           (append
                                                                                             #{s1 32190}#
                                                                                             #{m2 32221}#))))))))
                                                                         (#{module 32181}#
                                                                           (vector-ref
                                                                             #{x 32147}#
                                                                             3)))
                                                                     (vector
                                                                       'syntax-object
                                                                       #{expression 32179}#
                                                                       #{wrap 32180}#
                                                                       #{module 32181}#))
                                                                   (if (null? #{x 32147}#)
                                                                     #{x 32147}#
                                                                     (vector
                                                                       'syntax-object
                                                                       #{x 32147}#
                                                                       #{w 30028}#
                                                                       #{mod 30030}#))))))
                                                       (cdr #{body 29811}#))))))))))))))))))
               (#{parse 29703}#
                 (map (lambda (#{x 29706}#)
                        (cons #{r 29700}#
                              (if (if (null? (car #{w 29702}#))
                                    (null? (cdr #{w 29702}#))
                                    #f)
                                #{x 29706}#
                                (if (if (vector? #{x 29706}#)
                                      (if (= (vector-length #{x 29706}#) 4)
                                        (eq? (vector-ref #{x 29706}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (let ((#{expression 29742}#
                                          (vector-ref #{x 29706}# 1))
                                        (#{wrap 29743}#
                                          (let ((#{w2 29753}#
                                                  (vector-ref #{x 29706}# 2)))
                                            (let ((#{m1 29754}#
                                                    (car #{w 29702}#))
                                                  (#{s1 29755}#
                                                    (cdr #{w 29702}#)))
                                              (if (null? #{m1 29754}#)
                                                (if (null? #{s1 29755}#)
                                                  #{w2 29753}#
                                                  (cons (car #{w2 29753}#)
                                                        (let ((#{m2 29772}#
                                                                (cdr #{w2 29753}#)))
                                                          (if (null? #{m2 29772}#)
                                                            #{s1 29755}#
                                                            (append
                                                              #{s1 29755}#
                                                              #{m2 29772}#)))))
                                                (cons (let ((#{m2 29780}#
                                                              (car #{w2 29753}#)))
                                                        (if (null? #{m2 29780}#)
                                                          #{m1 29754}#
                                                          (append
                                                            #{m1 29754}#
                                                            #{m2 29780}#)))
                                                      (let ((#{m2 29788}#
                                                              (cdr #{w2 29753}#)))
                                                        (if (null? #{m2 29788}#)
                                                          #{s1 29755}#
                                                          (append
                                                            #{s1 29755}#
                                                            #{m2 29788}#))))))))
                                        (#{module 29744}#
                                          (vector-ref #{x 29706}# 3)))
                                    (vector
                                      'syntax-object
                                      #{expression 29742}#
                                      #{wrap 29743}#
                                      #{module 29744}#))
                                  (if (null? #{x 29706}#)
                                    #{x 29706}#
                                    (vector
                                      'syntax-object
                                      #{x 29706}#
                                      #{w 29702}#
                                      #{mod 29699}#))))))
                      #{body 29695}#)
                 '()
                 '()
                 '()
                 '()
                 '()
                 '())))))))
   (#{chi-local-syntax 4378}#
     (lambda (#{rec? 32236}#
              #{e 32237}#
              #{r 32238}#
              #{w 32239}#
              #{s 32240}#
              #{mod 32241}#
              #{k 32242}#)
       (let ((#{tmp 32244}#
               ($sc-dispatch
                 #{e 32237}#
                 '(_ #(each (any any)) any . each-any))))
         (if #{tmp 32244}#
           (@apply
             (lambda (#{id 32248}#
                      #{val 32249}#
                      #{e1 32250}#
                      #{e2 32251}#)
               (if (not (#{valid-bound-ids? 4363}# #{id 32248}#))
                 (syntax-violation
                   #f
                   "duplicate bound keyword"
                   #{e 32237}#)
                 (let ((#{labels 32348}#
                         (#{gen-labels 4344}# #{id 32248}#)))
                   (let ((#{new-w 32349}#
                           (#{make-binding-wrap 4355}#
                             #{id 32248}#
                             #{labels 32348}#
                             #{w 32239}#)))
                     (#{k 32242}#
                       (cons #{e1 32250}# #{e2 32251}#)
                       (#{extend-env 4335}#
                         #{labels 32348}#
                         (let ((#{trans-r 32389}#
                                 (#{macros-only-env 4337}# #{r 32238}#)))
                           (begin
                             (if #{rec? 32236}# (if #f #f))
                             (map (lambda (#{x 32390}#)
                                    (cons 'macro
                                          (#{eval-local-transformer 4379}#
                                            (#{chi 4373}#
                                              #{x 32390}#
                                              #{trans-r 32389}#
                                              (if #{rec? 32236}#
                                                #{new-w 32349}#
                                                #{w 32239}#)
                                              #{mod 32241}#)
                                            #{mod 32241}#)))
                                  #{val 32249}#)))
                         #{r 32238}#)
                       #{new-w 32349}#
                       #{s 32240}#
                       #{mod 32241}#)))))
             #{tmp 32244}#)
           (syntax-violation
             #f
             "bad local syntax definition"
             (let ((#{x 32715}#
                     (begin
                       (if (if (pair? #{e 32237}#) #{s 32240}# #f)
                         (set-source-properties! #{e 32237}# #{s 32240}#))
                       #{e 32237}#)))
               (if (if (null? (car #{w 32239}#))
                     (null? (cdr #{w 32239}#))
                     #f)
                 #{x 32715}#
                 (if (if (vector? #{x 32715}#)
                       (if (= (vector-length #{x 32715}#) 4)
                         (eq? (vector-ref #{x 32715}# 0) 'syntax-object)
                         #f)
                       #f)
                   (let ((#{expression 32747}# (vector-ref #{x 32715}# 1))
                         (#{wrap 32748}#
                           (let ((#{w2 32756}# (vector-ref #{x 32715}# 2)))
                             (let ((#{m1 32757}# (car #{w 32239}#))
                                   (#{s1 32758}# (cdr #{w 32239}#)))
                               (if (null? #{m1 32757}#)
                                 (if (null? #{s1 32758}#)
                                   #{w2 32756}#
                                   (cons (car #{w2 32756}#)
                                         (let ((#{m2 32773}#
                                                 (cdr #{w2 32756}#)))
                                           (if (null? #{m2 32773}#)
                                             #{s1 32758}#
                                             (append
                                               #{s1 32758}#
                                               #{m2 32773}#)))))
                                 (cons (let ((#{m2 32781}# (car #{w2 32756}#)))
                                         (if (null? #{m2 32781}#)
                                           #{m1 32757}#
                                           (append #{m1 32757}# #{m2 32781}#)))
                                       (let ((#{m2 32789}# (cdr #{w2 32756}#)))
                                         (if (null? #{m2 32789}#)
                                           #{s1 32758}#
                                           (append
                                             #{s1 32758}#
                                             #{m2 32789}#))))))))
                         (#{module 32749}# (vector-ref #{x 32715}# 3)))
                     (vector
                       'syntax-object
                       #{expression 32747}#
                       #{wrap 32748}#
                       #{module 32749}#))
                   (if (null? #{x 32715}#)
                     #{x 32715}#
                     (vector
                       'syntax-object
                       #{x 32715}#
                       #{w 32239}#
                       #{mod 32241}#))))))))))
   (#{eval-local-transformer 4379}#
     (lambda (#{expanded 32807}# #{mod 32808}#)
       (let ((#{p 32809}# (primitive-eval #{expanded 32807}#)))
         (if (procedure? #{p 32809}#)
           #{p 32809}#
           (syntax-violation
             #f
             "nonprocedure transformer"
             #{p 32809}#)))))
   (#{ellipsis? 4381}#
     (lambda (#{x 5832}#)
       (if (if (if (vector? #{x 5832}#)
                 (if (= (vector-length #{x 5832}#) 4)
                   (eq? (vector-ref #{x 5832}# 0) 'syntax-object)
                   #f)
                 #f)
             (symbol? (vector-ref #{x 5832}# 1))
             #f)
         (#{free-id=? 4361}#
           #{x 5832}#
           '#(syntax-object
              ...
              ((top)
               #(ribcage () () ())
               #(ribcage () () ())
               #(ribcage #(x) #((top)) #("i2261"))
               #(ribcage
                 (lambda-var-list
                   gen-var
                   strip
                   chi-lambda-case
                   lambda*-formals
                   chi-simple-lambda
                   lambda-formals
                   ellipsis?
                   chi-void
                   eval-local-transformer
                   chi-local-syntax
                   chi-body
                   chi-macro
                   chi-call
                   chi-expr
                   chi
                   syntax-type
                   chi-when-list
                   chi-install-global
                   chi-top-sequence
                   chi-sequence
                   source-wrap
                   wrap
                   bound-id-member?
                   distinct-bound-ids?
                   valid-bound-ids?
                   bound-id=?
                   free-id=?
                   id-var-name
                   same-marks?
                   join-marks
                   join-wraps
                   smart-append
                   make-binding-wrap
                   extend-ribcage!
                   make-empty-ribcage
                   new-mark
                   anti-mark
                   the-anti-mark
                   top-marked?
                   top-wrap
                   empty-wrap
                   set-ribcage-labels!
                   set-ribcage-marks!
                   set-ribcage-symnames!
                   ribcage-labels
                   ribcage-marks
                   ribcage-symnames
                   ribcage?
                   make-ribcage
                   gen-labels
                   gen-label
                   make-rename
                   rename-marks
                   rename-new
                   rename-old
                   subst-rename?
                   wrap-subst
                   wrap-marks
                   make-wrap
                   id-sym-name&marks
                   id-sym-name
                   id?
                   nonsymbol-id?
                   global-extend
                   lookup
                   macros-only-env
                   extend-var-env
                   extend-env
                   null-env
                   binding-value
                   binding-type
                   make-binding
                   arg-check
                   source-annotation
                   no-source
                   set-syntax-object-module!
                   set-syntax-object-wrap!
                   set-syntax-object-expression!
                   syntax-object-module
                   syntax-object-wrap
                   syntax-object-expression
                   syntax-object?
                   make-syntax-object
                   build-lexical-var
                   build-letrec
                   build-named-let
                   build-let
                   build-sequence
                   build-data
                   build-primref
                   build-primcall
                   build-lambda-case
                   build-case-lambda
                   build-simple-lambda
                   build-global-definition
                   build-global-assignment
                   build-global-reference
                   analyze-variable
                   build-lexical-assignment
                   build-lexical-reference
                   build-dynlet
                   build-conditional
                   build-call
                   build-void
                   maybe-name-value!
                   decorate-source
                   get-global-definition-hook
                   put-global-definition-hook
                   gensym-hook
                   local-eval-hook
                   top-level-eval-hook
                   fx<
                   fx=
                   fx-
                   fx+
                   set-lambda-meta!
                   lambda-meta
                   lambda?
                   make-dynlet
                   make-letrec
                   make-let
                   make-lambda-case
                   make-lambda
                   make-seq
                   make-primcall
                   make-call
                   make-conditional
                   make-toplevel-define
                   make-toplevel-set
                   make-toplevel-ref
                   make-module-set
                   make-module-ref
                   make-lexical-set
                   make-lexical-ref
                   make-primitive-ref
                   make-const
                   make-void)
                 ((top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top))
                 ("i471"
                  "i469"
                  "i467"
                  "i465"
                  "i463"
                  "i461"
                  "i459"
                  "i457"
                  "i455"
                  "i453"
                  "i451"
                  "i449"
                  "i447"
                  "i445"
                  "i443"
                  "i441"
                  "i439"
                  "i437"
                  "i435"
                  "i433"
                  "i431"
                  "i429"
                  "i427"
                  "i425"
                  "i423"
                  "i421"
                  "i419"
                  "i417"
                  "i415"
                  "i413"
                  "i411"
                  "i409"
                  "i407"
                  "i405"
                  "i403"
                  "i402"
                  "i400"
                  "i397"
                  "i396"
                  "i395"
                  "i393"
                  "i392"
                  "i390"
                  "i388"
                  "i386"
                  "i384"
                  "i382"
                  "i380"
                  "i378"
                  "i376"
                  "i373"
                  "i371"
                  "i370"
                  "i368"
                  "i366"
                  "i364"
                  "i362"
                  "i361"
                  "i360"
                  "i359"
                  "i357"
                  "i356"
                  "i353"
                  "i351"
                  "i349"
                  "i347"
                  "i345"
                  "i343"
                  "i341"
                  "i340"
                  "i339"
                  "i337"
                  "i335"
                  "i334"
                  "i331"
                  "i330"
                  "i328"
                  "i326"
                  "i324"
                  "i322"
                  "i320"
                  "i318"
                  "i316"
                  "i314"
                  "i312"
                  "i309"
                  "i307"
                  "i305"
                  "i303"
                  "i301"
                  "i299"
                  "i297"
                  "i295"
                  "i293"
                  "i291"
                  "i289"
                  "i287"
                  "i285"
                  "i283"
                  "i281"
                  "i279"
                  "i277"
                  "i275"
                  "i273"
                  "i271"
                  "i269"
                  "i267"
                  "i265"
                  "i263"
                  "i262"
                  "i259"
                  "i257"
                  "i256"
                  "i255"
                  "i254"
                  "i253"
                  "i251"
                  "i249"
                  "i247"
                  "i244"
                  "i242"
                  "i240"
                  "i238"
                  "i236"
                  "i234"
                  "i232"
                  "i230"
                  "i228"
                  "i226"
                  "i224"
                  "i222"
                  "i220"
                  "i218"
                  "i216"
                  "i214"
                  "i212"
                  "i210"
                  "i208"))
               #(ribcage
                 (define-structure
                   define-expansion-accessors
                   define-expansion-constructors)
                 ((top) (top) (top))
                 ("i46" "i45" "i44")))
              (hygiene guile)))
         #f)))
   (#{lambda-formals 4382}#
     (lambda (#{orig-args 32814}#)
       (letrec*
         ((#{req 32815}#
            (lambda (#{args 32819}# #{rreq 32820}#)
              (let ((#{tmp 32822}# ($sc-dispatch #{args 32819}# '())))
                (if #{tmp 32822}#
                  (@apply
                    (lambda ()
                      (#{check 32816}# (reverse #{rreq 32820}#) #f))
                    #{tmp 32822}#)
                  (let ((#{tmp 32938}#
                          ($sc-dispatch #{args 32819}# '(any . any))))
                    (if (if #{tmp 32938}#
                          (@apply
                            (lambda (#{a 32942}# #{b 32943}#)
                              (if (symbol? #{a 32942}#)
                                #t
                                (if (if (vector? #{a 32942}#)
                                      (if (= (vector-length #{a 32942}#) 4)
                                        (eq? (vector-ref #{a 32942}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 32942}# 1))
                                  #f)))
                            #{tmp 32938}#)
                          #f)
                      (@apply
                        (lambda (#{a 32970}# #{b 32971}#)
                          (#{req 32815}#
                            #{b 32971}#
                            (cons #{a 32970}# #{rreq 32820}#)))
                        #{tmp 32938}#)
                      (let ((#{tmp 32972}# (list #{args 32819}#)))
                        (if (@apply
                              (lambda (#{r 32974}#)
                                (if (symbol? #{r 32974}#)
                                  #t
                                  (if (if (vector? #{r 32974}#)
                                        (if (= (vector-length #{r 32974}#) 4)
                                          (eq? (vector-ref #{r 32974}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref #{r 32974}# 1))
                                    #f)))
                              #{tmp 32972}#)
                          (@apply
                            (lambda (#{r 33004}#)
                              (#{check 32816}#
                                (reverse #{rreq 32820}#)
                                #{r 33004}#))
                            #{tmp 32972}#)
                          (syntax-violation
                            'lambda
                            "invalid argument list"
                            #{orig-args 32814}#
                            #{args 32819}#)))))))))
          (#{check 32816}#
            (lambda (#{req 33128}# #{rest 33129}#)
              (if (#{distinct-bound-ids? 4364}#
                    (if #{rest 33129}#
                      (cons #{rest 33129}# #{req 33128}#)
                      #{req 33128}#))
                (values #{req 33128}# #f #{rest 33129}# #f)
                (syntax-violation
                  'lambda
                  "duplicate identifier in argument list"
                  #{orig-args 32814}#)))))
         (#{req 32815}# #{orig-args 32814}# '()))))
   (#{chi-simple-lambda 4383}#
     (lambda (#{e 33238}#
              #{r 33239}#
              #{w 33240}#
              #{s 33241}#
              #{mod 33242}#
              #{req 33243}#
              #{rest 33244}#
              #{meta 33245}#
              #{body 33246}#)
       (let ((#{ids 33247}#
               (if #{rest 33244}#
                 (append #{req 33243}# (list #{rest 33244}#))
                 #{req 33243}#)))
         (let ((#{vars 33248}#
                 (map #{gen-var 4387}# #{ids 33247}#)))
           (let ((#{labels 33249}#
                   (#{gen-labels 4344}# #{ids 33247}#)))
             (#{build-simple-lambda 4316}#
               #{s 33241}#
               (map syntax->datum #{req 33243}#)
               (if #{rest 33244}#
                 (syntax->datum #{rest 33244}#)
                 #f)
               #{vars 33248}#
               #{meta 33245}#
               (#{chi-body 4377}#
                 #{body 33246}#
                 (let ((#{x 33438}#
                         (begin
                           (if (if (pair? #{e 33238}#) #{s 33241}# #f)
                             (set-source-properties! #{e 33238}# #{s 33241}#))
                           #{e 33238}#)))
                   (if (if (null? (car #{w 33240}#))
                         (null? (cdr #{w 33240}#))
                         #f)
                     #{x 33438}#
                     (if (if (vector? #{x 33438}#)
                           (if (= (vector-length #{x 33438}#) 4)
                             (eq? (vector-ref #{x 33438}# 0) 'syntax-object)
                             #f)
                           #f)
                       (let ((#{expression 33470}# (vector-ref #{x 33438}# 1))
                             (#{wrap 33471}#
                               (let ((#{w2 33479}# (vector-ref #{x 33438}# 2)))
                                 (let ((#{m1 33480}# (car #{w 33240}#))
                                       (#{s1 33481}# (cdr #{w 33240}#)))
                                   (if (null? #{m1 33480}#)
                                     (if (null? #{s1 33481}#)
                                       #{w2 33479}#
                                       (cons (car #{w2 33479}#)
                                             (let ((#{m2 33496}#
                                                     (cdr #{w2 33479}#)))
                                               (if (null? #{m2 33496}#)
                                                 #{s1 33481}#
                                                 (append
                                                   #{s1 33481}#
                                                   #{m2 33496}#)))))
                                     (cons (let ((#{m2 33504}#
                                                   (car #{w2 33479}#)))
                                             (if (null? #{m2 33504}#)
                                               #{m1 33480}#
                                               (append
                                                 #{m1 33480}#
                                                 #{m2 33504}#)))
                                           (let ((#{m2 33512}#
                                                   (cdr #{w2 33479}#)))
                                             (if (null? #{m2 33512}#)
                                               #{s1 33481}#
                                               (append
                                                 #{s1 33481}#
                                                 #{m2 33512}#))))))))
                             (#{module 33472}# (vector-ref #{x 33438}# 3)))
                         (vector
                           'syntax-object
                           #{expression 33470}#
                           #{wrap 33471}#
                           #{module 33472}#))
                       (if (null? #{x 33438}#)
                         #{x 33438}#
                         (vector
                           'syntax-object
                           #{x 33438}#
                           #{w 33240}#
                           #{mod 33242}#)))))
                 (#{extend-var-env 4336}#
                   #{labels 33249}#
                   #{vars 33248}#
                   #{r 33239}#)
                 (#{make-binding-wrap 4355}#
                   #{ids 33247}#
                   #{labels 33249}#
                   #{w 33240}#)
                 #{mod 33242}#)))))))
   (#{lambda*-formals 4384}#
     (lambda (#{orig-args 33743}#)
       (letrec*
         ((#{req 33744}#
            (lambda (#{args 33751}# #{rreq 33752}#)
              (let ((#{tmp 33754}# ($sc-dispatch #{args 33751}# '())))
                (if #{tmp 33754}#
                  (@apply
                    (lambda ()
                      (#{check 33748}#
                        (reverse #{rreq 33752}#)
                        '()
                        #f
                        '()))
                    #{tmp 33754}#)
                  (let ((#{tmp 33873}#
                          ($sc-dispatch #{args 33751}# '(any . any))))
                    (if (if #{tmp 33873}#
                          (@apply
                            (lambda (#{a 33877}# #{b 33878}#)
                              (if (symbol? #{a 33877}#)
                                #t
                                (if (if (vector? #{a 33877}#)
                                      (if (= (vector-length #{a 33877}#) 4)
                                        (eq? (vector-ref #{a 33877}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 33877}# 1))
                                  #f)))
                            #{tmp 33873}#)
                          #f)
                      (@apply
                        (lambda (#{a 33905}# #{b 33906}#)
                          (#{req 33744}#
                            #{b 33906}#
                            (cons #{a 33905}# #{rreq 33752}#)))
                        #{tmp 33873}#)
                      (let ((#{tmp 33907}#
                              ($sc-dispatch #{args 33751}# '(any . any))))
                        (if (if #{tmp 33907}#
                              (@apply
                                (lambda (#{a 33911}# #{b 33912}#)
                                  (eq? (syntax->datum #{a 33911}#) #:optional))
                                #{tmp 33907}#)
                              #f)
                          (@apply
                            (lambda (#{a 33913}# #{b 33914}#)
                              (#{opt 33745}#
                                #{b 33914}#
                                (reverse #{rreq 33752}#)
                                '()))
                            #{tmp 33907}#)
                          (let ((#{tmp 33917}#
                                  ($sc-dispatch #{args 33751}# '(any . any))))
                            (if (if #{tmp 33917}#
                                  (@apply
                                    (lambda (#{a 33921}# #{b 33922}#)
                                      (eq? (syntax->datum #{a 33921}#) #:key))
                                    #{tmp 33917}#)
                                  #f)
                              (@apply
                                (lambda (#{a 33923}# #{b 33924}#)
                                  (#{key 33746}#
                                    #{b 33924}#
                                    (reverse #{rreq 33752}#)
                                    '()
                                    '()))
                                #{tmp 33917}#)
                              (let ((#{tmp 33927}#
                                      ($sc-dispatch
                                        #{args 33751}#
                                        '(any any))))
                                (if (if #{tmp 33927}#
                                      (@apply
                                        (lambda (#{a 33931}# #{b 33932}#)
                                          (eq? (syntax->datum #{a 33931}#)
                                               #:rest))
                                        #{tmp 33927}#)
                                      #f)
                                  (@apply
                                    (lambda (#{a 33933}# #{b 33934}#)
                                      (#{rest 33747}#
                                        #{b 33934}#
                                        (reverse #{rreq 33752}#)
                                        '()
                                        '()))
                                    #{tmp 33927}#)
                                  (let ((#{tmp 33937}# (list #{args 33751}#)))
                                    (if (@apply
                                          (lambda (#{r 33939}#)
                                            (if (symbol? #{r 33939}#)
                                              #t
                                              (if (if (vector? #{r 33939}#)
                                                    (if (= (vector-length
                                                             #{r 33939}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{r 33939}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref #{r 33939}# 1))
                                                #f)))
                                          #{tmp 33937}#)
                                      (@apply
                                        (lambda (#{r 33969}#)
                                          (#{rest 33747}#
                                            #{r 33969}#
                                            (reverse #{rreq 33752}#)
                                            '()
                                            '()))
                                        #{tmp 33937}#)
                                      (syntax-violation
                                        'lambda*
                                        "invalid argument list"
                                        #{orig-args 33743}#
                                        #{args 33751}#)))))))))))))))
          (#{opt 33745}#
            (lambda (#{args 33988}# #{req 33989}# #{ropt 33990}#)
              (let ((#{tmp 33992}# ($sc-dispatch #{args 33988}# '())))
                (if #{tmp 33992}#
                  (@apply
                    (lambda ()
                      (#{check 33748}#
                        #{req 33989}#
                        (reverse #{ropt 33990}#)
                        #f
                        '()))
                    #{tmp 33992}#)
                  (let ((#{tmp 34113}#
                          ($sc-dispatch #{args 33988}# '(any . any))))
                    (if (if #{tmp 34113}#
                          (@apply
                            (lambda (#{a 34117}# #{b 34118}#)
                              (if (symbol? #{a 34117}#)
                                #t
                                (if (if (vector? #{a 34117}#)
                                      (if (= (vector-length #{a 34117}#) 4)
                                        (eq? (vector-ref #{a 34117}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 34117}# 1))
                                  #f)))
                            #{tmp 34113}#)
                          #f)
                      (@apply
                        (lambda (#{a 34145}# #{b 34146}#)
                          (#{opt 33745}#
                            #{b 34146}#
                            #{req 33989}#
                            (cons (cons #{a 34145}#
                                        '(#(syntax-object
                                            #f
                                            ((top)
                                             #(ribcage
                                               #(a b)
                                               #((top) (top))
                                               #("i2400" "i2401"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(args req ropt)
                                               #((top) (top) (top))
                                               #("i2390" "i2391" "i2392"))
                                             #(ribcage
                                               (check rest key opt req)
                                               ((top) (top) (top) (top) (top))
                                               ("i2336"
                                                "i2334"
                                                "i2332"
                                                "i2330"
                                                "i2328"))
                                             #(ribcage
                                               #(orig-args)
                                               #((top))
                                               #("i2327"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 chi-lambda-case
                                                 lambda*-formals
                                                 chi-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 chi-void
                                                 eval-local-transformer
                                                 chi-local-syntax
                                                 chi-body
                                                 chi-macro
                                                 chi-call
                                                 chi-expr
                                                 chi
                                                 syntax-type
                                                 chi-when-list
                                                 chi-install-global
                                                 chi-top-sequence
                                                 chi-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-primcall
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-call
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-seq
                                                 make-primcall
                                                 make-call
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i471"
                                                "i469"
                                                "i467"
                                                "i465"
                                                "i463"
                                                "i461"
                                                "i459"
                                                "i457"
                                                "i455"
                                                "i453"
                                                "i451"
                                                "i449"
                                                "i447"
                                                "i445"
                                                "i443"
                                                "i441"
                                                "i439"
                                                "i437"
                                                "i435"
                                                "i433"
                                                "i431"
                                                "i429"
                                                "i427"
                                                "i425"
                                                "i423"
                                                "i421"
                                                "i419"
                                                "i417"
                                                "i415"
                                                "i413"
                                                "i411"
                                                "i409"
                                                "i407"
                                                "i405"
                                                "i403"
                                                "i402"
                                                "i400"
                                                "i397"
                                                "i396"
                                                "i395"
                                                "i393"
                                                "i392"
                                                "i390"
                                                "i388"
                                                "i386"
                                                "i384"
                                                "i382"
                                                "i380"
                                                "i378"
                                                "i376"
                                                "i373"
                                                "i371"
                                                "i370"
                                                "i368"
                                                "i366"
                                                "i364"
                                                "i362"
                                                "i361"
                                                "i360"
                                                "i359"
                                                "i357"
                                                "i356"
                                                "i353"
                                                "i351"
                                                "i349"
                                                "i347"
                                                "i345"
                                                "i343"
                                                "i341"
                                                "i340"
                                                "i339"
                                                "i337"
                                                "i335"
                                                "i334"
                                                "i331"
                                                "i330"
                                                "i328"
                                                "i326"
                                                "i324"
                                                "i322"
                                                "i320"
                                                "i318"
                                                "i316"
                                                "i314"
                                                "i312"
                                                "i309"
                                                "i307"
                                                "i305"
                                                "i303"
                                                "i301"
                                                "i299"
                                                "i297"
                                                "i295"
                                                "i293"
                                                "i291"
                                                "i289"
                                                "i287"
                                                "i285"
                                                "i283"
                                                "i281"
                                                "i279"
                                                "i277"
                                                "i275"
                                                "i273"
                                                "i271"
                                                "i269"
                                                "i267"
                                                "i265"
                                                "i263"
                                                "i262"
                                                "i259"
                                                "i257"
                                                "i256"
                                                "i255"
                                                "i254"
                                                "i253"
                                                "i251"
                                                "i249"
                                                "i247"
                                                "i244"
                                                "i242"
                                                "i240"
                                                "i238"
                                                "i236"
                                                "i234"
                                                "i232"
                                                "i230"
                                                "i228"
                                                "i226"
                                                "i224"
                                                "i222"
                                                "i220"
                                                "i218"
                                                "i216"
                                                "i214"
                                                "i212"
                                                "i210"
                                                "i208"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("i46" "i45" "i44")))
                                            (hygiene guile))))
                                  #{ropt 33990}#)))
                        #{tmp 34113}#)
                      (let ((#{tmp 34147}#
                              ($sc-dispatch
                                #{args 33988}#
                                '((any any) . any))))
                        (if (if #{tmp 34147}#
                              (@apply
                                (lambda (#{a 34151}#
                                         #{init 34152}#
                                         #{b 34153}#)
                                  (if (symbol? #{a 34151}#)
                                    #t
                                    (if (if (vector? #{a 34151}#)
                                          (if (= (vector-length #{a 34151}#) 4)
                                            (eq? (vector-ref #{a 34151}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref #{a 34151}# 1))
                                      #f)))
                                #{tmp 34147}#)
                              #f)
                          (@apply
                            (lambda (#{a 34180}# #{init 34181}# #{b 34182}#)
                              (#{opt 33745}#
                                #{b 34182}#
                                #{req 33989}#
                                (cons (list #{a 34180}# #{init 34181}#)
                                      #{ropt 33990}#)))
                            #{tmp 34147}#)
                          (let ((#{tmp 34183}#
                                  ($sc-dispatch #{args 33988}# '(any . any))))
                            (if (if #{tmp 34183}#
                                  (@apply
                                    (lambda (#{a 34187}# #{b 34188}#)
                                      (eq? (syntax->datum #{a 34187}#) #:key))
                                    #{tmp 34183}#)
                                  #f)
                              (@apply
                                (lambda (#{a 34189}# #{b 34190}#)
                                  (#{key 33746}#
                                    #{b 34190}#
                                    #{req 33989}#
                                    (reverse #{ropt 33990}#)
                                    '()))
                                #{tmp 34183}#)
                              (let ((#{tmp 34193}#
                                      ($sc-dispatch
                                        #{args 33988}#
                                        '(any any))))
                                (if (if #{tmp 34193}#
                                      (@apply
                                        (lambda (#{a 34197}# #{b 34198}#)
                                          (eq? (syntax->datum #{a 34197}#)
                                               #:rest))
                                        #{tmp 34193}#)
                                      #f)
                                  (@apply
                                    (lambda (#{a 34199}# #{b 34200}#)
                                      (#{rest 33747}#
                                        #{b 34200}#
                                        #{req 33989}#
                                        (reverse #{ropt 33990}#)
                                        '()))
                                    #{tmp 34193}#)
                                  (let ((#{tmp 34203}# (list #{args 33988}#)))
                                    (if (@apply
                                          (lambda (#{r 34205}#)
                                            (if (symbol? #{r 34205}#)
                                              #t
                                              (if (if (vector? #{r 34205}#)
                                                    (if (= (vector-length
                                                             #{r 34205}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{r 34205}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref #{r 34205}# 1))
                                                #f)))
                                          #{tmp 34203}#)
                                      (@apply
                                        (lambda (#{r 34235}#)
                                          (#{rest 33747}#
                                            #{r 34235}#
                                            #{req 33989}#
                                            (reverse #{ropt 33990}#)
                                            '()))
                                        #{tmp 34203}#)
                                      (syntax-violation
                                        'lambda*
                                        "invalid optional argument list"
                                        #{orig-args 33743}#
                                        #{args 33988}#)))))))))))))))
          (#{key 33746}#
            (lambda (#{args 34254}#
                     #{req 34255}#
                     #{opt 34256}#
                     #{rkey 34257}#)
              (let ((#{tmp 34259}# ($sc-dispatch #{args 34254}# '())))
                (if #{tmp 34259}#
                  (@apply
                    (lambda ()
                      (#{check 33748}#
                        #{req 34255}#
                        #{opt 34256}#
                        #f
                        (cons #f (reverse #{rkey 34257}#))))
                    #{tmp 34259}#)
                  (let ((#{tmp 34381}#
                          ($sc-dispatch #{args 34254}# '(any . any))))
                    (if (if #{tmp 34381}#
                          (@apply
                            (lambda (#{a 34385}# #{b 34386}#)
                              (if (symbol? #{a 34385}#)
                                #t
                                (if (if (vector? #{a 34385}#)
                                      (if (= (vector-length #{a 34385}#) 4)
                                        (eq? (vector-ref #{a 34385}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 34385}# 1))
                                  #f)))
                            #{tmp 34381}#)
                          #f)
                      (@apply
                        (lambda (#{a 34413}# #{b 34414}#)
                          (let ((#{tmp 34415}#
                                  (symbol->keyword
                                    (syntax->datum #{a 34413}#))))
                            (#{key 33746}#
                              #{b 34414}#
                              #{req 34255}#
                              #{opt 34256}#
                              (cons (cons #{tmp 34415}#
                                          (cons #{a 34413}#
                                                '(#(syntax-object
                                                    #f
                                                    ((top)
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(k)
                                                       #((top))
                                                       #("i2463"))
                                                     #(ribcage
                                                       #(a b)
                                                       #((top) (top))
                                                       #("i2457" "i2458"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(args req opt rkey)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i2446"
                                                         "i2447"
                                                         "i2448"
                                                         "i2449"))
                                                     #(ribcage
                                                       (check rest key opt req)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i2336"
                                                        "i2334"
                                                        "i2332"
                                                        "i2330"
                                                        "i2328"))
                                                     #(ribcage
                                                       #(orig-args)
                                                       #((top))
                                                       #("i2327"))
                                                     #(ribcage
                                                       (lambda-var-list
                                                         gen-var
                                                         strip
                                                         chi-lambda-case
                                                         lambda*-formals
                                                         chi-simple-lambda
                                                         lambda-formals
                                                         ellipsis?
                                                         chi-void
                                                         eval-local-transformer
                                                         chi-local-syntax
                                                         chi-body
                                                         chi-macro
                                                         chi-call
                                                         chi-expr
                                                         chi
                                                         syntax-type
                                                         chi-when-list
                                                         chi-install-global
                                                         chi-top-sequence
                                                         chi-sequence
                                                         source-wrap
                                                         wrap
                                                         bound-id-member?
                                                         distinct-bound-ids?
                                                         valid-bound-ids?
                                                         bound-id=?
                                                         free-id=?
                                                         id-var-name
                                                         same-marks?
                                                         join-marks
                                                         join-wraps
                                                         smart-append
                                                         make-binding-wrap
                                                         extend-ribcage!
                                                         make-empty-ribcage
                                                         new-mark
                                                         anti-mark
                                                         the-anti-mark
                                                         top-marked?
                                                         top-wrap
                                                         empty-wrap
                                                         set-ribcage-labels!
                                                         set-ribcage-marks!
                                                         set-ribcage-symnames!
                                                         ribcage-labels
                                                         ribcage-marks
                                                         ribcage-symnames
                                                         ribcage?
                                                         make-ribcage
                                                         gen-labels
                                                         gen-label
                                                         make-rename
                                                         rename-marks
                                                         rename-new
                                                         rename-old
                                                         subst-rename?
                                                         wrap-subst
                                                         wrap-marks
                                                         make-wrap
                                                         id-sym-name&marks
                                                         id-sym-name
                                                         id?
                                                         nonsymbol-id?
                                                         global-extend
                                                         lookup
                                                         macros-only-env
                                                         extend-var-env
                                                         extend-env
                                                         null-env
                                                         binding-value
                                                         binding-type
                                                         make-binding
                                                         arg-check
                                                         source-annotation
                                                         no-source
                                                         set-syntax-object-module!
                                                         set-syntax-object-wrap!
                                                         set-syntax-object-expression!
                                                         syntax-object-module
                                                         syntax-object-wrap
                                                         syntax-object-expression
                                                         syntax-object?
                                                         make-syntax-object
                                                         build-lexical-var
                                                         build-letrec
                                                         build-named-let
                                                         build-let
                                                         build-sequence
                                                         build-data
                                                         build-primref
                                                         build-primcall
                                                         build-lambda-case
                                                         build-case-lambda
                                                         build-simple-lambda
                                                         build-global-definition
                                                         build-global-assignment
                                                         build-global-reference
                                                         analyze-variable
                                                         build-lexical-assignment
                                                         build-lexical-reference
                                                         build-dynlet
                                                         build-conditional
                                                         build-call
                                                         build-void
                                                         maybe-name-value!
                                                         decorate-source
                                                         get-global-definition-hook
                                                         put-global-definition-hook
                                                         gensym-hook
                                                         local-eval-hook
                                                         top-level-eval-hook
                                                         fx<
                                                         fx=
                                                         fx-
                                                         fx+
                                                         set-lambda-meta!
                                                         lambda-meta
                                                         lambda?
                                                         make-dynlet
                                                         make-letrec
                                                         make-let
                                                         make-lambda-case
                                                         make-lambda
                                                         make-seq
                                                         make-primcall
                                                         make-call
                                                         make-conditional
                                                         make-toplevel-define
                                                         make-toplevel-set
                                                         make-toplevel-ref
                                                         make-module-set
                                                         make-module-ref
                                                         make-lexical-set
                                                         make-lexical-ref
                                                         make-primitive-ref
                                                         make-const
                                                         make-void)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i471"
                                                        "i469"
                                                        "i467"
                                                        "i465"
                                                        "i463"
                                                        "i461"
                                                        "i459"
                                                        "i457"
                                                        "i455"
                                                        "i453"
                                                        "i451"
                                                        "i449"
                                                        "i447"
                                                        "i445"
                                                        "i443"
                                                        "i441"
                                                        "i439"
                                                        "i437"
                                                        "i435"
                                                        "i433"
                                                        "i431"
                                                        "i429"
                                                        "i427"
                                                        "i425"
                                                        "i423"
                                                        "i421"
                                                        "i419"
                                                        "i417"
                                                        "i415"
                                                        "i413"
                                                        "i411"
                                                        "i409"
                                                        "i407"
                                                        "i405"
                                                        "i403"
                                                        "i402"
                                                        "i400"
                                                        "i397"
                                                        "i396"
                                                        "i395"
                                                        "i393"
                                                        "i392"
                                                        "i390"
                                                        "i388"
                                                        "i386"
                                                        "i384"
                                                        "i382"
                                                        "i380"
                                                        "i378"
                                                        "i376"
                                                        "i373"
                                                        "i371"
                                                        "i370"
                                                        "i368"
                                                        "i366"
                                                        "i364"
                                                        "i362"
                                                        "i361"
                                                        "i360"
                                                        "i359"
                                                        "i357"
                                                        "i356"
                                                        "i353"
                                                        "i351"
                                                        "i349"
                                                        "i347"
                                                        "i345"
                                                        "i343"
                                                        "i341"
                                                        "i340"
                                                        "i339"
                                                        "i337"
                                                        "i335"
                                                        "i334"
                                                        "i331"
                                                        "i330"
                                                        "i328"
                                                        "i326"
                                                        "i324"
                                                        "i322"
                                                        "i320"
                                                        "i318"
                                                        "i316"
                                                        "i314"
                                                        "i312"
                                                        "i309"
                                                        "i307"
                                                        "i305"
                                                        "i303"
                                                        "i301"
                                                        "i299"
                                                        "i297"
                                                        "i295"
                                                        "i293"
                                                        "i291"
                                                        "i289"
                                                        "i287"
                                                        "i285"
                                                        "i283"
                                                        "i281"
                                                        "i279"
                                                        "i277"
                                                        "i275"
                                                        "i273"
                                                        "i271"
                                                        "i269"
                                                        "i267"
                                                        "i265"
                                                        "i263"
                                                        "i262"
                                                        "i259"
                                                        "i257"
                                                        "i256"
                                                        "i255"
                                                        "i254"
                                                        "i253"
                                                        "i251"
                                                        "i249"
                                                        "i247"
                                                        "i244"
                                                        "i242"
                                                        "i240"
                                                        "i238"
                                                        "i236"
                                                        "i234"
                                                        "i232"
                                                        "i230"
                                                        "i228"
                                                        "i226"
                                                        "i224"
                                                        "i222"
                                                        "i220"
                                                        "i218"
                                                        "i216"
                                                        "i214"
                                                        "i212"
                                                        "i210"
                                                        "i208"))
                                                     #(ribcage
                                                       (define-structure
                                                         define-expansion-accessors
                                                         define-expansion-constructors)
                                                       ((top) (top) (top))
                                                       ("i46" "i45" "i44")))
                                                    (hygiene guile)))))
                                    #{rkey 34257}#))))
                        #{tmp 34381}#)
                      (let ((#{tmp 34418}#
                              ($sc-dispatch
                                #{args 34254}#
                                '((any any) . any))))
                        (if (if #{tmp 34418}#
                              (@apply
                                (lambda (#{a 34422}#
                                         #{init 34423}#
                                         #{b 34424}#)
                                  (if (symbol? #{a 34422}#)
                                    #t
                                    (if (if (vector? #{a 34422}#)
                                          (if (= (vector-length #{a 34422}#) 4)
                                            (eq? (vector-ref #{a 34422}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref #{a 34422}# 1))
                                      #f)))
                                #{tmp 34418}#)
                              #f)
                          (@apply
                            (lambda (#{a 34451}# #{init 34452}# #{b 34453}#)
                              (let ((#{tmp 34454}#
                                      (symbol->keyword
                                        (syntax->datum #{a 34451}#))))
                                (#{key 33746}#
                                  #{b 34453}#
                                  #{req 34255}#
                                  #{opt 34256}#
                                  (cons (list #{tmp 34454}#
                                              #{a 34451}#
                                              #{init 34452}#)
                                        #{rkey 34257}#))))
                            #{tmp 34418}#)
                          (let ((#{tmp 34457}#
                                  ($sc-dispatch
                                    #{args 34254}#
                                    '((any any any) . any))))
                            (if (if #{tmp 34457}#
                                  (@apply
                                    (lambda (#{a 34461}#
                                             #{init 34462}#
                                             #{k 34463}#
                                             #{b 34464}#)
                                      (if (if (symbol? #{a 34461}#)
                                            #t
                                            (if (if (vector? #{a 34461}#)
                                                  (if (= (vector-length
                                                           #{a 34461}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{a 34461}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (symbol?
                                                (vector-ref #{a 34461}# 1))
                                              #f))
                                        (keyword? (syntax->datum #{k 34463}#))
                                        #f))
                                    #{tmp 34457}#)
                                  #f)
                              (@apply
                                (lambda (#{a 34491}#
                                         #{init 34492}#
                                         #{k 34493}#
                                         #{b 34494}#)
                                  (#{key 33746}#
                                    #{b 34494}#
                                    #{req 34255}#
                                    #{opt 34256}#
                                    (cons (list #{k 34493}#
                                                #{a 34491}#
                                                #{init 34492}#)
                                          #{rkey 34257}#)))
                                #{tmp 34457}#)
                              (let ((#{tmp 34495}#
                                      ($sc-dispatch #{args 34254}# '(any))))
                                (if (if #{tmp 34495}#
                                      (@apply
                                        (lambda (#{aok 34499}#)
                                          (eq? (syntax->datum #{aok 34499}#)
                                               #:allow-other-keys))
                                        #{tmp 34495}#)
                                      #f)
                                  (@apply
                                    (lambda (#{aok 34500}#)
                                      (#{check 33748}#
                                        #{req 34255}#
                                        #{opt 34256}#
                                        #f
                                        (cons #t (reverse #{rkey 34257}#))))
                                    #{tmp 34495}#)
                                  (let ((#{tmp 34619}#
                                          ($sc-dispatch
                                            #{args 34254}#
                                            '(any any any))))
                                    (if (if #{tmp 34619}#
                                          (@apply
                                            (lambda (#{aok 34623}#
                                                     #{a 34624}#
                                                     #{b 34625}#)
                                              (if (eq? (syntax->datum
                                                         #{aok 34623}#)
                                                       #:allow-other-keys)
                                                (eq? (syntax->datum
                                                       #{a 34624}#)
                                                     #:rest)
                                                #f))
                                            #{tmp 34619}#)
                                          #f)
                                      (@apply
                                        (lambda (#{aok 34626}#
                                                 #{a 34627}#
                                                 #{b 34628}#)
                                          (#{rest 33747}#
                                            #{b 34628}#
                                            #{req 34255}#
                                            #{opt 34256}#
                                            (cons #t
                                                  (reverse #{rkey 34257}#))))
                                        #{tmp 34619}#)
                                      (let ((#{tmp 34631}#
                                              ($sc-dispatch
                                                #{args 34254}#
                                                '(any . any))))
                                        (if (if #{tmp 34631}#
                                              (@apply
                                                (lambda (#{aok 34635}#
                                                         #{r 34636}#)
                                                  (if (eq? (syntax->datum
                                                             #{aok 34635}#)
                                                           #:allow-other-keys)
                                                    (if (symbol? #{r 34636}#)
                                                      #t
                                                      (if (if (vector?
                                                                #{r 34636}#)
                                                            (if (= (vector-length
                                                                     #{r 34636}#)
                                                                   4)
                                                              (eq? (vector-ref
                                                                     #{r 34636}#
                                                                     0)
                                                                   'syntax-object)
                                                              #f)
                                                            #f)
                                                        (symbol?
                                                          (vector-ref
                                                            #{r 34636}#
                                                            1))
                                                        #f))
                                                    #f))
                                                #{tmp 34631}#)
                                              #f)
                                          (@apply
                                            (lambda (#{aok 34663}# #{r 34664}#)
                                              (#{rest 33747}#
                                                #{r 34664}#
                                                #{req 34255}#
                                                #{opt 34256}#
                                                (cons #t
                                                      (reverse
                                                        #{rkey 34257}#))))
                                            #{tmp 34631}#)
                                          (let ((#{tmp 34667}#
                                                  ($sc-dispatch
                                                    #{args 34254}#
                                                    '(any any))))
                                            (if (if #{tmp 34667}#
                                                  (@apply
                                                    (lambda (#{a 34671}#
                                                             #{b 34672}#)
                                                      (eq? (syntax->datum
                                                             #{a 34671}#)
                                                           #:rest))
                                                    #{tmp 34667}#)
                                                  #f)
                                              (@apply
                                                (lambda (#{a 34673}#
                                                         #{b 34674}#)
                                                  (#{rest 33747}#
                                                    #{b 34674}#
                                                    #{req 34255}#
                                                    #{opt 34256}#
                                                    (cons #f
                                                          (reverse
                                                            #{rkey 34257}#))))
                                                #{tmp 34667}#)
                                              (let ((#{tmp 34677}#
                                                      (list #{args 34254}#)))
                                                (if (@apply
                                                      (lambda (#{r 34679}#)
                                                        (if (symbol?
                                                              #{r 34679}#)
                                                          #t
                                                          (if (if (vector?
                                                                    #{r 34679}#)
                                                                (if (= (vector-length
                                                                         #{r 34679}#)
                                                                       4)
                                                                  (eq? (vector-ref
                                                                         #{r 34679}#
                                                                         0)
                                                                       'syntax-object)
                                                                  #f)
                                                                #f)
                                                            (symbol?
                                                              (vector-ref
                                                                #{r 34679}#
                                                                1))
                                                            #f)))
                                                      #{tmp 34677}#)
                                                  (@apply
                                                    (lambda (#{r 34709}#)
                                                      (#{rest 33747}#
                                                        #{r 34709}#
                                                        #{req 34255}#
                                                        #{opt 34256}#
                                                        (cons #f
                                                              (reverse
                                                                #{rkey 34257}#))))
                                                    #{tmp 34677}#)
                                                  (syntax-violation
                                                    'lambda*
                                                    "invalid keyword argument list"
                                                    #{orig-args 33743}#
                                                    #{args 34254}#)))))))))))))))))))))
          (#{rest 33747}#
            (lambda (#{args 34737}#
                     #{req 34738}#
                     #{opt 34739}#
                     #{kw 34740}#)
              (let ((#{tmp 34742}# (list #{args 34737}#)))
                (if (@apply
                      (lambda (#{r 34744}#)
                        (if (symbol? #{r 34744}#)
                          #t
                          (if (if (vector? #{r 34744}#)
                                (if (= (vector-length #{r 34744}#) 4)
                                  (eq? (vector-ref #{r 34744}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{r 34744}# 1))
                            #f)))
                      #{tmp 34742}#)
                  (@apply
                    (lambda (#{r 34774}#)
                      (#{check 33748}#
                        #{req 34738}#
                        #{opt 34739}#
                        #{r 34774}#
                        #{kw 34740}#))
                    #{tmp 34742}#)
                  (syntax-violation
                    'lambda*
                    "invalid rest argument"
                    #{orig-args 33743}#
                    #{args 34737}#)))))
          (#{check 33748}#
            (lambda (#{req 34902}#
                     #{opt 34903}#
                     #{rest 34904}#
                     #{kw 34905}#)
              (if (#{distinct-bound-ids? 4364}#
                    (append
                      #{req 34902}#
                      (map car #{opt 34903}#)
                      (if #{rest 34904}# (list #{rest 34904}#) '())
                      (if (pair? #{kw 34905}#)
                        (map cadr (cdr #{kw 34905}#))
                        '())))
                (values
                  #{req 34902}#
                  #{opt 34903}#
                  #{rest 34904}#
                  #{kw 34905}#)
                (syntax-violation
                  'lambda*
                  "duplicate identifier in argument list"
                  #{orig-args 33743}#)))))
         (#{req 33744}# #{orig-args 33743}# '()))))
   (#{chi-lambda-case 4385}#
     (lambda (#{e 35014}#
              #{r 35015}#
              #{w 35016}#
              #{s 35017}#
              #{mod 35018}#
              #{get-formals 35019}#
              #{clauses 35020}#)
       (letrec*
         ((#{expand-req 35021}#
            (lambda (#{req 35157}#
                     #{opt 35158}#
                     #{rest 35159}#
                     #{kw 35160}#
                     #{body 35161}#)
              (let ((#{vars 35162}#
                      (map #{gen-var 4387}# #{req 35157}#))
                    (#{labels 35163}#
                      (#{gen-labels 4344}# #{req 35157}#)))
                (let ((#{r* 35164}#
                        (#{extend-var-env 4336}#
                          #{labels 35163}#
                          #{vars 35162}#
                          #{r 35015}#))
                      (#{w* 35165}#
                        (#{make-binding-wrap 4355}#
                          #{req 35157}#
                          #{labels 35163}#
                          #{w 35016}#)))
                  (#{expand-opt 35022}#
                    (map syntax->datum #{req 35157}#)
                    #{opt 35158}#
                    #{rest 35159}#
                    #{kw 35160}#
                    #{body 35161}#
                    (reverse #{vars 35162}#)
                    #{r* 35164}#
                    #{w* 35165}#
                    '()
                    '())))))
          (#{expand-opt 35022}#
            (lambda (#{req 35401}#
                     #{opt 35402}#
                     #{rest 35403}#
                     #{kw 35404}#
                     #{body 35405}#
                     #{vars 35406}#
                     #{r* 35407}#
                     #{w* 35408}#
                     #{out 35409}#
                     #{inits 35410}#)
              (if (pair? #{opt 35402}#)
                (let ((#{tmp 35411}# (car #{opt 35402}#)))
                  (let ((#{tmp 35412}#
                          ($sc-dispatch #{tmp 35411}# '(any any))))
                    (if #{tmp 35412}#
                      (@apply
                        (lambda (#{id 35414}# #{i 35415}#)
                          (let ((#{v 35416}#
                                  (let ((#{id 35424}#
                                          (if (if (vector? #{id 35414}#)
                                                (if (= (vector-length
                                                         #{id 35414}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{id 35414}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{id 35414}# 1)
                                            #{id 35414}#)))
                                    (gensym
                                      (string-append
                                        (symbol->string #{id 35424}#)
                                        " ")))))
                            (let ((#{l 35417}#
                                    (#{gen-labels 4344}# (list #{v 35416}#))))
                              (let ((#{r** 35418}#
                                      (#{extend-var-env 4336}#
                                        #{l 35417}#
                                        (list #{v 35416}#)
                                        #{r* 35407}#)))
                                (let ((#{w** 35419}#
                                        (#{make-binding-wrap 4355}#
                                          (list #{id 35414}#)
                                          #{l 35417}#
                                          #{w* 35408}#)))
                                  (#{expand-opt 35022}#
                                    #{req 35401}#
                                    (cdr #{opt 35402}#)
                                    #{rest 35403}#
                                    #{kw 35404}#
                                    #{body 35405}#
                                    (cons #{v 35416}# #{vars 35406}#)
                                    #{r** 35418}#
                                    #{w** 35419}#
                                    (cons (syntax->datum #{id 35414}#)
                                          #{out 35409}#)
                                    (cons (#{chi 4373}#
                                            #{i 35415}#
                                            #{r* 35407}#
                                            #{w* 35408}#
                                            #{mod 35018}#)
                                          #{inits 35410}#)))))))
                        #{tmp 35412}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp 35411}#))))
                (if #{rest 35403}#
                  (let ((#{v 35725}#
                          (let ((#{id 35735}#
                                  (if (if (vector? #{rest 35403}#)
                                        (if (= (vector-length #{rest 35403}#)
                                               4)
                                          (eq? (vector-ref #{rest 35403}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (vector-ref #{rest 35403}# 1)
                                    #{rest 35403}#)))
                            (gensym
                              (string-append
                                (symbol->string #{id 35735}#)
                                " ")))))
                    (let ((#{l 35726}#
                            (#{gen-labels 4344}# (list #{v 35725}#))))
                      (let ((#{r* 35727}#
                              (#{extend-var-env 4336}#
                                #{l 35726}#
                                (list #{v 35725}#)
                                #{r* 35407}#)))
                        (let ((#{w* 35728}#
                                (#{make-binding-wrap 4355}#
                                  (list #{rest 35403}#)
                                  #{l 35726}#
                                  #{w* 35408}#)))
                          (#{expand-kw 35023}#
                            #{req 35401}#
                            (if (pair? #{out 35409}#)
                              (reverse #{out 35409}#)
                              #f)
                            (syntax->datum #{rest 35403}#)
                            (if (pair? #{kw 35404}#)
                              (cdr #{kw 35404}#)
                              #{kw 35404}#)
                            #{body 35405}#
                            (cons #{v 35725}# #{vars 35406}#)
                            #{r* 35727}#
                            #{w* 35728}#
                            (if (pair? #{kw 35404}#) (car #{kw 35404}#) #f)
                            '()
                            #{inits 35410}#)))))
                  (#{expand-kw 35023}#
                    #{req 35401}#
                    (if (pair? #{out 35409}#)
                      (reverse #{out 35409}#)
                      #f)
                    #f
                    (if (pair? #{kw 35404}#)
                      (cdr #{kw 35404}#)
                      #{kw 35404}#)
                    #{body 35405}#
                    #{vars 35406}#
                    #{r* 35407}#
                    #{w* 35408}#
                    (if (pair? #{kw 35404}#) (car #{kw 35404}#) #f)
                    '()
                    #{inits 35410}#)))))
          (#{expand-kw 35023}#
            (lambda (#{req 35957}#
                     #{opt 35958}#
                     #{rest 35959}#
                     #{kw 35960}#
                     #{body 35961}#
                     #{vars 35962}#
                     #{r* 35963}#
                     #{w* 35964}#
                     #{aok 35965}#
                     #{out 35966}#
                     #{inits 35967}#)
              (if (pair? #{kw 35960}#)
                (let ((#{tmp 35968}# (car #{kw 35960}#)))
                  (let ((#{tmp 35969}#
                          ($sc-dispatch #{tmp 35968}# '(any any any))))
                    (if #{tmp 35969}#
                      (@apply
                        (lambda (#{k 35971}# #{id 35972}# #{i 35973}#)
                          (let ((#{v 35974}#
                                  (let ((#{id 35982}#
                                          (if (if (vector? #{id 35972}#)
                                                (if (= (vector-length
                                                         #{id 35972}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{id 35972}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{id 35972}# 1)
                                            #{id 35972}#)))
                                    (gensym
                                      (string-append
                                        (symbol->string #{id 35982}#)
                                        " ")))))
                            (let ((#{l 35975}#
                                    (#{gen-labels 4344}# (list #{v 35974}#))))
                              (let ((#{r** 35976}#
                                      (#{extend-var-env 4336}#
                                        #{l 35975}#
                                        (list #{v 35974}#)
                                        #{r* 35963}#)))
                                (let ((#{w** 35977}#
                                        (#{make-binding-wrap 4355}#
                                          (list #{id 35972}#)
                                          #{l 35975}#
                                          #{w* 35964}#)))
                                  (#{expand-kw 35023}#
                                    #{req 35957}#
                                    #{opt 35958}#
                                    #{rest 35959}#
                                    (cdr #{kw 35960}#)
                                    #{body 35961}#
                                    (cons #{v 35974}# #{vars 35962}#)
                                    #{r** 35976}#
                                    #{w** 35977}#
                                    #{aok 35965}#
                                    (cons (list (syntax->datum #{k 35971}#)
                                                (syntax->datum #{id 35972}#)
                                                #{v 35974}#)
                                          #{out 35966}#)
                                    (cons (#{chi 4373}#
                                            #{i 35973}#
                                            #{r* 35963}#
                                            #{w* 35964}#
                                            #{mod 35018}#)
                                          #{inits 35967}#)))))))
                        #{tmp 35969}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp 35968}#))))
                (#{expand-body 35024}#
                  #{req 35957}#
                  #{opt 35958}#
                  #{rest 35959}#
                  (if (if #{aok 35965}#
                        #{aok 35965}#
                        (pair? #{out 35966}#))
                    (cons #{aok 35965}# (reverse #{out 35966}#))
                    #f)
                  #{body 35961}#
                  (reverse #{vars 35962}#)
                  #{r* 35963}#
                  #{w* 35964}#
                  (reverse #{inits 35967}#)
                  '()))))
          (#{expand-body 35024}#
            (lambda (#{req 36292}#
                     #{opt 36293}#
                     #{rest 36294}#
                     #{kw 36295}#
                     #{body 36296}#
                     #{vars 36297}#
                     #{r* 36298}#
                     #{w* 36299}#
                     #{inits 36300}#
                     #{meta 36301}#)
              (let ((#{tmp 36303}#
                      ($sc-dispatch
                        #{body 36296}#
                        '(any any . each-any))))
                (if (if #{tmp 36303}#
                      (@apply
                        (lambda (#{docstring 36307}# #{e1 36308}# #{e2 36309}#)
                          (string? (syntax->datum #{docstring 36307}#)))
                        #{tmp 36303}#)
                      #f)
                  (@apply
                    (lambda (#{docstring 36310}# #{e1 36311}# #{e2 36312}#)
                      (#{expand-body 35024}#
                        #{req 36292}#
                        #{opt 36293}#
                        #{rest 36294}#
                        #{kw 36295}#
                        (cons #{e1 36311}# #{e2 36312}#)
                        #{vars 36297}#
                        #{r* 36298}#
                        #{w* 36299}#
                        #{inits 36300}#
                        (append
                          #{meta 36301}#
                          (list (cons 'documentation
                                      (syntax->datum #{docstring 36310}#))))))
                    #{tmp 36303}#)
                  (let ((#{tmp 36313}#
                          ($sc-dispatch
                            #{body 36296}#
                            '(#(vector #(each (any . any))) any . each-any))))
                    (if #{tmp 36313}#
                      (@apply
                        (lambda (#{k 36317}#
                                 #{v 36318}#
                                 #{e1 36319}#
                                 #{e2 36320}#)
                          (#{expand-body 35024}#
                            #{req 36292}#
                            #{opt 36293}#
                            #{rest 36294}#
                            #{kw 36295}#
                            (cons #{e1 36319}# #{e2 36320}#)
                            #{vars 36297}#
                            #{r* 36298}#
                            #{w* 36299}#
                            #{inits 36300}#
                            (append
                              #{meta 36301}#
                              (syntax->datum
                                (map cons #{k 36317}# #{v 36318}#)))))
                        #{tmp 36313}#)
                      (let ((#{tmp 36321}#
                              ($sc-dispatch #{body 36296}# '(any . each-any))))
                        (if #{tmp 36321}#
                          (@apply
                            (lambda (#{e1 36325}# #{e2 36326}#)
                              (values
                                #{meta 36301}#
                                #{req 36292}#
                                #{opt 36293}#
                                #{rest 36294}#
                                #{kw 36295}#
                                #{inits 36300}#
                                #{vars 36297}#
                                (#{chi-body 4377}#
                                  (cons #{e1 36325}# #{e2 36326}#)
                                  (let ((#{x 36338}#
                                          (begin
                                            (if (if (pair? #{e 35014}#)
                                                  #{s 35017}#
                                                  #f)
                                              (set-source-properties!
                                                #{e 35014}#
                                                #{s 35017}#))
                                            #{e 35014}#)))
                                    (if (if (null? (car #{w 35016}#))
                                          (null? (cdr #{w 35016}#))
                                          #f)
                                      #{x 36338}#
                                      (if (if (vector? #{x 36338}#)
                                            (if (= (vector-length #{x 36338}#)
                                                   4)
                                              (eq? (vector-ref #{x 36338}# 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (let ((#{expression 36370}#
                                                (vector-ref #{x 36338}# 1))
                                              (#{wrap 36371}#
                                                (let ((#{w2 36379}#
                                                        (vector-ref
                                                          #{x 36338}#
                                                          2)))
                                                  (let ((#{m1 36380}#
                                                          (car #{w 35016}#))
                                                        (#{s1 36381}#
                                                          (cdr #{w 35016}#)))
                                                    (if (null? #{m1 36380}#)
                                                      (if (null? #{s1 36381}#)
                                                        #{w2 36379}#
                                                        (cons (car #{w2 36379}#)
                                                              (let ((#{m2 36396}#
                                                                      (cdr #{w2 36379}#)))
                                                                (if (null? #{m2 36396}#)
                                                                  #{s1 36381}#
                                                                  (append
                                                                    #{s1 36381}#
                                                                    #{m2 36396}#)))))
                                                      (cons (let ((#{m2 36404}#
                                                                    (car #{w2 36379}#)))
                                                              (if (null? #{m2 36404}#)
                                                                #{m1 36380}#
                                                                (append
                                                                  #{m1 36380}#
                                                                  #{m2 36404}#)))
                                                            (let ((#{m2 36412}#
                                                                    (cdr #{w2 36379}#)))
                                                              (if (null? #{m2 36412}#)
                                                                #{s1 36381}#
                                                                (append
                                                                  #{s1 36381}#
                                                                  #{m2 36412}#))))))))
                                              (#{module 36372}#
                                                (vector-ref #{x 36338}# 3)))
                                          (vector
                                            'syntax-object
                                            #{expression 36370}#
                                            #{wrap 36371}#
                                            #{module 36372}#))
                                        (if (null? #{x 36338}#)
                                          #{x 36338}#
                                          (vector
                                            'syntax-object
                                            #{x 36338}#
                                            #{w 35016}#
                                            #{mod 35018}#)))))
                                  #{r* 36298}#
                                  #{w* 36299}#
                                  #{mod 35018}#)))
                            #{tmp 36321}#)
                          (syntax-violation
                            #f
                            "source expression failed to match any pattern"
                            #{body 36296}#))))))))))
         (let ((#{tmp 35026}#
                 ($sc-dispatch #{clauses 35020}# '())))
           (if #{tmp 35026}#
             (@apply
               (lambda () (values '() #f))
               #{tmp 35026}#)
             (let ((#{tmp 35031}#
                     ($sc-dispatch
                       #{clauses 35020}#
                       '((any any . each-any)
                         .
                         #(each (any any . each-any))))))
               (if #{tmp 35031}#
                 (@apply
                   (lambda (#{args 35035}#
                            #{e1 35036}#
                            #{e2 35037}#
                            #{args* 35038}#
                            #{e1* 35039}#
                            #{e2* 35040}#)
                     (call-with-values
                       (lambda ()
                         (#{get-formals 35019}# #{args 35035}#))
                       (lambda (#{req 35041}#
                                #{opt 35042}#
                                #{rest 35043}#
                                #{kw 35044}#)
                         (call-with-values
                           (lambda ()
                             (#{expand-req 35021}#
                               #{req 35041}#
                               #{opt 35042}#
                               #{rest 35043}#
                               #{kw 35044}#
                               (cons #{e1 35036}# #{e2 35037}#)))
                           (lambda (#{meta 35113}#
                                    #{req 35114}#
                                    #{opt 35115}#
                                    #{rest 35116}#
                                    #{kw 35117}#
                                    #{inits 35118}#
                                    #{vars 35119}#
                                    #{body 35120}#)
                             (call-with-values
                               (lambda ()
                                 (#{chi-lambda-case 4385}#
                                   #{e 35014}#
                                   #{r 35015}#
                                   #{w 35016}#
                                   #{s 35017}#
                                   #{mod 35018}#
                                   #{get-formals 35019}#
                                   (map (lambda (#{tmp 2806 35121}#
                                                 #{tmp 2805 35122}#
                                                 #{tmp 2804 35123}#)
                                          (cons #{tmp 2804 35123}#
                                                (cons #{tmp 2805 35122}#
                                                      #{tmp 2806 35121}#)))
                                        #{e2* 35040}#
                                        #{e1* 35039}#
                                        #{args* 35038}#)))
                               (lambda (#{meta* 35124}# #{else* 35125}#)
                                 (values
                                   (append #{meta 35113}# #{meta* 35124}#)
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 15)
                                     #{s 35017}#
                                     #{req 35114}#
                                     #{opt 35115}#
                                     #{rest 35116}#
                                     #{kw 35117}#
                                     #{inits 35118}#
                                     #{vars 35119}#
                                     #{body 35120}#
                                     #{else* 35125}#)))))))))
                   #{tmp 35031}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{clauses 35020}#))))))))
   (#{strip 4386}#
     (lambda (#{x 36439}# #{w 36440}#)
       (if (memq 'top (car #{w 36440}#))
         #{x 36439}#
         (letrec*
           ((#{f 36441}#
              (lambda (#{x 36444}#)
                (if (if (vector? #{x 36444}#)
                      (if (= (vector-length #{x 36444}#) 4)
                        (eq? (vector-ref #{x 36444}# 0) 'syntax-object)
                        #f)
                      #f)
                  (#{strip 4386}#
                    (vector-ref #{x 36444}# 1)
                    (vector-ref #{x 36444}# 2))
                  (if (pair? #{x 36444}#)
                    (let ((#{a 36463}# (#{f 36441}# (car #{x 36444}#)))
                          (#{d 36464}# (#{f 36441}# (cdr #{x 36444}#))))
                      (if (if (eq? #{a 36463}# (car #{x 36444}#))
                            (eq? #{d 36464}# (cdr #{x 36444}#))
                            #f)
                        #{x 36444}#
                        (cons #{a 36463}# #{d 36464}#)))
                    (if (vector? #{x 36444}#)
                      (let ((#{old 36467}# (vector->list #{x 36444}#)))
                        (let ((#{new 36468}# (map #{f 36441}# #{old 36467}#)))
                          (letrec*
                            ((#{lp 36469}#
                               (lambda (#{l1 36566}# #{l2 36567}#)
                                 (if (null? #{l1 36566}#)
                                   #{x 36444}#
                                   (if (eq? (car #{l1 36566}#)
                                            (car #{l2 36567}#))
                                     (#{lp 36469}#
                                       (cdr #{l1 36566}#)
                                       (cdr #{l2 36567}#))
                                     (list->vector #{new 36468}#))))))
                            (#{lp 36469}# #{old 36467}# #{new 36468}#))))
                      #{x 36444}#))))))
           (#{f 36441}# #{x 36439}#)))))
   (#{gen-var 4387}#
     (lambda (#{id 35169}#)
       (let ((#{id 35170}#
               (if (if (vector? #{id 35169}#)
                     (if (= (vector-length #{id 35169}#) 4)
                       (eq? (vector-ref #{id 35169}# 0) 'syntax-object)
                       #f)
                     #f)
                 (vector-ref #{id 35169}# 1)
                 #{id 35169}#)))
         (gensym
           (string-append (symbol->string #{id 35170}#) " ")))))
   (#{lambda-var-list 4388}#
     (lambda (#{vars 36568}#)
       (letrec*
         ((#{lvl 36569}#
            (lambda (#{vars 36572}# #{ls 36573}# #{w 36574}#)
              (if (pair? #{vars 36572}#)
                (#{lvl 36569}#
                  (cdr #{vars 36572}#)
                  (cons (let ((#{x 36578}# (car #{vars 36572}#)))
                          (if (if (null? (car #{w 36574}#))
                                (null? (cdr #{w 36574}#))
                                #f)
                            #{x 36578}#
                            (if (if (vector? #{x 36578}#)
                                  (if (= (vector-length #{x 36578}#) 4)
                                    (eq? (vector-ref #{x 36578}# 0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (let ((#{expression 36596}#
                                      (vector-ref #{x 36578}# 1))
                                    (#{wrap 36597}#
                                      (let ((#{w2 36605}#
                                              (vector-ref #{x 36578}# 2)))
                                        (let ((#{m1 36606}# (car #{w 36574}#))
                                              (#{s1 36607}# (cdr #{w 36574}#)))
                                          (if (null? #{m1 36606}#)
                                            (if (null? #{s1 36607}#)
                                              #{w2 36605}#
                                              (cons (car #{w2 36605}#)
                                                    (let ((#{m2 36622}#
                                                            (cdr #{w2 36605}#)))
                                                      (if (null? #{m2 36622}#)
                                                        #{s1 36607}#
                                                        (append
                                                          #{s1 36607}#
                                                          #{m2 36622}#)))))
                                            (cons (let ((#{m2 36630}#
                                                          (car #{w2 36605}#)))
                                                    (if (null? #{m2 36630}#)
                                                      #{m1 36606}#
                                                      (append
                                                        #{m1 36606}#
                                                        #{m2 36630}#)))
                                                  (let ((#{m2 36638}#
                                                          (cdr #{w2 36605}#)))
                                                    (if (null? #{m2 36638}#)
                                                      #{s1 36607}#
                                                      (append
                                                        #{s1 36607}#
                                                        #{m2 36638}#))))))))
                                    (#{module 36598}#
                                      (vector-ref #{x 36578}# 3)))
                                (vector
                                  'syntax-object
                                  #{expression 36596}#
                                  #{wrap 36597}#
                                  #{module 36598}#))
                              (if (null? #{x 36578}#)
                                #{x 36578}#
                                (vector
                                  'syntax-object
                                  #{x 36578}#
                                  #{w 36574}#
                                  #f)))))
                        #{ls 36573}#)
                  #{w 36574}#)
                (if (if (symbol? #{vars 36572}#)
                      #t
                      (if (if (vector? #{vars 36572}#)
                            (if (= (vector-length #{vars 36572}#) 4)
                              (eq? (vector-ref #{vars 36572}# 0)
                                   'syntax-object)
                              #f)
                            #f)
                        (symbol? (vector-ref #{vars 36572}# 1))
                        #f))
                  (cons (if (if (null? (car #{w 36574}#))
                              (null? (cdr #{w 36574}#))
                              #f)
                          #{vars 36572}#
                          (if (if (vector? #{vars 36572}#)
                                (if (= (vector-length #{vars 36572}#) 4)
                                  (eq? (vector-ref #{vars 36572}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (let ((#{expression 36708}#
                                    (vector-ref #{vars 36572}# 1))
                                  (#{wrap 36709}#
                                    (let ((#{w2 36719}#
                                            (vector-ref #{vars 36572}# 2)))
                                      (let ((#{m1 36720}# (car #{w 36574}#))
                                            (#{s1 36721}# (cdr #{w 36574}#)))
                                        (if (null? #{m1 36720}#)
                                          (if (null? #{s1 36721}#)
                                            #{w2 36719}#
                                            (cons (car #{w2 36719}#)
                                                  (let ((#{m2 36738}#
                                                          (cdr #{w2 36719}#)))
                                                    (if (null? #{m2 36738}#)
                                                      #{s1 36721}#
                                                      (append
                                                        #{s1 36721}#
                                                        #{m2 36738}#)))))
                                          (cons (let ((#{m2 36746}#
                                                        (car #{w2 36719}#)))
                                                  (if (null? #{m2 36746}#)
                                                    #{m1 36720}#
                                                    (append
                                                      #{m1 36720}#
                                                      #{m2 36746}#)))
                                                (let ((#{m2 36754}#
                                                        (cdr #{w2 36719}#)))
                                                  (if (null? #{m2 36754}#)
                                                    #{s1 36721}#
                                                    (append
                                                      #{s1 36721}#
                                                      #{m2 36754}#))))))))
                                  (#{module 36710}#
                                    (vector-ref #{vars 36572}# 3)))
                              (vector
                                'syntax-object
                                #{expression 36708}#
                                #{wrap 36709}#
                                #{module 36710}#))
                            (if (null? #{vars 36572}#)
                              #{vars 36572}#
                              (vector
                                'syntax-object
                                #{vars 36572}#
                                #{w 36574}#
                                #f))))
                        #{ls 36573}#)
                  (if (null? #{vars 36572}#)
                    #{ls 36573}#
                    (if (if (vector? #{vars 36572}#)
                          (if (= (vector-length #{vars 36572}#) 4)
                            (eq? (vector-ref #{vars 36572}# 0)
                                 'syntax-object)
                            #f)
                          #f)
                      (#{lvl 36569}#
                        (vector-ref #{vars 36572}# 1)
                        #{ls 36573}#
                        (let ((#{w2 36795}# (vector-ref #{vars 36572}# 2)))
                          (let ((#{m1 36796}# (car #{w 36574}#))
                                (#{s1 36797}# (cdr #{w 36574}#)))
                            (if (null? #{m1 36796}#)
                              (if (null? #{s1 36797}#)
                                #{w2 36795}#
                                (cons (car #{w2 36795}#)
                                      (let ((#{m2 36808}# (cdr #{w2 36795}#)))
                                        (if (null? #{m2 36808}#)
                                          #{s1 36797}#
                                          (append
                                            #{s1 36797}#
                                            #{m2 36808}#)))))
                              (cons (let ((#{m2 36816}# (car #{w2 36795}#)))
                                      (if (null? #{m2 36816}#)
                                        #{m1 36796}#
                                        (append #{m1 36796}# #{m2 36816}#)))
                                    (let ((#{m2 36824}# (cdr #{w2 36795}#)))
                                      (if (null? #{m2 36824}#)
                                        #{s1 36797}#
                                        (append
                                          #{s1 36797}#
                                          #{m2 36824}#))))))))
                      (cons #{vars 36572}# #{ls 36573}#))))))))
         (#{lvl 36569}# #{vars 36568}# '() '(()))))))
  (begin
    (module-define!
      (current-module)
      'letrec-syntax
      (make-syntax-transformer
        'letrec-syntax
        'local-syntax
        #t))
    (module-define!
      (current-module)
      'let-syntax
      (make-syntax-transformer
        'let-syntax
        'local-syntax
        #f))
    (#{global-extend 4339}#
      'core
      'fluid-let-syntax
      (lambda (#{e 4515}#
               #{r 4516}#
               #{w 4517}#
               #{s 4518}#
               #{mod 4519}#)
        (let ((#{tmp 4521}#
                ($sc-dispatch
                  #{e 4515}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 4521}#
                (@apply
                  (lambda (#{var 4525}#
                           #{val 4526}#
                           #{e1 4527}#
                           #{e2 4528}#)
                    (#{valid-bound-ids? 4363}# #{var 4525}#))
                  #{tmp 4521}#)
                #f)
            (@apply
              (lambda (#{var 4613}#
                       #{val 4614}#
                       #{e1 4615}#
                       #{e2 4616}#)
                (let ((#{names 4617}#
                        (map (lambda (#{x 4883}#)
                               (#{id-var-name 4360}# #{x 4883}# #{w 4517}#))
                             #{var 4613}#)))
                  (begin
                    (for-each
                      (lambda (#{id 4618}# #{n 4619}#)
                        (let ((#{atom-key 4620}#
                                (car (let ((#{t 4820}#
                                             (assq #{n 4619}# #{r 4516}#)))
                                       (if #{t 4820}#
                                         (cdr #{t 4820}#)
                                         (if (symbol? #{n 4619}#)
                                           (let ((#{t 4825}#
                                                   (begin
                                                     (if (if (not #{mod 4519}#)
                                                           (current-module)
                                                           #f)
                                                       (warn "module system is booted, we should have a module"
                                                             #{n 4619}#))
                                                     (let ((#{v 4862}#
                                                             (module-variable
                                                               (if #{mod 4519}#
                                                                 (resolve-module
                                                                   (cdr #{mod 4519}#))
                                                                 (current-module))
                                                               #{n 4619}#)))
                                                       (if #{v 4862}#
                                                         (if (variable-bound?
                                                               #{v 4862}#)
                                                           (let ((#{val 4871}#
                                                                   (variable-ref
                                                                     #{v 4862}#)))
                                                             (if (macro?
                                                                   #{val 4871}#)
                                                               (if (macro-type
                                                                     #{val 4871}#)
                                                                 (cons (macro-type
                                                                         #{val 4871}#)
                                                                       (macro-binding
                                                                         #{val 4871}#))
                                                                 #f)
                                                               #f))
                                                           #f)
                                                         #f)))))
                                             (if #{t 4825}#
                                               #{t 4825}#
                                               '(global)))
                                           '(displaced-lexical)))))))
                          (if (let ((#{t 4653}# #{atom-key 4620}#))
                                (eqv? #{t 4653}# 'displaced-lexical))
                            (syntax-violation
                              'fluid-let-syntax
                              "identifier out of context"
                              #{e 4515}#
                              (let ((#{x 4725}#
                                      (begin
                                        (if (if (pair? #{id 4618}#)
                                              #{s 4518}#
                                              #f)
                                          (set-source-properties!
                                            #{id 4618}#
                                            #{s 4518}#))
                                        #{id 4618}#)))
                                (if (if (null? (car #{w 4517}#))
                                      (null? (cdr #{w 4517}#))
                                      #f)
                                  #{x 4725}#
                                  (if (if (vector? #{x 4725}#)
                                        (if (= (vector-length #{x 4725}#) 4)
                                          (eq? (vector-ref #{x 4725}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (let ((#{expression 4757}#
                                            (vector-ref #{x 4725}# 1))
                                          (#{wrap 4758}#
                                            (let ((#{w2 4766}#
                                                    (vector-ref #{x 4725}# 2)))
                                              (let ((#{m1 4767}#
                                                      (car #{w 4517}#))
                                                    (#{s1 4768}#
                                                      (cdr #{w 4517}#)))
                                                (if (null? #{m1 4767}#)
                                                  (if (null? #{s1 4768}#)
                                                    #{w2 4766}#
                                                    (cons (car #{w2 4766}#)
                                                          (let ((#{m2 4783}#
                                                                  (cdr #{w2 4766}#)))
                                                            (if (null? #{m2 4783}#)
                                                              #{s1 4768}#
                                                              (append
                                                                #{s1 4768}#
                                                                #{m2 4783}#)))))
                                                  (cons (let ((#{m2 4791}#
                                                                (car #{w2 4766}#)))
                                                          (if (null? #{m2 4791}#)
                                                            #{m1 4767}#
                                                            (append
                                                              #{m1 4767}#
                                                              #{m2 4791}#)))
                                                        (let ((#{m2 4799}#
                                                                (cdr #{w2 4766}#)))
                                                          (if (null? #{m2 4799}#)
                                                            #{s1 4768}#
                                                            (append
                                                              #{s1 4768}#
                                                              #{m2 4799}#))))))))
                                          (#{module 4759}#
                                            (vector-ref #{x 4725}# 3)))
                                      (vector
                                        'syntax-object
                                        #{expression 4757}#
                                        #{wrap 4758}#
                                        #{module 4759}#))
                                    (if (null? #{x 4725}#)
                                      #{x 4725}#
                                      (vector
                                        'syntax-object
                                        #{x 4725}#
                                        #{w 4517}#
                                        #{mod 4519}#)))))))))
                      #{var 4613}#
                      #{names 4617}#)
                    (#{chi-body 4377}#
                      (cons #{e1 4615}# #{e2 4616}#)
                      (let ((#{x 4896}#
                              (begin
                                (if (if (pair? #{e 4515}#) #{s 4518}# #f)
                                  (set-source-properties!
                                    #{e 4515}#
                                    #{s 4518}#))
                                #{e 4515}#)))
                        (if (if (null? (car #{w 4517}#))
                              (null? (cdr #{w 4517}#))
                              #f)
                          #{x 4896}#
                          (if (if (vector? #{x 4896}#)
                                (if (= (vector-length #{x 4896}#) 4)
                                  (eq? (vector-ref #{x 4896}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (let ((#{expression 4928}#
                                    (vector-ref #{x 4896}# 1))
                                  (#{wrap 4929}#
                                    (let ((#{w2 4937}#
                                            (vector-ref #{x 4896}# 2)))
                                      (let ((#{m1 4938}# (car #{w 4517}#))
                                            (#{s1 4939}# (cdr #{w 4517}#)))
                                        (if (null? #{m1 4938}#)
                                          (if (null? #{s1 4939}#)
                                            #{w2 4937}#
                                            (cons (car #{w2 4937}#)
                                                  (let ((#{m2 4954}#
                                                          (cdr #{w2 4937}#)))
                                                    (if (null? #{m2 4954}#)
                                                      #{s1 4939}#
                                                      (append
                                                        #{s1 4939}#
                                                        #{m2 4954}#)))))
                                          (cons (let ((#{m2 4962}#
                                                        (car #{w2 4937}#)))
                                                  (if (null? #{m2 4962}#)
                                                    #{m1 4938}#
                                                    (append
                                                      #{m1 4938}#
                                                      #{m2 4962}#)))
                                                (let ((#{m2 4970}#
                                                        (cdr #{w2 4937}#)))
                                                  (if (null? #{m2 4970}#)
                                                    #{s1 4939}#
                                                    (append
                                                      #{s1 4939}#
                                                      #{m2 4970}#))))))))
                                  (#{module 4930}# (vector-ref #{x 4896}# 3)))
                              (vector
                                'syntax-object
                                #{expression 4928}#
                                #{wrap 4929}#
                                #{module 4930}#))
                            (if (null? #{x 4896}#)
                              #{x 4896}#
                              (vector
                                'syntax-object
                                #{x 4896}#
                                #{w 4517}#
                                #{mod 4519}#)))))
                      (#{extend-env 4335}#
                        #{names 4617}#
                        (let ((#{trans-r 5048}#
                                (#{macros-only-env 4337}# #{r 4516}#)))
                          (map (lambda (#{x 5049}#)
                                 (cons 'macro
                                       (#{eval-local-transformer 4379}#
                                         (#{chi 4373}#
                                           #{x 5049}#
                                           #{trans-r 5048}#
                                           #{w 4517}#
                                           #{mod 4519}#)
                                         #{mod 4519}#)))
                               #{val 4614}#))
                        #{r 4516}#)
                      #{w 4517}#
                      #{mod 4519}#))))
              #{tmp 4521}#)
            (syntax-violation
              'fluid-let-syntax
              "bad syntax"
              (let ((#{x 5265}#
                      (begin
                        (if (if (pair? #{e 4515}#) #{s 4518}# #f)
                          (set-source-properties! #{e 4515}# #{s 4518}#))
                        #{e 4515}#)))
                (if (if (null? (car #{w 4517}#))
                      (null? (cdr #{w 4517}#))
                      #f)
                  #{x 5265}#
                  (if (if (vector? #{x 5265}#)
                        (if (= (vector-length #{x 5265}#) 4)
                          (eq? (vector-ref #{x 5265}# 0) 'syntax-object)
                          #f)
                        #f)
                    (let ((#{expression 5297}# (vector-ref #{x 5265}# 1))
                          (#{wrap 5298}#
                            (let ((#{w2 5306}# (vector-ref #{x 5265}# 2)))
                              (let ((#{m1 5307}# (car #{w 4517}#))
                                    (#{s1 5308}# (cdr #{w 4517}#)))
                                (if (null? #{m1 5307}#)
                                  (if (null? #{s1 5308}#)
                                    #{w2 5306}#
                                    (cons (car #{w2 5306}#)
                                          (let ((#{m2 5323}#
                                                  (cdr #{w2 5306}#)))
                                            (if (null? #{m2 5323}#)
                                              #{s1 5308}#
                                              (append
                                                #{s1 5308}#
                                                #{m2 5323}#)))))
                                  (cons (let ((#{m2 5331}# (car #{w2 5306}#)))
                                          (if (null? #{m2 5331}#)
                                            #{m1 5307}#
                                            (append #{m1 5307}# #{m2 5331}#)))
                                        (let ((#{m2 5339}# (cdr #{w2 5306}#)))
                                          (if (null? #{m2 5339}#)
                                            #{s1 5308}#
                                            (append
                                              #{s1 5308}#
                                              #{m2 5339}#))))))))
                          (#{module 5299}# (vector-ref #{x 5265}# 3)))
                      (vector
                        'syntax-object
                        #{expression 5297}#
                        #{wrap 5298}#
                        #{module 5299}#))
                    (if (null? #{x 5265}#)
                      #{x 5265}#
                      (vector
                        'syntax-object
                        #{x 5265}#
                        #{w 4517}#
                        #{mod 4519}#))))))))))
    (module-define!
      (current-module)
      'quote
      (make-syntax-transformer
        'quote
        'core
        (lambda (#{e 5367}#
                 #{r 5368}#
                 #{w 5369}#
                 #{s 5370}#
                 #{mod 5371}#)
          (let ((#{tmp 5373}# ($sc-dispatch #{e 5367}# '(_ any))))
            (if #{tmp 5373}#
              (@apply
                (lambda (#{e 5376}#)
                  (let ((#{exp 5380}#
                          (#{strip 4386}# #{e 5376}# #{w 5369}#)))
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 1)
                      #{s 5370}#
                      #{exp 5380}#)))
                #{tmp 5373}#)
              (syntax-violation
                'quote
                "bad syntax"
                (let ((#{x 5394}#
                        (begin
                          (if (if (pair? #{e 5367}#) #{s 5370}# #f)
                            (set-source-properties! #{e 5367}# #{s 5370}#))
                          #{e 5367}#)))
                  (if (if (null? (car #{w 5369}#))
                        (null? (cdr #{w 5369}#))
                        #f)
                    #{x 5394}#
                    (if (if (vector? #{x 5394}#)
                          (if (= (vector-length #{x 5394}#) 4)
                            (eq? (vector-ref #{x 5394}# 0) 'syntax-object)
                            #f)
                          #f)
                      (let ((#{expression 5426}# (vector-ref #{x 5394}# 1))
                            (#{wrap 5427}#
                              (let ((#{w2 5435}# (vector-ref #{x 5394}# 2)))
                                (let ((#{m1 5436}# (car #{w 5369}#))
                                      (#{s1 5437}# (cdr #{w 5369}#)))
                                  (if (null? #{m1 5436}#)
                                    (if (null? #{s1 5437}#)
                                      #{w2 5435}#
                                      (cons (car #{w2 5435}#)
                                            (let ((#{m2 5452}#
                                                    (cdr #{w2 5435}#)))
                                              (if (null? #{m2 5452}#)
                                                #{s1 5437}#
                                                (append
                                                  #{s1 5437}#
                                                  #{m2 5452}#)))))
                                    (cons (let ((#{m2 5460}#
                                                  (car #{w2 5435}#)))
                                            (if (null? #{m2 5460}#)
                                              #{m1 5436}#
                                              (append
                                                #{m1 5436}#
                                                #{m2 5460}#)))
                                          (let ((#{m2 5468}#
                                                  (cdr #{w2 5435}#)))
                                            (if (null? #{m2 5468}#)
                                              #{s1 5437}#
                                              (append
                                                #{s1 5437}#
                                                #{m2 5468}#))))))))
                            (#{module 5428}# (vector-ref #{x 5394}# 3)))
                        (vector
                          'syntax-object
                          #{expression 5426}#
                          #{wrap 5427}#
                          #{module 5428}#))
                      (if (null? #{x 5394}#)
                        #{x 5394}#
                        (vector
                          'syntax-object
                          #{x 5394}#
                          #{w 5369}#
                          #{mod 5371}#)))))))))))
    (#{global-extend 4339}#
      'core
      'syntax
      (letrec*
        ((#{gen-syntax 5708}#
           (lambda (#{src 6171}#
                    #{e 6172}#
                    #{r 6173}#
                    #{maps 6174}#
                    #{ellipsis? 6175}#
                    #{mod 6176}#)
             (if (if (symbol? #{e 6172}#)
                   #t
                   (if (if (vector? #{e 6172}#)
                         (if (= (vector-length #{e 6172}#) 4)
                           (eq? (vector-ref #{e 6172}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{e 6172}# 1))
                     #f))
               (let ((#{label 6203}#
                       (#{id-var-name 4360}# #{e 6172}# '(()))))
                 (let ((#{b 6204}#
                         (let ((#{t 6341}# (assq #{label 6203}# #{r 6173}#)))
                           (if #{t 6341}#
                             (cdr #{t 6341}#)
                             (if (symbol? #{label 6203}#)
                               (let ((#{t 6346}#
                                       (begin
                                         (if (if (not #{mod 6176}#)
                                               (current-module)
                                               #f)
                                           (warn "module system is booted, we should have a module"
                                                 #{label 6203}#))
                                         (let ((#{v 6383}#
                                                 (module-variable
                                                   (if #{mod 6176}#
                                                     (resolve-module
                                                       (cdr #{mod 6176}#))
                                                     (current-module))
                                                   #{label 6203}#)))
                                           (if #{v 6383}#
                                             (if (variable-bound? #{v 6383}#)
                                               (let ((#{val 6392}#
                                                       (variable-ref
                                                         #{v 6383}#)))
                                                 (if (macro? #{val 6392}#)
                                                   (if (macro-type
                                                         #{val 6392}#)
                                                     (cons (macro-type
                                                             #{val 6392}#)
                                                           (macro-binding
                                                             #{val 6392}#))
                                                     #f)
                                                   #f))
                                               #f)
                                             #f)))))
                                 (if #{t 6346}# #{t 6346}# '(global)))
                               '(displaced-lexical))))))
                   (if (eq? (car #{b 6204}#) 'syntax)
                     (call-with-values
                       (lambda ()
                         (let ((#{var.lev 6237}# (cdr #{b 6204}#)))
                           (#{gen-ref 5709}#
                             #{src 6171}#
                             (car #{var.lev 6237}#)
                             (cdr #{var.lev 6237}#)
                             #{maps 6174}#)))
                       (lambda (#{var 6333}# #{maps 6334}#)
                         (values (list 'ref #{var 6333}#) #{maps 6334}#)))
                     (if (#{ellipsis? 6175}# #{e 6172}#)
                       (syntax-violation
                         'syntax
                         "misplaced ellipsis"
                         #{src 6171}#)
                       (values (list 'quote #{e 6172}#) #{maps 6174}#)))))
               (let ((#{tmp 6404}#
                       ($sc-dispatch #{e 6172}# '(any any))))
                 (if (if #{tmp 6404}#
                       (@apply
                         (lambda (#{dots 6408}# #{e 6409}#)
                           (#{ellipsis? 6175}# #{dots 6408}#))
                         #{tmp 6404}#)
                       #f)
                   (@apply
                     (lambda (#{dots 6410}# #{e 6411}#)
                       (#{gen-syntax 5708}#
                         #{src 6171}#
                         #{e 6411}#
                         #{r 6173}#
                         #{maps 6174}#
                         (lambda (#{x 6412}#) #f)
                         #{mod 6176}#))
                     #{tmp 6404}#)
                   (let ((#{tmp 6413}#
                           ($sc-dispatch #{e 6172}# '(any any . any))))
                     (if (if #{tmp 6413}#
                           (@apply
                             (lambda (#{x 6417}# #{dots 6418}# #{y 6419}#)
                               (#{ellipsis? 6175}# #{dots 6418}#))
                             #{tmp 6413}#)
                           #f)
                       (@apply
                         (lambda (#{x 6420}# #{dots 6421}# #{y 6422}#)
                           (letrec*
                             ((#{f 6423}#
                                (lambda (#{y 6431}# #{k 6432}#)
                                  (let ((#{tmp 6434}#
                                          ($sc-dispatch
                                            #{y 6431}#
                                            '(any . any))))
                                    (if (if #{tmp 6434}#
                                          (@apply
                                            (lambda (#{dots 6438}# #{y 6439}#)
                                              (#{ellipsis? 6175}#
                                                #{dots 6438}#))
                                            #{tmp 6434}#)
                                          #f)
                                      (@apply
                                        (lambda (#{dots 6440}# #{y 6441}#)
                                          (#{f 6423}#
                                            #{y 6441}#
                                            (lambda (#{maps 6442}#)
                                              (call-with-values
                                                (lambda ()
                                                  (#{k 6432}#
                                                    (cons '() #{maps 6442}#)))
                                                (lambda (#{x 6443}#
                                                         #{maps 6444}#)
                                                  (if (null? (car #{maps 6444}#))
                                                    (syntax-violation
                                                      'syntax
                                                      "extra ellipsis"
                                                      #{src 6171}#)
                                                    (values
                                                      (let ((#{map-env 6448}#
                                                              (car #{maps 6444}#)))
                                                        (list 'apply
                                                              '(primitive
                                                                 append)
                                                              (#{gen-map 5711}#
                                                                #{x 6443}#
                                                                #{map-env 6448}#)))
                                                      (cdr #{maps 6444}#))))))))
                                        #{tmp 6434}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{gen-syntax 5708}#
                                            #{src 6171}#
                                            #{y 6431}#
                                            #{r 6173}#
                                            #{maps 6174}#
                                            #{ellipsis? 6175}#
                                            #{mod 6176}#))
                                        (lambda (#{y 6451}# #{maps 6452}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{k 6432}# #{maps 6452}#))
                                            (lambda (#{x 6453}# #{maps 6454}#)
                                              (values
                                                (if (equal? #{y 6451}# ''())
                                                  #{x 6453}#
                                                  (list 'append
                                                        #{x 6453}#
                                                        #{y 6451}#))
                                                #{maps 6454}#))))))))))
                             (#{f 6423}#
                               #{y 6422}#
                               (lambda (#{maps 6426}#)
                                 (call-with-values
                                   (lambda ()
                                     (#{gen-syntax 5708}#
                                       #{src 6171}#
                                       #{x 6420}#
                                       #{r 6173}#
                                       (cons '() #{maps 6426}#)
                                       #{ellipsis? 6175}#
                                       #{mod 6176}#))
                                   (lambda (#{x 6427}# #{maps 6428}#)
                                     (if (null? (car #{maps 6428}#))
                                       (syntax-violation
                                         'syntax
                                         "extra ellipsis"
                                         #{src 6171}#)
                                       (values
                                         (#{gen-map 5711}#
                                           #{x 6427}#
                                           (car #{maps 6428}#))
                                         (cdr #{maps 6428}#)))))))))
                         #{tmp 6413}#)
                       (let ((#{tmp 6470}#
                               ($sc-dispatch #{e 6172}# '(any . any))))
                         (if #{tmp 6470}#
                           (@apply
                             (lambda (#{x 6474}# #{y 6475}#)
                               (call-with-values
                                 (lambda ()
                                   (#{gen-syntax 5708}#
                                     #{src 6171}#
                                     #{x 6474}#
                                     #{r 6173}#
                                     #{maps 6174}#
                                     #{ellipsis? 6175}#
                                     #{mod 6176}#))
                                 (lambda (#{x 6476}# #{maps 6477}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{gen-syntax 5708}#
                                         #{src 6171}#
                                         #{y 6475}#
                                         #{r 6173}#
                                         #{maps 6477}#
                                         #{ellipsis? 6175}#
                                         #{mod 6176}#))
                                     (lambda (#{y 6478}# #{maps 6479}#)
                                       (values
                                         (let ((#{atom-key 6484}#
                                                 (car #{y 6478}#)))
                                           (if (eqv? #{atom-key 6484}# 'quote)
                                             (if (eq? (car #{x 6476}#) 'quote)
                                               (list 'quote
                                                     (cons (car (cdr #{x 6476}#))
                                                           (car (cdr #{y 6478}#))))
                                               (if (eq? (car (cdr #{y 6478}#))
                                                        '())
                                                 (list 'list #{x 6476}#)
                                                 (list 'cons
                                                       #{x 6476}#
                                                       #{y 6478}#)))
                                             (if (eqv? #{atom-key 6484}# 'list)
                                               (cons 'list
                                                     (cons #{x 6476}#
                                                           (cdr #{y 6478}#)))
                                               (list 'cons
                                                     #{x 6476}#
                                                     #{y 6478}#))))
                                         #{maps 6479}#))))))
                             #{tmp 6470}#)
                           (let ((#{tmp 6513}#
                                   ($sc-dispatch
                                     #{e 6172}#
                                     '#(vector (any . each-any)))))
                             (if #{tmp 6513}#
                               (@apply
                                 (lambda (#{e1 6517}# #{e2 6518}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{gen-syntax 5708}#
                                         #{src 6171}#
                                         (cons #{e1 6517}# #{e2 6518}#)
                                         #{r 6173}#
                                         #{maps 6174}#
                                         #{ellipsis? 6175}#
                                         #{mod 6176}#))
                                     (lambda (#{e 6519}# #{maps 6520}#)
                                       (values
                                         (if (eq? (car #{e 6519}#) 'list)
                                           (cons 'vector (cdr #{e 6519}#))
                                           (if (eq? (car #{e 6519}#) 'quote)
                                             (list 'quote
                                                   (list->vector
                                                     (car (cdr #{e 6519}#))))
                                             (list 'list->vector #{e 6519}#)))
                                         #{maps 6520}#))))
                                 #{tmp 6513}#)
                               (values
                                 (list 'quote #{e 6172}#)
                                 #{maps 6174}#))))))))))))
         (#{gen-ref 5709}#
           (lambda (#{src 6547}#
                    #{var 6548}#
                    #{level 6549}#
                    #{maps 6550}#)
             (if (= #{level 6549}# 0)
               (values #{var 6548}# #{maps 6550}#)
               (if (null? #{maps 6550}#)
                 (syntax-violation
                   'syntax
                   "missing ellipsis"
                   #{src 6547}#)
                 (call-with-values
                   (lambda ()
                     (#{gen-ref 5709}#
                       #{src 6547}#
                       #{var 6548}#
                       (#{1-}# #{level 6549}#)
                       (cdr #{maps 6550}#)))
                   (lambda (#{outer-var 6551}# #{outer-maps 6552}#)
                     (let ((#{b 6553}#
                             (assq #{outer-var 6551}# (car #{maps 6550}#))))
                       (if #{b 6553}#
                         (values (cdr #{b 6553}#) #{maps 6550}#)
                         (let ((#{inner-var 6555}#
                                 (gensym
                                   (string-append (symbol->string 'tmp) " "))))
                           (values
                             #{inner-var 6555}#
                             (cons (cons (cons #{outer-var 6551}#
                                               #{inner-var 6555}#)
                                         (car #{maps 6550}#))
                                   #{outer-maps 6552}#)))))))))))
         (#{gen-map 5711}#
           (lambda (#{e 6569}# #{map-env 6570}#)
             (let ((#{formals 6571}# (map cdr #{map-env 6570}#))
                   (#{actuals 6572}#
                     (map (lambda (#{x 6574}#)
                            (list 'ref (car #{x 6574}#)))
                          #{map-env 6570}#)))
               (if (eq? (car #{e 6569}#) 'ref)
                 (car #{actuals 6572}#)
                 (if (and-map
                       (lambda (#{x 6575}#)
                         (if (eq? (car #{x 6575}#) 'ref)
                           (memq (car (cdr #{x 6575}#)) #{formals 6571}#)
                           #f))
                       (cdr #{e 6569}#))
                   (cons 'map
                         (cons (list 'primitive (car #{e 6569}#))
                               (map (let ((#{r 6577}#
                                            (map cons
                                                 #{formals 6571}#
                                                 #{actuals 6572}#)))
                                      (lambda (#{x 6578}#)
                                        (cdr (assq (car (cdr #{x 6578}#))
                                                   #{r 6577}#))))
                                    (cdr #{e 6569}#))))
                   (cons 'map
                         (cons (list 'lambda #{formals 6571}# #{e 6569}#)
                               #{actuals 6572}#)))))))
         (#{regen 5715}#
           (lambda (#{x 6580}#)
             (let ((#{atom-key 6581}# (car #{x 6580}#)))
               (if (eqv? #{atom-key 6581}# 'ref)
                 (let ((#{name 6591}# (car (cdr #{x 6580}#)))
                       (#{var 6592}# (car (cdr #{x 6580}#))))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 3)
                     #f
                     #{name 6591}#
                     #{var 6592}#))
                 (if (eqv? #{atom-key 6581}# 'primitive)
                   (let ((#{name 6603}# (car (cdr #{x 6580}#))))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 2)
                       #f
                       #{name 6603}#))
                   (if (eqv? #{atom-key 6581}# 'quote)
                     (let ((#{exp 6614}# (car (cdr #{x 6580}#))))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 1)
                         #f
                         #{exp 6614}#))
                     (if (eqv? #{atom-key 6581}# 'lambda)
                       (if (list? (car (cdr #{x 6580}#)))
                         (let ((#{req 6625}# (car (cdr #{x 6580}#)))
                               (#{vars 6627}# (car (cdr #{x 6580}#)))
                               (#{exp 6629}#
                                 (#{regen 5715}#
                                   (car (cdr (cdr #{x 6580}#))))))
                           (let ((#{body 6634}#
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 15)
                                     #f
                                     #{req 6625}#
                                     #f
                                     #f
                                     #f
                                     '()
                                     #{vars 6627}#
                                     #{exp 6629}#
                                     #f)))
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 14)
                               #f
                               '()
                               #{body 6634}#)))
                         (error "how did we get here" #{x 6580}#))
                       (let ((#{name 6650}# (car #{x 6580}#))
                             (#{args 6651}#
                               (map #{regen 5715}# (cdr #{x 6580}#))))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 12)
                           #f
                           #{name 6650}#
                           #{args 6651}#))))))))))
        (lambda (#{e 5716}#
                 #{r 5717}#
                 #{w 5718}#
                 #{s 5719}#
                 #{mod 5720}#)
          (let ((#{e 5721}#
                  (let ((#{x 6082}#
                          (begin
                            (if (if (pair? #{e 5716}#) #{s 5719}# #f)
                              (set-source-properties! #{e 5716}# #{s 5719}#))
                            #{e 5716}#)))
                    (if (if (null? (car #{w 5718}#))
                          (null? (cdr #{w 5718}#))
                          #f)
                      #{x 6082}#
                      (if (if (vector? #{x 6082}#)
                            (if (= (vector-length #{x 6082}#) 4)
                              (eq? (vector-ref #{x 6082}# 0) 'syntax-object)
                              #f)
                            #f)
                        (let ((#{expression 6114}# (vector-ref #{x 6082}# 1))
                              (#{wrap 6115}#
                                (let ((#{w2 6123}# (vector-ref #{x 6082}# 2)))
                                  (let ((#{m1 6124}# (car #{w 5718}#))
                                        (#{s1 6125}# (cdr #{w 5718}#)))
                                    (if (null? #{m1 6124}#)
                                      (if (null? #{s1 6125}#)
                                        #{w2 6123}#
                                        (cons (car #{w2 6123}#)
                                              (let ((#{m2 6140}#
                                                      (cdr #{w2 6123}#)))
                                                (if (null? #{m2 6140}#)
                                                  #{s1 6125}#
                                                  (append
                                                    #{s1 6125}#
                                                    #{m2 6140}#)))))
                                      (cons (let ((#{m2 6148}#
                                                    (car #{w2 6123}#)))
                                              (if (null? #{m2 6148}#)
                                                #{m1 6124}#
                                                (append
                                                  #{m1 6124}#
                                                  #{m2 6148}#)))
                                            (let ((#{m2 6156}#
                                                    (cdr #{w2 6123}#)))
                                              (if (null? #{m2 6156}#)
                                                #{s1 6125}#
                                                (append
                                                  #{s1 6125}#
                                                  #{m2 6156}#))))))))
                              (#{module 6116}# (vector-ref #{x 6082}# 3)))
                          (vector
                            'syntax-object
                            #{expression 6114}#
                            #{wrap 6115}#
                            #{module 6116}#))
                        (if (null? #{x 6082}#)
                          #{x 6082}#
                          (vector
                            'syntax-object
                            #{x 6082}#
                            #{w 5718}#
                            #{mod 5720}#)))))))
            (let ((#{tmp 5722}# #{e 5721}#))
              (let ((#{tmp 5723}#
                      ($sc-dispatch #{tmp 5722}# '(_ any))))
                (if #{tmp 5723}#
                  (@apply
                    (lambda (#{x 5775}#)
                      (call-with-values
                        (lambda ()
                          (#{gen-syntax 5708}#
                            #{e 5721}#
                            #{x 5775}#
                            #{r 5717}#
                            '()
                            #{ellipsis? 4381}#
                            #{mod 5720}#))
                        (lambda (#{e 5858}# #{maps 5859}#)
                          (#{regen 5715}# #{e 5858}#))))
                    #{tmp 5723}#)
                  (syntax-violation
                    'syntax
                    "bad `syntax' form"
                    #{e 5721}#))))))))
    (#{global-extend 4339}#
      'core
      'lambda
      (lambda (#{e 6887}#
               #{r 6888}#
               #{w 6889}#
               #{s 6890}#
               #{mod 6891}#)
        (let ((#{tmp 6893}#
                ($sc-dispatch #{e 6887}# '(_ any any . each-any))))
          (if #{tmp 6893}#
            (@apply
              (lambda (#{args 6897}# #{e1 6898}# #{e2 6899}#)
                (call-with-values
                  (lambda ()
                    (#{lambda-formals 4382}# #{args 6897}#))
                  (lambda (#{req 6902}#
                           #{opt 6903}#
                           #{rest 6904}#
                           #{kw 6905}#)
                    (letrec*
                      ((#{lp 6906}#
                         (lambda (#{body 6909}# #{meta 6910}#)
                           (let ((#{tmp 6912}#
                                   ($sc-dispatch
                                     #{body 6909}#
                                     '(any any . each-any))))
                             (if (if #{tmp 6912}#
                                   (@apply
                                     (lambda (#{docstring 6916}#
                                              #{e1 6917}#
                                              #{e2 6918}#)
                                       (string?
                                         (syntax->datum #{docstring 6916}#)))
                                     #{tmp 6912}#)
                                   #f)
                               (@apply
                                 (lambda (#{docstring 6919}#
                                          #{e1 6920}#
                                          #{e2 6921}#)
                                   (#{lp 6906}#
                                     (cons #{e1 6920}# #{e2 6921}#)
                                     (append
                                       #{meta 6910}#
                                       (list (cons 'documentation
                                                   (syntax->datum
                                                     #{docstring 6919}#))))))
                                 #{tmp 6912}#)
                               (let ((#{tmp 6922}#
                                       ($sc-dispatch
                                         #{body 6909}#
                                         '(#(vector #(each (any . any)))
                                           any
                                           .
                                           each-any))))
                                 (if #{tmp 6922}#
                                   (@apply
                                     (lambda (#{k 6926}#
                                              #{v 6927}#
                                              #{e1 6928}#
                                              #{e2 6929}#)
                                       (#{lp 6906}#
                                         (cons #{e1 6928}# #{e2 6929}#)
                                         (append
                                           #{meta 6910}#
                                           (syntax->datum
                                             (map cons
                                                  #{k 6926}#
                                                  #{v 6927}#)))))
                                     #{tmp 6922}#)
                                   (#{chi-simple-lambda 4383}#
                                     #{e 6887}#
                                     #{r 6888}#
                                     #{w 6889}#
                                     #{s 6890}#
                                     #{mod 6891}#
                                     #{req 6902}#
                                     #{rest 6904}#
                                     #{meta 6910}#
                                     #{body 6909}#))))))))
                      (#{lp 6906}# (cons #{e1 6898}# #{e2 6899}#) '())))))
              #{tmp 6893}#)
            (syntax-violation
              'lambda
              "bad lambda"
              #{e 6887}#)))))
    (#{global-extend 4339}#
      'core
      'lambda*
      (lambda (#{e 7313}#
               #{r 7314}#
               #{w 7315}#
               #{s 7316}#
               #{mod 7317}#)
        (let ((#{tmp 7319}#
                ($sc-dispatch #{e 7313}# '(_ any any . each-any))))
          (if #{tmp 7319}#
            (@apply
              (lambda (#{args 7323}# #{e1 7324}# #{e2 7325}#)
                (call-with-values
                  (lambda ()
                    (#{chi-lambda-case 4385}#
                      #{e 7313}#
                      #{r 7314}#
                      #{w 7315}#
                      #{s 7316}#
                      #{mod 7317}#
                      #{lambda*-formals 4384}#
                      (list (cons #{args 7323}#
                                  (cons #{e1 7324}# #{e2 7325}#)))))
                  (lambda (#{meta 7328}# #{lcase 7329}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 14)
                      #{s 7316}#
                      #{meta 7328}#
                      #{lcase 7329}#))))
              #{tmp 7319}#)
            (syntax-violation
              'lambda
              "bad lambda*"
              #{e 7313}#)))))
    (#{global-extend 4339}#
      'core
      'case-lambda
      (lambda (#{e 7492}#
               #{r 7493}#
               #{w 7494}#
               #{s 7495}#
               #{mod 7496}#)
        (let ((#{tmp 7498}#
                ($sc-dispatch
                  #{e 7492}#
                  '(_ (any any . each-any)
                      .
                      #(each (any any . each-any))))))
          (if #{tmp 7498}#
            (@apply
              (lambda (#{args 7502}#
                       #{e1 7503}#
                       #{e2 7504}#
                       #{args* 7505}#
                       #{e1* 7506}#
                       #{e2* 7507}#)
                (call-with-values
                  (lambda ()
                    (#{chi-lambda-case 4385}#
                      #{e 7492}#
                      #{r 7493}#
                      #{w 7494}#
                      #{s 7495}#
                      #{mod 7496}#
                      #{lambda-formals 4382}#
                      (cons (cons #{args 7502}#
                                  (cons #{e1 7503}# #{e2 7504}#))
                            (map (lambda (#{tmp 3304 7510}#
                                          #{tmp 3303 7511}#
                                          #{tmp 3302 7512}#)
                                   (cons #{tmp 3302 7512}#
                                         (cons #{tmp 3303 7511}#
                                               #{tmp 3304 7510}#)))
                                 #{e2* 7507}#
                                 #{e1* 7506}#
                                 #{args* 7505}#))))
                  (lambda (#{meta 7513}# #{lcase 7514}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 14)
                      #{s 7495}#
                      #{meta 7513}#
                      #{lcase 7514}#))))
              #{tmp 7498}#)
            (syntax-violation
              'case-lambda
              "bad case-lambda"
              #{e 7492}#)))))
    (#{global-extend 4339}#
      'core
      'case-lambda*
      (lambda (#{e 7683}#
               #{r 7684}#
               #{w 7685}#
               #{s 7686}#
               #{mod 7687}#)
        (let ((#{tmp 7689}#
                ($sc-dispatch
                  #{e 7683}#
                  '(_ (any any . each-any)
                      .
                      #(each (any any . each-any))))))
          (if #{tmp 7689}#
            (@apply
              (lambda (#{args 7693}#
                       #{e1 7694}#
                       #{e2 7695}#
                       #{args* 7696}#
                       #{e1* 7697}#
                       #{e2* 7698}#)
                (call-with-values
                  (lambda ()
                    (#{chi-lambda-case 4385}#
                      #{e 7683}#
                      #{r 7684}#
                      #{w 7685}#
                      #{s 7686}#
                      #{mod 7687}#
                      #{lambda*-formals 4384}#
                      (cons (cons #{args 7693}#
                                  (cons #{e1 7694}# #{e2 7695}#))
                            (map (lambda (#{tmp 3339 7701}#
                                          #{tmp 3338 7702}#
                                          #{tmp 3337 7703}#)
                                   (cons #{tmp 3337 7703}#
                                         (cons #{tmp 3338 7702}#
                                               #{tmp 3339 7701}#)))
                                 #{e2* 7698}#
                                 #{e1* 7697}#
                                 #{args* 7696}#))))
                  (lambda (#{meta 7704}# #{lcase 7705}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 14)
                      #{s 7686}#
                      #{meta 7704}#
                      #{lcase 7705}#))))
              #{tmp 7689}#)
            (syntax-violation
              'case-lambda
              "bad case-lambda*"
              #{e 7683}#)))))
    (#{global-extend 4339}#
      'core
      'let
      (letrec*
        ((#{chi-let 7914}#
           (lambda (#{e 8124}#
                    #{r 8125}#
                    #{w 8126}#
                    #{s 8127}#
                    #{mod 8128}#
                    #{constructor 8129}#
                    #{ids 8130}#
                    #{vals 8131}#
                    #{exps 8132}#)
             (if (not (#{valid-bound-ids? 4363}# #{ids 8130}#))
               (syntax-violation
                 'let
                 "duplicate bound variable"
                 #{e 8124}#)
               (let ((#{labels 8217}#
                       (#{gen-labels 4344}# #{ids 8130}#))
                     (#{new-vars 8218}#
                       (map #{gen-var 4387}# #{ids 8130}#)))
                 (let ((#{nw 8219}#
                         (#{make-binding-wrap 4355}#
                           #{ids 8130}#
                           #{labels 8217}#
                           #{w 8126}#))
                       (#{nr 8220}#
                         (#{extend-var-env 4336}#
                           #{labels 8217}#
                           #{new-vars 8218}#
                           #{r 8125}#)))
                   (#{constructor 8129}#
                     #{s 8127}#
                     (map syntax->datum #{ids 8130}#)
                     #{new-vars 8218}#
                     (map (lambda (#{x 8237}#)
                            (#{chi 4373}#
                              #{x 8237}#
                              #{r 8125}#
                              #{w 8126}#
                              #{mod 8128}#))
                          #{vals 8131}#)
                     (#{chi-body 4377}#
                       #{exps 8132}#
                       (#{source-wrap 4367}#
                         #{e 8124}#
                         #{nw 8219}#
                         #{s 8127}#
                         #{mod 8128}#)
                       #{nr 8220}#
                       #{nw 8219}#
                       #{mod 8128}#))))))))
        (lambda (#{e 7915}#
                 #{r 7916}#
                 #{w 7917}#
                 #{s 7918}#
                 #{mod 7919}#)
          (let ((#{tmp 7921}#
                  ($sc-dispatch
                    #{e 7915}#
                    '(_ #(each (any any)) any . each-any))))
            (if (if #{tmp 7921}#
                  (@apply
                    (lambda (#{id 7925}#
                             #{val 7926}#
                             #{e1 7927}#
                             #{e2 7928}#)
                      (and-map #{id? 4341}# #{id 7925}#))
                    #{tmp 7921}#)
                  #f)
              (@apply
                (lambda (#{id 7944}#
                         #{val 7945}#
                         #{e1 7946}#
                         #{e2 7947}#)
                  (#{chi-let 7914}#
                    #{e 7915}#
                    #{r 7916}#
                    #{w 7917}#
                    #{s 7918}#
                    #{mod 7919}#
                    (lambda (#{src 7951}#
                             #{ids 7952}#
                             #{vars 7953}#
                             #{val-exps 7954}#
                             #{body-exp 7955}#)
                      (begin
                        (for-each
                          #{maybe-name-value! 4305}#
                          #{ids 7952}#
                          #{val-exps 7954}#)
                        (if (null? #{vars 7953}#)
                          #{body-exp 7955}#
                          (make-struct/no-tail
                            (vector-ref %expanded-vtables 16)
                            #{src 7951}#
                            #{ids 7952}#
                            #{vars 7953}#
                            #{val-exps 7954}#
                            #{body-exp 7955}#))))
                    #{id 7944}#
                    #{val 7945}#
                    (cons #{e1 7946}# #{e2 7947}#)))
                #{tmp 7921}#)
              (let ((#{tmp 7962}#
                      ($sc-dispatch
                        #{e 7915}#
                        '(_ any #(each (any any)) any . each-any))))
                (if (if #{tmp 7962}#
                      (@apply
                        (lambda (#{f 7966}#
                                 #{id 7967}#
                                 #{val 7968}#
                                 #{e1 7969}#
                                 #{e2 7970}#)
                          (if (if (symbol? #{f 7966}#)
                                #t
                                (if (if (vector? #{f 7966}#)
                                      (if (= (vector-length #{f 7966}#) 4)
                                        (eq? (vector-ref #{f 7966}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{f 7966}# 1))
                                  #f))
                            (and-map #{id? 4341}# #{id 7967}#)
                            #f))
                        #{tmp 7962}#)
                      #f)
                  (@apply
                    (lambda (#{f 8012}#
                             #{id 8013}#
                             #{val 8014}#
                             #{e1 8015}#
                             #{e2 8016}#)
                      (#{chi-let 7914}#
                        #{e 7915}#
                        #{r 7916}#
                        #{w 7917}#
                        #{s 7918}#
                        #{mod 7919}#
                        #{build-named-let 4324}#
                        (cons #{f 8012}# #{id 8013}#)
                        #{val 8014}#
                        (cons #{e1 8015}# #{e2 8016}#)))
                    #{tmp 7962}#)
                  (syntax-violation
                    'let
                    "bad let"
                    (let ((#{x 8029}#
                            (begin
                              (if (if (pair? #{e 7915}#) #{s 7918}# #f)
                                (set-source-properties! #{e 7915}# #{s 7918}#))
                              #{e 7915}#)))
                      (if (if (null? (car #{w 7917}#))
                            (null? (cdr #{w 7917}#))
                            #f)
                        #{x 8029}#
                        (if (if (vector? #{x 8029}#)
                              (if (= (vector-length #{x 8029}#) 4)
                                (eq? (vector-ref #{x 8029}# 0) 'syntax-object)
                                #f)
                              #f)
                          (let ((#{expression 8061}# (vector-ref #{x 8029}# 1))
                                (#{wrap 8062}#
                                  (let ((#{w2 8070}#
                                          (vector-ref #{x 8029}# 2)))
                                    (let ((#{m1 8071}# (car #{w 7917}#))
                                          (#{s1 8072}# (cdr #{w 7917}#)))
                                      (if (null? #{m1 8071}#)
                                        (if (null? #{s1 8072}#)
                                          #{w2 8070}#
                                          (cons (car #{w2 8070}#)
                                                (let ((#{m2 8087}#
                                                        (cdr #{w2 8070}#)))
                                                  (if (null? #{m2 8087}#)
                                                    #{s1 8072}#
                                                    (append
                                                      #{s1 8072}#
                                                      #{m2 8087}#)))))
                                        (cons (let ((#{m2 8095}#
                                                      (car #{w2 8070}#)))
                                                (if (null? #{m2 8095}#)
                                                  #{m1 8071}#
                                                  (append
                                                    #{m1 8071}#
                                                    #{m2 8095}#)))
                                              (let ((#{m2 8103}#
                                                      (cdr #{w2 8070}#)))
                                                (if (null? #{m2 8103}#)
                                                  #{s1 8072}#
                                                  (append
                                                    #{s1 8072}#
                                                    #{m2 8103}#))))))))
                                (#{module 8063}# (vector-ref #{x 8029}# 3)))
                            (vector
                              'syntax-object
                              #{expression 8061}#
                              #{wrap 8062}#
                              #{module 8063}#))
                          (if (null? #{x 8029}#)
                            #{x 8029}#
                            (vector
                              'syntax-object
                              #{x 8029}#
                              #{w 7917}#
                              #{mod 7919}#)))))))))))))
    (#{global-extend 4339}#
      'core
      'letrec
      (lambda (#{e 8714}#
               #{r 8715}#
               #{w 8716}#
               #{s 8717}#
               #{mod 8718}#)
        (let ((#{tmp 8720}#
                ($sc-dispatch
                  #{e 8714}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 8720}#
                (@apply
                  (lambda (#{id 8724}#
                           #{val 8725}#
                           #{e1 8726}#
                           #{e2 8727}#)
                    (and-map #{id? 4341}# #{id 8724}#))
                  #{tmp 8720}#)
                #f)
            (@apply
              (lambda (#{id 8743}#
                       #{val 8744}#
                       #{e1 8745}#
                       #{e2 8746}#)
                (if (not (#{valid-bound-ids? 4363}# #{id 8743}#))
                  (syntax-violation
                    'letrec
                    "duplicate bound variable"
                    #{e 8714}#)
                  (let ((#{labels 8843}#
                          (#{gen-labels 4344}# #{id 8743}#))
                        (#{new-vars 8844}#
                          (map #{gen-var 4387}# #{id 8743}#)))
                    (let ((#{w 8845}#
                            (#{make-binding-wrap 4355}#
                              #{id 8743}#
                              #{labels 8843}#
                              #{w 8716}#))
                          (#{r 8846}#
                            (#{extend-var-env 4336}#
                              #{labels 8843}#
                              #{new-vars 8844}#
                              #{r 8715}#)))
                      (#{build-letrec 4325}#
                        #{s 8717}#
                        #f
                        (map syntax->datum #{id 8743}#)
                        #{new-vars 8844}#
                        (map (lambda (#{x 8925}#)
                               (#{chi 4373}#
                                 #{x 8925}#
                                 #{r 8846}#
                                 #{w 8845}#
                                 #{mod 8718}#))
                             #{val 8744}#)
                        (#{chi-body 4377}#
                          (cons #{e1 8745}# #{e2 8746}#)
                          (let ((#{x 8987}#
                                  (begin
                                    (if (if (pair? #{e 8714}#) #{s 8717}# #f)
                                      (set-source-properties!
                                        #{e 8714}#
                                        #{s 8717}#))
                                    #{e 8714}#)))
                            (if (if (null? (car #{w 8845}#))
                                  (null? (cdr #{w 8845}#))
                                  #f)
                              #{x 8987}#
                              (if (if (vector? #{x 8987}#)
                                    (if (= (vector-length #{x 8987}#) 4)
                                      (eq? (vector-ref #{x 8987}# 0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (let ((#{expression 9019}#
                                        (vector-ref #{x 8987}# 1))
                                      (#{wrap 9020}#
                                        (let ((#{w2 9028}#
                                                (vector-ref #{x 8987}# 2)))
                                          (let ((#{m1 9029}# (car #{w 8845}#))
                                                (#{s1 9030}# (cdr #{w 8845}#)))
                                            (if (null? #{m1 9029}#)
                                              (if (null? #{s1 9030}#)
                                                #{w2 9028}#
                                                (cons (car #{w2 9028}#)
                                                      (let ((#{m2 9045}#
                                                              (cdr #{w2 9028}#)))
                                                        (if (null? #{m2 9045}#)
                                                          #{s1 9030}#
                                                          (append
                                                            #{s1 9030}#
                                                            #{m2 9045}#)))))
                                              (cons (let ((#{m2 9053}#
                                                            (car #{w2 9028}#)))
                                                      (if (null? #{m2 9053}#)
                                                        #{m1 9029}#
                                                        (append
                                                          #{m1 9029}#
                                                          #{m2 9053}#)))
                                                    (let ((#{m2 9061}#
                                                            (cdr #{w2 9028}#)))
                                                      (if (null? #{m2 9061}#)
                                                        #{s1 9030}#
                                                        (append
                                                          #{s1 9030}#
                                                          #{m2 9061}#))))))))
                                      (#{module 9021}#
                                        (vector-ref #{x 8987}# 3)))
                                  (vector
                                    'syntax-object
                                    #{expression 9019}#
                                    #{wrap 9020}#
                                    #{module 9021}#))
                                (if (null? #{x 8987}#)
                                  #{x 8987}#
                                  (vector
                                    'syntax-object
                                    #{x 8987}#
                                    #{w 8845}#
                                    #{mod 8718}#)))))
                          #{r 8846}#
                          #{w 8845}#
                          #{mod 8718}#))))))
              #{tmp 8720}#)
            (syntax-violation
              'letrec
              "bad letrec"
              (let ((#{x 9301}#
                      (begin
                        (if (if (pair? #{e 8714}#) #{s 8717}# #f)
                          (set-source-properties! #{e 8714}# #{s 8717}#))
                        #{e 8714}#)))
                (if (if (null? (car #{w 8716}#))
                      (null? (cdr #{w 8716}#))
                      #f)
                  #{x 9301}#
                  (if (if (vector? #{x 9301}#)
                        (if (= (vector-length #{x 9301}#) 4)
                          (eq? (vector-ref #{x 9301}# 0) 'syntax-object)
                          #f)
                        #f)
                    (let ((#{expression 9333}# (vector-ref #{x 9301}# 1))
                          (#{wrap 9334}#
                            (let ((#{w2 9342}# (vector-ref #{x 9301}# 2)))
                              (let ((#{m1 9343}# (car #{w 8716}#))
                                    (#{s1 9344}# (cdr #{w 8716}#)))
                                (if (null? #{m1 9343}#)
                                  (if (null? #{s1 9344}#)
                                    #{w2 9342}#
                                    (cons (car #{w2 9342}#)
                                          (let ((#{m2 9359}#
                                                  (cdr #{w2 9342}#)))
                                            (if (null? #{m2 9359}#)
                                              #{s1 9344}#
                                              (append
                                                #{s1 9344}#
                                                #{m2 9359}#)))))
                                  (cons (let ((#{m2 9367}# (car #{w2 9342}#)))
                                          (if (null? #{m2 9367}#)
                                            #{m1 9343}#
                                            (append #{m1 9343}# #{m2 9367}#)))
                                        (let ((#{m2 9375}# (cdr #{w2 9342}#)))
                                          (if (null? #{m2 9375}#)
                                            #{s1 9344}#
                                            (append
                                              #{s1 9344}#
                                              #{m2 9375}#))))))))
                          (#{module 9335}# (vector-ref #{x 9301}# 3)))
                      (vector
                        'syntax-object
                        #{expression 9333}#
                        #{wrap 9334}#
                        #{module 9335}#))
                    (if (null? #{x 9301}#)
                      #{x 9301}#
                      (vector
                        'syntax-object
                        #{x 9301}#
                        #{w 8716}#
                        #{mod 8718}#))))))))))
    (#{global-extend 4339}#
      'core
      'letrec*
      (lambda (#{e 9526}#
               #{r 9527}#
               #{w 9528}#
               #{s 9529}#
               #{mod 9530}#)
        (let ((#{tmp 9532}#
                ($sc-dispatch
                  #{e 9526}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 9532}#
                (@apply
                  (lambda (#{id 9536}#
                           #{val 9537}#
                           #{e1 9538}#
                           #{e2 9539}#)
                    (and-map #{id? 4341}# #{id 9536}#))
                  #{tmp 9532}#)
                #f)
            (@apply
              (lambda (#{id 9555}#
                       #{val 9556}#
                       #{e1 9557}#
                       #{e2 9558}#)
                (if (not (#{valid-bound-ids? 4363}# #{id 9555}#))
                  (syntax-violation
                    'letrec*
                    "duplicate bound variable"
                    #{e 9526}#)
                  (let ((#{labels 9655}#
                          (#{gen-labels 4344}# #{id 9555}#))
                        (#{new-vars 9656}#
                          (map #{gen-var 4387}# #{id 9555}#)))
                    (let ((#{w 9657}#
                            (#{make-binding-wrap 4355}#
                              #{id 9555}#
                              #{labels 9655}#
                              #{w 9528}#))
                          (#{r 9658}#
                            (#{extend-var-env 4336}#
                              #{labels 9655}#
                              #{new-vars 9656}#
                              #{r 9527}#)))
                      (#{build-letrec 4325}#
                        #{s 9529}#
                        #t
                        (map syntax->datum #{id 9555}#)
                        #{new-vars 9656}#
                        (map (lambda (#{x 9737}#)
                               (#{chi 4373}#
                                 #{x 9737}#
                                 #{r 9658}#
                                 #{w 9657}#
                                 #{mod 9530}#))
                             #{val 9556}#)
                        (#{chi-body 4377}#
                          (cons #{e1 9557}# #{e2 9558}#)
                          (let ((#{x 9799}#
                                  (begin
                                    (if (if (pair? #{e 9526}#) #{s 9529}# #f)
                                      (set-source-properties!
                                        #{e 9526}#
                                        #{s 9529}#))
                                    #{e 9526}#)))
                            (if (if (null? (car #{w 9657}#))
                                  (null? (cdr #{w 9657}#))
                                  #f)
                              #{x 9799}#
                              (if (if (vector? #{x 9799}#)
                                    (if (= (vector-length #{x 9799}#) 4)
                                      (eq? (vector-ref #{x 9799}# 0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (let ((#{expression 9831}#
                                        (vector-ref #{x 9799}# 1))
                                      (#{wrap 9832}#
                                        (let ((#{w2 9840}#
                                                (vector-ref #{x 9799}# 2)))
                                          (let ((#{m1 9841}# (car #{w 9657}#))
                                                (#{s1 9842}# (cdr #{w 9657}#)))
                                            (if (null? #{m1 9841}#)
                                              (if (null? #{s1 9842}#)
                                                #{w2 9840}#
                                                (cons (car #{w2 9840}#)
                                                      (let ((#{m2 9857}#
                                                              (cdr #{w2 9840}#)))
                                                        (if (null? #{m2 9857}#)
                                                          #{s1 9842}#
                                                          (append
                                                            #{s1 9842}#
                                                            #{m2 9857}#)))))
                                              (cons (let ((#{m2 9865}#
                                                            (car #{w2 9840}#)))
                                                      (if (null? #{m2 9865}#)
                                                        #{m1 9841}#
                                                        (append
                                                          #{m1 9841}#
                                                          #{m2 9865}#)))
                                                    (let ((#{m2 9873}#
                                                            (cdr #{w2 9840}#)))
                                                      (if (null? #{m2 9873}#)
                                                        #{s1 9842}#
                                                        (append
                                                          #{s1 9842}#
                                                          #{m2 9873}#))))))))
                                      (#{module 9833}#
                                        (vector-ref #{x 9799}# 3)))
                                  (vector
                                    'syntax-object
                                    #{expression 9831}#
                                    #{wrap 9832}#
                                    #{module 9833}#))
                                (if (null? #{x 9799}#)
                                  #{x 9799}#
                                  (vector
                                    'syntax-object
                                    #{x 9799}#
                                    #{w 9657}#
                                    #{mod 9530}#)))))
                          #{r 9658}#
                          #{w 9657}#
                          #{mod 9530}#))))))
              #{tmp 9532}#)
            (syntax-violation
              'letrec*
              "bad letrec*"
              (let ((#{x 10113}#
                      (begin
                        (if (if (pair? #{e 9526}#) #{s 9529}# #f)
                          (set-source-properties! #{e 9526}# #{s 9529}#))
                        #{e 9526}#)))
                (if (if (null? (car #{w 9528}#))
                      (null? (cdr #{w 9528}#))
                      #f)
                  #{x 10113}#
                  (if (if (vector? #{x 10113}#)
                        (if (= (vector-length #{x 10113}#) 4)
                          (eq? (vector-ref #{x 10113}# 0) 'syntax-object)
                          #f)
                        #f)
                    (let ((#{expression 10145}# (vector-ref #{x 10113}# 1))
                          (#{wrap 10146}#
                            (let ((#{w2 10154}# (vector-ref #{x 10113}# 2)))
                              (let ((#{m1 10155}# (car #{w 9528}#))
                                    (#{s1 10156}# (cdr #{w 9528}#)))
                                (if (null? #{m1 10155}#)
                                  (if (null? #{s1 10156}#)
                                    #{w2 10154}#
                                    (cons (car #{w2 10154}#)
                                          (let ((#{m2 10171}#
                                                  (cdr #{w2 10154}#)))
                                            (if (null? #{m2 10171}#)
                                              #{s1 10156}#
                                              (append
                                                #{s1 10156}#
                                                #{m2 10171}#)))))
                                  (cons (let ((#{m2 10179}#
                                                (car #{w2 10154}#)))
                                          (if (null? #{m2 10179}#)
                                            #{m1 10155}#
                                            (append
                                              #{m1 10155}#
                                              #{m2 10179}#)))
                                        (let ((#{m2 10187}#
                                                (cdr #{w2 10154}#)))
                                          (if (null? #{m2 10187}#)
                                            #{s1 10156}#
                                            (append
                                              #{s1 10156}#
                                              #{m2 10187}#))))))))
                          (#{module 10147}# (vector-ref #{x 10113}# 3)))
                      (vector
                        'syntax-object
                        #{expression 10145}#
                        #{wrap 10146}#
                        #{module 10147}#))
                    (if (null? #{x 10113}#)
                      #{x 10113}#
                      (vector
                        'syntax-object
                        #{x 10113}#
                        #{w 9528}#
                        #{mod 9530}#))))))))))
    (#{global-extend 4339}#
      'core
      'set!
      (lambda (#{e 10406}#
               #{r 10407}#
               #{w 10408}#
               #{s 10409}#
               #{mod 10410}#)
        (let ((#{tmp 10412}#
                ($sc-dispatch #{e 10406}# '(_ any any))))
          (if (if #{tmp 10412}#
                (@apply
                  (lambda (#{id 10416}# #{val 10417}#)
                    (if (symbol? #{id 10416}#)
                      #t
                      (if (if (vector? #{id 10416}#)
                            (if (= (vector-length #{id 10416}#) 4)
                              (eq? (vector-ref #{id 10416}# 0) 'syntax-object)
                              #f)
                            #f)
                        (symbol? (vector-ref #{id 10416}# 1))
                        #f)))
                  #{tmp 10412}#)
                #f)
            (@apply
              (lambda (#{id 10444}# #{val 10445}#)
                (let ((#{n 10446}#
                        (#{id-var-name 4360}# #{id 10444}# #{w 10408}#))
                      (#{id-mod 10447}#
                        (if (if (vector? #{id 10444}#)
                              (if (= (vector-length #{id 10444}#) 4)
                                (eq? (vector-ref #{id 10444}# 0)
                                     'syntax-object)
                                #f)
                              #f)
                          (vector-ref #{id 10444}# 3)
                          #{mod 10410}#)))
                  (let ((#{b 10448}#
                          (let ((#{t 11165}# (assq #{n 10446}# #{r 10407}#)))
                            (if #{t 11165}#
                              (cdr #{t 11165}#)
                              (if (symbol? #{n 10446}#)
                                (let ((#{t 11170}#
                                        (begin
                                          (if (if (not #{id-mod 10447}#)
                                                (current-module)
                                                #f)
                                            (warn "module system is booted, we should have a module"
                                                  #{n 10446}#))
                                          (let ((#{v 11207}#
                                                  (module-variable
                                                    (if #{id-mod 10447}#
                                                      (resolve-module
                                                        (cdr #{id-mod 10447}#))
                                                      (current-module))
                                                    #{n 10446}#)))
                                            (if #{v 11207}#
                                              (if (variable-bound? #{v 11207}#)
                                                (let ((#{val 11216}#
                                                        (variable-ref
                                                          #{v 11207}#)))
                                                  (if (macro? #{val 11216}#)
                                                    (if (macro-type
                                                          #{val 11216}#)
                                                      (cons (macro-type
                                                              #{val 11216}#)
                                                            (macro-binding
                                                              #{val 11216}#))
                                                      #f)
                                                    #f))
                                                #f)
                                              #f)))))
                                  (if #{t 11170}# #{t 11170}# '(global)))
                                '(displaced-lexical))))))
                    (let ((#{atom-key 10449}# (car #{b 10448}#)))
                      (if (let ((#{t 10488}# #{atom-key 10449}#))
                            (eqv? #{t 10488}# 'lexical))
                        (#{build-lexical-assignment 4311}#
                          #{s 10409}#
                          (syntax->datum #{id 10444}#)
                          (cdr #{b 10448}#)
                          (#{chi 4373}#
                            #{val 10445}#
                            #{r 10407}#
                            #{w 10408}#
                            #{mod 10410}#))
                        (if (let ((#{t 10787}# #{atom-key 10449}#))
                              (eqv? #{t 10787}# 'global))
                          (#{build-global-assignment 4314}#
                            #{s 10409}#
                            #{n 10446}#
                            (#{chi 4373}#
                              #{val 10445}#
                              #{r 10407}#
                              #{w 10408}#
                              #{mod 10410}#)
                            #{id-mod 10447}#)
                          (if (let ((#{t 11056}# #{atom-key 10449}#))
                                (eqv? #{t 11056}# 'macro))
                            (let ((#{p 11119}# (cdr #{b 10448}#)))
                              (if (procedure-property
                                    #{p 11119}#
                                    'variable-transformer)
                                (#{chi 4373}#
                                  (#{chi-macro 4376}#
                                    #{p 11119}#
                                    #{e 10406}#
                                    #{r 10407}#
                                    #{w 10408}#
                                    #{s 10409}#
                                    #f
                                    #{mod 10410}#)
                                  #{r 10407}#
                                  '(())
                                  #{mod 10410}#)
                                (syntax-violation
                                  'set!
                                  "not a variable transformer"
                                  (if (if (null? (car #{w 10408}#))
                                        (null? (cdr #{w 10408}#))
                                        #f)
                                    #{e 10406}#
                                    (if (if (vector? #{e 10406}#)
                                          (if (= (vector-length #{e 10406}#) 4)
                                            (eq? (vector-ref #{e 10406}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (let ((#{expression 11321}#
                                              (vector-ref #{e 10406}# 1))
                                            (#{wrap 11322}#
                                              (let ((#{w2 11332}#
                                                      (vector-ref
                                                        #{e 10406}#
                                                        2)))
                                                (let ((#{m1 11333}#
                                                        (car #{w 10408}#))
                                                      (#{s1 11334}#
                                                        (cdr #{w 10408}#)))
                                                  (if (null? #{m1 11333}#)
                                                    (if (null? #{s1 11334}#)
                                                      #{w2 11332}#
                                                      (cons (car #{w2 11332}#)
                                                            (let ((#{m2 11351}#
                                                                    (cdr #{w2 11332}#)))
                                                              (if (null? #{m2 11351}#)
                                                                #{s1 11334}#
                                                                (append
                                                                  #{s1 11334}#
                                                                  #{m2 11351}#)))))
                                                    (cons (let ((#{m2 11359}#
                                                                  (car #{w2 11332}#)))
                                                            (if (null? #{m2 11359}#)
                                                              #{m1 11333}#
                                                              (append
                                                                #{m1 11333}#
                                                                #{m2 11359}#)))
                                                          (let ((#{m2 11367}#
                                                                  (cdr #{w2 11332}#)))
                                                            (if (null? #{m2 11367}#)
                                                              #{s1 11334}#
                                                              (append
                                                                #{s1 11334}#
                                                                #{m2 11367}#))))))))
                                            (#{module 11323}#
                                              (vector-ref #{e 10406}# 3)))
                                        (vector
                                          'syntax-object
                                          #{expression 11321}#
                                          #{wrap 11322}#
                                          #{module 11323}#))
                                      (if (null? #{e 10406}#)
                                        #{e 10406}#
                                        (vector
                                          'syntax-object
                                          #{e 10406}#
                                          #{w 10408}#
                                          #{mod 10410}#))))
                                  (if (if (null? (car #{w 10408}#))
                                        (null? (cdr #{w 10408}#))
                                        #f)
                                    #{id 10444}#
                                    (if (if (vector? #{id 10444}#)
                                          (if (= (vector-length #{id 10444}#)
                                                 4)
                                            (eq? (vector-ref #{id 10444}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (let ((#{expression 11419}#
                                              (vector-ref #{id 10444}# 1))
                                            (#{wrap 11420}#
                                              (let ((#{w2 11430}#
                                                      (vector-ref
                                                        #{id 10444}#
                                                        2)))
                                                (let ((#{m1 11431}#
                                                        (car #{w 10408}#))
                                                      (#{s1 11432}#
                                                        (cdr #{w 10408}#)))
                                                  (if (null? #{m1 11431}#)
                                                    (if (null? #{s1 11432}#)
                                                      #{w2 11430}#
                                                      (cons (car #{w2 11430}#)
                                                            (let ((#{m2 11449}#
                                                                    (cdr #{w2 11430}#)))
                                                              (if (null? #{m2 11449}#)
                                                                #{s1 11432}#
                                                                (append
                                                                  #{s1 11432}#
                                                                  #{m2 11449}#)))))
                                                    (cons (let ((#{m2 11457}#
                                                                  (car #{w2 11430}#)))
                                                            (if (null? #{m2 11457}#)
                                                              #{m1 11431}#
                                                              (append
                                                                #{m1 11431}#
                                                                #{m2 11457}#)))
                                                          (let ((#{m2 11465}#
                                                                  (cdr #{w2 11430}#)))
                                                            (if (null? #{m2 11465}#)
                                                              #{s1 11432}#
                                                              (append
                                                                #{s1 11432}#
                                                                #{m2 11465}#))))))))
                                            (#{module 11421}#
                                              (vector-ref #{id 10444}# 3)))
                                        (vector
                                          'syntax-object
                                          #{expression 11419}#
                                          #{wrap 11420}#
                                          #{module 11421}#))
                                      (if (null? #{id 10444}#)
                                        #{id 10444}#
                                        (vector
                                          'syntax-object
                                          #{id 10444}#
                                          #{w 10408}#
                                          #{id-mod 10447}#)))))))
                            (if (eqv? #{atom-key 10449}# 'displaced-lexical)
                              (syntax-violation
                                'set!
                                "identifier out of context"
                                (if (if (null? (car #{w 10408}#))
                                      (null? (cdr #{w 10408}#))
                                      #f)
                                  #{id 10444}#
                                  (if (if (vector? #{id 10444}#)
                                        (if (= (vector-length #{id 10444}#) 4)
                                          (eq? (vector-ref #{id 10444}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (let ((#{expression 11521}#
                                            (vector-ref #{id 10444}# 1))
                                          (#{wrap 11522}#
                                            (let ((#{w2 11532}#
                                                    (vector-ref
                                                      #{id 10444}#
                                                      2)))
                                              (let ((#{m1 11533}#
                                                      (car #{w 10408}#))
                                                    (#{s1 11534}#
                                                      (cdr #{w 10408}#)))
                                                (if (null? #{m1 11533}#)
                                                  (if (null? #{s1 11534}#)
                                                    #{w2 11532}#
                                                    (cons (car #{w2 11532}#)
                                                          (let ((#{m2 11551}#
                                                                  (cdr #{w2 11532}#)))
                                                            (if (null? #{m2 11551}#)
                                                              #{s1 11534}#
                                                              (append
                                                                #{s1 11534}#
                                                                #{m2 11551}#)))))
                                                  (cons (let ((#{m2 11559}#
                                                                (car #{w2 11532}#)))
                                                          (if (null? #{m2 11559}#)
                                                            #{m1 11533}#
                                                            (append
                                                              #{m1 11533}#
                                                              #{m2 11559}#)))
                                                        (let ((#{m2 11567}#
                                                                (cdr #{w2 11532}#)))
                                                          (if (null? #{m2 11567}#)
                                                            #{s1 11534}#
                                                            (append
                                                              #{s1 11534}#
                                                              #{m2 11567}#))))))))
                                          (#{module 11523}#
                                            (vector-ref #{id 10444}# 3)))
                                      (vector
                                        'syntax-object
                                        #{expression 11521}#
                                        #{wrap 11522}#
                                        #{module 11523}#))
                                    (if (null? #{id 10444}#)
                                      #{id 10444}#
                                      (vector
                                        'syntax-object
                                        #{id 10444}#
                                        #{w 10408}#
                                        #{mod 10410}#)))))
                              (syntax-violation
                                'set!
                                "bad set!"
                                (let ((#{x 11599}#
                                        (begin
                                          (if (if (pair? #{e 10406}#)
                                                #{s 10409}#
                                                #f)
                                            (set-source-properties!
                                              #{e 10406}#
                                              #{s 10409}#))
                                          #{e 10406}#)))
                                  (if (if (null? (car #{w 10408}#))
                                        (null? (cdr #{w 10408}#))
                                        #f)
                                    #{x 11599}#
                                    (if (if (vector? #{x 11599}#)
                                          (if (= (vector-length #{x 11599}#) 4)
                                            (eq? (vector-ref #{x 11599}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (let ((#{expression 11631}#
                                              (vector-ref #{x 11599}# 1))
                                            (#{wrap 11632}#
                                              (let ((#{w2 11640}#
                                                      (vector-ref
                                                        #{x 11599}#
                                                        2)))
                                                (let ((#{m1 11641}#
                                                        (car #{w 10408}#))
                                                      (#{s1 11642}#
                                                        (cdr #{w 10408}#)))
                                                  (if (null? #{m1 11641}#)
                                                    (if (null? #{s1 11642}#)
                                                      #{w2 11640}#
                                                      (cons (car #{w2 11640}#)
                                                            (let ((#{m2 11657}#
                                                                    (cdr #{w2 11640}#)))
                                                              (if (null? #{m2 11657}#)
                                                                #{s1 11642}#
                                                                (append
                                                                  #{s1 11642}#
                                                                  #{m2 11657}#)))))
                                                    (cons (let ((#{m2 11665}#
                                                                  (car #{w2 11640}#)))
                                                            (if (null? #{m2 11665}#)
                                                              #{m1 11641}#
                                                              (append
                                                                #{m1 11641}#
                                                                #{m2 11665}#)))
                                                          (let ((#{m2 11673}#
                                                                  (cdr #{w2 11640}#)))
                                                            (if (null? #{m2 11673}#)
                                                              #{s1 11642}#
                                                              (append
                                                                #{s1 11642}#
                                                                #{m2 11673}#))))))))
                                            (#{module 11633}#
                                              (vector-ref #{x 11599}# 3)))
                                        (vector
                                          'syntax-object
                                          #{expression 11631}#
                                          #{wrap 11632}#
                                          #{module 11633}#))
                                      (if (null? #{x 11599}#)
                                        #{x 11599}#
                                        (vector
                                          'syntax-object
                                          #{x 11599}#
                                          #{w 10408}#
                                          #{mod 10410}#))))))))))))))
              #{tmp 10412}#)
            (let ((#{tmp 11688}#
                    ($sc-dispatch
                      #{e 10406}#
                      '(_ (any . each-any) any))))
              (if #{tmp 11688}#
                (@apply
                  (lambda (#{head 11692}# #{tail 11693}# #{val 11694}#)
                    (call-with-values
                      (lambda ()
                        (#{syntax-type 4372}#
                          #{head 11692}#
                          #{r 10407}#
                          '(())
                          #f
                          #f
                          #{mod 10410}#
                          #t))
                      (lambda (#{type 11697}#
                               #{value 11698}#
                               #{ee 11699}#
                               #{ww 11700}#
                               #{ss 11701}#
                               #{modmod 11702}#)
                        (if (eqv? #{type 11697}# 'module-ref)
                          (let ((#{val 11706}#
                                  (#{chi 4373}#
                                    #{val 11694}#
                                    #{r 10407}#
                                    #{w 10408}#
                                    #{mod 10410}#)))
                            (call-with-values
                              (lambda ()
                                (#{value 11698}#
                                  (cons #{head 11692}# #{tail 11693}#)
                                  #{r 10407}#
                                  #{w 10408}#))
                              (lambda (#{e 11707}#
                                       #{r 11708}#
                                       #{w 11709}#
                                       #{s* 11710}#
                                       #{mod 11711}#)
                                (let ((#{tmp 11713}# (list #{e 11707}#)))
                                  (if (@apply
                                        (lambda (#{e 11715}#)
                                          (if (symbol? #{e 11715}#)
                                            #t
                                            (if (if (vector? #{e 11715}#)
                                                  (if (= (vector-length
                                                           #{e 11715}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{e 11715}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (symbol?
                                                (vector-ref #{e 11715}# 1))
                                              #f)))
                                        #{tmp 11713}#)
                                    (@apply
                                      (lambda (#{e 11745}#)
                                        (#{build-global-assignment 4314}#
                                          #{s 10409}#
                                          (syntax->datum #{e 11745}#)
                                          #{val 11706}#
                                          #{mod 11711}#))
                                      #{tmp 11713}#)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      #{e 11707}#))))))
                          (#{build-call 4307}#
                            #{s 10409}#
                            (#{chi 4373}#
                              (list '#(syntax-object
                                       setter
                                       ((top)
                                        #(ribcage () () ())
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(type value ee ww ss modmod)
                                          #((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                          #("i3585"
                                            "i3586"
                                            "i3587"
                                            "i3588"
                                            "i3589"
                                            "i3590"))
                                        #(ribcage
                                          #(head tail val)
                                          #((top) (top) (top))
                                          #("i3571" "i3572" "i3573"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(e r w s mod)
                                          #((top) (top) (top) (top) (top))
                                          #("i3535"
                                            "i3536"
                                            "i3537"
                                            "i3538"
                                            "i3539"))
                                        #(ribcage
                                          (lambda-var-list
                                            gen-var
                                            strip
                                            chi-lambda-case
                                            lambda*-formals
                                            chi-simple-lambda
                                            lambda-formals
                                            ellipsis?
                                            chi-void
                                            eval-local-transformer
                                            chi-local-syntax
                                            chi-body
                                            chi-macro
                                            chi-call
                                            chi-expr
                                            chi
                                            syntax-type
                                            chi-when-list
                                            chi-install-global
                                            chi-top-sequence
                                            chi-sequence
                                            source-wrap
                                            wrap
                                            bound-id-member?
                                            distinct-bound-ids?
                                            valid-bound-ids?
                                            bound-id=?
                                            free-id=?
                                            id-var-name
                                            same-marks?
                                            join-marks
                                            join-wraps
                                            smart-append
                                            make-binding-wrap
                                            extend-ribcage!
                                            make-empty-ribcage
                                            new-mark
                                            anti-mark
                                            the-anti-mark
                                            top-marked?
                                            top-wrap
                                            empty-wrap
                                            set-ribcage-labels!
                                            set-ribcage-marks!
                                            set-ribcage-symnames!
                                            ribcage-labels
                                            ribcage-marks
                                            ribcage-symnames
                                            ribcage?
                                            make-ribcage
                                            gen-labels
                                            gen-label
                                            make-rename
                                            rename-marks
                                            rename-new
                                            rename-old
                                            subst-rename?
                                            wrap-subst
                                            wrap-marks
                                            make-wrap
                                            id-sym-name&marks
                                            id-sym-name
                                            id?
                                            nonsymbol-id?
                                            global-extend
                                            lookup
                                            macros-only-env
                                            extend-var-env
                                            extend-env
                                            null-env
                                            binding-value
                                            binding-type
                                            make-binding
                                            arg-check
                                            source-annotation
                                            no-source
                                            set-syntax-object-module!
                                            set-syntax-object-wrap!
                                            set-syntax-object-expression!
                                            syntax-object-module
                                            syntax-object-wrap
                                            syntax-object-expression
                                            syntax-object?
                                            make-syntax-object
                                            build-lexical-var
                                            build-letrec
                                            build-named-let
                                            build-let
                                            build-sequence
                                            build-data
                                            build-primref
                                            build-primcall
                                            build-lambda-case
                                            build-case-lambda
                                            build-simple-lambda
                                            build-global-definition
                                            build-global-assignment
                                            build-global-reference
                                            analyze-variable
                                            build-lexical-assignment
                                            build-lexical-reference
                                            build-dynlet
                                            build-conditional
                                            build-call
                                            build-void
                                            maybe-name-value!
                                            decorate-source
                                            get-global-definition-hook
                                            put-global-definition-hook
                                            gensym-hook
                                            local-eval-hook
                                            top-level-eval-hook
                                            fx<
                                            fx=
                                            fx-
                                            fx+
                                            set-lambda-meta!
                                            lambda-meta
                                            lambda?
                                            make-dynlet
                                            make-letrec
                                            make-let
                                            make-lambda-case
                                            make-lambda
                                            make-seq
                                            make-primcall
                                            make-call
                                            make-conditional
                                            make-toplevel-define
                                            make-toplevel-set
                                            make-toplevel-ref
                                            make-module-set
                                            make-module-ref
                                            make-lexical-set
                                            make-lexical-ref
                                            make-primitive-ref
                                            make-const
                                            make-void)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("i471"
                                           "i469"
                                           "i467"
                                           "i465"
                                           "i463"
                                           "i461"
                                           "i459"
                                           "i457"
                                           "i455"
                                           "i453"
                                           "i451"
                                           "i449"
                                           "i447"
                                           "i445"
                                           "i443"
                                           "i441"
                                           "i439"
                                           "i437"
                                           "i435"
                                           "i433"
                                           "i431"
                                           "i429"
                                           "i427"
                                           "i425"
                                           "i423"
                                           "i421"
                                           "i419"
                                           "i417"
                                           "i415"
                                           "i413"
                                           "i411"
                                           "i409"
                                           "i407"
                                           "i405"
                                           "i403"
                                           "i402"
                                           "i400"
                                           "i397"
                                           "i396"
                                           "i395"
                                           "i393"
                                           "i392"
                                           "i390"
                                           "i388"
                                           "i386"
                                           "i384"
                                           "i382"
                                           "i380"
                                           "i378"
                                           "i376"
                                           "i373"
                                           "i371"
                                           "i370"
                                           "i368"
                                           "i366"
                                           "i364"
                                           "i362"
                                           "i361"
                                           "i360"
                                           "i359"
                                           "i357"
                                           "i356"
                                           "i353"
                                           "i351"
                                           "i349"
                                           "i347"
                                           "i345"
                                           "i343"
                                           "i341"
                                           "i340"
                                           "i339"
                                           "i337"
                                           "i335"
                                           "i334"
                                           "i331"
                                           "i330"
                                           "i328"
                                           "i326"
                                           "i324"
                                           "i322"
                                           "i320"
                                           "i318"
                                           "i316"
                                           "i314"
                                           "i312"
                                           "i309"
                                           "i307"
                                           "i305"
                                           "i303"
                                           "i301"
                                           "i299"
                                           "i297"
                                           "i295"
                                           "i293"
                                           "i291"
                                           "i289"
                                           "i287"
                                           "i285"
                                           "i283"
                                           "i281"
                                           "i279"
                                           "i277"
                                           "i275"
                                           "i273"
                                           "i271"
                                           "i269"
                                           "i267"
                                           "i265"
                                           "i263"
                                           "i262"
                                           "i259"
                                           "i257"
                                           "i256"
                                           "i255"
                                           "i254"
                                           "i253"
                                           "i251"
                                           "i249"
                                           "i247"
                                           "i244"
                                           "i242"
                                           "i240"
                                           "i238"
                                           "i236"
                                           "i234"
                                           "i232"
                                           "i230"
                                           "i228"
                                           "i226"
                                           "i224"
                                           "i222"
                                           "i220"
                                           "i218"
                                           "i216"
                                           "i214"
                                           "i212"
                                           "i210"
                                           "i208"))
                                        #(ribcage
                                          (define-structure
                                            define-expansion-accessors
                                            define-expansion-constructors)
                                          ((top) (top) (top))
                                          ("i46" "i45" "i44")))
                                       (hygiene guile))
                                    #{head 11692}#)
                              #{r 10407}#
                              #{w 10408}#
                              #{mod 10410}#)
                            (map (lambda (#{e 12074}#)
                                   (#{chi 4373}#
                                     #{e 12074}#
                                     #{r 10407}#
                                     #{w 10408}#
                                     #{mod 10410}#))
                                 (append
                                   #{tail 11693}#
                                   (list #{val 11694}#))))))))
                  #{tmp 11688}#)
                (syntax-violation
                  'set!
                  "bad set!"
                  (let ((#{x 12166}#
                          (begin
                            (if (if (pair? #{e 10406}#) #{s 10409}# #f)
                              (set-source-properties! #{e 10406}# #{s 10409}#))
                            #{e 10406}#)))
                    (if (if (null? (car #{w 10408}#))
                          (null? (cdr #{w 10408}#))
                          #f)
                      #{x 12166}#
                      (if (if (vector? #{x 12166}#)
                            (if (= (vector-length #{x 12166}#) 4)
                              (eq? (vector-ref #{x 12166}# 0) 'syntax-object)
                              #f)
                            #f)
                        (let ((#{expression 12198}# (vector-ref #{x 12166}# 1))
                              (#{wrap 12199}#
                                (let ((#{w2 12207}#
                                        (vector-ref #{x 12166}# 2)))
                                  (let ((#{m1 12208}# (car #{w 10408}#))
                                        (#{s1 12209}# (cdr #{w 10408}#)))
                                    (if (null? #{m1 12208}#)
                                      (if (null? #{s1 12209}#)
                                        #{w2 12207}#
                                        (cons (car #{w2 12207}#)
                                              (let ((#{m2 12224}#
                                                      (cdr #{w2 12207}#)))
                                                (if (null? #{m2 12224}#)
                                                  #{s1 12209}#
                                                  (append
                                                    #{s1 12209}#
                                                    #{m2 12224}#)))))
                                      (cons (let ((#{m2 12232}#
                                                    (car #{w2 12207}#)))
                                              (if (null? #{m2 12232}#)
                                                #{m1 12208}#
                                                (append
                                                  #{m1 12208}#
                                                  #{m2 12232}#)))
                                            (let ((#{m2 12240}#
                                                    (cdr #{w2 12207}#)))
                                              (if (null? #{m2 12240}#)
                                                #{s1 12209}#
                                                (append
                                                  #{s1 12209}#
                                                  #{m2 12240}#))))))))
                              (#{module 12200}# (vector-ref #{x 12166}# 3)))
                          (vector
                            'syntax-object
                            #{expression 12198}#
                            #{wrap 12199}#
                            #{module 12200}#))
                        (if (null? #{x 12166}#)
                          #{x 12166}#
                          (vector
                            'syntax-object
                            #{x 12166}#
                            #{w 10408}#
                            #{mod 10410}#))))))))))))
    (module-define!
      (current-module)
      '@
      (make-syntax-transformer
        '@
        'module-ref
        (lambda (#{e 12271}# #{r 12272}# #{w 12273}#)
          (let ((#{tmp 12275}#
                  ($sc-dispatch #{e 12271}# '(_ each-any any))))
            (if (if #{tmp 12275}#
                  (@apply
                    (lambda (#{mod 12278}# #{id 12279}#)
                      (if (and-map #{id? 4341}# #{mod 12278}#)
                        (if (symbol? #{id 12279}#)
                          #t
                          (if (if (vector? #{id 12279}#)
                                (if (= (vector-length #{id 12279}#) 4)
                                  (eq? (vector-ref #{id 12279}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{id 12279}# 1))
                            #f))
                        #f))
                    #{tmp 12275}#)
                  #f)
              (@apply
                (lambda (#{mod 12319}# #{id 12320}#)
                  (values
                    (syntax->datum #{id 12320}#)
                    #{r 12272}#
                    #{w 12273}#
                    #f
                    (syntax->datum
                      (cons '#(syntax-object
                               public
                               ((top)
                                #(ribcage
                                  #(mod id)
                                  #((top) (top))
                                  #("i3632" "i3633"))
                                #(ribcage () () ())
                                #(ribcage
                                  #(e r w)
                                  #((top) (top) (top))
                                  #("i3620" "i3621" "i3622"))
                                #(ribcage
                                  (lambda-var-list
                                    gen-var
                                    strip
                                    chi-lambda-case
                                    lambda*-formals
                                    chi-simple-lambda
                                    lambda-formals
                                    ellipsis?
                                    chi-void
                                    eval-local-transformer
                                    chi-local-syntax
                                    chi-body
                                    chi-macro
                                    chi-call
                                    chi-expr
                                    chi
                                    syntax-type
                                    chi-when-list
                                    chi-install-global
                                    chi-top-sequence
                                    chi-sequence
                                    source-wrap
                                    wrap
                                    bound-id-member?
                                    distinct-bound-ids?
                                    valid-bound-ids?
                                    bound-id=?
                                    free-id=?
                                    id-var-name
                                    same-marks?
                                    join-marks
                                    join-wraps
                                    smart-append
                                    make-binding-wrap
                                    extend-ribcage!
                                    make-empty-ribcage
                                    new-mark
                                    anti-mark
                                    the-anti-mark
                                    top-marked?
                                    top-wrap
                                    empty-wrap
                                    set-ribcage-labels!
                                    set-ribcage-marks!
                                    set-ribcage-symnames!
                                    ribcage-labels
                                    ribcage-marks
                                    ribcage-symnames
                                    ribcage?
                                    make-ribcage
                                    gen-labels
                                    gen-label
                                    make-rename
                                    rename-marks
                                    rename-new
                                    rename-old
                                    subst-rename?
                                    wrap-subst
                                    wrap-marks
                                    make-wrap
                                    id-sym-name&marks
                                    id-sym-name
                                    id?
                                    nonsymbol-id?
                                    global-extend
                                    lookup
                                    macros-only-env
                                    extend-var-env
                                    extend-env
                                    null-env
                                    binding-value
                                    binding-type
                                    make-binding
                                    arg-check
                                    source-annotation
                                    no-source
                                    set-syntax-object-module!
                                    set-syntax-object-wrap!
                                    set-syntax-object-expression!
                                    syntax-object-module
                                    syntax-object-wrap
                                    syntax-object-expression
                                    syntax-object?
                                    make-syntax-object
                                    build-lexical-var
                                    build-letrec
                                    build-named-let
                                    build-let
                                    build-sequence
                                    build-data
                                    build-primref
                                    build-primcall
                                    build-lambda-case
                                    build-case-lambda
                                    build-simple-lambda
                                    build-global-definition
                                    build-global-assignment
                                    build-global-reference
                                    analyze-variable
                                    build-lexical-assignment
                                    build-lexical-reference
                                    build-dynlet
                                    build-conditional
                                    build-call
                                    build-void
                                    maybe-name-value!
                                    decorate-source
                                    get-global-definition-hook
                                    put-global-definition-hook
                                    gensym-hook
                                    local-eval-hook
                                    top-level-eval-hook
                                    fx<
                                    fx=
                                    fx-
                                    fx+
                                    set-lambda-meta!
                                    lambda-meta
                                    lambda?
                                    make-dynlet
                                    make-letrec
                                    make-let
                                    make-lambda-case
                                    make-lambda
                                    make-seq
                                    make-primcall
                                    make-call
                                    make-conditional
                                    make-toplevel-define
                                    make-toplevel-set
                                    make-toplevel-ref
                                    make-module-set
                                    make-module-ref
                                    make-lexical-set
                                    make-lexical-ref
                                    make-primitive-ref
                                    make-const
                                    make-void)
                                  ((top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top))
                                  ("i471"
                                   "i469"
                                   "i467"
                                   "i465"
                                   "i463"
                                   "i461"
                                   "i459"
                                   "i457"
                                   "i455"
                                   "i453"
                                   "i451"
                                   "i449"
                                   "i447"
                                   "i445"
                                   "i443"
                                   "i441"
                                   "i439"
                                   "i437"
                                   "i435"
                                   "i433"
                                   "i431"
                                   "i429"
                                   "i427"
                                   "i425"
                                   "i423"
                                   "i421"
                                   "i419"
                                   "i417"
                                   "i415"
                                   "i413"
                                   "i411"
                                   "i409"
                                   "i407"
                                   "i405"
                                   "i403"
                                   "i402"
                                   "i400"
                                   "i397"
                                   "i396"
                                   "i395"
                                   "i393"
                                   "i392"
                                   "i390"
                                   "i388"
                                   "i386"
                                   "i384"
                                   "i382"
                                   "i380"
                                   "i378"
                                   "i376"
                                   "i373"
                                   "i371"
                                   "i370"
                                   "i368"
                                   "i366"
                                   "i364"
                                   "i362"
                                   "i361"
                                   "i360"
                                   "i359"
                                   "i357"
                                   "i356"
                                   "i353"
                                   "i351"
                                   "i349"
                                   "i347"
                                   "i345"
                                   "i343"
                                   "i341"
                                   "i340"
                                   "i339"
                                   "i337"
                                   "i335"
                                   "i334"
                                   "i331"
                                   "i330"
                                   "i328"
                                   "i326"
                                   "i324"
                                   "i322"
                                   "i320"
                                   "i318"
                                   "i316"
                                   "i314"
                                   "i312"
                                   "i309"
                                   "i307"
                                   "i305"
                                   "i303"
                                   "i301"
                                   "i299"
                                   "i297"
                                   "i295"
                                   "i293"
                                   "i291"
                                   "i289"
                                   "i287"
                                   "i285"
                                   "i283"
                                   "i281"
                                   "i279"
                                   "i277"
                                   "i275"
                                   "i273"
                                   "i271"
                                   "i269"
                                   "i267"
                                   "i265"
                                   "i263"
                                   "i262"
                                   "i259"
                                   "i257"
                                   "i256"
                                   "i255"
                                   "i254"
                                   "i253"
                                   "i251"
                                   "i249"
                                   "i247"
                                   "i244"
                                   "i242"
                                   "i240"
                                   "i238"
                                   "i236"
                                   "i234"
                                   "i232"
                                   "i230"
                                   "i228"
                                   "i226"
                                   "i224"
                                   "i222"
                                   "i220"
                                   "i218"
                                   "i216"
                                   "i214"
                                   "i212"
                                   "i210"
                                   "i208"))
                                #(ribcage
                                  (define-structure
                                    define-expansion-accessors
                                    define-expansion-constructors)
                                  ((top) (top) (top))
                                  ("i46" "i45" "i44")))
                               (hygiene guile))
                            #{mod 12319}#))))
                #{tmp 12275}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{e 12271}#))))))
    (#{global-extend 4339}#
      'module-ref
      '@@
      (lambda (#{e 12424}# #{r 12425}# #{w 12426}#)
        (letrec*
          ((#{remodulate 12427}#
             (lambda (#{x 12663}# #{mod 12664}#)
               (if (pair? #{x 12663}#)
                 (cons (#{remodulate 12427}#
                         (car #{x 12663}#)
                         #{mod 12664}#)
                       (#{remodulate 12427}#
                         (cdr #{x 12663}#)
                         #{mod 12664}#))
                 (if (if (vector? #{x 12663}#)
                       (if (= (vector-length #{x 12663}#) 4)
                         (eq? (vector-ref #{x 12663}# 0) 'syntax-object)
                         #f)
                       #f)
                   (let ((#{expression 12678}#
                           (#{remodulate 12427}#
                             (vector-ref #{x 12663}# 1)
                             #{mod 12664}#))
                         (#{wrap 12679}# (vector-ref #{x 12663}# 2)))
                     (vector
                       'syntax-object
                       #{expression 12678}#
                       #{wrap 12679}#
                       #{mod 12664}#))
                   (if (vector? #{x 12663}#)
                     (let ((#{n 12687}# (vector-length #{x 12663}#)))
                       (let ((#{v 12688}# (make-vector #{n 12687}#)))
                         (letrec*
                           ((#{loop 12689}#
                              (lambda (#{i 12744}#)
                                (if (= #{i 12744}# #{n 12687}#)
                                  #{v 12688}#
                                  (begin
                                    (vector-set!
                                      #{v 12688}#
                                      #{i 12744}#
                                      (#{remodulate 12427}#
                                        (vector-ref #{x 12663}# #{i 12744}#)
                                        #{mod 12664}#))
                                    (#{loop 12689}# (#{1+}# #{i 12744}#)))))))
                           (#{loop 12689}# 0))))
                     #{x 12663}#))))))
          (let ((#{tmp 12429}#
                  ($sc-dispatch #{e 12424}# '(_ each-any any))))
            (if (if #{tmp 12429}#
                  (@apply
                    (lambda (#{mod 12433}# #{exp 12434}#)
                      (and-map #{id? 4341}# #{mod 12433}#))
                    #{tmp 12429}#)
                  #f)
              (@apply
                (lambda (#{mod 12450}# #{exp 12451}#)
                  (let ((#{mod 12452}#
                          (syntax->datum
                            (cons '#(syntax-object
                                     private
                                     ((top)
                                      #(ribcage
                                        #(mod exp)
                                        #((top) (top))
                                        #("i3676" "i3677"))
                                      #(ribcage (remodulate) ((top)) ("i3643"))
                                      #(ribcage
                                        #(e r w)
                                        #((top) (top) (top))
                                        #("i3640" "i3641" "i3642"))
                                      #(ribcage
                                        (lambda-var-list
                                          gen-var
                                          strip
                                          chi-lambda-case
                                          lambda*-formals
                                          chi-simple-lambda
                                          lambda-formals
                                          ellipsis?
                                          chi-void
                                          eval-local-transformer
                                          chi-local-syntax
                                          chi-body
                                          chi-macro
                                          chi-call
                                          chi-expr
                                          chi
                                          syntax-type
                                          chi-when-list
                                          chi-install-global
                                          chi-top-sequence
                                          chi-sequence
                                          source-wrap
                                          wrap
                                          bound-id-member?
                                          distinct-bound-ids?
                                          valid-bound-ids?
                                          bound-id=?
                                          free-id=?
                                          id-var-name
                                          same-marks?
                                          join-marks
                                          join-wraps
                                          smart-append
                                          make-binding-wrap
                                          extend-ribcage!
                                          make-empty-ribcage
                                          new-mark
                                          anti-mark
                                          the-anti-mark
                                          top-marked?
                                          top-wrap
                                          empty-wrap
                                          set-ribcage-labels!
                                          set-ribcage-marks!
                                          set-ribcage-symnames!
                                          ribcage-labels
                                          ribcage-marks
                                          ribcage-symnames
                                          ribcage?
                                          make-ribcage
                                          gen-labels
                                          gen-label
                                          make-rename
                                          rename-marks
                                          rename-new
                                          rename-old
                                          subst-rename?
                                          wrap-subst
                                          wrap-marks
                                          make-wrap
                                          id-sym-name&marks
                                          id-sym-name
                                          id?
                                          nonsymbol-id?
                                          global-extend
                                          lookup
                                          macros-only-env
                                          extend-var-env
                                          extend-env
                                          null-env
                                          binding-value
                                          binding-type
                                          make-binding
                                          arg-check
                                          source-annotation
                                          no-source
                                          set-syntax-object-module!
                                          set-syntax-object-wrap!
                                          set-syntax-object-expression!
                                          syntax-object-module
                                          syntax-object-wrap
                                          syntax-object-expression
                                          syntax-object?
                                          make-syntax-object
                                          build-lexical-var
                                          build-letrec
                                          build-named-let
                                          build-let
                                          build-sequence
                                          build-data
                                          build-primref
                                          build-primcall
                                          build-lambda-case
                                          build-case-lambda
                                          build-simple-lambda
                                          build-global-definition
                                          build-global-assignment
                                          build-global-reference
                                          analyze-variable
                                          build-lexical-assignment
                                          build-lexical-reference
                                          build-dynlet
                                          build-conditional
                                          build-call
                                          build-void
                                          maybe-name-value!
                                          decorate-source
                                          get-global-definition-hook
                                          put-global-definition-hook
                                          gensym-hook
                                          local-eval-hook
                                          top-level-eval-hook
                                          fx<
                                          fx=
                                          fx-
                                          fx+
                                          set-lambda-meta!
                                          lambda-meta
                                          lambda?
                                          make-dynlet
                                          make-letrec
                                          make-let
                                          make-lambda-case
                                          make-lambda
                                          make-seq
                                          make-primcall
                                          make-call
                                          make-conditional
                                          make-toplevel-define
                                          make-toplevel-set
                                          make-toplevel-ref
                                          make-module-set
                                          make-module-ref
                                          make-lexical-set
                                          make-lexical-ref
                                          make-primitive-ref
                                          make-const
                                          make-void)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i471"
                                         "i469"
                                         "i467"
                                         "i465"
                                         "i463"
                                         "i461"
                                         "i459"
                                         "i457"
                                         "i455"
                                         "i453"
                                         "i451"
                                         "i449"
                                         "i447"
                                         "i445"
                                         "i443"
                                         "i441"
                                         "i439"
                                         "i437"
                                         "i435"
                                         "i433"
                                         "i431"
                                         "i429"
                                         "i427"
                                         "i425"
                                         "i423"
                                         "i421"
                                         "i419"
                                         "i417"
                                         "i415"
                                         "i413"
                                         "i411"
                                         "i409"
                                         "i407"
                                         "i405"
                                         "i403"
                                         "i402"
                                         "i400"
                                         "i397"
                                         "i396"
                                         "i395"
                                         "i393"
                                         "i392"
                                         "i390"
                                         "i388"
                                         "i386"
                                         "i384"
                                         "i382"
                                         "i380"
                                         "i378"
                                         "i376"
                                         "i373"
                                         "i371"
                                         "i370"
                                         "i368"
                                         "i366"
                                         "i364"
                                         "i362"
                                         "i361"
                                         "i360"
                                         "i359"
                                         "i357"
                                         "i356"
                                         "i353"
                                         "i351"
                                         "i349"
                                         "i347"
                                         "i345"
                                         "i343"
                                         "i341"
                                         "i340"
                                         "i339"
                                         "i337"
                                         "i335"
                                         "i334"
                                         "i331"
                                         "i330"
                                         "i328"
                                         "i326"
                                         "i324"
                                         "i322"
                                         "i320"
                                         "i318"
                                         "i316"
                                         "i314"
                                         "i312"
                                         "i309"
                                         "i307"
                                         "i305"
                                         "i303"
                                         "i301"
                                         "i299"
                                         "i297"
                                         "i295"
                                         "i293"
                                         "i291"
                                         "i289"
                                         "i287"
                                         "i285"
                                         "i283"
                                         "i281"
                                         "i279"
                                         "i277"
                                         "i275"
                                         "i273"
                                         "i271"
                                         "i269"
                                         "i267"
                                         "i265"
                                         "i263"
                                         "i262"
                                         "i259"
                                         "i257"
                                         "i256"
                                         "i255"
                                         "i254"
                                         "i253"
                                         "i251"
                                         "i249"
                                         "i247"
                                         "i244"
                                         "i242"
                                         "i240"
                                         "i238"
                                         "i236"
                                         "i234"
                                         "i232"
                                         "i230"
                                         "i228"
                                         "i226"
                                         "i224"
                                         "i222"
                                         "i220"
                                         "i218"
                                         "i216"
                                         "i214"
                                         "i212"
                                         "i210"
                                         "i208"))
                                      #(ribcage
                                        (define-structure
                                          define-expansion-accessors
                                          define-expansion-constructors)
                                        ((top) (top) (top))
                                        ("i46" "i45" "i44")))
                                     (hygiene guile))
                                  #{mod 12450}#))))
                    (values
                      (#{remodulate 12427}#
                        #{exp 12451}#
                        #{mod 12452}#)
                      #{r 12425}#
                      #{w 12426}#
                      (#{source-annotation 4334}# #{exp 12451}#)
                      #{mod 12452}#)))
                #{tmp 12429}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{e 12424}#))))))
    (#{global-extend 4339}#
      'core
      'if
      (lambda (#{e 12857}#
               #{r 12858}#
               #{w 12859}#
               #{s 12860}#
               #{mod 12861}#)
        (let ((#{tmp 12863}#
                ($sc-dispatch #{e 12857}# '(_ any any))))
          (if #{tmp 12863}#
            (@apply
              (lambda (#{test 12867}# #{then 12868}#)
                (#{build-conditional 4308}#
                  #{s 12860}#
                  (#{chi 4373}#
                    #{test 12867}#
                    #{r 12858}#
                    #{w 12859}#
                    #{mod 12861}#)
                  (#{chi 4373}#
                    #{then 12868}#
                    #{r 12858}#
                    #{w 12859}#
                    #{mod 12861}#)
                  (make-struct/no-tail
                    (vector-ref %expanded-vtables 0)
                    #f)))
              #{tmp 12863}#)
            (let ((#{tmp 13129}#
                    ($sc-dispatch #{e 12857}# '(_ any any any))))
              (if #{tmp 13129}#
                (@apply
                  (lambda (#{test 13133}# #{then 13134}# #{else 13135}#)
                    (#{build-conditional 4308}#
                      #{s 12860}#
                      (#{chi 4373}#
                        #{test 13133}#
                        #{r 12858}#
                        #{w 12859}#
                        #{mod 12861}#)
                      (#{chi 4373}#
                        #{then 13134}#
                        #{r 12858}#
                        #{w 12859}#
                        #{mod 12861}#)
                      (#{chi 4373}#
                        #{else 13135}#
                        #{r 12858}#
                        #{w 12859}#
                        #{mod 12861}#)))
                  #{tmp 13129}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{e 12857}#)))))))
    (#{global-extend 4339}#
      'core
      'with-fluids
      (lambda (#{e 13594}#
               #{r 13595}#
               #{w 13596}#
               #{s 13597}#
               #{mod 13598}#)
        (let ((#{tmp 13600}#
                ($sc-dispatch
                  #{e 13594}#
                  '(_ #(each (any any)) any . each-any))))
          (if #{tmp 13600}#
            (@apply
              (lambda (#{fluid 13604}#
                       #{val 13605}#
                       #{b 13606}#
                       #{b* 13607}#)
                (#{build-dynlet 4309}#
                  #{s 13597}#
                  (map (lambda (#{x 13700}#)
                         (#{chi 4373}#
                           #{x 13700}#
                           #{r 13595}#
                           #{w 13596}#
                           #{mod 13598}#))
                       #{fluid 13604}#)
                  (map (lambda (#{x 13782}#)
                         (#{chi 4373}#
                           #{x 13782}#
                           #{r 13595}#
                           #{w 13596}#
                           #{mod 13598}#))
                       #{val 13605}#)
                  (#{chi-body 4377}#
                    (cons #{b 13606}# #{b* 13607}#)
                    (let ((#{x 13875}#
                            (begin
                              (if (if (pair? #{e 13594}#) #{s 13597}# #f)
                                (set-source-properties!
                                  #{e 13594}#
                                  #{s 13597}#))
                              #{e 13594}#)))
                      (if (if (null? (car #{w 13596}#))
                            (null? (cdr #{w 13596}#))
                            #f)
                        #{x 13875}#
                        (if (if (vector? #{x 13875}#)
                              (if (= (vector-length #{x 13875}#) 4)
                                (eq? (vector-ref #{x 13875}# 0) 'syntax-object)
                                #f)
                              #f)
                          (let ((#{expression 13907}#
                                  (vector-ref #{x 13875}# 1))
                                (#{wrap 13908}#
                                  (let ((#{w2 13916}#
                                          (vector-ref #{x 13875}# 2)))
                                    (let ((#{m1 13917}# (car #{w 13596}#))
                                          (#{s1 13918}# (cdr #{w 13596}#)))
                                      (if (null? #{m1 13917}#)
                                        (if (null? #{s1 13918}#)
                                          #{w2 13916}#
                                          (cons (car #{w2 13916}#)
                                                (let ((#{m2 13933}#
                                                        (cdr #{w2 13916}#)))
                                                  (if (null? #{m2 13933}#)
                                                    #{s1 13918}#
                                                    (append
                                                      #{s1 13918}#
                                                      #{m2 13933}#)))))
                                        (cons (let ((#{m2 13941}#
                                                      (car #{w2 13916}#)))
                                                (if (null? #{m2 13941}#)
                                                  #{m1 13917}#
                                                  (append
                                                    #{m1 13917}#
                                                    #{m2 13941}#)))
                                              (let ((#{m2 13949}#
                                                      (cdr #{w2 13916}#)))
                                                (if (null? #{m2 13949}#)
                                                  #{s1 13918}#
                                                  (append
                                                    #{s1 13918}#
                                                    #{m2 13949}#))))))))
                                (#{module 13909}# (vector-ref #{x 13875}# 3)))
                            (vector
                              'syntax-object
                              #{expression 13907}#
                              #{wrap 13908}#
                              #{module 13909}#))
                          (if (null? #{x 13875}#)
                            #{x 13875}#
                            (vector
                              'syntax-object
                              #{x 13875}#
                              #{w 13596}#
                              #{mod 13598}#)))))
                    #{r 13595}#
                    #{w 13596}#
                    #{mod 13598}#)))
              #{tmp 13600}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{e 13594}#)))))
    (module-define!
      (current-module)
      'begin
      (make-syntax-transformer 'begin 'begin '()))
    (module-define!
      (current-module)
      'define
      (make-syntax-transformer 'define 'define '()))
    (module-define!
      (current-module)
      'define-syntax
      (make-syntax-transformer
        'define-syntax
        'define-syntax
        '()))
    (module-define!
      (current-module)
      'eval-when
      (make-syntax-transformer
        'eval-when
        'eval-when
        '()))
    (#{global-extend 4339}#
      'core
      'syntax-case
      (letrec*
        ((#{convert-pattern 14243}#
           (lambda (#{pattern 15899}# #{keys 15900}#)
             (letrec*
               ((#{cvt* 15901}#
                  (lambda (#{p* 16700}# #{n 16701}# #{ids 16702}#)
                    (if (not (pair? #{p* 16700}#))
                      (#{cvt 15903}#
                        #{p* 16700}#
                        #{n 16701}#
                        #{ids 16702}#)
                      (call-with-values
                        (lambda ()
                          (#{cvt* 15901}#
                            (cdr #{p* 16700}#)
                            #{n 16701}#
                            #{ids 16702}#))
                        (lambda (#{y 16705}# #{ids 16706}#)
                          (call-with-values
                            (lambda ()
                              (#{cvt 15903}#
                                (car #{p* 16700}#)
                                #{n 16701}#
                                #{ids 16706}#))
                            (lambda (#{x 16709}# #{ids 16710}#)
                              (values
                                (cons #{x 16709}# #{y 16705}#)
                                #{ids 16710}#))))))))
                (#{v-reverse 15902}#
                  (lambda (#{x 16711}#)
                    (letrec*
                      ((#{loop 16712}#
                         (lambda (#{r 16813}# #{x 16814}#)
                           (if (not (pair? #{x 16814}#))
                             (values #{r 16813}# #{x 16814}#)
                             (#{loop 16712}#
                               (cons (car #{x 16814}#) #{r 16813}#)
                               (cdr #{x 16814}#))))))
                      (#{loop 16712}# '() #{x 16711}#))))
                (#{cvt 15903}#
                  (lambda (#{p 15906}# #{n 15907}# #{ids 15908}#)
                    (if (if (symbol? #{p 15906}#)
                          #t
                          (if (if (vector? #{p 15906}#)
                                (if (= (vector-length #{p 15906}#) 4)
                                  (eq? (vector-ref #{p 15906}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{p 15906}# 1))
                            #f))
                      (if (#{bound-id-member? 4365}#
                            #{p 15906}#
                            #{keys 15900}#)
                        (values
                          (vector 'free-id #{p 15906}#)
                          #{ids 15908}#)
                        (if (#{free-id=? 4361}#
                              #{p 15906}#
                              '#(syntax-object
                                 _
                                 ((top)
                                  #(ribcage () () ())
                                  #(ribcage
                                    #(p n ids)
                                    #((top) (top) (top))
                                    #("i3777" "i3778" "i3779"))
                                  #(ribcage
                                    (cvt v-reverse cvt*)
                                    ((top) (top) (top))
                                    ("i3750" "i3748" "i3746"))
                                  #(ribcage
                                    #(pattern keys)
                                    #((top) (top))
                                    #("i3744" "i3745"))
                                  #(ribcage
                                    (gen-syntax-case
                                      gen-clause
                                      build-dispatch-call
                                      convert-pattern)
                                    ((top) (top) (top) (top))
                                    ("i3740" "i3738" "i3736" "i3734"))
                                  #(ribcage
                                    (lambda-var-list
                                      gen-var
                                      strip
                                      chi-lambda-case
                                      lambda*-formals
                                      chi-simple-lambda
                                      lambda-formals
                                      ellipsis?
                                      chi-void
                                      eval-local-transformer
                                      chi-local-syntax
                                      chi-body
                                      chi-macro
                                      chi-call
                                      chi-expr
                                      chi
                                      syntax-type
                                      chi-when-list
                                      chi-install-global
                                      chi-top-sequence
                                      chi-sequence
                                      source-wrap
                                      wrap
                                      bound-id-member?
                                      distinct-bound-ids?
                                      valid-bound-ids?
                                      bound-id=?
                                      free-id=?
                                      id-var-name
                                      same-marks?
                                      join-marks
                                      join-wraps
                                      smart-append
                                      make-binding-wrap
                                      extend-ribcage!
                                      make-empty-ribcage
                                      new-mark
                                      anti-mark
                                      the-anti-mark
                                      top-marked?
                                      top-wrap
                                      empty-wrap
                                      set-ribcage-labels!
                                      set-ribcage-marks!
                                      set-ribcage-symnames!
                                      ribcage-labels
                                      ribcage-marks
                                      ribcage-symnames
                                      ribcage?
                                      make-ribcage
                                      gen-labels
                                      gen-label
                                      make-rename
                                      rename-marks
                                      rename-new
                                      rename-old
                                      subst-rename?
                                      wrap-subst
                                      wrap-marks
                                      make-wrap
                                      id-sym-name&marks
                                      id-sym-name
                                      id?
                                      nonsymbol-id?
                                      global-extend
                                      lookup
                                      macros-only-env
                                      extend-var-env
                                      extend-env
                                      null-env
                                      binding-value
                                      binding-type
                                      make-binding
                                      arg-check
                                      source-annotation
                                      no-source
                                      set-syntax-object-module!
                                      set-syntax-object-wrap!
                                      set-syntax-object-expression!
                                      syntax-object-module
                                      syntax-object-wrap
                                      syntax-object-expression
                                      syntax-object?
                                      make-syntax-object
                                      build-lexical-var
                                      build-letrec
                                      build-named-let
                                      build-let
                                      build-sequence
                                      build-data
                                      build-primref
                                      build-primcall
                                      build-lambda-case
                                      build-case-lambda
                                      build-simple-lambda
                                      build-global-definition
                                      build-global-assignment
                                      build-global-reference
                                      analyze-variable
                                      build-lexical-assignment
                                      build-lexical-reference
                                      build-dynlet
                                      build-conditional
                                      build-call
                                      build-void
                                      maybe-name-value!
                                      decorate-source
                                      get-global-definition-hook
                                      put-global-definition-hook
                                      gensym-hook
                                      local-eval-hook
                                      top-level-eval-hook
                                      fx<
                                      fx=
                                      fx-
                                      fx+
                                      set-lambda-meta!
                                      lambda-meta
                                      lambda?
                                      make-dynlet
                                      make-letrec
                                      make-let
                                      make-lambda-case
                                      make-lambda
                                      make-seq
                                      make-primcall
                                      make-call
                                      make-conditional
                                      make-toplevel-define
                                      make-toplevel-set
                                      make-toplevel-ref
                                      make-module-set
                                      make-module-ref
                                      make-lexical-set
                                      make-lexical-ref
                                      make-primitive-ref
                                      make-const
                                      make-void)
                                    ((top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top))
                                    ("i471"
                                     "i469"
                                     "i467"
                                     "i465"
                                     "i463"
                                     "i461"
                                     "i459"
                                     "i457"
                                     "i455"
                                     "i453"
                                     "i451"
                                     "i449"
                                     "i447"
                                     "i445"
                                     "i443"
                                     "i441"
                                     "i439"
                                     "i437"
                                     "i435"
                                     "i433"
                                     "i431"
                                     "i429"
                                     "i427"
                                     "i425"
                                     "i423"
                                     "i421"
                                     "i419"
                                     "i417"
                                     "i415"
                                     "i413"
                                     "i411"
                                     "i409"
                                     "i407"
                                     "i405"
                                     "i403"
                                     "i402"
                                     "i400"
                                     "i397"
                                     "i396"
                                     "i395"
                                     "i393"
                                     "i392"
                                     "i390"
                                     "i388"
                                     "i386"
                                     "i384"
                                     "i382"
                                     "i380"
                                     "i378"
                                     "i376"
                                     "i373"
                                     "i371"
                                     "i370"
                                     "i368"
                                     "i366"
                                     "i364"
                                     "i362"
                                     "i361"
                                     "i360"
                                     "i359"
                                     "i357"
                                     "i356"
                                     "i353"
                                     "i351"
                                     "i349"
                                     "i347"
                                     "i345"
                                     "i343"
                                     "i341"
                                     "i340"
                                     "i339"
                                     "i337"
                                     "i335"
                                     "i334"
                                     "i331"
                                     "i330"
                                     "i328"
                                     "i326"
                                     "i324"
                                     "i322"
                                     "i320"
                                     "i318"
                                     "i316"
                                     "i314"
                                     "i312"
                                     "i309"
                                     "i307"
                                     "i305"
                                     "i303"
                                     "i301"
                                     "i299"
                                     "i297"
                                     "i295"
                                     "i293"
                                     "i291"
                                     "i289"
                                     "i287"
                                     "i285"
                                     "i283"
                                     "i281"
                                     "i279"
                                     "i277"
                                     "i275"
                                     "i273"
                                     "i271"
                                     "i269"
                                     "i267"
                                     "i265"
                                     "i263"
                                     "i262"
                                     "i259"
                                     "i257"
                                     "i256"
                                     "i255"
                                     "i254"
                                     "i253"
                                     "i251"
                                     "i249"
                                     "i247"
                                     "i244"
                                     "i242"
                                     "i240"
                                     "i238"
                                     "i236"
                                     "i234"
                                     "i232"
                                     "i230"
                                     "i228"
                                     "i226"
                                     "i224"
                                     "i222"
                                     "i220"
                                     "i218"
                                     "i216"
                                     "i214"
                                     "i212"
                                     "i210"
                                     "i208"))
                                  #(ribcage
                                    (define-structure
                                      define-expansion-accessors
                                      define-expansion-constructors)
                                    ((top) (top) (top))
                                    ("i46" "i45" "i44")))
                                 (hygiene guile)))
                          (values '_ #{ids 15908}#)
                          (values
                            'any
                            (cons (cons #{p 15906}# #{n 15907}#)
                                  #{ids 15908}#))))
                      (let ((#{tmp 16040}#
                              ($sc-dispatch #{p 15906}# '(any any))))
                        (if (if #{tmp 16040}#
                              (@apply
                                (lambda (#{x 16044}# #{dots 16045}#)
                                  (if (if (if (vector? #{dots 16045}#)
                                            (if (= (vector-length
                                                     #{dots 16045}#)
                                                   4)
                                              (eq? (vector-ref
                                                     #{dots 16045}#
                                                     0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (symbol? (vector-ref #{dots 16045}# 1))
                                        #f)
                                    (#{free-id=? 4361}#
                                      #{dots 16045}#
                                      '#(syntax-object
                                         ...
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i2261"))
                                          #(ribcage
                                            (lambda-var-list
                                              gen-var
                                              strip
                                              chi-lambda-case
                                              lambda*-formals
                                              chi-simple-lambda
                                              lambda-formals
                                              ellipsis?
                                              chi-void
                                              eval-local-transformer
                                              chi-local-syntax
                                              chi-body
                                              chi-macro
                                              chi-call
                                              chi-expr
                                              chi
                                              syntax-type
                                              chi-when-list
                                              chi-install-global
                                              chi-top-sequence
                                              chi-sequence
                                              source-wrap
                                              wrap
                                              bound-id-member?
                                              distinct-bound-ids?
                                              valid-bound-ids?
                                              bound-id=?
                                              free-id=?
                                              id-var-name
                                              same-marks?
                                              join-marks
                                              join-wraps
                                              smart-append
                                              make-binding-wrap
                                              extend-ribcage!
                                              make-empty-ribcage
                                              new-mark
                                              anti-mark
                                              the-anti-mark
                                              top-marked?
                                              top-wrap
                                              empty-wrap
                                              set-ribcage-labels!
                                              set-ribcage-marks!
                                              set-ribcage-symnames!
                                              ribcage-labels
                                              ribcage-marks
                                              ribcage-symnames
                                              ribcage?
                                              make-ribcage
                                              gen-labels
                                              gen-label
                                              make-rename
                                              rename-marks
                                              rename-new
                                              rename-old
                                              subst-rename?
                                              wrap-subst
                                              wrap-marks
                                              make-wrap
                                              id-sym-name&marks
                                              id-sym-name
                                              id?
                                              nonsymbol-id?
                                              global-extend
                                              lookup
                                              macros-only-env
                                              extend-var-env
                                              extend-env
                                              null-env
                                              binding-value
                                              binding-type
                                              make-binding
                                              arg-check
                                              source-annotation
                                              no-source
                                              set-syntax-object-module!
                                              set-syntax-object-wrap!
                                              set-syntax-object-expression!
                                              syntax-object-module
                                              syntax-object-wrap
                                              syntax-object-expression
                                              syntax-object?
                                              make-syntax-object
                                              build-lexical-var
                                              build-letrec
                                              build-named-let
                                              build-let
                                              build-sequence
                                              build-data
                                              build-primref
                                              build-primcall
                                              build-lambda-case
                                              build-case-lambda
                                              build-simple-lambda
                                              build-global-definition
                                              build-global-assignment
                                              build-global-reference
                                              analyze-variable
                                              build-lexical-assignment
                                              build-lexical-reference
                                              build-dynlet
                                              build-conditional
                                              build-call
                                              build-void
                                              maybe-name-value!
                                              decorate-source
                                              get-global-definition-hook
                                              put-global-definition-hook
                                              gensym-hook
                                              local-eval-hook
                                              top-level-eval-hook
                                              fx<
                                              fx=
                                              fx-
                                              fx+
                                              set-lambda-meta!
                                              lambda-meta
                                              lambda?
                                              make-dynlet
                                              make-letrec
                                              make-let
                                              make-lambda-case
                                              make-lambda
                                              make-seq
                                              make-primcall
                                              make-call
                                              make-conditional
                                              make-toplevel-define
                                              make-toplevel-set
                                              make-toplevel-ref
                                              make-module-set
                                              make-module-ref
                                              make-lexical-set
                                              make-lexical-ref
                                              make-primitive-ref
                                              make-const
                                              make-void)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i471"
                                             "i469"
                                             "i467"
                                             "i465"
                                             "i463"
                                             "i461"
                                             "i459"
                                             "i457"
                                             "i455"
                                             "i453"
                                             "i451"
                                             "i449"
                                             "i447"
                                             "i445"
                                             "i443"
                                             "i441"
                                             "i439"
                                             "i437"
                                             "i435"
                                             "i433"
                                             "i431"
                                             "i429"
                                             "i427"
                                             "i425"
                                             "i423"
                                             "i421"
                                             "i419"
                                             "i417"
                                             "i415"
                                             "i413"
                                             "i411"
                                             "i409"
                                             "i407"
                                             "i405"
                                             "i403"
                                             "i402"
                                             "i400"
                                             "i397"
                                             "i396"
                                             "i395"
                                             "i393"
                                             "i392"
                                             "i390"
                                             "i388"
                                             "i386"
                                             "i384"
                                             "i382"
                                             "i380"
                                             "i378"
                                             "i376"
                                             "i373"
                                             "i371"
                                             "i370"
                                             "i368"
                                             "i366"
                                             "i364"
                                             "i362"
                                             "i361"
                                             "i360"
                                             "i359"
                                             "i357"
                                             "i356"
                                             "i353"
                                             "i351"
                                             "i349"
                                             "i347"
                                             "i345"
                                             "i343"
                                             "i341"
                                             "i340"
                                             "i339"
                                             "i337"
                                             "i335"
                                             "i334"
                                             "i331"
                                             "i330"
                                             "i328"
                                             "i326"
                                             "i324"
                                             "i322"
                                             "i320"
                                             "i318"
                                             "i316"
                                             "i314"
                                             "i312"
                                             "i309"
                                             "i307"
                                             "i305"
                                             "i303"
                                             "i301"
                                             "i299"
                                             "i297"
                                             "i295"
                                             "i293"
                                             "i291"
                                             "i289"
                                             "i287"
                                             "i285"
                                             "i283"
                                             "i281"
                                             "i279"
                                             "i277"
                                             "i275"
                                             "i273"
                                             "i271"
                                             "i269"
                                             "i267"
                                             "i265"
                                             "i263"
                                             "i262"
                                             "i259"
                                             "i257"
                                             "i256"
                                             "i255"
                                             "i254"
                                             "i253"
                                             "i251"
                                             "i249"
                                             "i247"
                                             "i244"
                                             "i242"
                                             "i240"
                                             "i238"
                                             "i236"
                                             "i234"
                                             "i232"
                                             "i230"
                                             "i228"
                                             "i226"
                                             "i224"
                                             "i222"
                                             "i220"
                                             "i218"
                                             "i216"
                                             "i214"
                                             "i212"
                                             "i210"
                                             "i208"))
                                          #(ribcage
                                            (define-structure
                                              define-expansion-accessors
                                              define-expansion-constructors)
                                            ((top) (top) (top))
                                            ("i46" "i45" "i44")))
                                         (hygiene guile)))
                                    #f))
                                #{tmp 16040}#)
                              #f)
                          (@apply
                            (lambda (#{x 16084}# #{dots 16085}#)
                              (call-with-values
                                (lambda ()
                                  (#{cvt 15903}#
                                    #{x 16084}#
                                    (#{1+}# #{n 15907}#)
                                    #{ids 15908}#))
                                (lambda (#{p 16086}# #{ids 16087}#)
                                  (values
                                    (if (eq? #{p 16086}# 'any)
                                      'each-any
                                      (vector 'each #{p 16086}#))
                                    #{ids 16087}#))))
                            #{tmp 16040}#)
                          (let ((#{tmp 16088}#
                                  ($sc-dispatch #{p 15906}# '(any any . any))))
                            (if (if #{tmp 16088}#
                                  (@apply
                                    (lambda (#{x 16092}#
                                             #{dots 16093}#
                                             #{ys 16094}#)
                                      (if (if (if (vector? #{dots 16093}#)
                                                (if (= (vector-length
                                                         #{dots 16093}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{dots 16093}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (symbol?
                                              (vector-ref #{dots 16093}# 1))
                                            #f)
                                        (#{free-id=? 4361}#
                                          #{dots 16093}#
                                          '#(syntax-object
                                             ...
                                             ((top)
                                              #(ribcage () () ())
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("i2261"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  chi-lambda-case
                                                  lambda*-formals
                                                  chi-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  chi-void
                                                  eval-local-transformer
                                                  chi-local-syntax
                                                  chi-body
                                                  chi-macro
                                                  chi-call
                                                  chi-expr
                                                  chi
                                                  syntax-type
                                                  chi-when-list
                                                  chi-install-global
                                                  chi-top-sequence
                                                  chi-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-primcall
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-call
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-seq
                                                  make-primcall
                                                  make-call
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i471"
                                                 "i469"
                                                 "i467"
                                                 "i465"
                                                 "i463"
                                                 "i461"
                                                 "i459"
                                                 "i457"
                                                 "i455"
                                                 "i453"
                                                 "i451"
                                                 "i449"
                                                 "i447"
                                                 "i445"
                                                 "i443"
                                                 "i441"
                                                 "i439"
                                                 "i437"
                                                 "i435"
                                                 "i433"
                                                 "i431"
                                                 "i429"
                                                 "i427"
                                                 "i425"
                                                 "i423"
                                                 "i421"
                                                 "i419"
                                                 "i417"
                                                 "i415"
                                                 "i413"
                                                 "i411"
                                                 "i409"
                                                 "i407"
                                                 "i405"
                                                 "i403"
                                                 "i402"
                                                 "i400"
                                                 "i397"
                                                 "i396"
                                                 "i395"
                                                 "i393"
                                                 "i392"
                                                 "i390"
                                                 "i388"
                                                 "i386"
                                                 "i384"
                                                 "i382"
                                                 "i380"
                                                 "i378"
                                                 "i376"
                                                 "i373"
                                                 "i371"
                                                 "i370"
                                                 "i368"
                                                 "i366"
                                                 "i364"
                                                 "i362"
                                                 "i361"
                                                 "i360"
                                                 "i359"
                                                 "i357"
                                                 "i356"
                                                 "i353"
                                                 "i351"
                                                 "i349"
                                                 "i347"
                                                 "i345"
                                                 "i343"
                                                 "i341"
                                                 "i340"
                                                 "i339"
                                                 "i337"
                                                 "i335"
                                                 "i334"
                                                 "i331"
                                                 "i330"
                                                 "i328"
                                                 "i326"
                                                 "i324"
                                                 "i322"
                                                 "i320"
                                                 "i318"
                                                 "i316"
                                                 "i314"
                                                 "i312"
                                                 "i309"
                                                 "i307"
                                                 "i305"
                                                 "i303"
                                                 "i301"
                                                 "i299"
                                                 "i297"
                                                 "i295"
                                                 "i293"
                                                 "i291"
                                                 "i289"
                                                 "i287"
                                                 "i285"
                                                 "i283"
                                                 "i281"
                                                 "i279"
                                                 "i277"
                                                 "i275"
                                                 "i273"
                                                 "i271"
                                                 "i269"
                                                 "i267"
                                                 "i265"
                                                 "i263"
                                                 "i262"
                                                 "i259"
                                                 "i257"
                                                 "i256"
                                                 "i255"
                                                 "i254"
                                                 "i253"
                                                 "i251"
                                                 "i249"
                                                 "i247"
                                                 "i244"
                                                 "i242"
                                                 "i240"
                                                 "i238"
                                                 "i236"
                                                 "i234"
                                                 "i232"
                                                 "i230"
                                                 "i228"
                                                 "i226"
                                                 "i224"
                                                 "i222"
                                                 "i220"
                                                 "i218"
                                                 "i216"
                                                 "i214"
                                                 "i212"
                                                 "i210"
                                                 "i208"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("i46" "i45" "i44")))
                                             (hygiene guile)))
                                        #f))
                                    #{tmp 16088}#)
                                  #f)
                              (@apply
                                (lambda (#{x 16133}#
                                         #{dots 16134}#
                                         #{ys 16135}#)
                                  (call-with-values
                                    (lambda ()
                                      (#{cvt* 15901}#
                                        #{ys 16135}#
                                        #{n 15907}#
                                        #{ids 15908}#))
                                    (lambda (#{ys 16620}# #{ids 16621}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{cvt 15903}#
                                            #{x 16133}#
                                            (#{1+}# #{n 15907}#)
                                            #{ids 16621}#))
                                        (lambda (#{x 16622}# #{ids 16623}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{v-reverse 15902}#
                                                #{ys 16620}#))
                                            (lambda (#{ys 16659}# #{e 16660}#)
                                              (values
                                                (vector
                                                  'each+
                                                  #{x 16622}#
                                                  #{ys 16659}#
                                                  #{e 16660}#)
                                                #{ids 16623}#))))))))
                                #{tmp 16088}#)
                              (let ((#{tmp 16661}#
                                      ($sc-dispatch #{p 15906}# '(any . any))))
                                (if #{tmp 16661}#
                                  (@apply
                                    (lambda (#{x 16665}# #{y 16666}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{cvt 15903}#
                                            #{y 16666}#
                                            #{n 15907}#
                                            #{ids 15908}#))
                                        (lambda (#{y 16667}# #{ids 16668}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{cvt 15903}#
                                                #{x 16665}#
                                                #{n 15907}#
                                                #{ids 16668}#))
                                            (lambda (#{x 16669}# #{ids 16670}#)
                                              (values
                                                (cons #{x 16669}# #{y 16667}#)
                                                #{ids 16670}#))))))
                                    #{tmp 16661}#)
                                  (let ((#{tmp 16671}#
                                          ($sc-dispatch #{p 15906}# '())))
                                    (if #{tmp 16671}#
                                      (@apply
                                        (lambda () (values '() #{ids 15908}#))
                                        #{tmp 16671}#)
                                      (let ((#{tmp 16675}#
                                              ($sc-dispatch
                                                #{p 15906}#
                                                '#(vector each-any))))
                                        (if #{tmp 16675}#
                                          (@apply
                                            (lambda (#{x 16679}#)
                                              (call-with-values
                                                (lambda ()
                                                  (#{cvt 15903}#
                                                    #{x 16679}#
                                                    #{n 15907}#
                                                    #{ids 15908}#))
                                                (lambda (#{p 16680}#
                                                         #{ids 16681}#)
                                                  (values
                                                    (vector
                                                      'vector
                                                      #{p 16680}#)
                                                    #{ids 16681}#))))
                                            #{tmp 16675}#)
                                          (values
                                            (vector
                                              'atom
                                              (#{strip 4386}#
                                                #{p 15906}#
                                                '(())))
                                            #{ids 15908}#)))))))))))))))
               (#{cvt 15903}# #{pattern 15899}# 0 '()))))
         (#{build-dispatch-call 14244}#
           (lambda (#{pvars 16815}#
                    #{exp 16816}#
                    #{y 16817}#
                    #{r 16818}#
                    #{mod 16819}#)
             (let ((#{ids 16820}# (map car #{pvars 16815}#)))
               (begin
                 (map cdr #{pvars 16815}#)
                 (let ((#{labels 16822}#
                         (#{gen-labels 4344}# #{ids 16820}#))
                       (#{new-vars 16823}#
                         (map #{gen-var 4387}# #{ids 16820}#)))
                   (#{build-primcall 4319}#
                     #f
                     'apply
                     (list (#{build-simple-lambda 4316}#
                             #f
                             (map syntax->datum #{ids 16820}#)
                             #f
                             #{new-vars 16823}#
                             '()
                             (#{chi 4373}#
                               #{exp 16816}#
                               (#{extend-env 4335}#
                                 #{labels 16822}#
                                 (map (lambda (#{var 17155}# #{level 17156}#)
                                        (cons 'syntax
                                              (cons #{var 17155}#
                                                    #{level 17156}#)))
                                      #{new-vars 16823}#
                                      (map cdr #{pvars 16815}#))
                                 #{r 16818}#)
                               (#{make-binding-wrap 4355}#
                                 #{ids 16820}#
                                 #{labels 16822}#
                                 '(()))
                               #{mod 16819}#))
                           #{y 16817}#)))))))
         (#{gen-clause 14245}#
           (lambda (#{x 15493}#
                    #{keys 15494}#
                    #{clauses 15495}#
                    #{r 15496}#
                    #{pat 15497}#
                    #{fender 15498}#
                    #{exp 15499}#
                    #{mod 15500}#)
             (call-with-values
               (lambda ()
                 (#{convert-pattern 14243}#
                   #{pat 15497}#
                   #{keys 15494}#))
               (lambda (#{p 15638}# #{pvars 15639}#)
                 (if (not (#{distinct-bound-ids? 4364}#
                            (map car #{pvars 15639}#)))
                   (syntax-violation
                     'syntax-case
                     "duplicate pattern variable"
                     #{pat 15497}#)
                   (if (not (and-map
                              (lambda (#{x 15748}#)
                                (not (let ((#{x 15752}# (car #{x 15748}#)))
                                       (if (if (if (vector? #{x 15752}#)
                                                 (if (= (vector-length
                                                          #{x 15752}#)
                                                        4)
                                                   (eq? (vector-ref
                                                          #{x 15752}#
                                                          0)
                                                        'syntax-object)
                                                   #f)
                                                 #f)
                                             (symbol?
                                               (vector-ref #{x 15752}# 1))
                                             #f)
                                         (#{free-id=? 4361}#
                                           #{x 15752}#
                                           '#(syntax-object
                                              ...
                                              ((top)
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i2261"))
                                               #(ribcage
                                                 (lambda-var-list
                                                   gen-var
                                                   strip
                                                   chi-lambda-case
                                                   lambda*-formals
                                                   chi-simple-lambda
                                                   lambda-formals
                                                   ellipsis?
                                                   chi-void
                                                   eval-local-transformer
                                                   chi-local-syntax
                                                   chi-body
                                                   chi-macro
                                                   chi-call
                                                   chi-expr
                                                   chi
                                                   syntax-type
                                                   chi-when-list
                                                   chi-install-global
                                                   chi-top-sequence
                                                   chi-sequence
                                                   source-wrap
                                                   wrap
                                                   bound-id-member?
                                                   distinct-bound-ids?
                                                   valid-bound-ids?
                                                   bound-id=?
                                                   free-id=?
                                                   id-var-name
                                                   same-marks?
                                                   join-marks
                                                   join-wraps
                                                   smart-append
                                                   make-binding-wrap
                                                   extend-ribcage!
                                                   make-empty-ribcage
                                                   new-mark
                                                   anti-mark
                                                   the-anti-mark
                                                   top-marked?
                                                   top-wrap
                                                   empty-wrap
                                                   set-ribcage-labels!
                                                   set-ribcage-marks!
                                                   set-ribcage-symnames!
                                                   ribcage-labels
                                                   ribcage-marks
                                                   ribcage-symnames
                                                   ribcage?
                                                   make-ribcage
                                                   gen-labels
                                                   gen-label
                                                   make-rename
                                                   rename-marks
                                                   rename-new
                                                   rename-old
                                                   subst-rename?
                                                   wrap-subst
                                                   wrap-marks
                                                   make-wrap
                                                   id-sym-name&marks
                                                   id-sym-name
                                                   id?
                                                   nonsymbol-id?
                                                   global-extend
                                                   lookup
                                                   macros-only-env
                                                   extend-var-env
                                                   extend-env
                                                   null-env
                                                   binding-value
                                                   binding-type
                                                   make-binding
                                                   arg-check
                                                   source-annotation
                                                   no-source
                                                   set-syntax-object-module!
                                                   set-syntax-object-wrap!
                                                   set-syntax-object-expression!
                                                   syntax-object-module
                                                   syntax-object-wrap
                                                   syntax-object-expression
                                                   syntax-object?
                                                   make-syntax-object
                                                   build-lexical-var
                                                   build-letrec
                                                   build-named-let
                                                   build-let
                                                   build-sequence
                                                   build-data
                                                   build-primref
                                                   build-primcall
                                                   build-lambda-case
                                                   build-case-lambda
                                                   build-simple-lambda
                                                   build-global-definition
                                                   build-global-assignment
                                                   build-global-reference
                                                   analyze-variable
                                                   build-lexical-assignment
                                                   build-lexical-reference
                                                   build-dynlet
                                                   build-conditional
                                                   build-call
                                                   build-void
                                                   maybe-name-value!
                                                   decorate-source
                                                   get-global-definition-hook
                                                   put-global-definition-hook
                                                   gensym-hook
                                                   local-eval-hook
                                                   top-level-eval-hook
                                                   fx<
                                                   fx=
                                                   fx-
                                                   fx+
                                                   set-lambda-meta!
                                                   lambda-meta
                                                   lambda?
                                                   make-dynlet
                                                   make-letrec
                                                   make-let
                                                   make-lambda-case
                                                   make-lambda
                                                   make-seq
                                                   make-primcall
                                                   make-call
                                                   make-conditional
                                                   make-toplevel-define
                                                   make-toplevel-set
                                                   make-toplevel-ref
                                                   make-module-set
                                                   make-module-ref
                                                   make-lexical-set
                                                   make-lexical-ref
                                                   make-primitive-ref
                                                   make-const
                                                   make-void)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i471"
                                                  "i469"
                                                  "i467"
                                                  "i465"
                                                  "i463"
                                                  "i461"
                                                  "i459"
                                                  "i457"
                                                  "i455"
                                                  "i453"
                                                  "i451"
                                                  "i449"
                                                  "i447"
                                                  "i445"
                                                  "i443"
                                                  "i441"
                                                  "i439"
                                                  "i437"
                                                  "i435"
                                                  "i433"
                                                  "i431"
                                                  "i429"
                                                  "i427"
                                                  "i425"
                                                  "i423"
                                                  "i421"
                                                  "i419"
                                                  "i417"
                                                  "i415"
                                                  "i413"
                                                  "i411"
                                                  "i409"
                                                  "i407"
                                                  "i405"
                                                  "i403"
                                                  "i402"
                                                  "i400"
                                                  "i397"
                                                  "i396"
                                                  "i395"
                                                  "i393"
                                                  "i392"
                                                  "i390"
                                                  "i388"
                                                  "i386"
                                                  "i384"
                                                  "i382"
                                                  "i380"
                                                  "i378"
                                                  "i376"
                                                  "i373"
                                                  "i371"
                                                  "i370"
                                                  "i368"
                                                  "i366"
                                                  "i364"
                                                  "i362"
                                                  "i361"
                                                  "i360"
                                                  "i359"
                                                  "i357"
                                                  "i356"
                                                  "i353"
                                                  "i351"
                                                  "i349"
                                                  "i347"
                                                  "i345"
                                                  "i343"
                                                  "i341"
                                                  "i340"
                                                  "i339"
                                                  "i337"
                                                  "i335"
                                                  "i334"
                                                  "i331"
                                                  "i330"
                                                  "i328"
                                                  "i326"
                                                  "i324"
                                                  "i322"
                                                  "i320"
                                                  "i318"
                                                  "i316"
                                                  "i314"
                                                  "i312"
                                                  "i309"
                                                  "i307"
                                                  "i305"
                                                  "i303"
                                                  "i301"
                                                  "i299"
                                                  "i297"
                                                  "i295"
                                                  "i293"
                                                  "i291"
                                                  "i289"
                                                  "i287"
                                                  "i285"
                                                  "i283"
                                                  "i281"
                                                  "i279"
                                                  "i277"
                                                  "i275"
                                                  "i273"
                                                  "i271"
                                                  "i269"
                                                  "i267"
                                                  "i265"
                                                  "i263"
                                                  "i262"
                                                  "i259"
                                                  "i257"
                                                  "i256"
                                                  "i255"
                                                  "i254"
                                                  "i253"
                                                  "i251"
                                                  "i249"
                                                  "i247"
                                                  "i244"
                                                  "i242"
                                                  "i240"
                                                  "i238"
                                                  "i236"
                                                  "i234"
                                                  "i232"
                                                  "i230"
                                                  "i228"
                                                  "i226"
                                                  "i224"
                                                  "i222"
                                                  "i220"
                                                  "i218"
                                                  "i216"
                                                  "i214"
                                                  "i212"
                                                  "i210"
                                                  "i208"))
                                               #(ribcage
                                                 (define-structure
                                                   define-expansion-accessors
                                                   define-expansion-constructors)
                                                 ((top) (top) (top))
                                                 ("i46" "i45" "i44")))
                                              (hygiene guile)))
                                         #f))))
                              #{pvars 15639}#))
                     (syntax-violation
                       'syntax-case
                       "misplaced ellipsis"
                       #{pat 15497}#)
                     (let ((#{y 15777}#
                             (gensym
                               (string-append (symbol->string 'tmp) " "))))
                       (let ((#{fun-exp 15782}#
                               (let ((#{req 15791}# (list 'tmp))
                                     (#{vars 15793}# (list #{y 15777}#))
                                     (#{exp 15795}#
                                       (let ((#{y 15824}#
                                               (make-struct/no-tail
                                                 (vector-ref
                                                   %expanded-vtables
                                                   3)
                                                 #f
                                                 'tmp
                                                 #{y 15777}#)))
                                         (let ((#{test-exp 15828}#
                                                 (let ((#{tmp 15837}#
                                                         ($sc-dispatch
                                                           #{fender 15498}#
                                                           '#(atom #t))))
                                                   (if #{tmp 15837}#
                                                     (@apply
                                                       (lambda () #{y 15824}#)
                                                       #{tmp 15837}#)
                                                     (let ((#{then-exp 15855}#
                                                             (#{build-dispatch-call 14244}#
                                                               #{pvars 15639}#
                                                               #{fender 15498}#
                                                               #{y 15824}#
                                                               #{r 15496}#
                                                               #{mod 15500}#))
                                                           (#{else-exp 15856}#
                                                             (make-struct/no-tail
                                                               (vector-ref
                                                                 %expanded-vtables
                                                                 1)
                                                               #f
                                                               #f)))
                                                       (make-struct/no-tail
                                                         (vector-ref
                                                           %expanded-vtables
                                                           10)
                                                         #f
                                                         #{y 15824}#
                                                         #{then-exp 15855}#
                                                         #{else-exp 15856}#)))))
                                               (#{then-exp 15829}#
                                                 (#{build-dispatch-call 14244}#
                                                   #{pvars 15639}#
                                                   #{exp 15499}#
                                                   #{y 15824}#
                                                   #{r 15496}#
                                                   #{mod 15500}#))
                                               (#{else-exp 15830}#
                                                 (#{gen-syntax-case 14246}#
                                                   #{x 15493}#
                                                   #{keys 15494}#
                                                   #{clauses 15495}#
                                                   #{r 15496}#
                                                   #{mod 15500}#)))
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 10)
                                             #f
                                             #{test-exp 15828}#
                                             #{then-exp 15829}#
                                             #{else-exp 15830}#)))))
                                 (let ((#{body 15800}#
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 15)
                                           #f
                                           #{req 15791}#
                                           #f
                                           #f
                                           #f
                                           '()
                                           #{vars 15793}#
                                           #{exp 15795}#
                                           #f)))
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 14)
                                     #f
                                     '()
                                     #{body 15800}#))))
                             (#{arg-exps 15783}#
                               (list (if (eq? #{p 15638}# 'any)
                                       (let ((#{args 15878}#
                                               (list #{x 15493}#)))
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 12)
                                           #f
                                           'list
                                           #{args 15878}#))
                                       (let ((#{args 15887}#
                                               (list #{x 15493}#
                                                     (make-struct/no-tail
                                                       (vector-ref
                                                         %expanded-vtables
                                                         1)
                                                       #f
                                                       #{p 15638}#))))
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 12)
                                           #f
                                           '$sc-dispatch
                                           #{args 15887}#))))))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 11)
                           #f
                           #{fun-exp 15782}#
                           #{arg-exps 15783}#)))))))))
         (#{gen-syntax-case 14246}#
           (lambda (#{x 14990}#
                    #{keys 14991}#
                    #{clauses 14992}#
                    #{r 14993}#
                    #{mod 14994}#)
             (if (null? #{clauses 14992}#)
               (let ((#{args 15000}#
                       (list (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               #f)
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               "source expression failed to match any pattern")
                             #{x 14990}#)))
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 12)
                   #f
                   'syntax-violation
                   #{args 15000}#))
               (let ((#{tmp 15019}# (car #{clauses 14992}#)))
                 (let ((#{tmp 15020}#
                         ($sc-dispatch #{tmp 15019}# '(any any))))
                   (if #{tmp 15020}#
                     (@apply
                       (lambda (#{pat 15022}# #{exp 15023}#)
                         (if (if (if (symbol? #{pat 15022}#)
                                   #t
                                   (if (if (vector? #{pat 15022}#)
                                         (if (= (vector-length #{pat 15022}#)
                                                4)
                                           (eq? (vector-ref #{pat 15022}# 0)
                                                'syntax-object)
                                           #f)
                                         #f)
                                     (symbol? (vector-ref #{pat 15022}# 1))
                                     #f))
                               (and-map
                                 (lambda (#{x 15050}#)
                                   (not (#{free-id=? 4361}#
                                          #{pat 15022}#
                                          #{x 15050}#)))
                                 (cons '#(syntax-object
                                          ...
                                          ((top)
                                           #(ribcage
                                             #(pat exp)
                                             #((top) (top))
                                             #("i3937" "i3938"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x keys clauses r mod)
                                             #((top) (top) (top) (top) (top))
                                             #("i3927"
                                               "i3928"
                                               "i3929"
                                               "i3930"
                                               "i3931"))
                                           #(ribcage
                                             (gen-syntax-case
                                               gen-clause
                                               build-dispatch-call
                                               convert-pattern)
                                             ((top) (top) (top) (top))
                                             ("i3740" "i3738" "i3736" "i3734"))
                                           #(ribcage
                                             (lambda-var-list
                                               gen-var
                                               strip
                                               chi-lambda-case
                                               lambda*-formals
                                               chi-simple-lambda
                                               lambda-formals
                                               ellipsis?
                                               chi-void
                                               eval-local-transformer
                                               chi-local-syntax
                                               chi-body
                                               chi-macro
                                               chi-call
                                               chi-expr
                                               chi
                                               syntax-type
                                               chi-when-list
                                               chi-install-global
                                               chi-top-sequence
                                               chi-sequence
                                               source-wrap
                                               wrap
                                               bound-id-member?
                                               distinct-bound-ids?
                                               valid-bound-ids?
                                               bound-id=?
                                               free-id=?
                                               id-var-name
                                               same-marks?
                                               join-marks
                                               join-wraps
                                               smart-append
                                               make-binding-wrap
                                               extend-ribcage!
                                               make-empty-ribcage
                                               new-mark
                                               anti-mark
                                               the-anti-mark
                                               top-marked?
                                               top-wrap
                                               empty-wrap
                                               set-ribcage-labels!
                                               set-ribcage-marks!
                                               set-ribcage-symnames!
                                               ribcage-labels
                                               ribcage-marks
                                               ribcage-symnames
                                               ribcage?
                                               make-ribcage
                                               gen-labels
                                               gen-label
                                               make-rename
                                               rename-marks
                                               rename-new
                                               rename-old
                                               subst-rename?
                                               wrap-subst
                                               wrap-marks
                                               make-wrap
                                               id-sym-name&marks
                                               id-sym-name
                                               id?
                                               nonsymbol-id?
                                               global-extend
                                               lookup
                                               macros-only-env
                                               extend-var-env
                                               extend-env
                                               null-env
                                               binding-value
                                               binding-type
                                               make-binding
                                               arg-check
                                               source-annotation
                                               no-source
                                               set-syntax-object-module!
                                               set-syntax-object-wrap!
                                               set-syntax-object-expression!
                                               syntax-object-module
                                               syntax-object-wrap
                                               syntax-object-expression
                                               syntax-object?
                                               make-syntax-object
                                               build-lexical-var
                                               build-letrec
                                               build-named-let
                                               build-let
                                               build-sequence
                                               build-data
                                               build-primref
                                               build-primcall
                                               build-lambda-case
                                               build-case-lambda
                                               build-simple-lambda
                                               build-global-definition
                                               build-global-assignment
                                               build-global-reference
                                               analyze-variable
                                               build-lexical-assignment
                                               build-lexical-reference
                                               build-dynlet
                                               build-conditional
                                               build-call
                                               build-void
                                               maybe-name-value!
                                               decorate-source
                                               get-global-definition-hook
                                               put-global-definition-hook
                                               gensym-hook
                                               local-eval-hook
                                               top-level-eval-hook
                                               fx<
                                               fx=
                                               fx-
                                               fx+
                                               set-lambda-meta!
                                               lambda-meta
                                               lambda?
                                               make-dynlet
                                               make-letrec
                                               make-let
                                               make-lambda-case
                                               make-lambda
                                               make-seq
                                               make-primcall
                                               make-call
                                               make-conditional
                                               make-toplevel-define
                                               make-toplevel-set
                                               make-toplevel-ref
                                               make-module-set
                                               make-module-ref
                                               make-lexical-set
                                               make-lexical-ref
                                               make-primitive-ref
                                               make-const
                                               make-void)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i471"
                                              "i469"
                                              "i467"
                                              "i465"
                                              "i463"
                                              "i461"
                                              "i459"
                                              "i457"
                                              "i455"
                                              "i453"
                                              "i451"
                                              "i449"
                                              "i447"
                                              "i445"
                                              "i443"
                                              "i441"
                                              "i439"
                                              "i437"
                                              "i435"
                                              "i433"
                                              "i431"
                                              "i429"
                                              "i427"
                                              "i425"
                                              "i423"
                                              "i421"
                                              "i419"
                                              "i417"
                                              "i415"
                                              "i413"
                                              "i411"
                                              "i409"
                                              "i407"
                                              "i405"
                                              "i403"
                                              "i402"
                                              "i400"
                                              "i397"
                                              "i396"
                                              "i395"
                                              "i393"
                                              "i392"
                                              "i390"
                                              "i388"
                                              "i386"
                                              "i384"
                                              "i382"
                                              "i380"
                                              "i378"
                                              "i376"
                                              "i373"
                                              "i371"
                                              "i370"
                                              "i368"
                                              "i366"
                                              "i364"
                                              "i362"
                                              "i361"
                                              "i360"
                                              "i359"
                                              "i357"
                                              "i356"
                                              "i353"
                                              "i351"
                                              "i349"
                                              "i347"
                                              "i345"
                                              "i343"
                                              "i341"
                                              "i340"
                                              "i339"
                                              "i337"
                                              "i335"
                                              "i334"
                                              "i331"
                                              "i330"
                                              "i328"
                                              "i326"
                                              "i324"
                                              "i322"
                                              "i320"
                                              "i318"
                                              "i316"
                                              "i314"
                                              "i312"
                                              "i309"
                                              "i307"
                                              "i305"
                                              "i303"
                                              "i301"
                                              "i299"
                                              "i297"
                                              "i295"
                                              "i293"
                                              "i291"
                                              "i289"
                                              "i287"
                                              "i285"
                                              "i283"
                                              "i281"
                                              "i279"
                                              "i277"
                                              "i275"
                                              "i273"
                                              "i271"
                                              "i269"
                                              "i267"
                                              "i265"
                                              "i263"
                                              "i262"
                                              "i259"
                                              "i257"
                                              "i256"
                                              "i255"
                                              "i254"
                                              "i253"
                                              "i251"
                                              "i249"
                                              "i247"
                                              "i244"
                                              "i242"
                                              "i240"
                                              "i238"
                                              "i236"
                                              "i234"
                                              "i232"
                                              "i230"
                                              "i228"
                                              "i226"
                                              "i224"
                                              "i222"
                                              "i220"
                                              "i218"
                                              "i216"
                                              "i214"
                                              "i212"
                                              "i210"
                                              "i208"))
                                           #(ribcage
                                             (define-structure
                                               define-expansion-accessors
                                               define-expansion-constructors)
                                             ((top) (top) (top))
                                             ("i46" "i45" "i44")))
                                          (hygiene guile))
                                       #{keys 14991}#))
                               #f)
                           (if (#{free-id=? 4361}#
                                 '#(syntax-object
                                    pad
                                    ((top)
                                     #(ribcage
                                       #(pat exp)
                                       #((top) (top))
                                       #("i3937" "i3938"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x keys clauses r mod)
                                       #((top) (top) (top) (top) (top))
                                       #("i3927"
                                         "i3928"
                                         "i3929"
                                         "i3930"
                                         "i3931"))
                                     #(ribcage
                                       (gen-syntax-case
                                         gen-clause
                                         build-dispatch-call
                                         convert-pattern)
                                       ((top) (top) (top) (top))
                                       ("i3740" "i3738" "i3736" "i3734"))
                                     #(ribcage
                                       (lambda-var-list
                                         gen-var
                                         strip
                                         chi-lambda-case
                                         lambda*-formals
                                         chi-simple-lambda
                                         lambda-formals
                                         ellipsis?
                                         chi-void
                                         eval-local-transformer
                                         chi-local-syntax
                                         chi-body
                                         chi-macro
                                         chi-call
                                         chi-expr
                                         chi
                                         syntax-type
                                         chi-when-list
                                         chi-install-global
                                         chi-top-sequence
                                         chi-sequence
                                         source-wrap
                                         wrap
                                         bound-id-member?
                                         distinct-bound-ids?
                                         valid-bound-ids?
                                         bound-id=?
                                         free-id=?
                                         id-var-name
                                         same-marks?
                                         join-marks
                                         join-wraps
                                         smart-append
                                         make-binding-wrap
                                         extend-ribcage!
                                         make-empty-ribcage
                                         new-mark
                                         anti-mark
                                         the-anti-mark
                                         top-marked?
                                         top-wrap
                                         empty-wrap
                                         set-ribcage-labels!
                                         set-ribcage-marks!
                                         set-ribcage-symnames!
                                         ribcage-labels
                                         ribcage-marks
                                         ribcage-symnames
                                         ribcage?
                                         make-ribcage
                                         gen-labels
                                         gen-label
                                         make-rename
                                         rename-marks
                                         rename-new
                                         rename-old
                                         subst-rename?
                                         wrap-subst
                                         wrap-marks
                                         make-wrap
                                         id-sym-name&marks
                                         id-sym-name
                                         id?
                                         nonsymbol-id?
                                         global-extend
                                         lookup
                                         macros-only-env
                                         extend-var-env
                                         extend-env
                                         null-env
                                         binding-value
                                         binding-type
                                         make-binding
                                         arg-check
                                         source-annotation
                                         no-source
                                         set-syntax-object-module!
                                         set-syntax-object-wrap!
                                         set-syntax-object-expression!
                                         syntax-object-module
                                         syntax-object-wrap
                                         syntax-object-expression
                                         syntax-object?
                                         make-syntax-object
                                         build-lexical-var
                                         build-letrec
                                         build-named-let
                                         build-let
                                         build-sequence
                                         build-data
                                         build-primref
                                         build-primcall
                                         build-lambda-case
                                         build-case-lambda
                                         build-simple-lambda
                                         build-global-definition
                                         build-global-assignment
                                         build-global-reference
                                         analyze-variable
                                         build-lexical-assignment
                                         build-lexical-reference
                                         build-dynlet
                                         build-conditional
                                         build-call
                                         build-void
                                         maybe-name-value!
                                         decorate-source
                                         get-global-definition-hook
                                         put-global-definition-hook
                                         gensym-hook
                                         local-eval-hook
                                         top-level-eval-hook
                                         fx<
                                         fx=
                                         fx-
                                         fx+
                                         set-lambda-meta!
                                         lambda-meta
                                         lambda?
                                         make-dynlet
                                         make-letrec
                                         make-let
                                         make-lambda-case
                                         make-lambda
                                         make-seq
                                         make-primcall
                                         make-call
                                         make-conditional
                                         make-toplevel-define
                                         make-toplevel-set
                                         make-toplevel-ref
                                         make-module-set
                                         make-module-ref
                                         make-lexical-set
                                         make-lexical-ref
                                         make-primitive-ref
                                         make-const
                                         make-void)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i471"
                                        "i469"
                                        "i467"
                                        "i465"
                                        "i463"
                                        "i461"
                                        "i459"
                                        "i457"
                                        "i455"
                                        "i453"
                                        "i451"
                                        "i449"
                                        "i447"
                                        "i445"
                                        "i443"
                                        "i441"
                                        "i439"
                                        "i437"
                                        "i435"
                                        "i433"
                                        "i431"
                                        "i429"
                                        "i427"
                                        "i425"
                                        "i423"
                                        "i421"
                                        "i419"
                                        "i417"
                                        "i415"
                                        "i413"
                                        "i411"
                                        "i409"
                                        "i407"
                                        "i405"
                                        "i403"
                                        "i402"
                                        "i400"
                                        "i397"
                                        "i396"
                                        "i395"
                                        "i393"
                                        "i392"
                                        "i390"
                                        "i388"
                                        "i386"
                                        "i384"
                                        "i382"
                                        "i380"
                                        "i378"
                                        "i376"
                                        "i373"
                                        "i371"
                                        "i370"
                                        "i368"
                                        "i366"
                                        "i364"
                                        "i362"
                                        "i361"
                                        "i360"
                                        "i359"
                                        "i357"
                                        "i356"
                                        "i353"
                                        "i351"
                                        "i349"
                                        "i347"
                                        "i345"
                                        "i343"
                                        "i341"
                                        "i340"
                                        "i339"
                                        "i337"
                                        "i335"
                                        "i334"
                                        "i331"
                                        "i330"
                                        "i328"
                                        "i326"
                                        "i324"
                                        "i322"
                                        "i320"
                                        "i318"
                                        "i316"
                                        "i314"
                                        "i312"
                                        "i309"
                                        "i307"
                                        "i305"
                                        "i303"
                                        "i301"
                                        "i299"
                                        "i297"
                                        "i295"
                                        "i293"
                                        "i291"
                                        "i289"
                                        "i287"
                                        "i285"
                                        "i283"
                                        "i281"
                                        "i279"
                                        "i277"
                                        "i275"
                                        "i273"
                                        "i271"
                                        "i269"
                                        "i267"
                                        "i265"
                                        "i263"
                                        "i262"
                                        "i259"
                                        "i257"
                                        "i256"
                                        "i255"
                                        "i254"
                                        "i253"
                                        "i251"
                                        "i249"
                                        "i247"
                                        "i244"
                                        "i242"
                                        "i240"
                                        "i238"
                                        "i236"
                                        "i234"
                                        "i232"
                                        "i230"
                                        "i228"
                                        "i226"
                                        "i224"
                                        "i222"
                                        "i220"
                                        "i218"
                                        "i216"
                                        "i214"
                                        "i212"
                                        "i210"
                                        "i208"))
                                     #(ribcage
                                       (define-structure
                                         define-expansion-accessors
                                         define-expansion-constructors)
                                       ((top) (top) (top))
                                       ("i46" "i45" "i44")))
                                    (hygiene guile))
                                 '#(syntax-object
                                    _
                                    ((top)
                                     #(ribcage
                                       #(pat exp)
                                       #((top) (top))
                                       #("i3937" "i3938"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x keys clauses r mod)
                                       #((top) (top) (top) (top) (top))
                                       #("i3927"
                                         "i3928"
                                         "i3929"
                                         "i3930"
                                         "i3931"))
                                     #(ribcage
                                       (gen-syntax-case
                                         gen-clause
                                         build-dispatch-call
                                         convert-pattern)
                                       ((top) (top) (top) (top))
                                       ("i3740" "i3738" "i3736" "i3734"))
                                     #(ribcage
                                       (lambda-var-list
                                         gen-var
                                         strip
                                         chi-lambda-case
                                         lambda*-formals
                                         chi-simple-lambda
                                         lambda-formals
                                         ellipsis?
                                         chi-void
                                         eval-local-transformer
                                         chi-local-syntax
                                         chi-body
                                         chi-macro
                                         chi-call
                                         chi-expr
                                         chi
                                         syntax-type
                                         chi-when-list
                                         chi-install-global
                                         chi-top-sequence
                                         chi-sequence
                                         source-wrap
                                         wrap
                                         bound-id-member?
                                         distinct-bound-ids?
                                         valid-bound-ids?
                                         bound-id=?
                                         free-id=?
                                         id-var-name
                                         same-marks?
                                         join-marks
                                         join-wraps
                                         smart-append
                                         make-binding-wrap
                                         extend-ribcage!
                                         make-empty-ribcage
                                         new-mark
                                         anti-mark
                                         the-anti-mark
                                         top-marked?
                                         top-wrap
                                         empty-wrap
                                         set-ribcage-labels!
                                         set-ribcage-marks!
                                         set-ribcage-symnames!
                                         ribcage-labels
                                         ribcage-marks
                                         ribcage-symnames
                                         ribcage?
                                         make-ribcage
                                         gen-labels
                                         gen-label
                                         make-rename
                                         rename-marks
                                         rename-new
                                         rename-old
                                         subst-rename?
                                         wrap-subst
                                         wrap-marks
                                         make-wrap
                                         id-sym-name&marks
                                         id-sym-name
                                         id?
                                         nonsymbol-id?
                                         global-extend
                                         lookup
                                         macros-only-env
                                         extend-var-env
                                         extend-env
                                         null-env
                                         binding-value
                                         binding-type
                                         make-binding
                                         arg-check
                                         source-annotation
                                         no-source
                                         set-syntax-object-module!
                                         set-syntax-object-wrap!
                                         set-syntax-object-expression!
                                         syntax-object-module
                                         syntax-object-wrap
                                         syntax-object-expression
                                         syntax-object?
                                         make-syntax-object
                                         build-lexical-var
                                         build-letrec
                                         build-named-let
                                         build-let
                                         build-sequence
                                         build-data
                                         build-primref
                                         build-primcall
                                         build-lambda-case
                                         build-case-lambda
                                         build-simple-lambda
                                         build-global-definition
                                         build-global-assignment
                                         build-global-reference
                                         analyze-variable
                                         build-lexical-assignment
                                         build-lexical-reference
                                         build-dynlet
                                         build-conditional
                                         build-call
                                         build-void
                                         maybe-name-value!
                                         decorate-source
                                         get-global-definition-hook
                                         put-global-definition-hook
                                         gensym-hook
                                         local-eval-hook
                                         top-level-eval-hook
                                         fx<
                                         fx=
                                         fx-
                                         fx+
                                         set-lambda-meta!
                                         lambda-meta
                                         lambda?
                                         make-dynlet
                                         make-letrec
                                         make-let
                                         make-lambda-case
                                         make-lambda
                                         make-seq
                                         make-primcall
                                         make-call
                                         make-conditional
                                         make-toplevel-define
                                         make-toplevel-set
                                         make-toplevel-ref
                                         make-module-set
                                         make-module-ref
                                         make-lexical-set
                                         make-lexical-ref
                                         make-primitive-ref
                                         make-const
                                         make-void)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i471"
                                        "i469"
                                        "i467"
                                        "i465"
                                        "i463"
                                        "i461"
                                        "i459"
                                        "i457"
                                        "i455"
                                        "i453"
                                        "i451"
                                        "i449"
                                        "i447"
                                        "i445"
                                        "i443"
                                        "i441"
                                        "i439"
                                        "i437"
                                        "i435"
                                        "i433"
                                        "i431"
                                        "i429"
                                        "i427"
                                        "i425"
                                        "i423"
                                        "i421"
                                        "i419"
                                        "i417"
                                        "i415"
                                        "i413"
                                        "i411"
                                        "i409"
                                        "i407"
                                        "i405"
                                        "i403"
                                        "i402"
                                        "i400"
                                        "i397"
                                        "i396"
                                        "i395"
                                        "i393"
                                        "i392"
                                        "i390"
                                        "i388"
                                        "i386"
                                        "i384"
                                        "i382"
                                        "i380"
                                        "i378"
                                        "i376"
                                        "i373"
                                        "i371"
                                        "i370"
                                        "i368"
                                        "i366"
                                        "i364"
                                        "i362"
                                        "i361"
                                        "i360"
                                        "i359"
                                        "i357"
                                        "i356"
                                        "i353"
                                        "i351"
                                        "i349"
                                        "i347"
                                        "i345"
                                        "i343"
                                        "i341"
                                        "i340"
                                        "i339"
                                        "i337"
                                        "i335"
                                        "i334"
                                        "i331"
                                        "i330"
                                        "i328"
                                        "i326"
                                        "i324"
                                        "i322"
                                        "i320"
                                        "i318"
                                        "i316"
                                        "i314"
                                        "i312"
                                        "i309"
                                        "i307"
                                        "i305"
                                        "i303"
                                        "i301"
                                        "i299"
                                        "i297"
                                        "i295"
                                        "i293"
                                        "i291"
                                        "i289"
                                        "i287"
                                        "i285"
                                        "i283"
                                        "i281"
                                        "i279"
                                        "i277"
                                        "i275"
                                        "i273"
                                        "i271"
                                        "i269"
                                        "i267"
                                        "i265"
                                        "i263"
                                        "i262"
                                        "i259"
                                        "i257"
                                        "i256"
                                        "i255"
                                        "i254"
                                        "i253"
                                        "i251"
                                        "i249"
                                        "i247"
                                        "i244"
                                        "i242"
                                        "i240"
                                        "i238"
                                        "i236"
                                        "i234"
                                        "i232"
                                        "i230"
                                        "i228"
                                        "i226"
                                        "i224"
                                        "i222"
                                        "i220"
                                        "i218"
                                        "i216"
                                        "i214"
                                        "i212"
                                        "i210"
                                        "i208"))
                                     #(ribcage
                                       (define-structure
                                         define-expansion-accessors
                                         define-expansion-constructors)
                                       ((top) (top) (top))
                                       ("i46" "i45" "i44")))
                                    (hygiene guile)))
                             (#{chi 4373}#
                               #{exp 15023}#
                               #{r 14993}#
                               '(())
                               #{mod 14994}#)
                             (let ((#{labels 15136}#
                                     (list (symbol->string (gensym "i"))))
                                   (#{var 15137}#
                                     (let ((#{id 15175}#
                                             (if (if (vector? #{pat 15022}#)
                                                   (if (= (vector-length
                                                            #{pat 15022}#)
                                                          4)
                                                     (eq? (vector-ref
                                                            #{pat 15022}#
                                                            0)
                                                          'syntax-object)
                                                     #f)
                                                   #f)
                                               (vector-ref #{pat 15022}# 1)
                                               #{pat 15022}#)))
                                       (gensym
                                         (string-append
                                           (symbol->string #{id 15175}#)
                                           " ")))))
                               (#{build-call 4307}#
                                 #f
                                 (#{build-simple-lambda 4316}#
                                   #f
                                   (list (syntax->datum #{pat 15022}#))
                                   #f
                                   (list #{var 15137}#)
                                   '()
                                   (#{chi 4373}#
                                     #{exp 15023}#
                                     (#{extend-env 4335}#
                                       #{labels 15136}#
                                       (list (cons 'syntax
                                                   (cons #{var 15137}# 0)))
                                       #{r 14993}#)
                                     (#{make-binding-wrap 4355}#
                                       (list #{pat 15022}#)
                                       #{labels 15136}#
                                       '(()))
                                     #{mod 14994}#))
                                 (list #{x 14990}#))))
                           (#{gen-clause 14245}#
                             #{x 14990}#
                             #{keys 14991}#
                             (cdr #{clauses 14992}#)
                             #{r 14993}#
                             #{pat 15022}#
                             #t
                             #{exp 15023}#
                             #{mod 14994}#)))
                       #{tmp 15020}#)
                     (let ((#{tmp 15485}#
                             ($sc-dispatch #{tmp 15019}# '(any any any))))
                       (if #{tmp 15485}#
                         (@apply
                           (lambda (#{pat 15487}#
                                    #{fender 15488}#
                                    #{exp 15489}#)
                             (#{gen-clause 14245}#
                               #{x 14990}#
                               #{keys 14991}#
                               (cdr #{clauses 14992}#)
                               #{r 14993}#
                               #{pat 15487}#
                               #{fender 15488}#
                               #{exp 15489}#
                               #{mod 14994}#))
                           #{tmp 15485}#)
                         (syntax-violation
                           'syntax-case
                           "invalid clause"
                           (car #{clauses 14992}#)))))))))))
        (lambda (#{e 14247}#
                 #{r 14248}#
                 #{w 14249}#
                 #{s 14250}#
                 #{mod 14251}#)
          (let ((#{e 14252}#
                  (let ((#{x 14901}#
                          (begin
                            (if (if (pair? #{e 14247}#) #{s 14250}# #f)
                              (set-source-properties! #{e 14247}# #{s 14250}#))
                            #{e 14247}#)))
                    (if (if (null? (car #{w 14249}#))
                          (null? (cdr #{w 14249}#))
                          #f)
                      #{x 14901}#
                      (if (if (vector? #{x 14901}#)
                            (if (= (vector-length #{x 14901}#) 4)
                              (eq? (vector-ref #{x 14901}# 0) 'syntax-object)
                              #f)
                            #f)
                        (let ((#{expression 14933}# (vector-ref #{x 14901}# 1))
                              (#{wrap 14934}#
                                (let ((#{w2 14942}#
                                        (vector-ref #{x 14901}# 2)))
                                  (let ((#{m1 14943}# (car #{w 14249}#))
                                        (#{s1 14944}# (cdr #{w 14249}#)))
                                    (if (null? #{m1 14943}#)
                                      (if (null? #{s1 14944}#)
                                        #{w2 14942}#
                                        (cons (car #{w2 14942}#)
                                              (let ((#{m2 14959}#
                                                      (cdr #{w2 14942}#)))
                                                (if (null? #{m2 14959}#)
                                                  #{s1 14944}#
                                                  (append
                                                    #{s1 14944}#
                                                    #{m2 14959}#)))))
                                      (cons (let ((#{m2 14967}#
                                                    (car #{w2 14942}#)))
                                              (if (null? #{m2 14967}#)
                                                #{m1 14943}#
                                                (append
                                                  #{m1 14943}#
                                                  #{m2 14967}#)))
                                            (let ((#{m2 14975}#
                                                    (cdr #{w2 14942}#)))
                                              (if (null? #{m2 14975}#)
                                                #{s1 14944}#
                                                (append
                                                  #{s1 14944}#
                                                  #{m2 14975}#))))))))
                              (#{module 14935}# (vector-ref #{x 14901}# 3)))
                          (vector
                            'syntax-object
                            #{expression 14933}#
                            #{wrap 14934}#
                            #{module 14935}#))
                        (if (null? #{x 14901}#)
                          #{x 14901}#
                          (vector
                            'syntax-object
                            #{x 14901}#
                            #{w 14249}#
                            #{mod 14251}#)))))))
            (let ((#{tmp 14253}# #{e 14252}#))
              (let ((#{tmp 14254}#
                      ($sc-dispatch
                        #{tmp 14253}#
                        '(_ any each-any . each-any))))
                (if #{tmp 14254}#
                  (@apply
                    (lambda (#{val 14306}# #{key 14307}# #{m 14308}#)
                      (if (and-map
                            (lambda (#{x 14309}#)
                              (if (if (symbol? #{x 14309}#)
                                    #t
                                    (if (if (vector? #{x 14309}#)
                                          (if (= (vector-length #{x 14309}#) 4)
                                            (eq? (vector-ref #{x 14309}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref #{x 14309}# 1))
                                      #f))
                                (not (if (if (if (vector? #{x 14309}#)
                                               (if (= (vector-length
                                                        #{x 14309}#)
                                                      4)
                                                 (eq? (vector-ref
                                                        #{x 14309}#
                                                        0)
                                                      'syntax-object)
                                                 #f)
                                               #f)
                                           (symbol? (vector-ref #{x 14309}# 1))
                                           #f)
                                       (#{free-id=? 4361}#
                                         #{x 14309}#
                                         '#(syntax-object
                                            ...
                                            ((top)
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i2261"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 chi-lambda-case
                                                 lambda*-formals
                                                 chi-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 chi-void
                                                 eval-local-transformer
                                                 chi-local-syntax
                                                 chi-body
                                                 chi-macro
                                                 chi-call
                                                 chi-expr
                                                 chi
                                                 syntax-type
                                                 chi-when-list
                                                 chi-install-global
                                                 chi-top-sequence
                                                 chi-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-primcall
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-call
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-seq
                                                 make-primcall
                                                 make-call
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i471"
                                                "i469"
                                                "i467"
                                                "i465"
                                                "i463"
                                                "i461"
                                                "i459"
                                                "i457"
                                                "i455"
                                                "i453"
                                                "i451"
                                                "i449"
                                                "i447"
                                                "i445"
                                                "i443"
                                                "i441"
                                                "i439"
                                                "i437"
                                                "i435"
                                                "i433"
                                                "i431"
                                                "i429"
                                                "i427"
                                                "i425"
                                                "i423"
                                                "i421"
                                                "i419"
                                                "i417"
                                                "i415"
                                                "i413"
                                                "i411"
                                                "i409"
                                                "i407"
                                                "i405"
                                                "i403"
                                                "i402"
                                                "i400"
                                                "i397"
                                                "i396"
                                                "i395"
                                                "i393"
                                                "i392"
                                                "i390"
                                                "i388"
                                                "i386"
                                                "i384"
                                                "i382"
                                                "i380"
                                                "i378"
                                                "i376"
                                                "i373"
                                                "i371"
                                                "i370"
                                                "i368"
                                                "i366"
                                                "i364"
                                                "i362"
                                                "i361"
                                                "i360"
                                                "i359"
                                                "i357"
                                                "i356"
                                                "i353"
                                                "i351"
                                                "i349"
                                                "i347"
                                                "i345"
                                                "i343"
                                                "i341"
                                                "i340"
                                                "i339"
                                                "i337"
                                                "i335"
                                                "i334"
                                                "i331"
                                                "i330"
                                                "i328"
                                                "i326"
                                                "i324"
                                                "i322"
                                                "i320"
                                                "i318"
                                                "i316"
                                                "i314"
                                                "i312"
                                                "i309"
                                                "i307"
                                                "i305"
                                                "i303"
                                                "i301"
                                                "i299"
                                                "i297"
                                                "i295"
                                                "i293"
                                                "i291"
                                                "i289"
                                                "i287"
                                                "i285"
                                                "i283"
                                                "i281"
                                                "i279"
                                                "i277"
                                                "i275"
                                                "i273"
                                                "i271"
                                                "i269"
                                                "i267"
                                                "i265"
                                                "i263"
                                                "i262"
                                                "i259"
                                                "i257"
                                                "i256"
                                                "i255"
                                                "i254"
                                                "i253"
                                                "i251"
                                                "i249"
                                                "i247"
                                                "i244"
                                                "i242"
                                                "i240"
                                                "i238"
                                                "i236"
                                                "i234"
                                                "i232"
                                                "i230"
                                                "i228"
                                                "i226"
                                                "i224"
                                                "i222"
                                                "i220"
                                                "i218"
                                                "i216"
                                                "i214"
                                                "i212"
                                                "i210"
                                                "i208"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("i46" "i45" "i44")))
                                            (hygiene guile)))
                                       #f))
                                #f))
                            #{key 14307}#)
                        (let ((#{x 14374}#
                                (gensym
                                  (string-append (symbol->string 'tmp) " "))))
                          (#{build-call 4307}#
                            #{s 14250}#
                            (let ((#{req 14516}# (list 'tmp))
                                  (#{vars 14518}# (list #{x 14374}#))
                                  (#{exp 14520}#
                                    (#{gen-syntax-case 14246}#
                                      (make-struct/no-tail
                                        (vector-ref %expanded-vtables 3)
                                        #f
                                        'tmp
                                        #{x 14374}#)
                                      #{key 14307}#
                                      #{m 14308}#
                                      #{r 14248}#
                                      #{mod 14251}#)))
                              (let ((#{body 14525}#
                                      (make-struct/no-tail
                                        (vector-ref %expanded-vtables 15)
                                        #f
                                        #{req 14516}#
                                        #f
                                        #f
                                        #f
                                        '()
                                        #{vars 14518}#
                                        #{exp 14520}#
                                        #f)))
                                (make-struct/no-tail
                                  (vector-ref %expanded-vtables 14)
                                  #f
                                  '()
                                  #{body 14525}#)))
                            (list (#{chi 4373}#
                                    #{val 14306}#
                                    #{r 14248}#
                                    '(())
                                    #{mod 14251}#))))
                        (syntax-violation
                          'syntax-case
                          "invalid literals list"
                          #{e 14252}#)))
                    #{tmp 14254}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{tmp 14253}#))))))))
    (set! macroexpand
      (lambda*
        (#{x 17257}#
          #:optional
          (#{m 17258}# 'e)
          (#{esew 17259}# '(eval)))
        (#{chi-top-sequence 4369}#
          (list #{x 17257}#)
          '()
          '((top))
          #f
          #{m 17258}#
          #{esew 17259}#
          (cons 'hygiene (module-name (current-module))))))
    (set! identifier?
      (lambda (#{x 17262}#)
        (if (if (vector? #{x 17262}#)
              (if (= (vector-length #{x 17262}#) 4)
                (eq? (vector-ref #{x 17262}# 0) 'syntax-object)
                #f)
              #f)
          (symbol? (vector-ref #{x 17262}# 1))
          #f)))
    (set! datum->syntax
      (lambda (#{id 17287}# #{datum 17288}#)
        (let ((#{wrap 17293}# (vector-ref #{id 17287}# 2))
              (#{module 17294}# (vector-ref #{id 17287}# 3)))
          (vector
            'syntax-object
            #{datum 17288}#
            #{wrap 17293}#
            #{module 17294}#))))
    (set! syntax->datum
      (lambda (#{x 17301}#)
        (#{strip 4386}# #{x 17301}# '(()))))
    (set! syntax-source
      (lambda (#{x 17304}#)
        (#{source-annotation 4334}# #{x 17304}#)))
    (set! generate-temporaries
      (lambda (#{ls 17506}#)
        (begin
          (if (not (list? #{ls 17506}#))
            (syntax-violation
              'generate-temporaries
              "invalid argument"
              #{ls 17506}#))
          (let ((#{mod 17514}#
                  (cons 'hygiene (module-name (current-module)))))
            (map (lambda (#{x 17515}#)
                   (let ((#{x 17519}# (gensym)))
                     (if (if (vector? #{x 17519}#)
                           (if (= (vector-length #{x 17519}#) 4)
                             (eq? (vector-ref #{x 17519}# 0) 'syntax-object)
                             #f)
                           #f)
                       (let ((#{expression 17534}# (vector-ref #{x 17519}# 1))
                             (#{wrap 17535}#
                               (let ((#{w2 17543}# (vector-ref #{x 17519}# 2)))
                                 (cons (let ((#{m2 17550}# (car #{w2 17543}#)))
                                         (if (null? #{m2 17550}#)
                                           '(top)
                                           (append '(top) #{m2 17550}#)))
                                       (let ((#{m2 17557}# (cdr #{w2 17543}#)))
                                         (if (null? #{m2 17557}#)
                                           '()
                                           (append '() #{m2 17557}#))))))
                             (#{module 17536}# (vector-ref #{x 17519}# 3)))
                         (vector
                           'syntax-object
                           #{expression 17534}#
                           #{wrap 17535}#
                           #{module 17536}#))
                       (if (null? #{x 17519}#)
                         #{x 17519}#
                         (vector
                           'syntax-object
                           #{x 17519}#
                           '((top))
                           #{mod 17514}#)))))
                 #{ls 17506}#)))))
    (set! free-identifier=?
      (lambda (#{x 17566}# #{y 17567}#)
        (begin
          (if (not (if (if (vector? #{x 17566}#)
                         (if (= (vector-length #{x 17566}#) 4)
                           (eq? (vector-ref #{x 17566}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{x 17566}# 1))
                     #f))
            (syntax-violation
              'free-identifier=?
              "invalid argument"
              #{x 17566}#))
          (if (not (if (if (vector? #{y 17567}#)
                         (if (= (vector-length #{y 17567}#) 4)
                           (eq? (vector-ref #{y 17567}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{y 17567}# 1))
                     #f))
            (syntax-violation
              'free-identifier=?
              "invalid argument"
              #{y 17567}#))
          (#{free-id=? 4361}# #{x 17566}# #{y 17567}#))))
    (set! bound-identifier=?
      (lambda (#{x 17642}# #{y 17643}#)
        (begin
          (if (not (if (if (vector? #{x 17642}#)
                         (if (= (vector-length #{x 17642}#) 4)
                           (eq? (vector-ref #{x 17642}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{x 17642}# 1))
                     #f))
            (syntax-violation
              'bound-identifier=?
              "invalid argument"
              #{x 17642}#))
          (if (not (if (if (vector? #{y 17643}#)
                         (if (= (vector-length #{y 17643}#) 4)
                           (eq? (vector-ref #{y 17643}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{y 17643}# 1))
                     #f))
            (syntax-violation
              'bound-identifier=?
              "invalid argument"
              #{y 17643}#))
          (#{bound-id=? 4362}# #{x 17642}# #{y 17643}#))))
    (set! syntax-violation
      (lambda*
        (#{who 17809}#
          #{message 17810}#
          #{form 17811}#
          #:optional
          (#{subform 17812}# #f))
        (begin
          (if (not (if (not #{who 17809}#)
                     (not #{who 17809}#)
                     (let ((#{t 17830}# (string? #{who 17809}#)))
                       (if #{t 17830}#
                         #{t 17830}#
                         (symbol? #{who 17809}#)))))
            (syntax-violation
              'syntax-violation
              "invalid argument"
              #{who 17809}#))
          (if (not (string? #{message 17810}#))
            (syntax-violation
              'syntax-violation
              "invalid argument"
              #{message 17810}#))
          (throw 'syntax-error
                 #{who 17809}#
                 #{message 17810}#
                 (#{source-annotation 4334}#
                   (if #{form 17811}#
                     #{form 17811}#
                     #{subform 17812}#))
                 (#{strip 4386}# #{form 17811}# '(()))
                 (if #{subform 17812}#
                   (#{strip 4386}# #{subform 17812}# '(()))
                   #f)))))
    (letrec*
      ((#{match-each 18081}#
         (lambda (#{e 18969}#
                  #{p 18970}#
                  #{w 18971}#
                  #{mod 18972}#)
           (if (pair? #{e 18969}#)
             (let ((#{first 18973}#
                     (#{match 18087}#
                       (car #{e 18969}#)
                       #{p 18970}#
                       #{w 18971}#
                       '()
                       #{mod 18972}#)))
               (if #{first 18973}#
                 (let ((#{rest 18976}#
                         (#{match-each 18081}#
                           (cdr #{e 18969}#)
                           #{p 18970}#
                           #{w 18971}#
                           #{mod 18972}#)))
                   (if #{rest 18976}#
                     (cons #{first 18973}# #{rest 18976}#)
                     #f))
                 #f))
             (if (null? #{e 18969}#)
               '()
               (if (if (vector? #{e 18969}#)
                     (if (= (vector-length #{e 18969}#) 4)
                       (eq? (vector-ref #{e 18969}# 0) 'syntax-object)
                       #f)
                     #f)
                 (#{match-each 18081}#
                   (vector-ref #{e 18969}# 1)
                   #{p 18970}#
                   (let ((#{w2 18998}# (vector-ref #{e 18969}# 2)))
                     (let ((#{m1 18999}# (car #{w 18971}#))
                           (#{s1 19000}# (cdr #{w 18971}#)))
                       (if (null? #{m1 18999}#)
                         (if (null? #{s1 19000}#)
                           #{w2 18998}#
                           (cons (car #{w2 18998}#)
                                 (let ((#{m2 19011}# (cdr #{w2 18998}#)))
                                   (if (null? #{m2 19011}#)
                                     #{s1 19000}#
                                     (append #{s1 19000}# #{m2 19011}#)))))
                         (cons (let ((#{m2 19019}# (car #{w2 18998}#)))
                                 (if (null? #{m2 19019}#)
                                   #{m1 18999}#
                                   (append #{m1 18999}# #{m2 19019}#)))
                               (let ((#{m2 19027}# (cdr #{w2 18998}#)))
                                 (if (null? #{m2 19027}#)
                                   #{s1 19000}#
                                   (append #{s1 19000}# #{m2 19027}#)))))))
                   (vector-ref #{e 18969}# 3))
                 #f)))))
       (#{match-each-any 18083}#
         (lambda (#{e 19036}# #{w 19037}# #{mod 19038}#)
           (if (pair? #{e 19036}#)
             (let ((#{l 19039}#
                     (#{match-each-any 18083}#
                       (cdr #{e 19036}#)
                       #{w 19037}#
                       #{mod 19038}#)))
               (if #{l 19039}#
                 (cons (let ((#{x 19044}# (car #{e 19036}#)))
                         (if (if (null? (car #{w 19037}#))
                               (null? (cdr #{w 19037}#))
                               #f)
                           #{x 19044}#
                           (if (if (vector? #{x 19044}#)
                                 (if (= (vector-length #{x 19044}#) 4)
                                   (eq? (vector-ref #{x 19044}# 0)
                                        'syntax-object)
                                   #f)
                                 #f)
                             (let ((#{expression 19062}#
                                     (vector-ref #{x 19044}# 1))
                                   (#{wrap 19063}#
                                     (let ((#{w2 19071}#
                                             (vector-ref #{x 19044}# 2)))
                                       (let ((#{m1 19072}# (car #{w 19037}#))
                                             (#{s1 19073}# (cdr #{w 19037}#)))
                                         (if (null? #{m1 19072}#)
                                           (if (null? #{s1 19073}#)
                                             #{w2 19071}#
                                             (cons (car #{w2 19071}#)
                                                   (let ((#{m2 19088}#
                                                           (cdr #{w2 19071}#)))
                                                     (if (null? #{m2 19088}#)
                                                       #{s1 19073}#
                                                       (append
                                                         #{s1 19073}#
                                                         #{m2 19088}#)))))
                                           (cons (let ((#{m2 19096}#
                                                         (car #{w2 19071}#)))
                                                   (if (null? #{m2 19096}#)
                                                     #{m1 19072}#
                                                     (append
                                                       #{m1 19072}#
                                                       #{m2 19096}#)))
                                                 (let ((#{m2 19104}#
                                                         (cdr #{w2 19071}#)))
                                                   (if (null? #{m2 19104}#)
                                                     #{s1 19073}#
                                                     (append
                                                       #{s1 19073}#
                                                       #{m2 19104}#))))))))
                                   (#{module 19064}#
                                     (vector-ref #{x 19044}# 3)))
                               (vector
                                 'syntax-object
                                 #{expression 19062}#
                                 #{wrap 19063}#
                                 #{module 19064}#))
                             (if (null? #{x 19044}#)
                               #{x 19044}#
                               (vector
                                 'syntax-object
                                 #{x 19044}#
                                 #{w 19037}#
                                 #{mod 19038}#)))))
                       #{l 19039}#)
                 #f))
             (if (null? #{e 19036}#)
               '()
               (if (if (vector? #{e 19036}#)
                     (if (= (vector-length #{e 19036}#) 4)
                       (eq? (vector-ref #{e 19036}# 0) 'syntax-object)
                       #f)
                     #f)
                 (#{match-each-any 18083}#
                   (vector-ref #{e 19036}# 1)
                   (let ((#{w2 19137}# (vector-ref #{e 19036}# 2)))
                     (let ((#{m1 19138}# (car #{w 19037}#))
                           (#{s1 19139}# (cdr #{w 19037}#)))
                       (if (null? #{m1 19138}#)
                         (if (null? #{s1 19139}#)
                           #{w2 19137}#
                           (cons (car #{w2 19137}#)
                                 (let ((#{m2 19150}# (cdr #{w2 19137}#)))
                                   (if (null? #{m2 19150}#)
                                     #{s1 19139}#
                                     (append #{s1 19139}# #{m2 19150}#)))))
                         (cons (let ((#{m2 19158}# (car #{w2 19137}#)))
                                 (if (null? #{m2 19158}#)
                                   #{m1 19138}#
                                   (append #{m1 19138}# #{m2 19158}#)))
                               (let ((#{m2 19166}# (cdr #{w2 19137}#)))
                                 (if (null? #{m2 19166}#)
                                   #{s1 19139}#
                                   (append #{s1 19139}# #{m2 19166}#)))))))
                   #{mod 19038}#)
                 #f)))))
       (#{match-empty 18084}#
         (lambda (#{p 19171}# #{r 19172}#)
           (if (null? #{p 19171}#)
             #{r 19172}#
             (if (eq? #{p 19171}# '_)
               #{r 19172}#
               (if (eq? #{p 19171}# 'any)
                 (cons '() #{r 19172}#)
                 (if (pair? #{p 19171}#)
                   (#{match-empty 18084}#
                     (car #{p 19171}#)
                     (#{match-empty 18084}#
                       (cdr #{p 19171}#)
                       #{r 19172}#))
                   (if (eq? #{p 19171}# 'each-any)
                     (cons '() #{r 19172}#)
                     (let ((#{atom-key 19173}# (vector-ref #{p 19171}# 0)))
                       (if (eqv? #{atom-key 19173}# 'each)
                         (#{match-empty 18084}#
                           (vector-ref #{p 19171}# 1)
                           #{r 19172}#)
                         (if (eqv? #{atom-key 19173}# 'each+)
                           (#{match-empty 18084}#
                             (vector-ref #{p 19171}# 1)
                             (#{match-empty 18084}#
                               (reverse (vector-ref #{p 19171}# 2))
                               (#{match-empty 18084}#
                                 (vector-ref #{p 19171}# 3)
                                 #{r 19172}#)))
                           (if (if (eqv? #{atom-key 19173}# 'free-id)
                                 #t
                                 (eqv? #{atom-key 19173}# 'atom))
                             #{r 19172}#
                             (if (eqv? #{atom-key 19173}# 'vector)
                               (#{match-empty 18084}#
                                 (vector-ref #{p 19171}# 1)
                                 #{r 19172}#)))))))))))))
       (#{combine 18085}#
         (lambda (#{r* 19192}# #{r 19193}#)
           (if (null? (car #{r* 19192}#))
             #{r 19193}#
             (cons (map car #{r* 19192}#)
                   (#{combine 18085}#
                     (map cdr #{r* 19192}#)
                     #{r 19193}#)))))
       (#{match* 18086}#
         (lambda (#{e 18116}#
                  #{p 18117}#
                  #{w 18118}#
                  #{r 18119}#
                  #{mod 18120}#)
           (if (null? #{p 18117}#)
             (if (null? #{e 18116}#) #{r 18119}# #f)
             (if (pair? #{p 18117}#)
               (if (pair? #{e 18116}#)
                 (#{match 18087}#
                   (car #{e 18116}#)
                   (car #{p 18117}#)
                   #{w 18118}#
                   (#{match 18087}#
                     (cdr #{e 18116}#)
                     (cdr #{p 18117}#)
                     #{w 18118}#
                     #{r 18119}#
                     #{mod 18120}#)
                   #{mod 18120}#)
                 #f)
               (if (eq? #{p 18117}# 'each-any)
                 (let ((#{l 18125}#
                         (#{match-each-any 18083}#
                           #{e 18116}#
                           #{w 18118}#
                           #{mod 18120}#)))
                   (if #{l 18125}#
                     (cons #{l 18125}# #{r 18119}#)
                     #f))
                 (let ((#{atom-key 18130}# (vector-ref #{p 18117}# 0)))
                   (if (eqv? #{atom-key 18130}# 'each)
                     (if (null? #{e 18116}#)
                       (#{match-empty 18084}#
                         (vector-ref #{p 18117}# 1)
                         #{r 18119}#)
                       (let ((#{l 18137}#
                               (#{match-each 18081}#
                                 #{e 18116}#
                                 (vector-ref #{p 18117}# 1)
                                 #{w 18118}#
                                 #{mod 18120}#)))
                         (if #{l 18137}#
                           (letrec*
                             ((#{collect 18140}#
                                (lambda (#{l 18201}#)
                                  (if (null? (car #{l 18201}#))
                                    #{r 18119}#
                                    (cons (map car #{l 18201}#)
                                          (#{collect 18140}#
                                            (map cdr #{l 18201}#)))))))
                             (#{collect 18140}# #{l 18137}#))
                           #f)))
                     (if (eqv? #{atom-key 18130}# 'each+)
                       (call-with-values
                         (lambda ()
                           (let ((#{x-pat 18210}# (vector-ref #{p 18117}# 1))
                                 (#{y-pat 18211}# (vector-ref #{p 18117}# 2))
                                 (#{z-pat 18212}# (vector-ref #{p 18117}# 3)))
                             (letrec*
                               ((#{f 18216}#
                                  (lambda (#{e 18218}# #{w 18219}#)
                                    (if (pair? #{e 18218}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{f 18216}#
                                            (cdr #{e 18218}#)
                                            #{w 18219}#))
                                        (lambda (#{xr* 18220}#
                                                 #{y-pat 18221}#
                                                 #{r 18222}#)
                                          (if #{r 18222}#
                                            (if (null? #{y-pat 18221}#)
                                              (let ((#{xr 18223}#
                                                      (#{match 18087}#
                                                        (car #{e 18218}#)
                                                        #{x-pat 18210}#
                                                        #{w 18219}#
                                                        '()
                                                        #{mod 18120}#)))
                                                (if #{xr 18223}#
                                                  (values
                                                    (cons #{xr 18223}#
                                                          #{xr* 18220}#)
                                                    #{y-pat 18221}#
                                                    #{r 18222}#)
                                                  (values #f #f #f)))
                                              (values
                                                '()
                                                (cdr #{y-pat 18221}#)
                                                (#{match 18087}#
                                                  (car #{e 18218}#)
                                                  (car #{y-pat 18221}#)
                                                  #{w 18219}#
                                                  #{r 18222}#
                                                  #{mod 18120}#)))
                                            (values #f #f #f))))
                                      (if (if (vector? #{e 18218}#)
                                            (if (= (vector-length #{e 18218}#)
                                                   4)
                                              (eq? (vector-ref #{e 18218}# 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (#{f 18216}#
                                          (vector-ref #{e 18218}# 1)
                                          (let ((#{m1 18251}#
                                                  (car #{w 18219}#))
                                                (#{s1 18252}#
                                                  (cdr #{w 18219}#)))
                                            (if (null? #{m1 18251}#)
                                              (if (null? #{s1 18252}#)
                                                #{e 18218}#
                                                (cons (car #{e 18218}#)
                                                      (let ((#{m2 18264}#
                                                              (cdr #{e 18218}#)))
                                                        (if (null? #{m2 18264}#)
                                                          #{s1 18252}#
                                                          (append
                                                            #{s1 18252}#
                                                            #{m2 18264}#)))))
                                              (cons (let ((#{m2 18274}#
                                                            (car #{e 18218}#)))
                                                      (if (null? #{m2 18274}#)
                                                        #{m1 18251}#
                                                        (append
                                                          #{m1 18251}#
                                                          #{m2 18274}#)))
                                                    (let ((#{m2 18284}#
                                                            (cdr #{e 18218}#)))
                                                      (if (null? #{m2 18284}#)
                                                        #{s1 18252}#
                                                        (append
                                                          #{s1 18252}#
                                                          #{m2 18284}#)))))))
                                        (values
                                          '()
                                          #{y-pat 18211}#
                                          (#{match 18087}#
                                            #{e 18218}#
                                            #{z-pat 18212}#
                                            #{w 18219}#
                                            #{r 18119}#
                                            #{mod 18120}#)))))))
                               (#{f 18216}# #{e 18116}# #{w 18118}#))))
                         (lambda (#{xr* 18294}# #{y-pat 18295}# #{r 18296}#)
                           (if #{r 18296}#
                             (if (null? #{y-pat 18295}#)
                               (if (null? #{xr* 18294}#)
                                 (#{match-empty 18084}#
                                   (vector-ref #{p 18117}# 1)
                                   #{r 18296}#)
                                 (#{combine 18085}# #{xr* 18294}# #{r 18296}#))
                               #f)
                             #f)))
                       (if (eqv? #{atom-key 18130}# 'free-id)
                         (if (if (symbol? #{e 18116}#)
                               #t
                               (if (if (vector? #{e 18116}#)
                                     (if (= (vector-length #{e 18116}#) 4)
                                       (eq? (vector-ref #{e 18116}# 0)
                                            'syntax-object)
                                       #f)
                                     #f)
                                 (symbol? (vector-ref #{e 18116}# 1))
                                 #f))
                           (if (#{free-id=? 4361}#
                                 (if (if (null? (car #{w 18118}#))
                                       (null? (cdr #{w 18118}#))
                                       #f)
                                   #{e 18116}#
                                   (if (if (vector? #{e 18116}#)
                                         (if (= (vector-length #{e 18116}#) 4)
                                           (eq? (vector-ref #{e 18116}# 0)
                                                'syntax-object)
                                           #f)
                                         #f)
                                     (let ((#{expression 18727}#
                                             (vector-ref #{e 18116}# 1))
                                           (#{wrap 18728}#
                                             (let ((#{w2 18738}#
                                                     (vector-ref
                                                       #{e 18116}#
                                                       2)))
                                               (let ((#{m1 18739}#
                                                       (car #{w 18118}#))
                                                     (#{s1 18740}#
                                                       (cdr #{w 18118}#)))
                                                 (if (null? #{m1 18739}#)
                                                   (if (null? #{s1 18740}#)
                                                     #{w2 18738}#
                                                     (cons (car #{w2 18738}#)
                                                           (let ((#{m2 18757}#
                                                                   (cdr #{w2 18738}#)))
                                                             (if (null? #{m2 18757}#)
                                                               #{s1 18740}#
                                                               (append
                                                                 #{s1 18740}#
                                                                 #{m2 18757}#)))))
                                                   (cons (let ((#{m2 18765}#
                                                                 (car #{w2 18738}#)))
                                                           (if (null? #{m2 18765}#)
                                                             #{m1 18739}#
                                                             (append
                                                               #{m1 18739}#
                                                               #{m2 18765}#)))
                                                         (let ((#{m2 18773}#
                                                                 (cdr #{w2 18738}#)))
                                                           (if (null? #{m2 18773}#)
                                                             #{s1 18740}#
                                                             (append
                                                               #{s1 18740}#
                                                               #{m2 18773}#))))))))
                                           (#{module 18729}#
                                             (vector-ref #{e 18116}# 3)))
                                       (vector
                                         'syntax-object
                                         #{expression 18727}#
                                         #{wrap 18728}#
                                         #{module 18729}#))
                                     (if (null? #{e 18116}#)
                                       #{e 18116}#
                                       (vector
                                         'syntax-object
                                         #{e 18116}#
                                         #{w 18118}#
                                         #{mod 18120}#))))
                                 (vector-ref #{p 18117}# 1))
                             #{r 18119}#
                             #f)
                           #f)
                         (if (eqv? #{atom-key 18130}# 'atom)
                           (if (equal?
                                 (vector-ref #{p 18117}# 1)
                                 (#{strip 4386}# #{e 18116}# #{w 18118}#))
                             #{r 18119}#
                             #f)
                           (if (eqv? #{atom-key 18130}# 'vector)
                             (if (vector? #{e 18116}#)
                               (#{match 18087}#
                                 (vector->list #{e 18116}#)
                                 (vector-ref #{p 18117}# 1)
                                 #{w 18118}#
                                 #{r 18119}#
                                 #{mod 18120}#)
                               #f))))))))))))
       (#{match 18087}#
         (lambda (#{e 18806}#
                  #{p 18807}#
                  #{w 18808}#
                  #{r 18809}#
                  #{mod 18810}#)
           (if (not #{r 18809}#)
             #f
             (if (eq? #{p 18807}# '_)
               #{r 18809}#
               (if (eq? #{p 18807}# 'any)
                 (cons (if (if (null? (car #{w 18808}#))
                             (null? (cdr #{w 18808}#))
                             #f)
                         #{e 18806}#
                         (if (if (vector? #{e 18806}#)
                               (if (= (vector-length #{e 18806}#) 4)
                                 (eq? (vector-ref #{e 18806}# 0)
                                      'syntax-object)
                                 #f)
                               #f)
                           (let ((#{expression 18840}#
                                   (vector-ref #{e 18806}# 1))
                                 (#{wrap 18841}#
                                   (let ((#{w2 18851}#
                                           (vector-ref #{e 18806}# 2)))
                                     (let ((#{m1 18852}# (car #{w 18808}#))
                                           (#{s1 18853}# (cdr #{w 18808}#)))
                                       (if (null? #{m1 18852}#)
                                         (if (null? #{s1 18853}#)
                                           #{w2 18851}#
                                           (cons (car #{w2 18851}#)
                                                 (let ((#{m2 18870}#
                                                         (cdr #{w2 18851}#)))
                                                   (if (null? #{m2 18870}#)
                                                     #{s1 18853}#
                                                     (append
                                                       #{s1 18853}#
                                                       #{m2 18870}#)))))
                                         (cons (let ((#{m2 18878}#
                                                       (car #{w2 18851}#)))
                                                 (if (null? #{m2 18878}#)
                                                   #{m1 18852}#
                                                   (append
                                                     #{m1 18852}#
                                                     #{m2 18878}#)))
                                               (let ((#{m2 18886}#
                                                       (cdr #{w2 18851}#)))
                                                 (if (null? #{m2 18886}#)
                                                   #{s1 18853}#
                                                   (append
                                                     #{s1 18853}#
                                                     #{m2 18886}#))))))))
                                 (#{module 18842}# (vector-ref #{e 18806}# 3)))
                             (vector
                               'syntax-object
                               #{expression 18840}#
                               #{wrap 18841}#
                               #{module 18842}#))
                           (if (null? #{e 18806}#)
                             #{e 18806}#
                             (vector
                               'syntax-object
                               #{e 18806}#
                               #{w 18808}#
                               #{mod 18810}#))))
                       #{r 18809}#)
                 (if (if (vector? #{e 18806}#)
                       (if (= (vector-length #{e 18806}#) 4)
                         (eq? (vector-ref #{e 18806}# 0) 'syntax-object)
                         #f)
                       #f)
                   (#{match* 18086}#
                     (vector-ref #{e 18806}# 1)
                     #{p 18807}#
                     (let ((#{w2 18929}# (vector-ref #{e 18806}# 2)))
                       (let ((#{m1 18930}# (car #{w 18808}#))
                             (#{s1 18931}# (cdr #{w 18808}#)))
                         (if (null? #{m1 18930}#)
                           (if (null? #{s1 18931}#)
                             #{w2 18929}#
                             (cons (car #{w2 18929}#)
                                   (let ((#{m2 18942}# (cdr #{w2 18929}#)))
                                     (if (null? #{m2 18942}#)
                                       #{s1 18931}#
                                       (append #{s1 18931}# #{m2 18942}#)))))
                           (cons (let ((#{m2 18950}# (car #{w2 18929}#)))
                                   (if (null? #{m2 18950}#)
                                     #{m1 18930}#
                                     (append #{m1 18930}# #{m2 18950}#)))
                                 (let ((#{m2 18958}# (cdr #{w2 18929}#)))
                                   (if (null? #{m2 18958}#)
                                     #{s1 18931}#
                                     (append #{s1 18931}# #{m2 18958}#)))))))
                     #{r 18809}#
                     (vector-ref #{e 18806}# 3))
                   (#{match* 18086}#
                     #{e 18806}#
                     #{p 18807}#
                     #{w 18808}#
                     #{r 18809}#
                     #{mod 18810}#))))))))
      (set! $sc-dispatch
        (lambda (#{e 18088}# #{p 18089}#)
          (if (eq? #{p 18089}# 'any)
            (list #{e 18088}#)
            (if (eq? #{p 18089}# '_)
              '()
              (if (if (vector? #{e 18088}#)
                    (if (= (vector-length #{e 18088}#) 4)
                      (eq? (vector-ref #{e 18088}# 0) 'syntax-object)
                      #f)
                    #f)
                (#{match* 18086}#
                  (vector-ref #{e 18088}# 1)
                  #{p 18089}#
                  (vector-ref #{e 18088}# 2)
                  '()
                  (vector-ref #{e 18088}# 3))
                (#{match* 18086}#
                  #{e 18088}#
                  #{p 18089}#
                  '(())
                  '()
                  #f)))))))))

(define with-syntax
  (make-syntax-transformer
    'with-syntax
    'macro
    (lambda (#{x 37268}#)
      (let ((#{tmp 37270}#
              ($sc-dispatch #{x 37268}# '(_ () any . each-any))))
        (if #{tmp 37270}#
          (@apply
            (lambda (#{e1 37274}# #{e2 37275}#)
              (cons '#(syntax-object
                       let
                       ((top)
                        #(ribcage
                          #(e1 e2)
                          #((top) (top))
                          #("i37241" "i37242"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i37238")))
                       (hygiene guile))
                    (cons '() (cons #{e1 37274}# #{e2 37275}#))))
            #{tmp 37270}#)
          (let ((#{tmp 37276}#
                  ($sc-dispatch
                    #{x 37268}#
                    '(_ ((any any)) any . each-any))))
            (if #{tmp 37276}#
              (@apply
                (lambda (#{out 37280}#
                         #{in 37281}#
                         #{e1 37282}#
                         #{e2 37283}#)
                  (list '#(syntax-object
                           syntax-case
                           ((top)
                            #(ribcage
                              #(out in e1 e2)
                              #((top) (top) (top) (top))
                              #("i37247" "i37248" "i37249" "i37250"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i37238")))
                           (hygiene guile))
                        #{in 37281}#
                        '()
                        (list #{out 37280}#
                              (cons '#(syntax-object
                                       let
                                       ((top)
                                        #(ribcage
                                          #(out in e1 e2)
                                          #((top) (top) (top) (top))
                                          #("i37247"
                                            "i37248"
                                            "i37249"
                                            "i37250"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i37238")))
                                       (hygiene guile))
                                    (cons '()
                                          (cons #{e1 37282}# #{e2 37283}#))))))
                #{tmp 37276}#)
              (let ((#{tmp 37284}#
                      ($sc-dispatch
                        #{x 37268}#
                        '(_ #(each (any any)) any . each-any))))
                (if #{tmp 37284}#
                  (@apply
                    (lambda (#{out 37288}#
                             #{in 37289}#
                             #{e1 37290}#
                             #{e2 37291}#)
                      (list '#(syntax-object
                               syntax-case
                               ((top)
                                #(ribcage
                                  #(out in e1 e2)
                                  #((top) (top) (top) (top))
                                  #("i37257" "i37258" "i37259" "i37260"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i37238")))
                               (hygiene guile))
                            (cons '#(syntax-object
                                     list
                                     ((top)
                                      #(ribcage
                                        #(out in e1 e2)
                                        #((top) (top) (top) (top))
                                        #("i37257" "i37258" "i37259" "i37260"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i37238")))
                                     (hygiene guile))
                                  #{in 37289}#)
                            '()
                            (list #{out 37288}#
                                  (cons '#(syntax-object
                                           let
                                           ((top)
                                            #(ribcage
                                              #(out in e1 e2)
                                              #((top) (top) (top) (top))
                                              #("i37257"
                                                "i37258"
                                                "i37259"
                                                "i37260"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i37238")))
                                           (hygiene guile))
                                        (cons '()
                                              (cons #{e1 37290}#
                                                    #{e2 37291}#))))))
                    #{tmp 37284}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{x 37268}#))))))))))

(define syntax-rules
  (make-syntax-transformer
    'syntax-rules
    'macro
    (lambda (#{x 37345}#)
      (let ((#{tmp 37347}#
              ($sc-dispatch
                #{x 37345}#
                '(_ each-any . #(each ((any . any) any))))))
        (if #{tmp 37347}#
          (@apply
            (lambda (#{k 37351}#
                     #{keyword 37352}#
                     #{pattern 37353}#
                     #{template 37354}#)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage
                          #(k keyword pattern template)
                          #((top) (top) (top) (top))
                          #("i37308" "i37309" "i37310" "i37311"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i37305")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage
                           #(k keyword pattern template)
                           #((top) (top) (top) (top))
                           #("i37308" "i37309" "i37310" "i37311"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("i37305")))
                        (hygiene guile)))
                    (vector
                      '(#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("i37308" "i37309" "i37310" "i37311"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i37305")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          syntax-rules
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("i37308" "i37309" "i37310" "i37311"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i37305")))
                          (hygiene guile)))
                      (cons '#(syntax-object
                               patterns
                               ((top)
                                #(ribcage
                                  #(k keyword pattern template)
                                  #((top) (top) (top) (top))
                                  #("i37308" "i37309" "i37310" "i37311"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i37305")))
                               (hygiene guile))
                            #{pattern 37353}#))
                    (cons '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage
                                #(k keyword pattern template)
                                #((top) (top) (top) (top))
                                #("i37308" "i37309" "i37310" "i37311"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i37305")))
                             (hygiene guile))
                          (cons '#(syntax-object
                                   x
                                   ((top)
                                    #(ribcage
                                      #(k keyword pattern template)
                                      #((top) (top) (top) (top))
                                      #("i37308" "i37309" "i37310" "i37311"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i37305")))
                                   (hygiene guile))
                                (cons #{k 37351}#
                                      (map (lambda (#{tmp 37319 37355}#
                                                    #{tmp 37318 37356}#)
                                             (list (cons '#(syntax-object
                                                            dummy
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i37308"
                                                                 "i37309"
                                                                 "i37310"
                                                                 "i37311"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i37305")))
                                                            (hygiene guile))
                                                         #{tmp 37318 37356}#)
                                                   (list '#(syntax-object
                                                            syntax
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i37308"
                                                                 "i37309"
                                                                 "i37310"
                                                                 "i37311"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i37305")))
                                                            (hygiene guile))
                                                         #{tmp 37319 37355}#)))
                                           #{template 37354}#
                                           #{pattern 37353}#))))))
            #{tmp 37347}#)
          (let ((#{tmp 37357}#
                  ($sc-dispatch
                    #{x 37345}#
                    '(_ each-any any . #(each ((any . any) any))))))
            (if (if #{tmp 37357}#
                  (@apply
                    (lambda (#{k 37361}#
                             #{docstring 37362}#
                             #{keyword 37363}#
                             #{pattern 37364}#
                             #{template 37365}#)
                      (string? (syntax->datum #{docstring 37362}#)))
                    #{tmp 37357}#)
                  #f)
              (@apply
                (lambda (#{k 37366}#
                         #{docstring 37367}#
                         #{keyword 37368}#
                         #{pattern 37369}#
                         #{template 37370}#)
                  (list '#(syntax-object
                           lambda
                           ((top)
                            #(ribcage
                              #(k docstring keyword pattern template)
                              #((top) (top) (top) (top) (top))
                              #("i37331" "i37332" "i37333" "i37334" "i37335"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i37305")))
                           (hygiene guile))
                        '(#(syntax-object
                            x
                            ((top)
                             #(ribcage
                               #(k docstring keyword pattern template)
                               #((top) (top) (top) (top) (top))
                               #("i37331" "i37332" "i37333" "i37334" "i37335"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i37305")))
                            (hygiene guile)))
                        #{docstring 37367}#
                        (vector
                          '(#(syntax-object
                              macro-type
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("i37331"
                                   "i37332"
                                   "i37333"
                                   "i37334"
                                   "i37335"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i37305")))
                              (hygiene guile))
                            .
                            #(syntax-object
                              syntax-rules
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("i37331"
                                   "i37332"
                                   "i37333"
                                   "i37334"
                                   "i37335"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i37305")))
                              (hygiene guile)))
                          (cons '#(syntax-object
                                   patterns
                                   ((top)
                                    #(ribcage
                                      #(k docstring keyword pattern template)
                                      #((top) (top) (top) (top) (top))
                                      #("i37331"
                                        "i37332"
                                        "i37333"
                                        "i37334"
                                        "i37335"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i37305")))
                                   (hygiene guile))
                                #{pattern 37369}#))
                        (cons '#(syntax-object
                                 syntax-case
                                 ((top)
                                  #(ribcage
                                    #(k docstring keyword pattern template)
                                    #((top) (top) (top) (top) (top))
                                    #("i37331"
                                      "i37332"
                                      "i37333"
                                      "i37334"
                                      "i37335"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i37305")))
                                 (hygiene guile))
                              (cons '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(k
                                            docstring
                                            keyword
                                            pattern
                                            template)
                                          #((top) (top) (top) (top) (top))
                                          #("i37331"
                                            "i37332"
                                            "i37333"
                                            "i37334"
                                            "i37335"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i37305")))
                                       (hygiene guile))
                                    (cons #{k 37366}#
                                          (map (lambda (#{tmp 37344 37371}#
                                                        #{tmp 37343 37372}#)
                                                 (list (cons '#(syntax-object
                                                                dummy
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("i37331"
                                                                     "i37332"
                                                                     "i37333"
                                                                     "i37334"
                                                                     "i37335"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i37305")))
                                                                (hygiene
                                                                  guile))
                                                             #{tmp 37343 37372}#)
                                                       (list '#(syntax-object
                                                                syntax
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("i37331"
                                                                     "i37332"
                                                                     "i37333"
                                                                     "i37334"
                                                                     "i37335"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i37305")))
                                                                (hygiene
                                                                  guile))
                                                             #{tmp 37344 37371}#)))
                                               #{template 37370}#
                                               #{pattern 37369}#))))))
                #{tmp 37357}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 37345}#))))))))

(define define-syntax-rule
  (make-syntax-transformer
    'define-syntax-rule
    'macro
    (lambda (#{x 37409}#)
      (let ((#{tmp 37411}#
              ($sc-dispatch #{x 37409}# '(_ (any . any) any))))
        (if #{tmp 37411}#
          (@apply
            (lambda (#{name 37415}#
                     #{pattern 37416}#
                     #{template 37417}#)
              (list '#(syntax-object
                       define-syntax
                       ((top)
                        #(ribcage
                          #(name pattern template)
                          #((top) (top) (top))
                          #("i37386" "i37387" "i37388"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i37383")))
                       (hygiene guile))
                    #{name 37415}#
                    (list '#(syntax-object
                             syntax-rules
                             ((top)
                              #(ribcage
                                #(name pattern template)
                                #((top) (top) (top))
                                #("i37386" "i37387" "i37388"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i37383")))
                             (hygiene guile))
                          '()
                          (list (cons '#(syntax-object
                                         _
                                         ((top)
                                          #(ribcage
                                            #(name pattern template)
                                            #((top) (top) (top))
                                            #("i37386" "i37387" "i37388"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i37383")))
                                         (hygiene guile))
                                      #{pattern 37416}#)
                                #{template 37417}#))))
            #{tmp 37411}#)
          (let ((#{tmp 37418}#
                  ($sc-dispatch
                    #{x 37409}#
                    '(_ (any . any) any any))))
            (if (if #{tmp 37418}#
                  (@apply
                    (lambda (#{name 37422}#
                             #{pattern 37423}#
                             #{docstring 37424}#
                             #{template 37425}#)
                      (string? (syntax->datum #{docstring 37424}#)))
                    #{tmp 37418}#)
                  #f)
              (@apply
                (lambda (#{name 37426}#
                         #{pattern 37427}#
                         #{docstring 37428}#
                         #{template 37429}#)
                  (list '#(syntax-object
                           define-syntax
                           ((top)
                            #(ribcage
                              #(name pattern docstring template)
                              #((top) (top) (top) (top))
                              #("i37401" "i37402" "i37403" "i37404"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i37383")))
                           (hygiene guile))
                        #{name 37426}#
                        (list '#(syntax-object
                                 syntax-rules
                                 ((top)
                                  #(ribcage
                                    #(name pattern docstring template)
                                    #((top) (top) (top) (top))
                                    #("i37401" "i37402" "i37403" "i37404"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i37383")))
                                 (hygiene guile))
                              '()
                              #{docstring 37428}#
                              (list (cons '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(name
                                                  pattern
                                                  docstring
                                                  template)
                                                #((top) (top) (top) (top))
                                                #("i37401"
                                                  "i37402"
                                                  "i37403"
                                                  "i37404"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("i37383")))
                                             (hygiene guile))
                                          #{pattern 37427}#)
                                    #{template 37429}#))))
                #{tmp 37418}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 37409}#))))))))

(define let*
  (make-syntax-transformer
    'let*
    'macro
    (lambda (#{x 37478}#)
      (let ((#{tmp 37480}#
              ($sc-dispatch
                #{x 37478}#
                '(any #(each (any any)) any . each-any))))
        (if (if #{tmp 37480}#
              (@apply
                (lambda (#{let* 37484}#
                         #{x 37485}#
                         #{v 37486}#
                         #{e1 37487}#
                         #{e2 37488}#)
                  (and-map identifier? #{x 37485}#))
                #{tmp 37480}#)
              #f)
          (@apply
            (lambda (#{let* 37489}#
                     #{x 37490}#
                     #{v 37491}#
                     #{e1 37492}#
                     #{e2 37493}#)
              (letrec*
                ((#{f 37494}#
                   (lambda (#{bindings 37497}#)
                     (if (null? #{bindings 37497}#)
                       (cons '#(syntax-object
                                let
                                ((top)
                                 #(ribcage () () ())
                                 #(ribcage
                                   #(f bindings)
                                   #((top) (top))
                                   #("i37464" "i37465"))
                                 #(ribcage
                                   #(let* x v e1 e2)
                                   #((top) (top) (top) (top) (top))
                                   #("i37454"
                                     "i37455"
                                     "i37456"
                                     "i37457"
                                     "i37458"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("i37440")))
                                (hygiene guile))
                             (cons '() (cons #{e1 37492}# #{e2 37493}#)))
                       (let ((#{tmp 37498}#
                               (list (#{f 37494}# (cdr #{bindings 37497}#))
                                     (car #{bindings 37497}#))))
                         (let ((#{tmp 37499}#
                                 ($sc-dispatch #{tmp 37498}# '(any any))))
                           (if #{tmp 37499}#
                             (@apply
                               (lambda (#{body 37501}# #{binding 37502}#)
                                 (list '#(syntax-object
                                          let
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(body binding)
                                             #((top) (top))
                                             #("i37474" "i37475"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(f bindings)
                                             #((top) (top))
                                             #("i37464" "i37465"))
                                           #(ribcage
                                             #(let* x v e1 e2)
                                             #((top) (top) (top) (top) (top))
                                             #("i37454"
                                               "i37455"
                                               "i37456"
                                               "i37457"
                                               "i37458"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x)
                                             #((top))
                                             #("i37440")))
                                          (hygiene guile))
                                       (list #{binding 37502}#)
                                       #{body 37501}#))
                               #{tmp 37499}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp 37498}#))))))))
                (#{f 37494}# (map list #{x 37490}# #{v 37491}#))))
            #{tmp 37480}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 37478}#))))))

(define do
  (make-syntax-transformer
    'do
    'macro
    (lambda (#{orig-x 37560}#)
      (let ((#{tmp 37562}#
              ($sc-dispatch
                #{orig-x 37560}#
                '(_ #(each (any any . any))
                    (any . each-any)
                    .
                    each-any))))
        (if #{tmp 37562}#
          (@apply
            (lambda (#{var 37566}#
                     #{init 37567}#
                     #{step 37568}#
                     #{e0 37569}#
                     #{e1 37570}#
                     #{c 37571}#)
              (let ((#{tmp 37572}#
                      (map (lambda (#{v 37575}# #{s 37576}#)
                             (let ((#{tmp 37578}#
                                     ($sc-dispatch #{s 37576}# '())))
                               (if #{tmp 37578}#
                                 (@apply (lambda () #{v 37575}#) #{tmp 37578}#)
                                 (let ((#{tmp 37581}#
                                         ($sc-dispatch #{s 37576}# '(any))))
                                   (if #{tmp 37581}#
                                     (@apply
                                       (lambda (#{e 37584}#) #{e 37584}#)
                                       #{tmp 37581}#)
                                     (syntax-violation
                                       'do
                                       "bad step expression"
                                       #{orig-x 37560}#
                                       #{s 37576}#))))))
                           #{var 37566}#
                           #{step 37568}#)))
                (let ((#{tmp 37573}#
                        ($sc-dispatch #{tmp 37572}# 'each-any)))
                  (if #{tmp 37573}#
                    (@apply
                      (lambda (#{step 37590}#)
                        (let ((#{tmp 37592}# ($sc-dispatch #{e1 37570}# '())))
                          (if #{tmp 37592}#
                            (@apply
                              (lambda ()
                                (list '#(syntax-object
                                         let
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("i37528"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("i37513"
                                              "i37514"
                                              "i37515"
                                              "i37516"
                                              "i37517"
                                              "i37518"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("i37510")))
                                         (hygiene guile))
                                      '#(syntax-object
                                         doloop
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("i37528"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("i37513"
                                              "i37514"
                                              "i37515"
                                              "i37516"
                                              "i37517"
                                              "i37518"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("i37510")))
                                         (hygiene guile))
                                      (map list #{var 37566}# #{init 37567}#)
                                      (list '#(syntax-object
                                               if
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(step)
                                                  #((top))
                                                  #("i37528"))
                                                #(ribcage
                                                  #(var init step e0 e1 c)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("i37513"
                                                    "i37514"
                                                    "i37515"
                                                    "i37516"
                                                    "i37517"
                                                    "i37518"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(orig-x)
                                                  #((top))
                                                  #("i37510")))
                                               (hygiene guile))
                                            (list '#(syntax-object
                                                     not
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("i37528"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i37513"
                                                          "i37514"
                                                          "i37515"
                                                          "i37516"
                                                          "i37517"
                                                          "i37518"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("i37510")))
                                                     (hygiene guile))
                                                  #{e0 37569}#)
                                            (cons '#(syntax-object
                                                     begin
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("i37528"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i37513"
                                                          "i37514"
                                                          "i37515"
                                                          "i37516"
                                                          "i37517"
                                                          "i37518"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("i37510")))
                                                     (hygiene guile))
                                                  (append
                                                    #{c 37571}#
                                                    (list (cons '#(syntax-object
                                                                   doloop
                                                                   ((top)
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(step)
                                                                      #((top))
                                                                      #("i37528"))
                                                                    #(ribcage
                                                                      #(var
                                                                        init
                                                                        step
                                                                        e0
                                                                        e1
                                                                        c)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("i37513"
                                                                        "i37514"
                                                                        "i37515"
                                                                        "i37516"
                                                                        "i37517"
                                                                        "i37518"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(orig-x)
                                                                      #((top))
                                                                      #("i37510")))
                                                                   (hygiene
                                                                     guile))
                                                                #{step 37590}#)))))))
                              #{tmp 37592}#)
                            (let ((#{tmp 37596}#
                                    ($sc-dispatch
                                      #{e1 37570}#
                                      '(any . each-any))))
                              (if #{tmp 37596}#
                                (@apply
                                  (lambda (#{e1 37600}# #{e2 37601}#)
                                    (list '#(syntax-object
                                             let
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("i37537" "i37538"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("i37528"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i37513"
                                                  "i37514"
                                                  "i37515"
                                                  "i37516"
                                                  "i37517"
                                                  "i37518"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("i37510")))
                                             (hygiene guile))
                                          '#(syntax-object
                                             doloop
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("i37537" "i37538"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("i37528"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i37513"
                                                  "i37514"
                                                  "i37515"
                                                  "i37516"
                                                  "i37517"
                                                  "i37518"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("i37510")))
                                             (hygiene guile))
                                          (map list
                                               #{var 37566}#
                                               #{init 37567}#)
                                          (list '#(syntax-object
                                                   if
                                                   ((top)
                                                    #(ribcage
                                                      #(e1 e2)
                                                      #((top) (top))
                                                      #("i37537" "i37538"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(step)
                                                      #((top))
                                                      #("i37528"))
                                                    #(ribcage
                                                      #(var init step e0 e1 c)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i37513"
                                                        "i37514"
                                                        "i37515"
                                                        "i37516"
                                                        "i37517"
                                                        "i37518"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(orig-x)
                                                      #((top))
                                                      #("i37510")))
                                                   (hygiene guile))
                                                #{e0 37569}#
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("i37537"
                                                              "i37538"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("i37528"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i37513"
                                                              "i37514"
                                                              "i37515"
                                                              "i37516"
                                                              "i37517"
                                                              "i37518"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("i37510")))
                                                         (hygiene guile))
                                                      (cons #{e1 37600}#
                                                            #{e2 37601}#))
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("i37537"
                                                              "i37538"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("i37528"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i37513"
                                                              "i37514"
                                                              "i37515"
                                                              "i37516"
                                                              "i37517"
                                                              "i37518"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("i37510")))
                                                         (hygiene guile))
                                                      (append
                                                        #{c 37571}#
                                                        (list (cons '#(syntax-object
                                                                       doloop
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(e1
                                                                            e2)
                                                                          #((top)
                                                                            (top))
                                                                          #("i37537"
                                                                            "i37538"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(step)
                                                                          #((top))
                                                                          #("i37528"))
                                                                        #(ribcage
                                                                          #(var
                                                                            init
                                                                            step
                                                                            e0
                                                                            e1
                                                                            c)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i37513"
                                                                            "i37514"
                                                                            "i37515"
                                                                            "i37516"
                                                                            "i37517"
                                                                            "i37518"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(orig-x)
                                                                          #((top))
                                                                          #("i37510")))
                                                                       (hygiene
                                                                         guile))
                                                                    #{step 37590}#)))))))
                                  #{tmp 37596}#)
                                (syntax-violation
                                  #f
                                  "source expression failed to match any pattern"
                                  #{e1 37570}#))))))
                      #{tmp 37573}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp 37572}#)))))
            #{tmp 37562}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{orig-x 37560}#))))))

(define quasiquote
  (make-syntax-transformer
    'quasiquote
    'macro
    (letrec*
      ((#{quasi 37887}#
         (lambda (#{p 37911}# #{lev 37912}#)
           (let ((#{tmp 37914}#
                   ($sc-dispatch
                     #{p 37911}#
                     '(#(free-id
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i37633" "i37634"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i37629"
                               "i37627"
                               "i37625"
                               "i37623"
                               "i37621"
                               "i37619"
                               "i37617")))
                           (hygiene guile)))
                       any))))
             (if #{tmp 37914}#
               (@apply
                 (lambda (#{p 37918}#)
                   (if (= #{lev 37912}# 0)
                     (list '#(syntax-object
                              "value"
                              ((top)
                               #(ribcage #(p) #((top)) #("i37637"))
                               #(ribcage () () ())
                               #(ribcage
                                 #(p lev)
                                 #((top) (top))
                                 #("i37633" "i37634"))
                               #(ribcage
                                 (emit quasivector
                                       quasilist*
                                       quasiappend
                                       quasicons
                                       vquasi
                                       quasi)
                                 ((top) (top) (top) (top) (top) (top) (top))
                                 ("i37629"
                                  "i37627"
                                  "i37625"
                                  "i37623"
                                  "i37621"
                                  "i37619"
                                  "i37617")))
                              (hygiene guile))
                           #{p 37918}#)
                     (#{quasicons 37889}#
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage #(p) #((top)) #("i37637"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i37633" "i37634"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i37629"
                               "i37627"
                               "i37625"
                               "i37623"
                               "i37621"
                               "i37619"
                               "i37617")))
                           (hygiene guile))
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage #(p) #((top)) #("i37637"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i37633" "i37634"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i37629"
                               "i37627"
                               "i37625"
                               "i37623"
                               "i37621"
                               "i37619"
                               "i37617")))
                           (hygiene guile)))
                       (#{quasi 37887}#
                         (list #{p 37918}#)
                         (#{1-}# #{lev 37912}#)))))
                 #{tmp 37914}#)
               (let ((#{tmp 37921}#
                       ($sc-dispatch
                         #{p 37911}#
                         '(#(free-id
                             #(syntax-object
                               quasiquote
                               ((top)
                                #(ribcage () () ())
                                #(ribcage
                                  #(p lev)
                                  #((top) (top))
                                  #("i37633" "i37634"))
                                #(ribcage
                                  (emit quasivector
                                        quasilist*
                                        quasiappend
                                        quasicons
                                        vquasi
                                        quasi)
                                  ((top) (top) (top) (top) (top) (top) (top))
                                  ("i37629"
                                   "i37627"
                                   "i37625"
                                   "i37623"
                                   "i37621"
                                   "i37619"
                                   "i37617")))
                               (hygiene guile)))
                           any))))
                 (if #{tmp 37921}#
                   (@apply
                     (lambda (#{p 37925}#)
                       (#{quasicons 37889}#
                         '(#(syntax-object
                             "quote"
                             ((top)
                              #(ribcage #(p) #((top)) #("i37640"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i37633" "i37634"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("i37629"
                                 "i37627"
                                 "i37625"
                                 "i37623"
                                 "i37621"
                                 "i37619"
                                 "i37617")))
                             (hygiene guile))
                           #(syntax-object
                             quasiquote
                             ((top)
                              #(ribcage #(p) #((top)) #("i37640"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i37633" "i37634"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("i37629"
                                 "i37627"
                                 "i37625"
                                 "i37623"
                                 "i37621"
                                 "i37619"
                                 "i37617")))
                             (hygiene guile)))
                         (#{quasi 37887}#
                           (list #{p 37925}#)
                           (#{1+}# #{lev 37912}#))))
                     #{tmp 37921}#)
                   (let ((#{tmp 37928}#
                           ($sc-dispatch #{p 37911}# '(any . any))))
                     (if #{tmp 37928}#
                       (@apply
                         (lambda (#{p 37932}# #{q 37933}#)
                           (let ((#{tmp 37935}#
                                   ($sc-dispatch
                                     #{p 37932}#
                                     '(#(free-id
                                         #(syntax-object
                                           unquote
                                           ((top)
                                            #(ribcage
                                              #(p q)
                                              #((top) (top))
                                              #("i37643" "i37644"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(p lev)
                                              #((top) (top))
                                              #("i37633" "i37634"))
                                            #(ribcage
                                              (emit quasivector
                                                    quasilist*
                                                    quasiappend
                                                    quasicons
                                                    vquasi
                                                    quasi)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("i37629"
                                               "i37627"
                                               "i37625"
                                               "i37623"
                                               "i37621"
                                               "i37619"
                                               "i37617")))
                                           (hygiene guile)))
                                       .
                                       each-any))))
                             (if #{tmp 37935}#
                               (@apply
                                 (lambda (#{p 37939}#)
                                   (if (= #{lev 37912}# 0)
                                     (#{quasilist* 37891}#
                                       (map (lambda (#{tmp 37651 37978}#)
                                              (list '#(syntax-object
                                                       "value"
                                                       ((top)
                                                        #(ribcage
                                                          #(p)
                                                          #((top))
                                                          #("i37649"))
                                                        #(ribcage
                                                          #(p q)
                                                          #((top) (top))
                                                          #("i37643" "i37644"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p lev)
                                                          #((top) (top))
                                                          #("i37633" "i37634"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i37629"
                                                           "i37627"
                                                           "i37625"
                                                           "i37623"
                                                           "i37621"
                                                           "i37619"
                                                           "i37617")))
                                                       (hygiene guile))
                                                    #{tmp 37651 37978}#))
                                            #{p 37939}#)
                                       (#{quasi 37887}#
                                         #{q 37933}#
                                         #{lev 37912}#))
                                     (#{quasicons 37889}#
                                       (#{quasicons 37889}#
                                         '(#(syntax-object
                                             "quote"
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("i37649"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("i37643" "i37644"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i37633" "i37634"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i37629"
                                                 "i37627"
                                                 "i37625"
                                                 "i37623"
                                                 "i37621"
                                                 "i37619"
                                                 "i37617")))
                                             (hygiene guile))
                                           #(syntax-object
                                             unquote
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("i37649"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("i37643" "i37644"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i37633" "i37634"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i37629"
                                                 "i37627"
                                                 "i37625"
                                                 "i37623"
                                                 "i37621"
                                                 "i37619"
                                                 "i37617")))
                                             (hygiene guile)))
                                         (#{quasi 37887}#
                                           #{p 37939}#
                                           (#{1-}# #{lev 37912}#)))
                                       (#{quasi 37887}#
                                         #{q 37933}#
                                         #{lev 37912}#))))
                                 #{tmp 37935}#)
                               (let ((#{tmp 37983}#
                                       ($sc-dispatch
                                         #{p 37932}#
                                         '(#(free-id
                                             #(syntax-object
                                               unquote-splicing
                                               ((top)
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("i37643" "i37644"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("i37633" "i37634"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i37629"
                                                   "i37627"
                                                   "i37625"
                                                   "i37623"
                                                   "i37621"
                                                   "i37619"
                                                   "i37617")))
                                               (hygiene guile)))
                                           .
                                           each-any))))
                                 (if #{tmp 37983}#
                                   (@apply
                                     (lambda (#{p 37987}#)
                                       (if (= #{lev 37912}# 0)
                                         (#{quasiappend 37890}#
                                           (map (lambda (#{tmp 37656 37990}#)
                                                  (list '#(syntax-object
                                                           "value"
                                                           ((top)
                                                            #(ribcage
                                                              #(p)
                                                              #((top))
                                                              #("i37654"))
                                                            #(ribcage
                                                              #(p q)
                                                              #((top) (top))
                                                              #("i37643"
                                                                "i37644"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(p lev)
                                                              #((top) (top))
                                                              #("i37633"
                                                                "i37634"))
                                                            #(ribcage
                                                              (emit quasivector
                                                                    quasilist*
                                                                    quasiappend
                                                                    quasicons
                                                                    vquasi
                                                                    quasi)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("i37629"
                                                               "i37627"
                                                               "i37625"
                                                               "i37623"
                                                               "i37621"
                                                               "i37619"
                                                               "i37617")))
                                                           (hygiene guile))
                                                        #{tmp 37656 37990}#))
                                                #{p 37987}#)
                                           (#{quasi 37887}#
                                             #{q 37933}#
                                             #{lev 37912}#))
                                         (#{quasicons 37889}#
                                           (#{quasicons 37889}#
                                             '(#(syntax-object
                                                 "quote"
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("i37654"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("i37643" "i37644"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("i37633" "i37634"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i37629"
                                                     "i37627"
                                                     "i37625"
                                                     "i37623"
                                                     "i37621"
                                                     "i37619"
                                                     "i37617")))
                                                 (hygiene guile))
                                               #(syntax-object
                                                 unquote-splicing
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("i37654"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("i37643" "i37644"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("i37633" "i37634"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i37629"
                                                     "i37627"
                                                     "i37625"
                                                     "i37623"
                                                     "i37621"
                                                     "i37619"
                                                     "i37617")))
                                                 (hygiene guile)))
                                             (#{quasi 37887}#
                                               #{p 37987}#
                                               (#{1-}# #{lev 37912}#)))
                                           (#{quasi 37887}#
                                             #{q 37933}#
                                             #{lev 37912}#))))
                                     #{tmp 37983}#)
                                   (#{quasicons 37889}#
                                     (#{quasi 37887}#
                                       #{p 37932}#
                                       #{lev 37912}#)
                                     (#{quasi 37887}#
                                       #{q 37933}#
                                       #{lev 37912}#)))))))
                         #{tmp 37928}#)
                       (let ((#{tmp 38004}#
                               ($sc-dispatch #{p 37911}# '#(vector each-any))))
                         (if #{tmp 38004}#
                           (@apply
                             (lambda (#{x 38008}#)
                               (let ((#{x 38011}#
                                       (#{vquasi 37888}#
                                         #{x 38008}#
                                         #{lev 37912}#)))
                                 (let ((#{tmp 38013}#
                                         ($sc-dispatch
                                           #{x 38011}#
                                           '(#(atom "quote") each-any))))
                                   (if #{tmp 38013}#
                                     (@apply
                                       (lambda (#{x 38017}#)
                                         (list '#(syntax-object
                                                  "quote"
                                                  ((top)
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i37761"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i37758"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i37629"
                                                      "i37627"
                                                      "i37625"
                                                      "i37623"
                                                      "i37621"
                                                      "i37619"
                                                      "i37617")))
                                                  (hygiene guile))
                                               (list->vector #{x 38017}#)))
                                       #{tmp 38013}#)
                                     (letrec*
                                       ((#{f 38019}#
                                          (lambda (#{y 38031}# #{k 38032}#)
                                            (let ((#{tmp 38034}#
                                                    ($sc-dispatch
                                                      #{y 38031}#
                                                      '(#(atom "quote")
                                                        each-any))))
                                              (if #{tmp 38034}#
                                                (@apply
                                                  (lambda (#{y 38037}#)
                                                    (#{k 38032}#
                                                      (map (lambda (#{tmp 37786 38038}#)
                                                             (list '#(syntax-object
                                                                      "quote"
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(y)
                                                                         #((top))
                                                                         #("i37784"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(f
                                                                           y
                                                                           k)
                                                                         #((top)
                                                                           (top)
                                                                           (top))
                                                                         #("i37766"
                                                                           "i37767"
                                                                           "i37768"))
                                                                       #(ribcage
                                                                         #(_)
                                                                         #((top))
                                                                         #("i37764"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(x)
                                                                         #((top))
                                                                         #("i37758"))
                                                                       #(ribcage
                                                                         (emit quasivector
                                                                               quasilist*
                                                                               quasiappend
                                                                               quasicons
                                                                               vquasi
                                                                               quasi)
                                                                         ((top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                         ("i37629"
                                                                          "i37627"
                                                                          "i37625"
                                                                          "i37623"
                                                                          "i37621"
                                                                          "i37619"
                                                                          "i37617")))
                                                                      (hygiene
                                                                        guile))
                                                                   #{tmp 37786 38038}#))
                                                           #{y 38037}#)))
                                                  #{tmp 38034}#)
                                                (let ((#{tmp 38039}#
                                                        ($sc-dispatch
                                                          #{y 38031}#
                                                          '(#(atom "list")
                                                            .
                                                            each-any))))
                                                  (if #{tmp 38039}#
                                                    (@apply
                                                      (lambda (#{y 38042}#)
                                                        (#{k 38032}#
                                                          #{y 38042}#))
                                                      #{tmp 38039}#)
                                                    (let ((#{tmp 38043}#
                                                            ($sc-dispatch
                                                              #{y 38031}#
                                                              '(#(atom "list*")
                                                                .
                                                                #(each+
                                                                  any
                                                                  (any)
                                                                  ())))))
                                                      (if #{tmp 38043}#
                                                        (@apply
                                                          (lambda (#{y 38046}#
                                                                   #{z 38047}#)
                                                            (#{f 38019}#
                                                              #{z 38047}#
                                                              (lambda (#{ls 38048}#)
                                                                (#{k 38032}#
                                                                  (append
                                                                    #{y 38046}#
                                                                    #{ls 38048}#)))))
                                                          #{tmp 38043}#)
                                                        (list '#(syntax-object
                                                                 "list->vector"
                                                                 ((top)
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(#{ g37801}#)
                                                                    #((m37802
                                                                        top))
                                                                    #("i37805"))
                                                                  #(ribcage
                                                                    #(else)
                                                                    #((top))
                                                                    #("i37799"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(f y k)
                                                                    #((top)
                                                                      (top)
                                                                      (top))
                                                                    #("i37766"
                                                                      "i37767"
                                                                      "i37768"))
                                                                  #(ribcage
                                                                    #(_)
                                                                    #((top))
                                                                    #("i37764"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x)
                                                                    #((top))
                                                                    #("i37758"))
                                                                  #(ribcage
                                                                    (emit quasivector
                                                                          quasilist*
                                                                          quasiappend
                                                                          quasicons
                                                                          vquasi
                                                                          quasi)
                                                                    ((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                    ("i37629"
                                                                     "i37627"
                                                                     "i37625"
                                                                     "i37623"
                                                                     "i37621"
                                                                     "i37619"
                                                                     "i37617")))
                                                                 (hygiene
                                                                   guile))
                                                              #{x 38011}#))))))))))
                                       (#{f 38019}#
                                         #{x 38011}#
                                         (lambda (#{ls 38021}#)
                                           (let ((#{tmp 38023}#
                                                   ($sc-dispatch
                                                     #{ls 38021}#
                                                     'each-any)))
                                             (if #{tmp 38023}#
                                               (@apply
                                                 (lambda (#{ g37774 38026}#)
                                                   (cons '#(syntax-object
                                                            "vector"
                                                            ((top)
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(#{ g37774}#)
                                                               #((m37775 top))
                                                               #("i37779"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(ls)
                                                               #((top))
                                                               #("i37773"))
                                                             #(ribcage
                                                               #(_)
                                                               #((top))
                                                               #("i37764"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i37758"))
                                                             #(ribcage
                                                               (emit quasivector
                                                                     quasilist*
                                                                     quasiappend
                                                                     quasicons
                                                                     vquasi
                                                                     quasi)
                                                               ((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                               ("i37629"
                                                                "i37627"
                                                                "i37625"
                                                                "i37623"
                                                                "i37621"
                                                                "i37619"
                                                                "i37617")))
                                                            (hygiene guile))
                                                         #{ g37774 38026}#))
                                                 #{tmp 38023}#)
                                               (syntax-violation
                                                 #f
                                                 "source expression failed to match any pattern"
                                                 #{ls 38021}#))))))))))
                             #{tmp 38004}#)
                           (list '#(syntax-object
                                    "quote"
                                    ((top)
                                     #(ribcage #(p) #((top)) #("i37664"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p lev)
                                       #((top) (top))
                                       #("i37633" "i37634"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i37629"
                                        "i37627"
                                        "i37625"
                                        "i37623"
                                        "i37621"
                                        "i37619"
                                        "i37617")))
                                    (hygiene guile))
                                 #{p 37911}#)))))))))))
       (#{vquasi 37888}#
         (lambda (#{p 38076}# #{lev 38077}#)
           (let ((#{tmp 38079}#
                   ($sc-dispatch #{p 38076}# '(any . any))))
             (if #{tmp 38079}#
               (@apply
                 (lambda (#{p 38083}# #{q 38084}#)
                   (let ((#{tmp 38086}#
                           ($sc-dispatch
                             #{p 38083}#
                             '(#(free-id
                                 #(syntax-object
                                   unquote
                                   ((top)
                                    #(ribcage
                                      #(p q)
                                      #((top) (top))
                                      #("i37672" "i37673"))
                                    #(ribcage () () ())
                                    #(ribcage
                                      #(p lev)
                                      #((top) (top))
                                      #("i37668" "i37669"))
                                    #(ribcage
                                      (emit quasivector
                                            quasilist*
                                            quasiappend
                                            quasicons
                                            vquasi
                                            quasi)
                                      ((top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top))
                                      ("i37629"
                                       "i37627"
                                       "i37625"
                                       "i37623"
                                       "i37621"
                                       "i37619"
                                       "i37617")))
                                   (hygiene guile)))
                               .
                               each-any))))
                     (if #{tmp 38086}#
                       (@apply
                         (lambda (#{p 38090}#)
                           (if (= #{lev 38077}# 0)
                             (#{quasilist* 37891}#
                               (map (lambda (#{tmp 37680 38129}#)
                                      (list '#(syntax-object
                                               "value"
                                               ((top)
                                                #(ribcage
                                                  #(p)
                                                  #((top))
                                                  #("i37678"))
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("i37672" "i37673"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("i37668" "i37669"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i37629"
                                                   "i37627"
                                                   "i37625"
                                                   "i37623"
                                                   "i37621"
                                                   "i37619"
                                                   "i37617")))
                                               (hygiene guile))
                                            #{tmp 37680 38129}#))
                                    #{p 38090}#)
                               (#{vquasi 37888}# #{q 38084}# #{lev 38077}#))
                             (#{quasicons 37889}#
                               (#{quasicons 37889}#
                                 '(#(syntax-object
                                     "quote"
                                     ((top)
                                      #(ribcage #(p) #((top)) #("i37678"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("i37672" "i37673"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("i37668" "i37669"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i37629"
                                         "i37627"
                                         "i37625"
                                         "i37623"
                                         "i37621"
                                         "i37619"
                                         "i37617")))
                                     (hygiene guile))
                                   #(syntax-object
                                     unquote
                                     ((top)
                                      #(ribcage #(p) #((top)) #("i37678"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("i37672" "i37673"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("i37668" "i37669"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i37629"
                                         "i37627"
                                         "i37625"
                                         "i37623"
                                         "i37621"
                                         "i37619"
                                         "i37617")))
                                     (hygiene guile)))
                                 (#{quasi 37887}#
                                   #{p 38090}#
                                   (#{1-}# #{lev 38077}#)))
                               (#{vquasi 37888}# #{q 38084}# #{lev 38077}#))))
                         #{tmp 38086}#)
                       (let ((#{tmp 38136}#
                               ($sc-dispatch
                                 #{p 38083}#
                                 '(#(free-id
                                     #(syntax-object
                                       unquote-splicing
                                       ((top)
                                        #(ribcage
                                          #(p q)
                                          #((top) (top))
                                          #("i37672" "i37673"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(p lev)
                                          #((top) (top))
                                          #("i37668" "i37669"))
                                        #(ribcage
                                          (emit quasivector
                                                quasilist*
                                                quasiappend
                                                quasicons
                                                vquasi
                                                quasi)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("i37629"
                                           "i37627"
                                           "i37625"
                                           "i37623"
                                           "i37621"
                                           "i37619"
                                           "i37617")))
                                       (hygiene guile)))
                                   .
                                   each-any))))
                         (if #{tmp 38136}#
                           (@apply
                             (lambda (#{p 38140}#)
                               (if (= #{lev 38077}# 0)
                                 (#{quasiappend 37890}#
                                   (map (lambda (#{tmp 37685 38143}#)
                                          (list '#(syntax-object
                                                   "value"
                                                   ((top)
                                                    #(ribcage
                                                      #(p)
                                                      #((top))
                                                      #("i37683"))
                                                    #(ribcage
                                                      #(p q)
                                                      #((top) (top))
                                                      #("i37672" "i37673"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(p lev)
                                                      #((top) (top))
                                                      #("i37668" "i37669"))
                                                    #(ribcage
                                                      (emit quasivector
                                                            quasilist*
                                                            quasiappend
                                                            quasicons
                                                            vquasi
                                                            quasi)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i37629"
                                                       "i37627"
                                                       "i37625"
                                                       "i37623"
                                                       "i37621"
                                                       "i37619"
                                                       "i37617")))
                                                   (hygiene guile))
                                                #{tmp 37685 38143}#))
                                        #{p 38140}#)
                                   (#{vquasi 37888}#
                                     #{q 38084}#
                                     #{lev 38077}#))
                                 (#{quasicons 37889}#
                                   (#{quasicons 37889}#
                                     '(#(syntax-object
                                         "quote"
                                         ((top)
                                          #(ribcage #(p) #((top)) #("i37683"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("i37672" "i37673"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("i37668" "i37669"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i37629"
                                             "i37627"
                                             "i37625"
                                             "i37623"
                                             "i37621"
                                             "i37619"
                                             "i37617")))
                                         (hygiene guile))
                                       #(syntax-object
                                         unquote-splicing
                                         ((top)
                                          #(ribcage #(p) #((top)) #("i37683"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("i37672" "i37673"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("i37668" "i37669"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i37629"
                                             "i37627"
                                             "i37625"
                                             "i37623"
                                             "i37621"
                                             "i37619"
                                             "i37617")))
                                         (hygiene guile)))
                                     (#{quasi 37887}#
                                       #{p 38140}#
                                       (#{1-}# #{lev 38077}#)))
                                   (#{vquasi 37888}#
                                     #{q 38084}#
                                     #{lev 38077}#))))
                             #{tmp 38136}#)
                           (#{quasicons 37889}#
                             (#{quasi 37887}# #{p 38083}# #{lev 38077}#)
                             (#{vquasi 37888}# #{q 38084}# #{lev 38077}#)))))))
                 #{tmp 38079}#)
               (let ((#{tmp 38161}# ($sc-dispatch #{p 38076}# '())))
                 (if #{tmp 38161}#
                   (@apply
                     (lambda ()
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i37668" "i37669"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i37629"
                               "i37627"
                               "i37625"
                               "i37623"
                               "i37621"
                               "i37619"
                               "i37617")))
                           (hygiene guile))
                         ()))
                     #{tmp 38161}#)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     #{p 38076}#)))))))
       (#{quasicons 37889}#
         (lambda (#{x 38174}# #{y 38175}#)
           (let ((#{tmp 38176}# (list #{x 38174}# #{y 38175}#)))
             (let ((#{tmp 38177}#
                     ($sc-dispatch #{tmp 38176}# '(any any))))
               (if #{tmp 38177}#
                 (@apply
                   (lambda (#{x 38179}# #{y 38180}#)
                     (let ((#{tmp 38182}#
                             ($sc-dispatch
                               #{y 38180}#
                               '(#(atom "quote") any))))
                       (if #{tmp 38182}#
                         (@apply
                           (lambda (#{dy 38186}#)
                             (let ((#{tmp 38188}#
                                     ($sc-dispatch
                                       #{x 38179}#
                                       '(#(atom "quote") any))))
                               (if #{tmp 38188}#
                                 (@apply
                                   (lambda (#{dx 38192}#)
                                     (list '#(syntax-object
                                              "quote"
                                              ((top)
                                               #(ribcage
                                                 #(dx)
                                                 #((top))
                                                 #("i37707"))
                                               #(ribcage
                                                 #(dy)
                                                 #((top))
                                                 #("i37703"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i37697" "i37698"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i37692" "i37693"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i37629"
                                                  "i37627"
                                                  "i37625"
                                                  "i37623"
                                                  "i37621"
                                                  "i37619"
                                                  "i37617")))
                                              (hygiene guile))
                                           (cons #{dx 38192}# #{dy 38186}#)))
                                   #{tmp 38188}#)
                                 (if (null? #{dy 38186}#)
                                   (list '#(syntax-object
                                            "list"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("i37709"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("i37703"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i37697" "i37698"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i37692" "i37693"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i37629"
                                                "i37627"
                                                "i37625"
                                                "i37623"
                                                "i37621"
                                                "i37619"
                                                "i37617")))
                                            (hygiene guile))
                                         #{x 38179}#)
                                   (list '#(syntax-object
                                            "list*"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("i37709"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("i37703"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i37697" "i37698"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i37692" "i37693"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i37629"
                                                "i37627"
                                                "i37625"
                                                "i37623"
                                                "i37621"
                                                "i37619"
                                                "i37617")))
                                            (hygiene guile))
                                         #{x 38179}#
                                         #{y 38180}#)))))
                           #{tmp 38182}#)
                         (let ((#{tmp 38197}#
                                 ($sc-dispatch
                                   #{y 38180}#
                                   '(#(atom "list") . any))))
                           (if #{tmp 38197}#
                             (@apply
                               (lambda (#{stuff 38201}#)
                                 (cons '#(syntax-object
                                          "list"
                                          ((top)
                                           #(ribcage
                                             #(stuff)
                                             #((top))
                                             #("i37712"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i37697" "i37698"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i37692" "i37693"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i37629"
                                              "i37627"
                                              "i37625"
                                              "i37623"
                                              "i37621"
                                              "i37619"
                                              "i37617")))
                                          (hygiene guile))
                                       (cons #{x 38179}# #{stuff 38201}#)))
                               #{tmp 38197}#)
                             (let ((#{tmp 38202}#
                                     ($sc-dispatch
                                       #{y 38180}#
                                       '(#(atom "list*") . any))))
                               (if #{tmp 38202}#
                                 (@apply
                                   (lambda (#{stuff 38206}#)
                                     (cons '#(syntax-object
                                              "list*"
                                              ((top)
                                               #(ribcage
                                                 #(stuff)
                                                 #((top))
                                                 #("i37715"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i37697" "i37698"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i37692" "i37693"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i37629"
                                                  "i37627"
                                                  "i37625"
                                                  "i37623"
                                                  "i37621"
                                                  "i37619"
                                                  "i37617")))
                                              (hygiene guile))
                                           (cons #{x 38179}# #{stuff 38206}#)))
                                   #{tmp 38202}#)
                                 (list '#(syntax-object
                                          "list*"
                                          ((top)
                                           #(ribcage #(_) #((top)) #("i37717"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i37697" "i37698"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i37692" "i37693"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i37629"
                                              "i37627"
                                              "i37625"
                                              "i37623"
                                              "i37621"
                                              "i37619"
                                              "i37617")))
                                          (hygiene guile))
                                       #{x 38179}#
                                       #{y 38180}#))))))))
                   #{tmp 38177}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{tmp 38176}#))))))
       (#{quasiappend 37890}#
         (lambda (#{x 38217}# #{y 38218}#)
           (let ((#{tmp 38220}#
                   ($sc-dispatch #{y 38218}# '(#(atom "quote") ()))))
             (if #{tmp 38220}#
               (@apply
                 (lambda ()
                   (if (null? #{x 38217}#)
                     '(#(syntax-object
                         "quote"
                         ((top)
                          #(ribcage () () ())
                          #(ribcage
                            #(x y)
                            #((top) (top))
                            #("i37721" "i37722"))
                          #(ribcage
                            (emit quasivector
                                  quasilist*
                                  quasiappend
                                  quasicons
                                  vquasi
                                  quasi)
                            ((top) (top) (top) (top) (top) (top) (top))
                            ("i37629"
                             "i37627"
                             "i37625"
                             "i37623"
                             "i37621"
                             "i37619"
                             "i37617")))
                         (hygiene guile))
                       ())
                     (if (null? (cdr #{x 38217}#))
                       (car #{x 38217}#)
                       (let ((#{tmp 38225}#
                               ($sc-dispatch #{x 38217}# 'each-any)))
                         (if #{tmp 38225}#
                           (@apply
                             (lambda (#{p 38229}#)
                               (cons '#(syntax-object
                                        "append"
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage #(p) #((top)) #("i37733"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(x y)
                                           #((top) (top))
                                           #("i37721" "i37722"))
                                         #(ribcage
                                           (emit quasivector
                                                 quasilist*
                                                 quasiappend
                                                 quasicons
                                                 vquasi
                                                 quasi)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("i37629"
                                            "i37627"
                                            "i37625"
                                            "i37623"
                                            "i37621"
                                            "i37619"
                                            "i37617")))
                                        (hygiene guile))
                                     #{p 38229}#))
                             #{tmp 38225}#)
                           (syntax-violation
                             #f
                             "source expression failed to match any pattern"
                             #{x 38217}#))))))
                 #{tmp 38220}#)
               (if (null? #{x 38217}#)
                 #{y 38218}#
                 (let ((#{tmp 38237}# (list #{x 38217}# #{y 38218}#)))
                   (let ((#{tmp 38238}#
                           ($sc-dispatch #{tmp 38237}# '(each-any any))))
                     (if #{tmp 38238}#
                       (@apply
                         (lambda (#{p 38240}# #{y 38241}#)
                           (cons '#(syntax-object
                                    "append"
                                    ((top)
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p y)
                                       #((top) (top))
                                       #("i37744" "i37745"))
                                     #(ribcage #(_) #((top)) #("i37736"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x y)
                                       #((top) (top))
                                       #("i37721" "i37722"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i37629"
                                        "i37627"
                                        "i37625"
                                        "i37623"
                                        "i37621"
                                        "i37619"
                                        "i37617")))
                                    (hygiene guile))
                                 (append #{p 38240}# (list #{y 38241}#))))
                         #{tmp 38238}#)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         #{tmp 38237}#)))))))))
       (#{quasilist* 37891}#
         (lambda (#{x 38245}# #{y 38246}#)
           (letrec*
             ((#{f 38247}#
                (lambda (#{x 38351}#)
                  (if (null? #{x 38351}#)
                    #{y 38246}#
                    (#{quasicons 37889}#
                      (car #{x 38351}#)
                      (#{f 38247}# (cdr #{x 38351}#)))))))
             (#{f 38247}# #{x 38245}#))))
       (#{emit 37893}#
         (lambda (#{x 38354}#)
           (let ((#{tmp 38356}#
                   ($sc-dispatch #{x 38354}# '(#(atom "quote") any))))
             (if #{tmp 38356}#
               (@apply
                 (lambda (#{x 38360}#)
                   (list '#(syntax-object
                            quote
                            ((top)
                             #(ribcage #(x) #((top)) #("i37811"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i37808"))
                             #(ribcage
                               (emit quasivector
                                     quasilist*
                                     quasiappend
                                     quasicons
                                     vquasi
                                     quasi)
                               ((top) (top) (top) (top) (top) (top) (top))
                               ("i37629"
                                "i37627"
                                "i37625"
                                "i37623"
                                "i37621"
                                "i37619"
                                "i37617")))
                            (hygiene guile))
                         #{x 38360}#))
                 #{tmp 38356}#)
               (let ((#{tmp 38361}#
                       ($sc-dispatch
                         #{x 38354}#
                         '(#(atom "list") . each-any))))
                 (if #{tmp 38361}#
                   (@apply
                     (lambda (#{x 38365}#)
                       (let ((#{tmp 38366}# (map #{emit 37893}# #{x 38365}#)))
                         (let ((#{tmp 38367}#
                                 ($sc-dispatch #{tmp 38366}# 'each-any)))
                           (if #{tmp 38367}#
                             (@apply
                               (lambda (#{ g37816 38369}#)
                                 (cons '#(syntax-object
                                          list
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(#{ g37816}#)
                                             #((m37817 top))
                                             #("i37821"))
                                           #(ribcage #(x) #((top)) #("i37814"))
                                           #(ribcage () () ())
                                           #(ribcage #(x) #((top)) #("i37808"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i37629"
                                              "i37627"
                                              "i37625"
                                              "i37623"
                                              "i37621"
                                              "i37619"
                                              "i37617")))
                                          (hygiene guile))
                                       #{ g37816 38369}#))
                               #{tmp 38367}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp 38366}#)))))
                     #{tmp 38361}#)
                   (let ((#{tmp 38370}#
                           ($sc-dispatch
                             #{x 38354}#
                             '(#(atom "list*") . #(each+ any (any) ())))))
                     (if #{tmp 38370}#
                       (@apply
                         (lambda (#{x 38374}# #{y 38375}#)
                           (letrec*
                             ((#{f 38376}#
                                (lambda (#{x* 38379}#)
                                  (if (null? #{x* 38379}#)
                                    (#{emit 37893}# #{y 38375}#)
                                    (let ((#{tmp 38380}#
                                            (list (#{emit 37893}#
                                                    (car #{x* 38379}#))
                                                  (#{f 38376}#
                                                    (cdr #{x* 38379}#)))))
                                      (let ((#{tmp 38381}#
                                              ($sc-dispatch
                                                #{tmp 38380}#
                                                '(any any))))
                                        (if #{tmp 38381}#
                                          (@apply
                                            (lambda (#{ g37836 38383}#
                                                     #{ g37835 38384}#)
                                              (list '#(syntax-object
                                                       cons
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(#{ g37836}#
                                                            #{ g37835}#)
                                                          #((m37837 top)
                                                            (m37837 top))
                                                          #("i37841" "i37842"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(f x*)
                                                          #((top) (top))
                                                          #("i37830" "i37831"))
                                                        #(ribcage
                                                          #(x y)
                                                          #((top) (top))
                                                          #("i37826" "i37827"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i37808"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i37629"
                                                           "i37627"
                                                           "i37625"
                                                           "i37623"
                                                           "i37621"
                                                           "i37619"
                                                           "i37617")))
                                                       (hygiene guile))
                                                    #{ g37836 38383}#
                                                    #{ g37835 38384}#))
                                            #{tmp 38381}#)
                                          (syntax-violation
                                            #f
                                            "source expression failed to match any pattern"
                                            #{tmp 38380}#))))))))
                             (#{f 38376}# #{x 38374}#)))
                         #{tmp 38370}#)
                       (let ((#{tmp 38385}#
                               ($sc-dispatch
                                 #{x 38354}#
                                 '(#(atom "append") . each-any))))
                         (if #{tmp 38385}#
                           (@apply
                             (lambda (#{x 38389}#)
                               (let ((#{tmp 38390}#
                                       (map #{emit 37893}# #{x 38389}#)))
                                 (let ((#{tmp 38391}#
                                         ($sc-dispatch
                                           #{tmp 38390}#
                                           'each-any)))
                                   (if #{tmp 38391}#
                                     (@apply
                                       (lambda (#{ g37848 38393}#)
                                         (cons '#(syntax-object
                                                  append
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(#{ g37848}#)
                                                     #((m37849 top))
                                                     #("i37853"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i37846"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i37808"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i37629"
                                                      "i37627"
                                                      "i37625"
                                                      "i37623"
                                                      "i37621"
                                                      "i37619"
                                                      "i37617")))
                                                  (hygiene guile))
                                               #{ g37848 38393}#))
                                       #{tmp 38391}#)
                                     (syntax-violation
                                       #f
                                       "source expression failed to match any pattern"
                                       #{tmp 38390}#)))))
                             #{tmp 38385}#)
                           (let ((#{tmp 38394}#
                                   ($sc-dispatch
                                     #{x 38354}#
                                     '(#(atom "vector") . each-any))))
                             (if #{tmp 38394}#
                               (@apply
                                 (lambda (#{x 38398}#)
                                   (let ((#{tmp 38399}#
                                           (map #{emit 37893}# #{x 38398}#)))
                                     (let ((#{tmp 38400}#
                                             ($sc-dispatch
                                               #{tmp 38399}#
                                               'each-any)))
                                       (if #{tmp 38400}#
                                         (@apply
                                           (lambda (#{ g37860 38402}#)
                                             (cons '#(syntax-object
                                                      vector
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(#{ g37860}#)
                                                         #((m37861 top))
                                                         #("i37865"))
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i37858"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i37808"))
                                                       #(ribcage
                                                         (emit quasivector
                                                               quasilist*
                                                               quasiappend
                                                               quasicons
                                                               vquasi
                                                               quasi)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("i37629"
                                                          "i37627"
                                                          "i37625"
                                                          "i37623"
                                                          "i37621"
                                                          "i37619"
                                                          "i37617")))
                                                      (hygiene guile))
                                                   #{ g37860 38402}#))
                                           #{tmp 38400}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp 38399}#)))))
                                 #{tmp 38394}#)
                               (let ((#{tmp 38403}#
                                       ($sc-dispatch
                                         #{x 38354}#
                                         '(#(atom "list->vector") any))))
                                 (if #{tmp 38403}#
                                   (@apply
                                     (lambda (#{x 38407}#)
                                       (let ((#{tmp 38408}#
                                               (#{emit 37893}# #{x 38407}#)))
                                         (list '#(syntax-object
                                                  list->vector
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(#{ g37872}#)
                                                     #((m37873 top))
                                                     #("i37876"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i37870"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i37808"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i37629"
                                                      "i37627"
                                                      "i37625"
                                                      "i37623"
                                                      "i37621"
                                                      "i37619"
                                                      "i37617")))
                                                  (hygiene guile))
                                               #{tmp 38408}#)))
                                     #{tmp 38403}#)
                                   (let ((#{tmp 38411}#
                                           ($sc-dispatch
                                             #{x 38354}#
                                             '(#(atom "value") any))))
                                     (if #{tmp 38411}#
                                       (@apply
                                         (lambda (#{x 38415}#) #{x 38415}#)
                                         #{tmp 38411}#)
                                       (syntax-violation
                                         #f
                                         "source expression failed to match any pattern"
                                         #{x 38354}#))))))))))))))))))
      (lambda (#{x 37894}#)
        (let ((#{tmp 37896}#
                ($sc-dispatch #{x 37894}# '(_ any))))
          (if #{tmp 37896}#
            (@apply
              (lambda (#{e 37900}#)
                (#{emit 37893}# (#{quasi 37887}# #{e 37900}# 0)))
              #{tmp 37896}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{x 37894}#)))))))

(define include
  (make-syntax-transformer
    'include
    'macro
    (lambda (#{x 38470}#)
      (letrec*
        ((#{read-file 38471}#
           (lambda (#{fn 38587}# #{k 38588}#)
             (let ((#{p 38589}# (open-input-file #{fn 38587}#)))
               (letrec*
                 ((#{f 38590}#
                    (lambda (#{x 38647}# #{result 38648}#)
                      (if (eof-object? #{x 38647}#)
                        (begin
                          (close-input-port #{p 38589}#)
                          (reverse #{result 38648}#))
                        (#{f 38590}#
                          (read #{p 38589}#)
                          (cons (datum->syntax #{k 38588}# #{x 38647}#)
                                #{result 38648}#))))))
                 (#{f 38590}# (read #{p 38589}#) '()))))))
        (let ((#{tmp 38473}#
                ($sc-dispatch #{x 38470}# '(any any))))
          (if #{tmp 38473}#
            (@apply
              (lambda (#{k 38477}# #{filename 38478}#)
                (let ((#{fn 38479}# (syntax->datum #{filename 38478}#)))
                  (let ((#{tmp 38480}#
                          (#{read-file 38471}#
                            #{fn 38479}#
                            #{filename 38478}#)))
                    (let ((#{tmp 38481}#
                            ($sc-dispatch #{tmp 38480}# 'each-any)))
                      (if #{tmp 38481}#
                        (@apply
                          (lambda (#{exp 38499}#)
                            (cons '#(syntax-object
                                     begin
                                     ((top)
                                      #(ribcage () () ())
                                      #(ribcage #(exp) #((top)) #("i38467"))
                                      #(ribcage () () ())
                                      #(ribcage () () ())
                                      #(ribcage #(fn) #((top)) #("i38462"))
                                      #(ribcage
                                        #(k filename)
                                        #((top) (top))
                                        #("i38458" "i38459"))
                                      #(ribcage (read-file) ((top)) ("i38442"))
                                      #(ribcage #(x) #((top)) #("i38441")))
                                     (hygiene guile))
                                  #{exp 38499}#))
                          #{tmp 38481}#)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          #{tmp 38480}#))))))
              #{tmp 38473}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{x 38470}#)))))))

(define include-from-path
  (make-syntax-transformer
    'include-from-path
    'macro
    (lambda (#{x 38667}#)
      (let ((#{tmp 38669}#
              ($sc-dispatch #{x 38667}# '(any any))))
        (if #{tmp 38669}#
          (@apply
            (lambda (#{k 38673}# #{filename 38674}#)
              (let ((#{fn 38675}# (syntax->datum #{filename 38674}#)))
                (let ((#{tmp 38676}#
                        (datum->syntax
                          #{filename 38674}#
                          (let ((#{t 38679}# (%search-load-path #{fn 38675}#)))
                            (if #{t 38679}#
                              #{t 38679}#
                              (syntax-violation
                                'include-from-path
                                "file not found in path"
                                #{x 38667}#
                                #{filename 38674}#))))))
                  (list '#(syntax-object
                           include
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("i38661"))
                            #(ribcage () () ())
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("i38657"))
                            #(ribcage
                              #(k filename)
                              #((top) (top))
                              #("i38653" "i38654"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i38650")))
                           (hygiene guile))
                        #{tmp 38676}#))))
            #{tmp 38669}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 38667}#))))))

(define unquote
  (make-syntax-transformer
    'unquote
    'macro
    (lambda (#{x 38688}#)
      (syntax-violation
        'unquote
        "expression not valid outside of quasiquote"
        #{x 38688}#))))

(define unquote-splicing
  (make-syntax-transformer
    'unquote-splicing
    'macro
    (lambda (#{x 38691}#)
      (syntax-violation
        'unquote-splicing
        "expression not valid outside of quasiquote"
        #{x 38691}#))))

(define case
  (make-syntax-transformer
    'case
    'macro
    (lambda (#{x 38747}#)
      (let ((#{tmp 38749}#
              ($sc-dispatch
                #{x 38747}#
                '(_ any any . each-any))))
        (if #{tmp 38749}#
          (@apply
            (lambda (#{e 38753}# #{m1 38754}# #{m2 38755}#)
              (let ((#{tmp 38756}#
                      (letrec*
                        ((#{f 38817}#
                           (lambda (#{clause 38820}# #{clauses 38821}#)
                             (if (null? #{clauses 38821}#)
                               (let ((#{tmp 38823}#
                                       ($sc-dispatch
                                         #{clause 38820}#
                                         '(#(free-id
                                             #(syntax-object
                                               else
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(f clause clauses)
                                                  #((top) (top) (top))
                                                  #("i38706"
                                                    "i38707"
                                                    "i38708"))
                                                #(ribcage
                                                  #(e m1 m2)
                                                  #((top) (top) (top))
                                                  #("i38696"
                                                    "i38697"
                                                    "i38698"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x)
                                                  #((top))
                                                  #("i38693")))
                                               (hygiene guile)))
                                           any
                                           .
                                           each-any))))
                                 (if #{tmp 38823}#
                                   (@apply
                                     (lambda (#{e1 38827}# #{e2 38828}#)
                                       (cons '#(syntax-object
                                                begin
                                                ((top)
                                                 #(ribcage
                                                   #(e1 e2)
                                                   #((top) (top))
                                                   #("i38715" "i38716"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(f clause clauses)
                                                   #((top) (top) (top))
                                                   #("i38706"
                                                     "i38707"
                                                     "i38708"))
                                                 #(ribcage
                                                   #(e m1 m2)
                                                   #((top) (top) (top))
                                                   #("i38696"
                                                     "i38697"
                                                     "i38698"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i38693")))
                                                (hygiene guile))
                                             (cons #{e1 38827}# #{e2 38828}#)))
                                     #{tmp 38823}#)
                                   (let ((#{tmp 38829}#
                                           ($sc-dispatch
                                             #{clause 38820}#
                                             '(each-any any . each-any))))
                                     (if #{tmp 38829}#
                                       (@apply
                                         (lambda (#{k 38833}#
                                                  #{e1 38834}#
                                                  #{e2 38835}#)
                                           (list '#(syntax-object
                                                    if
                                                    ((top)
                                                     #(ribcage
                                                       #(k e1 e2)
                                                       #((top) (top) (top))
                                                       #("i38721"
                                                         "i38722"
                                                         "i38723"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(f clause clauses)
                                                       #((top) (top) (top))
                                                       #("i38706"
                                                         "i38707"
                                                         "i38708"))
                                                     #(ribcage
                                                       #(e m1 m2)
                                                       #((top) (top) (top))
                                                       #("i38696"
                                                         "i38697"
                                                         "i38698"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i38693")))
                                                    (hygiene guile))
                                                 (list '#(syntax-object
                                                          memv
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i38721"
                                                               "i38722"
                                                               "i38723"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i38706"
                                                               "i38707"
                                                               "i38708"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i38696"
                                                               "i38697"
                                                               "i38698"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i38693")))
                                                          (hygiene guile))
                                                       '#(syntax-object
                                                          t
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i38721"
                                                               "i38722"
                                                               "i38723"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i38706"
                                                               "i38707"
                                                               "i38708"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i38696"
                                                               "i38697"
                                                               "i38698"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i38693")))
                                                          (hygiene guile))
                                                       (list '#(syntax-object
                                                                quote
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k e1 e2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i38721"
                                                                     "i38722"
                                                                     "i38723"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(f
                                                                     clause
                                                                     clauses)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i38706"
                                                                     "i38707"
                                                                     "i38708"))
                                                                 #(ribcage
                                                                   #(e m1 m2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i38696"
                                                                     "i38697"
                                                                     "i38698"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i38693")))
                                                                (hygiene
                                                                  guile))
                                                             #{k 38833}#))
                                                 (cons '#(syntax-object
                                                          begin
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i38721"
                                                               "i38722"
                                                               "i38723"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i38706"
                                                               "i38707"
                                                               "i38708"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i38696"
                                                               "i38697"
                                                               "i38698"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i38693")))
                                                          (hygiene guile))
                                                       (cons #{e1 38834}#
                                                             #{e2 38835}#))))
                                         #{tmp 38829}#)
                                       (syntax-violation
                                         'case
                                         "bad clause"
                                         #{x 38747}#
                                         #{clause 38820}#)))))
                               (let ((#{tmp 38843}#
                                       (#{f 38817}#
                                         (car #{clauses 38821}#)
                                         (cdr #{clauses 38821}#))))
                                 (let ((#{tmp 38846}#
                                         ($sc-dispatch
                                           #{clause 38820}#
                                           '(each-any any . each-any))))
                                   (if #{tmp 38846}#
                                     (@apply
                                       (lambda (#{k 38850}#
                                                #{e1 38851}#
                                                #{e2 38852}#)
                                         (list '#(syntax-object
                                                  if
                                                  ((top)
                                                   #(ribcage
                                                     #(k e1 e2)
                                                     #((top) (top) (top))
                                                     #("i38737"
                                                       "i38738"
                                                       "i38739"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(rest)
                                                     #((top))
                                                     #("i38733"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(f clause clauses)
                                                     #((top) (top) (top))
                                                     #("i38706"
                                                       "i38707"
                                                       "i38708"))
                                                   #(ribcage
                                                     #(e m1 m2)
                                                     #((top) (top) (top))
                                                     #("i38696"
                                                       "i38697"
                                                       "i38698"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i38693")))
                                                  (hygiene guile))
                                               (list '#(syntax-object
                                                        memv
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i38737"
                                                             "i38738"
                                                             "i38739"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i38733"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i38706"
                                                             "i38707"
                                                             "i38708"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i38696"
                                                             "i38697"
                                                             "i38698"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i38693")))
                                                        (hygiene guile))
                                                     '#(syntax-object
                                                        t
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i38737"
                                                             "i38738"
                                                             "i38739"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i38733"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i38706"
                                                             "i38707"
                                                             "i38708"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i38696"
                                                             "i38697"
                                                             "i38698"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i38693")))
                                                        (hygiene guile))
                                                     (list '#(syntax-object
                                                              quote
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i38737"
                                                                   "i38738"
                                                                   "i38739"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(rest)
                                                                 #((top))
                                                                 #("i38733"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i38706"
                                                                   "i38707"
                                                                   "i38708"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i38696"
                                                                   "i38697"
                                                                   "i38698"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i38693")))
                                                              (hygiene guile))
                                                           #{k 38850}#))
                                               (cons '#(syntax-object
                                                        begin
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i38737"
                                                             "i38738"
                                                             "i38739"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i38733"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i38706"
                                                             "i38707"
                                                             "i38708"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i38696"
                                                             "i38697"
                                                             "i38698"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i38693")))
                                                        (hygiene guile))
                                                     (cons #{e1 38851}#
                                                           #{e2 38852}#))
                                               #{tmp 38843}#))
                                       #{tmp 38846}#)
                                     (syntax-violation
                                       'case
                                       "bad clause"
                                       #{x 38747}#
                                       #{clause 38820}#))))))))
                        (#{f 38817}# #{m1 38754}# #{m2 38755}#))))
                (let ((#{body 38757}# #{tmp 38756}#))
                  (list '#(syntax-object
                           let
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(body) #((top)) #("i38704"))
                            #(ribcage
                              #(e m1 m2)
                              #((top) (top) (top))
                              #("i38696" "i38697" "i38698"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i38693")))
                           (hygiene guile))
                        (list (list '#(syntax-object
                                       t
                                       ((top)
                                        #(ribcage () () ())
                                        #(ribcage #(body) #((top)) #("i38704"))
                                        #(ribcage
                                          #(e m1 m2)
                                          #((top) (top) (top))
                                          #("i38696" "i38697" "i38698"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i38693")))
                                       (hygiene guile))
                                    #{e 38753}#))
                        #{body 38757}#))))
            #{tmp 38749}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 38747}#))))))

(define make-variable-transformer
  (lambda (#{proc 38870}#)
    (if (procedure? #{proc 38870}#)
      (letrec*
        ((#{trans 38871}#
           (lambda (#{x 38877}#)
             (#{proc 38870}# #{x 38877}#))))
        (begin
          (set-procedure-property!
            #{trans 38871}#
            'variable-transformer
            #t)
          #{trans 38871}#))
      (error "variable transformer not a procedure"
             #{proc 38870}#))))

(define identifier-syntax
  (make-syntax-transformer
    'identifier-syntax
    'macro
    (lambda (#{x 38909}#)
      (let ((#{tmp 38911}#
              ($sc-dispatch #{x 38909}# '(_ any))))
        (if #{tmp 38911}#
          (@apply
            (lambda (#{e 38915}#)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage #(e) #((top)) #("i38884"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i38881")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage #(e) #((top)) #("i38884"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("i38881")))
                        (hygiene guile)))
                    '#((#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage #(e) #((top)) #("i38884"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i38881")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          identifier-syntax
                          ((top)
                           #(ribcage #(e) #((top)) #("i38884"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i38881")))
                          (hygiene guile))))
                    (list '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage #(e) #((top)) #("i38884"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i38881")))
                             (hygiene guile))
                          '#(syntax-object
                             x
                             ((top)
                              #(ribcage #(e) #((top)) #("i38884"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i38881")))
                             (hygiene guile))
                          '()
                          (list '#(syntax-object
                                   id
                                   ((top)
                                    #(ribcage #(e) #((top)) #("i38884"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i38881")))
                                   (hygiene guile))
                                '(#(syntax-object
                                    identifier?
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i38884"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i38881")))
                                    (hygiene guile))
                                  (#(syntax-object
                                     syntax
                                     ((top)
                                      #(ribcage #(e) #((top)) #("i38884"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i38881")))
                                     (hygiene guile))
                                   #(syntax-object
                                     id
                                     ((top)
                                      #(ribcage #(e) #((top)) #("i38884"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i38881")))
                                     (hygiene guile))))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage #(e) #((top)) #("i38884"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i38881")))
                                         (hygiene guile))
                                      #{e 38915}#))
                          (list '(#(syntax-object
                                    _
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i38884"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i38881")))
                                    (hygiene guile))
                                  #(syntax-object
                                    x
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i38884"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i38881")))
                                    (hygiene guile))
                                  #(syntax-object
                                    ...
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i38884"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i38881")))
                                    (hygiene guile)))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage #(e) #((top)) #("i38884"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i38881")))
                                         (hygiene guile))
                                      (cons #{e 38915}#
                                            '(#(syntax-object
                                                x
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("i38884"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i38881")))
                                                (hygiene guile))
                                              #(syntax-object
                                                ...
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("i38884"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i38881")))
                                                (hygiene guile)))))))))
            #{tmp 38911}#)
          (let ((#{tmp 38916}#
                  ($sc-dispatch
                    #{x 38909}#
                    '(_ (any any)
                        ((#(free-id
                            #(syntax-object
                              set!
                              ((top)
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i38881")))
                              (hygiene guile)))
                          any
                          any)
                         any)))))
            (if (if #{tmp 38916}#
                  (@apply
                    (lambda (#{id 38920}#
                             #{exp1 38921}#
                             #{var 38922}#
                             #{val 38923}#
                             #{exp2 38924}#)
                      (if (identifier? #{id 38920}#)
                        (identifier? #{var 38922}#)
                        #f))
                    #{tmp 38916}#)
                  #f)
              (@apply
                (lambda (#{id 38925}#
                         #{exp1 38926}#
                         #{var 38927}#
                         #{val 38928}#
                         #{exp2 38929}#)
                  (list '#(syntax-object
                           make-variable-transformer
                           ((top)
                            #(ribcage
                              #(id exp1 var val exp2)
                              #((top) (top) (top) (top) (top))
                              #("i38899" "i38900" "i38901" "i38902" "i38903"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i38881")))
                           (hygiene guile))
                        (list '#(syntax-object
                                 lambda
                                 ((top)
                                  #(ribcage
                                    #(id exp1 var val exp2)
                                    #((top) (top) (top) (top) (top))
                                    #("i38899"
                                      "i38900"
                                      "i38901"
                                      "i38902"
                                      "i38903"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i38881")))
                                 (hygiene guile))
                              '(#(syntax-object
                                  x
                                  ((top)
                                   #(ribcage
                                     #(id exp1 var val exp2)
                                     #((top) (top) (top) (top) (top))
                                     #("i38899"
                                       "i38900"
                                       "i38901"
                                       "i38902"
                                       "i38903"))
                                   #(ribcage () () ())
                                   #(ribcage #(x) #((top)) #("i38881")))
                                  (hygiene guile)))
                              '#((#(syntax-object
                                    macro-type
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("i38899"
                                         "i38900"
                                         "i38901"
                                         "i38902"
                                         "i38903"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i38881")))
                                    (hygiene guile))
                                  .
                                  #(syntax-object
                                    variable-transformer
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("i38899"
                                         "i38900"
                                         "i38901"
                                         "i38902"
                                         "i38903"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i38881")))
                                    (hygiene guile))))
                              (list '#(syntax-object
                                       syntax-case
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("i38899"
                                            "i38900"
                                            "i38901"
                                            "i38902"
                                            "i38903"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i38881")))
                                       (hygiene guile))
                                    '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("i38899"
                                            "i38900"
                                            "i38901"
                                            "i38902"
                                            "i38903"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i38881")))
                                       (hygiene guile))
                                    '(#(syntax-object
                                        set!
                                        ((top)
                                         #(ribcage
                                           #(id exp1 var val exp2)
                                           #((top) (top) (top) (top) (top))
                                           #("i38899"
                                             "i38900"
                                             "i38901"
                                             "i38902"
                                             "i38903"))
                                         #(ribcage () () ())
                                         #(ribcage #(x) #((top)) #("i38881")))
                                        (hygiene guile)))
                                    (list (list '#(syntax-object
                                                   set!
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i38899"
                                                        "i38900"
                                                        "i38901"
                                                        "i38902"
                                                        "i38903"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i38881")))
                                                   (hygiene guile))
                                                #{var 38927}#
                                                #{val 38928}#)
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i38899"
                                                        "i38900"
                                                        "i38901"
                                                        "i38902"
                                                        "i38903"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i38881")))
                                                   (hygiene guile))
                                                #{exp2 38929}#))
                                    (list (cons #{id 38925}#
                                                '(#(syntax-object
                                                    x
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i38899"
                                                         "i38900"
                                                         "i38901"
                                                         "i38902"
                                                         "i38903"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i38881")))
                                                    (hygiene guile))
                                                  #(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i38899"
                                                         "i38900"
                                                         "i38901"
                                                         "i38902"
                                                         "i38903"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i38881")))
                                                    (hygiene guile))))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i38899"
                                                        "i38900"
                                                        "i38901"
                                                        "i38902"
                                                        "i38903"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i38881")))
                                                   (hygiene guile))
                                                (cons #{exp1 38926}#
                                                      '(#(syntax-object
                                                          x
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("i38899"
                                                               "i38900"
                                                               "i38901"
                                                               "i38902"
                                                               "i38903"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i38881")))
                                                          (hygiene guile))
                                                        #(syntax-object
                                                          ...
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("i38899"
                                                               "i38900"
                                                               "i38901"
                                                               "i38902"
                                                               "i38903"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i38881")))
                                                          (hygiene guile))))))
                                    (list #{id 38925}#
                                          (list '#(syntax-object
                                                   identifier?
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i38899"
                                                        "i38900"
                                                        "i38901"
                                                        "i38902"
                                                        "i38903"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i38881")))
                                                   (hygiene guile))
                                                (list '#(syntax-object
                                                         syntax
                                                         ((top)
                                                          #(ribcage
                                                            #(id
                                                              exp1
                                                              var
                                                              val
                                                              exp2)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i38899"
                                                              "i38900"
                                                              "i38901"
                                                              "i38902"
                                                              "i38903"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i38881")))
                                                         (hygiene guile))
                                                      #{id 38925}#))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i38899"
                                                        "i38900"
                                                        "i38901"
                                                        "i38902"
                                                        "i38903"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i38881")))
                                                   (hygiene guile))
                                                #{exp1 38926}#))))))
                #{tmp 38916}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 38909}#))))))))

(define define*
  (make-syntax-transformer
    'define*
    'macro
    (lambda (#{x 38961}#)
      (let ((#{tmp 38963}#
              ($sc-dispatch
                #{x 38961}#
                '(_ (any . any) any . each-any))))
        (if #{tmp 38963}#
          (@apply
            (lambda (#{id 38967}#
                     #{args 38968}#
                     #{b0 38969}#
                     #{b1 38970}#)
              (list '#(syntax-object
                       define
                       ((top)
                        #(ribcage
                          #(id args b0 b1)
                          #((top) (top) (top) (top))
                          #("i38943" "i38944" "i38945" "i38946"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i38940")))
                       (hygiene guile))
                    #{id 38967}#
                    (cons '#(syntax-object
                             lambda*
                             ((top)
                              #(ribcage
                                #(id args b0 b1)
                                #((top) (top) (top) (top))
                                #("i38943" "i38944" "i38945" "i38946"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i38940")))
                             (hygiene guile))
                          (cons #{args 38968}#
                                (cons #{b0 38969}# #{b1 38970}#)))))
            #{tmp 38963}#)
          (let ((#{tmp 38971}#
                  ($sc-dispatch #{x 38961}# '(_ any any))))
            (if (if #{tmp 38971}#
                  (@apply
                    (lambda (#{id 38975}# #{val 38976}#)
                      (identifier?
                        '#(syntax-object
                           x
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("i38953" "i38954"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i38940")))
                           (hygiene guile))))
                    #{tmp 38971}#)
                  #f)
              (@apply
                (lambda (#{id 38977}# #{val 38978}#)
                  (list '#(syntax-object
                           define
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("i38957" "i38958"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i38940")))
                           (hygiene guile))
                        #{id 38977}#
                        #{val 38978}#))
                #{tmp 38971}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 38961}#))))))))

