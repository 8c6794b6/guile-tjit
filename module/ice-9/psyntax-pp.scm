(eval-when (compile) (set-current-module (resolve-module (quote (guile)))))
(if #f #f)

(letrec ((#{and-map*\ 20}#
           (lambda (#{f\ 192}# #{first\ 193}# . #{rest\ 194}#)
             (let ((#{t\ 200}# (null? #{first\ 193}#)))
               (if #{t\ 200}#
                 #{t\ 200}#
                 (if (null? #{rest\ 194}#)
                   (letrec ((#{andmap\ 204}#
                              (lambda (#{first\ 205}#)
                                (let ((#{x\ 208}# (car #{first\ 205}#))
                                      (#{first\ 209}# (cdr #{first\ 205}#)))
                                  (if (null? #{first\ 209}#)
                                    (#{f\ 192}# #{x\ 208}#)
                                    (if (#{f\ 192}# #{x\ 208}#)
                                      (#{andmap\ 204}# #{first\ 209}#)
                                      #f))))))
                     (#{andmap\ 204}# #{first\ 193}#))
                   (letrec ((#{andmap\ 215}#
                              (lambda (#{first\ 216}# #{rest\ 217}#)
                                (let ((#{x\ 222}# (car #{first\ 216}#))
                                      (#{xr\ 223}# (map car #{rest\ 217}#))
                                      (#{first\ 224}# (cdr #{first\ 216}#))
                                      (#{rest\ 225}# (map cdr #{rest\ 217}#)))
                                  (if (null? #{first\ 224}#)
                                    (apply #{f\ 192}#
                                           (cons #{x\ 222}# #{xr\ 223}#))
                                    (if (apply #{f\ 192}#
                                               (cons #{x\ 222}# #{xr\ 223}#))
                                      (#{andmap\ 215}#
                                        #{first\ 224}#
                                        #{rest\ 225}#)
                                      #f))))))
                     (#{andmap\ 215}# #{first\ 193}# #{rest\ 194}#))))))))
  (letrec ((#{lambda-var-list\ 487}#
             (lambda (#{vars\ 702}#)
               (letrec ((#{lvl\ 708}#
                          (lambda (#{vars\ 709}# #{ls\ 710}# #{w\ 711}#)
                            (if (pair? #{vars\ 709}#)
                              (#{lvl\ 708}#
                                (cdr #{vars\ 709}#)
                                (cons (#{wrap\ 441}#
                                        (car #{vars\ 709}#)
                                        #{w\ 711}#
                                        #f)
                                      #{ls\ 710}#)
                                #{w\ 711}#)
                              (if (#{id?\ 372}# #{vars\ 709}#)
                                (cons (#{wrap\ 441}#
                                        #{vars\ 709}#
                                        #{w\ 711}#
                                        #f)
                                      #{ls\ 710}#)
                                (if (null? #{vars\ 709}#)
                                  #{ls\ 710}#
                                  (if (#{syntax-object?\ 336}# #{vars\ 709}#)
                                    (#{lvl\ 708}#
                                      (#{syntax-object-expression\ 338}#
                                        #{vars\ 709}#)
                                      #{ls\ 710}#
                                      (#{join-wraps\ 423}#
                                        #{w\ 711}#
                                        (#{syntax-object-wrap\ 340}#
                                          #{vars\ 709}#)))
                                    (cons #{vars\ 709}# #{ls\ 710}#))))))))
                 (#{lvl\ 708}#
                   #{vars\ 702}#
                   '()
                   '(())))))
           (#{gen-var\ 485}#
             (lambda (#{id\ 722}#)
               (let ((#{id\ 725}#
                       (if (#{syntax-object?\ 336}# #{id\ 722}#)
                         (#{syntax-object-expression\ 338}# #{id\ 722}#)
                         #{id\ 722}#)))
                 (gensym
                   (string-append (symbol->string #{id\ 725}#) " ")))))
           (#{strip\ 483}#
             (lambda (#{x\ 727}# #{w\ 728}#)
               (if (memq 'top
                         (#{wrap-marks\ 379}# #{w\ 728}#))
                 #{x\ 727}#
                 (letrec ((#{f\ 734}# (lambda (#{x\ 735}#)
                                        (if (#{syntax-object?\ 336}#
                                              #{x\ 735}#)
                                          (#{strip\ 483}#
                                            (#{syntax-object-expression\ 338}#
                                              #{x\ 735}#)
                                            (#{syntax-object-wrap\ 340}#
                                              #{x\ 735}#))
                                          (if (pair? #{x\ 735}#)
                                            (let ((#{a\ 742}# (#{f\ 734}# (car #{x\ 735}#)))
                                                  (#{d\ 743}# (#{f\ 734}# (cdr #{x\ 735}#))))
                                              (if (if (eq? #{a\ 742}#
                                                           (car #{x\ 735}#))
                                                    (eq? #{d\ 743}#
                                                         (cdr #{x\ 735}#))
                                                    #f)
                                                #{x\ 735}#
                                                (cons #{a\ 742}# #{d\ 743}#)))
                                            (if (vector? #{x\ 735}#)
                                              (let ((#{old\ 749}#
                                                      (vector->list
                                                        #{x\ 735}#)))
                                                (let ((#{new\ 751}#
                                                        (map #{f\ 734}#
                                                             #{old\ 749}#)))
                                                  (if (#{and-map*\ 20}#
                                                        eq?
                                                        #{old\ 749}#
                                                        #{new\ 751}#)
                                                    #{x\ 735}#
                                                    (list->vector
                                                      #{new\ 751}#))))
                                              #{x\ 735}#))))))
                   (#{f\ 734}# #{x\ 727}#)))))
           (#{chi-lambda-case\ 481}#
             (lambda (#{e\ 753}#
                      #{r\ 754}#
                      #{w\ 755}#
                      #{s\ 756}#
                      #{mod\ 757}#
                      #{get-formals\ 758}#
                      #{clauses\ 759}#)
               (letrec ((#{expand-body\ 774}#
                          (lambda (#{req\ 775}#
                                   #{opt\ 776}#
                                   #{rest\ 777}#
                                   #{kw\ 778}#
                                   #{body\ 779}#
                                   #{vars\ 780}#
                                   #{r*\ 781}#
                                   #{w*\ 782}#
                                   #{inits\ 783}#
                                   #{meta\ 784}#)
                            ((lambda (#{tmp\ 795}#)
                               ((lambda (#{tmp\ 796}#)
                                  (if (if #{tmp\ 796}#
                                        (apply (lambda (#{docstring\ 800}#
                                                        #{e1\ 801}#
                                                        #{e2\ 802}#)
                                                 (string?
                                                   (syntax->datum
                                                     #{docstring\ 800}#)))
                                               #{tmp\ 796}#)
                                        #f)
                                    (apply (lambda (#{docstring\ 806}#
                                                    #{e1\ 807}#
                                                    #{e2\ 808}#)
                                             (#{expand-body\ 774}#
                                               #{req\ 775}#
                                               #{opt\ 776}#
                                               #{rest\ 777}#
                                               #{kw\ 778}#
                                               (cons #{e1\ 807}# #{e2\ 808}#)
                                               #{vars\ 780}#
                                               #{r*\ 781}#
                                               #{w*\ 782}#
                                               #{inits\ 783}#
                                               (append
                                                 #{meta\ 784}#
                                                 (list (cons 'documentation
                                                             (syntax->datum
                                                               #{docstring\ 806}#))))))
                                           #{tmp\ 796}#)
                                    ((lambda (#{tmp\ 811}#)
                                       (if #{tmp\ 811}#
                                         (apply (lambda (#{k\ 816}#
                                                         #{v\ 817}#
                                                         #{e1\ 818}#
                                                         #{e2\ 819}#)
                                                  (#{expand-body\ 774}#
                                                    #{req\ 775}#
                                                    #{opt\ 776}#
                                                    #{rest\ 777}#
                                                    #{kw\ 778}#
                                                    (cons #{e1\ 818}#
                                                          #{e2\ 819}#)
                                                    #{vars\ 780}#
                                                    #{r*\ 781}#
                                                    #{w*\ 782}#
                                                    #{inits\ 783}#
                                                    (append
                                                      #{meta\ 784}#
                                                      (syntax->datum
                                                        (map cons
                                                             #{k\ 816}#
                                                             #{v\ 817}#)))))
                                                #{tmp\ 811}#)
                                         ((lambda (#{tmp\ 823}#)
                                            (if #{tmp\ 823}#
                                              (apply (lambda (#{e1\ 826}#
                                                              #{e2\ 827}#)
                                                       (values
                                                         #{meta\ 784}#
                                                         #{req\ 775}#
                                                         #{opt\ 776}#
                                                         #{rest\ 777}#
                                                         #{kw\ 778}#
                                                         #{inits\ 783}#
                                                         #{vars\ 780}#
                                                         (#{chi-body\ 465}#
                                                           (cons #{e1\ 826}#
                                                                 #{e2\ 827}#)
                                                           (#{source-wrap\ 443}#
                                                             #{e\ 753}#
                                                             #{w\ 755}#
                                                             #{s\ 756}#
                                                             #{mod\ 757}#)
                                                           #{r*\ 781}#
                                                           #{w*\ 782}#
                                                           #{mod\ 757}#)))
                                                     #{tmp\ 823}#)
                                              (syntax-violation
                                                #f
                                                "source expression failed to match any pattern"
                                                #{tmp\ 795}#)))
                                          ($sc-dispatch
                                            #{tmp\ 795}#
                                            '(any . each-any)))))
                                     ($sc-dispatch
                                       #{tmp\ 795}#
                                       '(#(vector #(each (any . any)))
                                         any
                                         .
                                         each-any)))))
                                ($sc-dispatch
                                  #{tmp\ 795}#
                                  '(any any . each-any))))
                             #{body\ 779}#)))
                        (#{expand-kw\ 772}#
                          (lambda (#{req\ 829}#
                                   #{opt\ 830}#
                                   #{rest\ 831}#
                                   #{kw\ 832}#
                                   #{body\ 833}#
                                   #{vars\ 834}#
                                   #{r*\ 835}#
                                   #{w*\ 836}#
                                   #{aok\ 837}#
                                   #{out\ 838}#
                                   #{inits\ 839}#)
                            (if (pair? #{kw\ 832}#)
                              ((lambda (#{tmp\ 853}#)
                                 ((lambda (#{tmp\ 854}#)
                                    (if #{tmp\ 854}#
                                      (apply (lambda (#{k\ 858}#
                                                      #{id\ 859}#
                                                      #{i\ 860}#)
                                               (let ((#{v\ 863}# (#{gen-var\ 485}#
                                                                   #{id\ 859}#)))
                                                 (let ((#{l\ 865}# (#{gen-labels\ 390}#
                                                                     (list #{v\ 863}#))))
                                                   (let ((#{r**\ 867}#
                                                           (#{extend-var-env\ 362}#
                                                             #{l\ 865}#
                                                             (list #{v\ 863}#)
                                                             #{r*\ 835}#)))
                                                     (let ((#{w**\ 869}#
                                                             (#{make-binding-wrap\ 419}#
                                                               (list #{id\ 859}#)
                                                               #{l\ 865}#
                                                               #{w*\ 836}#)))
                                                       (#{expand-kw\ 772}#
                                                         #{req\ 829}#
                                                         #{opt\ 830}#
                                                         #{rest\ 831}#
                                                         (cdr #{kw\ 832}#)
                                                         #{body\ 833}#
                                                         (cons #{v\ 863}#
                                                               #{vars\ 834}#)
                                                         #{r**\ 867}#
                                                         #{w**\ 869}#
                                                         #{aok\ 837}#
                                                         (cons (list (syntax->datum
                                                                       #{k\ 858}#)
                                                                     (syntax->datum
                                                                       #{id\ 859}#)
                                                                     #{v\ 863}#)
                                                               #{out\ 838}#)
                                                         (cons (#{chi\ 457}#
                                                                 #{i\ 860}#
                                                                 #{r*\ 835}#
                                                                 #{w*\ 836}#
                                                                 #{mod\ 757}#)
                                                               #{inits\ 839}#)))))))
                                             #{tmp\ 854}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{tmp\ 853}#)))
                                  ($sc-dispatch
                                    #{tmp\ 853}#
                                    '(any any any))))
                               (car #{kw\ 832}#))
                              (#{expand-body\ 774}#
                                #{req\ 829}#
                                #{opt\ 830}#
                                #{rest\ 831}#
                                (if (let ((#{t\ 873}# #{aok\ 837}#))
                                      (if #{t\ 873}#
                                        #{t\ 873}#
                                        (pair? #{out\ 838}#)))
                                  (cons #{aok\ 837}# (reverse #{out\ 838}#))
                                  #f)
                                #{body\ 833}#
                                (reverse #{vars\ 834}#)
                                #{r*\ 835}#
                                #{w*\ 836}#
                                (reverse #{inits\ 839}#)
                                '()))))
                        (#{expand-opt\ 770}#
                          (lambda (#{req\ 875}#
                                   #{opt\ 876}#
                                   #{rest\ 877}#
                                   #{kw\ 878}#
                                   #{body\ 879}#
                                   #{vars\ 880}#
                                   #{r*\ 881}#
                                   #{w*\ 882}#
                                   #{out\ 883}#
                                   #{inits\ 884}#)
                            (if (pair? #{opt\ 876}#)
                              ((lambda (#{tmp\ 897}#)
                                 ((lambda (#{tmp\ 898}#)
                                    (if #{tmp\ 898}#
                                      (apply (lambda (#{id\ 901}# #{i\ 902}#)
                                               (let ((#{v\ 905}# (#{gen-var\ 485}#
                                                                   #{id\ 901}#)))
                                                 (let ((#{l\ 907}# (#{gen-labels\ 390}#
                                                                     (list #{v\ 905}#))))
                                                   (let ((#{r**\ 909}#
                                                           (#{extend-var-env\ 362}#
                                                             #{l\ 907}#
                                                             (list #{v\ 905}#)
                                                             #{r*\ 881}#)))
                                                     (let ((#{w**\ 911}#
                                                             (#{make-binding-wrap\ 419}#
                                                               (list #{id\ 901}#)
                                                               #{l\ 907}#
                                                               #{w*\ 882}#)))
                                                       (#{expand-opt\ 770}#
                                                         #{req\ 875}#
                                                         (cdr #{opt\ 876}#)
                                                         #{rest\ 877}#
                                                         #{kw\ 878}#
                                                         #{body\ 879}#
                                                         (cons #{v\ 905}#
                                                               #{vars\ 880}#)
                                                         #{r**\ 909}#
                                                         #{w**\ 911}#
                                                         (cons (syntax->datum
                                                                 #{id\ 901}#)
                                                               #{out\ 883}#)
                                                         (cons (#{chi\ 457}#
                                                                 #{i\ 902}#
                                                                 #{r*\ 881}#
                                                                 #{w*\ 882}#
                                                                 #{mod\ 757}#)
                                                               #{inits\ 884}#)))))))
                                             #{tmp\ 898}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{tmp\ 897}#)))
                                  ($sc-dispatch
                                    #{tmp\ 897}#
                                    '(any any))))
                               (car #{opt\ 876}#))
                              (if #{rest\ 877}#
                                (let ((#{v\ 916}# (#{gen-var\ 485}#
                                                    #{rest\ 877}#)))
                                  (let ((#{l\ 918}# (#{gen-labels\ 390}#
                                                      (list #{v\ 916}#))))
                                    (let ((#{r*\ 920}#
                                            (#{extend-var-env\ 362}#
                                              #{l\ 918}#
                                              (list #{v\ 916}#)
                                              #{r*\ 881}#)))
                                      (let ((#{w*\ 922}#
                                              (#{make-binding-wrap\ 419}#
                                                (list #{rest\ 877}#)
                                                #{l\ 918}#
                                                #{w*\ 882}#)))
                                        (#{expand-kw\ 772}#
                                          #{req\ 875}#
                                          (if (pair? #{out\ 883}#)
                                            (reverse #{out\ 883}#)
                                            #f)
                                          (syntax->datum #{rest\ 877}#)
                                          (if (pair? #{kw\ 878}#)
                                            (cdr #{kw\ 878}#)
                                            #{kw\ 878}#)
                                          #{body\ 879}#
                                          (cons #{v\ 916}# #{vars\ 880}#)
                                          #{r*\ 920}#
                                          #{w*\ 922}#
                                          (if (pair? #{kw\ 878}#)
                                            (car #{kw\ 878}#)
                                            #f)
                                          '()
                                          #{inits\ 884}#)))))
                                (#{expand-kw\ 772}#
                                  #{req\ 875}#
                                  (if (pair? #{out\ 883}#)
                                    (reverse #{out\ 883}#)
                                    #f)
                                  #f
                                  (if (pair? #{kw\ 878}#)
                                    (cdr #{kw\ 878}#)
                                    #{kw\ 878}#)
                                  #{body\ 879}#
                                  #{vars\ 880}#
                                  #{r*\ 881}#
                                  #{w*\ 882}#
                                  (if (pair? #{kw\ 878}#) (car #{kw\ 878}#) #f)
                                  '()
                                  #{inits\ 884}#)))))
                        (#{expand-req\ 768}#
                          (lambda (#{req\ 924}#
                                   #{opt\ 925}#
                                   #{rest\ 926}#
                                   #{kw\ 927}#
                                   #{body\ 928}#)
                            (let ((#{vars\ 936}#
                                    (map #{gen-var\ 485}# #{req\ 924}#))
                                  (#{labels\ 937}#
                                    (#{gen-labels\ 390}# #{req\ 924}#)))
                              (let ((#{r*\ 940}#
                                      (#{extend-var-env\ 362}#
                                        #{labels\ 937}#
                                        #{vars\ 936}#
                                        #{r\ 754}#))
                                    (#{w*\ 941}#
                                      (#{make-binding-wrap\ 419}#
                                        #{req\ 924}#
                                        #{labels\ 937}#
                                        #{w\ 755}#)))
                                (#{expand-opt\ 770}#
                                  (map syntax->datum #{req\ 924}#)
                                  #{opt\ 925}#
                                  #{rest\ 926}#
                                  #{kw\ 927}#
                                  #{body\ 928}#
                                  (reverse #{vars\ 936}#)
                                  #{r*\ 940}#
                                  #{w*\ 941}#
                                  '()
                                  '()))))))
                 ((lambda (#{tmp\ 942}#)
                    ((lambda (#{tmp\ 943}#)
                       (if #{tmp\ 943}#
                         (apply (lambda () (values (quote ()) #f))
                                #{tmp\ 943}#)
                         ((lambda (#{tmp\ 944}#)
                            (if #{tmp\ 944}#
                              (apply (lambda (#{args\ 951}#
                                              #{e1\ 952}#
                                              #{e2\ 953}#
                                              #{args*\ 954}#
                                              #{e1*\ 955}#
                                              #{e2*\ 956}#)
                                       (call-with-values
                                         (lambda ()
                                           (#{get-formals\ 758}#
                                             #{args\ 951}#))
                                         (lambda (#{req\ 957}#
                                                  #{opt\ 958}#
                                                  #{rest\ 959}#
                                                  #{kw\ 960}#)
                                           (call-with-values
                                             (lambda ()
                                               (#{expand-req\ 768}#
                                                 #{req\ 957}#
                                                 #{opt\ 958}#
                                                 #{rest\ 959}#
                                                 #{kw\ 960}#
                                                 (cons #{e1\ 952}#
                                                       #{e2\ 953}#)))
                                             (lambda (#{meta\ 966}#
                                                      #{req\ 967}#
                                                      #{opt\ 968}#
                                                      #{rest\ 969}#
                                                      #{kw\ 970}#
                                                      #{inits\ 971}#
                                                      #{vars\ 972}#
                                                      #{body\ 973}#)
                                               (call-with-values
                                                 (lambda ()
                                                   (#{chi-lambda-case\ 481}#
                                                     #{e\ 753}#
                                                     #{r\ 754}#
                                                     #{w\ 755}#
                                                     #{s\ 756}#
                                                     #{mod\ 757}#
                                                     #{get-formals\ 758}#
                                                     (map (lambda (#{tmp\ 984}#
                                                                   #{tmp\ 983}#
                                                                   #{tmp\ 982}#)
                                                            (cons #{tmp\ 982}#
                                                                  (cons #{tmp\ 983}#
                                                                        #{tmp\ 984}#)))
                                                          #{e2*\ 956}#
                                                          #{e1*\ 955}#
                                                          #{args*\ 954}#)))
                                                 (lambda (#{meta*\ 986}#
                                                          #{else*\ 987}#)
                                                   (values
                                                     (append
                                                       #{meta\ 966}#
                                                       #{meta*\ 986}#)
                                                     (#{build-lambda-case\ 318}#
                                                       #{s\ 756}#
                                                       #{req\ 967}#
                                                       #{opt\ 968}#
                                                       #{rest\ 969}#
                                                       #{kw\ 970}#
                                                       #{inits\ 971}#
                                                       #{vars\ 972}#
                                                       #{body\ 973}#
                                                       #{else*\ 987}#)))))))))
                                     #{tmp\ 944}#)
                              (syntax-violation
                                #f
                                "source expression failed to match any pattern"
                                #{tmp\ 942}#)))
                          ($sc-dispatch
                            #{tmp\ 942}#
                            '((any any . each-any)
                              .
                              #(each (any any . each-any)))))))
                     ($sc-dispatch #{tmp\ 942}# (quote ()))))
                  #{clauses\ 759}#))))
           (#{lambda*-formals\ 479}#
             (lambda (#{orig-args\ 990}#)
               (letrec ((#{check\ 1001}#
                          (lambda (#{req\ 1002}#
                                   #{opt\ 1003}#
                                   #{rest\ 1004}#
                                   #{kw\ 1005}#)
                            (if (#{distinct-bound-ids?\ 437}#
                                  (append
                                    #{req\ 1002}#
                                    (map car #{opt\ 1003}#)
                                    (if #{rest\ 1004}#
                                      (list #{rest\ 1004}#)
                                      '())
                                    (if (pair? #{kw\ 1005}#)
                                      (map cadr (cdr #{kw\ 1005}#))
                                      '())))
                              (values
                                #{req\ 1002}#
                                #{opt\ 1003}#
                                #{rest\ 1004}#
                                #{kw\ 1005}#)
                              (syntax-violation
                                'lambda*
                                "duplicate identifier in argument list"
                                #{orig-args\ 990}#))))
                        (#{rest\ 999}#
                          (lambda (#{args\ 1013}#
                                   #{req\ 1014}#
                                   #{opt\ 1015}#
                                   #{kw\ 1016}#)
                            ((lambda (#{tmp\ 1021}#)
                               ((lambda (#{tmp\ 1022}#)
                                  (if (if #{tmp\ 1022}#
                                        (apply (lambda (#{r\ 1024}#)
                                                 (#{id?\ 372}# #{r\ 1024}#))
                                               #{tmp\ 1022}#)
                                        #f)
                                    (apply (lambda (#{r\ 1026}#)
                                             (#{check\ 1001}#
                                               #{req\ 1014}#
                                               #{opt\ 1015}#
                                               #{r\ 1026}#
                                               #{kw\ 1016}#))
                                           #{tmp\ 1022}#)
                                    ((lambda (#{else\ 1028}#)
                                       (syntax-violation
                                         'lambda*
                                         "invalid rest argument"
                                         #{orig-args\ 990}#
                                         #{args\ 1013}#))
                                     #{tmp\ 1021}#)))
                                (list #{tmp\ 1021}#)))
                             #{args\ 1013}#)))
                        (#{key\ 997}#
                          (lambda (#{args\ 1029}#
                                   #{req\ 1030}#
                                   #{opt\ 1031}#
                                   #{rkey\ 1032}#)
                            ((lambda (#{tmp\ 1037}#)
                               ((lambda (#{tmp\ 1038}#)
                                  (if #{tmp\ 1038}#
                                    (apply (lambda ()
                                             (#{check\ 1001}#
                                               #{req\ 1030}#
                                               #{opt\ 1031}#
                                               #f
                                               (cons #f
                                                     (reverse
                                                       #{rkey\ 1032}#))))
                                           #{tmp\ 1038}#)
                                    ((lambda (#{tmp\ 1039}#)
                                       (if (if #{tmp\ 1039}#
                                             (apply (lambda (#{a\ 1042}#
                                                             #{b\ 1043}#)
                                                      (#{id?\ 372}#
                                                        #{a\ 1042}#))
                                                    #{tmp\ 1039}#)
                                             #f)
                                         (apply (lambda (#{a\ 1046}#
                                                         #{b\ 1047}#)
                                                  ((lambda (#{tmp\ 1049}#)
                                                     ((lambda (#{k\ 1051}#)
                                                        (#{key\ 997}#
                                                          #{b\ 1047}#
                                                          #{req\ 1030}#
                                                          #{opt\ 1031}#
                                                          (cons (cons #{k\ 1051}#
                                                                      (cons #{a\ 1046}#
                                                                            '(#(syntax-object
                                                                                #f
                                                                                ((top)
                                                                                 #(ribcage
                                                                                   #(k)
                                                                                   #((top))
                                                                                   #("i1050"))
                                                                                 #(ribcage
                                                                                   #(a
                                                                                     b)
                                                                                   #((top)
                                                                                     (top))
                                                                                   #("i1044"
                                                                                     "i1045"))
                                                                                 #(ribcage
                                                                                   ()
                                                                                   ()
                                                                                   ())
                                                                                 #(ribcage
                                                                                   #(args
                                                                                     req
                                                                                     opt
                                                                                     rkey)
                                                                                   #((top)
                                                                                     (top)
                                                                                     (top)
                                                                                     (top))
                                                                                   #("i1033"
                                                                                     "i1034"
                                                                                     "i1035"
                                                                                     "i1036"))
                                                                                 #(ribcage
                                                                                   (check rest
                                                                                          key
                                                                                          opt
                                                                                          req)
                                                                                   ((top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top))
                                                                                   ("i1000"
                                                                                    "i998"
                                                                                    "i996"
                                                                                    "i994"
                                                                                    "i992"))
                                                                                 #(ribcage
                                                                                   #(orig-args)
                                                                                   #((top))
                                                                                   #("i991"))
                                                                                 #(ribcage
                                                                                   (lambda-var-list
                                                                                     gen-var
                                                                                     strip
                                                                                     chi-lambda-case
                                                                                     lambda*-formals
                                                                                     chi-simple-lambda
                                                                                     lambda-formals
                                                                                     ellipsis?
                                                                                     chi-void
                                                                                     eval-local-transformer
                                                                                     chi-local-syntax
                                                                                     chi-body
                                                                                     chi-macro
                                                                                     chi-application
                                                                                     chi-expr
                                                                                     chi
                                                                                     chi-top
                                                                                     syntax-type
                                                                                     chi-when-list
                                                                                     chi-install-global
                                                                                     chi-top-sequence
                                                                                     chi-sequence
                                                                                     source-wrap
                                                                                     wrap
                                                                                     bound-id-member?
                                                                                     distinct-bound-ids?
                                                                                     valid-bound-ids?
                                                                                     bound-id=?
                                                                                     free-id=?
                                                                                     id-var-name
                                                                                     same-marks?
                                                                                     join-marks
                                                                                     join-wraps
                                                                                     smart-append
                                                                                     make-binding-wrap
                                                                                     extend-ribcage!
                                                                                     make-empty-ribcage
                                                                                     new-mark
                                                                                     anti-mark
                                                                                     the-anti-mark
                                                                                     top-marked?
                                                                                     top-wrap
                                                                                     empty-wrap
                                                                                     set-ribcage-labels!
                                                                                     set-ribcage-marks!
                                                                                     set-ribcage-symnames!
                                                                                     ribcage-labels
                                                                                     ribcage-marks
                                                                                     ribcage-symnames
                                                                                     ribcage?
                                                                                     make-ribcage
                                                                                     gen-labels
                                                                                     gen-label
                                                                                     make-rename
                                                                                     rename-marks
                                                                                     rename-new
                                                                                     rename-old
                                                                                     subst-rename?
                                                                                     wrap-subst
                                                                                     wrap-marks
                                                                                     make-wrap
                                                                                     id-sym-name&marks
                                                                                     id-sym-name
                                                                                     id?
                                                                                     nonsymbol-id?
                                                                                     global-extend
                                                                                     lookup
                                                                                     macros-only-env
                                                                                     extend-var-env
                                                                                     extend-env
                                                                                     null-env
                                                                                     binding-value
                                                                                     binding-type
                                                                                     make-binding
                                                                                     arg-check
                                                                                     source-annotation
                                                                                     no-source
                                                                                     set-syntax-object-module!
                                                                                     set-syntax-object-wrap!
                                                                                     set-syntax-object-expression!
                                                                                     syntax-object-module
                                                                                     syntax-object-wrap
                                                                                     syntax-object-expression
                                                                                     syntax-object?
                                                                                     make-syntax-object
                                                                                     build-lexical-var
                                                                                     build-letrec
                                                                                     build-named-let
                                                                                     build-let
                                                                                     build-sequence
                                                                                     build-data
                                                                                     build-primref
                                                                                     build-lambda-case
                                                                                     build-case-lambda
                                                                                     build-simple-lambda
                                                                                     build-global-definition
                                                                                     maybe-name-value!
                                                                                     build-global-assignment
                                                                                     build-global-reference
                                                                                     analyze-variable
                                                                                     build-lexical-assignment
                                                                                     build-lexical-reference
                                                                                     build-dynlet
                                                                                     build-conditional
                                                                                     build-application
                                                                                     build-void
                                                                                     decorate-source
                                                                                     get-global-definition-hook
                                                                                     put-global-definition-hook
                                                                                     gensym-hook
                                                                                     local-eval-hook
                                                                                     top-level-eval-hook
                                                                                     fx<
                                                                                     fx=
                                                                                     fx-
                                                                                     fx+
                                                                                     set-lambda-meta!
                                                                                     lambda-meta
                                                                                     lambda?
                                                                                     make-dynlet
                                                                                     make-letrec
                                                                                     make-let
                                                                                     make-lambda-case
                                                                                     make-lambda
                                                                                     make-sequence
                                                                                     make-application
                                                                                     make-conditional
                                                                                     make-toplevel-define
                                                                                     make-toplevel-set
                                                                                     make-toplevel-ref
                                                                                     make-module-set
                                                                                     make-module-ref
                                                                                     make-lexical-set
                                                                                     make-lexical-ref
                                                                                     make-primitive-ref
                                                                                     make-const
                                                                                     make-void)
                                                                                   ((top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top))
                                                                                   ("i486"
                                                                                    "i484"
                                                                                    "i482"
                                                                                    "i480"
                                                                                    "i478"
                                                                                    "i476"
                                                                                    "i474"
                                                                                    "i472"
                                                                                    "i470"
                                                                                    "i468"
                                                                                    "i466"
                                                                                    "i464"
                                                                                    "i462"
                                                                                    "i460"
                                                                                    "i458"
                                                                                    "i456"
                                                                                    "i454"
                                                                                    "i452"
                                                                                    "i450"
                                                                                    "i448"
                                                                                    "i446"
                                                                                    "i444"
                                                                                    "i442"
                                                                                    "i440"
                                                                                    "i438"
                                                                                    "i436"
                                                                                    "i434"
                                                                                    "i432"
                                                                                    "i430"
                                                                                    "i428"
                                                                                    "i426"
                                                                                    "i424"
                                                                                    "i422"
                                                                                    "i420"
                                                                                    "i418"
                                                                                    "i416"
                                                                                    "i415"
                                                                                    "i414"
                                                                                    "i412"
                                                                                    "i411"
                                                                                    "i410"
                                                                                    "i409"
                                                                                    "i408"
                                                                                    "i406"
                                                                                    "i404"
                                                                                    "i402"
                                                                                    "i400"
                                                                                    "i398"
                                                                                    "i396"
                                                                                    "i394"
                                                                                    "i392"
                                                                                    "i389"
                                                                                    "i387"
                                                                                    "i386"
                                                                                    "i385"
                                                                                    "i384"
                                                                                    "i383"
                                                                                    "i382"
                                                                                    "i380"
                                                                                    "i378"
                                                                                    "i376"
                                                                                    "i374"
                                                                                    "i373"
                                                                                    "i371"
                                                                                    "i369"
                                                                                    "i367"
                                                                                    "i365"
                                                                                    "i363"
                                                                                    "i361"
                                                                                    "i359"
                                                                                    "i358"
                                                                                    "i356"
                                                                                    "i354"
                                                                                    "i353"
                                                                                    "i352"
                                                                                    "i350"
                                                                                    "i349"
                                                                                    "i347"
                                                                                    "i345"
                                                                                    "i343"
                                                                                    "i341"
                                                                                    "i339"
                                                                                    "i337"
                                                                                    "i335"
                                                                                    "i333"
                                                                                    "i331"
                                                                                    "i329"
                                                                                    "i327"
                                                                                    "i325"
                                                                                    "i323"
                                                                                    "i321"
                                                                                    "i319"
                                                                                    "i317"
                                                                                    "i315"
                                                                                    "i313"
                                                                                    "i311"
                                                                                    "i309"
                                                                                    "i307"
                                                                                    "i305"
                                                                                    "i303"
                                                                                    "i301"
                                                                                    "i299"
                                                                                    "i297"
                                                                                    "i295"
                                                                                    "i293"
                                                                                    "i291"
                                                                                    "i289"
                                                                                    "i287"
                                                                                    "i285"
                                                                                    "i284"
                                                                                    "i282"
                                                                                    "i280"
                                                                                    "i278"
                                                                                    "i276"
                                                                                    "i274"
                                                                                    "i272"
                                                                                    "i270"
                                                                                    "i268"
                                                                                    "i266"
                                                                                    "i263"
                                                                                    "i261"
                                                                                    "i259"
                                                                                    "i257"
                                                                                    "i255"
                                                                                    "i253"
                                                                                    "i251"
                                                                                    "i249"
                                                                                    "i247"
                                                                                    "i245"
                                                                                    "i243"
                                                                                    "i241"
                                                                                    "i239"
                                                                                    "i237"
                                                                                    "i235"
                                                                                    "i233"
                                                                                    "i231"
                                                                                    "i229"))
                                                                                 #(ribcage
                                                                                   (define-structure
                                                                                     define-expansion-accessors
                                                                                     define-expansion-constructors
                                                                                     and-map*)
                                                                                   ((top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top))
                                                                                   ("i23"
                                                                                    "i22"
                                                                                    "i21"
                                                                                    "i19")))
                                                                                (hygiene
                                                                                  guile)))))
                                                                #{rkey\ 1032}#)))
                                                      #{tmp\ 1049}#))
                                                   (symbol->keyword
                                                     (syntax->datum
                                                       #{a\ 1046}#))))
                                                #{tmp\ 1039}#)
                                         ((lambda (#{tmp\ 1052}#)
                                            (if (if #{tmp\ 1052}#
                                                  (apply (lambda (#{a\ 1056}#
                                                                  #{init\ 1057}#
                                                                  #{b\ 1058}#)
                                                           (#{id?\ 372}#
                                                             #{a\ 1056}#))
                                                         #{tmp\ 1052}#)
                                                  #f)
                                              (apply (lambda (#{a\ 1062}#
                                                              #{init\ 1063}#
                                                              #{b\ 1064}#)
                                                       ((lambda (#{tmp\ 1066}#)
                                                          ((lambda (#{k\ 1068}#)
                                                             (#{key\ 997}#
                                                               #{b\ 1064}#
                                                               #{req\ 1030}#
                                                               #{opt\ 1031}#
                                                               (cons (list #{k\ 1068}#
                                                                           #{a\ 1062}#
                                                                           #{init\ 1063}#)
                                                                     #{rkey\ 1032}#)))
                                                           #{tmp\ 1066}#))
                                                        (symbol->keyword
                                                          (syntax->datum
                                                            #{a\ 1062}#))))
                                                     #{tmp\ 1052}#)
                                              ((lambda (#{tmp\ 1069}#)
                                                 (if (if #{tmp\ 1069}#
                                                       (apply (lambda (#{a\ 1074}#
                                                                       #{init\ 1075}#
                                                                       #{k\ 1076}#
                                                                       #{b\ 1077}#)
                                                                (if (#{id?\ 372}#
                                                                      #{a\ 1074}#)
                                                                  (keyword?
                                                                    (syntax->datum
                                                                      #{k\ 1076}#))
                                                                  #f))
                                                              #{tmp\ 1069}#)
                                                       #f)
                                                   (apply (lambda (#{a\ 1084}#
                                                                   #{init\ 1085}#
                                                                   #{k\ 1086}#
                                                                   #{b\ 1087}#)
                                                            (#{key\ 997}#
                                                              #{b\ 1087}#
                                                              #{req\ 1030}#
                                                              #{opt\ 1031}#
                                                              (cons (list #{k\ 1086}#
                                                                          #{a\ 1084}#
                                                                          #{init\ 1085}#)
                                                                    #{rkey\ 1032}#)))
                                                          #{tmp\ 1069}#)
                                                   ((lambda (#{tmp\ 1088}#)
                                                      (if (if #{tmp\ 1088}#
                                                            (apply (lambda (#{aok\ 1090}#)
                                                                     (eq? (syntax->datum
                                                                            #{aok\ 1090}#)
                                                                          #:allow-other-keys))
                                                                   #{tmp\ 1088}#)
                                                            #f)
                                                        (apply (lambda (#{aok\ 1092}#)
                                                                 (#{check\ 1001}#
                                                                   #{req\ 1030}#
                                                                   #{opt\ 1031}#
                                                                   #f
                                                                   (cons #t
                                                                         (reverse
                                                                           #{rkey\ 1032}#))))
                                                               #{tmp\ 1088}#)
                                                        ((lambda (#{tmp\ 1093}#)
                                                           (if (if #{tmp\ 1093}#
                                                                 (apply (lambda (#{aok\ 1097}#
                                                                                 #{a\ 1098}#
                                                                                 #{b\ 1099}#)
                                                                          (if (eq? (syntax->datum
                                                                                     #{aok\ 1097}#)
                                                                                   #:allow-other-keys)
                                                                            (eq? (syntax->datum
                                                                                   #{a\ 1098}#)
                                                                                 #:rest)
                                                                            #f))
                                                                        #{tmp\ 1093}#)
                                                                 #f)
                                                             (apply (lambda (#{aok\ 1105}#
                                                                             #{a\ 1106}#
                                                                             #{b\ 1107}#)
                                                                      (#{rest\ 999}#
                                                                        #{b\ 1107}#
                                                                        #{req\ 1030}#
                                                                        #{opt\ 1031}#
                                                                        (cons #t
                                                                              (reverse
                                                                                #{rkey\ 1032}#))))
                                                                    #{tmp\ 1093}#)
                                                             ((lambda (#{tmp\ 1108}#)
                                                                (if (if #{tmp\ 1108}#
                                                                      (apply (lambda (#{aok\ 1111}#
                                                                                      #{r\ 1112}#)
                                                                               (if (eq? (syntax->datum
                                                                                          #{aok\ 1111}#)
                                                                                        #:allow-other-keys)
                                                                                 (#{id?\ 372}#
                                                                                   #{r\ 1112}#)
                                                                                 #f))
                                                                             #{tmp\ 1108}#)
                                                                      #f)
                                                                  (apply (lambda (#{aok\ 1117}#
                                                                                  #{r\ 1118}#)
                                                                           (#{rest\ 999}#
                                                                             #{r\ 1118}#
                                                                             #{req\ 1030}#
                                                                             #{opt\ 1031}#
                                                                             (cons #t
                                                                                   (reverse
                                                                                     #{rkey\ 1032}#))))
                                                                         #{tmp\ 1108}#)
                                                                  ((lambda (#{tmp\ 1119}#)
                                                                     (if (if #{tmp\ 1119}#
                                                                           (apply (lambda (#{a\ 1122}#
                                                                                           #{b\ 1123}#)
                                                                                    (eq? (syntax->datum
                                                                                           #{a\ 1122}#)
                                                                                         #:rest))
                                                                                  #{tmp\ 1119}#)
                                                                           #f)
                                                                       (apply (lambda (#{a\ 1126}#
                                                                                       #{b\ 1127}#)
                                                                                (#{rest\ 999}#
                                                                                  #{b\ 1127}#
                                                                                  #{req\ 1030}#
                                                                                  #{opt\ 1031}#
                                                                                  (cons #f
                                                                                        (reverse
                                                                                          #{rkey\ 1032}#))))
                                                                              #{tmp\ 1119}#)
                                                                       ((lambda (#{tmp\ 1128}#)
                                                                          (if (if #{tmp\ 1128}#
                                                                                (apply (lambda (#{r\ 1130}#)
                                                                                         (#{id?\ 372}#
                                                                                           #{r\ 1130}#))
                                                                                       #{tmp\ 1128}#)
                                                                                #f)
                                                                            (apply (lambda (#{r\ 1132}#)
                                                                                     (#{rest\ 999}#
                                                                                       #{r\ 1132}#
                                                                                       #{req\ 1030}#
                                                                                       #{opt\ 1031}#
                                                                                       (cons #f
                                                                                             (reverse
                                                                                               #{rkey\ 1032}#))))
                                                                                   #{tmp\ 1128}#)
                                                                            ((lambda (#{else\ 1134}#)
                                                                               (syntax-violation
                                                                                 'lambda*
                                                                                 "invalid keyword argument list"
                                                                                 #{orig-args\ 990}#
                                                                                 #{args\ 1029}#))
                                                                             #{tmp\ 1037}#)))
                                                                        (list #{tmp\ 1037}#))))
                                                                   ($sc-dispatch
                                                                     #{tmp\ 1037}#
                                                                     '(any any)))))
                                                              ($sc-dispatch
                                                                #{tmp\ 1037}#
                                                                '(any .
                                                                      any)))))
                                                         ($sc-dispatch
                                                           #{tmp\ 1037}#
                                                           '(any any any)))))
                                                    ($sc-dispatch
                                                      #{tmp\ 1037}#
                                                      '(any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 1037}#
                                                 '((any any any) . any)))))
                                          ($sc-dispatch
                                            #{tmp\ 1037}#
                                            '((any any) . any)))))
                                     ($sc-dispatch
                                       #{tmp\ 1037}#
                                       '(any . any)))))
                                ($sc-dispatch #{tmp\ 1037}# (quote ()))))
                             #{args\ 1029}#)))
                        (#{opt\ 995}#
                          (lambda (#{args\ 1135}# #{req\ 1136}# #{ropt\ 1137}#)
                            ((lambda (#{tmp\ 1141}#)
                               ((lambda (#{tmp\ 1142}#)
                                  (if #{tmp\ 1142}#
                                    (apply (lambda ()
                                             (#{check\ 1001}#
                                               #{req\ 1136}#
                                               (reverse #{ropt\ 1137}#)
                                               #f
                                               '()))
                                           #{tmp\ 1142}#)
                                    ((lambda (#{tmp\ 1143}#)
                                       (if (if #{tmp\ 1143}#
                                             (apply (lambda (#{a\ 1146}#
                                                             #{b\ 1147}#)
                                                      (#{id?\ 372}#
                                                        #{a\ 1146}#))
                                                    #{tmp\ 1143}#)
                                             #f)
                                         (apply (lambda (#{a\ 1150}#
                                                         #{b\ 1151}#)
                                                  (#{opt\ 995}#
                                                    #{b\ 1151}#
                                                    #{req\ 1136}#
                                                    (cons (cons #{a\ 1150}#
                                                                '(#(syntax-object
                                                                    #f
                                                                    ((top)
                                                                     #(ribcage
                                                                       #(a b)
                                                                       #((top)
                                                                         (top))
                                                                       #("i1148"
                                                                         "i1149"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(args
                                                                         req
                                                                         ropt)
                                                                       #((top)
                                                                         (top)
                                                                         (top))
                                                                       #("i1138"
                                                                         "i1139"
                                                                         "i1140"))
                                                                     #(ribcage
                                                                       (check rest
                                                                              key
                                                                              opt
                                                                              req)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("i1000"
                                                                        "i998"
                                                                        "i996"
                                                                        "i994"
                                                                        "i992"))
                                                                     #(ribcage
                                                                       #(orig-args)
                                                                       #((top))
                                                                       #("i991"))
                                                                     #(ribcage
                                                                       (lambda-var-list
                                                                         gen-var
                                                                         strip
                                                                         chi-lambda-case
                                                                         lambda*-formals
                                                                         chi-simple-lambda
                                                                         lambda-formals
                                                                         ellipsis?
                                                                         chi-void
                                                                         eval-local-transformer
                                                                         chi-local-syntax
                                                                         chi-body
                                                                         chi-macro
                                                                         chi-application
                                                                         chi-expr
                                                                         chi
                                                                         chi-top
                                                                         syntax-type
                                                                         chi-when-list
                                                                         chi-install-global
                                                                         chi-top-sequence
                                                                         chi-sequence
                                                                         source-wrap
                                                                         wrap
                                                                         bound-id-member?
                                                                         distinct-bound-ids?
                                                                         valid-bound-ids?
                                                                         bound-id=?
                                                                         free-id=?
                                                                         id-var-name
                                                                         same-marks?
                                                                         join-marks
                                                                         join-wraps
                                                                         smart-append
                                                                         make-binding-wrap
                                                                         extend-ribcage!
                                                                         make-empty-ribcage
                                                                         new-mark
                                                                         anti-mark
                                                                         the-anti-mark
                                                                         top-marked?
                                                                         top-wrap
                                                                         empty-wrap
                                                                         set-ribcage-labels!
                                                                         set-ribcage-marks!
                                                                         set-ribcage-symnames!
                                                                         ribcage-labels
                                                                         ribcage-marks
                                                                         ribcage-symnames
                                                                         ribcage?
                                                                         make-ribcage
                                                                         gen-labels
                                                                         gen-label
                                                                         make-rename
                                                                         rename-marks
                                                                         rename-new
                                                                         rename-old
                                                                         subst-rename?
                                                                         wrap-subst
                                                                         wrap-marks
                                                                         make-wrap
                                                                         id-sym-name&marks
                                                                         id-sym-name
                                                                         id?
                                                                         nonsymbol-id?
                                                                         global-extend
                                                                         lookup
                                                                         macros-only-env
                                                                         extend-var-env
                                                                         extend-env
                                                                         null-env
                                                                         binding-value
                                                                         binding-type
                                                                         make-binding
                                                                         arg-check
                                                                         source-annotation
                                                                         no-source
                                                                         set-syntax-object-module!
                                                                         set-syntax-object-wrap!
                                                                         set-syntax-object-expression!
                                                                         syntax-object-module
                                                                         syntax-object-wrap
                                                                         syntax-object-expression
                                                                         syntax-object?
                                                                         make-syntax-object
                                                                         build-lexical-var
                                                                         build-letrec
                                                                         build-named-let
                                                                         build-let
                                                                         build-sequence
                                                                         build-data
                                                                         build-primref
                                                                         build-lambda-case
                                                                         build-case-lambda
                                                                         build-simple-lambda
                                                                         build-global-definition
                                                                         maybe-name-value!
                                                                         build-global-assignment
                                                                         build-global-reference
                                                                         analyze-variable
                                                                         build-lexical-assignment
                                                                         build-lexical-reference
                                                                         build-dynlet
                                                                         build-conditional
                                                                         build-application
                                                                         build-void
                                                                         decorate-source
                                                                         get-global-definition-hook
                                                                         put-global-definition-hook
                                                                         gensym-hook
                                                                         local-eval-hook
                                                                         top-level-eval-hook
                                                                         fx<
                                                                         fx=
                                                                         fx-
                                                                         fx+
                                                                         set-lambda-meta!
                                                                         lambda-meta
                                                                         lambda?
                                                                         make-dynlet
                                                                         make-letrec
                                                                         make-let
                                                                         make-lambda-case
                                                                         make-lambda
                                                                         make-sequence
                                                                         make-application
                                                                         make-conditional
                                                                         make-toplevel-define
                                                                         make-toplevel-set
                                                                         make-toplevel-ref
                                                                         make-module-set
                                                                         make-module-ref
                                                                         make-lexical-set
                                                                         make-lexical-ref
                                                                         make-primitive-ref
                                                                         make-const
                                                                         make-void)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("i486"
                                                                        "i484"
                                                                        "i482"
                                                                        "i480"
                                                                        "i478"
                                                                        "i476"
                                                                        "i474"
                                                                        "i472"
                                                                        "i470"
                                                                        "i468"
                                                                        "i466"
                                                                        "i464"
                                                                        "i462"
                                                                        "i460"
                                                                        "i458"
                                                                        "i456"
                                                                        "i454"
                                                                        "i452"
                                                                        "i450"
                                                                        "i448"
                                                                        "i446"
                                                                        "i444"
                                                                        "i442"
                                                                        "i440"
                                                                        "i438"
                                                                        "i436"
                                                                        "i434"
                                                                        "i432"
                                                                        "i430"
                                                                        "i428"
                                                                        "i426"
                                                                        "i424"
                                                                        "i422"
                                                                        "i420"
                                                                        "i418"
                                                                        "i416"
                                                                        "i415"
                                                                        "i414"
                                                                        "i412"
                                                                        "i411"
                                                                        "i410"
                                                                        "i409"
                                                                        "i408"
                                                                        "i406"
                                                                        "i404"
                                                                        "i402"
                                                                        "i400"
                                                                        "i398"
                                                                        "i396"
                                                                        "i394"
                                                                        "i392"
                                                                        "i389"
                                                                        "i387"
                                                                        "i386"
                                                                        "i385"
                                                                        "i384"
                                                                        "i383"
                                                                        "i382"
                                                                        "i380"
                                                                        "i378"
                                                                        "i376"
                                                                        "i374"
                                                                        "i373"
                                                                        "i371"
                                                                        "i369"
                                                                        "i367"
                                                                        "i365"
                                                                        "i363"
                                                                        "i361"
                                                                        "i359"
                                                                        "i358"
                                                                        "i356"
                                                                        "i354"
                                                                        "i353"
                                                                        "i352"
                                                                        "i350"
                                                                        "i349"
                                                                        "i347"
                                                                        "i345"
                                                                        "i343"
                                                                        "i341"
                                                                        "i339"
                                                                        "i337"
                                                                        "i335"
                                                                        "i333"
                                                                        "i331"
                                                                        "i329"
                                                                        "i327"
                                                                        "i325"
                                                                        "i323"
                                                                        "i321"
                                                                        "i319"
                                                                        "i317"
                                                                        "i315"
                                                                        "i313"
                                                                        "i311"
                                                                        "i309"
                                                                        "i307"
                                                                        "i305"
                                                                        "i303"
                                                                        "i301"
                                                                        "i299"
                                                                        "i297"
                                                                        "i295"
                                                                        "i293"
                                                                        "i291"
                                                                        "i289"
                                                                        "i287"
                                                                        "i285"
                                                                        "i284"
                                                                        "i282"
                                                                        "i280"
                                                                        "i278"
                                                                        "i276"
                                                                        "i274"
                                                                        "i272"
                                                                        "i270"
                                                                        "i268"
                                                                        "i266"
                                                                        "i263"
                                                                        "i261"
                                                                        "i259"
                                                                        "i257"
                                                                        "i255"
                                                                        "i253"
                                                                        "i251"
                                                                        "i249"
                                                                        "i247"
                                                                        "i245"
                                                                        "i243"
                                                                        "i241"
                                                                        "i239"
                                                                        "i237"
                                                                        "i235"
                                                                        "i233"
                                                                        "i231"
                                                                        "i229"))
                                                                     #(ribcage
                                                                       (define-structure
                                                                         define-expansion-accessors
                                                                         define-expansion-constructors
                                                                         and-map*)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("i23"
                                                                        "i22"
                                                                        "i21"
                                                                        "i19")))
                                                                    (hygiene
                                                                      guile))))
                                                          #{ropt\ 1137}#)))
                                                #{tmp\ 1143}#)
                                         ((lambda (#{tmp\ 1152}#)
                                            (if (if #{tmp\ 1152}#
                                                  (apply (lambda (#{a\ 1156}#
                                                                  #{init\ 1157}#
                                                                  #{b\ 1158}#)
                                                           (#{id?\ 372}#
                                                             #{a\ 1156}#))
                                                         #{tmp\ 1152}#)
                                                  #f)
                                              (apply (lambda (#{a\ 1162}#
                                                              #{init\ 1163}#
                                                              #{b\ 1164}#)
                                                       (#{opt\ 995}#
                                                         #{b\ 1164}#
                                                         #{req\ 1136}#
                                                         (cons (list #{a\ 1162}#
                                                                     #{init\ 1163}#)
                                                               #{ropt\ 1137}#)))
                                                     #{tmp\ 1152}#)
                                              ((lambda (#{tmp\ 1165}#)
                                                 (if (if #{tmp\ 1165}#
                                                       (apply (lambda (#{a\ 1168}#
                                                                       #{b\ 1169}#)
                                                                (eq? (syntax->datum
                                                                       #{a\ 1168}#)
                                                                     #:key))
                                                              #{tmp\ 1165}#)
                                                       #f)
                                                   (apply (lambda (#{a\ 1172}#
                                                                   #{b\ 1173}#)
                                                            (#{key\ 997}#
                                                              #{b\ 1173}#
                                                              #{req\ 1136}#
                                                              (reverse
                                                                #{ropt\ 1137}#)
                                                              '()))
                                                          #{tmp\ 1165}#)
                                                   ((lambda (#{tmp\ 1174}#)
                                                      (if (if #{tmp\ 1174}#
                                                            (apply (lambda (#{a\ 1177}#
                                                                            #{b\ 1178}#)
                                                                     (eq? (syntax->datum
                                                                            #{a\ 1177}#)
                                                                          #:rest))
                                                                   #{tmp\ 1174}#)
                                                            #f)
                                                        (apply (lambda (#{a\ 1181}#
                                                                        #{b\ 1182}#)
                                                                 (#{rest\ 999}#
                                                                   #{b\ 1182}#
                                                                   #{req\ 1136}#
                                                                   (reverse
                                                                     #{ropt\ 1137}#)
                                                                   '()))
                                                               #{tmp\ 1174}#)
                                                        ((lambda (#{tmp\ 1183}#)
                                                           (if (if #{tmp\ 1183}#
                                                                 (apply (lambda (#{r\ 1185}#)
                                                                          (#{id?\ 372}#
                                                                            #{r\ 1185}#))
                                                                        #{tmp\ 1183}#)
                                                                 #f)
                                                             (apply (lambda (#{r\ 1187}#)
                                                                      (#{rest\ 999}#
                                                                        #{r\ 1187}#
                                                                        #{req\ 1136}#
                                                                        (reverse
                                                                          #{ropt\ 1137}#)
                                                                        '()))
                                                                    #{tmp\ 1183}#)
                                                             ((lambda (#{else\ 1189}#)
                                                                (syntax-violation
                                                                  'lambda*
                                                                  "invalid optional argument list"
                                                                  #{orig-args\ 990}#
                                                                  #{args\ 1135}#))
                                                              #{tmp\ 1141}#)))
                                                         (list #{tmp\ 1141}#))))
                                                    ($sc-dispatch
                                                      #{tmp\ 1141}#
                                                      '(any any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 1141}#
                                                 '(any . any)))))
                                          ($sc-dispatch
                                            #{tmp\ 1141}#
                                            '((any any) . any)))))
                                     ($sc-dispatch
                                       #{tmp\ 1141}#
                                       '(any . any)))))
                                ($sc-dispatch #{tmp\ 1141}# (quote ()))))
                             #{args\ 1135}#)))
                        (#{req\ 993}#
                          (lambda (#{args\ 1190}# #{rreq\ 1191}#)
                            ((lambda (#{tmp\ 1194}#)
                               ((lambda (#{tmp\ 1195}#)
                                  (if #{tmp\ 1195}#
                                    (apply (lambda ()
                                             (#{check\ 1001}#
                                               (reverse #{rreq\ 1191}#)
                                               '()
                                               #f
                                               '()))
                                           #{tmp\ 1195}#)
                                    ((lambda (#{tmp\ 1196}#)
                                       (if (if #{tmp\ 1196}#
                                             (apply (lambda (#{a\ 1199}#
                                                             #{b\ 1200}#)
                                                      (#{id?\ 372}#
                                                        #{a\ 1199}#))
                                                    #{tmp\ 1196}#)
                                             #f)
                                         (apply (lambda (#{a\ 1203}#
                                                         #{b\ 1204}#)
                                                  (#{req\ 993}#
                                                    #{b\ 1204}#
                                                    (cons #{a\ 1203}#
                                                          #{rreq\ 1191}#)))
                                                #{tmp\ 1196}#)
                                         ((lambda (#{tmp\ 1205}#)
                                            (if (if #{tmp\ 1205}#
                                                  (apply (lambda (#{a\ 1208}#
                                                                  #{b\ 1209}#)
                                                           (eq? (syntax->datum
                                                                  #{a\ 1208}#)
                                                                #:optional))
                                                         #{tmp\ 1205}#)
                                                  #f)
                                              (apply (lambda (#{a\ 1212}#
                                                              #{b\ 1213}#)
                                                       (#{opt\ 995}#
                                                         #{b\ 1213}#
                                                         (reverse
                                                           #{rreq\ 1191}#)
                                                         '()))
                                                     #{tmp\ 1205}#)
                                              ((lambda (#{tmp\ 1214}#)
                                                 (if (if #{tmp\ 1214}#
                                                       (apply (lambda (#{a\ 1217}#
                                                                       #{b\ 1218}#)
                                                                (eq? (syntax->datum
                                                                       #{a\ 1217}#)
                                                                     #:key))
                                                              #{tmp\ 1214}#)
                                                       #f)
                                                   (apply (lambda (#{a\ 1221}#
                                                                   #{b\ 1222}#)
                                                            (#{key\ 997}#
                                                              #{b\ 1222}#
                                                              (reverse
                                                                #{rreq\ 1191}#)
                                                              '()
                                                              '()))
                                                          #{tmp\ 1214}#)
                                                   ((lambda (#{tmp\ 1223}#)
                                                      (if (if #{tmp\ 1223}#
                                                            (apply (lambda (#{a\ 1226}#
                                                                            #{b\ 1227}#)
                                                                     (eq? (syntax->datum
                                                                            #{a\ 1226}#)
                                                                          #:rest))
                                                                   #{tmp\ 1223}#)
                                                            #f)
                                                        (apply (lambda (#{a\ 1230}#
                                                                        #{b\ 1231}#)
                                                                 (#{rest\ 999}#
                                                                   #{b\ 1231}#
                                                                   (reverse
                                                                     #{rreq\ 1191}#)
                                                                   '()
                                                                   '()))
                                                               #{tmp\ 1223}#)
                                                        ((lambda (#{tmp\ 1232}#)
                                                           (if (if #{tmp\ 1232}#
                                                                 (apply (lambda (#{r\ 1234}#)
                                                                          (#{id?\ 372}#
                                                                            #{r\ 1234}#))
                                                                        #{tmp\ 1232}#)
                                                                 #f)
                                                             (apply (lambda (#{r\ 1236}#)
                                                                      (#{rest\ 999}#
                                                                        #{r\ 1236}#
                                                                        (reverse
                                                                          #{rreq\ 1191}#)
                                                                        '()
                                                                        '()))
                                                                    #{tmp\ 1232}#)
                                                             ((lambda (#{else\ 1238}#)
                                                                (syntax-violation
                                                                  'lambda*
                                                                  "invalid argument list"
                                                                  #{orig-args\ 990}#
                                                                  #{args\ 1190}#))
                                                              #{tmp\ 1194}#)))
                                                         (list #{tmp\ 1194}#))))
                                                    ($sc-dispatch
                                                      #{tmp\ 1194}#
                                                      '(any any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 1194}#
                                                 '(any . any)))))
                                          ($sc-dispatch
                                            #{tmp\ 1194}#
                                            '(any . any)))))
                                     ($sc-dispatch
                                       #{tmp\ 1194}#
                                       '(any . any)))))
                                ($sc-dispatch #{tmp\ 1194}# (quote ()))))
                             #{args\ 1190}#))))
                 (#{req\ 993}# #{orig-args\ 990}# (quote ())))))
           (#{chi-simple-lambda\ 477}#
             (lambda (#{e\ 1239}#
                      #{r\ 1240}#
                      #{w\ 1241}#
                      #{s\ 1242}#
                      #{mod\ 1243}#
                      #{req\ 1244}#
                      #{rest\ 1245}#
                      #{meta\ 1246}#
                      #{body\ 1247}#)
               (let ((#{ids\ 1259}#
                       (if #{rest\ 1245}#
                         (append #{req\ 1244}# (list #{rest\ 1245}#))
                         #{req\ 1244}#)))
                 (let ((#{vars\ 1261}#
                         (map #{gen-var\ 485}# #{ids\ 1259}#)))
                   (let ((#{labels\ 1263}#
                           (#{gen-labels\ 390}# #{ids\ 1259}#)))
                     (#{build-simple-lambda\ 314}#
                       #{s\ 1242}#
                       (map syntax->datum #{req\ 1244}#)
                       (if #{rest\ 1245}#
                         (syntax->datum #{rest\ 1245}#)
                         #f)
                       #{vars\ 1261}#
                       #{meta\ 1246}#
                       (#{chi-body\ 465}#
                         #{body\ 1247}#
                         (#{source-wrap\ 443}#
                           #{e\ 1239}#
                           #{w\ 1241}#
                           #{s\ 1242}#
                           #{mod\ 1243}#)
                         (#{extend-var-env\ 362}#
                           #{labels\ 1263}#
                           #{vars\ 1261}#
                           #{r\ 1240}#)
                         (#{make-binding-wrap\ 419}#
                           #{ids\ 1259}#
                           #{labels\ 1263}#
                           #{w\ 1241}#)
                         #{mod\ 1243}#)))))))
           (#{lambda-formals\ 475}#
             (lambda (#{orig-args\ 1266}#)
               (letrec ((#{check\ 1271}#
                          (lambda (#{req\ 1272}# #{rest\ 1273}#)
                            (if (#{distinct-bound-ids?\ 437}#
                                  (if #{rest\ 1273}#
                                    (cons #{rest\ 1273}# #{req\ 1272}#)
                                    #{req\ 1272}#))
                              (values #{req\ 1272}# #f #{rest\ 1273}# #f)
                              (syntax-violation
                                'lambda
                                "duplicate identifier in argument list"
                                #{orig-args\ 1266}#))))
                        (#{req\ 1269}#
                          (lambda (#{args\ 1279}# #{rreq\ 1280}#)
                            ((lambda (#{tmp\ 1283}#)
                               ((lambda (#{tmp\ 1284}#)
                                  (if #{tmp\ 1284}#
                                    (apply (lambda ()
                                             (#{check\ 1271}#
                                               (reverse #{rreq\ 1280}#)
                                               #f))
                                           #{tmp\ 1284}#)
                                    ((lambda (#{tmp\ 1285}#)
                                       (if (if #{tmp\ 1285}#
                                             (apply (lambda (#{a\ 1288}#
                                                             #{b\ 1289}#)
                                                      (#{id?\ 372}#
                                                        #{a\ 1288}#))
                                                    #{tmp\ 1285}#)
                                             #f)
                                         (apply (lambda (#{a\ 1292}#
                                                         #{b\ 1293}#)
                                                  (#{req\ 1269}#
                                                    #{b\ 1293}#
                                                    (cons #{a\ 1292}#
                                                          #{rreq\ 1280}#)))
                                                #{tmp\ 1285}#)
                                         ((lambda (#{tmp\ 1294}#)
                                            (if (if #{tmp\ 1294}#
                                                  (apply (lambda (#{r\ 1296}#)
                                                           (#{id?\ 372}#
                                                             #{r\ 1296}#))
                                                         #{tmp\ 1294}#)
                                                  #f)
                                              (apply (lambda (#{r\ 1298}#)
                                                       (#{check\ 1271}#
                                                         (reverse
                                                           #{rreq\ 1280}#)
                                                         #{r\ 1298}#))
                                                     #{tmp\ 1294}#)
                                              ((lambda (#{else\ 1300}#)
                                                 (syntax-violation
                                                   'lambda
                                                   "invalid argument list"
                                                   #{orig-args\ 1266}#
                                                   #{args\ 1279}#))
                                               #{tmp\ 1283}#)))
                                          (list #{tmp\ 1283}#))))
                                     ($sc-dispatch
                                       #{tmp\ 1283}#
                                       '(any . any)))))
                                ($sc-dispatch #{tmp\ 1283}# (quote ()))))
                             #{args\ 1279}#))))
                 (#{req\ 1269}# #{orig-args\ 1266}# (quote ())))))
           (#{ellipsis?\ 473}#
             (lambda (#{x\ 1301}#)
               (if (#{nonsymbol-id?\ 370}# #{x\ 1301}#)
                 (#{free-id=?\ 431}#
                   #{x\ 1301}#
                   '#(syntax-object
                      ...
                      ((top)
                       #(ribcage () () ())
                       #(ribcage () () ())
                       #(ribcage #(x) #((top)) #("i1302"))
                       #(ribcage
                         (lambda-var-list
                           gen-var
                           strip
                           chi-lambda-case
                           lambda*-formals
                           chi-simple-lambda
                           lambda-formals
                           ellipsis?
                           chi-void
                           eval-local-transformer
                           chi-local-syntax
                           chi-body
                           chi-macro
                           chi-application
                           chi-expr
                           chi
                           chi-top
                           syntax-type
                           chi-when-list
                           chi-install-global
                           chi-top-sequence
                           chi-sequence
                           source-wrap
                           wrap
                           bound-id-member?
                           distinct-bound-ids?
                           valid-bound-ids?
                           bound-id=?
                           free-id=?
                           id-var-name
                           same-marks?
                           join-marks
                           join-wraps
                           smart-append
                           make-binding-wrap
                           extend-ribcage!
                           make-empty-ribcage
                           new-mark
                           anti-mark
                           the-anti-mark
                           top-marked?
                           top-wrap
                           empty-wrap
                           set-ribcage-labels!
                           set-ribcage-marks!
                           set-ribcage-symnames!
                           ribcage-labels
                           ribcage-marks
                           ribcage-symnames
                           ribcage?
                           make-ribcage
                           gen-labels
                           gen-label
                           make-rename
                           rename-marks
                           rename-new
                           rename-old
                           subst-rename?
                           wrap-subst
                           wrap-marks
                           make-wrap
                           id-sym-name&marks
                           id-sym-name
                           id?
                           nonsymbol-id?
                           global-extend
                           lookup
                           macros-only-env
                           extend-var-env
                           extend-env
                           null-env
                           binding-value
                           binding-type
                           make-binding
                           arg-check
                           source-annotation
                           no-source
                           set-syntax-object-module!
                           set-syntax-object-wrap!
                           set-syntax-object-expression!
                           syntax-object-module
                           syntax-object-wrap
                           syntax-object-expression
                           syntax-object?
                           make-syntax-object
                           build-lexical-var
                           build-letrec
                           build-named-let
                           build-let
                           build-sequence
                           build-data
                           build-primref
                           build-lambda-case
                           build-case-lambda
                           build-simple-lambda
                           build-global-definition
                           maybe-name-value!
                           build-global-assignment
                           build-global-reference
                           analyze-variable
                           build-lexical-assignment
                           build-lexical-reference
                           build-dynlet
                           build-conditional
                           build-application
                           build-void
                           decorate-source
                           get-global-definition-hook
                           put-global-definition-hook
                           gensym-hook
                           local-eval-hook
                           top-level-eval-hook
                           fx<
                           fx=
                           fx-
                           fx+
                           set-lambda-meta!
                           lambda-meta
                           lambda?
                           make-dynlet
                           make-letrec
                           make-let
                           make-lambda-case
                           make-lambda
                           make-sequence
                           make-application
                           make-conditional
                           make-toplevel-define
                           make-toplevel-set
                           make-toplevel-ref
                           make-module-set
                           make-module-ref
                           make-lexical-set
                           make-lexical-ref
                           make-primitive-ref
                           make-const
                           make-void)
                         ((top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top))
                         ("i486"
                          "i484"
                          "i482"
                          "i480"
                          "i478"
                          "i476"
                          "i474"
                          "i472"
                          "i470"
                          "i468"
                          "i466"
                          "i464"
                          "i462"
                          "i460"
                          "i458"
                          "i456"
                          "i454"
                          "i452"
                          "i450"
                          "i448"
                          "i446"
                          "i444"
                          "i442"
                          "i440"
                          "i438"
                          "i436"
                          "i434"
                          "i432"
                          "i430"
                          "i428"
                          "i426"
                          "i424"
                          "i422"
                          "i420"
                          "i418"
                          "i416"
                          "i415"
                          "i414"
                          "i412"
                          "i411"
                          "i410"
                          "i409"
                          "i408"
                          "i406"
                          "i404"
                          "i402"
                          "i400"
                          "i398"
                          "i396"
                          "i394"
                          "i392"
                          "i389"
                          "i387"
                          "i386"
                          "i385"
                          "i384"
                          "i383"
                          "i382"
                          "i380"
                          "i378"
                          "i376"
                          "i374"
                          "i373"
                          "i371"
                          "i369"
                          "i367"
                          "i365"
                          "i363"
                          "i361"
                          "i359"
                          "i358"
                          "i356"
                          "i354"
                          "i353"
                          "i352"
                          "i350"
                          "i349"
                          "i347"
                          "i345"
                          "i343"
                          "i341"
                          "i339"
                          "i337"
                          "i335"
                          "i333"
                          "i331"
                          "i329"
                          "i327"
                          "i325"
                          "i323"
                          "i321"
                          "i319"
                          "i317"
                          "i315"
                          "i313"
                          "i311"
                          "i309"
                          "i307"
                          "i305"
                          "i303"
                          "i301"
                          "i299"
                          "i297"
                          "i295"
                          "i293"
                          "i291"
                          "i289"
                          "i287"
                          "i285"
                          "i284"
                          "i282"
                          "i280"
                          "i278"
                          "i276"
                          "i274"
                          "i272"
                          "i270"
                          "i268"
                          "i266"
                          "i263"
                          "i261"
                          "i259"
                          "i257"
                          "i255"
                          "i253"
                          "i251"
                          "i249"
                          "i247"
                          "i245"
                          "i243"
                          "i241"
                          "i239"
                          "i237"
                          "i235"
                          "i233"
                          "i231"
                          "i229"))
                       #(ribcage
                         (define-structure
                           define-expansion-accessors
                           define-expansion-constructors
                           and-map*)
                         ((top) (top) (top) (top))
                         ("i23" "i22" "i21" "i19")))
                      (hygiene guile)))
                 #f)))
           (#{chi-void\ 471}#
             (lambda () (#{build-void\ 292}# #f)))
           (#{eval-local-transformer\ 469}#
             (lambda (#{expanded\ 1306}# #{mod\ 1307}#)
               (let ((#{p\ 1311}#
                       (#{local-eval-hook\ 283}#
                         #{expanded\ 1306}#
                         #{mod\ 1307}#)))
                 (if (procedure? #{p\ 1311}#)
                   (cons #{p\ 1311}# (module-name (current-module)))
                   (syntax-violation
                     #f
                     "nonprocedure transformer"
                     #{p\ 1311}#)))))
           (#{chi-local-syntax\ 467}#
             (lambda (#{rec?\ 1312}#
                      #{e\ 1313}#
                      #{r\ 1314}#
                      #{w\ 1315}#
                      #{s\ 1316}#
                      #{mod\ 1317}#
                      #{k\ 1318}#)
               ((lambda (#{tmp\ 1326}#)
                  ((lambda (#{tmp\ 1327}#)
                     (if #{tmp\ 1327}#
                       (apply (lambda (#{_\ 1333}#
                                       #{id\ 1334}#
                                       #{val\ 1335}#
                                       #{e1\ 1336}#
                                       #{e2\ 1337}#)
                                (let ((#{ids\ 1339}# #{id\ 1334}#))
                                  (if (not (#{valid-bound-ids?\ 435}#
                                             #{ids\ 1339}#))
                                    (syntax-violation
                                      #f
                                      "duplicate bound keyword"
                                      #{e\ 1313}#)
                                    (let ((#{labels\ 1342}#
                                            (#{gen-labels\ 390}#
                                              #{ids\ 1339}#)))
                                      (let ((#{new-w\ 1344}#
                                              (#{make-binding-wrap\ 419}#
                                                #{ids\ 1339}#
                                                #{labels\ 1342}#
                                                #{w\ 1315}#)))
                                        (#{k\ 1318}#
                                          (cons #{e1\ 1336}# #{e2\ 1337}#)
                                          (#{extend-env\ 360}#
                                            #{labels\ 1342}#
                                            (let ((#{w\ 1348}#
                                                    (if #{rec?\ 1312}#
                                                      #{new-w\ 1344}#
                                                      #{w\ 1315}#))
                                                  (#{trans-r\ 1349}#
                                                    (#{macros-only-env\ 364}#
                                                      #{r\ 1314}#)))
                                              (map (lambda (#{x\ 1350}#)
                                                     (cons 'macro
                                                           (#{eval-local-transformer\ 469}#
                                                             (#{chi\ 457}#
                                                               #{x\ 1350}#
                                                               #{trans-r\ 1349}#
                                                               #{w\ 1348}#
                                                               #{mod\ 1317}#)
                                                             #{mod\ 1317}#)))
                                                   #{val\ 1335}#))
                                            #{r\ 1314}#)
                                          #{new-w\ 1344}#
                                          #{s\ 1316}#
                                          #{mod\ 1317}#))))))
                              #{tmp\ 1327}#)
                       ((lambda (#{_\ 1355}#)
                          (syntax-violation
                            #f
                            "bad local syntax definition"
                            (#{source-wrap\ 443}#
                              #{e\ 1313}#
                              #{w\ 1315}#
                              #{s\ 1316}#
                              #{mod\ 1317}#)))
                        #{tmp\ 1326}#)))
                   ($sc-dispatch
                     #{tmp\ 1326}#
                     '(any #(each (any any)) any . each-any))))
                #{e\ 1313}#)))
           (#{chi-body\ 465}#
             (lambda (#{body\ 1356}#
                      #{outer-form\ 1357}#
                      #{r\ 1358}#
                      #{w\ 1359}#
                      #{mod\ 1360}#)
               (let ((#{r\ 1368}#
                       (cons '("placeholder" placeholder)
                             #{r\ 1358}#)))
                 (let ((#{ribcage\ 1370}#
                         (#{make-ribcage\ 393}#
                           '()
                           '()
                           '())))
                   (let ((#{w\ 1373}#
                           (#{make-wrap\ 377}#
                             (#{wrap-marks\ 379}# #{w\ 1359}#)
                             (cons #{ribcage\ 1370}#
                                   (#{wrap-subst\ 381}# #{w\ 1359}#)))))
                     (letrec ((#{parse\ 1382}#
                                (lambda (#{body\ 1383}#
                                         #{ids\ 1384}#
                                         #{labels\ 1385}#
                                         #{var-ids\ 1386}#
                                         #{vars\ 1387}#
                                         #{vals\ 1388}#
                                         #{bindings\ 1389}#)
                                  (if (null? #{body\ 1383}#)
                                    (syntax-violation
                                      #f
                                      "no expressions in body"
                                      #{outer-form\ 1357}#)
                                    (let ((#{e\ 1394}# (cdar #{body\ 1383}#))
                                          (#{er\ 1395}# (caar #{body\ 1383}#)))
                                      (call-with-values
                                        (lambda ()
                                          (#{syntax-type\ 453}#
                                            #{e\ 1394}#
                                            #{er\ 1395}#
                                            '(())
                                            (#{source-annotation\ 351}#
                                              #{er\ 1395}#)
                                            #{ribcage\ 1370}#
                                            #{mod\ 1360}#
                                            #f))
                                        (lambda (#{type\ 1397}#
                                                 #{value\ 1398}#
                                                 #{e\ 1399}#
                                                 #{w\ 1400}#
                                                 #{s\ 1401}#
                                                 #{mod\ 1402}#)
                                          (if (memv #{type\ 1397}#
                                                    '(define-form))
                                            (let ((#{id\ 1412}#
                                                    (#{wrap\ 441}#
                                                      #{value\ 1398}#
                                                      #{w\ 1400}#
                                                      #{mod\ 1402}#))
                                                  (#{label\ 1413}#
                                                    (#{gen-label\ 388}#)))
                                              (let ((#{var\ 1415}#
                                                      (#{gen-var\ 485}#
                                                        #{id\ 1412}#)))
                                                (begin
                                                  (#{extend-ribcage!\ 417}#
                                                    #{ribcage\ 1370}#
                                                    #{id\ 1412}#
                                                    #{label\ 1413}#)
                                                  (#{parse\ 1382}#
                                                    (cdr #{body\ 1383}#)
                                                    (cons #{id\ 1412}#
                                                          #{ids\ 1384}#)
                                                    (cons #{label\ 1413}#
                                                          #{labels\ 1385}#)
                                                    (cons #{id\ 1412}#
                                                          #{var-ids\ 1386}#)
                                                    (cons #{var\ 1415}#
                                                          #{vars\ 1387}#)
                                                    (cons (cons #{er\ 1395}#
                                                                (#{wrap\ 441}#
                                                                  #{e\ 1399}#
                                                                  #{w\ 1400}#
                                                                  #{mod\ 1402}#))
                                                          #{vals\ 1388}#)
                                                    (cons (cons 'lexical
                                                                #{var\ 1415}#)
                                                          #{bindings\ 1389}#)))))
                                            (if (memv #{type\ 1397}#
                                                      '(define-syntax-form))
                                              (let ((#{id\ 1420}#
                                                      (#{wrap\ 441}#
                                                        #{value\ 1398}#
                                                        #{w\ 1400}#
                                                        #{mod\ 1402}#))
                                                    (#{label\ 1421}#
                                                      (#{gen-label\ 388}#)))
                                                (begin
                                                  (#{extend-ribcage!\ 417}#
                                                    #{ribcage\ 1370}#
                                                    #{id\ 1420}#
                                                    #{label\ 1421}#)
                                                  (#{parse\ 1382}#
                                                    (cdr #{body\ 1383}#)
                                                    (cons #{id\ 1420}#
                                                          #{ids\ 1384}#)
                                                    (cons #{label\ 1421}#
                                                          #{labels\ 1385}#)
                                                    #{var-ids\ 1386}#
                                                    #{vars\ 1387}#
                                                    #{vals\ 1388}#
                                                    (cons (cons 'macro
                                                                (cons #{er\ 1395}#
                                                                      (#{wrap\ 441}#
                                                                        #{e\ 1399}#
                                                                        #{w\ 1400}#
                                                                        #{mod\ 1402}#)))
                                                          #{bindings\ 1389}#))))
                                              (if (memv #{type\ 1397}#
                                                        '(begin-form))
                                                ((lambda (#{tmp\ 1424}#)
                                                   ((lambda (#{tmp\ 1425}#)
                                                      (if #{tmp\ 1425}#
                                                        (apply (lambda (#{_\ 1428}#
                                                                        #{e1\ 1429}#)
                                                                 (#{parse\ 1382}#
                                                                   (letrec ((#{f\ 1432}#
                                                                              (lambda (#{forms\ 1433}#)
                                                                                (if (null? #{forms\ 1433}#)
                                                                                  (cdr #{body\ 1383}#)
                                                                                  (cons (cons #{er\ 1395}#
                                                                                              (#{wrap\ 441}#
                                                                                                (car #{forms\ 1433}#)
                                                                                                #{w\ 1400}#
                                                                                                #{mod\ 1402}#))
                                                                                        (#{f\ 1432}#
                                                                                          (cdr #{forms\ 1433}#)))))))
                                                                     (#{f\ 1432}#
                                                                       #{e1\ 1429}#))
                                                                   #{ids\ 1384}#
                                                                   #{labels\ 1385}#
                                                                   #{var-ids\ 1386}#
                                                                   #{vars\ 1387}#
                                                                   #{vals\ 1388}#
                                                                   #{bindings\ 1389}#))
                                                               #{tmp\ 1425}#)
                                                        (syntax-violation
                                                          #f
                                                          "source expression failed to match any pattern"
                                                          #{tmp\ 1424}#)))
                                                    ($sc-dispatch
                                                      #{tmp\ 1424}#
                                                      '(any . each-any))))
                                                 #{e\ 1399}#)
                                                (if (memv #{type\ 1397}#
                                                          '(local-syntax-form))
                                                  (#{chi-local-syntax\ 467}#
                                                    #{value\ 1398}#
                                                    #{e\ 1399}#
                                                    #{er\ 1395}#
                                                    #{w\ 1400}#
                                                    #{s\ 1401}#
                                                    #{mod\ 1402}#
                                                    (lambda (#{forms\ 1436}#
                                                             #{er\ 1437}#
                                                             #{w\ 1438}#
                                                             #{s\ 1439}#
                                                             #{mod\ 1440}#)
                                                      (#{parse\ 1382}#
                                                        (letrec ((#{f\ 1448}#
                                                                   (lambda (#{forms\ 1449}#)
                                                                     (if (null? #{forms\ 1449}#)
                                                                       (cdr #{body\ 1383}#)
                                                                       (cons (cons #{er\ 1437}#
                                                                                   (#{wrap\ 441}#
                                                                                     (car #{forms\ 1449}#)
                                                                                     #{w\ 1438}#
                                                                                     #{mod\ 1440}#))
                                                                             (#{f\ 1448}#
                                                                               (cdr #{forms\ 1449}#)))))))
                                                          (#{f\ 1448}#
                                                            #{forms\ 1436}#))
                                                        #{ids\ 1384}#
                                                        #{labels\ 1385}#
                                                        #{var-ids\ 1386}#
                                                        #{vars\ 1387}#
                                                        #{vals\ 1388}#
                                                        #{bindings\ 1389}#)))
                                                  (if (null? #{ids\ 1384}#)
                                                    (#{build-sequence\ 324}#
                                                      #f
                                                      (map (lambda (#{x\ 1452}#)
                                                             (#{chi\ 457}#
                                                               (cdr #{x\ 1452}#)
                                                               (car #{x\ 1452}#)
                                                               '(())
                                                               #{mod\ 1402}#))
                                                           (cons (cons #{er\ 1395}#
                                                                       (#{source-wrap\ 443}#
                                                                         #{e\ 1399}#
                                                                         #{w\ 1400}#
                                                                         #{s\ 1401}#
                                                                         #{mod\ 1402}#))
                                                                 (cdr #{body\ 1383}#))))
                                                    (begin
                                                      (if (not (#{valid-bound-ids?\ 435}#
                                                                 #{ids\ 1384}#))
                                                        (syntax-violation
                                                          #f
                                                          "invalid or duplicate identifier in definition"
                                                          #{outer-form\ 1357}#))
                                                      (letrec ((#{loop\ 1459}#
                                                                 (lambda (#{bs\ 1460}#
                                                                          #{er-cache\ 1461}#
                                                                          #{r-cache\ 1462}#)
                                                                   (if (not (null? #{bs\ 1460}#))
                                                                     (let ((#{b\ 1465}#
                                                                             (car #{bs\ 1460}#)))
                                                                       (if (eq? (car #{b\ 1465}#)
                                                                                'macro)
                                                                         (let ((#{er\ 1468}#
                                                                                 (cadr #{b\ 1465}#)))
                                                                           (let ((#{r-cache\ 1470}#
                                                                                   (if (eq? #{er\ 1468}#
                                                                                            #{er-cache\ 1461}#)
                                                                                     #{r-cache\ 1462}#
                                                                                     (#{macros-only-env\ 364}#
                                                                                       #{er\ 1468}#))))
                                                                             (begin
                                                                               (set-cdr!
                                                                                 #{b\ 1465}#
                                                                                 (#{eval-local-transformer\ 469}#
                                                                                   (#{chi\ 457}#
                                                                                     (cddr #{b\ 1465}#)
                                                                                     #{r-cache\ 1470}#
                                                                                     '(())
                                                                                     #{mod\ 1402}#)
                                                                                   #{mod\ 1402}#))
                                                                               (#{loop\ 1459}#
                                                                                 (cdr #{bs\ 1460}#)
                                                                                 #{er\ 1468}#
                                                                                 #{r-cache\ 1470}#))))
                                                                         (#{loop\ 1459}#
                                                                           (cdr #{bs\ 1460}#)
                                                                           #{er-cache\ 1461}#
                                                                           #{r-cache\ 1462}#)))))))
                                                        (#{loop\ 1459}#
                                                          #{bindings\ 1389}#
                                                          #f
                                                          #f))
                                                      (set-cdr!
                                                        #{r\ 1368}#
                                                        (#{extend-env\ 360}#
                                                          #{labels\ 1385}#
                                                          #{bindings\ 1389}#
                                                          (cdr #{r\ 1368}#)))
                                                      (#{build-letrec\ 330}#
                                                        #f
                                                        (map syntax->datum
                                                             #{var-ids\ 1386}#)
                                                        #{vars\ 1387}#
                                                        (map (lambda (#{x\ 1473}#)
                                                               (#{chi\ 457}#
                                                                 (cdr #{x\ 1473}#)
                                                                 (car #{x\ 1473}#)
                                                                 '(())
                                                                 #{mod\ 1402}#))
                                                             #{vals\ 1388}#)
                                                        (#{build-sequence\ 324}#
                                                          #f
                                                          (map (lambda (#{x\ 1477}#)
                                                                 (#{chi\ 457}#
                                                                   (cdr #{x\ 1477}#)
                                                                   (car #{x\ 1477}#)
                                                                   '(())
                                                                   #{mod\ 1402}#))
                                                               (cons (cons #{er\ 1395}#
                                                                           (#{source-wrap\ 443}#
                                                                             #{e\ 1399}#
                                                                             #{w\ 1400}#
                                                                             #{s\ 1401}#
                                                                             #{mod\ 1402}#))
                                                                     (cdr #{body\ 1383}#))))))))))))))))))
                       (#{parse\ 1382}#
                         (map (lambda (#{x\ 1390}#)
                                (cons #{r\ 1368}#
                                      (#{wrap\ 441}#
                                        #{x\ 1390}#
                                        #{w\ 1373}#
                                        #{mod\ 1360}#)))
                              #{body\ 1356}#)
                         '()
                         '()
                         '()
                         '()
                         '()
                         '())))))))
           (#{chi-macro\ 463}#
             (lambda (#{p\ 1480}#
                      #{e\ 1481}#
                      #{r\ 1482}#
                      #{w\ 1483}#
                      #{s\ 1484}#
                      #{rib\ 1485}#
                      #{mod\ 1486}#)
               (letrec ((#{rebuild-macro-output\ 1495}#
                          (lambda (#{x\ 1496}# #{m\ 1497}#)
                            (if (pair? #{x\ 1496}#)
                              (#{decorate-source\ 290}#
                                (cons (#{rebuild-macro-output\ 1495}#
                                        (car #{x\ 1496}#)
                                        #{m\ 1497}#)
                                      (#{rebuild-macro-output\ 1495}#
                                        (cdr #{x\ 1496}#)
                                        #{m\ 1497}#))
                                #{s\ 1484}#)
                              (if (#{syntax-object?\ 336}# #{x\ 1496}#)
                                (let ((#{w\ 1505}#
                                        (#{syntax-object-wrap\ 340}#
                                          #{x\ 1496}#)))
                                  (let ((#{ms\ 1508}#
                                          (#{wrap-marks\ 379}# #{w\ 1505}#))
                                        (#{s\ 1509}#
                                          (#{wrap-subst\ 381}# #{w\ 1505}#)))
                                    (if (if (pair? #{ms\ 1508}#)
                                          (eq? (car #{ms\ 1508}#) #f)
                                          #f)
                                      (#{make-syntax-object\ 334}#
                                        (#{syntax-object-expression\ 338}#
                                          #{x\ 1496}#)
                                        (#{make-wrap\ 377}#
                                          (cdr #{ms\ 1508}#)
                                          (if #{rib\ 1485}#
                                            (cons #{rib\ 1485}#
                                                  (cdr #{s\ 1509}#))
                                            (cdr #{s\ 1509}#)))
                                        (#{syntax-object-module\ 342}#
                                          #{x\ 1496}#))
                                      (#{make-syntax-object\ 334}#
                                        (#{decorate-source\ 290}#
                                          (#{syntax-object-expression\ 338}#
                                            #{x\ 1496}#)
                                          #{s\ 1509}#)
                                        (#{make-wrap\ 377}#
                                          (cons #{m\ 1497}# #{ms\ 1508}#)
                                          (if #{rib\ 1485}#
                                            (cons #{rib\ 1485}#
                                                  (cons 'shift
                                                        #{s\ 1509}#))
                                            (cons (quote shift) #{s\ 1509}#)))
                                        (#{syntax-object-module\ 342}#
                                          #{x\ 1496}#)))))
                                (if (vector? #{x\ 1496}#)
                                  (let ((#{n\ 1517}#
                                          (vector-length #{x\ 1496}#)))
                                    (let ((#{v\ 1519}#
                                            (#{decorate-source\ 290}#
                                              (make-vector #{n\ 1517}#)
                                              #{x\ 1496}#)))
                                      (letrec ((#{loop\ 1522}#
                                                 (lambda (#{i\ 1523}#)
                                                   (if (#{fx=\ 277}#
                                                         #{i\ 1523}#
                                                         #{n\ 1517}#)
                                                     (begin
                                                       (if #f #f)
                                                       #{v\ 1519}#)
                                                     (begin
                                                       (vector-set!
                                                         #{v\ 1519}#
                                                         #{i\ 1523}#
                                                         (#{rebuild-macro-output\ 1495}#
                                                           (vector-ref
                                                             #{x\ 1496}#
                                                             #{i\ 1523}#)
                                                           #{m\ 1497}#))
                                                       (#{loop\ 1522}#
                                                         (#{fx+\ 273}#
                                                           #{i\ 1523}#
                                                           1)))))))
                                        (#{loop\ 1522}# 0))))
                                  (if (symbol? #{x\ 1496}#)
                                    (syntax-violation
                                      #f
                                      "encountered raw symbol in macro output"
                                      (#{source-wrap\ 443}#
                                        #{e\ 1481}#
                                        #{w\ 1483}#
                                        (#{wrap-subst\ 381}# #{w\ 1483}#)
                                        #{mod\ 1486}#)
                                      #{x\ 1496}#)
                                    (#{decorate-source\ 290}#
                                      #{x\ 1496}#
                                      #{s\ 1484}#))))))))
                 (#{rebuild-macro-output\ 1495}#
                   ((car #{p\ 1480}#)
                    (#{source-wrap\ 443}#
                      #{e\ 1481}#
                      (#{anti-mark\ 413}# #{w\ 1483}#)
                      #{s\ 1484}#
                      #{mod\ 1486}#))
                   (gensym "m")))))
           (#{chi-application\ 461}#
             (lambda (#{x\ 1530}#
                      #{e\ 1531}#
                      #{r\ 1532}#
                      #{w\ 1533}#
                      #{s\ 1534}#
                      #{mod\ 1535}#)
               ((lambda (#{tmp\ 1542}#)
                  ((lambda (#{tmp\ 1543}#)
                     (if #{tmp\ 1543}#
                       (apply (lambda (#{e0\ 1546}# #{e1\ 1547}#)
                                (#{build-application\ 294}#
                                  #{s\ 1534}#
                                  #{x\ 1530}#
                                  (map (lambda (#{e\ 1548}#)
                                         (#{chi\ 457}#
                                           #{e\ 1548}#
                                           #{r\ 1532}#
                                           #{w\ 1533}#
                                           #{mod\ 1535}#))
                                       #{e1\ 1547}#)))
                              #{tmp\ 1543}#)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         #{tmp\ 1542}#)))
                   ($sc-dispatch
                     #{tmp\ 1542}#
                     '(any . each-any))))
                #{e\ 1531}#)))
           (#{chi-expr\ 459}#
             (lambda (#{type\ 1551}#
                      #{value\ 1552}#
                      #{e\ 1553}#
                      #{r\ 1554}#
                      #{w\ 1555}#
                      #{s\ 1556}#
                      #{mod\ 1557}#)
               (if (memv #{type\ 1551}# (quote (lexical)))
                 (#{build-lexical-reference\ 300}#
                   'value
                   #{s\ 1556}#
                   #{e\ 1553}#
                   #{value\ 1552}#)
                 (if (memv #{type\ 1551}# (quote (core core-form)))
                   (#{value\ 1552}#
                     #{e\ 1553}#
                     #{r\ 1554}#
                     #{w\ 1555}#
                     #{s\ 1556}#
                     #{mod\ 1557}#)
                   (if (memv #{type\ 1551}# (quote (module-ref)))
                     (call-with-values
                       (lambda ()
                         (#{value\ 1552}#
                           #{e\ 1553}#
                           #{r\ 1554}#
                           #{w\ 1555}#))
                       (lambda (#{e\ 1568}#
                                #{r\ 1569}#
                                #{w\ 1570}#
                                #{s\ 1571}#
                                #{mod\ 1572}#)
                         (#{chi\ 457}#
                           #{e\ 1568}#
                           #{r\ 1569}#
                           #{w\ 1570}#
                           #{mod\ 1572}#)))
                     (if (memv #{type\ 1551}# (quote (lexical-call)))
                       (#{chi-application\ 461}#
                         (#{build-lexical-reference\ 300}#
                           'fun
                           (#{source-annotation\ 351}# (car #{e\ 1553}#))
                           (car #{e\ 1553}#)
                           #{value\ 1552}#)
                         #{e\ 1553}#
                         #{r\ 1554}#
                         #{w\ 1555}#
                         #{s\ 1556}#
                         #{mod\ 1557}#)
                       (if (memv #{type\ 1551}# (quote (global-call)))
                         (#{chi-application\ 461}#
                           (#{build-global-reference\ 306}#
                             (#{source-annotation\ 351}# (car #{e\ 1553}#))
                             (if (#{syntax-object?\ 336}# #{value\ 1552}#)
                               (#{syntax-object-expression\ 338}#
                                 #{value\ 1552}#)
                               #{value\ 1552}#)
                             (if (#{syntax-object?\ 336}# #{value\ 1552}#)
                               (#{syntax-object-module\ 342}# #{value\ 1552}#)
                               #{mod\ 1557}#))
                           #{e\ 1553}#
                           #{r\ 1554}#
                           #{w\ 1555}#
                           #{s\ 1556}#
                           #{mod\ 1557}#)
                         (if (memv #{type\ 1551}# (quote (constant)))
                           (#{build-data\ 322}#
                             #{s\ 1556}#
                             (#{strip\ 483}#
                               (#{source-wrap\ 443}#
                                 #{e\ 1553}#
                                 #{w\ 1555}#
                                 #{s\ 1556}#
                                 #{mod\ 1557}#)
                               '(())))
                           (if (memv #{type\ 1551}# (quote (global)))
                             (#{build-global-reference\ 306}#
                               #{s\ 1556}#
                               #{value\ 1552}#
                               #{mod\ 1557}#)
                             (if (memv #{type\ 1551}# (quote (call)))
                               (#{chi-application\ 461}#
                                 (#{chi\ 457}#
                                   (car #{e\ 1553}#)
                                   #{r\ 1554}#
                                   #{w\ 1555}#
                                   #{mod\ 1557}#)
                                 #{e\ 1553}#
                                 #{r\ 1554}#
                                 #{w\ 1555}#
                                 #{s\ 1556}#
                                 #{mod\ 1557}#)
                               (if (memv #{type\ 1551}# (quote (begin-form)))
                                 ((lambda (#{tmp\ 1585}#)
                                    ((lambda (#{tmp\ 1586}#)
                                       (if #{tmp\ 1586}#
                                         (apply (lambda (#{_\ 1590}#
                                                         #{e1\ 1591}#
                                                         #{e2\ 1592}#)
                                                  (#{chi-sequence\ 445}#
                                                    (cons #{e1\ 1591}#
                                                          #{e2\ 1592}#)
                                                    #{r\ 1554}#
                                                    #{w\ 1555}#
                                                    #{s\ 1556}#
                                                    #{mod\ 1557}#))
                                                #{tmp\ 1586}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp\ 1585}#)))
                                     ($sc-dispatch
                                       #{tmp\ 1585}#
                                       '(any any . each-any))))
                                  #{e\ 1553}#)
                                 (if (memv #{type\ 1551}#
                                           '(local-syntax-form))
                                   (#{chi-local-syntax\ 467}#
                                     #{value\ 1552}#
                                     #{e\ 1553}#
                                     #{r\ 1554}#
                                     #{w\ 1555}#
                                     #{s\ 1556}#
                                     #{mod\ 1557}#
                                     #{chi-sequence\ 445}#)
                                   (if (memv #{type\ 1551}#
                                             '(eval-when-form))
                                     ((lambda (#{tmp\ 1596}#)
                                        ((lambda (#{tmp\ 1597}#)
                                           (if #{tmp\ 1597}#
                                             (apply (lambda (#{_\ 1602}#
                                                             #{x\ 1603}#
                                                             #{e1\ 1604}#
                                                             #{e2\ 1605}#)
                                                      (let ((#{when-list\ 1607}#
                                                              (#{chi-when-list\ 451}#
                                                                #{e\ 1553}#
                                                                #{x\ 1603}#
                                                                #{w\ 1555}#)))
                                                        (if (memq 'eval
                                                                  #{when-list\ 1607}#)
                                                          (#{chi-sequence\ 445}#
                                                            (cons #{e1\ 1604}#
                                                                  #{e2\ 1605}#)
                                                            #{r\ 1554}#
                                                            #{w\ 1555}#
                                                            #{s\ 1556}#
                                                            #{mod\ 1557}#)
                                                          (#{chi-void\ 471}#))))
                                                    #{tmp\ 1597}#)
                                             (syntax-violation
                                               #f
                                               "source expression failed to match any pattern"
                                               #{tmp\ 1596}#)))
                                         ($sc-dispatch
                                           #{tmp\ 1596}#
                                           '(any each-any any . each-any))))
                                      #{e\ 1553}#)
                                     (if (memv #{type\ 1551}#
                                               '(define-form
                                                  define-syntax-form))
                                       (syntax-violation
                                         #f
                                         "definition in expression context"
                                         #{e\ 1553}#
                                         (#{wrap\ 441}#
                                           #{value\ 1552}#
                                           #{w\ 1555}#
                                           #{mod\ 1557}#))
                                       (if (memv #{type\ 1551}#
                                                 '(syntax))
                                         (syntax-violation
                                           #f
                                           "reference to pattern variable outside syntax form"
                                           (#{source-wrap\ 443}#
                                             #{e\ 1553}#
                                             #{w\ 1555}#
                                             #{s\ 1556}#
                                             #{mod\ 1557}#))
                                         (if (memv #{type\ 1551}#
                                                   '(displaced-lexical))
                                           (syntax-violation
                                             #f
                                             "reference to identifier outside its scope"
                                             (#{source-wrap\ 443}#
                                               #{e\ 1553}#
                                               #{w\ 1555}#
                                               #{s\ 1556}#
                                               #{mod\ 1557}#))
                                           (syntax-violation
                                             #f
                                             "unexpected syntax"
                                             (#{source-wrap\ 443}#
                                               #{e\ 1553}#
                                               #{w\ 1555}#
                                               #{s\ 1556}#
                                               #{mod\ 1557}#))))))))))))))))))
           (#{chi\ 457}#
             (lambda (#{e\ 1614}#
                      #{r\ 1615}#
                      #{w\ 1616}#
                      #{mod\ 1617}#)
               (call-with-values
                 (lambda ()
                   (#{syntax-type\ 453}#
                     #{e\ 1614}#
                     #{r\ 1615}#
                     #{w\ 1616}#
                     (#{source-annotation\ 351}# #{e\ 1614}#)
                     #f
                     #{mod\ 1617}#
                     #f))
                 (lambda (#{type\ 1622}#
                          #{value\ 1623}#
                          #{e\ 1624}#
                          #{w\ 1625}#
                          #{s\ 1626}#
                          #{mod\ 1627}#)
                   (#{chi-expr\ 459}#
                     #{type\ 1622}#
                     #{value\ 1623}#
                     #{e\ 1624}#
                     #{r\ 1615}#
                     #{w\ 1625}#
                     #{s\ 1626}#
                     #{mod\ 1627}#)))))
           (#{chi-top\ 455}#
             (lambda (#{e\ 1634}#
                      #{r\ 1635}#
                      #{w\ 1636}#
                      #{m\ 1637}#
                      #{esew\ 1638}#
                      #{mod\ 1639}#)
               (call-with-values
                 (lambda ()
                   (#{syntax-type\ 453}#
                     #{e\ 1634}#
                     #{r\ 1635}#
                     #{w\ 1636}#
                     (#{source-annotation\ 351}# #{e\ 1634}#)
                     #f
                     #{mod\ 1639}#
                     #f))
                 (lambda (#{type\ 1660}#
                          #{value\ 1661}#
                          #{e\ 1662}#
                          #{w\ 1663}#
                          #{s\ 1664}#
                          #{mod\ 1665}#)
                   (if (memv #{type\ 1660}# (quote (begin-form)))
                     ((lambda (#{tmp\ 1673}#)
                        ((lambda (#{tmp\ 1674}#)
                           (if #{tmp\ 1674}#
                             (apply (lambda (#{_\ 1676}#) (#{chi-void\ 471}#))
                                    #{tmp\ 1674}#)
                             ((lambda (#{tmp\ 1677}#)
                                (if #{tmp\ 1677}#
                                  (apply (lambda (#{_\ 1681}#
                                                  #{e1\ 1682}#
                                                  #{e2\ 1683}#)
                                           (#{chi-top-sequence\ 447}#
                                             (cons #{e1\ 1682}# #{e2\ 1683}#)
                                             #{r\ 1635}#
                                             #{w\ 1663}#
                                             #{s\ 1664}#
                                             #{m\ 1637}#
                                             #{esew\ 1638}#
                                             #{mod\ 1665}#))
                                         #{tmp\ 1677}#)
                                  (syntax-violation
                                    #f
                                    "source expression failed to match any pattern"
                                    #{tmp\ 1673}#)))
                              ($sc-dispatch
                                #{tmp\ 1673}#
                                '(any any . each-any)))))
                         ($sc-dispatch #{tmp\ 1673}# (quote (any)))))
                      #{e\ 1662}#)
                     (if (memv #{type\ 1660}# (quote (local-syntax-form)))
                       (#{chi-local-syntax\ 467}#
                         #{value\ 1661}#
                         #{e\ 1662}#
                         #{r\ 1635}#
                         #{w\ 1663}#
                         #{s\ 1664}#
                         #{mod\ 1665}#
                         (lambda (#{body\ 1686}#
                                  #{r\ 1687}#
                                  #{w\ 1688}#
                                  #{s\ 1689}#
                                  #{mod\ 1690}#)
                           (#{chi-top-sequence\ 447}#
                             #{body\ 1686}#
                             #{r\ 1687}#
                             #{w\ 1688}#
                             #{s\ 1689}#
                             #{m\ 1637}#
                             #{esew\ 1638}#
                             #{mod\ 1690}#)))
                       (if (memv #{type\ 1660}# (quote (eval-when-form)))
                         ((lambda (#{tmp\ 1697}#)
                            ((lambda (#{tmp\ 1698}#)
                               (if #{tmp\ 1698}#
                                 (apply (lambda (#{_\ 1703}#
                                                 #{x\ 1704}#
                                                 #{e1\ 1705}#
                                                 #{e2\ 1706}#)
                                          (let ((#{when-list\ 1709}#
                                                  (#{chi-when-list\ 451}#
                                                    #{e\ 1662}#
                                                    #{x\ 1704}#
                                                    #{w\ 1663}#))
                                                (#{body\ 1710}#
                                                  (cons #{e1\ 1705}#
                                                        #{e2\ 1706}#)))
                                            (if (eq? #{m\ 1637}# (quote e))
                                              (if (memq 'eval
                                                        #{when-list\ 1709}#)
                                                (#{chi-top-sequence\ 447}#
                                                  #{body\ 1710}#
                                                  #{r\ 1635}#
                                                  #{w\ 1663}#
                                                  #{s\ 1664}#
                                                  (if (memq 'expand
                                                            #{when-list\ 1709}#)
                                                    'c&e
                                                    'e)
                                                  '(eval)
                                                  #{mod\ 1665}#)
                                                (begin
                                                  (if (memq 'expand
                                                            #{when-list\ 1709}#)
                                                    (#{top-level-eval-hook\ 281}#
                                                      (#{chi-top-sequence\ 447}#
                                                        #{body\ 1710}#
                                                        #{r\ 1635}#
                                                        #{w\ 1663}#
                                                        #{s\ 1664}#
                                                        'e
                                                        '(eval)
                                                        #{mod\ 1665}#)
                                                      #{mod\ 1665}#))
                                                  (#{chi-void\ 471}#)))
                                              (if (memq 'load
                                                        #{when-list\ 1709}#)
                                                (if (let ((#{t\ 1719}#
                                                            (memq 'compile
                                                                  #{when-list\ 1709}#)))
                                                      (if #{t\ 1719}#
                                                        #{t\ 1719}#
                                                        (let ((#{t\ 1722}#
                                                                (memq 'expand
                                                                      #{when-list\ 1709}#)))
                                                          (if #{t\ 1722}#
                                                            #{t\ 1722}#
                                                            (if (eq? #{m\ 1637}#
                                                                     'c&e)
                                                              (memq 'eval
                                                                    #{when-list\ 1709}#)
                                                              #f)))))
                                                  (#{chi-top-sequence\ 447}#
                                                    #{body\ 1710}#
                                                    #{r\ 1635}#
                                                    #{w\ 1663}#
                                                    #{s\ 1664}#
                                                    'c&e
                                                    '(compile load)
                                                    #{mod\ 1665}#)
                                                  (if (memq #{m\ 1637}#
                                                            '(c c&e))
                                                    (#{chi-top-sequence\ 447}#
                                                      #{body\ 1710}#
                                                      #{r\ 1635}#
                                                      #{w\ 1663}#
                                                      #{s\ 1664}#
                                                      'c
                                                      '(load)
                                                      #{mod\ 1665}#)
                                                    (#{chi-void\ 471}#)))
                                                (if (let ((#{t\ 1730}#
                                                            (memq 'compile
                                                                  #{when-list\ 1709}#)))
                                                      (if #{t\ 1730}#
                                                        #{t\ 1730}#
                                                        (let ((#{t\ 1733}#
                                                                (memq 'expand
                                                                      #{when-list\ 1709}#)))
                                                          (if #{t\ 1733}#
                                                            #{t\ 1733}#
                                                            (if (eq? #{m\ 1637}#
                                                                     'c&e)
                                                              (memq 'eval
                                                                    #{when-list\ 1709}#)
                                                              #f)))))
                                                  (begin
                                                    (#{top-level-eval-hook\ 281}#
                                                      (#{chi-top-sequence\ 447}#
                                                        #{body\ 1710}#
                                                        #{r\ 1635}#
                                                        #{w\ 1663}#
                                                        #{s\ 1664}#
                                                        'e
                                                        '(eval)
                                                        #{mod\ 1665}#)
                                                      #{mod\ 1665}#)
                                                    (#{chi-void\ 471}#))
                                                  (#{chi-void\ 471}#))))))
                                        #{tmp\ 1698}#)
                                 (syntax-violation
                                   #f
                                   "source expression failed to match any pattern"
                                   #{tmp\ 1697}#)))
                             ($sc-dispatch
                               #{tmp\ 1697}#
                               '(any each-any any . each-any))))
                          #{e\ 1662}#)
                         (if (memv #{type\ 1660}#
                                   '(define-syntax-form))
                           (let ((#{n\ 1741}#
                                   (#{id-var-name\ 429}#
                                     #{value\ 1661}#
                                     #{w\ 1663}#))
                                 (#{r\ 1742}#
                                   (#{macros-only-env\ 364}# #{r\ 1635}#)))
                             (if (memv #{m\ 1637}# (quote (c)))
                               (if (memq (quote compile) #{esew\ 1638}#)
                                 (let ((#{e\ 1745}#
                                         (#{chi-install-global\ 449}#
                                           #{n\ 1741}#
                                           (#{chi\ 457}#
                                             #{e\ 1662}#
                                             #{r\ 1742}#
                                             #{w\ 1663}#
                                             #{mod\ 1665}#))))
                                   (begin
                                     (#{top-level-eval-hook\ 281}#
                                       #{e\ 1745}#
                                       #{mod\ 1665}#)
                                     (if (memq (quote load) #{esew\ 1638}#)
                                       #{e\ 1745}#
                                       (#{chi-void\ 471}#))))
                                 (if (memq (quote load) #{esew\ 1638}#)
                                   (#{chi-install-global\ 449}#
                                     #{n\ 1741}#
                                     (#{chi\ 457}#
                                       #{e\ 1662}#
                                       #{r\ 1742}#
                                       #{w\ 1663}#
                                       #{mod\ 1665}#))
                                   (#{chi-void\ 471}#)))
                               (if (memv #{m\ 1637}# (quote (c&e)))
                                 (let ((#{e\ 1748}#
                                         (#{chi-install-global\ 449}#
                                           #{n\ 1741}#
                                           (#{chi\ 457}#
                                             #{e\ 1662}#
                                             #{r\ 1742}#
                                             #{w\ 1663}#
                                             #{mod\ 1665}#))))
                                   (begin
                                     (#{top-level-eval-hook\ 281}#
                                       #{e\ 1748}#
                                       #{mod\ 1665}#)
                                     #{e\ 1748}#))
                                 (begin
                                   (if (memq (quote eval) #{esew\ 1638}#)
                                     (#{top-level-eval-hook\ 281}#
                                       (#{chi-install-global\ 449}#
                                         #{n\ 1741}#
                                         (#{chi\ 457}#
                                           #{e\ 1662}#
                                           #{r\ 1742}#
                                           #{w\ 1663}#
                                           #{mod\ 1665}#))
                                       #{mod\ 1665}#))
                                   (#{chi-void\ 471}#)))))
                           (if (memv #{type\ 1660}# (quote (define-form)))
                             (let ((#{n\ 1753}#
                                     (#{id-var-name\ 429}#
                                       #{value\ 1661}#
                                       #{w\ 1663}#)))
                               (let ((#{type\ 1755}#
                                       (#{binding-type\ 355}#
                                         (#{lookup\ 366}#
                                           #{n\ 1753}#
                                           #{r\ 1635}#
                                           #{mod\ 1665}#))))
                                 (if (memv #{type\ 1755}#
                                           '(global core macro module-ref))
                                   (begin
                                     (if (if (memq #{m\ 1637}# (quote (c c&e)))
                                           (if (not (module-local-variable
                                                      (current-module)
                                                      #{n\ 1753}#))
                                             (current-module)
                                             #f)
                                           #f)
                                       (let ((#{old\ 1761}#
                                               (module-variable
                                                 (current-module)
                                                 #{n\ 1753}#)))
                                         (module-define!
                                           (current-module)
                                           #{n\ 1753}#
                                           (if (variable? #{old\ 1761}#)
                                             (variable-ref #{old\ 1761}#)
                                             #f))))
                                     (let ((#{x\ 1764}#
                                             (#{build-global-definition\ 312}#
                                               #{s\ 1664}#
                                               #{n\ 1753}#
                                               (#{chi\ 457}#
                                                 #{e\ 1662}#
                                                 #{r\ 1635}#
                                                 #{w\ 1663}#
                                                 #{mod\ 1665}#))))
                                       (begin
                                         (if (eq? #{m\ 1637}# (quote c&e))
                                           (#{top-level-eval-hook\ 281}#
                                             #{x\ 1764}#
                                             #{mod\ 1665}#))
                                         #{x\ 1764}#)))
                                   (if (memv #{type\ 1755}#
                                             '(displaced-lexical))
                                     (syntax-violation
                                       #f
                                       "identifier out of context"
                                       #{e\ 1662}#
                                       (#{wrap\ 441}#
                                         #{value\ 1661}#
                                         #{w\ 1663}#
                                         #{mod\ 1665}#))
                                     (syntax-violation
                                       #f
                                       "cannot define keyword at top level"
                                       #{e\ 1662}#
                                       (#{wrap\ 441}#
                                         #{value\ 1661}#
                                         #{w\ 1663}#
                                         #{mod\ 1665}#))))))
                             (let ((#{x\ 1770}#
                                     (#{chi-expr\ 459}#
                                       #{type\ 1660}#
                                       #{value\ 1661}#
                                       #{e\ 1662}#
                                       #{r\ 1635}#
                                       #{w\ 1663}#
                                       #{s\ 1664}#
                                       #{mod\ 1665}#)))
                               (begin
                                 (if (eq? #{m\ 1637}# (quote c&e))
                                   (#{top-level-eval-hook\ 281}#
                                     #{x\ 1770}#
                                     #{mod\ 1665}#))
                                 #{x\ 1770}#)))))))))))
           (#{syntax-type\ 453}#
             (lambda (#{e\ 1771}#
                      #{r\ 1772}#
                      #{w\ 1773}#
                      #{s\ 1774}#
                      #{rib\ 1775}#
                      #{mod\ 1776}#
                      #{for-car?\ 1777}#)
               (if (symbol? #{e\ 1771}#)
                 (let ((#{n\ 1789}#
                         (#{id-var-name\ 429}# #{e\ 1771}# #{w\ 1773}#)))
                   (let ((#{b\ 1791}#
                           (#{lookup\ 366}#
                             #{n\ 1789}#
                             #{r\ 1772}#
                             #{mod\ 1776}#)))
                     (let ((#{type\ 1793}#
                             (#{binding-type\ 355}# #{b\ 1791}#)))
                       (if (memv #{type\ 1793}# (quote (lexical)))
                         (values
                           #{type\ 1793}#
                           (#{binding-value\ 357}# #{b\ 1791}#)
                           #{e\ 1771}#
                           #{w\ 1773}#
                           #{s\ 1774}#
                           #{mod\ 1776}#)
                         (if (memv #{type\ 1793}# (quote (global)))
                           (values
                             #{type\ 1793}#
                             #{n\ 1789}#
                             #{e\ 1771}#
                             #{w\ 1773}#
                             #{s\ 1774}#
                             #{mod\ 1776}#)
                           (if (memv #{type\ 1793}# (quote (macro)))
                             (if #{for-car?\ 1777}#
                               (values
                                 #{type\ 1793}#
                                 (#{binding-value\ 357}# #{b\ 1791}#)
                                 #{e\ 1771}#
                                 #{w\ 1773}#
                                 #{s\ 1774}#
                                 #{mod\ 1776}#)
                               (#{syntax-type\ 453}#
                                 (#{chi-macro\ 463}#
                                   (#{binding-value\ 357}# #{b\ 1791}#)
                                   #{e\ 1771}#
                                   #{r\ 1772}#
                                   #{w\ 1773}#
                                   #{s\ 1774}#
                                   #{rib\ 1775}#
                                   #{mod\ 1776}#)
                                 #{r\ 1772}#
                                 '(())
                                 #{s\ 1774}#
                                 #{rib\ 1775}#
                                 #{mod\ 1776}#
                                 #f))
                             (values
                               #{type\ 1793}#
                               (#{binding-value\ 357}# #{b\ 1791}#)
                               #{e\ 1771}#
                               #{w\ 1773}#
                               #{s\ 1774}#
                               #{mod\ 1776}#)))))))
                 (if (pair? #{e\ 1771}#)
                   (let ((#{first\ 1802}# (car #{e\ 1771}#)))
                     (call-with-values
                       (lambda ()
                         (#{syntax-type\ 453}#
                           #{first\ 1802}#
                           #{r\ 1772}#
                           #{w\ 1773}#
                           #{s\ 1774}#
                           #{rib\ 1775}#
                           #{mod\ 1776}#
                           #t))
                       (lambda (#{ftype\ 1803}#
                                #{fval\ 1804}#
                                #{fe\ 1805}#
                                #{fw\ 1806}#
                                #{fs\ 1807}#
                                #{fmod\ 1808}#)
                         (if (memv #{ftype\ 1803}# (quote (lexical)))
                           (values
                             'lexical-call
                             #{fval\ 1804}#
                             #{e\ 1771}#
                             #{w\ 1773}#
                             #{s\ 1774}#
                             #{mod\ 1776}#)
                           (if (memv #{ftype\ 1803}# (quote (global)))
                             (values
                               'global-call
                               (#{make-syntax-object\ 334}#
                                 #{fval\ 1804}#
                                 #{w\ 1773}#
                                 #{fmod\ 1808}#)
                               #{e\ 1771}#
                               #{w\ 1773}#
                               #{s\ 1774}#
                               #{mod\ 1776}#)
                             (if (memv #{ftype\ 1803}# (quote (macro)))
                               (#{syntax-type\ 453}#
                                 (#{chi-macro\ 463}#
                                   #{fval\ 1804}#
                                   #{e\ 1771}#
                                   #{r\ 1772}#
                                   #{w\ 1773}#
                                   #{s\ 1774}#
                                   #{rib\ 1775}#
                                   #{mod\ 1776}#)
                                 #{r\ 1772}#
                                 '(())
                                 #{s\ 1774}#
                                 #{rib\ 1775}#
                                 #{mod\ 1776}#
                                 #{for-car?\ 1777}#)
                               (if (memv #{ftype\ 1803}# (quote (module-ref)))
                                 (call-with-values
                                   (lambda ()
                                     (#{fval\ 1804}#
                                       #{e\ 1771}#
                                       #{r\ 1772}#
                                       #{w\ 1773}#))
                                   (lambda (#{e\ 1820}#
                                            #{r\ 1821}#
                                            #{w\ 1822}#
                                            #{s\ 1823}#
                                            #{mod\ 1824}#)
                                     (#{syntax-type\ 453}#
                                       #{e\ 1820}#
                                       #{r\ 1821}#
                                       #{w\ 1822}#
                                       #{s\ 1823}#
                                       #{rib\ 1775}#
                                       #{mod\ 1824}#
                                       #{for-car?\ 1777}#)))
                                 (if (memv #{ftype\ 1803}# (quote (core)))
                                   (values
                                     'core-form
                                     #{fval\ 1804}#
                                     #{e\ 1771}#
                                     #{w\ 1773}#
                                     #{s\ 1774}#
                                     #{mod\ 1776}#)
                                   (if (memv #{ftype\ 1803}#
                                             '(local-syntax))
                                     (values
                                       'local-syntax-form
                                       #{fval\ 1804}#
                                       #{e\ 1771}#
                                       #{w\ 1773}#
                                       #{s\ 1774}#
                                       #{mod\ 1776}#)
                                     (if (memv #{ftype\ 1803}# (quote (begin)))
                                       (values
                                         'begin-form
                                         #f
                                         #{e\ 1771}#
                                         #{w\ 1773}#
                                         #{s\ 1774}#
                                         #{mod\ 1776}#)
                                       (if (memv #{ftype\ 1803}#
                                                 '(eval-when))
                                         (values
                                           'eval-when-form
                                           #f
                                           #{e\ 1771}#
                                           #{w\ 1773}#
                                           #{s\ 1774}#
                                           #{mod\ 1776}#)
                                         (if (memv #{ftype\ 1803}#
                                                   '(define))
                                           ((lambda (#{tmp\ 1835}#)
                                              ((lambda (#{tmp\ 1836}#)
                                                 (if (if #{tmp\ 1836}#
                                                       (apply (lambda (#{_\ 1840}#
                                                                       #{name\ 1841}#
                                                                       #{val\ 1842}#)
                                                                (#{id?\ 372}#
                                                                  #{name\ 1841}#))
                                                              #{tmp\ 1836}#)
                                                       #f)
                                                   (apply (lambda (#{_\ 1846}#
                                                                   #{name\ 1847}#
                                                                   #{val\ 1848}#)
                                                            (values
                                                              'define-form
                                                              #{name\ 1847}#
                                                              #{val\ 1848}#
                                                              #{w\ 1773}#
                                                              #{s\ 1774}#
                                                              #{mod\ 1776}#))
                                                          #{tmp\ 1836}#)
                                                   ((lambda (#{tmp\ 1849}#)
                                                      (if (if #{tmp\ 1849}#
                                                            (apply (lambda (#{_\ 1855}#
                                                                            #{name\ 1856}#
                                                                            #{args\ 1857}#
                                                                            #{e1\ 1858}#
                                                                            #{e2\ 1859}#)
                                                                     (if (#{id?\ 372}#
                                                                           #{name\ 1856}#)
                                                                       (#{valid-bound-ids?\ 435}#
                                                                         (#{lambda-var-list\ 487}#
                                                                           #{args\ 1857}#))
                                                                       #f))
                                                                   #{tmp\ 1849}#)
                                                            #f)
                                                        (apply (lambda (#{_\ 1867}#
                                                                        #{name\ 1868}#
                                                                        #{args\ 1869}#
                                                                        #{e1\ 1870}#
                                                                        #{e2\ 1871}#)
                                                                 (values
                                                                   'define-form
                                                                   (#{wrap\ 441}#
                                                                     #{name\ 1868}#
                                                                     #{w\ 1773}#
                                                                     #{mod\ 1776}#)
                                                                   (#{decorate-source\ 290}#
                                                                     (cons '#(syntax-object
                                                                              lambda
                                                                              ((top)
                                                                               #(ribcage
                                                                                 #(_
                                                                                   name
                                                                                   args
                                                                                   e1
                                                                                   e2)
                                                                                 #((top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top))
                                                                                 #("i1862"
                                                                                   "i1863"
                                                                                   "i1864"
                                                                                   "i1865"
                                                                                   "i1866"))
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 #(ftype
                                                                                   fval
                                                                                   fe
                                                                                   fw
                                                                                   fs
                                                                                   fmod)
                                                                                 #((top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top))
                                                                                 #("i1809"
                                                                                   "i1810"
                                                                                   "i1811"
                                                                                   "i1812"
                                                                                   "i1813"
                                                                                   "i1814"))
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 #(first)
                                                                                 #((top))
                                                                                 #("i1801"))
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 #(e
                                                                                   r
                                                                                   w
                                                                                   s
                                                                                   rib
                                                                                   mod
                                                                                   for-car?)
                                                                                 #((top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top))
                                                                                 #("i1778"
                                                                                   "i1779"
                                                                                   "i1780"
                                                                                   "i1781"
                                                                                   "i1782"
                                                                                   "i1783"
                                                                                   "i1784"))
                                                                               #(ribcage
                                                                                 (lambda-var-list
                                                                                   gen-var
                                                                                   strip
                                                                                   chi-lambda-case
                                                                                   lambda*-formals
                                                                                   chi-simple-lambda
                                                                                   lambda-formals
                                                                                   ellipsis?
                                                                                   chi-void
                                                                                   eval-local-transformer
                                                                                   chi-local-syntax
                                                                                   chi-body
                                                                                   chi-macro
                                                                                   chi-application
                                                                                   chi-expr
                                                                                   chi
                                                                                   chi-top
                                                                                   syntax-type
                                                                                   chi-when-list
                                                                                   chi-install-global
                                                                                   chi-top-sequence
                                                                                   chi-sequence
                                                                                   source-wrap
                                                                                   wrap
                                                                                   bound-id-member?
                                                                                   distinct-bound-ids?
                                                                                   valid-bound-ids?
                                                                                   bound-id=?
                                                                                   free-id=?
                                                                                   id-var-name
                                                                                   same-marks?
                                                                                   join-marks
                                                                                   join-wraps
                                                                                   smart-append
                                                                                   make-binding-wrap
                                                                                   extend-ribcage!
                                                                                   make-empty-ribcage
                                                                                   new-mark
                                                                                   anti-mark
                                                                                   the-anti-mark
                                                                                   top-marked?
                                                                                   top-wrap
                                                                                   empty-wrap
                                                                                   set-ribcage-labels!
                                                                                   set-ribcage-marks!
                                                                                   set-ribcage-symnames!
                                                                                   ribcage-labels
                                                                                   ribcage-marks
                                                                                   ribcage-symnames
                                                                                   ribcage?
                                                                                   make-ribcage
                                                                                   gen-labels
                                                                                   gen-label
                                                                                   make-rename
                                                                                   rename-marks
                                                                                   rename-new
                                                                                   rename-old
                                                                                   subst-rename?
                                                                                   wrap-subst
                                                                                   wrap-marks
                                                                                   make-wrap
                                                                                   id-sym-name&marks
                                                                                   id-sym-name
                                                                                   id?
                                                                                   nonsymbol-id?
                                                                                   global-extend
                                                                                   lookup
                                                                                   macros-only-env
                                                                                   extend-var-env
                                                                                   extend-env
                                                                                   null-env
                                                                                   binding-value
                                                                                   binding-type
                                                                                   make-binding
                                                                                   arg-check
                                                                                   source-annotation
                                                                                   no-source
                                                                                   set-syntax-object-module!
                                                                                   set-syntax-object-wrap!
                                                                                   set-syntax-object-expression!
                                                                                   syntax-object-module
                                                                                   syntax-object-wrap
                                                                                   syntax-object-expression
                                                                                   syntax-object?
                                                                                   make-syntax-object
                                                                                   build-lexical-var
                                                                                   build-letrec
                                                                                   build-named-let
                                                                                   build-let
                                                                                   build-sequence
                                                                                   build-data
                                                                                   build-primref
                                                                                   build-lambda-case
                                                                                   build-case-lambda
                                                                                   build-simple-lambda
                                                                                   build-global-definition
                                                                                   maybe-name-value!
                                                                                   build-global-assignment
                                                                                   build-global-reference
                                                                                   analyze-variable
                                                                                   build-lexical-assignment
                                                                                   build-lexical-reference
                                                                                   build-dynlet
                                                                                   build-conditional
                                                                                   build-application
                                                                                   build-void
                                                                                   decorate-source
                                                                                   get-global-definition-hook
                                                                                   put-global-definition-hook
                                                                                   gensym-hook
                                                                                   local-eval-hook
                                                                                   top-level-eval-hook
                                                                                   fx<
                                                                                   fx=
                                                                                   fx-
                                                                                   fx+
                                                                                   set-lambda-meta!
                                                                                   lambda-meta
                                                                                   lambda?
                                                                                   make-dynlet
                                                                                   make-letrec
                                                                                   make-let
                                                                                   make-lambda-case
                                                                                   make-lambda
                                                                                   make-sequence
                                                                                   make-application
                                                                                   make-conditional
                                                                                   make-toplevel-define
                                                                                   make-toplevel-set
                                                                                   make-toplevel-ref
                                                                                   make-module-set
                                                                                   make-module-ref
                                                                                   make-lexical-set
                                                                                   make-lexical-ref
                                                                                   make-primitive-ref
                                                                                   make-const
                                                                                   make-void)
                                                                                 ((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                 ("i486"
                                                                                  "i484"
                                                                                  "i482"
                                                                                  "i480"
                                                                                  "i478"
                                                                                  "i476"
                                                                                  "i474"
                                                                                  "i472"
                                                                                  "i470"
                                                                                  "i468"
                                                                                  "i466"
                                                                                  "i464"
                                                                                  "i462"
                                                                                  "i460"
                                                                                  "i458"
                                                                                  "i456"
                                                                                  "i454"
                                                                                  "i452"
                                                                                  "i450"
                                                                                  "i448"
                                                                                  "i446"
                                                                                  "i444"
                                                                                  "i442"
                                                                                  "i440"
                                                                                  "i438"
                                                                                  "i436"
                                                                                  "i434"
                                                                                  "i432"
                                                                                  "i430"
                                                                                  "i428"
                                                                                  "i426"
                                                                                  "i424"
                                                                                  "i422"
                                                                                  "i420"
                                                                                  "i418"
                                                                                  "i416"
                                                                                  "i415"
                                                                                  "i414"
                                                                                  "i412"
                                                                                  "i411"
                                                                                  "i410"
                                                                                  "i409"
                                                                                  "i408"
                                                                                  "i406"
                                                                                  "i404"
                                                                                  "i402"
                                                                                  "i400"
                                                                                  "i398"
                                                                                  "i396"
                                                                                  "i394"
                                                                                  "i392"
                                                                                  "i389"
                                                                                  "i387"
                                                                                  "i386"
                                                                                  "i385"
                                                                                  "i384"
                                                                                  "i383"
                                                                                  "i382"
                                                                                  "i380"
                                                                                  "i378"
                                                                                  "i376"
                                                                                  "i374"
                                                                                  "i373"
                                                                                  "i371"
                                                                                  "i369"
                                                                                  "i367"
                                                                                  "i365"
                                                                                  "i363"
                                                                                  "i361"
                                                                                  "i359"
                                                                                  "i358"
                                                                                  "i356"
                                                                                  "i354"
                                                                                  "i353"
                                                                                  "i352"
                                                                                  "i350"
                                                                                  "i349"
                                                                                  "i347"
                                                                                  "i345"
                                                                                  "i343"
                                                                                  "i341"
                                                                                  "i339"
                                                                                  "i337"
                                                                                  "i335"
                                                                                  "i333"
                                                                                  "i331"
                                                                                  "i329"
                                                                                  "i327"
                                                                                  "i325"
                                                                                  "i323"
                                                                                  "i321"
                                                                                  "i319"
                                                                                  "i317"
                                                                                  "i315"
                                                                                  "i313"
                                                                                  "i311"
                                                                                  "i309"
                                                                                  "i307"
                                                                                  "i305"
                                                                                  "i303"
                                                                                  "i301"
                                                                                  "i299"
                                                                                  "i297"
                                                                                  "i295"
                                                                                  "i293"
                                                                                  "i291"
                                                                                  "i289"
                                                                                  "i287"
                                                                                  "i285"
                                                                                  "i284"
                                                                                  "i282"
                                                                                  "i280"
                                                                                  "i278"
                                                                                  "i276"
                                                                                  "i274"
                                                                                  "i272"
                                                                                  "i270"
                                                                                  "i268"
                                                                                  "i266"
                                                                                  "i263"
                                                                                  "i261"
                                                                                  "i259"
                                                                                  "i257"
                                                                                  "i255"
                                                                                  "i253"
                                                                                  "i251"
                                                                                  "i249"
                                                                                  "i247"
                                                                                  "i245"
                                                                                  "i243"
                                                                                  "i241"
                                                                                  "i239"
                                                                                  "i237"
                                                                                  "i235"
                                                                                  "i233"
                                                                                  "i231"
                                                                                  "i229"))
                                                                               #(ribcage
                                                                                 (define-structure
                                                                                   define-expansion-accessors
                                                                                   define-expansion-constructors
                                                                                   and-map*)
                                                                                 ((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                 ("i23"
                                                                                  "i22"
                                                                                  "i21"
                                                                                  "i19")))
                                                                              (hygiene
                                                                                guile))
                                                                           (#{wrap\ 441}#
                                                                             (cons #{args\ 1869}#
                                                                                   (cons #{e1\ 1870}#
                                                                                         #{e2\ 1871}#))
                                                                             #{w\ 1773}#
                                                                             #{mod\ 1776}#))
                                                                     #{s\ 1774}#)
                                                                   '(())
                                                                   #{s\ 1774}#
                                                                   #{mod\ 1776}#))
                                                               #{tmp\ 1849}#)
                                                        ((lambda (#{tmp\ 1874}#)
                                                           (if (if #{tmp\ 1874}#
                                                                 (apply (lambda (#{_\ 1877}#
                                                                                 #{name\ 1878}#)
                                                                          (#{id?\ 372}#
                                                                            #{name\ 1878}#))
                                                                        #{tmp\ 1874}#)
                                                                 #f)
                                                             (apply (lambda (#{_\ 1881}#
                                                                             #{name\ 1882}#)
                                                                      (values
                                                                        'define-form
                                                                        (#{wrap\ 441}#
                                                                          #{name\ 1882}#
                                                                          #{w\ 1773}#
                                                                          #{mod\ 1776}#)
                                                                        '(#(syntax-object
                                                                            if
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(_
                                                                                 name)
                                                                               #((top)
                                                                                 (top))
                                                                               #("i1879"
                                                                                 "i1880"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(ftype
                                                                                 fval
                                                                                 fe
                                                                                 fw
                                                                                 fs
                                                                                 fmod)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i1809"
                                                                                 "i1810"
                                                                                 "i1811"
                                                                                 "i1812"
                                                                                 "i1813"
                                                                                 "i1814"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(first)
                                                                               #((top))
                                                                               #("i1801"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(e
                                                                                 r
                                                                                 w
                                                                                 s
                                                                                 rib
                                                                                 mod
                                                                                 for-car?)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i1778"
                                                                                 "i1779"
                                                                                 "i1780"
                                                                                 "i1781"
                                                                                 "i1782"
                                                                                 "i1783"
                                                                                 "i1784"))
                                                                             #(ribcage
                                                                               (lambda-var-list
                                                                                 gen-var
                                                                                 strip
                                                                                 chi-lambda-case
                                                                                 lambda*-formals
                                                                                 chi-simple-lambda
                                                                                 lambda-formals
                                                                                 ellipsis?
                                                                                 chi-void
                                                                                 eval-local-transformer
                                                                                 chi-local-syntax
                                                                                 chi-body
                                                                                 chi-macro
                                                                                 chi-application
                                                                                 chi-expr
                                                                                 chi
                                                                                 chi-top
                                                                                 syntax-type
                                                                                 chi-when-list
                                                                                 chi-install-global
                                                                                 chi-top-sequence
                                                                                 chi-sequence
                                                                                 source-wrap
                                                                                 wrap
                                                                                 bound-id-member?
                                                                                 distinct-bound-ids?
                                                                                 valid-bound-ids?
                                                                                 bound-id=?
                                                                                 free-id=?
                                                                                 id-var-name
                                                                                 same-marks?
                                                                                 join-marks
                                                                                 join-wraps
                                                                                 smart-append
                                                                                 make-binding-wrap
                                                                                 extend-ribcage!
                                                                                 make-empty-ribcage
                                                                                 new-mark
                                                                                 anti-mark
                                                                                 the-anti-mark
                                                                                 top-marked?
                                                                                 top-wrap
                                                                                 empty-wrap
                                                                                 set-ribcage-labels!
                                                                                 set-ribcage-marks!
                                                                                 set-ribcage-symnames!
                                                                                 ribcage-labels
                                                                                 ribcage-marks
                                                                                 ribcage-symnames
                                                                                 ribcage?
                                                                                 make-ribcage
                                                                                 gen-labels
                                                                                 gen-label
                                                                                 make-rename
                                                                                 rename-marks
                                                                                 rename-new
                                                                                 rename-old
                                                                                 subst-rename?
                                                                                 wrap-subst
                                                                                 wrap-marks
                                                                                 make-wrap
                                                                                 id-sym-name&marks
                                                                                 id-sym-name
                                                                                 id?
                                                                                 nonsymbol-id?
                                                                                 global-extend
                                                                                 lookup
                                                                                 macros-only-env
                                                                                 extend-var-env
                                                                                 extend-env
                                                                                 null-env
                                                                                 binding-value
                                                                                 binding-type
                                                                                 make-binding
                                                                                 arg-check
                                                                                 source-annotation
                                                                                 no-source
                                                                                 set-syntax-object-module!
                                                                                 set-syntax-object-wrap!
                                                                                 set-syntax-object-expression!
                                                                                 syntax-object-module
                                                                                 syntax-object-wrap
                                                                                 syntax-object-expression
                                                                                 syntax-object?
                                                                                 make-syntax-object
                                                                                 build-lexical-var
                                                                                 build-letrec
                                                                                 build-named-let
                                                                                 build-let
                                                                                 build-sequence
                                                                                 build-data
                                                                                 build-primref
                                                                                 build-lambda-case
                                                                                 build-case-lambda
                                                                                 build-simple-lambda
                                                                                 build-global-definition
                                                                                 maybe-name-value!
                                                                                 build-global-assignment
                                                                                 build-global-reference
                                                                                 analyze-variable
                                                                                 build-lexical-assignment
                                                                                 build-lexical-reference
                                                                                 build-dynlet
                                                                                 build-conditional
                                                                                 build-application
                                                                                 build-void
                                                                                 decorate-source
                                                                                 get-global-definition-hook
                                                                                 put-global-definition-hook
                                                                                 gensym-hook
                                                                                 local-eval-hook
                                                                                 top-level-eval-hook
                                                                                 fx<
                                                                                 fx=
                                                                                 fx-
                                                                                 fx+
                                                                                 set-lambda-meta!
                                                                                 lambda-meta
                                                                                 lambda?
                                                                                 make-dynlet
                                                                                 make-letrec
                                                                                 make-let
                                                                                 make-lambda-case
                                                                                 make-lambda
                                                                                 make-sequence
                                                                                 make-application
                                                                                 make-conditional
                                                                                 make-toplevel-define
                                                                                 make-toplevel-set
                                                                                 make-toplevel-ref
                                                                                 make-module-set
                                                                                 make-module-ref
                                                                                 make-lexical-set
                                                                                 make-lexical-ref
                                                                                 make-primitive-ref
                                                                                 make-const
                                                                                 make-void)
                                                                               ((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                               ("i486"
                                                                                "i484"
                                                                                "i482"
                                                                                "i480"
                                                                                "i478"
                                                                                "i476"
                                                                                "i474"
                                                                                "i472"
                                                                                "i470"
                                                                                "i468"
                                                                                "i466"
                                                                                "i464"
                                                                                "i462"
                                                                                "i460"
                                                                                "i458"
                                                                                "i456"
                                                                                "i454"
                                                                                "i452"
                                                                                "i450"
                                                                                "i448"
                                                                                "i446"
                                                                                "i444"
                                                                                "i442"
                                                                                "i440"
                                                                                "i438"
                                                                                "i436"
                                                                                "i434"
                                                                                "i432"
                                                                                "i430"
                                                                                "i428"
                                                                                "i426"
                                                                                "i424"
                                                                                "i422"
                                                                                "i420"
                                                                                "i418"
                                                                                "i416"
                                                                                "i415"
                                                                                "i414"
                                                                                "i412"
                                                                                "i411"
                                                                                "i410"
                                                                                "i409"
                                                                                "i408"
                                                                                "i406"
                                                                                "i404"
                                                                                "i402"
                                                                                "i400"
                                                                                "i398"
                                                                                "i396"
                                                                                "i394"
                                                                                "i392"
                                                                                "i389"
                                                                                "i387"
                                                                                "i386"
                                                                                "i385"
                                                                                "i384"
                                                                                "i383"
                                                                                "i382"
                                                                                "i380"
                                                                                "i378"
                                                                                "i376"
                                                                                "i374"
                                                                                "i373"
                                                                                "i371"
                                                                                "i369"
                                                                                "i367"
                                                                                "i365"
                                                                                "i363"
                                                                                "i361"
                                                                                "i359"
                                                                                "i358"
                                                                                "i356"
                                                                                "i354"
                                                                                "i353"
                                                                                "i352"
                                                                                "i350"
                                                                                "i349"
                                                                                "i347"
                                                                                "i345"
                                                                                "i343"
                                                                                "i341"
                                                                                "i339"
                                                                                "i337"
                                                                                "i335"
                                                                                "i333"
                                                                                "i331"
                                                                                "i329"
                                                                                "i327"
                                                                                "i325"
                                                                                "i323"
                                                                                "i321"
                                                                                "i319"
                                                                                "i317"
                                                                                "i315"
                                                                                "i313"
                                                                                "i311"
                                                                                "i309"
                                                                                "i307"
                                                                                "i305"
                                                                                "i303"
                                                                                "i301"
                                                                                "i299"
                                                                                "i297"
                                                                                "i295"
                                                                                "i293"
                                                                                "i291"
                                                                                "i289"
                                                                                "i287"
                                                                                "i285"
                                                                                "i284"
                                                                                "i282"
                                                                                "i280"
                                                                                "i278"
                                                                                "i276"
                                                                                "i274"
                                                                                "i272"
                                                                                "i270"
                                                                                "i268"
                                                                                "i266"
                                                                                "i263"
                                                                                "i261"
                                                                                "i259"
                                                                                "i257"
                                                                                "i255"
                                                                                "i253"
                                                                                "i251"
                                                                                "i249"
                                                                                "i247"
                                                                                "i245"
                                                                                "i243"
                                                                                "i241"
                                                                                "i239"
                                                                                "i237"
                                                                                "i235"
                                                                                "i233"
                                                                                "i231"
                                                                                "i229"))
                                                                             #(ribcage
                                                                               (define-structure
                                                                                 define-expansion-accessors
                                                                                 define-expansion-constructors
                                                                                 and-map*)
                                                                               ((top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                               ("i23"
                                                                                "i22"
                                                                                "i21"
                                                                                "i19")))
                                                                            (hygiene
                                                                              guile))
                                                                          #(syntax-object
                                                                            #f
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(_
                                                                                 name)
                                                                               #((top)
                                                                                 (top))
                                                                               #("i1879"
                                                                                 "i1880"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(ftype
                                                                                 fval
                                                                                 fe
                                                                                 fw
                                                                                 fs
                                                                                 fmod)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i1809"
                                                                                 "i1810"
                                                                                 "i1811"
                                                                                 "i1812"
                                                                                 "i1813"
                                                                                 "i1814"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(first)
                                                                               #((top))
                                                                               #("i1801"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(e
                                                                                 r
                                                                                 w
                                                                                 s
                                                                                 rib
                                                                                 mod
                                                                                 for-car?)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i1778"
                                                                                 "i1779"
                                                                                 "i1780"
                                                                                 "i1781"
                                                                                 "i1782"
                                                                                 "i1783"
                                                                                 "i1784"))
                                                                             #(ribcage
                                                                               (lambda-var-list
                                                                                 gen-var
                                                                                 strip
                                                                                 chi-lambda-case
                                                                                 lambda*-formals
                                                                                 chi-simple-lambda
                                                                                 lambda-formals
                                                                                 ellipsis?
                                                                                 chi-void
                                                                                 eval-local-transformer
                                                                                 chi-local-syntax
                                                                                 chi-body
                                                                                 chi-macro
                                                                                 chi-application
                                                                                 chi-expr
                                                                                 chi
                                                                                 chi-top
                                                                                 syntax-type
                                                                                 chi-when-list
                                                                                 chi-install-global
                                                                                 chi-top-sequence
                                                                                 chi-sequence
                                                                                 source-wrap
                                                                                 wrap
                                                                                 bound-id-member?
                                                                                 distinct-bound-ids?
                                                                                 valid-bound-ids?
                                                                                 bound-id=?
                                                                                 free-id=?
                                                                                 id-var-name
                                                                                 same-marks?
                                                                                 join-marks
                                                                                 join-wraps
                                                                                 smart-append
                                                                                 make-binding-wrap
                                                                                 extend-ribcage!
                                                                                 make-empty-ribcage
                                                                                 new-mark
                                                                                 anti-mark
                                                                                 the-anti-mark
                                                                                 top-marked?
                                                                                 top-wrap
                                                                                 empty-wrap
                                                                                 set-ribcage-labels!
                                                                                 set-ribcage-marks!
                                                                                 set-ribcage-symnames!
                                                                                 ribcage-labels
                                                                                 ribcage-marks
                                                                                 ribcage-symnames
                                                                                 ribcage?
                                                                                 make-ribcage
                                                                                 gen-labels
                                                                                 gen-label
                                                                                 make-rename
                                                                                 rename-marks
                                                                                 rename-new
                                                                                 rename-old
                                                                                 subst-rename?
                                                                                 wrap-subst
                                                                                 wrap-marks
                                                                                 make-wrap
                                                                                 id-sym-name&marks
                                                                                 id-sym-name
                                                                                 id?
                                                                                 nonsymbol-id?
                                                                                 global-extend
                                                                                 lookup
                                                                                 macros-only-env
                                                                                 extend-var-env
                                                                                 extend-env
                                                                                 null-env
                                                                                 binding-value
                                                                                 binding-type
                                                                                 make-binding
                                                                                 arg-check
                                                                                 source-annotation
                                                                                 no-source
                                                                                 set-syntax-object-module!
                                                                                 set-syntax-object-wrap!
                                                                                 set-syntax-object-expression!
                                                                                 syntax-object-module
                                                                                 syntax-object-wrap
                                                                                 syntax-object-expression
                                                                                 syntax-object?
                                                                                 make-syntax-object
                                                                                 build-lexical-var
                                                                                 build-letrec
                                                                                 build-named-let
                                                                                 build-let
                                                                                 build-sequence
                                                                                 build-data
                                                                                 build-primref
                                                                                 build-lambda-case
                                                                                 build-case-lambda
                                                                                 build-simple-lambda
                                                                                 build-global-definition
                                                                                 maybe-name-value!
                                                                                 build-global-assignment
                                                                                 build-global-reference
                                                                                 analyze-variable
                                                                                 build-lexical-assignment
                                                                                 build-lexical-reference
                                                                                 build-dynlet
                                                                                 build-conditional
                                                                                 build-application
                                                                                 build-void
                                                                                 decorate-source
                                                                                 get-global-definition-hook
                                                                                 put-global-definition-hook
                                                                                 gensym-hook
                                                                                 local-eval-hook
                                                                                 top-level-eval-hook
                                                                                 fx<
                                                                                 fx=
                                                                                 fx-
                                                                                 fx+
                                                                                 set-lambda-meta!
                                                                                 lambda-meta
                                                                                 lambda?
                                                                                 make-dynlet
                                                                                 make-letrec
                                                                                 make-let
                                                                                 make-lambda-case
                                                                                 make-lambda
                                                                                 make-sequence
                                                                                 make-application
                                                                                 make-conditional
                                                                                 make-toplevel-define
                                                                                 make-toplevel-set
                                                                                 make-toplevel-ref
                                                                                 make-module-set
                                                                                 make-module-ref
                                                                                 make-lexical-set
                                                                                 make-lexical-ref
                                                                                 make-primitive-ref
                                                                                 make-const
                                                                                 make-void)
                                                                               ((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                               ("i486"
                                                                                "i484"
                                                                                "i482"
                                                                                "i480"
                                                                                "i478"
                                                                                "i476"
                                                                                "i474"
                                                                                "i472"
                                                                                "i470"
                                                                                "i468"
                                                                                "i466"
                                                                                "i464"
                                                                                "i462"
                                                                                "i460"
                                                                                "i458"
                                                                                "i456"
                                                                                "i454"
                                                                                "i452"
                                                                                "i450"
                                                                                "i448"
                                                                                "i446"
                                                                                "i444"
                                                                                "i442"
                                                                                "i440"
                                                                                "i438"
                                                                                "i436"
                                                                                "i434"
                                                                                "i432"
                                                                                "i430"
                                                                                "i428"
                                                                                "i426"
                                                                                "i424"
                                                                                "i422"
                                                                                "i420"
                                                                                "i418"
                                                                                "i416"
                                                                                "i415"
                                                                                "i414"
                                                                                "i412"
                                                                                "i411"
                                                                                "i410"
                                                                                "i409"
                                                                                "i408"
                                                                                "i406"
                                                                                "i404"
                                                                                "i402"
                                                                                "i400"
                                                                                "i398"
                                                                                "i396"
                                                                                "i394"
                                                                                "i392"
                                                                                "i389"
                                                                                "i387"
                                                                                "i386"
                                                                                "i385"
                                                                                "i384"
                                                                                "i383"
                                                                                "i382"
                                                                                "i380"
                                                                                "i378"
                                                                                "i376"
                                                                                "i374"
                                                                                "i373"
                                                                                "i371"
                                                                                "i369"
                                                                                "i367"
                                                                                "i365"
                                                                                "i363"
                                                                                "i361"
                                                                                "i359"
                                                                                "i358"
                                                                                "i356"
                                                                                "i354"
                                                                                "i353"
                                                                                "i352"
                                                                                "i350"
                                                                                "i349"
                                                                                "i347"
                                                                                "i345"
                                                                                "i343"
                                                                                "i341"
                                                                                "i339"
                                                                                "i337"
                                                                                "i335"
                                                                                "i333"
                                                                                "i331"
                                                                                "i329"
                                                                                "i327"
                                                                                "i325"
                                                                                "i323"
                                                                                "i321"
                                                                                "i319"
                                                                                "i317"
                                                                                "i315"
                                                                                "i313"
                                                                                "i311"
                                                                                "i309"
                                                                                "i307"
                                                                                "i305"
                                                                                "i303"
                                                                                "i301"
                                                                                "i299"
                                                                                "i297"
                                                                                "i295"
                                                                                "i293"
                                                                                "i291"
                                                                                "i289"
                                                                                "i287"
                                                                                "i285"
                                                                                "i284"
                                                                                "i282"
                                                                                "i280"
                                                                                "i278"
                                                                                "i276"
                                                                                "i274"
                                                                                "i272"
                                                                                "i270"
                                                                                "i268"
                                                                                "i266"
                                                                                "i263"
                                                                                "i261"
                                                                                "i259"
                                                                                "i257"
                                                                                "i255"
                                                                                "i253"
                                                                                "i251"
                                                                                "i249"
                                                                                "i247"
                                                                                "i245"
                                                                                "i243"
                                                                                "i241"
                                                                                "i239"
                                                                                "i237"
                                                                                "i235"
                                                                                "i233"
                                                                                "i231"
                                                                                "i229"))
                                                                             #(ribcage
                                                                               (define-structure
                                                                                 define-expansion-accessors
                                                                                 define-expansion-constructors
                                                                                 and-map*)
                                                                               ((top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                               ("i23"
                                                                                "i22"
                                                                                "i21"
                                                                                "i19")))
                                                                            (hygiene
                                                                              guile))
                                                                          #(syntax-object
                                                                            #f
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(_
                                                                                 name)
                                                                               #((top)
                                                                                 (top))
                                                                               #("i1879"
                                                                                 "i1880"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(ftype
                                                                                 fval
                                                                                 fe
                                                                                 fw
                                                                                 fs
                                                                                 fmod)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i1809"
                                                                                 "i1810"
                                                                                 "i1811"
                                                                                 "i1812"
                                                                                 "i1813"
                                                                                 "i1814"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(first)
                                                                               #((top))
                                                                               #("i1801"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(e
                                                                                 r
                                                                                 w
                                                                                 s
                                                                                 rib
                                                                                 mod
                                                                                 for-car?)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i1778"
                                                                                 "i1779"
                                                                                 "i1780"
                                                                                 "i1781"
                                                                                 "i1782"
                                                                                 "i1783"
                                                                                 "i1784"))
                                                                             #(ribcage
                                                                               (lambda-var-list
                                                                                 gen-var
                                                                                 strip
                                                                                 chi-lambda-case
                                                                                 lambda*-formals
                                                                                 chi-simple-lambda
                                                                                 lambda-formals
                                                                                 ellipsis?
                                                                                 chi-void
                                                                                 eval-local-transformer
                                                                                 chi-local-syntax
                                                                                 chi-body
                                                                                 chi-macro
                                                                                 chi-application
                                                                                 chi-expr
                                                                                 chi
                                                                                 chi-top
                                                                                 syntax-type
                                                                                 chi-when-list
                                                                                 chi-install-global
                                                                                 chi-top-sequence
                                                                                 chi-sequence
                                                                                 source-wrap
                                                                                 wrap
                                                                                 bound-id-member?
                                                                                 distinct-bound-ids?
                                                                                 valid-bound-ids?
                                                                                 bound-id=?
                                                                                 free-id=?
                                                                                 id-var-name
                                                                                 same-marks?
                                                                                 join-marks
                                                                                 join-wraps
                                                                                 smart-append
                                                                                 make-binding-wrap
                                                                                 extend-ribcage!
                                                                                 make-empty-ribcage
                                                                                 new-mark
                                                                                 anti-mark
                                                                                 the-anti-mark
                                                                                 top-marked?
                                                                                 top-wrap
                                                                                 empty-wrap
                                                                                 set-ribcage-labels!
                                                                                 set-ribcage-marks!
                                                                                 set-ribcage-symnames!
                                                                                 ribcage-labels
                                                                                 ribcage-marks
                                                                                 ribcage-symnames
                                                                                 ribcage?
                                                                                 make-ribcage
                                                                                 gen-labels
                                                                                 gen-label
                                                                                 make-rename
                                                                                 rename-marks
                                                                                 rename-new
                                                                                 rename-old
                                                                                 subst-rename?
                                                                                 wrap-subst
                                                                                 wrap-marks
                                                                                 make-wrap
                                                                                 id-sym-name&marks
                                                                                 id-sym-name
                                                                                 id?
                                                                                 nonsymbol-id?
                                                                                 global-extend
                                                                                 lookup
                                                                                 macros-only-env
                                                                                 extend-var-env
                                                                                 extend-env
                                                                                 null-env
                                                                                 binding-value
                                                                                 binding-type
                                                                                 make-binding
                                                                                 arg-check
                                                                                 source-annotation
                                                                                 no-source
                                                                                 set-syntax-object-module!
                                                                                 set-syntax-object-wrap!
                                                                                 set-syntax-object-expression!
                                                                                 syntax-object-module
                                                                                 syntax-object-wrap
                                                                                 syntax-object-expression
                                                                                 syntax-object?
                                                                                 make-syntax-object
                                                                                 build-lexical-var
                                                                                 build-letrec
                                                                                 build-named-let
                                                                                 build-let
                                                                                 build-sequence
                                                                                 build-data
                                                                                 build-primref
                                                                                 build-lambda-case
                                                                                 build-case-lambda
                                                                                 build-simple-lambda
                                                                                 build-global-definition
                                                                                 maybe-name-value!
                                                                                 build-global-assignment
                                                                                 build-global-reference
                                                                                 analyze-variable
                                                                                 build-lexical-assignment
                                                                                 build-lexical-reference
                                                                                 build-dynlet
                                                                                 build-conditional
                                                                                 build-application
                                                                                 build-void
                                                                                 decorate-source
                                                                                 get-global-definition-hook
                                                                                 put-global-definition-hook
                                                                                 gensym-hook
                                                                                 local-eval-hook
                                                                                 top-level-eval-hook
                                                                                 fx<
                                                                                 fx=
                                                                                 fx-
                                                                                 fx+
                                                                                 set-lambda-meta!
                                                                                 lambda-meta
                                                                                 lambda?
                                                                                 make-dynlet
                                                                                 make-letrec
                                                                                 make-let
                                                                                 make-lambda-case
                                                                                 make-lambda
                                                                                 make-sequence
                                                                                 make-application
                                                                                 make-conditional
                                                                                 make-toplevel-define
                                                                                 make-toplevel-set
                                                                                 make-toplevel-ref
                                                                                 make-module-set
                                                                                 make-module-ref
                                                                                 make-lexical-set
                                                                                 make-lexical-ref
                                                                                 make-primitive-ref
                                                                                 make-const
                                                                                 make-void)
                                                                               ((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                               ("i486"
                                                                                "i484"
                                                                                "i482"
                                                                                "i480"
                                                                                "i478"
                                                                                "i476"
                                                                                "i474"
                                                                                "i472"
                                                                                "i470"
                                                                                "i468"
                                                                                "i466"
                                                                                "i464"
                                                                                "i462"
                                                                                "i460"
                                                                                "i458"
                                                                                "i456"
                                                                                "i454"
                                                                                "i452"
                                                                                "i450"
                                                                                "i448"
                                                                                "i446"
                                                                                "i444"
                                                                                "i442"
                                                                                "i440"
                                                                                "i438"
                                                                                "i436"
                                                                                "i434"
                                                                                "i432"
                                                                                "i430"
                                                                                "i428"
                                                                                "i426"
                                                                                "i424"
                                                                                "i422"
                                                                                "i420"
                                                                                "i418"
                                                                                "i416"
                                                                                "i415"
                                                                                "i414"
                                                                                "i412"
                                                                                "i411"
                                                                                "i410"
                                                                                "i409"
                                                                                "i408"
                                                                                "i406"
                                                                                "i404"
                                                                                "i402"
                                                                                "i400"
                                                                                "i398"
                                                                                "i396"
                                                                                "i394"
                                                                                "i392"
                                                                                "i389"
                                                                                "i387"
                                                                                "i386"
                                                                                "i385"
                                                                                "i384"
                                                                                "i383"
                                                                                "i382"
                                                                                "i380"
                                                                                "i378"
                                                                                "i376"
                                                                                "i374"
                                                                                "i373"
                                                                                "i371"
                                                                                "i369"
                                                                                "i367"
                                                                                "i365"
                                                                                "i363"
                                                                                "i361"
                                                                                "i359"
                                                                                "i358"
                                                                                "i356"
                                                                                "i354"
                                                                                "i353"
                                                                                "i352"
                                                                                "i350"
                                                                                "i349"
                                                                                "i347"
                                                                                "i345"
                                                                                "i343"
                                                                                "i341"
                                                                                "i339"
                                                                                "i337"
                                                                                "i335"
                                                                                "i333"
                                                                                "i331"
                                                                                "i329"
                                                                                "i327"
                                                                                "i325"
                                                                                "i323"
                                                                                "i321"
                                                                                "i319"
                                                                                "i317"
                                                                                "i315"
                                                                                "i313"
                                                                                "i311"
                                                                                "i309"
                                                                                "i307"
                                                                                "i305"
                                                                                "i303"
                                                                                "i301"
                                                                                "i299"
                                                                                "i297"
                                                                                "i295"
                                                                                "i293"
                                                                                "i291"
                                                                                "i289"
                                                                                "i287"
                                                                                "i285"
                                                                                "i284"
                                                                                "i282"
                                                                                "i280"
                                                                                "i278"
                                                                                "i276"
                                                                                "i274"
                                                                                "i272"
                                                                                "i270"
                                                                                "i268"
                                                                                "i266"
                                                                                "i263"
                                                                                "i261"
                                                                                "i259"
                                                                                "i257"
                                                                                "i255"
                                                                                "i253"
                                                                                "i251"
                                                                                "i249"
                                                                                "i247"
                                                                                "i245"
                                                                                "i243"
                                                                                "i241"
                                                                                "i239"
                                                                                "i237"
                                                                                "i235"
                                                                                "i233"
                                                                                "i231"
                                                                                "i229"))
                                                                             #(ribcage
                                                                               (define-structure
                                                                                 define-expansion-accessors
                                                                                 define-expansion-constructors
                                                                                 and-map*)
                                                                               ((top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                               ("i23"
                                                                                "i22"
                                                                                "i21"
                                                                                "i19")))
                                                                            (hygiene
                                                                              guile)))
                                                                        '(())
                                                                        #{s\ 1774}#
                                                                        #{mod\ 1776}#))
                                                                    #{tmp\ 1874}#)
                                                             (syntax-violation
                                                               #f
                                                               "source expression failed to match any pattern"
                                                               #{tmp\ 1835}#)))
                                                         ($sc-dispatch
                                                           #{tmp\ 1835}#
                                                           '(any any)))))
                                                    ($sc-dispatch
                                                      #{tmp\ 1835}#
                                                      '(any (any . any)
                                                            any
                                                            .
                                                            each-any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 1835}#
                                                 '(any any any))))
                                            #{e\ 1771}#)
                                           (if (memv #{ftype\ 1803}#
                                                     '(define-syntax))
                                             ((lambda (#{tmp\ 1885}#)
                                                ((lambda (#{tmp\ 1886}#)
                                                   (if (if #{tmp\ 1886}#
                                                         (apply (lambda (#{_\ 1890}#
                                                                         #{name\ 1891}#
                                                                         #{val\ 1892}#)
                                                                  (#{id?\ 372}#
                                                                    #{name\ 1891}#))
                                                                #{tmp\ 1886}#)
                                                         #f)
                                                     (apply (lambda (#{_\ 1896}#
                                                                     #{name\ 1897}#
                                                                     #{val\ 1898}#)
                                                              (values
                                                                'define-syntax-form
                                                                #{name\ 1897}#
                                                                #{val\ 1898}#
                                                                #{w\ 1773}#
                                                                #{s\ 1774}#
                                                                #{mod\ 1776}#))
                                                            #{tmp\ 1886}#)
                                                     (syntax-violation
                                                       #f
                                                       "source expression failed to match any pattern"
                                                       #{tmp\ 1885}#)))
                                                 ($sc-dispatch
                                                   #{tmp\ 1885}#
                                                   '(any any any))))
                                              #{e\ 1771}#)
                                             (values
                                               'call
                                               #f
                                               #{e\ 1771}#
                                               #{w\ 1773}#
                                               #{s\ 1774}#
                                               #{mod\ 1776}#))))))))))))))
                   (if (#{syntax-object?\ 336}# #{e\ 1771}#)
                     (#{syntax-type\ 453}#
                       (#{syntax-object-expression\ 338}# #{e\ 1771}#)
                       #{r\ 1772}#
                       (#{join-wraps\ 423}#
                         #{w\ 1773}#
                         (#{syntax-object-wrap\ 340}# #{e\ 1771}#))
                       (let ((#{t\ 1904}#
                               (#{source-annotation\ 351}# #{e\ 1771}#)))
                         (if #{t\ 1904}# #{t\ 1904}# #{s\ 1774}#))
                       #{rib\ 1775}#
                       (let ((#{t\ 1908}#
                               (#{syntax-object-module\ 342}# #{e\ 1771}#)))
                         (if #{t\ 1908}# #{t\ 1908}# #{mod\ 1776}#))
                       #{for-car?\ 1777}#)
                     (if (self-evaluating? #{e\ 1771}#)
                       (values
                         'constant
                         #f
                         #{e\ 1771}#
                         #{w\ 1773}#
                         #{s\ 1774}#
                         #{mod\ 1776}#)
                       (values
                         'other
                         #f
                         #{e\ 1771}#
                         #{w\ 1773}#
                         #{s\ 1774}#
                         #{mod\ 1776}#)))))))
           (#{chi-when-list\ 451}#
             (lambda (#{e\ 1913}# #{when-list\ 1914}# #{w\ 1915}#)
               (letrec ((#{f\ 1922}#
                          (lambda (#{when-list\ 1923}# #{situations\ 1924}#)
                            (if (null? #{when-list\ 1923}#)
                              #{situations\ 1924}#
                              (#{f\ 1922}#
                                (cdr #{when-list\ 1923}#)
                                (cons (let ((#{x\ 1926}#
                                              (car #{when-list\ 1923}#)))
                                        (if (#{free-id=?\ 431}#
                                              #{x\ 1926}#
                                              '#(syntax-object
                                                 compile
                                                 ((top)
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(x)
                                                    #((top))
                                                    #("i1925"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(f when-list situations)
                                                    #((top) (top) (top))
                                                    #("i1919" "i1920" "i1921"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(e when-list w)
                                                    #((top) (top) (top))
                                                    #("i1916" "i1917" "i1918"))
                                                  #(ribcage
                                                    (lambda-var-list
                                                      gen-var
                                                      strip
                                                      chi-lambda-case
                                                      lambda*-formals
                                                      chi-simple-lambda
                                                      lambda-formals
                                                      ellipsis?
                                                      chi-void
                                                      eval-local-transformer
                                                      chi-local-syntax
                                                      chi-body
                                                      chi-macro
                                                      chi-application
                                                      chi-expr
                                                      chi
                                                      chi-top
                                                      syntax-type
                                                      chi-when-list
                                                      chi-install-global
                                                      chi-top-sequence
                                                      chi-sequence
                                                      source-wrap
                                                      wrap
                                                      bound-id-member?
                                                      distinct-bound-ids?
                                                      valid-bound-ids?
                                                      bound-id=?
                                                      free-id=?
                                                      id-var-name
                                                      same-marks?
                                                      join-marks
                                                      join-wraps
                                                      smart-append
                                                      make-binding-wrap
                                                      extend-ribcage!
                                                      make-empty-ribcage
                                                      new-mark
                                                      anti-mark
                                                      the-anti-mark
                                                      top-marked?
                                                      top-wrap
                                                      empty-wrap
                                                      set-ribcage-labels!
                                                      set-ribcage-marks!
                                                      set-ribcage-symnames!
                                                      ribcage-labels
                                                      ribcage-marks
                                                      ribcage-symnames
                                                      ribcage?
                                                      make-ribcage
                                                      gen-labels
                                                      gen-label
                                                      make-rename
                                                      rename-marks
                                                      rename-new
                                                      rename-old
                                                      subst-rename?
                                                      wrap-subst
                                                      wrap-marks
                                                      make-wrap
                                                      id-sym-name&marks
                                                      id-sym-name
                                                      id?
                                                      nonsymbol-id?
                                                      global-extend
                                                      lookup
                                                      macros-only-env
                                                      extend-var-env
                                                      extend-env
                                                      null-env
                                                      binding-value
                                                      binding-type
                                                      make-binding
                                                      arg-check
                                                      source-annotation
                                                      no-source
                                                      set-syntax-object-module!
                                                      set-syntax-object-wrap!
                                                      set-syntax-object-expression!
                                                      syntax-object-module
                                                      syntax-object-wrap
                                                      syntax-object-expression
                                                      syntax-object?
                                                      make-syntax-object
                                                      build-lexical-var
                                                      build-letrec
                                                      build-named-let
                                                      build-let
                                                      build-sequence
                                                      build-data
                                                      build-primref
                                                      build-lambda-case
                                                      build-case-lambda
                                                      build-simple-lambda
                                                      build-global-definition
                                                      maybe-name-value!
                                                      build-global-assignment
                                                      build-global-reference
                                                      analyze-variable
                                                      build-lexical-assignment
                                                      build-lexical-reference
                                                      build-dynlet
                                                      build-conditional
                                                      build-application
                                                      build-void
                                                      decorate-source
                                                      get-global-definition-hook
                                                      put-global-definition-hook
                                                      gensym-hook
                                                      local-eval-hook
                                                      top-level-eval-hook
                                                      fx<
                                                      fx=
                                                      fx-
                                                      fx+
                                                      set-lambda-meta!
                                                      lambda-meta
                                                      lambda?
                                                      make-dynlet
                                                      make-letrec
                                                      make-let
                                                      make-lambda-case
                                                      make-lambda
                                                      make-sequence
                                                      make-application
                                                      make-conditional
                                                      make-toplevel-define
                                                      make-toplevel-set
                                                      make-toplevel-ref
                                                      make-module-set
                                                      make-module-ref
                                                      make-lexical-set
                                                      make-lexical-ref
                                                      make-primitive-ref
                                                      make-const
                                                      make-void)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i486"
                                                     "i484"
                                                     "i482"
                                                     "i480"
                                                     "i478"
                                                     "i476"
                                                     "i474"
                                                     "i472"
                                                     "i470"
                                                     "i468"
                                                     "i466"
                                                     "i464"
                                                     "i462"
                                                     "i460"
                                                     "i458"
                                                     "i456"
                                                     "i454"
                                                     "i452"
                                                     "i450"
                                                     "i448"
                                                     "i446"
                                                     "i444"
                                                     "i442"
                                                     "i440"
                                                     "i438"
                                                     "i436"
                                                     "i434"
                                                     "i432"
                                                     "i430"
                                                     "i428"
                                                     "i426"
                                                     "i424"
                                                     "i422"
                                                     "i420"
                                                     "i418"
                                                     "i416"
                                                     "i415"
                                                     "i414"
                                                     "i412"
                                                     "i411"
                                                     "i410"
                                                     "i409"
                                                     "i408"
                                                     "i406"
                                                     "i404"
                                                     "i402"
                                                     "i400"
                                                     "i398"
                                                     "i396"
                                                     "i394"
                                                     "i392"
                                                     "i389"
                                                     "i387"
                                                     "i386"
                                                     "i385"
                                                     "i384"
                                                     "i383"
                                                     "i382"
                                                     "i380"
                                                     "i378"
                                                     "i376"
                                                     "i374"
                                                     "i373"
                                                     "i371"
                                                     "i369"
                                                     "i367"
                                                     "i365"
                                                     "i363"
                                                     "i361"
                                                     "i359"
                                                     "i358"
                                                     "i356"
                                                     "i354"
                                                     "i353"
                                                     "i352"
                                                     "i350"
                                                     "i349"
                                                     "i347"
                                                     "i345"
                                                     "i343"
                                                     "i341"
                                                     "i339"
                                                     "i337"
                                                     "i335"
                                                     "i333"
                                                     "i331"
                                                     "i329"
                                                     "i327"
                                                     "i325"
                                                     "i323"
                                                     "i321"
                                                     "i319"
                                                     "i317"
                                                     "i315"
                                                     "i313"
                                                     "i311"
                                                     "i309"
                                                     "i307"
                                                     "i305"
                                                     "i303"
                                                     "i301"
                                                     "i299"
                                                     "i297"
                                                     "i295"
                                                     "i293"
                                                     "i291"
                                                     "i289"
                                                     "i287"
                                                     "i285"
                                                     "i284"
                                                     "i282"
                                                     "i280"
                                                     "i278"
                                                     "i276"
                                                     "i274"
                                                     "i272"
                                                     "i270"
                                                     "i268"
                                                     "i266"
                                                     "i263"
                                                     "i261"
                                                     "i259"
                                                     "i257"
                                                     "i255"
                                                     "i253"
                                                     "i251"
                                                     "i249"
                                                     "i247"
                                                     "i245"
                                                     "i243"
                                                     "i241"
                                                     "i239"
                                                     "i237"
                                                     "i235"
                                                     "i233"
                                                     "i231"
                                                     "i229"))
                                                  #(ribcage
                                                    (define-structure
                                                      define-expansion-accessors
                                                      define-expansion-constructors
                                                      and-map*)
                                                    ((top) (top) (top) (top))
                                                    ("i23" "i22" "i21" "i19")))
                                                 (hygiene guile)))
                                          'compile
                                          (if (#{free-id=?\ 431}#
                                                #{x\ 1926}#
                                                '#(syntax-object
                                                   load
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i1925"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(f when-list situations)
                                                      #((top) (top) (top))
                                                      #("i1919"
                                                        "i1920"
                                                        "i1921"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(e when-list w)
                                                      #((top) (top) (top))
                                                      #("i1916"
                                                        "i1917"
                                                        "i1918"))
                                                    #(ribcage
                                                      (lambda-var-list
                                                        gen-var
                                                        strip
                                                        chi-lambda-case
                                                        lambda*-formals
                                                        chi-simple-lambda
                                                        lambda-formals
                                                        ellipsis?
                                                        chi-void
                                                        eval-local-transformer
                                                        chi-local-syntax
                                                        chi-body
                                                        chi-macro
                                                        chi-application
                                                        chi-expr
                                                        chi
                                                        chi-top
                                                        syntax-type
                                                        chi-when-list
                                                        chi-install-global
                                                        chi-top-sequence
                                                        chi-sequence
                                                        source-wrap
                                                        wrap
                                                        bound-id-member?
                                                        distinct-bound-ids?
                                                        valid-bound-ids?
                                                        bound-id=?
                                                        free-id=?
                                                        id-var-name
                                                        same-marks?
                                                        join-marks
                                                        join-wraps
                                                        smart-append
                                                        make-binding-wrap
                                                        extend-ribcage!
                                                        make-empty-ribcage
                                                        new-mark
                                                        anti-mark
                                                        the-anti-mark
                                                        top-marked?
                                                        top-wrap
                                                        empty-wrap
                                                        set-ribcage-labels!
                                                        set-ribcage-marks!
                                                        set-ribcage-symnames!
                                                        ribcage-labels
                                                        ribcage-marks
                                                        ribcage-symnames
                                                        ribcage?
                                                        make-ribcage
                                                        gen-labels
                                                        gen-label
                                                        make-rename
                                                        rename-marks
                                                        rename-new
                                                        rename-old
                                                        subst-rename?
                                                        wrap-subst
                                                        wrap-marks
                                                        make-wrap
                                                        id-sym-name&marks
                                                        id-sym-name
                                                        id?
                                                        nonsymbol-id?
                                                        global-extend
                                                        lookup
                                                        macros-only-env
                                                        extend-var-env
                                                        extend-env
                                                        null-env
                                                        binding-value
                                                        binding-type
                                                        make-binding
                                                        arg-check
                                                        source-annotation
                                                        no-source
                                                        set-syntax-object-module!
                                                        set-syntax-object-wrap!
                                                        set-syntax-object-expression!
                                                        syntax-object-module
                                                        syntax-object-wrap
                                                        syntax-object-expression
                                                        syntax-object?
                                                        make-syntax-object
                                                        build-lexical-var
                                                        build-letrec
                                                        build-named-let
                                                        build-let
                                                        build-sequence
                                                        build-data
                                                        build-primref
                                                        build-lambda-case
                                                        build-case-lambda
                                                        build-simple-lambda
                                                        build-global-definition
                                                        maybe-name-value!
                                                        build-global-assignment
                                                        build-global-reference
                                                        analyze-variable
                                                        build-lexical-assignment
                                                        build-lexical-reference
                                                        build-dynlet
                                                        build-conditional
                                                        build-application
                                                        build-void
                                                        decorate-source
                                                        get-global-definition-hook
                                                        put-global-definition-hook
                                                        gensym-hook
                                                        local-eval-hook
                                                        top-level-eval-hook
                                                        fx<
                                                        fx=
                                                        fx-
                                                        fx+
                                                        set-lambda-meta!
                                                        lambda-meta
                                                        lambda?
                                                        make-dynlet
                                                        make-letrec
                                                        make-let
                                                        make-lambda-case
                                                        make-lambda
                                                        make-sequence
                                                        make-application
                                                        make-conditional
                                                        make-toplevel-define
                                                        make-toplevel-set
                                                        make-toplevel-ref
                                                        make-module-set
                                                        make-module-ref
                                                        make-lexical-set
                                                        make-lexical-ref
                                                        make-primitive-ref
                                                        make-const
                                                        make-void)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i486"
                                                       "i484"
                                                       "i482"
                                                       "i480"
                                                       "i478"
                                                       "i476"
                                                       "i474"
                                                       "i472"
                                                       "i470"
                                                       "i468"
                                                       "i466"
                                                       "i464"
                                                       "i462"
                                                       "i460"
                                                       "i458"
                                                       "i456"
                                                       "i454"
                                                       "i452"
                                                       "i450"
                                                       "i448"
                                                       "i446"
                                                       "i444"
                                                       "i442"
                                                       "i440"
                                                       "i438"
                                                       "i436"
                                                       "i434"
                                                       "i432"
                                                       "i430"
                                                       "i428"
                                                       "i426"
                                                       "i424"
                                                       "i422"
                                                       "i420"
                                                       "i418"
                                                       "i416"
                                                       "i415"
                                                       "i414"
                                                       "i412"
                                                       "i411"
                                                       "i410"
                                                       "i409"
                                                       "i408"
                                                       "i406"
                                                       "i404"
                                                       "i402"
                                                       "i400"
                                                       "i398"
                                                       "i396"
                                                       "i394"
                                                       "i392"
                                                       "i389"
                                                       "i387"
                                                       "i386"
                                                       "i385"
                                                       "i384"
                                                       "i383"
                                                       "i382"
                                                       "i380"
                                                       "i378"
                                                       "i376"
                                                       "i374"
                                                       "i373"
                                                       "i371"
                                                       "i369"
                                                       "i367"
                                                       "i365"
                                                       "i363"
                                                       "i361"
                                                       "i359"
                                                       "i358"
                                                       "i356"
                                                       "i354"
                                                       "i353"
                                                       "i352"
                                                       "i350"
                                                       "i349"
                                                       "i347"
                                                       "i345"
                                                       "i343"
                                                       "i341"
                                                       "i339"
                                                       "i337"
                                                       "i335"
                                                       "i333"
                                                       "i331"
                                                       "i329"
                                                       "i327"
                                                       "i325"
                                                       "i323"
                                                       "i321"
                                                       "i319"
                                                       "i317"
                                                       "i315"
                                                       "i313"
                                                       "i311"
                                                       "i309"
                                                       "i307"
                                                       "i305"
                                                       "i303"
                                                       "i301"
                                                       "i299"
                                                       "i297"
                                                       "i295"
                                                       "i293"
                                                       "i291"
                                                       "i289"
                                                       "i287"
                                                       "i285"
                                                       "i284"
                                                       "i282"
                                                       "i280"
                                                       "i278"
                                                       "i276"
                                                       "i274"
                                                       "i272"
                                                       "i270"
                                                       "i268"
                                                       "i266"
                                                       "i263"
                                                       "i261"
                                                       "i259"
                                                       "i257"
                                                       "i255"
                                                       "i253"
                                                       "i251"
                                                       "i249"
                                                       "i247"
                                                       "i245"
                                                       "i243"
                                                       "i241"
                                                       "i239"
                                                       "i237"
                                                       "i235"
                                                       "i233"
                                                       "i231"
                                                       "i229"))
                                                    #(ribcage
                                                      (define-structure
                                                        define-expansion-accessors
                                                        define-expansion-constructors
                                                        and-map*)
                                                      ((top) (top) (top) (top))
                                                      ("i23"
                                                       "i22"
                                                       "i21"
                                                       "i19")))
                                                   (hygiene guile)))
                                            'load
                                            (if (#{free-id=?\ 431}#
                                                  #{x\ 1926}#
                                                  '#(syntax-object
                                                     eval
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage () () ())
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i1925"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(f
                                                          when-list
                                                          situations)
                                                        #((top) (top) (top))
                                                        #("i1919"
                                                          "i1920"
                                                          "i1921"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(e when-list w)
                                                        #((top) (top) (top))
                                                        #("i1916"
                                                          "i1917"
                                                          "i1918"))
                                                      #(ribcage
                                                        (lambda-var-list
                                                          gen-var
                                                          strip
                                                          chi-lambda-case
                                                          lambda*-formals
                                                          chi-simple-lambda
                                                          lambda-formals
                                                          ellipsis?
                                                          chi-void
                                                          eval-local-transformer
                                                          chi-local-syntax
                                                          chi-body
                                                          chi-macro
                                                          chi-application
                                                          chi-expr
                                                          chi
                                                          chi-top
                                                          syntax-type
                                                          chi-when-list
                                                          chi-install-global
                                                          chi-top-sequence
                                                          chi-sequence
                                                          source-wrap
                                                          wrap
                                                          bound-id-member?
                                                          distinct-bound-ids?
                                                          valid-bound-ids?
                                                          bound-id=?
                                                          free-id=?
                                                          id-var-name
                                                          same-marks?
                                                          join-marks
                                                          join-wraps
                                                          smart-append
                                                          make-binding-wrap
                                                          extend-ribcage!
                                                          make-empty-ribcage
                                                          new-mark
                                                          anti-mark
                                                          the-anti-mark
                                                          top-marked?
                                                          top-wrap
                                                          empty-wrap
                                                          set-ribcage-labels!
                                                          set-ribcage-marks!
                                                          set-ribcage-symnames!
                                                          ribcage-labels
                                                          ribcage-marks
                                                          ribcage-symnames
                                                          ribcage?
                                                          make-ribcage
                                                          gen-labels
                                                          gen-label
                                                          make-rename
                                                          rename-marks
                                                          rename-new
                                                          rename-old
                                                          subst-rename?
                                                          wrap-subst
                                                          wrap-marks
                                                          make-wrap
                                                          id-sym-name&marks
                                                          id-sym-name
                                                          id?
                                                          nonsymbol-id?
                                                          global-extend
                                                          lookup
                                                          macros-only-env
                                                          extend-var-env
                                                          extend-env
                                                          null-env
                                                          binding-value
                                                          binding-type
                                                          make-binding
                                                          arg-check
                                                          source-annotation
                                                          no-source
                                                          set-syntax-object-module!
                                                          set-syntax-object-wrap!
                                                          set-syntax-object-expression!
                                                          syntax-object-module
                                                          syntax-object-wrap
                                                          syntax-object-expression
                                                          syntax-object?
                                                          make-syntax-object
                                                          build-lexical-var
                                                          build-letrec
                                                          build-named-let
                                                          build-let
                                                          build-sequence
                                                          build-data
                                                          build-primref
                                                          build-lambda-case
                                                          build-case-lambda
                                                          build-simple-lambda
                                                          build-global-definition
                                                          maybe-name-value!
                                                          build-global-assignment
                                                          build-global-reference
                                                          analyze-variable
                                                          build-lexical-assignment
                                                          build-lexical-reference
                                                          build-dynlet
                                                          build-conditional
                                                          build-application
                                                          build-void
                                                          decorate-source
                                                          get-global-definition-hook
                                                          put-global-definition-hook
                                                          gensym-hook
                                                          local-eval-hook
                                                          top-level-eval-hook
                                                          fx<
                                                          fx=
                                                          fx-
                                                          fx+
                                                          set-lambda-meta!
                                                          lambda-meta
                                                          lambda?
                                                          make-dynlet
                                                          make-letrec
                                                          make-let
                                                          make-lambda-case
                                                          make-lambda
                                                          make-sequence
                                                          make-application
                                                          make-conditional
                                                          make-toplevel-define
                                                          make-toplevel-set
                                                          make-toplevel-ref
                                                          make-module-set
                                                          make-module-ref
                                                          make-lexical-set
                                                          make-lexical-ref
                                                          make-primitive-ref
                                                          make-const
                                                          make-void)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("i486"
                                                         "i484"
                                                         "i482"
                                                         "i480"
                                                         "i478"
                                                         "i476"
                                                         "i474"
                                                         "i472"
                                                         "i470"
                                                         "i468"
                                                         "i466"
                                                         "i464"
                                                         "i462"
                                                         "i460"
                                                         "i458"
                                                         "i456"
                                                         "i454"
                                                         "i452"
                                                         "i450"
                                                         "i448"
                                                         "i446"
                                                         "i444"
                                                         "i442"
                                                         "i440"
                                                         "i438"
                                                         "i436"
                                                         "i434"
                                                         "i432"
                                                         "i430"
                                                         "i428"
                                                         "i426"
                                                         "i424"
                                                         "i422"
                                                         "i420"
                                                         "i418"
                                                         "i416"
                                                         "i415"
                                                         "i414"
                                                         "i412"
                                                         "i411"
                                                         "i410"
                                                         "i409"
                                                         "i408"
                                                         "i406"
                                                         "i404"
                                                         "i402"
                                                         "i400"
                                                         "i398"
                                                         "i396"
                                                         "i394"
                                                         "i392"
                                                         "i389"
                                                         "i387"
                                                         "i386"
                                                         "i385"
                                                         "i384"
                                                         "i383"
                                                         "i382"
                                                         "i380"
                                                         "i378"
                                                         "i376"
                                                         "i374"
                                                         "i373"
                                                         "i371"
                                                         "i369"
                                                         "i367"
                                                         "i365"
                                                         "i363"
                                                         "i361"
                                                         "i359"
                                                         "i358"
                                                         "i356"
                                                         "i354"
                                                         "i353"
                                                         "i352"
                                                         "i350"
                                                         "i349"
                                                         "i347"
                                                         "i345"
                                                         "i343"
                                                         "i341"
                                                         "i339"
                                                         "i337"
                                                         "i335"
                                                         "i333"
                                                         "i331"
                                                         "i329"
                                                         "i327"
                                                         "i325"
                                                         "i323"
                                                         "i321"
                                                         "i319"
                                                         "i317"
                                                         "i315"
                                                         "i313"
                                                         "i311"
                                                         "i309"
                                                         "i307"
                                                         "i305"
                                                         "i303"
                                                         "i301"
                                                         "i299"
                                                         "i297"
                                                         "i295"
                                                         "i293"
                                                         "i291"
                                                         "i289"
                                                         "i287"
                                                         "i285"
                                                         "i284"
                                                         "i282"
                                                         "i280"
                                                         "i278"
                                                         "i276"
                                                         "i274"
                                                         "i272"
                                                         "i270"
                                                         "i268"
                                                         "i266"
                                                         "i263"
                                                         "i261"
                                                         "i259"
                                                         "i257"
                                                         "i255"
                                                         "i253"
                                                         "i251"
                                                         "i249"
                                                         "i247"
                                                         "i245"
                                                         "i243"
                                                         "i241"
                                                         "i239"
                                                         "i237"
                                                         "i235"
                                                         "i233"
                                                         "i231"
                                                         "i229"))
                                                      #(ribcage
                                                        (define-structure
                                                          define-expansion-accessors
                                                          define-expansion-constructors
                                                          and-map*)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("i23"
                                                         "i22"
                                                         "i21"
                                                         "i19")))
                                                     (hygiene guile)))
                                              'eval
                                              (if (#{free-id=?\ 431}#
                                                    #{x\ 1926}#
                                                    '#(syntax-object
                                                       expand
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i1925"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(f
                                                            when-list
                                                            situations)
                                                          #((top) (top) (top))
                                                          #("i1919"
                                                            "i1920"
                                                            "i1921"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(e when-list w)
                                                          #((top) (top) (top))
                                                          #("i1916"
                                                            "i1917"
                                                            "i1918"))
                                                        #(ribcage
                                                          (lambda-var-list
                                                            gen-var
                                                            strip
                                                            chi-lambda-case
                                                            lambda*-formals
                                                            chi-simple-lambda
                                                            lambda-formals
                                                            ellipsis?
                                                            chi-void
                                                            eval-local-transformer
                                                            chi-local-syntax
                                                            chi-body
                                                            chi-macro
                                                            chi-application
                                                            chi-expr
                                                            chi
                                                            chi-top
                                                            syntax-type
                                                            chi-when-list
                                                            chi-install-global
                                                            chi-top-sequence
                                                            chi-sequence
                                                            source-wrap
                                                            wrap
                                                            bound-id-member?
                                                            distinct-bound-ids?
                                                            valid-bound-ids?
                                                            bound-id=?
                                                            free-id=?
                                                            id-var-name
                                                            same-marks?
                                                            join-marks
                                                            join-wraps
                                                            smart-append
                                                            make-binding-wrap
                                                            extend-ribcage!
                                                            make-empty-ribcage
                                                            new-mark
                                                            anti-mark
                                                            the-anti-mark
                                                            top-marked?
                                                            top-wrap
                                                            empty-wrap
                                                            set-ribcage-labels!
                                                            set-ribcage-marks!
                                                            set-ribcage-symnames!
                                                            ribcage-labels
                                                            ribcage-marks
                                                            ribcage-symnames
                                                            ribcage?
                                                            make-ribcage
                                                            gen-labels
                                                            gen-label
                                                            make-rename
                                                            rename-marks
                                                            rename-new
                                                            rename-old
                                                            subst-rename?
                                                            wrap-subst
                                                            wrap-marks
                                                            make-wrap
                                                            id-sym-name&marks
                                                            id-sym-name
                                                            id?
                                                            nonsymbol-id?
                                                            global-extend
                                                            lookup
                                                            macros-only-env
                                                            extend-var-env
                                                            extend-env
                                                            null-env
                                                            binding-value
                                                            binding-type
                                                            make-binding
                                                            arg-check
                                                            source-annotation
                                                            no-source
                                                            set-syntax-object-module!
                                                            set-syntax-object-wrap!
                                                            set-syntax-object-expression!
                                                            syntax-object-module
                                                            syntax-object-wrap
                                                            syntax-object-expression
                                                            syntax-object?
                                                            make-syntax-object
                                                            build-lexical-var
                                                            build-letrec
                                                            build-named-let
                                                            build-let
                                                            build-sequence
                                                            build-data
                                                            build-primref
                                                            build-lambda-case
                                                            build-case-lambda
                                                            build-simple-lambda
                                                            build-global-definition
                                                            maybe-name-value!
                                                            build-global-assignment
                                                            build-global-reference
                                                            analyze-variable
                                                            build-lexical-assignment
                                                            build-lexical-reference
                                                            build-dynlet
                                                            build-conditional
                                                            build-application
                                                            build-void
                                                            decorate-source
                                                            get-global-definition-hook
                                                            put-global-definition-hook
                                                            gensym-hook
                                                            local-eval-hook
                                                            top-level-eval-hook
                                                            fx<
                                                            fx=
                                                            fx-
                                                            fx+
                                                            set-lambda-meta!
                                                            lambda-meta
                                                            lambda?
                                                            make-dynlet
                                                            make-letrec
                                                            make-let
                                                            make-lambda-case
                                                            make-lambda
                                                            make-sequence
                                                            make-application
                                                            make-conditional
                                                            make-toplevel-define
                                                            make-toplevel-set
                                                            make-toplevel-ref
                                                            make-module-set
                                                            make-module-ref
                                                            make-lexical-set
                                                            make-lexical-ref
                                                            make-primitive-ref
                                                            make-const
                                                            make-void)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i486"
                                                           "i484"
                                                           "i482"
                                                           "i480"
                                                           "i478"
                                                           "i476"
                                                           "i474"
                                                           "i472"
                                                           "i470"
                                                           "i468"
                                                           "i466"
                                                           "i464"
                                                           "i462"
                                                           "i460"
                                                           "i458"
                                                           "i456"
                                                           "i454"
                                                           "i452"
                                                           "i450"
                                                           "i448"
                                                           "i446"
                                                           "i444"
                                                           "i442"
                                                           "i440"
                                                           "i438"
                                                           "i436"
                                                           "i434"
                                                           "i432"
                                                           "i430"
                                                           "i428"
                                                           "i426"
                                                           "i424"
                                                           "i422"
                                                           "i420"
                                                           "i418"
                                                           "i416"
                                                           "i415"
                                                           "i414"
                                                           "i412"
                                                           "i411"
                                                           "i410"
                                                           "i409"
                                                           "i408"
                                                           "i406"
                                                           "i404"
                                                           "i402"
                                                           "i400"
                                                           "i398"
                                                           "i396"
                                                           "i394"
                                                           "i392"
                                                           "i389"
                                                           "i387"
                                                           "i386"
                                                           "i385"
                                                           "i384"
                                                           "i383"
                                                           "i382"
                                                           "i380"
                                                           "i378"
                                                           "i376"
                                                           "i374"
                                                           "i373"
                                                           "i371"
                                                           "i369"
                                                           "i367"
                                                           "i365"
                                                           "i363"
                                                           "i361"
                                                           "i359"
                                                           "i358"
                                                           "i356"
                                                           "i354"
                                                           "i353"
                                                           "i352"
                                                           "i350"
                                                           "i349"
                                                           "i347"
                                                           "i345"
                                                           "i343"
                                                           "i341"
                                                           "i339"
                                                           "i337"
                                                           "i335"
                                                           "i333"
                                                           "i331"
                                                           "i329"
                                                           "i327"
                                                           "i325"
                                                           "i323"
                                                           "i321"
                                                           "i319"
                                                           "i317"
                                                           "i315"
                                                           "i313"
                                                           "i311"
                                                           "i309"
                                                           "i307"
                                                           "i305"
                                                           "i303"
                                                           "i301"
                                                           "i299"
                                                           "i297"
                                                           "i295"
                                                           "i293"
                                                           "i291"
                                                           "i289"
                                                           "i287"
                                                           "i285"
                                                           "i284"
                                                           "i282"
                                                           "i280"
                                                           "i278"
                                                           "i276"
                                                           "i274"
                                                           "i272"
                                                           "i270"
                                                           "i268"
                                                           "i266"
                                                           "i263"
                                                           "i261"
                                                           "i259"
                                                           "i257"
                                                           "i255"
                                                           "i253"
                                                           "i251"
                                                           "i249"
                                                           "i247"
                                                           "i245"
                                                           "i243"
                                                           "i241"
                                                           "i239"
                                                           "i237"
                                                           "i235"
                                                           "i233"
                                                           "i231"
                                                           "i229"))
                                                        #(ribcage
                                                          (define-structure
                                                            define-expansion-accessors
                                                            define-expansion-constructors
                                                            and-map*)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i23"
                                                           "i22"
                                                           "i21"
                                                           "i19")))
                                                       (hygiene guile)))
                                                'expand
                                                (syntax-violation
                                                  'eval-when
                                                  "invalid situation"
                                                  #{e\ 1913}#
                                                  (#{wrap\ 441}#
                                                    #{x\ 1926}#
                                                    #{w\ 1915}#
                                                    #f)))))))
                                      #{situations\ 1924}#))))))
                 (#{f\ 1922}# #{when-list\ 1914}# (quote ())))))
           (#{chi-install-global\ 449}#
             (lambda (#{name\ 1936}# #{e\ 1937}#)
               (#{build-global-definition\ 312}#
                 #f
                 #{name\ 1936}#
                 (#{build-application\ 294}#
                   #f
                   (#{build-primref\ 320}#
                     #f
                     'make-syntax-transformer)
                   (list (#{build-data\ 322}# #f #{name\ 1936}#)
                         (#{build-data\ 322}# #f (quote macro))
                         (#{build-application\ 294}#
                           #f
                           (#{build-primref\ 320}# #f (quote cons))
                           (list #{e\ 1937}#
                                 (#{build-application\ 294}#
                                   #f
                                   (#{build-primref\ 320}#
                                     #f
                                     'module-name)
                                   (list (#{build-application\ 294}#
                                           #f
                                           (#{build-primref\ 320}#
                                             #f
                                             'current-module)
                                           '()))))))))))
           (#{chi-top-sequence\ 447}#
             (lambda (#{body\ 1951}#
                      #{r\ 1952}#
                      #{w\ 1953}#
                      #{s\ 1954}#
                      #{m\ 1955}#
                      #{esew\ 1956}#
                      #{mod\ 1957}#)
               (#{build-sequence\ 324}#
                 #{s\ 1954}#
                 (letrec ((#{dobody\ 1973}#
                            (lambda (#{body\ 1974}#
                                     #{r\ 1975}#
                                     #{w\ 1976}#
                                     #{m\ 1977}#
                                     #{esew\ 1978}#
                                     #{mod\ 1979}#
                                     #{out\ 1980}#)
                              (if (null? #{body\ 1974}#)
                                (reverse #{out\ 1980}#)
                                (#{dobody\ 1973}#
                                  (cdr #{body\ 1974}#)
                                  #{r\ 1975}#
                                  #{w\ 1976}#
                                  #{m\ 1977}#
                                  #{esew\ 1978}#
                                  #{mod\ 1979}#
                                  (cons (#{chi-top\ 455}#
                                          (car #{body\ 1974}#)
                                          #{r\ 1975}#
                                          #{w\ 1976}#
                                          #{m\ 1977}#
                                          #{esew\ 1978}#
                                          #{mod\ 1979}#)
                                        #{out\ 1980}#))))))
                   (#{dobody\ 1973}#
                     #{body\ 1951}#
                     #{r\ 1952}#
                     #{w\ 1953}#
                     #{m\ 1955}#
                     #{esew\ 1956}#
                     #{mod\ 1957}#
                     '())))))
           (#{chi-sequence\ 445}#
             (lambda (#{body\ 1981}#
                      #{r\ 1982}#
                      #{w\ 1983}#
                      #{s\ 1984}#
                      #{mod\ 1985}#)
               (#{build-sequence\ 324}#
                 #{s\ 1984}#
                 (letrec ((#{dobody\ 1996}#
                            (lambda (#{body\ 1997}#
                                     #{r\ 1998}#
                                     #{w\ 1999}#
                                     #{mod\ 2000}#)
                              (if (null? #{body\ 1997}#)
                                '()
                                (let ((#{first\ 2002}#
                                        (#{chi\ 457}#
                                          (car #{body\ 1997}#)
                                          #{r\ 1998}#
                                          #{w\ 1999}#
                                          #{mod\ 2000}#)))
                                  (cons #{first\ 2002}#
                                        (#{dobody\ 1996}#
                                          (cdr #{body\ 1997}#)
                                          #{r\ 1998}#
                                          #{w\ 1999}#
                                          #{mod\ 2000}#)))))))
                   (#{dobody\ 1996}#
                     #{body\ 1981}#
                     #{r\ 1982}#
                     #{w\ 1983}#
                     #{mod\ 1985}#)))))
           (#{source-wrap\ 443}#
             (lambda (#{x\ 2003}#
                      #{w\ 2004}#
                      #{s\ 2005}#
                      #{defmod\ 2006}#)
               (#{wrap\ 441}#
                 (#{decorate-source\ 290}#
                   #{x\ 2003}#
                   #{s\ 2005}#)
                 #{w\ 2004}#
                 #{defmod\ 2006}#)))
           (#{wrap\ 441}#
             (lambda (#{x\ 2011}# #{w\ 2012}# #{defmod\ 2013}#)
               (if (if (null? (#{wrap-marks\ 379}# #{w\ 2012}#))
                     (null? (#{wrap-subst\ 381}# #{w\ 2012}#))
                     #f)
                 #{x\ 2011}#
                 (if (#{syntax-object?\ 336}# #{x\ 2011}#)
                   (#{make-syntax-object\ 334}#
                     (#{syntax-object-expression\ 338}# #{x\ 2011}#)
                     (#{join-wraps\ 423}#
                       #{w\ 2012}#
                       (#{syntax-object-wrap\ 340}# #{x\ 2011}#))
                     (#{syntax-object-module\ 342}# #{x\ 2011}#))
                   (if (null? #{x\ 2011}#)
                     #{x\ 2011}#
                     (#{make-syntax-object\ 334}#
                       #{x\ 2011}#
                       #{w\ 2012}#
                       #{defmod\ 2013}#))))))
           (#{bound-id-member?\ 439}#
             (lambda (#{x\ 2026}# #{list\ 2027}#)
               (if (not (null? #{list\ 2027}#))
                 (let ((#{t\ 2034}#
                         (#{bound-id=?\ 433}#
                           #{x\ 2026}#
                           (car #{list\ 2027}#))))
                   (if #{t\ 2034}#
                     #{t\ 2034}#
                     (#{bound-id-member?\ 439}#
                       #{x\ 2026}#
                       (cdr #{list\ 2027}#))))
                 #f)))
           (#{distinct-bound-ids?\ 437}#
             (lambda (#{ids\ 2036}#)
               (letrec ((#{distinct?\ 2040}#
                          (lambda (#{ids\ 2041}#)
                            (let ((#{t\ 2044}# (null? #{ids\ 2041}#)))
                              (if #{t\ 2044}#
                                #{t\ 2044}#
                                (if (not (#{bound-id-member?\ 439}#
                                           (car #{ids\ 2041}#)
                                           (cdr #{ids\ 2041}#)))
                                  (#{distinct?\ 2040}# (cdr #{ids\ 2041}#))
                                  #f))))))
                 (#{distinct?\ 2040}# #{ids\ 2036}#))))
           (#{valid-bound-ids?\ 435}#
             (lambda (#{ids\ 2048}#)
               (if (letrec ((#{all-ids?\ 2053}#
                              (lambda (#{ids\ 2054}#)
                                (let ((#{t\ 2057}# (null? #{ids\ 2054}#)))
                                  (if #{t\ 2057}#
                                    #{t\ 2057}#
                                    (if (#{id?\ 372}# (car #{ids\ 2054}#))
                                      (#{all-ids?\ 2053}# (cdr #{ids\ 2054}#))
                                      #f))))))
                     (#{all-ids?\ 2053}# #{ids\ 2048}#))
                 (#{distinct-bound-ids?\ 437}# #{ids\ 2048}#)
                 #f)))
           (#{bound-id=?\ 433}#
             (lambda (#{i\ 2062}# #{j\ 2063}#)
               (if (if (#{syntax-object?\ 336}# #{i\ 2062}#)
                     (#{syntax-object?\ 336}# #{j\ 2063}#)
                     #f)
                 (if (eq? (#{syntax-object-expression\ 338}# #{i\ 2062}#)
                          (#{syntax-object-expression\ 338}# #{j\ 2063}#))
                   (#{same-marks?\ 427}#
                     (#{wrap-marks\ 379}#
                       (#{syntax-object-wrap\ 340}# #{i\ 2062}#))
                     (#{wrap-marks\ 379}#
                       (#{syntax-object-wrap\ 340}# #{j\ 2063}#)))
                   #f)
                 (eq? #{i\ 2062}# #{j\ 2063}#))))
           (#{free-id=?\ 431}#
             (lambda (#{i\ 2070}# #{j\ 2071}#)
               (if (eq? (let ((#{x\ 2077}# #{i\ 2070}#))
                          (if (#{syntax-object?\ 336}# #{x\ 2077}#)
                            (#{syntax-object-expression\ 338}# #{x\ 2077}#)
                            #{x\ 2077}#))
                        (let ((#{x\ 2080}# #{j\ 2071}#))
                          (if (#{syntax-object?\ 336}# #{x\ 2080}#)
                            (#{syntax-object-expression\ 338}# #{x\ 2080}#)
                            #{x\ 2080}#)))
                 (eq? (#{id-var-name\ 429}# #{i\ 2070}# (quote (())))
                      (#{id-var-name\ 429}# #{j\ 2071}# (quote (()))))
                 #f)))
           (#{id-var-name\ 429}#
             (lambda (#{id\ 2084}# #{w\ 2085}#)
               (letrec ((#{search-vector-rib\ 2094}#
                          (lambda (#{sym\ 2106}#
                                   #{subst\ 2107}#
                                   #{marks\ 2108}#
                                   #{symnames\ 2109}#
                                   #{ribcage\ 2110}#)
                            (let ((#{n\ 2117}#
                                    (vector-length #{symnames\ 2109}#)))
                              (letrec ((#{f\ 2120}#
                                         (lambda (#{i\ 2121}#)
                                           (if (#{fx=\ 277}#
                                                 #{i\ 2121}#
                                                 #{n\ 2117}#)
                                             (#{search\ 2090}#
                                               #{sym\ 2106}#
                                               (cdr #{subst\ 2107}#)
                                               #{marks\ 2108}#)
                                             (if (if (eq? (vector-ref
                                                            #{symnames\ 2109}#
                                                            #{i\ 2121}#)
                                                          #{sym\ 2106}#)
                                                   (#{same-marks?\ 427}#
                                                     #{marks\ 2108}#
                                                     (vector-ref
                                                       (#{ribcage-marks\ 399}#
                                                         #{ribcage\ 2110}#)
                                                       #{i\ 2121}#))
                                                   #f)
                                               (values
                                                 (vector-ref
                                                   (#{ribcage-labels\ 401}#
                                                     #{ribcage\ 2110}#)
                                                   #{i\ 2121}#)
                                                 #{marks\ 2108}#)
                                               (#{f\ 2120}#
                                                 (#{fx+\ 273}#
                                                   #{i\ 2121}#
                                                   1)))))))
                                (#{f\ 2120}# 0)))))
                        (#{search-list-rib\ 2092}#
                          (lambda (#{sym\ 2129}#
                                   #{subst\ 2130}#
                                   #{marks\ 2131}#
                                   #{symnames\ 2132}#
                                   #{ribcage\ 2133}#)
                            (letrec ((#{f\ 2142}#
                                       (lambda (#{symnames\ 2143}# #{i\ 2144}#)
                                         (if (null? #{symnames\ 2143}#)
                                           (#{search\ 2090}#
                                             #{sym\ 2129}#
                                             (cdr #{subst\ 2130}#)
                                             #{marks\ 2131}#)
                                           (if (if (eq? (car #{symnames\ 2143}#)
                                                        #{sym\ 2129}#)
                                                 (#{same-marks?\ 427}#
                                                   #{marks\ 2131}#
                                                   (list-ref
                                                     (#{ribcage-marks\ 399}#
                                                       #{ribcage\ 2133}#)
                                                     #{i\ 2144}#))
                                                 #f)
                                             (values
                                               (list-ref
                                                 (#{ribcage-labels\ 401}#
                                                   #{ribcage\ 2133}#)
                                                 #{i\ 2144}#)
                                               #{marks\ 2131}#)
                                             (#{f\ 2142}#
                                               (cdr #{symnames\ 2143}#)
                                               (#{fx+\ 273}#
                                                 #{i\ 2144}#
                                                 1)))))))
                              (#{f\ 2142}# #{symnames\ 2132}# 0))))
                        (#{search\ 2090}#
                          (lambda (#{sym\ 2152}#
                                   #{subst\ 2153}#
                                   #{marks\ 2154}#)
                            (if (null? #{subst\ 2153}#)
                              (values #f #{marks\ 2154}#)
                              (let ((#{fst\ 2159}# (car #{subst\ 2153}#)))
                                (if (eq? #{fst\ 2159}# (quote shift))
                                  (#{search\ 2090}#
                                    #{sym\ 2152}#
                                    (cdr #{subst\ 2153}#)
                                    (cdr #{marks\ 2154}#))
                                  (let ((#{symnames\ 2161}#
                                          (#{ribcage-symnames\ 397}#
                                            #{fst\ 2159}#)))
                                    (if (vector? #{symnames\ 2161}#)
                                      (#{search-vector-rib\ 2094}#
                                        #{sym\ 2152}#
                                        #{subst\ 2153}#
                                        #{marks\ 2154}#
                                        #{symnames\ 2161}#
                                        #{fst\ 2159}#)
                                      (#{search-list-rib\ 2092}#
                                        #{sym\ 2152}#
                                        #{subst\ 2153}#
                                        #{marks\ 2154}#
                                        #{symnames\ 2161}#
                                        #{fst\ 2159}#)))))))))
                 (if (symbol? #{id\ 2084}#)
                   (let ((#{t\ 2164}#
                           (call-with-values
                             (lambda ()
                               (#{search\ 2090}#
                                 #{id\ 2084}#
                                 (#{wrap-subst\ 381}# #{w\ 2085}#)
                                 (#{wrap-marks\ 379}# #{w\ 2085}#)))
                             (lambda (#{x\ 2166}# . #{ignore\ 2167}#)
                               #{x\ 2166}#))))
                     (if #{t\ 2164}# #{t\ 2164}# #{id\ 2084}#))
                   (if (#{syntax-object?\ 336}# #{id\ 2084}#)
                     (let ((#{id\ 2175}#
                             (#{syntax-object-expression\ 338}# #{id\ 2084}#))
                           (#{w1\ 2176}#
                             (#{syntax-object-wrap\ 340}# #{id\ 2084}#)))
                       (let ((#{marks\ 2178}#
                               (#{join-marks\ 425}#
                                 (#{wrap-marks\ 379}# #{w\ 2085}#)
                                 (#{wrap-marks\ 379}# #{w1\ 2176}#))))
                         (call-with-values
                           (lambda ()
                             (#{search\ 2090}#
                               #{id\ 2175}#
                               (#{wrap-subst\ 381}# #{w\ 2085}#)
                               #{marks\ 2178}#))
                           (lambda (#{new-id\ 2179}# #{marks\ 2180}#)
                             (let ((#{t\ 2185}# #{new-id\ 2179}#))
                               (if #{t\ 2185}#
                                 #{t\ 2185}#
                                 (let ((#{t\ 2188}#
                                         (call-with-values
                                           (lambda ()
                                             (#{search\ 2090}#
                                               #{id\ 2175}#
                                               (#{wrap-subst\ 381}#
                                                 #{w1\ 2176}#)
                                               #{marks\ 2180}#))
                                           (lambda (#{x\ 2190}#
                                                    .
                                                    #{ignore\ 2191}#)
                                             #{x\ 2190}#))))
                                   (if #{t\ 2188}#
                                     #{t\ 2188}#
                                     #{id\ 2175}#))))))))
                     (syntax-violation
                       'id-var-name
                       "invalid id"
                       #{id\ 2084}#))))))
           (#{same-marks?\ 427}#
             (lambda (#{x\ 2196}# #{y\ 2197}#)
               (let ((#{t\ 2202}# (eq? #{x\ 2196}# #{y\ 2197}#)))
                 (if #{t\ 2202}#
                   #{t\ 2202}#
                   (if (not (null? #{x\ 2196}#))
                     (if (not (null? #{y\ 2197}#))
                       (if (eq? (car #{x\ 2196}#) (car #{y\ 2197}#))
                         (#{same-marks?\ 427}#
                           (cdr #{x\ 2196}#)
                           (cdr #{y\ 2197}#))
                         #f)
                       #f)
                     #f)))))
           (#{join-marks\ 425}#
             (lambda (#{m1\ 2208}# #{m2\ 2209}#)
               (#{smart-append\ 421}# #{m1\ 2208}# #{m2\ 2209}#)))
           (#{join-wraps\ 423}#
             (lambda (#{w1\ 2212}# #{w2\ 2213}#)
               (let ((#{m1\ 2218}# (#{wrap-marks\ 379}# #{w1\ 2212}#))
                     (#{s1\ 2219}# (#{wrap-subst\ 381}# #{w1\ 2212}#)))
                 (if (null? #{m1\ 2218}#)
                   (if (null? #{s1\ 2219}#)
                     #{w2\ 2213}#
                     (#{make-wrap\ 377}#
                       (#{wrap-marks\ 379}# #{w2\ 2213}#)
                       (#{smart-append\ 421}#
                         #{s1\ 2219}#
                         (#{wrap-subst\ 381}# #{w2\ 2213}#))))
                   (#{make-wrap\ 377}#
                     (#{smart-append\ 421}#
                       #{m1\ 2218}#
                       (#{wrap-marks\ 379}# #{w2\ 2213}#))
                     (#{smart-append\ 421}#
                       #{s1\ 2219}#
                       (#{wrap-subst\ 381}# #{w2\ 2213}#)))))))
           (#{smart-append\ 421}#
             (lambda (#{m1\ 2220}# #{m2\ 2221}#)
               (if (null? #{m2\ 2221}#)
                 #{m1\ 2220}#
                 (append #{m1\ 2220}# #{m2\ 2221}#))))
           (#{make-binding-wrap\ 419}#
             (lambda (#{ids\ 2224}# #{labels\ 2225}# #{w\ 2226}#)
               (if (null? #{ids\ 2224}#)
                 #{w\ 2226}#
                 (#{make-wrap\ 377}#
                   (#{wrap-marks\ 379}# #{w\ 2226}#)
                   (cons (let ((#{labelvec\ 2231}#
                                 (list->vector #{labels\ 2225}#)))
                           (let ((#{n\ 2233}#
                                   (vector-length #{labelvec\ 2231}#)))
                             (let ((#{symnamevec\ 2236}#
                                     (make-vector #{n\ 2233}#))
                                   (#{marksvec\ 2237}#
                                     (make-vector #{n\ 2233}#)))
                               (begin
                                 (letrec ((#{f\ 2241}#
                                            (lambda (#{ids\ 2242}# #{i\ 2243}#)
                                              (if (not (null? #{ids\ 2242}#))
                                                (call-with-values
                                                  (lambda ()
                                                    (#{id-sym-name&marks\ 375}#
                                                      (car #{ids\ 2242}#)
                                                      #{w\ 2226}#))
                                                  (lambda (#{symname\ 2244}#
                                                           #{marks\ 2245}#)
                                                    (begin
                                                      (vector-set!
                                                        #{symnamevec\ 2236}#
                                                        #{i\ 2243}#
                                                        #{symname\ 2244}#)
                                                      (vector-set!
                                                        #{marksvec\ 2237}#
                                                        #{i\ 2243}#
                                                        #{marks\ 2245}#)
                                                      (#{f\ 2241}#
                                                        (cdr #{ids\ 2242}#)
                                                        (#{fx+\ 273}#
                                                          #{i\ 2243}#
                                                          1)))))))))
                                   (#{f\ 2241}# #{ids\ 2224}# 0))
                                 (#{make-ribcage\ 393}#
                                   #{symnamevec\ 2236}#
                                   #{marksvec\ 2237}#
                                   #{labelvec\ 2231}#)))))
                         (#{wrap-subst\ 381}# #{w\ 2226}#))))))
           (#{extend-ribcage!\ 417}#
             (lambda (#{ribcage\ 2248}# #{id\ 2249}# #{label\ 2250}#)
               (begin
                 (#{set-ribcage-symnames!\ 403}#
                   #{ribcage\ 2248}#
                   (cons (#{syntax-object-expression\ 338}# #{id\ 2249}#)
                         (#{ribcage-symnames\ 397}# #{ribcage\ 2248}#)))
                 (#{set-ribcage-marks!\ 405}#
                   #{ribcage\ 2248}#
                   (cons (#{wrap-marks\ 379}#
                           (#{syntax-object-wrap\ 340}# #{id\ 2249}#))
                         (#{ribcage-marks\ 399}# #{ribcage\ 2248}#)))
                 (#{set-ribcage-labels!\ 407}#
                   #{ribcage\ 2248}#
                   (cons #{label\ 2250}#
                         (#{ribcage-labels\ 401}# #{ribcage\ 2248}#))))))
           (#{anti-mark\ 413}#
             (lambda (#{w\ 2254}#)
               (#{make-wrap\ 377}#
                 (cons #f (#{wrap-marks\ 379}# #{w\ 2254}#))
                 (cons 'shift
                       (#{wrap-subst\ 381}# #{w\ 2254}#)))))
           (#{set-ribcage-labels!\ 407}#
             (lambda (#{x\ 2257}# #{update\ 2258}#)
               (vector-set! #{x\ 2257}# 3 #{update\ 2258}#)))
           (#{set-ribcage-marks!\ 405}#
             (lambda (#{x\ 2261}# #{update\ 2262}#)
               (vector-set! #{x\ 2261}# 2 #{update\ 2262}#)))
           (#{set-ribcage-symnames!\ 403}#
             (lambda (#{x\ 2265}# #{update\ 2266}#)
               (vector-set! #{x\ 2265}# 1 #{update\ 2266}#)))
           (#{ribcage-labels\ 401}#
             (lambda (#{x\ 2269}#) (vector-ref #{x\ 2269}# 3)))
           (#{ribcage-marks\ 399}#
             (lambda (#{x\ 2271}#) (vector-ref #{x\ 2271}# 2)))
           (#{ribcage-symnames\ 397}#
             (lambda (#{x\ 2273}#) (vector-ref #{x\ 2273}# 1)))
           (#{ribcage?\ 395}#
             (lambda (#{x\ 2275}#)
               (if (vector? #{x\ 2275}#)
                 (if (= (vector-length #{x\ 2275}#) 4)
                   (eq? (vector-ref #{x\ 2275}# 0) (quote ribcage))
                   #f)
                 #f)))
           (#{make-ribcage\ 393}#
             (lambda (#{symnames\ 2280}#
                      #{marks\ 2281}#
                      #{labels\ 2282}#)
               (vector
                 'ribcage
                 #{symnames\ 2280}#
                 #{marks\ 2281}#
                 #{labels\ 2282}#)))
           (#{gen-labels\ 390}#
             (lambda (#{ls\ 2286}#)
               (if (null? #{ls\ 2286}#)
                 '()
                 (cons (#{gen-label\ 388}#)
                       (#{gen-labels\ 390}# (cdr #{ls\ 2286}#))))))
           (#{gen-label\ 388}#
             (lambda () (symbol->string (gensym "i"))))
           (#{wrap-subst\ 381}# cdr)
           (#{wrap-marks\ 379}# car)
           (#{make-wrap\ 377}# cons)
           (#{id-sym-name&marks\ 375}#
             (lambda (#{x\ 2288}# #{w\ 2289}#)
               (if (#{syntax-object?\ 336}# #{x\ 2288}#)
                 (values
                   (#{syntax-object-expression\ 338}# #{x\ 2288}#)
                   (#{join-marks\ 425}#
                     (#{wrap-marks\ 379}# #{w\ 2289}#)
                     (#{wrap-marks\ 379}#
                       (#{syntax-object-wrap\ 340}# #{x\ 2288}#))))
                 (values
                   #{x\ 2288}#
                   (#{wrap-marks\ 379}# #{w\ 2289}#)))))
           (#{id?\ 372}#
             (lambda (#{x\ 2292}#)
               (if (symbol? #{x\ 2292}#)
                 #t
                 (if (#{syntax-object?\ 336}# #{x\ 2292}#)
                   (symbol?
                     (#{syntax-object-expression\ 338}# #{x\ 2292}#))
                   #f))))
           (#{nonsymbol-id?\ 370}#
             (lambda (#{x\ 2299}#)
               (if (#{syntax-object?\ 336}# #{x\ 2299}#)
                 (symbol?
                   (#{syntax-object-expression\ 338}# #{x\ 2299}#))
                 #f)))
           (#{global-extend\ 368}#
             (lambda (#{type\ 2303}# #{sym\ 2304}# #{val\ 2305}#)
               (#{put-global-definition-hook\ 286}#
                 #{sym\ 2304}#
                 #{type\ 2303}#
                 #{val\ 2305}#)))
           (#{lookup\ 366}#
             (lambda (#{x\ 2309}# #{r\ 2310}# #{mod\ 2311}#)
               (let ((#{t\ 2317}# (assq #{x\ 2309}# #{r\ 2310}#)))
                 (if #{t\ 2317}#
                   (cdr #{t\ 2317}#)
                   (if (symbol? #{x\ 2309}#)
                     (let ((#{t\ 2323}#
                             (#{get-global-definition-hook\ 288}#
                               #{x\ 2309}#
                               #{mod\ 2311}#)))
                       (if #{t\ 2323}# #{t\ 2323}# (quote (global))))
                     '(displaced-lexical))))))
           (#{macros-only-env\ 364}#
             (lambda (#{r\ 2328}#)
               (if (null? #{r\ 2328}#)
                 '()
                 (let ((#{a\ 2331}# (car #{r\ 2328}#)))
                   (if (eq? (cadr #{a\ 2331}#) (quote macro))
                     (cons #{a\ 2331}#
                           (#{macros-only-env\ 364}# (cdr #{r\ 2328}#)))
                     (#{macros-only-env\ 364}# (cdr #{r\ 2328}#)))))))
           (#{extend-var-env\ 362}#
             (lambda (#{labels\ 2332}# #{vars\ 2333}# #{r\ 2334}#)
               (if (null? #{labels\ 2332}#)
                 #{r\ 2334}#
                 (#{extend-var-env\ 362}#
                   (cdr #{labels\ 2332}#)
                   (cdr #{vars\ 2333}#)
                   (cons (cons (car #{labels\ 2332}#)
                               (cons (quote lexical) (car #{vars\ 2333}#)))
                         #{r\ 2334}#)))))
           (#{extend-env\ 360}#
             (lambda (#{labels\ 2339}# #{bindings\ 2340}# #{r\ 2341}#)
               (if (null? #{labels\ 2339}#)
                 #{r\ 2341}#
                 (#{extend-env\ 360}#
                   (cdr #{labels\ 2339}#)
                   (cdr #{bindings\ 2340}#)
                   (cons (cons (car #{labels\ 2339}#)
                               (car #{bindings\ 2340}#))
                         #{r\ 2341}#)))))
           (#{binding-value\ 357}# cdr)
           (#{binding-type\ 355}# car)
           (#{source-annotation\ 351}#
             (lambda (#{x\ 2345}#)
               (if (#{syntax-object?\ 336}# #{x\ 2345}#)
                 (#{source-annotation\ 351}#
                   (#{syntax-object-expression\ 338}# #{x\ 2345}#))
                 (if (pair? #{x\ 2345}#)
                   (let ((#{props\ 2352}# (source-properties #{x\ 2345}#)))
                     (if (pair? #{props\ 2352}#) #{props\ 2352}# #f))
                   #f))))
           (#{set-syntax-object-module!\ 348}#
             (lambda (#{x\ 2354}# #{update\ 2355}#)
               (vector-set! #{x\ 2354}# 3 #{update\ 2355}#)))
           (#{set-syntax-object-wrap!\ 346}#
             (lambda (#{x\ 2358}# #{update\ 2359}#)
               (vector-set! #{x\ 2358}# 2 #{update\ 2359}#)))
           (#{set-syntax-object-expression!\ 344}#
             (lambda (#{x\ 2362}# #{update\ 2363}#)
               (vector-set! #{x\ 2362}# 1 #{update\ 2363}#)))
           (#{syntax-object-module\ 342}#
             (lambda (#{x\ 2366}#) (vector-ref #{x\ 2366}# 3)))
           (#{syntax-object-wrap\ 340}#
             (lambda (#{x\ 2368}#) (vector-ref #{x\ 2368}# 2)))
           (#{syntax-object-expression\ 338}#
             (lambda (#{x\ 2370}#) (vector-ref #{x\ 2370}# 1)))
           (#{syntax-object?\ 336}#
             (lambda (#{x\ 2372}#)
               (if (vector? #{x\ 2372}#)
                 (if (= (vector-length #{x\ 2372}#) 4)
                   (eq? (vector-ref #{x\ 2372}# 0)
                        'syntax-object)
                   #f)
                 #f)))
           (#{make-syntax-object\ 334}#
             (lambda (#{expression\ 2377}#
                      #{wrap\ 2378}#
                      #{module\ 2379}#)
               (vector
                 'syntax-object
                 #{expression\ 2377}#
                 #{wrap\ 2378}#
                 #{module\ 2379}#)))
           (#{build-letrec\ 330}#
             (lambda (#{src\ 2383}#
                      #{ids\ 2384}#
                      #{vars\ 2385}#
                      #{val-exps\ 2386}#
                      #{body-exp\ 2387}#)
               (if (null? #{vars\ 2385}#)
                 #{body-exp\ 2387}#
                 (begin
                   (for-each
                     #{maybe-name-value!\ 310}#
                     #{ids\ 2384}#
                     #{val-exps\ 2386}#)
                   (#{make-letrec\ 262}#
                     #{src\ 2383}#
                     #{ids\ 2384}#
                     #{vars\ 2385}#
                     #{val-exps\ 2386}#
                     #{body-exp\ 2387}#)))))
           (#{build-named-let\ 328}#
             (lambda (#{src\ 2393}#
                      #{ids\ 2394}#
                      #{vars\ 2395}#
                      #{val-exps\ 2396}#
                      #{body-exp\ 2397}#)
               (let ((#{f\ 2407}# (car #{vars\ 2395}#))
                     (#{f-name\ 2408}# (car #{ids\ 2394}#))
                     (#{vars\ 2409}# (cdr #{vars\ 2395}#))
                     (#{ids\ 2410}# (cdr #{ids\ 2394}#)))
                 (let ((#{proc\ 2412}#
                         (#{build-simple-lambda\ 314}#
                           #{src\ 2393}#
                           #{ids\ 2410}#
                           #f
                           #{vars\ 2409}#
                           '()
                           #{body-exp\ 2397}#)))
                   (begin
                     (#{maybe-name-value!\ 310}#
                       #{f-name\ 2408}#
                       #{proc\ 2412}#)
                     (for-each
                       #{maybe-name-value!\ 310}#
                       #{ids\ 2410}#
                       #{val-exps\ 2396}#)
                     (#{make-letrec\ 262}#
                       #{src\ 2393}#
                       (list #{f-name\ 2408}#)
                       (list #{f\ 2407}#)
                       (list #{proc\ 2412}#)
                       (#{build-application\ 294}#
                         #{src\ 2393}#
                         (#{build-lexical-reference\ 300}#
                           'fun
                           #{src\ 2393}#
                           #{f-name\ 2408}#
                           #{f\ 2407}#)
                         #{val-exps\ 2396}#)))))))
           (#{build-let\ 326}#
             (lambda (#{src\ 2413}#
                      #{ids\ 2414}#
                      #{vars\ 2415}#
                      #{val-exps\ 2416}#
                      #{body-exp\ 2417}#)
               (begin
                 (for-each
                   #{maybe-name-value!\ 310}#
                   #{ids\ 2414}#
                   #{val-exps\ 2416}#)
                 (if (null? #{vars\ 2415}#)
                   #{body-exp\ 2417}#
                   (#{make-let\ 260}#
                     #{src\ 2413}#
                     #{ids\ 2414}#
                     #{vars\ 2415}#
                     #{val-exps\ 2416}#
                     #{body-exp\ 2417}#)))))
           (#{build-sequence\ 324}#
             (lambda (#{src\ 2423}# #{exps\ 2424}#)
               (if (null? (cdr #{exps\ 2424}#))
                 (car #{exps\ 2424}#)
                 (#{make-sequence\ 254}#
                   #{src\ 2423}#
                   #{exps\ 2424}#))))
           (#{build-data\ 322}#
             (lambda (#{src\ 2427}# #{exp\ 2428}#)
               (#{make-const\ 232}# #{src\ 2427}# #{exp\ 2428}#)))
           (#{build-primref\ 320}#
             (lambda (#{src\ 2431}# #{name\ 2432}#)
               (if (equal?
                     (module-name (current-module))
                     '(guile))
                 (#{make-toplevel-ref\ 244}#
                   #{src\ 2431}#
                   #{name\ 2432}#)
                 (#{make-module-ref\ 240}#
                   #{src\ 2431}#
                   '(guile)
                   #{name\ 2432}#
                   #f))))
           (#{build-lambda-case\ 318}#
             (lambda (#{src\ 2435}#
                      #{req\ 2436}#
                      #{opt\ 2437}#
                      #{rest\ 2438}#
                      #{kw\ 2439}#
                      #{inits\ 2440}#
                      #{vars\ 2441}#
                      #{body\ 2442}#
                      #{else-case\ 2443}#)
               (#{make-lambda-case\ 258}#
                 #{src\ 2435}#
                 #{req\ 2436}#
                 #{opt\ 2437}#
                 #{rest\ 2438}#
                 #{kw\ 2439}#
                 #{inits\ 2440}#
                 #{vars\ 2441}#
                 #{body\ 2442}#
                 #{else-case\ 2443}#)))
           (#{build-case-lambda\ 316}#
             (lambda (#{src\ 2453}# #{meta\ 2454}# #{body\ 2455}#)
               (#{make-lambda\ 256}#
                 #{src\ 2453}#
                 #{meta\ 2454}#
                 #{body\ 2455}#)))
           (#{build-simple-lambda\ 314}#
             (lambda (#{src\ 2459}#
                      #{req\ 2460}#
                      #{rest\ 2461}#
                      #{vars\ 2462}#
                      #{meta\ 2463}#
                      #{exp\ 2464}#)
               (#{make-lambda\ 256}#
                 #{src\ 2459}#
                 #{meta\ 2463}#
                 (#{make-lambda-case\ 258}#
                   #{src\ 2459}#
                   #{req\ 2460}#
                   #f
                   #{rest\ 2461}#
                   #f
                   '()
                   #{vars\ 2462}#
                   #{exp\ 2464}#
                   #f))))
           (#{build-global-definition\ 312}#
             (lambda (#{source\ 2471}# #{var\ 2472}# #{exp\ 2473}#)
               (begin
                 (#{maybe-name-value!\ 310}#
                   #{var\ 2472}#
                   #{exp\ 2473}#)
                 (#{make-toplevel-define\ 248}#
                   #{source\ 2471}#
                   #{var\ 2472}#
                   #{exp\ 2473}#))))
           (#{maybe-name-value!\ 310}#
             (lambda (#{name\ 2477}# #{val\ 2478}#)
               (if (#{lambda?\ 267}# #{val\ 2478}#)
                 (let ((#{meta\ 2482}#
                         (#{lambda-meta\ 269}# #{val\ 2478}#)))
                   (if (not (assq (quote name) #{meta\ 2482}#))
                     (#{set-lambda-meta!\ 271}#
                       #{val\ 2478}#
                       (acons 'name
                              #{name\ 2477}#
                              #{meta\ 2482}#)))))))
           (#{build-global-assignment\ 308}#
             (lambda (#{source\ 2483}#
                      #{var\ 2484}#
                      #{exp\ 2485}#
                      #{mod\ 2486}#)
               (#{analyze-variable\ 304}#
                 #{mod\ 2486}#
                 #{var\ 2484}#
                 (lambda (#{mod\ 2491}# #{var\ 2492}# #{public?\ 2493}#)
                   (#{make-module-set\ 242}#
                     #{source\ 2483}#
                     #{mod\ 2491}#
                     #{var\ 2492}#
                     #{public?\ 2493}#
                     #{exp\ 2485}#))
                 (lambda (#{var\ 2497}#)
                   (#{make-toplevel-set\ 246}#
                     #{source\ 2483}#
                     #{var\ 2497}#
                     #{exp\ 2485}#)))))
           (#{build-global-reference\ 306}#
             (lambda (#{source\ 2499}# #{var\ 2500}# #{mod\ 2501}#)
               (#{analyze-variable\ 304}#
                 #{mod\ 2501}#
                 #{var\ 2500}#
                 (lambda (#{mod\ 2505}# #{var\ 2506}# #{public?\ 2507}#)
                   (#{make-module-ref\ 240}#
                     #{source\ 2499}#
                     #{mod\ 2505}#
                     #{var\ 2506}#
                     #{public?\ 2507}#))
                 (lambda (#{var\ 2511}#)
                   (#{make-toplevel-ref\ 244}#
                     #{source\ 2499}#
                     #{var\ 2511}#)))))
           (#{analyze-variable\ 304}#
             (lambda (#{mod\ 2513}#
                      #{var\ 2514}#
                      #{modref-cont\ 2515}#
                      #{bare-cont\ 2516}#)
               (if (not #{mod\ 2513}#)
                 (#{bare-cont\ 2516}# #{var\ 2514}#)
                 (let ((#{kind\ 2523}# (car #{mod\ 2513}#))
                       (#{mod\ 2524}# (cdr #{mod\ 2513}#)))
                   (if (memv #{kind\ 2523}# (quote (public)))
                     (#{modref-cont\ 2515}#
                       #{mod\ 2524}#
                       #{var\ 2514}#
                       #t)
                     (if (memv #{kind\ 2523}# (quote (private)))
                       (if (not (equal?
                                  #{mod\ 2524}#
                                  (module-name (current-module))))
                         (#{modref-cont\ 2515}#
                           #{mod\ 2524}#
                           #{var\ 2514}#
                           #f)
                         (#{bare-cont\ 2516}# #{var\ 2514}#))
                       (if (memv #{kind\ 2523}# (quote (bare)))
                         (#{bare-cont\ 2516}# #{var\ 2514}#)
                         (if (memv #{kind\ 2523}# (quote (hygiene)))
                           (if (if (not (equal?
                                          #{mod\ 2524}#
                                          (module-name (current-module))))
                                 (module-variable
                                   (resolve-module #{mod\ 2524}#)
                                   #{var\ 2514}#)
                                 #f)
                             (#{modref-cont\ 2515}#
                               #{mod\ 2524}#
                               #{var\ 2514}#
                               #f)
                             (#{bare-cont\ 2516}# #{var\ 2514}#))
                           (syntax-violation
                             #f
                             "bad module kind"
                             #{var\ 2514}#
                             #{mod\ 2524}#)))))))))
           (#{build-lexical-assignment\ 302}#
             (lambda (#{source\ 2532}#
                      #{name\ 2533}#
                      #{var\ 2534}#
                      #{exp\ 2535}#)
               (#{make-lexical-set\ 238}#
                 #{source\ 2532}#
                 #{name\ 2533}#
                 #{var\ 2534}#
                 #{exp\ 2535}#)))
           (#{build-lexical-reference\ 300}#
             (lambda (#{type\ 2540}#
                      #{source\ 2541}#
                      #{name\ 2542}#
                      #{var\ 2543}#)
               (#{make-lexical-ref\ 236}#
                 #{source\ 2541}#
                 #{name\ 2542}#
                 #{var\ 2543}#)))
           (#{build-dynlet\ 298}#
             (lambda (#{source\ 2548}#
                      #{fluids\ 2549}#
                      #{vals\ 2550}#
                      #{body\ 2551}#)
               (#{make-dynlet\ 264}#
                 #{source\ 2548}#
                 #{fluids\ 2549}#
                 #{vals\ 2550}#
                 #{body\ 2551}#)))
           (#{build-conditional\ 296}#
             (lambda (#{source\ 2556}#
                      #{test-exp\ 2557}#
                      #{then-exp\ 2558}#
                      #{else-exp\ 2559}#)
               (#{make-conditional\ 250}#
                 #{source\ 2556}#
                 #{test-exp\ 2557}#
                 #{then-exp\ 2558}#
                 #{else-exp\ 2559}#)))
           (#{build-application\ 294}#
             (lambda (#{source\ 2564}#
                      #{fun-exp\ 2565}#
                      #{arg-exps\ 2566}#)
               (#{make-application\ 252}#
                 #{source\ 2564}#
                 #{fun-exp\ 2565}#
                 #{arg-exps\ 2566}#)))
           (#{build-void\ 292}#
             (lambda (#{source\ 2570}#)
               (#{make-void\ 230}# #{source\ 2570}#)))
           (#{decorate-source\ 290}#
             (lambda (#{e\ 2572}# #{s\ 2573}#)
               (begin
                 (if (if (pair? #{e\ 2572}#) #{s\ 2573}# #f)
                   (set-source-properties! #{e\ 2572}# #{s\ 2573}#))
                 #{e\ 2572}#)))
           (#{get-global-definition-hook\ 288}#
             (lambda (#{symbol\ 2578}# #{module\ 2579}#)
               (begin
                 (if (if (not #{module\ 2579}#) (current-module) #f)
                   (warn "module system is booted, we should have a module"
                         #{symbol\ 2578}#))
                 (let ((#{v\ 2585}#
                         (module-variable
                           (if #{module\ 2579}#
                             (resolve-module (cdr #{module\ 2579}#))
                             (current-module))
                           #{symbol\ 2578}#)))
                   (if #{v\ 2585}#
                     (if (variable-bound? #{v\ 2585}#)
                       (let ((#{val\ 2590}# (variable-ref #{v\ 2585}#)))
                         (if (macro? #{val\ 2590}#)
                           (if (macro-type #{val\ 2590}#)
                             (cons (macro-type #{val\ 2590}#)
                                   (macro-binding #{val\ 2590}#))
                             #f)
                           #f))
                       #f)
                     #f)))))
           (#{put-global-definition-hook\ 286}#
             (lambda (#{symbol\ 2594}# #{type\ 2595}# #{val\ 2596}#)
               (module-define!
                 (current-module)
                 #{symbol\ 2594}#
                 (make-syntax-transformer
                   #{symbol\ 2594}#
                   #{type\ 2595}#
                   #{val\ 2596}#))))
           (#{local-eval-hook\ 283}#
             (lambda (#{x\ 2600}# #{mod\ 2601}#)
               (primitive-eval #{x\ 2600}#)))
           (#{top-level-eval-hook\ 281}#
             (lambda (#{x\ 2604}# #{mod\ 2605}#)
               (primitive-eval #{x\ 2604}#)))
           (#{fx<\ 279}# <)
           (#{fx=\ 277}# =)
           (#{fx-\ 275}# -)
           (#{fx+\ 273}# +)
           (#{set-lambda-meta!\ 271}#
             (lambda (#{x\ 2608}# #{v\ 2609}#)
               (struct-set! #{x\ 2608}# 1 #{v\ 2609}#)))
           (#{lambda-meta\ 269}#
             (lambda (#{x\ 2612}#) (struct-ref #{x\ 2612}# 1)))
           (#{lambda?\ 267}#
             (lambda (#{x\ 2614}#)
               (if (struct? #{x\ 2614}#)
                 (eq? (struct-vtable #{x\ 2614}#)
                      (vector-ref %expanded-vtables 13))
                 #f)))
           (#{make-dynlet\ 264}#
             (lambda (#{src\ 2618}#
                      #{fluids\ 2619}#
                      #{vals\ 2620}#
                      #{body\ 2621}#)
               (make-struct
                 (vector-ref %expanded-vtables 17)
                 0
                 #{src\ 2618}#
                 #{fluids\ 2619}#
                 #{vals\ 2620}#
                 #{body\ 2621}#)))
           (#{make-letrec\ 262}#
             (lambda (#{src\ 2626}#
                      #{names\ 2627}#
                      #{gensyms\ 2628}#
                      #{vals\ 2629}#
                      #{body\ 2630}#)
               (make-struct
                 (vector-ref %expanded-vtables 16)
                 0
                 #{src\ 2626}#
                 #{names\ 2627}#
                 #{gensyms\ 2628}#
                 #{vals\ 2629}#
                 #{body\ 2630}#)))
           (#{make-let\ 260}#
             (lambda (#{src\ 2636}#
                      #{names\ 2637}#
                      #{gensyms\ 2638}#
                      #{vals\ 2639}#
                      #{body\ 2640}#)
               (make-struct
                 (vector-ref %expanded-vtables 15)
                 0
                 #{src\ 2636}#
                 #{names\ 2637}#
                 #{gensyms\ 2638}#
                 #{vals\ 2639}#
                 #{body\ 2640}#)))
           (#{make-lambda-case\ 258}#
             (lambda (#{src\ 2646}#
                      #{req\ 2647}#
                      #{opt\ 2648}#
                      #{rest\ 2649}#
                      #{kw\ 2650}#
                      #{inits\ 2651}#
                      #{gensyms\ 2652}#
                      #{body\ 2653}#
                      #{alternate\ 2654}#)
               (make-struct
                 (vector-ref %expanded-vtables 14)
                 0
                 #{src\ 2646}#
                 #{req\ 2647}#
                 #{opt\ 2648}#
                 #{rest\ 2649}#
                 #{kw\ 2650}#
                 #{inits\ 2651}#
                 #{gensyms\ 2652}#
                 #{body\ 2653}#
                 #{alternate\ 2654}#)))
           (#{make-lambda\ 256}#
             (lambda (#{src\ 2664}# #{meta\ 2665}# #{body\ 2666}#)
               (make-struct
                 (vector-ref %expanded-vtables 13)
                 0
                 #{src\ 2664}#
                 #{meta\ 2665}#
                 #{body\ 2666}#)))
           (#{make-sequence\ 254}#
             (lambda (#{src\ 2670}# #{exps\ 2671}#)
               (make-struct
                 (vector-ref %expanded-vtables 12)
                 0
                 #{src\ 2670}#
                 #{exps\ 2671}#)))
           (#{make-application\ 252}#
             (lambda (#{src\ 2674}# #{proc\ 2675}# #{args\ 2676}#)
               (make-struct
                 (vector-ref %expanded-vtables 11)
                 0
                 #{src\ 2674}#
                 #{proc\ 2675}#
                 #{args\ 2676}#)))
           (#{make-conditional\ 250}#
             (lambda (#{src\ 2680}#
                      #{test\ 2681}#
                      #{consequent\ 2682}#
                      #{alternate\ 2683}#)
               (make-struct
                 (vector-ref %expanded-vtables 10)
                 0
                 #{src\ 2680}#
                 #{test\ 2681}#
                 #{consequent\ 2682}#
                 #{alternate\ 2683}#)))
           (#{make-toplevel-define\ 248}#
             (lambda (#{src\ 2688}# #{name\ 2689}# #{exp\ 2690}#)
               (make-struct
                 (vector-ref %expanded-vtables 9)
                 0
                 #{src\ 2688}#
                 #{name\ 2689}#
                 #{exp\ 2690}#)))
           (#{make-toplevel-set\ 246}#
             (lambda (#{src\ 2694}# #{name\ 2695}# #{exp\ 2696}#)
               (make-struct
                 (vector-ref %expanded-vtables 8)
                 0
                 #{src\ 2694}#
                 #{name\ 2695}#
                 #{exp\ 2696}#)))
           (#{make-toplevel-ref\ 244}#
             (lambda (#{src\ 2700}# #{name\ 2701}#)
               (make-struct
                 (vector-ref %expanded-vtables 7)
                 0
                 #{src\ 2700}#
                 #{name\ 2701}#)))
           (#{make-module-set\ 242}#
             (lambda (#{src\ 2704}#
                      #{mod\ 2705}#
                      #{name\ 2706}#
                      #{public?\ 2707}#
                      #{exp\ 2708}#)
               (make-struct
                 (vector-ref %expanded-vtables 6)
                 0
                 #{src\ 2704}#
                 #{mod\ 2705}#
                 #{name\ 2706}#
                 #{public?\ 2707}#
                 #{exp\ 2708}#)))
           (#{make-module-ref\ 240}#
             (lambda (#{src\ 2714}#
                      #{mod\ 2715}#
                      #{name\ 2716}#
                      #{public?\ 2717}#)
               (make-struct
                 (vector-ref %expanded-vtables 5)
                 0
                 #{src\ 2714}#
                 #{mod\ 2715}#
                 #{name\ 2716}#
                 #{public?\ 2717}#)))
           (#{make-lexical-set\ 238}#
             (lambda (#{src\ 2722}#
                      #{name\ 2723}#
                      #{gensym\ 2724}#
                      #{exp\ 2725}#)
               (make-struct
                 (vector-ref %expanded-vtables 4)
                 0
                 #{src\ 2722}#
                 #{name\ 2723}#
                 #{gensym\ 2724}#
                 #{exp\ 2725}#)))
           (#{make-lexical-ref\ 236}#
             (lambda (#{src\ 2730}# #{name\ 2731}# #{gensym\ 2732}#)
               (make-struct
                 (vector-ref %expanded-vtables 3)
                 0
                 #{src\ 2730}#
                 #{name\ 2731}#
                 #{gensym\ 2732}#)))
           (#{make-primitive-ref\ 234}#
             (lambda (#{src\ 2736}# #{name\ 2737}#)
               (make-struct
                 (vector-ref %expanded-vtables 2)
                 0
                 #{src\ 2736}#
                 #{name\ 2737}#)))
           (#{make-const\ 232}#
             (lambda (#{src\ 2740}# #{exp\ 2741}#)
               (make-struct
                 (vector-ref %expanded-vtables 1)
                 0
                 #{src\ 2740}#
                 #{exp\ 2741}#)))
           (#{make-void\ 230}#
             (lambda (#{src\ 2744}#)
               (make-struct
                 (vector-ref %expanded-vtables 0)
                 0
                 #{src\ 2744}#))))
    (begin
      (#{global-extend\ 368}#
        'local-syntax
        'letrec-syntax
        #t)
      (#{global-extend\ 368}#
        'local-syntax
        'let-syntax
        #f)
      (#{global-extend\ 368}#
        'core
        'fluid-let-syntax
        (lambda (#{e\ 2746}#
                 #{r\ 2747}#
                 #{w\ 2748}#
                 #{s\ 2749}#
                 #{mod\ 2750}#)
          ((lambda (#{tmp\ 2756}#)
             ((lambda (#{tmp\ 2757}#)
                (if (if #{tmp\ 2757}#
                      (apply (lambda (#{_\ 2763}#
                                      #{var\ 2764}#
                                      #{val\ 2765}#
                                      #{e1\ 2766}#
                                      #{e2\ 2767}#)
                               (#{valid-bound-ids?\ 435}# #{var\ 2764}#))
                             #{tmp\ 2757}#)
                      #f)
                  (apply (lambda (#{_\ 2774}#
                                  #{var\ 2775}#
                                  #{val\ 2776}#
                                  #{e1\ 2777}#
                                  #{e2\ 2778}#)
                           (let ((#{names\ 2780}#
                                   (map (lambda (#{x\ 2781}#)
                                          (#{id-var-name\ 429}#
                                            #{x\ 2781}#
                                            #{w\ 2748}#))
                                        #{var\ 2775}#)))
                             (begin
                               (for-each
                                 (lambda (#{id\ 2784}# #{n\ 2785}#)
                                   (let ((#{atom-key\ 2790}#
                                           (#{binding-type\ 355}#
                                             (#{lookup\ 366}#
                                               #{n\ 2785}#
                                               #{r\ 2747}#
                                               #{mod\ 2750}#))))
                                     (if (memv #{atom-key\ 2790}#
                                               '(displaced-lexical))
                                       (syntax-violation
                                         'fluid-let-syntax
                                         "identifier out of context"
                                         #{e\ 2746}#
                                         (#{source-wrap\ 443}#
                                           #{id\ 2784}#
                                           #{w\ 2748}#
                                           #{s\ 2749}#
                                           #{mod\ 2750}#)))))
                                 #{var\ 2775}#
                                 #{names\ 2780}#)
                               (#{chi-body\ 465}#
                                 (cons #{e1\ 2777}# #{e2\ 2778}#)
                                 (#{source-wrap\ 443}#
                                   #{e\ 2746}#
                                   #{w\ 2748}#
                                   #{s\ 2749}#
                                   #{mod\ 2750}#)
                                 (#{extend-env\ 360}#
                                   #{names\ 2780}#
                                   (let ((#{trans-r\ 2795}#
                                           (#{macros-only-env\ 364}#
                                             #{r\ 2747}#)))
                                     (map (lambda (#{x\ 2796}#)
                                            (cons 'macro
                                                  (#{eval-local-transformer\ 469}#
                                                    (#{chi\ 457}#
                                                      #{x\ 2796}#
                                                      #{trans-r\ 2795}#
                                                      #{w\ 2748}#
                                                      #{mod\ 2750}#)
                                                    #{mod\ 2750}#)))
                                          #{val\ 2776}#))
                                   #{r\ 2747}#)
                                 #{w\ 2748}#
                                 #{mod\ 2750}#))))
                         #{tmp\ 2757}#)
                  ((lambda (#{_\ 2801}#)
                     (syntax-violation
                       'fluid-let-syntax
                       "bad syntax"
                       (#{source-wrap\ 443}#
                         #{e\ 2746}#
                         #{w\ 2748}#
                         #{s\ 2749}#
                         #{mod\ 2750}#)))
                   #{tmp\ 2756}#)))
              ($sc-dispatch
                #{tmp\ 2756}#
                '(any #(each (any any)) any . each-any))))
           #{e\ 2746}#)))
      (#{global-extend\ 368}#
        'core
        'quote
        (lambda (#{e\ 2802}#
                 #{r\ 2803}#
                 #{w\ 2804}#
                 #{s\ 2805}#
                 #{mod\ 2806}#)
          ((lambda (#{tmp\ 2812}#)
             ((lambda (#{tmp\ 2813}#)
                (if #{tmp\ 2813}#
                  (apply (lambda (#{_\ 2816}# #{e\ 2817}#)
                           (#{build-data\ 322}#
                             #{s\ 2805}#
                             (#{strip\ 483}# #{e\ 2817}# #{w\ 2804}#)))
                         #{tmp\ 2813}#)
                  ((lambda (#{_\ 2819}#)
                     (syntax-violation
                       'quote
                       "bad syntax"
                       (#{source-wrap\ 443}#
                         #{e\ 2802}#
                         #{w\ 2804}#
                         #{s\ 2805}#
                         #{mod\ 2806}#)))
                   #{tmp\ 2812}#)))
              ($sc-dispatch #{tmp\ 2812}# (quote (any any)))))
           #{e\ 2802}#)))
      (#{global-extend\ 368}#
        'core
        'syntax
        (letrec ((#{regen\ 2835}#
                   (lambda (#{x\ 2836}#)
                     (let ((#{atom-key\ 2840}# (car #{x\ 2836}#)))
                       (if (memv #{atom-key\ 2840}# (quote (ref)))
                         (#{build-lexical-reference\ 300}#
                           'value
                           #f
                           (cadr #{x\ 2836}#)
                           (cadr #{x\ 2836}#))
                         (if (memv #{atom-key\ 2840}# (quote (primitive)))
                           (#{build-primref\ 320}# #f (cadr #{x\ 2836}#))
                           (if (memv #{atom-key\ 2840}# (quote (quote)))
                             (#{build-data\ 322}# #f (cadr #{x\ 2836}#))
                             (if (memv #{atom-key\ 2840}# (quote (lambda)))
                               (if (list? (cadr #{x\ 2836}#))
                                 (#{build-simple-lambda\ 314}#
                                   #f
                                   (cadr #{x\ 2836}#)
                                   #f
                                   (cadr #{x\ 2836}#)
                                   '()
                                   (#{regen\ 2835}# (caddr #{x\ 2836}#)))
                                 (error "how did we get here" #{x\ 2836}#))
                               (#{build-application\ 294}#
                                 #f
                                 (#{build-primref\ 320}# #f (car #{x\ 2836}#))
                                 (map #{regen\ 2835}#
                                      (cdr #{x\ 2836}#))))))))))
                 (#{gen-vector\ 2833}#
                   (lambda (#{x\ 2852}#)
                     (if (eq? (car #{x\ 2852}#) (quote list))
                       (cons (quote vector) (cdr #{x\ 2852}#))
                       (if (eq? (car #{x\ 2852}#) (quote quote))
                         (list 'quote
                               (list->vector (cadr #{x\ 2852}#)))
                         (list (quote list->vector) #{x\ 2852}#)))))
                 (#{gen-append\ 2831}#
                   (lambda (#{x\ 2862}# #{y\ 2863}#)
                     (if (equal? #{y\ 2863}# (quote (quote ())))
                       #{x\ 2862}#
                       (list (quote append) #{x\ 2862}# #{y\ 2863}#))))
                 (#{gen-cons\ 2829}#
                   (lambda (#{x\ 2867}# #{y\ 2868}#)
                     (let ((#{atom-key\ 2873}# (car #{y\ 2868}#)))
                       (if (memv #{atom-key\ 2873}# (quote (quote)))
                         (if (eq? (car #{x\ 2867}#) (quote quote))
                           (list 'quote
                                 (cons (cadr #{x\ 2867}#) (cadr #{y\ 2868}#)))
                           (if (eq? (cadr #{y\ 2868}#) (quote ()))
                             (list (quote list) #{x\ 2867}#)
                             (list (quote cons) #{x\ 2867}# #{y\ 2868}#)))
                         (if (memv #{atom-key\ 2873}# (quote (list)))
                           (cons 'list
                                 (cons #{x\ 2867}# (cdr #{y\ 2868}#)))
                           (list (quote cons) #{x\ 2867}# #{y\ 2868}#))))))
                 (#{gen-map\ 2827}#
                   (lambda (#{e\ 2882}# #{map-env\ 2883}#)
                     (let ((#{formals\ 2888}# (map cdr #{map-env\ 2883}#))
                           (#{actuals\ 2889}#
                             (map (lambda (#{x\ 2890}#)
                                    (list (quote ref) (car #{x\ 2890}#)))
                                  #{map-env\ 2883}#)))
                       (if (eq? (car #{e\ 2882}#) (quote ref))
                         (car #{actuals\ 2889}#)
                         (if (and-map
                               (lambda (#{x\ 2897}#)
                                 (if (eq? (car #{x\ 2897}#) (quote ref))
                                   (memq (cadr #{x\ 2897}#) #{formals\ 2888}#)
                                   #f))
                               (cdr #{e\ 2882}#))
                           (cons 'map
                                 (cons (list 'primitive
                                             (car #{e\ 2882}#))
                                       (map (let ((#{r\ 2903}#
                                                    (map cons
                                                         #{formals\ 2888}#
                                                         #{actuals\ 2889}#)))
                                              (lambda (#{x\ 2904}#)
                                                (cdr (assq (cadr #{x\ 2904}#)
                                                           #{r\ 2903}#))))
                                            (cdr #{e\ 2882}#))))
                           (cons 'map
                                 (cons (list 'lambda
                                             #{formals\ 2888}#
                                             #{e\ 2882}#)
                                       #{actuals\ 2889}#)))))))
                 (#{gen-mappend\ 2825}#
                   (lambda (#{e\ 2908}# #{map-env\ 2909}#)
                     (list 'apply
                           '(primitive append)
                           (#{gen-map\ 2827}# #{e\ 2908}# #{map-env\ 2909}#))))
                 (#{gen-ref\ 2823}#
                   (lambda (#{src\ 2913}#
                            #{var\ 2914}#
                            #{level\ 2915}#
                            #{maps\ 2916}#)
                     (if (#{fx=\ 277}# #{level\ 2915}# 0)
                       (values #{var\ 2914}# #{maps\ 2916}#)
                       (if (null? #{maps\ 2916}#)
                         (syntax-violation
                           'syntax
                           "missing ellipsis"
                           #{src\ 2913}#)
                         (call-with-values
                           (lambda ()
                             (#{gen-ref\ 2823}#
                               #{src\ 2913}#
                               #{var\ 2914}#
                               (#{fx-\ 275}# #{level\ 2915}# 1)
                               (cdr #{maps\ 2916}#)))
                           (lambda (#{outer-var\ 2921}# #{outer-maps\ 2922}#)
                             (let ((#{b\ 2926}#
                                     (assq #{outer-var\ 2921}#
                                           (car #{maps\ 2916}#))))
                               (if #{b\ 2926}#
                                 (values (cdr #{b\ 2926}#) #{maps\ 2916}#)
                                 (let ((#{inner-var\ 2928}#
                                         (#{gen-var\ 485}# (quote tmp))))
                                   (values
                                     #{inner-var\ 2928}#
                                     (cons (cons (cons #{outer-var\ 2921}#
                                                       #{inner-var\ 2928}#)
                                                 (car #{maps\ 2916}#))
                                           #{outer-maps\ 2922}#)))))))))))
                 (#{gen-syntax\ 2821}#
                   (lambda (#{src\ 2929}#
                            #{e\ 2930}#
                            #{r\ 2931}#
                            #{maps\ 2932}#
                            #{ellipsis?\ 2933}#
                            #{mod\ 2934}#)
                     (if (#{id?\ 372}# #{e\ 2930}#)
                       (let ((#{label\ 2942}#
                               (#{id-var-name\ 429}#
                                 #{e\ 2930}#
                                 '(()))))
                         (let ((#{b\ 2945}#
                                 (#{lookup\ 366}#
                                   #{label\ 2942}#
                                   #{r\ 2931}#
                                   #{mod\ 2934}#)))
                           (if (eq? (#{binding-type\ 355}# #{b\ 2945}#)
                                    'syntax)
                             (call-with-values
                               (lambda ()
                                 (let ((#{var.lev\ 2947}#
                                         (#{binding-value\ 357}# #{b\ 2945}#)))
                                   (#{gen-ref\ 2823}#
                                     #{src\ 2929}#
                                     (car #{var.lev\ 2947}#)
                                     (cdr #{var.lev\ 2947}#)
                                     #{maps\ 2932}#)))
                               (lambda (#{var\ 2948}# #{maps\ 2949}#)
                                 (values
                                   (list (quote ref) #{var\ 2948}#)
                                   #{maps\ 2949}#)))
                             (if (#{ellipsis?\ 2933}# #{e\ 2930}#)
                               (syntax-violation
                                 'syntax
                                 "misplaced ellipsis"
                                 #{src\ 2929}#)
                               (values
                                 (list (quote quote) #{e\ 2930}#)
                                 #{maps\ 2932}#)))))
                       ((lambda (#{tmp\ 2954}#)
                          ((lambda (#{tmp\ 2955}#)
                             (if (if #{tmp\ 2955}#
                                   (apply (lambda (#{dots\ 2958}# #{e\ 2959}#)
                                            (#{ellipsis?\ 2933}#
                                              #{dots\ 2958}#))
                                          #{tmp\ 2955}#)
                                   #f)
                               (apply (lambda (#{dots\ 2962}# #{e\ 2963}#)
                                        (#{gen-syntax\ 2821}#
                                          #{src\ 2929}#
                                          #{e\ 2963}#
                                          #{r\ 2931}#
                                          #{maps\ 2932}#
                                          (lambda (#{x\ 2964}#) #f)
                                          #{mod\ 2934}#))
                                      #{tmp\ 2955}#)
                               ((lambda (#{tmp\ 2966}#)
                                  (if (if #{tmp\ 2966}#
                                        (apply (lambda (#{x\ 2970}#
                                                        #{dots\ 2971}#
                                                        #{y\ 2972}#)
                                                 (#{ellipsis?\ 2933}#
                                                   #{dots\ 2971}#))
                                               #{tmp\ 2966}#)
                                        #f)
                                    (apply (lambda (#{x\ 2976}#
                                                    #{dots\ 2977}#
                                                    #{y\ 2978}#)
                                             (letrec ((#{f\ 2982}#
                                                        (lambda (#{y\ 2983}#
                                                                 #{k\ 2984}#)
                                                          ((lambda (#{tmp\ 2991}#)
                                                             ((lambda (#{tmp\ 2992}#)
                                                                (if (if #{tmp\ 2992}#
                                                                      (apply (lambda (#{dots\ 2995}#
                                                                                      #{y\ 2996}#)
                                                                               (#{ellipsis?\ 2933}#
                                                                                 #{dots\ 2995}#))
                                                                             #{tmp\ 2992}#)
                                                                      #f)
                                                                  (apply (lambda (#{dots\ 2999}#
                                                                                  #{y\ 3000}#)
                                                                           (#{f\ 2982}#
                                                                             #{y\ 3000}#
                                                                             (lambda (#{maps\ 3001}#)
                                                                               (call-with-values
                                                                                 (lambda ()
                                                                                   (#{k\ 2984}#
                                                                                     (cons '()
                                                                                           #{maps\ 3001}#)))
                                                                                 (lambda (#{x\ 3003}#
                                                                                          #{maps\ 3004}#)
                                                                                   (if (null? (car #{maps\ 3004}#))
                                                                                     (syntax-violation
                                                                                       'syntax
                                                                                       "extra ellipsis"
                                                                                       #{src\ 2929}#)
                                                                                     (values
                                                                                       (#{gen-mappend\ 2825}#
                                                                                         #{x\ 3003}#
                                                                                         (car #{maps\ 3004}#))
                                                                                       (cdr #{maps\ 3004}#))))))))
                                                                         #{tmp\ 2992}#)
                                                                  ((lambda (#{_\ 3008}#)
                                                                     (call-with-values
                                                                       (lambda ()
                                                                         (#{gen-syntax\ 2821}#
                                                                           #{src\ 2929}#
                                                                           #{y\ 2983}#
                                                                           #{r\ 2931}#
                                                                           #{maps\ 2932}#
                                                                           #{ellipsis?\ 2933}#
                                                                           #{mod\ 2934}#))
                                                                       (lambda (#{y\ 3009}#
                                                                                #{maps\ 3010}#)
                                                                         (call-with-values
                                                                           (lambda ()
                                                                             (#{k\ 2984}#
                                                                               #{maps\ 3010}#))
                                                                           (lambda (#{x\ 3013}#
                                                                                    #{maps\ 3014}#)
                                                                             (values
                                                                               (#{gen-append\ 2831}#
                                                                                 #{x\ 3013}#
                                                                                 #{y\ 3009}#)
                                                                               #{maps\ 3014}#))))))
                                                                   #{tmp\ 2991}#)))
                                                              ($sc-dispatch
                                                                #{tmp\ 2991}#
                                                                '(any . any))))
                                                           #{y\ 2983}#))))
                                               (#{f\ 2982}#
                                                 #{y\ 2978}#
                                                 (lambda (#{maps\ 2985}#)
                                                   (call-with-values
                                                     (lambda ()
                                                       (#{gen-syntax\ 2821}#
                                                         #{src\ 2929}#
                                                         #{x\ 2976}#
                                                         #{r\ 2931}#
                                                         (cons '()
                                                               #{maps\ 2985}#)
                                                         #{ellipsis?\ 2933}#
                                                         #{mod\ 2934}#))
                                                     (lambda (#{x\ 2987}#
                                                              #{maps\ 2988}#)
                                                       (if (null? (car #{maps\ 2988}#))
                                                         (syntax-violation
                                                           'syntax
                                                           "extra ellipsis"
                                                           #{src\ 2929}#)
                                                         (values
                                                           (#{gen-map\ 2827}#
                                                             #{x\ 2987}#
                                                             (car #{maps\ 2988}#))
                                                           (cdr #{maps\ 2988}#)))))))))
                                           #{tmp\ 2966}#)
                                    ((lambda (#{tmp\ 3017}#)
                                       (if #{tmp\ 3017}#
                                         (apply (lambda (#{x\ 3020}#
                                                         #{y\ 3021}#)
                                                  (call-with-values
                                                    (lambda ()
                                                      (#{gen-syntax\ 2821}#
                                                        #{src\ 2929}#
                                                        #{x\ 3020}#
                                                        #{r\ 2931}#
                                                        #{maps\ 2932}#
                                                        #{ellipsis?\ 2933}#
                                                        #{mod\ 2934}#))
                                                    (lambda (#{x\ 3022}#
                                                             #{maps\ 3023}#)
                                                      (call-with-values
                                                        (lambda ()
                                                          (#{gen-syntax\ 2821}#
                                                            #{src\ 2929}#
                                                            #{y\ 3021}#
                                                            #{r\ 2931}#
                                                            #{maps\ 3023}#
                                                            #{ellipsis?\ 2933}#
                                                            #{mod\ 2934}#))
                                                        (lambda (#{y\ 3026}#
                                                                 #{maps\ 3027}#)
                                                          (values
                                                            (#{gen-cons\ 2829}#
                                                              #{x\ 3022}#
                                                              #{y\ 3026}#)
                                                            #{maps\ 3027}#))))))
                                                #{tmp\ 3017}#)
                                         ((lambda (#{tmp\ 3030}#)
                                            (if #{tmp\ 3030}#
                                              (apply (lambda (#{e1\ 3033}#
                                                              #{e2\ 3034}#)
                                                       (call-with-values
                                                         (lambda ()
                                                           (#{gen-syntax\ 2821}#
                                                             #{src\ 2929}#
                                                             (cons #{e1\ 3033}#
                                                                   #{e2\ 3034}#)
                                                             #{r\ 2931}#
                                                             #{maps\ 2932}#
                                                             #{ellipsis?\ 2933}#
                                                             #{mod\ 2934}#))
                                                         (lambda (#{e\ 3036}#
                                                                  #{maps\ 3037}#)
                                                           (values
                                                             (#{gen-vector\ 2833}#
                                                               #{e\ 3036}#)
                                                             #{maps\ 3037}#))))
                                                     #{tmp\ 3030}#)
                                              ((lambda (#{_\ 3041}#)
                                                 (values
                                                   (list 'quote
                                                         #{e\ 2930}#)
                                                   #{maps\ 2932}#))
                                               #{tmp\ 2954}#)))
                                          ($sc-dispatch
                                            #{tmp\ 2954}#
                                            '#(vector (any . each-any))))))
                                     ($sc-dispatch
                                       #{tmp\ 2954}#
                                       '(any . any)))))
                                ($sc-dispatch
                                  #{tmp\ 2954}#
                                  '(any any . any)))))
                           ($sc-dispatch #{tmp\ 2954}# (quote (any any)))))
                        #{e\ 2930}#)))))
          (lambda (#{e\ 3043}#
                   #{r\ 3044}#
                   #{w\ 3045}#
                   #{s\ 3046}#
                   #{mod\ 3047}#)
            (let ((#{e\ 3054}#
                    (#{source-wrap\ 443}#
                      #{e\ 3043}#
                      #{w\ 3045}#
                      #{s\ 3046}#
                      #{mod\ 3047}#)))
              ((lambda (#{tmp\ 3055}#)
                 ((lambda (#{tmp\ 3056}#)
                    (if #{tmp\ 3056}#
                      (apply (lambda (#{_\ 3059}# #{x\ 3060}#)
                               (call-with-values
                                 (lambda ()
                                   (#{gen-syntax\ 2821}#
                                     #{e\ 3054}#
                                     #{x\ 3060}#
                                     #{r\ 3044}#
                                     '()
                                     #{ellipsis?\ 473}#
                                     #{mod\ 3047}#))
                                 (lambda (#{e\ 3061}# #{maps\ 3062}#)
                                   (#{regen\ 2835}# #{e\ 3061}#))))
                             #{tmp\ 3056}#)
                      ((lambda (#{_\ 3066}#)
                         (syntax-violation
                           'syntax
                           "bad `syntax' form"
                           #{e\ 3054}#))
                       #{tmp\ 3055}#)))
                  ($sc-dispatch #{tmp\ 3055}# (quote (any any)))))
               #{e\ 3054}#)))))
      (#{global-extend\ 368}#
        'core
        'lambda
        (lambda (#{e\ 3067}#
                 #{r\ 3068}#
                 #{w\ 3069}#
                 #{s\ 3070}#
                 #{mod\ 3071}#)
          ((lambda (#{tmp\ 3077}#)
             ((lambda (#{tmp\ 3078}#)
                (if #{tmp\ 3078}#
                  (apply (lambda (#{_\ 3083}#
                                  #{args\ 3084}#
                                  #{e1\ 3085}#
                                  #{e2\ 3086}#)
                           (call-with-values
                             (lambda ()
                               (#{lambda-formals\ 475}# #{args\ 3084}#))
                             (lambda (#{req\ 3087}#
                                      #{opt\ 3088}#
                                      #{rest\ 3089}#
                                      #{kw\ 3090}#)
                               (letrec ((#{lp\ 3098}#
                                          (lambda (#{body\ 3099}#
                                                   #{meta\ 3100}#)
                                            ((lambda (#{tmp\ 3102}#)
                                               ((lambda (#{tmp\ 3103}#)
                                                  (if (if #{tmp\ 3103}#
                                                        (apply (lambda (#{docstring\ 3107}#
                                                                        #{e1\ 3108}#
                                                                        #{e2\ 3109}#)
                                                                 (string?
                                                                   (syntax->datum
                                                                     #{docstring\ 3107}#)))
                                                               #{tmp\ 3103}#)
                                                        #f)
                                                    (apply (lambda (#{docstring\ 3113}#
                                                                    #{e1\ 3114}#
                                                                    #{e2\ 3115}#)
                                                             (#{lp\ 3098}#
                                                               (cons #{e1\ 3114}#
                                                                     #{e2\ 3115}#)
                                                               (append
                                                                 #{meta\ 3100}#
                                                                 (list (cons 'documentation
                                                                             (syntax->datum
                                                                               #{docstring\ 3113}#))))))
                                                           #{tmp\ 3103}#)
                                                    ((lambda (#{tmp\ 3118}#)
                                                       (if #{tmp\ 3118}#
                                                         (apply (lambda (#{k\ 3123}#
                                                                         #{v\ 3124}#
                                                                         #{e1\ 3125}#
                                                                         #{e2\ 3126}#)
                                                                  (#{lp\ 3098}#
                                                                    (cons #{e1\ 3125}#
                                                                          #{e2\ 3126}#)
                                                                    (append
                                                                      #{meta\ 3100}#
                                                                      (syntax->datum
                                                                        (map cons
                                                                             #{k\ 3123}#
                                                                             #{v\ 3124}#)))))
                                                                #{tmp\ 3118}#)
                                                         ((lambda (#{_\ 3131}#)
                                                            (#{chi-simple-lambda\ 477}#
                                                              #{e\ 3067}#
                                                              #{r\ 3068}#
                                                              #{w\ 3069}#
                                                              #{s\ 3070}#
                                                              #{mod\ 3071}#
                                                              #{req\ 3087}#
                                                              #{rest\ 3089}#
                                                              #{meta\ 3100}#
                                                              #{body\ 3099}#))
                                                          #{tmp\ 3102}#)))
                                                     ($sc-dispatch
                                                       #{tmp\ 3102}#
                                                       '(#(vector
                                                           #(each (any . any)))
                                                         any
                                                         .
                                                         each-any)))))
                                                ($sc-dispatch
                                                  #{tmp\ 3102}#
                                                  '(any any . each-any))))
                                             #{body\ 3099}#))))
                                 (#{lp\ 3098}#
                                   (cons #{e1\ 3085}# #{e2\ 3086}#)
                                   '())))))
                         #{tmp\ 3078}#)
                  ((lambda (#{_\ 3133}#)
                     (syntax-violation
                       'lambda
                       "bad lambda"
                       #{e\ 3067}#))
                   #{tmp\ 3077}#)))
              ($sc-dispatch
                #{tmp\ 3077}#
                '(any any any . each-any))))
           #{e\ 3067}#)))
      (#{global-extend\ 368}#
        'core
        'lambda*
        (lambda (#{e\ 3134}#
                 #{r\ 3135}#
                 #{w\ 3136}#
                 #{s\ 3137}#
                 #{mod\ 3138}#)
          ((lambda (#{tmp\ 3144}#)
             ((lambda (#{tmp\ 3145}#)
                (if #{tmp\ 3145}#
                  (apply (lambda (#{_\ 3150}#
                                  #{args\ 3151}#
                                  #{e1\ 3152}#
                                  #{e2\ 3153}#)
                           (call-with-values
                             (lambda ()
                               (#{chi-lambda-case\ 481}#
                                 #{e\ 3134}#
                                 #{r\ 3135}#
                                 #{w\ 3136}#
                                 #{s\ 3137}#
                                 #{mod\ 3138}#
                                 #{lambda*-formals\ 479}#
                                 (list (cons #{args\ 3151}#
                                             (cons #{e1\ 3152}#
                                                   #{e2\ 3153}#)))))
                             (lambda (#{meta\ 3155}# #{lcase\ 3156}#)
                               (#{build-case-lambda\ 316}#
                                 #{s\ 3137}#
                                 #{meta\ 3155}#
                                 #{lcase\ 3156}#))))
                         #{tmp\ 3145}#)
                  ((lambda (#{_\ 3160}#)
                     (syntax-violation
                       'lambda
                       "bad lambda*"
                       #{e\ 3134}#))
                   #{tmp\ 3144}#)))
              ($sc-dispatch
                #{tmp\ 3144}#
                '(any any any . each-any))))
           #{e\ 3134}#)))
      (#{global-extend\ 368}#
        'core
        'case-lambda
        (lambda (#{e\ 3161}#
                 #{r\ 3162}#
                 #{w\ 3163}#
                 #{s\ 3164}#
                 #{mod\ 3165}#)
          ((lambda (#{tmp\ 3171}#)
             ((lambda (#{tmp\ 3172}#)
                (if #{tmp\ 3172}#
                  (apply (lambda (#{_\ 3180}#
                                  #{args\ 3181}#
                                  #{e1\ 3182}#
                                  #{e2\ 3183}#
                                  #{args*\ 3184}#
                                  #{e1*\ 3185}#
                                  #{e2*\ 3186}#)
                           (call-with-values
                             (lambda ()
                               (#{chi-lambda-case\ 481}#
                                 #{e\ 3161}#
                                 #{r\ 3162}#
                                 #{w\ 3163}#
                                 #{s\ 3164}#
                                 #{mod\ 3165}#
                                 #{lambda-formals\ 475}#
                                 (cons (cons #{args\ 3181}#
                                             (cons #{e1\ 3182}# #{e2\ 3183}#))
                                       (map (lambda (#{tmp\ 3190}#
                                                     #{tmp\ 3189}#
                                                     #{tmp\ 3188}#)
                                              (cons #{tmp\ 3188}#
                                                    (cons #{tmp\ 3189}#
                                                          #{tmp\ 3190}#)))
                                            #{e2*\ 3186}#
                                            #{e1*\ 3185}#
                                            #{args*\ 3184}#))))
                             (lambda (#{meta\ 3192}# #{lcase\ 3193}#)
                               (#{build-case-lambda\ 316}#
                                 #{s\ 3164}#
                                 #{meta\ 3192}#
                                 #{lcase\ 3193}#))))
                         #{tmp\ 3172}#)
                  ((lambda (#{_\ 3197}#)
                     (syntax-violation
                       'case-lambda
                       "bad case-lambda"
                       #{e\ 3161}#))
                   #{tmp\ 3171}#)))
              ($sc-dispatch
                #{tmp\ 3171}#
                '(any (any any . each-any)
                      .
                      #(each (any any . each-any))))))
           #{e\ 3161}#)))
      (#{global-extend\ 368}#
        'core
        'case-lambda*
        (lambda (#{e\ 3198}#
                 #{r\ 3199}#
                 #{w\ 3200}#
                 #{s\ 3201}#
                 #{mod\ 3202}#)
          ((lambda (#{tmp\ 3208}#)
             ((lambda (#{tmp\ 3209}#)
                (if #{tmp\ 3209}#
                  (apply (lambda (#{_\ 3217}#
                                  #{args\ 3218}#
                                  #{e1\ 3219}#
                                  #{e2\ 3220}#
                                  #{args*\ 3221}#
                                  #{e1*\ 3222}#
                                  #{e2*\ 3223}#)
                           (call-with-values
                             (lambda ()
                               (#{chi-lambda-case\ 481}#
                                 #{e\ 3198}#
                                 #{r\ 3199}#
                                 #{w\ 3200}#
                                 #{s\ 3201}#
                                 #{mod\ 3202}#
                                 #{lambda*-formals\ 479}#
                                 (cons (cons #{args\ 3218}#
                                             (cons #{e1\ 3219}# #{e2\ 3220}#))
                                       (map (lambda (#{tmp\ 3227}#
                                                     #{tmp\ 3226}#
                                                     #{tmp\ 3225}#)
                                              (cons #{tmp\ 3225}#
                                                    (cons #{tmp\ 3226}#
                                                          #{tmp\ 3227}#)))
                                            #{e2*\ 3223}#
                                            #{e1*\ 3222}#
                                            #{args*\ 3221}#))))
                             (lambda (#{meta\ 3229}# #{lcase\ 3230}#)
                               (#{build-case-lambda\ 316}#
                                 #{s\ 3201}#
                                 #{meta\ 3229}#
                                 #{lcase\ 3230}#))))
                         #{tmp\ 3209}#)
                  ((lambda (#{_\ 3234}#)
                     (syntax-violation
                       'case-lambda
                       "bad case-lambda*"
                       #{e\ 3198}#))
                   #{tmp\ 3208}#)))
              ($sc-dispatch
                #{tmp\ 3208}#
                '(any (any any . each-any)
                      .
                      #(each (any any . each-any))))))
           #{e\ 3198}#)))
      (#{global-extend\ 368}#
        'core
        'let
        (letrec ((#{chi-let\ 3236}#
                   (lambda (#{e\ 3237}#
                            #{r\ 3238}#
                            #{w\ 3239}#
                            #{s\ 3240}#
                            #{mod\ 3241}#
                            #{constructor\ 3242}#
                            #{ids\ 3243}#
                            #{vals\ 3244}#
                            #{exps\ 3245}#)
                     (if (not (#{valid-bound-ids?\ 435}# #{ids\ 3243}#))
                       (syntax-violation
                         'let
                         "duplicate bound variable"
                         #{e\ 3237}#)
                       (let ((#{labels\ 3257}#
                               (#{gen-labels\ 390}# #{ids\ 3243}#))
                             (#{new-vars\ 3258}#
                               (map #{gen-var\ 485}# #{ids\ 3243}#)))
                         (let ((#{nw\ 3261}#
                                 (#{make-binding-wrap\ 419}#
                                   #{ids\ 3243}#
                                   #{labels\ 3257}#
                                   #{w\ 3239}#))
                               (#{nr\ 3262}#
                                 (#{extend-var-env\ 362}#
                                   #{labels\ 3257}#
                                   #{new-vars\ 3258}#
                                   #{r\ 3238}#)))
                           (#{constructor\ 3242}#
                             #{s\ 3240}#
                             (map syntax->datum #{ids\ 3243}#)
                             #{new-vars\ 3258}#
                             (map (lambda (#{x\ 3263}#)
                                    (#{chi\ 457}#
                                      #{x\ 3263}#
                                      #{r\ 3238}#
                                      #{w\ 3239}#
                                      #{mod\ 3241}#))
                                  #{vals\ 3244}#)
                             (#{chi-body\ 465}#
                               #{exps\ 3245}#
                               (#{source-wrap\ 443}#
                                 #{e\ 3237}#
                                 #{nw\ 3261}#
                                 #{s\ 3240}#
                                 #{mod\ 3241}#)
                               #{nr\ 3262}#
                               #{nw\ 3261}#
                               #{mod\ 3241}#))))))))
          (lambda (#{e\ 3265}#
                   #{r\ 3266}#
                   #{w\ 3267}#
                   #{s\ 3268}#
                   #{mod\ 3269}#)
            ((lambda (#{tmp\ 3275}#)
               ((lambda (#{tmp\ 3276}#)
                  (if (if #{tmp\ 3276}#
                        (apply (lambda (#{_\ 3282}#
                                        #{id\ 3283}#
                                        #{val\ 3284}#
                                        #{e1\ 3285}#
                                        #{e2\ 3286}#)
                                 (and-map #{id?\ 372}# #{id\ 3283}#))
                               #{tmp\ 3276}#)
                        #f)
                    (apply (lambda (#{_\ 3293}#
                                    #{id\ 3294}#
                                    #{val\ 3295}#
                                    #{e1\ 3296}#
                                    #{e2\ 3297}#)
                             (#{chi-let\ 3236}#
                               #{e\ 3265}#
                               #{r\ 3266}#
                               #{w\ 3267}#
                               #{s\ 3268}#
                               #{mod\ 3269}#
                               #{build-let\ 326}#
                               #{id\ 3294}#
                               #{val\ 3295}#
                               (cons #{e1\ 3296}# #{e2\ 3297}#)))
                           #{tmp\ 3276}#)
                    ((lambda (#{tmp\ 3301}#)
                       (if (if #{tmp\ 3301}#
                             (apply (lambda (#{_\ 3308}#
                                             #{f\ 3309}#
                                             #{id\ 3310}#
                                             #{val\ 3311}#
                                             #{e1\ 3312}#
                                             #{e2\ 3313}#)
                                      (if (#{id?\ 372}# #{f\ 3309}#)
                                        (and-map #{id?\ 372}# #{id\ 3310}#)
                                        #f))
                                    #{tmp\ 3301}#)
                             #f)
                         (apply (lambda (#{_\ 3323}#
                                         #{f\ 3324}#
                                         #{id\ 3325}#
                                         #{val\ 3326}#
                                         #{e1\ 3327}#
                                         #{e2\ 3328}#)
                                  (#{chi-let\ 3236}#
                                    #{e\ 3265}#
                                    #{r\ 3266}#
                                    #{w\ 3267}#
                                    #{s\ 3268}#
                                    #{mod\ 3269}#
                                    #{build-named-let\ 328}#
                                    (cons #{f\ 3324}# #{id\ 3325}#)
                                    #{val\ 3326}#
                                    (cons #{e1\ 3327}# #{e2\ 3328}#)))
                                #{tmp\ 3301}#)
                         ((lambda (#{_\ 3333}#)
                            (syntax-violation
                              'let
                              "bad let"
                              (#{source-wrap\ 443}#
                                #{e\ 3265}#
                                #{w\ 3267}#
                                #{s\ 3268}#
                                #{mod\ 3269}#)))
                          #{tmp\ 3275}#)))
                     ($sc-dispatch
                       #{tmp\ 3275}#
                       '(any any #(each (any any)) any . each-any)))))
                ($sc-dispatch
                  #{tmp\ 3275}#
                  '(any #(each (any any)) any . each-any))))
             #{e\ 3265}#))))
      (#{global-extend\ 368}#
        'core
        'letrec
        (lambda (#{e\ 3334}#
                 #{r\ 3335}#
                 #{w\ 3336}#
                 #{s\ 3337}#
                 #{mod\ 3338}#)
          ((lambda (#{tmp\ 3344}#)
             ((lambda (#{tmp\ 3345}#)
                (if (if #{tmp\ 3345}#
                      (apply (lambda (#{_\ 3351}#
                                      #{id\ 3352}#
                                      #{val\ 3353}#
                                      #{e1\ 3354}#
                                      #{e2\ 3355}#)
                               (and-map #{id?\ 372}# #{id\ 3352}#))
                             #{tmp\ 3345}#)
                      #f)
                  (apply (lambda (#{_\ 3362}#
                                  #{id\ 3363}#
                                  #{val\ 3364}#
                                  #{e1\ 3365}#
                                  #{e2\ 3366}#)
                           (let ((#{ids\ 3368}# #{id\ 3363}#))
                             (if (not (#{valid-bound-ids?\ 435}#
                                        #{ids\ 3368}#))
                               (syntax-violation
                                 'letrec
                                 "duplicate bound variable"
                                 #{e\ 3334}#)
                               (let ((#{labels\ 3372}#
                                       (#{gen-labels\ 390}# #{ids\ 3368}#))
                                     (#{new-vars\ 3373}#
                                       (map #{gen-var\ 485}# #{ids\ 3368}#)))
                                 (let ((#{w\ 3376}#
                                         (#{make-binding-wrap\ 419}#
                                           #{ids\ 3368}#
                                           #{labels\ 3372}#
                                           #{w\ 3336}#))
                                       (#{r\ 3377}#
                                         (#{extend-var-env\ 362}#
                                           #{labels\ 3372}#
                                           #{new-vars\ 3373}#
                                           #{r\ 3335}#)))
                                   (#{build-letrec\ 330}#
                                     #{s\ 3337}#
                                     (map syntax->datum #{ids\ 3368}#)
                                     #{new-vars\ 3373}#
                                     (map (lambda (#{x\ 3378}#)
                                            (#{chi\ 457}#
                                              #{x\ 3378}#
                                              #{r\ 3377}#
                                              #{w\ 3376}#
                                              #{mod\ 3338}#))
                                          #{val\ 3364}#)
                                     (#{chi-body\ 465}#
                                       (cons #{e1\ 3365}# #{e2\ 3366}#)
                                       (#{source-wrap\ 443}#
                                         #{e\ 3334}#
                                         #{w\ 3376}#
                                         #{s\ 3337}#
                                         #{mod\ 3338}#)
                                       #{r\ 3377}#
                                       #{w\ 3376}#
                                       #{mod\ 3338}#)))))))
                         #{tmp\ 3345}#)
                  ((lambda (#{_\ 3383}#)
                     (syntax-violation
                       'letrec
                       "bad letrec"
                       (#{source-wrap\ 443}#
                         #{e\ 3334}#
                         #{w\ 3336}#
                         #{s\ 3337}#
                         #{mod\ 3338}#)))
                   #{tmp\ 3344}#)))
              ($sc-dispatch
                #{tmp\ 3344}#
                '(any #(each (any any)) any . each-any))))
           #{e\ 3334}#)))
      (#{global-extend\ 368}#
        'core
        'set!
        (lambda (#{e\ 3384}#
                 #{r\ 3385}#
                 #{w\ 3386}#
                 #{s\ 3387}#
                 #{mod\ 3388}#)
          ((lambda (#{tmp\ 3394}#)
             ((lambda (#{tmp\ 3395}#)
                (if (if #{tmp\ 3395}#
                      (apply (lambda (#{_\ 3399}# #{id\ 3400}# #{val\ 3401}#)
                               (#{id?\ 372}# #{id\ 3400}#))
                             #{tmp\ 3395}#)
                      #f)
                  (apply (lambda (#{_\ 3405}# #{id\ 3406}# #{val\ 3407}#)
                           (let ((#{val\ 3410}#
                                   (#{chi\ 457}#
                                     #{val\ 3407}#
                                     #{r\ 3385}#
                                     #{w\ 3386}#
                                     #{mod\ 3388}#))
                                 (#{n\ 3411}#
                                   (#{id-var-name\ 429}#
                                     #{id\ 3406}#
                                     #{w\ 3386}#)))
                             (let ((#{b\ 3413}#
                                     (#{lookup\ 366}#
                                       #{n\ 3411}#
                                       #{r\ 3385}#
                                       #{mod\ 3388}#)))
                               (let ((#{atom-key\ 3416}#
                                       (#{binding-type\ 355}# #{b\ 3413}#)))
                                 (if (memv #{atom-key\ 3416}#
                                           '(lexical))
                                   (#{build-lexical-assignment\ 302}#
                                     #{s\ 3387}#
                                     (syntax->datum #{id\ 3406}#)
                                     (#{binding-value\ 357}# #{b\ 3413}#)
                                     #{val\ 3410}#)
                                   (if (memv #{atom-key\ 3416}#
                                             '(global))
                                     (#{build-global-assignment\ 308}#
                                       #{s\ 3387}#
                                       #{n\ 3411}#
                                       #{val\ 3410}#
                                       #{mod\ 3388}#)
                                     (if (memv #{atom-key\ 3416}#
                                               '(displaced-lexical))
                                       (syntax-violation
                                         'set!
                                         "identifier out of context"
                                         (#{wrap\ 441}#
                                           #{id\ 3406}#
                                           #{w\ 3386}#
                                           #{mod\ 3388}#))
                                       (syntax-violation
                                         'set!
                                         "bad set!"
                                         (#{source-wrap\ 443}#
                                           #{e\ 3384}#
                                           #{w\ 3386}#
                                           #{s\ 3387}#
                                           #{mod\ 3388}#)))))))))
                         #{tmp\ 3395}#)
                  ((lambda (#{tmp\ 3421}#)
                     (if #{tmp\ 3421}#
                       (apply (lambda (#{_\ 3426}#
                                       #{head\ 3427}#
                                       #{tail\ 3428}#
                                       #{val\ 3429}#)
                                (call-with-values
                                  (lambda ()
                                    (#{syntax-type\ 453}#
                                      #{head\ 3427}#
                                      #{r\ 3385}#
                                      '(())
                                      #f
                                      #f
                                      #{mod\ 3388}#
                                      #t))
                                  (lambda (#{type\ 3432}#
                                           #{value\ 3433}#
                                           #{ee\ 3434}#
                                           #{ww\ 3435}#
                                           #{ss\ 3436}#
                                           #{modmod\ 3437}#)
                                    (if (memv #{type\ 3432}#
                                              '(module-ref))
                                      (let ((#{val\ 3446}#
                                              (#{chi\ 457}#
                                                #{val\ 3429}#
                                                #{r\ 3385}#
                                                #{w\ 3386}#
                                                #{mod\ 3388}#)))
                                        (call-with-values
                                          (lambda ()
                                            (#{value\ 3433}#
                                              (cons #{head\ 3427}#
                                                    #{tail\ 3428}#)
                                              #{r\ 3385}#
                                              #{w\ 3386}#))
                                          (lambda (#{e\ 3448}#
                                                   #{r\ 3449}#
                                                   #{w\ 3450}#
                                                   #{s*\ 3451}#
                                                   #{mod\ 3452}#)
                                            ((lambda (#{tmp\ 3458}#)
                                               ((lambda (#{tmp\ 3459}#)
                                                  (if (if #{tmp\ 3459}#
                                                        (apply (lambda (#{e\ 3461}#)
                                                                 (#{id?\ 372}#
                                                                   #{e\ 3461}#))
                                                               #{tmp\ 3459}#)
                                                        #f)
                                                    (apply (lambda (#{e\ 3463}#)
                                                             (#{build-global-assignment\ 308}#
                                                               #{s\ 3387}#
                                                               (syntax->datum
                                                                 #{e\ 3463}#)
                                                               #{val\ 3446}#
                                                               #{mod\ 3452}#))
                                                           #{tmp\ 3459}#)
                                                    (syntax-violation
                                                      #f
                                                      "source expression failed to match any pattern"
                                                      #{tmp\ 3458}#)))
                                                (list #{tmp\ 3458}#)))
                                             #{e\ 3448}#))))
                                      (#{build-application\ 294}#
                                        #{s\ 3387}#
                                        (#{chi\ 457}#
                                          (list '#(syntax-object
                                                   setter
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(type
                                                        value
                                                        ee
                                                        ww
                                                        ss
                                                        modmod)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i3438"
                                                        "i3439"
                                                        "i3440"
                                                        "i3441"
                                                        "i3442"
                                                        "i3443"))
                                                    #(ribcage
                                                      #(_ head tail val)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i3422"
                                                        "i3423"
                                                        "i3424"
                                                        "i3425"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(e r w s mod)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i3389"
                                                        "i3390"
                                                        "i3391"
                                                        "i3392"
                                                        "i3393"))
                                                    #(ribcage
                                                      (lambda-var-list
                                                        gen-var
                                                        strip
                                                        chi-lambda-case
                                                        lambda*-formals
                                                        chi-simple-lambda
                                                        lambda-formals
                                                        ellipsis?
                                                        chi-void
                                                        eval-local-transformer
                                                        chi-local-syntax
                                                        chi-body
                                                        chi-macro
                                                        chi-application
                                                        chi-expr
                                                        chi
                                                        chi-top
                                                        syntax-type
                                                        chi-when-list
                                                        chi-install-global
                                                        chi-top-sequence
                                                        chi-sequence
                                                        source-wrap
                                                        wrap
                                                        bound-id-member?
                                                        distinct-bound-ids?
                                                        valid-bound-ids?
                                                        bound-id=?
                                                        free-id=?
                                                        id-var-name
                                                        same-marks?
                                                        join-marks
                                                        join-wraps
                                                        smart-append
                                                        make-binding-wrap
                                                        extend-ribcage!
                                                        make-empty-ribcage
                                                        new-mark
                                                        anti-mark
                                                        the-anti-mark
                                                        top-marked?
                                                        top-wrap
                                                        empty-wrap
                                                        set-ribcage-labels!
                                                        set-ribcage-marks!
                                                        set-ribcage-symnames!
                                                        ribcage-labels
                                                        ribcage-marks
                                                        ribcage-symnames
                                                        ribcage?
                                                        make-ribcage
                                                        gen-labels
                                                        gen-label
                                                        make-rename
                                                        rename-marks
                                                        rename-new
                                                        rename-old
                                                        subst-rename?
                                                        wrap-subst
                                                        wrap-marks
                                                        make-wrap
                                                        id-sym-name&marks
                                                        id-sym-name
                                                        id?
                                                        nonsymbol-id?
                                                        global-extend
                                                        lookup
                                                        macros-only-env
                                                        extend-var-env
                                                        extend-env
                                                        null-env
                                                        binding-value
                                                        binding-type
                                                        make-binding
                                                        arg-check
                                                        source-annotation
                                                        no-source
                                                        set-syntax-object-module!
                                                        set-syntax-object-wrap!
                                                        set-syntax-object-expression!
                                                        syntax-object-module
                                                        syntax-object-wrap
                                                        syntax-object-expression
                                                        syntax-object?
                                                        make-syntax-object
                                                        build-lexical-var
                                                        build-letrec
                                                        build-named-let
                                                        build-let
                                                        build-sequence
                                                        build-data
                                                        build-primref
                                                        build-lambda-case
                                                        build-case-lambda
                                                        build-simple-lambda
                                                        build-global-definition
                                                        maybe-name-value!
                                                        build-global-assignment
                                                        build-global-reference
                                                        analyze-variable
                                                        build-lexical-assignment
                                                        build-lexical-reference
                                                        build-dynlet
                                                        build-conditional
                                                        build-application
                                                        build-void
                                                        decorate-source
                                                        get-global-definition-hook
                                                        put-global-definition-hook
                                                        gensym-hook
                                                        local-eval-hook
                                                        top-level-eval-hook
                                                        fx<
                                                        fx=
                                                        fx-
                                                        fx+
                                                        set-lambda-meta!
                                                        lambda-meta
                                                        lambda?
                                                        make-dynlet
                                                        make-letrec
                                                        make-let
                                                        make-lambda-case
                                                        make-lambda
                                                        make-sequence
                                                        make-application
                                                        make-conditional
                                                        make-toplevel-define
                                                        make-toplevel-set
                                                        make-toplevel-ref
                                                        make-module-set
                                                        make-module-ref
                                                        make-lexical-set
                                                        make-lexical-ref
                                                        make-primitive-ref
                                                        make-const
                                                        make-void)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i486"
                                                       "i484"
                                                       "i482"
                                                       "i480"
                                                       "i478"
                                                       "i476"
                                                       "i474"
                                                       "i472"
                                                       "i470"
                                                       "i468"
                                                       "i466"
                                                       "i464"
                                                       "i462"
                                                       "i460"
                                                       "i458"
                                                       "i456"
                                                       "i454"
                                                       "i452"
                                                       "i450"
                                                       "i448"
                                                       "i446"
                                                       "i444"
                                                       "i442"
                                                       "i440"
                                                       "i438"
                                                       "i436"
                                                       "i434"
                                                       "i432"
                                                       "i430"
                                                       "i428"
                                                       "i426"
                                                       "i424"
                                                       "i422"
                                                       "i420"
                                                       "i418"
                                                       "i416"
                                                       "i415"
                                                       "i414"
                                                       "i412"
                                                       "i411"
                                                       "i410"
                                                       "i409"
                                                       "i408"
                                                       "i406"
                                                       "i404"
                                                       "i402"
                                                       "i400"
                                                       "i398"
                                                       "i396"
                                                       "i394"
                                                       "i392"
                                                       "i389"
                                                       "i387"
                                                       "i386"
                                                       "i385"
                                                       "i384"
                                                       "i383"
                                                       "i382"
                                                       "i380"
                                                       "i378"
                                                       "i376"
                                                       "i374"
                                                       "i373"
                                                       "i371"
                                                       "i369"
                                                       "i367"
                                                       "i365"
                                                       "i363"
                                                       "i361"
                                                       "i359"
                                                       "i358"
                                                       "i356"
                                                       "i354"
                                                       "i353"
                                                       "i352"
                                                       "i350"
                                                       "i349"
                                                       "i347"
                                                       "i345"
                                                       "i343"
                                                       "i341"
                                                       "i339"
                                                       "i337"
                                                       "i335"
                                                       "i333"
                                                       "i331"
                                                       "i329"
                                                       "i327"
                                                       "i325"
                                                       "i323"
                                                       "i321"
                                                       "i319"
                                                       "i317"
                                                       "i315"
                                                       "i313"
                                                       "i311"
                                                       "i309"
                                                       "i307"
                                                       "i305"
                                                       "i303"
                                                       "i301"
                                                       "i299"
                                                       "i297"
                                                       "i295"
                                                       "i293"
                                                       "i291"
                                                       "i289"
                                                       "i287"
                                                       "i285"
                                                       "i284"
                                                       "i282"
                                                       "i280"
                                                       "i278"
                                                       "i276"
                                                       "i274"
                                                       "i272"
                                                       "i270"
                                                       "i268"
                                                       "i266"
                                                       "i263"
                                                       "i261"
                                                       "i259"
                                                       "i257"
                                                       "i255"
                                                       "i253"
                                                       "i251"
                                                       "i249"
                                                       "i247"
                                                       "i245"
                                                       "i243"
                                                       "i241"
                                                       "i239"
                                                       "i237"
                                                       "i235"
                                                       "i233"
                                                       "i231"
                                                       "i229"))
                                                    #(ribcage
                                                      (define-structure
                                                        define-expansion-accessors
                                                        define-expansion-constructors
                                                        and-map*)
                                                      ((top) (top) (top) (top))
                                                      ("i23"
                                                       "i22"
                                                       "i21"
                                                       "i19")))
                                                   (hygiene guile))
                                                #{head\ 3427}#)
                                          #{r\ 3385}#
                                          #{w\ 3386}#
                                          #{mod\ 3388}#)
                                        (map (lambda (#{e\ 3465}#)
                                               (#{chi\ 457}#
                                                 #{e\ 3465}#
                                                 #{r\ 3385}#
                                                 #{w\ 3386}#
                                                 #{mod\ 3388}#))
                                             (append
                                               #{tail\ 3428}#
                                               (list #{val\ 3429}#))))))))
                              #{tmp\ 3421}#)
                       ((lambda (#{_\ 3469}#)
                          (syntax-violation
                            'set!
                            "bad set!"
                            (#{source-wrap\ 443}#
                              #{e\ 3384}#
                              #{w\ 3386}#
                              #{s\ 3387}#
                              #{mod\ 3388}#)))
                        #{tmp\ 3394}#)))
                   ($sc-dispatch
                     #{tmp\ 3394}#
                     '(any (any . each-any) any)))))
              ($sc-dispatch
                #{tmp\ 3394}#
                '(any any any))))
           #{e\ 3384}#)))
      (#{global-extend\ 368}#
        'module-ref
        '@
        (lambda (#{e\ 3470}# #{r\ 3471}# #{w\ 3472}#)
          ((lambda (#{tmp\ 3476}#)
             ((lambda (#{tmp\ 3477}#)
                (if (if #{tmp\ 3477}#
                      (apply (lambda (#{_\ 3481}# #{mod\ 3482}# #{id\ 3483}#)
                               (if (and-map #{id?\ 372}# #{mod\ 3482}#)
                                 (#{id?\ 372}# #{id\ 3483}#)
                                 #f))
                             #{tmp\ 3477}#)
                      #f)
                  (apply (lambda (#{_\ 3490}# #{mod\ 3491}# #{id\ 3492}#)
                           (values
                             (syntax->datum #{id\ 3492}#)
                             #{r\ 3471}#
                             #{w\ 3472}#
                             #f
                             (syntax->datum
                               (cons '#(syntax-object
                                        public
                                        ((top)
                                         #(ribcage
                                           #(_ mod id)
                                           #((top) (top) (top))
                                           #("i3487" "i3488" "i3489"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(e r w)
                                           #((top) (top) (top))
                                           #("i3473" "i3474" "i3475"))
                                         #(ribcage
                                           (lambda-var-list
                                             gen-var
                                             strip
                                             chi-lambda-case
                                             lambda*-formals
                                             chi-simple-lambda
                                             lambda-formals
                                             ellipsis?
                                             chi-void
                                             eval-local-transformer
                                             chi-local-syntax
                                             chi-body
                                             chi-macro
                                             chi-application
                                             chi-expr
                                             chi
                                             chi-top
                                             syntax-type
                                             chi-when-list
                                             chi-install-global
                                             chi-top-sequence
                                             chi-sequence
                                             source-wrap
                                             wrap
                                             bound-id-member?
                                             distinct-bound-ids?
                                             valid-bound-ids?
                                             bound-id=?
                                             free-id=?
                                             id-var-name
                                             same-marks?
                                             join-marks
                                             join-wraps
                                             smart-append
                                             make-binding-wrap
                                             extend-ribcage!
                                             make-empty-ribcage
                                             new-mark
                                             anti-mark
                                             the-anti-mark
                                             top-marked?
                                             top-wrap
                                             empty-wrap
                                             set-ribcage-labels!
                                             set-ribcage-marks!
                                             set-ribcage-symnames!
                                             ribcage-labels
                                             ribcage-marks
                                             ribcage-symnames
                                             ribcage?
                                             make-ribcage
                                             gen-labels
                                             gen-label
                                             make-rename
                                             rename-marks
                                             rename-new
                                             rename-old
                                             subst-rename?
                                             wrap-subst
                                             wrap-marks
                                             make-wrap
                                             id-sym-name&marks
                                             id-sym-name
                                             id?
                                             nonsymbol-id?
                                             global-extend
                                             lookup
                                             macros-only-env
                                             extend-var-env
                                             extend-env
                                             null-env
                                             binding-value
                                             binding-type
                                             make-binding
                                             arg-check
                                             source-annotation
                                             no-source
                                             set-syntax-object-module!
                                             set-syntax-object-wrap!
                                             set-syntax-object-expression!
                                             syntax-object-module
                                             syntax-object-wrap
                                             syntax-object-expression
                                             syntax-object?
                                             make-syntax-object
                                             build-lexical-var
                                             build-letrec
                                             build-named-let
                                             build-let
                                             build-sequence
                                             build-data
                                             build-primref
                                             build-lambda-case
                                             build-case-lambda
                                             build-simple-lambda
                                             build-global-definition
                                             maybe-name-value!
                                             build-global-assignment
                                             build-global-reference
                                             analyze-variable
                                             build-lexical-assignment
                                             build-lexical-reference
                                             build-dynlet
                                             build-conditional
                                             build-application
                                             build-void
                                             decorate-source
                                             get-global-definition-hook
                                             put-global-definition-hook
                                             gensym-hook
                                             local-eval-hook
                                             top-level-eval-hook
                                             fx<
                                             fx=
                                             fx-
                                             fx+
                                             set-lambda-meta!
                                             lambda-meta
                                             lambda?
                                             make-dynlet
                                             make-letrec
                                             make-let
                                             make-lambda-case
                                             make-lambda
                                             make-sequence
                                             make-application
                                             make-conditional
                                             make-toplevel-define
                                             make-toplevel-set
                                             make-toplevel-ref
                                             make-module-set
                                             make-module-ref
                                             make-lexical-set
                                             make-lexical-ref
                                             make-primitive-ref
                                             make-const
                                             make-void)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("i486"
                                            "i484"
                                            "i482"
                                            "i480"
                                            "i478"
                                            "i476"
                                            "i474"
                                            "i472"
                                            "i470"
                                            "i468"
                                            "i466"
                                            "i464"
                                            "i462"
                                            "i460"
                                            "i458"
                                            "i456"
                                            "i454"
                                            "i452"
                                            "i450"
                                            "i448"
                                            "i446"
                                            "i444"
                                            "i442"
                                            "i440"
                                            "i438"
                                            "i436"
                                            "i434"
                                            "i432"
                                            "i430"
                                            "i428"
                                            "i426"
                                            "i424"
                                            "i422"
                                            "i420"
                                            "i418"
                                            "i416"
                                            "i415"
                                            "i414"
                                            "i412"
                                            "i411"
                                            "i410"
                                            "i409"
                                            "i408"
                                            "i406"
                                            "i404"
                                            "i402"
                                            "i400"
                                            "i398"
                                            "i396"
                                            "i394"
                                            "i392"
                                            "i389"
                                            "i387"
                                            "i386"
                                            "i385"
                                            "i384"
                                            "i383"
                                            "i382"
                                            "i380"
                                            "i378"
                                            "i376"
                                            "i374"
                                            "i373"
                                            "i371"
                                            "i369"
                                            "i367"
                                            "i365"
                                            "i363"
                                            "i361"
                                            "i359"
                                            "i358"
                                            "i356"
                                            "i354"
                                            "i353"
                                            "i352"
                                            "i350"
                                            "i349"
                                            "i347"
                                            "i345"
                                            "i343"
                                            "i341"
                                            "i339"
                                            "i337"
                                            "i335"
                                            "i333"
                                            "i331"
                                            "i329"
                                            "i327"
                                            "i325"
                                            "i323"
                                            "i321"
                                            "i319"
                                            "i317"
                                            "i315"
                                            "i313"
                                            "i311"
                                            "i309"
                                            "i307"
                                            "i305"
                                            "i303"
                                            "i301"
                                            "i299"
                                            "i297"
                                            "i295"
                                            "i293"
                                            "i291"
                                            "i289"
                                            "i287"
                                            "i285"
                                            "i284"
                                            "i282"
                                            "i280"
                                            "i278"
                                            "i276"
                                            "i274"
                                            "i272"
                                            "i270"
                                            "i268"
                                            "i266"
                                            "i263"
                                            "i261"
                                            "i259"
                                            "i257"
                                            "i255"
                                            "i253"
                                            "i251"
                                            "i249"
                                            "i247"
                                            "i245"
                                            "i243"
                                            "i241"
                                            "i239"
                                            "i237"
                                            "i235"
                                            "i233"
                                            "i231"
                                            "i229"))
                                         #(ribcage
                                           (define-structure
                                             define-expansion-accessors
                                             define-expansion-constructors
                                             and-map*)
                                           ((top) (top) (top) (top))
                                           ("i23" "i22" "i21" "i19")))
                                        (hygiene guile))
                                     #{mod\ 3491}#))))
                         #{tmp\ 3477}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{tmp\ 3476}#)))
              ($sc-dispatch
                #{tmp\ 3476}#
                '(any each-any any))))
           #{e\ 3470}#)))
      (#{global-extend\ 368}#
        'module-ref
        '@@
        (lambda (#{e\ 3494}# #{r\ 3495}# #{w\ 3496}#)
          (letrec ((#{remodulate\ 3501}#
                     (lambda (#{x\ 3502}# #{mod\ 3503}#)
                       (if (pair? #{x\ 3502}#)
                         (cons (#{remodulate\ 3501}#
                                 (car #{x\ 3502}#)
                                 #{mod\ 3503}#)
                               (#{remodulate\ 3501}#
                                 (cdr #{x\ 3502}#)
                                 #{mod\ 3503}#))
                         (if (#{syntax-object?\ 336}# #{x\ 3502}#)
                           (#{make-syntax-object\ 334}#
                             (#{remodulate\ 3501}#
                               (#{syntax-object-expression\ 338}# #{x\ 3502}#)
                               #{mod\ 3503}#)
                             (#{syntax-object-wrap\ 340}# #{x\ 3502}#)
                             #{mod\ 3503}#)
                           (if (vector? #{x\ 3502}#)
                             (let ((#{n\ 3514}# (vector-length #{x\ 3502}#)))
                               (let ((#{v\ 3516}# (make-vector #{n\ 3514}#)))
                                 (letrec ((#{loop\ 3519}#
                                            (lambda (#{i\ 3520}#)
                                              (if (#{fx=\ 277}#
                                                    #{i\ 3520}#
                                                    #{n\ 3514}#)
                                                (begin (if #f #f) #{v\ 3516}#)
                                                (begin
                                                  (vector-set!
                                                    #{v\ 3516}#
                                                    #{i\ 3520}#
                                                    (#{remodulate\ 3501}#
                                                      (vector-ref
                                                        #{x\ 3502}#
                                                        #{i\ 3520}#)
                                                      #{mod\ 3503}#))
                                                  (#{loop\ 3519}#
                                                    (#{fx+\ 273}#
                                                      #{i\ 3520}#
                                                      1)))))))
                                   (#{loop\ 3519}# 0))))
                             #{x\ 3502}#))))))
            ((lambda (#{tmp\ 3524}#)
               ((lambda (#{tmp\ 3525}#)
                  (if (if #{tmp\ 3525}#
                        (apply (lambda (#{_\ 3529}#
                                        #{mod\ 3530}#
                                        #{exp\ 3531}#)
                                 (and-map #{id?\ 372}# #{mod\ 3530}#))
                               #{tmp\ 3525}#)
                        #f)
                    (apply (lambda (#{_\ 3536}# #{mod\ 3537}# #{exp\ 3538}#)
                             (let ((#{mod\ 3540}#
                                     (syntax->datum
                                       (cons '#(syntax-object
                                                private
                                                ((top)
                                                 #(ribcage
                                                   #(_ mod exp)
                                                   #((top) (top) (top))
                                                   #("i3533" "i3534" "i3535"))
                                                 #(ribcage
                                                   (remodulate)
                                                   ((top))
                                                   ("i3500"))
                                                 #(ribcage
                                                   #(e r w)
                                                   #((top) (top) (top))
                                                   #("i3497" "i3498" "i3499"))
                                                 #(ribcage
                                                   (lambda-var-list
                                                     gen-var
                                                     strip
                                                     chi-lambda-case
                                                     lambda*-formals
                                                     chi-simple-lambda
                                                     lambda-formals
                                                     ellipsis?
                                                     chi-void
                                                     eval-local-transformer
                                                     chi-local-syntax
                                                     chi-body
                                                     chi-macro
                                                     chi-application
                                                     chi-expr
                                                     chi
                                                     chi-top
                                                     syntax-type
                                                     chi-when-list
                                                     chi-install-global
                                                     chi-top-sequence
                                                     chi-sequence
                                                     source-wrap
                                                     wrap
                                                     bound-id-member?
                                                     distinct-bound-ids?
                                                     valid-bound-ids?
                                                     bound-id=?
                                                     free-id=?
                                                     id-var-name
                                                     same-marks?
                                                     join-marks
                                                     join-wraps
                                                     smart-append
                                                     make-binding-wrap
                                                     extend-ribcage!
                                                     make-empty-ribcage
                                                     new-mark
                                                     anti-mark
                                                     the-anti-mark
                                                     top-marked?
                                                     top-wrap
                                                     empty-wrap
                                                     set-ribcage-labels!
                                                     set-ribcage-marks!
                                                     set-ribcage-symnames!
                                                     ribcage-labels
                                                     ribcage-marks
                                                     ribcage-symnames
                                                     ribcage?
                                                     make-ribcage
                                                     gen-labels
                                                     gen-label
                                                     make-rename
                                                     rename-marks
                                                     rename-new
                                                     rename-old
                                                     subst-rename?
                                                     wrap-subst
                                                     wrap-marks
                                                     make-wrap
                                                     id-sym-name&marks
                                                     id-sym-name
                                                     id?
                                                     nonsymbol-id?
                                                     global-extend
                                                     lookup
                                                     macros-only-env
                                                     extend-var-env
                                                     extend-env
                                                     null-env
                                                     binding-value
                                                     binding-type
                                                     make-binding
                                                     arg-check
                                                     source-annotation
                                                     no-source
                                                     set-syntax-object-module!
                                                     set-syntax-object-wrap!
                                                     set-syntax-object-expression!
                                                     syntax-object-module
                                                     syntax-object-wrap
                                                     syntax-object-expression
                                                     syntax-object?
                                                     make-syntax-object
                                                     build-lexical-var
                                                     build-letrec
                                                     build-named-let
                                                     build-let
                                                     build-sequence
                                                     build-data
                                                     build-primref
                                                     build-lambda-case
                                                     build-case-lambda
                                                     build-simple-lambda
                                                     build-global-definition
                                                     maybe-name-value!
                                                     build-global-assignment
                                                     build-global-reference
                                                     analyze-variable
                                                     build-lexical-assignment
                                                     build-lexical-reference
                                                     build-dynlet
                                                     build-conditional
                                                     build-application
                                                     build-void
                                                     decorate-source
                                                     get-global-definition-hook
                                                     put-global-definition-hook
                                                     gensym-hook
                                                     local-eval-hook
                                                     top-level-eval-hook
                                                     fx<
                                                     fx=
                                                     fx-
                                                     fx+
                                                     set-lambda-meta!
                                                     lambda-meta
                                                     lambda?
                                                     make-dynlet
                                                     make-letrec
                                                     make-let
                                                     make-lambda-case
                                                     make-lambda
                                                     make-sequence
                                                     make-application
                                                     make-conditional
                                                     make-toplevel-define
                                                     make-toplevel-set
                                                     make-toplevel-ref
                                                     make-module-set
                                                     make-module-ref
                                                     make-lexical-set
                                                     make-lexical-ref
                                                     make-primitive-ref
                                                     make-const
                                                     make-void)
                                                   ((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                   ("i486"
                                                    "i484"
                                                    "i482"
                                                    "i480"
                                                    "i478"
                                                    "i476"
                                                    "i474"
                                                    "i472"
                                                    "i470"
                                                    "i468"
                                                    "i466"
                                                    "i464"
                                                    "i462"
                                                    "i460"
                                                    "i458"
                                                    "i456"
                                                    "i454"
                                                    "i452"
                                                    "i450"
                                                    "i448"
                                                    "i446"
                                                    "i444"
                                                    "i442"
                                                    "i440"
                                                    "i438"
                                                    "i436"
                                                    "i434"
                                                    "i432"
                                                    "i430"
                                                    "i428"
                                                    "i426"
                                                    "i424"
                                                    "i422"
                                                    "i420"
                                                    "i418"
                                                    "i416"
                                                    "i415"
                                                    "i414"
                                                    "i412"
                                                    "i411"
                                                    "i410"
                                                    "i409"
                                                    "i408"
                                                    "i406"
                                                    "i404"
                                                    "i402"
                                                    "i400"
                                                    "i398"
                                                    "i396"
                                                    "i394"
                                                    "i392"
                                                    "i389"
                                                    "i387"
                                                    "i386"
                                                    "i385"
                                                    "i384"
                                                    "i383"
                                                    "i382"
                                                    "i380"
                                                    "i378"
                                                    "i376"
                                                    "i374"
                                                    "i373"
                                                    "i371"
                                                    "i369"
                                                    "i367"
                                                    "i365"
                                                    "i363"
                                                    "i361"
                                                    "i359"
                                                    "i358"
                                                    "i356"
                                                    "i354"
                                                    "i353"
                                                    "i352"
                                                    "i350"
                                                    "i349"
                                                    "i347"
                                                    "i345"
                                                    "i343"
                                                    "i341"
                                                    "i339"
                                                    "i337"
                                                    "i335"
                                                    "i333"
                                                    "i331"
                                                    "i329"
                                                    "i327"
                                                    "i325"
                                                    "i323"
                                                    "i321"
                                                    "i319"
                                                    "i317"
                                                    "i315"
                                                    "i313"
                                                    "i311"
                                                    "i309"
                                                    "i307"
                                                    "i305"
                                                    "i303"
                                                    "i301"
                                                    "i299"
                                                    "i297"
                                                    "i295"
                                                    "i293"
                                                    "i291"
                                                    "i289"
                                                    "i287"
                                                    "i285"
                                                    "i284"
                                                    "i282"
                                                    "i280"
                                                    "i278"
                                                    "i276"
                                                    "i274"
                                                    "i272"
                                                    "i270"
                                                    "i268"
                                                    "i266"
                                                    "i263"
                                                    "i261"
                                                    "i259"
                                                    "i257"
                                                    "i255"
                                                    "i253"
                                                    "i251"
                                                    "i249"
                                                    "i247"
                                                    "i245"
                                                    "i243"
                                                    "i241"
                                                    "i239"
                                                    "i237"
                                                    "i235"
                                                    "i233"
                                                    "i231"
                                                    "i229"))
                                                 #(ribcage
                                                   (define-structure
                                                     define-expansion-accessors
                                                     define-expansion-constructors
                                                     and-map*)
                                                   ((top) (top) (top) (top))
                                                   ("i23" "i22" "i21" "i19")))
                                                (hygiene guile))
                                             #{mod\ 3537}#))))
                               (values
                                 (#{remodulate\ 3501}#
                                   #{exp\ 3538}#
                                   #{mod\ 3540}#)
                                 #{r\ 3495}#
                                 #{w\ 3496}#
                                 (#{source-annotation\ 351}# #{exp\ 3538}#)
                                 #{mod\ 3540}#)))
                           #{tmp\ 3525}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 3524}#)))
                ($sc-dispatch
                  #{tmp\ 3524}#
                  '(any each-any any))))
             #{e\ 3494}#))))
      (#{global-extend\ 368}#
        'core
        'if
        (lambda (#{e\ 3542}#
                 #{r\ 3543}#
                 #{w\ 3544}#
                 #{s\ 3545}#
                 #{mod\ 3546}#)
          ((lambda (#{tmp\ 3552}#)
             ((lambda (#{tmp\ 3553}#)
                (if #{tmp\ 3553}#
                  (apply (lambda (#{_\ 3557}# #{test\ 3558}# #{then\ 3559}#)
                           (#{build-conditional\ 296}#
                             #{s\ 3545}#
                             (#{chi\ 457}#
                               #{test\ 3558}#
                               #{r\ 3543}#
                               #{w\ 3544}#
                               #{mod\ 3546}#)
                             (#{chi\ 457}#
                               #{then\ 3559}#
                               #{r\ 3543}#
                               #{w\ 3544}#
                               #{mod\ 3546}#)
                             (#{build-void\ 292}# #f)))
                         #{tmp\ 3553}#)
                  ((lambda (#{tmp\ 3561}#)
                     (if #{tmp\ 3561}#
                       (apply (lambda (#{_\ 3566}#
                                       #{test\ 3567}#
                                       #{then\ 3568}#
                                       #{else\ 3569}#)
                                (#{build-conditional\ 296}#
                                  #{s\ 3545}#
                                  (#{chi\ 457}#
                                    #{test\ 3567}#
                                    #{r\ 3543}#
                                    #{w\ 3544}#
                                    #{mod\ 3546}#)
                                  (#{chi\ 457}#
                                    #{then\ 3568}#
                                    #{r\ 3543}#
                                    #{w\ 3544}#
                                    #{mod\ 3546}#)
                                  (#{chi\ 457}#
                                    #{else\ 3569}#
                                    #{r\ 3543}#
                                    #{w\ 3544}#
                                    #{mod\ 3546}#)))
                              #{tmp\ 3561}#)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         #{tmp\ 3552}#)))
                   ($sc-dispatch
                     #{tmp\ 3552}#
                     '(any any any any)))))
              ($sc-dispatch
                #{tmp\ 3552}#
                '(any any any))))
           #{e\ 3542}#)))
      (#{global-extend\ 368}#
        'core
        'with-fluids
        (lambda (#{e\ 3570}#
                 #{r\ 3571}#
                 #{w\ 3572}#
                 #{s\ 3573}#
                 #{mod\ 3574}#)
          ((lambda (#{tmp\ 3580}#)
             ((lambda (#{tmp\ 3581}#)
                (if #{tmp\ 3581}#
                  (apply (lambda (#{_\ 3587}#
                                  #{fluid\ 3588}#
                                  #{val\ 3589}#
                                  #{b\ 3590}#
                                  #{b*\ 3591}#)
                           (#{build-dynlet\ 298}#
                             #{s\ 3573}#
                             (map (lambda (#{x\ 3592}#)
                                    (#{chi\ 457}#
                                      #{x\ 3592}#
                                      #{r\ 3571}#
                                      #{w\ 3572}#
                                      #{mod\ 3574}#))
                                  #{fluid\ 3588}#)
                             (map (lambda (#{x\ 3595}#)
                                    (#{chi\ 457}#
                                      #{x\ 3595}#
                                      #{r\ 3571}#
                                      #{w\ 3572}#
                                      #{mod\ 3574}#))
                                  #{val\ 3589}#)
                             (#{chi-body\ 465}#
                               (cons #{b\ 3590}# #{b*\ 3591}#)
                               (#{source-wrap\ 443}#
                                 #{e\ 3570}#
                                 #{w\ 3572}#
                                 #{s\ 3573}#
                                 #{mod\ 3574}#)
                               #{r\ 3571}#
                               #{w\ 3572}#
                               #{mod\ 3574}#)))
                         #{tmp\ 3581}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{tmp\ 3580}#)))
              ($sc-dispatch
                #{tmp\ 3580}#
                '(any #(each (any any)) any . each-any))))
           #{e\ 3570}#)))
      (#{global-extend\ 368}#
        'begin
        'begin
        '())
      (#{global-extend\ 368}#
        'define
        'define
        '())
      (#{global-extend\ 368}#
        'define-syntax
        'define-syntax
        '())
      (#{global-extend\ 368}#
        'eval-when
        'eval-when
        '())
      (#{global-extend\ 368}#
        'core
        'syntax-case
        (letrec ((#{gen-syntax-case\ 3606}#
                   (lambda (#{x\ 3607}#
                            #{keys\ 3608}#
                            #{clauses\ 3609}#
                            #{r\ 3610}#
                            #{mod\ 3611}#)
                     (if (null? #{clauses\ 3609}#)
                       (#{build-application\ 294}#
                         #f
                         (#{build-primref\ 320}#
                           #f
                           'syntax-violation)
                         (list (#{build-data\ 322}# #f #f)
                               (#{build-data\ 322}#
                                 #f
                                 "source expression failed to match any pattern")
                               #{x\ 3607}#))
                       ((lambda (#{tmp\ 3621}#)
                          ((lambda (#{tmp\ 3622}#)
                             (if #{tmp\ 3622}#
                               (apply (lambda (#{pat\ 3625}# #{exp\ 3626}#)
                                        (if (if (#{id?\ 372}# #{pat\ 3625}#)
                                              (and-map
                                                (lambda (#{x\ 3629}#)
                                                  (not (#{free-id=?\ 431}#
                                                         #{pat\ 3625}#
                                                         #{x\ 3629}#)))
                                                (cons '#(syntax-object
                                                         ...
                                                         ((top)
                                                          #(ribcage
                                                            #(pat exp)
                                                            #((top) (top))
                                                            #("i3623" "i3624"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x
                                                              keys
                                                              clauses
                                                              r
                                                              mod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i3612"
                                                              "i3613"
                                                              "i3614"
                                                              "i3615"
                                                              "i3616"))
                                                          #(ribcage
                                                            (gen-syntax-case
                                                              gen-clause
                                                              build-dispatch-call
                                                              convert-pattern)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i3605"
                                                             "i3603"
                                                             "i3601"
                                                             "i3599"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              chi-lambda-case
                                                              lambda*-formals
                                                              chi-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              chi-void
                                                              eval-local-transformer
                                                              chi-local-syntax
                                                              chi-body
                                                              chi-macro
                                                              chi-application
                                                              chi-expr
                                                              chi
                                                              chi-top
                                                              syntax-type
                                                              chi-when-list
                                                              chi-install-global
                                                              chi-top-sequence
                                                              chi-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              maybe-name-value!
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-sequence
                                                              make-application
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i486"
                                                             "i484"
                                                             "i482"
                                                             "i480"
                                                             "i478"
                                                             "i476"
                                                             "i474"
                                                             "i472"
                                                             "i470"
                                                             "i468"
                                                             "i466"
                                                             "i464"
                                                             "i462"
                                                             "i460"
                                                             "i458"
                                                             "i456"
                                                             "i454"
                                                             "i452"
                                                             "i450"
                                                             "i448"
                                                             "i446"
                                                             "i444"
                                                             "i442"
                                                             "i440"
                                                             "i438"
                                                             "i436"
                                                             "i434"
                                                             "i432"
                                                             "i430"
                                                             "i428"
                                                             "i426"
                                                             "i424"
                                                             "i422"
                                                             "i420"
                                                             "i418"
                                                             "i416"
                                                             "i415"
                                                             "i414"
                                                             "i412"
                                                             "i411"
                                                             "i410"
                                                             "i409"
                                                             "i408"
                                                             "i406"
                                                             "i404"
                                                             "i402"
                                                             "i400"
                                                             "i398"
                                                             "i396"
                                                             "i394"
                                                             "i392"
                                                             "i389"
                                                             "i387"
                                                             "i386"
                                                             "i385"
                                                             "i384"
                                                             "i383"
                                                             "i382"
                                                             "i380"
                                                             "i378"
                                                             "i376"
                                                             "i374"
                                                             "i373"
                                                             "i371"
                                                             "i369"
                                                             "i367"
                                                             "i365"
                                                             "i363"
                                                             "i361"
                                                             "i359"
                                                             "i358"
                                                             "i356"
                                                             "i354"
                                                             "i353"
                                                             "i352"
                                                             "i350"
                                                             "i349"
                                                             "i347"
                                                             "i345"
                                                             "i343"
                                                             "i341"
                                                             "i339"
                                                             "i337"
                                                             "i335"
                                                             "i333"
                                                             "i331"
                                                             "i329"
                                                             "i327"
                                                             "i325"
                                                             "i323"
                                                             "i321"
                                                             "i319"
                                                             "i317"
                                                             "i315"
                                                             "i313"
                                                             "i311"
                                                             "i309"
                                                             "i307"
                                                             "i305"
                                                             "i303"
                                                             "i301"
                                                             "i299"
                                                             "i297"
                                                             "i295"
                                                             "i293"
                                                             "i291"
                                                             "i289"
                                                             "i287"
                                                             "i285"
                                                             "i284"
                                                             "i282"
                                                             "i280"
                                                             "i278"
                                                             "i276"
                                                             "i274"
                                                             "i272"
                                                             "i270"
                                                             "i268"
                                                             "i266"
                                                             "i263"
                                                             "i261"
                                                             "i259"
                                                             "i257"
                                                             "i255"
                                                             "i253"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i245"
                                                             "i243"
                                                             "i241"
                                                             "i239"
                                                             "i237"
                                                             "i235"
                                                             "i233"
                                                             "i231"
                                                             "i229"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors
                                                              and-map*)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i23"
                                                             "i22"
                                                             "i21"
                                                             "i19")))
                                                         (hygiene guile))
                                                      #{keys\ 3608}#))
                                              #f)
                                          (let ((#{labels\ 3633}#
                                                  (list (#{gen-label\ 388}#)))
                                                (#{var\ 3634}#
                                                  (#{gen-var\ 485}#
                                                    #{pat\ 3625}#)))
                                            (#{build-application\ 294}#
                                              #f
                                              (#{build-simple-lambda\ 314}#
                                                #f
                                                (list (syntax->datum
                                                        #{pat\ 3625}#))
                                                #f
                                                (list #{var\ 3634}#)
                                                '()
                                                (#{chi\ 457}#
                                                  #{exp\ 3626}#
                                                  (#{extend-env\ 360}#
                                                    #{labels\ 3633}#
                                                    (list (cons 'syntax
                                                                (cons #{var\ 3634}#
                                                                      0)))
                                                    #{r\ 3610}#)
                                                  (#{make-binding-wrap\ 419}#
                                                    (list #{pat\ 3625}#)
                                                    #{labels\ 3633}#
                                                    '(()))
                                                  #{mod\ 3611}#))
                                              (list #{x\ 3607}#)))
                                          (#{gen-clause\ 3604}#
                                            #{x\ 3607}#
                                            #{keys\ 3608}#
                                            (cdr #{clauses\ 3609}#)
                                            #{r\ 3610}#
                                            #{pat\ 3625}#
                                            #t
                                            #{exp\ 3626}#
                                            #{mod\ 3611}#)))
                                      #{tmp\ 3622}#)
                               ((lambda (#{tmp\ 3640}#)
                                  (if #{tmp\ 3640}#
                                    (apply (lambda (#{pat\ 3644}#
                                                    #{fender\ 3645}#
                                                    #{exp\ 3646}#)
                                             (#{gen-clause\ 3604}#
                                               #{x\ 3607}#
                                               #{keys\ 3608}#
                                               (cdr #{clauses\ 3609}#)
                                               #{r\ 3610}#
                                               #{pat\ 3644}#
                                               #{fender\ 3645}#
                                               #{exp\ 3646}#
                                               #{mod\ 3611}#))
                                           #{tmp\ 3640}#)
                                    ((lambda (#{_\ 3648}#)
                                       (syntax-violation
                                         'syntax-case
                                         "invalid clause"
                                         (car #{clauses\ 3609}#)))
                                     #{tmp\ 3621}#)))
                                ($sc-dispatch
                                  #{tmp\ 3621}#
                                  '(any any any)))))
                           ($sc-dispatch #{tmp\ 3621}# (quote (any any)))))
                        (car #{clauses\ 3609}#)))))
                 (#{gen-clause\ 3604}#
                   (lambda (#{x\ 3649}#
                            #{keys\ 3650}#
                            #{clauses\ 3651}#
                            #{r\ 3652}#
                            #{pat\ 3653}#
                            #{fender\ 3654}#
                            #{exp\ 3655}#
                            #{mod\ 3656}#)
                     (call-with-values
                       (lambda ()
                         (#{convert-pattern\ 3600}#
                           #{pat\ 3653}#
                           #{keys\ 3650}#))
                       (lambda (#{p\ 3665}# #{pvars\ 3666}#)
                         (if (not (#{distinct-bound-ids?\ 437}#
                                    (map car #{pvars\ 3666}#)))
                           (syntax-violation
                             'syntax-case
                             "duplicate pattern variable"
                             #{pat\ 3653}#)
                           (if (not (and-map
                                      (lambda (#{x\ 3673}#)
                                        (not (#{ellipsis?\ 473}#
                                               (car #{x\ 3673}#))))
                                      #{pvars\ 3666}#))
                             (syntax-violation
                               'syntax-case
                               "misplaced ellipsis"
                               #{pat\ 3653}#)
                             (let ((#{y\ 3677}#
                                     (#{gen-var\ 485}# (quote tmp))))
                               (#{build-application\ 294}#
                                 #f
                                 (#{build-simple-lambda\ 314}#
                                   #f
                                   (list (quote tmp))
                                   #f
                                   (list #{y\ 3677}#)
                                   '()
                                   (let ((#{y\ 3681}#
                                           (#{build-lexical-reference\ 300}#
                                             'value
                                             #f
                                             'tmp
                                             #{y\ 3677}#)))
                                     (#{build-conditional\ 296}#
                                       #f
                                       ((lambda (#{tmp\ 3684}#)
                                          ((lambda (#{tmp\ 3685}#)
                                             (if #{tmp\ 3685}#
                                               (apply (lambda () #{y\ 3681}#)
                                                      #{tmp\ 3685}#)
                                               ((lambda (#{_\ 3687}#)
                                                  (#{build-conditional\ 296}#
                                                    #f
                                                    #{y\ 3681}#
                                                    (#{build-dispatch-call\ 3602}#
                                                      #{pvars\ 3666}#
                                                      #{fender\ 3654}#
                                                      #{y\ 3681}#
                                                      #{r\ 3652}#
                                                      #{mod\ 3656}#)
                                                    (#{build-data\ 322}#
                                                      #f
                                                      #f)))
                                                #{tmp\ 3684}#)))
                                           ($sc-dispatch
                                             #{tmp\ 3684}#
                                             '#(atom #t))))
                                        #{fender\ 3654}#)
                                       (#{build-dispatch-call\ 3602}#
                                         #{pvars\ 3666}#
                                         #{exp\ 3655}#
                                         #{y\ 3681}#
                                         #{r\ 3652}#
                                         #{mod\ 3656}#)
                                       (#{gen-syntax-case\ 3606}#
                                         #{x\ 3649}#
                                         #{keys\ 3650}#
                                         #{clauses\ 3651}#
                                         #{r\ 3652}#
                                         #{mod\ 3656}#))))
                                 (list (if (eq? #{p\ 3665}# (quote any))
                                         (#{build-application\ 294}#
                                           #f
                                           (#{build-primref\ 320}#
                                             #f
                                             'list)
                                           (list #{x\ 3649}#))
                                         (#{build-application\ 294}#
                                           #f
                                           (#{build-primref\ 320}#
                                             #f
                                             '$sc-dispatch)
                                           (list #{x\ 3649}#
                                                 (#{build-data\ 322}#
                                                   #f
                                                   #{p\ 3665}#)))))))))))))
                 (#{build-dispatch-call\ 3602}#
                   (lambda (#{pvars\ 3695}#
                            #{exp\ 3696}#
                            #{y\ 3697}#
                            #{r\ 3698}#
                            #{mod\ 3699}#)
                     (let ((#{ids\ 3707}# (map car #{pvars\ 3695}#))
                           (#{levels\ 3708}# (map cdr #{pvars\ 3695}#)))
                       (let ((#{labels\ 3711}#
                               (#{gen-labels\ 390}# #{ids\ 3707}#))
                             (#{new-vars\ 3712}#
                               (map #{gen-var\ 485}# #{ids\ 3707}#)))
                         (#{build-application\ 294}#
                           #f
                           (#{build-primref\ 320}# #f (quote apply))
                           (list (#{build-simple-lambda\ 314}#
                                   #f
                                   (map syntax->datum #{ids\ 3707}#)
                                   #f
                                   #{new-vars\ 3712}#
                                   '()
                                   (#{chi\ 457}#
                                     #{exp\ 3696}#
                                     (#{extend-env\ 360}#
                                       #{labels\ 3711}#
                                       (map (lambda (#{var\ 3716}#
                                                     #{level\ 3717}#)
                                              (cons 'syntax
                                                    (cons #{var\ 3716}#
                                                          #{level\ 3717}#)))
                                            #{new-vars\ 3712}#
                                            (map cdr #{pvars\ 3695}#))
                                       #{r\ 3698}#)
                                     (#{make-binding-wrap\ 419}#
                                       #{ids\ 3707}#
                                       #{labels\ 3711}#
                                       '(()))
                                     #{mod\ 3699}#))
                                 #{y\ 3697}#))))))
                 (#{convert-pattern\ 3600}#
                   (lambda (#{pattern\ 3723}# #{keys\ 3724}#)
                     (letrec ((#{cvt\ 3730}#
                                (lambda (#{p\ 3731}# #{n\ 3732}# #{ids\ 3733}#)
                                  (if (#{id?\ 372}# #{p\ 3731}#)
                                    (if (#{bound-id-member?\ 439}#
                                          #{p\ 3731}#
                                          #{keys\ 3724}#)
                                      (values
                                        (vector (quote free-id) #{p\ 3731}#)
                                        #{ids\ 3733}#)
                                      (values
                                        'any
                                        (cons (cons #{p\ 3731}# #{n\ 3732}#)
                                              #{ids\ 3733}#)))
                                    ((lambda (#{tmp\ 3737}#)
                                       ((lambda (#{tmp\ 3738}#)
                                          (if (if #{tmp\ 3738}#
                                                (apply (lambda (#{x\ 3741}#
                                                                #{dots\ 3742}#)
                                                         (#{ellipsis?\ 473}#
                                                           #{dots\ 3742}#))
                                                       #{tmp\ 3738}#)
                                                #f)
                                            (apply (lambda (#{x\ 3745}#
                                                            #{dots\ 3746}#)
                                                     (call-with-values
                                                       (lambda ()
                                                         (#{cvt\ 3730}#
                                                           #{x\ 3745}#
                                                           (#{fx+\ 273}#
                                                             #{n\ 3732}#
                                                             1)
                                                           #{ids\ 3733}#))
                                                       (lambda (#{p\ 3747}#
                                                                #{ids\ 3748}#)
                                                         (values
                                                           (if (eq? #{p\ 3747}#
                                                                    'any)
                                                             'each-any
                                                             (vector
                                                               'each
                                                               #{p\ 3747}#))
                                                           #{ids\ 3748}#))))
                                                   #{tmp\ 3738}#)
                                            ((lambda (#{tmp\ 3751}#)
                                               (if (if #{tmp\ 3751}#
                                                     (apply (lambda (#{x\ 3755}#
                                                                     #{dots\ 3756}#
                                                                     #{ys\ 3757}#)
                                                              (#{ellipsis?\ 473}#
                                                                #{dots\ 3756}#))
                                                            #{tmp\ 3751}#)
                                                     #f)
                                                 (apply (lambda (#{x\ 3761}#
                                                                 #{dots\ 3762}#
                                                                 #{ys\ 3763}#)
                                                          (call-with-values
                                                            (lambda ()
                                                              (#{cvt*\ 3728}#
                                                                #{ys\ 3763}#
                                                                #{n\ 3732}#
                                                                #{ids\ 3733}#))
                                                            (lambda (#{ys\ 3765}#
                                                                     #{ids\ 3766}#)
                                                              (call-with-values
                                                                (lambda ()
                                                                  (#{cvt\ 3730}#
                                                                    #{x\ 3761}#
                                                                    (+ #{n\ 3732}#
                                                                       1)
                                                                    #{ids\ 3766}#))
                                                                (lambda (#{x\ 3769}#
                                                                         #{ids\ 3770}#)
                                                                  (values
                                                                    (list->vector
                                                                      (cons 'each+
                                                                            (cons #{x\ 3769}#
                                                                                  (cons (reverse
                                                                                          #{ys\ 3765}#)
                                                                                        '(())))))
                                                                    #{ids\ 3770}#))))))
                                                        #{tmp\ 3751}#)
                                                 ((lambda (#{tmp\ 3774}#)
                                                    (if #{tmp\ 3774}#
                                                      (apply (lambda (#{x\ 3777}#
                                                                      #{y\ 3778}#)
                                                               (call-with-values
                                                                 (lambda ()
                                                                   (#{cvt\ 3730}#
                                                                     #{y\ 3778}#
                                                                     #{n\ 3732}#
                                                                     #{ids\ 3733}#))
                                                                 (lambda (#{y\ 3779}#
                                                                          #{ids\ 3780}#)
                                                                   (call-with-values
                                                                     (lambda ()
                                                                       (#{cvt\ 3730}#
                                                                         #{x\ 3777}#
                                                                         #{n\ 3732}#
                                                                         #{ids\ 3780}#))
                                                                     (lambda (#{x\ 3783}#
                                                                              #{ids\ 3784}#)
                                                                       (values
                                                                         (cons #{x\ 3783}#
                                                                               #{y\ 3779}#)
                                                                         #{ids\ 3784}#))))))
                                                             #{tmp\ 3774}#)
                                                      ((lambda (#{tmp\ 3787}#)
                                                         (if #{tmp\ 3787}#
                                                           (apply (lambda ()
                                                                    (values
                                                                      '()
                                                                      #{ids\ 3733}#))
                                                                  #{tmp\ 3787}#)
                                                           ((lambda (#{tmp\ 3788}#)
                                                              (if #{tmp\ 3788}#
                                                                (apply (lambda (#{x\ 3790}#)
                                                                         (call-with-values
                                                                           (lambda ()
                                                                             (#{cvt\ 3730}#
                                                                               #{x\ 3790}#
                                                                               #{n\ 3732}#
                                                                               #{ids\ 3733}#))
                                                                           (lambda (#{p\ 3792}#
                                                                                    #{ids\ 3793}#)
                                                                             (values
                                                                               (vector
                                                                                 'vector
                                                                                 #{p\ 3792}#)
                                                                               #{ids\ 3793}#))))
                                                                       #{tmp\ 3788}#)
                                                                ((lambda (#{x\ 3797}#)
                                                                   (values
                                                                     (vector
                                                                       'atom
                                                                       (#{strip\ 483}#
                                                                         #{p\ 3731}#
                                                                         '(())))
                                                                     #{ids\ 3733}#))
                                                                 #{tmp\ 3737}#)))
                                                            ($sc-dispatch
                                                              #{tmp\ 3737}#
                                                              '#(vector
                                                                 each-any)))))
                                                       ($sc-dispatch
                                                         #{tmp\ 3737}#
                                                         '()))))
                                                  ($sc-dispatch
                                                    #{tmp\ 3737}#
                                                    '(any . any)))))
                                             ($sc-dispatch
                                               #{tmp\ 3737}#
                                               '(any any . each-any)))))
                                        ($sc-dispatch
                                          #{tmp\ 3737}#
                                          '(any any))))
                                     #{p\ 3731}#))))
                              (#{cvt*\ 3728}#
                                (lambda (#{p*\ 3799}#
                                         #{n\ 3800}#
                                         #{ids\ 3801}#)
                                  (if (null? #{p*\ 3799}#)
                                    (values (quote ()) #{ids\ 3801}#)
                                    (call-with-values
                                      (lambda ()
                                        (#{cvt*\ 3728}#
                                          (cdr #{p*\ 3799}#)
                                          #{n\ 3800}#
                                          #{ids\ 3801}#))
                                      (lambda (#{y\ 3805}# #{ids\ 3806}#)
                                        (call-with-values
                                          (lambda ()
                                            (#{cvt\ 3730}#
                                              (car #{p*\ 3799}#)
                                              #{n\ 3800}#
                                              #{ids\ 3806}#))
                                          (lambda (#{x\ 3809}# #{ids\ 3810}#)
                                            (values
                                              (cons #{x\ 3809}# #{y\ 3805}#)
                                              #{ids\ 3810}#)))))))))
                       (#{cvt\ 3730}# #{pattern\ 3723}# 0 (quote ()))))))
          (lambda (#{e\ 3813}#
                   #{r\ 3814}#
                   #{w\ 3815}#
                   #{s\ 3816}#
                   #{mod\ 3817}#)
            (let ((#{e\ 3824}#
                    (#{source-wrap\ 443}#
                      #{e\ 3813}#
                      #{w\ 3815}#
                      #{s\ 3816}#
                      #{mod\ 3817}#)))
              ((lambda (#{tmp\ 3825}#)
                 ((lambda (#{tmp\ 3826}#)
                    (if #{tmp\ 3826}#
                      (apply (lambda (#{_\ 3831}#
                                      #{val\ 3832}#
                                      #{key\ 3833}#
                                      #{m\ 3834}#)
                               (if (and-map
                                     (lambda (#{x\ 3835}#)
                                       (if (#{id?\ 372}# #{x\ 3835}#)
                                         (not (#{ellipsis?\ 473}# #{x\ 3835}#))
                                         #f))
                                     #{key\ 3833}#)
                                 (let ((#{x\ 3841}#
                                         (#{gen-var\ 485}# (quote tmp))))
                                   (#{build-application\ 294}#
                                     #{s\ 3816}#
                                     (#{build-simple-lambda\ 314}#
                                       #f
                                       (list (quote tmp))
                                       #f
                                       (list #{x\ 3841}#)
                                       '()
                                       (#{gen-syntax-case\ 3606}#
                                         (#{build-lexical-reference\ 300}#
                                           'value
                                           #f
                                           'tmp
                                           #{x\ 3841}#)
                                         #{key\ 3833}#
                                         #{m\ 3834}#
                                         #{r\ 3814}#
                                         #{mod\ 3817}#))
                                     (list (#{chi\ 457}#
                                             #{val\ 3832}#
                                             #{r\ 3814}#
                                             '(())
                                             #{mod\ 3817}#))))
                                 (syntax-violation
                                   'syntax-case
                                   "invalid literals list"
                                   #{e\ 3824}#)))
                             #{tmp\ 3826}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp\ 3825}#)))
                  ($sc-dispatch
                    #{tmp\ 3825}#
                    '(any any each-any . each-any))))
               #{e\ 3824}#)))))
      (set! macroexpand
        (lambda*
          (#{x\ 3847}#
            #:optional
            (#{m\ 3849}# (quote e))
            (#{esew\ 3851}# (quote (eval))))
          (#{chi-top\ 455}#
            #{x\ 3847}#
            '()
            '((top))
            #{m\ 3849}#
            #{esew\ 3851}#
            (cons 'hygiene
                  (module-name (current-module))))))
      (set! identifier?
        (lambda (#{x\ 3855}#)
          (#{nonsymbol-id?\ 370}# #{x\ 3855}#)))
      (set! datum->syntax
        (lambda (#{id\ 3857}# #{datum\ 3858}#)
          (#{make-syntax-object\ 334}#
            #{datum\ 3858}#
            (#{syntax-object-wrap\ 340}# #{id\ 3857}#)
            (#{syntax-object-module\ 342}# #{id\ 3857}#))))
      (set! syntax->datum
        (lambda (#{x\ 3861}#)
          (#{strip\ 483}# #{x\ 3861}# (quote (())))))
      (set! generate-temporaries
        (lambda (#{ls\ 3864}#)
          (begin
            (let ((#{x\ 3868}# #{ls\ 3864}#))
              (if (not (list? #{x\ 3868}#))
                (syntax-violation
                  'generate-temporaries
                  "invalid argument"
                  #{x\ 3868}#)))
            (map (lambda (#{x\ 3869}#)
                   (#{wrap\ 441}# (gensym) (quote ((top))) #f))
                 #{ls\ 3864}#))))
      (set! free-identifier=?
        (lambda (#{x\ 3873}# #{y\ 3874}#)
          (begin
            (let ((#{x\ 3879}# #{x\ 3873}#))
              (if (not (#{nonsymbol-id?\ 370}# #{x\ 3879}#))
                (syntax-violation
                  'free-identifier=?
                  "invalid argument"
                  #{x\ 3879}#)))
            (let ((#{x\ 3882}# #{y\ 3874}#))
              (if (not (#{nonsymbol-id?\ 370}# #{x\ 3882}#))
                (syntax-violation
                  'free-identifier=?
                  "invalid argument"
                  #{x\ 3882}#)))
            (#{free-id=?\ 431}# #{x\ 3873}# #{y\ 3874}#))))
      (set! bound-identifier=?
        (lambda (#{x\ 3883}# #{y\ 3884}#)
          (begin
            (let ((#{x\ 3889}# #{x\ 3883}#))
              (if (not (#{nonsymbol-id?\ 370}# #{x\ 3889}#))
                (syntax-violation
                  'bound-identifier=?
                  "invalid argument"
                  #{x\ 3889}#)))
            (let ((#{x\ 3892}# #{y\ 3884}#))
              (if (not (#{nonsymbol-id?\ 370}# #{x\ 3892}#))
                (syntax-violation
                  'bound-identifier=?
                  "invalid argument"
                  #{x\ 3892}#)))
            (#{bound-id=?\ 433}# #{x\ 3883}# #{y\ 3884}#))))
      (set! syntax-violation
        (lambda (#{who\ 3893}#
                 #{message\ 3894}#
                 #{form\ 3895}#
                 .
                 #{subform\ 3896}#)
          (begin
            (let ((#{x\ 3903}# #{who\ 3893}#))
              (if (not ((lambda (#{x\ 3904}#)
                          (let ((#{t\ 3908}# (not #{x\ 3904}#)))
                            (if #{t\ 3908}#
                              #{t\ 3908}#
                              (let ((#{t\ 3911}# (string? #{x\ 3904}#)))
                                (if #{t\ 3911}#
                                  #{t\ 3911}#
                                  (symbol? #{x\ 3904}#))))))
                        #{x\ 3903}#))
                (syntax-violation
                  'syntax-violation
                  "invalid argument"
                  #{x\ 3903}#)))
            (let ((#{x\ 3915}# #{message\ 3894}#))
              (if (not (string? #{x\ 3915}#))
                (syntax-violation
                  'syntax-violation
                  "invalid argument"
                  #{x\ 3915}#)))
            (scm-error
              'syntax-error
              'macroexpand
              (string-append
                (if #{who\ 3893}# "~a: " "")
                "~a "
                (if (null? #{subform\ 3896}#)
                  "in ~a"
                  "in subform `~s' of `~s'"))
              (let ((#{tail\ 3917}#
                      (cons #{message\ 3894}#
                            (map (lambda (#{x\ 3918}#)
                                   (#{strip\ 483}# #{x\ 3918}# (quote (()))))
                                 (append
                                   #{subform\ 3896}#
                                   (list #{form\ 3895}#))))))
                (if #{who\ 3893}#
                  (cons #{who\ 3893}# #{tail\ 3917}#)
                  #{tail\ 3917}#))
              #f))))
      (letrec ((#{match\ 3934}#
                 (lambda (#{e\ 3935}#
                          #{p\ 3936}#
                          #{w\ 3937}#
                          #{r\ 3938}#
                          #{mod\ 3939}#)
                   (if (not #{r\ 3938}#)
                     #f
                     (if (eq? #{p\ 3936}# (quote any))
                       (cons (#{wrap\ 441}#
                               #{e\ 3935}#
                               #{w\ 3937}#
                               #{mod\ 3939}#)
                             #{r\ 3938}#)
                       (if (#{syntax-object?\ 336}# #{e\ 3935}#)
                         (#{match*\ 3932}#
                           (#{syntax-object-expression\ 338}# #{e\ 3935}#)
                           #{p\ 3936}#
                           (#{join-wraps\ 423}#
                             #{w\ 3937}#
                             (#{syntax-object-wrap\ 340}# #{e\ 3935}#))
                           #{r\ 3938}#
                           (#{syntax-object-module\ 342}# #{e\ 3935}#))
                         (#{match*\ 3932}#
                           #{e\ 3935}#
                           #{p\ 3936}#
                           #{w\ 3937}#
                           #{r\ 3938}#
                           #{mod\ 3939}#))))))
               (#{match*\ 3932}#
                 (lambda (#{e\ 3952}#
                          #{p\ 3953}#
                          #{w\ 3954}#
                          #{r\ 3955}#
                          #{mod\ 3956}#)
                   (if (null? #{p\ 3953}#)
                     (if (null? #{e\ 3952}#) #{r\ 3955}# #f)
                     (if (pair? #{p\ 3953}#)
                       (if (pair? #{e\ 3952}#)
                         (#{match\ 3934}#
                           (car #{e\ 3952}#)
                           (car #{p\ 3953}#)
                           #{w\ 3954}#
                           (#{match\ 3934}#
                             (cdr #{e\ 3952}#)
                             (cdr #{p\ 3953}#)
                             #{w\ 3954}#
                             #{r\ 3955}#
                             #{mod\ 3956}#)
                           #{mod\ 3956}#)
                         #f)
                       (if (eq? #{p\ 3953}# (quote each-any))
                         (let ((#{l\ 3973}#
                                 (#{match-each-any\ 3926}#
                                   #{e\ 3952}#
                                   #{w\ 3954}#
                                   #{mod\ 3956}#)))
                           (if #{l\ 3973}#
                             (cons #{l\ 3973}# #{r\ 3955}#)
                             #f))
                         (let ((#{atom-key\ 3979}# (vector-ref #{p\ 3953}# 0)))
                           (if (memv #{atom-key\ 3979}# (quote (each)))
                             (if (null? #{e\ 3952}#)
                               (#{match-empty\ 3928}#
                                 (vector-ref #{p\ 3953}# 1)
                                 #{r\ 3955}#)
                               (let ((#{l\ 3982}#
                                       (#{match-each\ 3922}#
                                         #{e\ 3952}#
                                         (vector-ref #{p\ 3953}# 1)
                                         #{w\ 3954}#
                                         #{mod\ 3956}#)))
                                 (if #{l\ 3982}#
                                   (letrec ((#{collect\ 3987}#
                                              (lambda (#{l\ 3988}#)
                                                (if (null? (car #{l\ 3988}#))
                                                  #{r\ 3955}#
                                                  (cons (map car #{l\ 3988}#)
                                                        (#{collect\ 3987}#
                                                          (map cdr
                                                               #{l\ 3988}#)))))))
                                     (#{collect\ 3987}# #{l\ 3982}#))
                                   #f)))
                             (if (memv #{atom-key\ 3979}# (quote (each+)))
                               (call-with-values
                                 (lambda ()
                                   (#{match-each+\ 3924}#
                                     #{e\ 3952}#
                                     (vector-ref #{p\ 3953}# 1)
                                     (vector-ref #{p\ 3953}# 2)
                                     (vector-ref #{p\ 3953}# 3)
                                     #{w\ 3954}#
                                     #{r\ 3955}#
                                     #{mod\ 3956}#))
                                 (lambda (#{xr*\ 3990}#
                                          #{y-pat\ 3991}#
                                          #{r\ 3992}#)
                                   (if #{r\ 3992}#
                                     (if (null? #{y-pat\ 3991}#)
                                       (if (null? #{xr*\ 3990}#)
                                         (#{match-empty\ 3928}#
                                           (vector-ref #{p\ 3953}# 1)
                                           #{r\ 3992}#)
                                         (#{combine\ 3930}#
                                           #{xr*\ 3990}#
                                           #{r\ 3992}#))
                                       #f)
                                     #f)))
                               (if (memv #{atom-key\ 3979}# (quote (free-id)))
                                 (if (#{id?\ 372}# #{e\ 3952}#)
                                   (if (#{free-id=?\ 431}#
                                         (#{wrap\ 441}#
                                           #{e\ 3952}#
                                           #{w\ 3954}#
                                           #{mod\ 3956}#)
                                         (vector-ref #{p\ 3953}# 1))
                                     #{r\ 3955}#
                                     #f)
                                   #f)
                                 (if (memv #{atom-key\ 3979}# (quote (atom)))
                                   (if (equal?
                                         (vector-ref #{p\ 3953}# 1)
                                         (#{strip\ 483}#
                                           #{e\ 3952}#
                                           #{w\ 3954}#))
                                     #{r\ 3955}#
                                     #f)
                                   (if (memv #{atom-key\ 3979}#
                                             '(vector))
                                     (if (vector? #{e\ 3952}#)
                                       (#{match\ 3934}#
                                         (vector->list #{e\ 3952}#)
                                         (vector-ref #{p\ 3953}# 1)
                                         #{w\ 3954}#
                                         #{r\ 3955}#
                                         #{mod\ 3956}#)
                                       #f))))))))))))
               (#{combine\ 3930}#
                 (lambda (#{r*\ 4009}# #{r\ 4010}#)
                   (if (null? (car #{r*\ 4009}#))
                     #{r\ 4010}#
                     (cons (map car #{r*\ 4009}#)
                           (#{combine\ 3930}#
                             (map cdr #{r*\ 4009}#)
                             #{r\ 4010}#)))))
               (#{match-empty\ 3928}#
                 (lambda (#{p\ 4013}# #{r\ 4014}#)
                   (if (null? #{p\ 4013}#)
                     #{r\ 4014}#
                     (if (eq? #{p\ 4013}# (quote any))
                       (cons (quote ()) #{r\ 4014}#)
                       (if (pair? #{p\ 4013}#)
                         (#{match-empty\ 3928}#
                           (car #{p\ 4013}#)
                           (#{match-empty\ 3928}#
                             (cdr #{p\ 4013}#)
                             #{r\ 4014}#))
                         (if (eq? #{p\ 4013}# (quote each-any))
                           (cons (quote ()) #{r\ 4014}#)
                           (let ((#{atom-key\ 4028}#
                                   (vector-ref #{p\ 4013}# 0)))
                             (if (memv #{atom-key\ 4028}# (quote (each)))
                               (#{match-empty\ 3928}#
                                 (vector-ref #{p\ 4013}# 1)
                                 #{r\ 4014}#)
                               (if (memv #{atom-key\ 4028}# (quote (each+)))
                                 (#{match-empty\ 3928}#
                                   (vector-ref #{p\ 4013}# 1)
                                   (#{match-empty\ 3928}#
                                     (reverse (vector-ref #{p\ 4013}# 2))
                                     (#{match-empty\ 3928}#
                                       (vector-ref #{p\ 4013}# 3)
                                       #{r\ 4014}#)))
                                 (if (memv #{atom-key\ 4028}#
                                           '(free-id atom))
                                   #{r\ 4014}#
                                   (if (memv #{atom-key\ 4028}#
                                             '(vector))
                                     (#{match-empty\ 3928}#
                                       (vector-ref #{p\ 4013}# 1)
                                       #{r\ 4014}#))))))))))))
               (#{match-each-any\ 3926}#
                 (lambda (#{e\ 4033}# #{w\ 4034}# #{mod\ 4035}#)
                   (if (pair? #{e\ 4033}#)
                     (let ((#{l\ 4042}#
                             (#{match-each-any\ 3926}#
                               (cdr #{e\ 4033}#)
                               #{w\ 4034}#
                               #{mod\ 4035}#)))
                       (if #{l\ 4042}#
                         (cons (#{wrap\ 441}#
                                 (car #{e\ 4033}#)
                                 #{w\ 4034}#
                                 #{mod\ 4035}#)
                               #{l\ 4042}#)
                         #f))
                     (if (null? #{e\ 4033}#)
                       '()
                       (if (#{syntax-object?\ 336}# #{e\ 4033}#)
                         (#{match-each-any\ 3926}#
                           (#{syntax-object-expression\ 338}# #{e\ 4033}#)
                           (#{join-wraps\ 423}#
                             #{w\ 4034}#
                             (#{syntax-object-wrap\ 340}# #{e\ 4033}#))
                           #{mod\ 4035}#)
                         #f)))))
               (#{match-each+\ 3924}#
                 (lambda (#{e\ 4050}#
                          #{x-pat\ 4051}#
                          #{y-pat\ 4052}#
                          #{z-pat\ 4053}#
                          #{w\ 4054}#
                          #{r\ 4055}#
                          #{mod\ 4056}#)
                   (letrec ((#{f\ 4067}#
                              (lambda (#{e\ 4068}# #{w\ 4069}#)
                                (if (pair? #{e\ 4068}#)
                                  (call-with-values
                                    (lambda ()
                                      (#{f\ 4067}#
                                        (cdr #{e\ 4068}#)
                                        #{w\ 4069}#))
                                    (lambda (#{xr*\ 4072}#
                                             #{y-pat\ 4073}#
                                             #{r\ 4074}#)
                                      (if #{r\ 4074}#
                                        (if (null? #{y-pat\ 4073}#)
                                          (let ((#{xr\ 4079}#
                                                  (#{match\ 3934}#
                                                    (car #{e\ 4068}#)
                                                    #{x-pat\ 4051}#
                                                    #{w\ 4069}#
                                                    '()
                                                    #{mod\ 4056}#)))
                                            (if #{xr\ 4079}#
                                              (values
                                                (cons #{xr\ 4079}#
                                                      #{xr*\ 4072}#)
                                                #{y-pat\ 4073}#
                                                #{r\ 4074}#)
                                              (values #f #f #f)))
                                          (values
                                            '()
                                            (cdr #{y-pat\ 4073}#)
                                            (#{match\ 3934}#
                                              (car #{e\ 4068}#)
                                              (car #{y-pat\ 4073}#)
                                              #{w\ 4069}#
                                              #{r\ 4074}#
                                              #{mod\ 4056}#)))
                                        (values #f #f #f))))
                                  (if (#{syntax-object?\ 336}# #{e\ 4068}#)
                                    (#{f\ 4067}#
                                      (#{syntax-object-expression\ 338}#
                                        #{e\ 4068}#)
                                      (#{join-wraps\ 423}#
                                        #{w\ 4069}#
                                        #{e\ 4068}#))
                                    (values
                                      '()
                                      #{y-pat\ 4052}#
                                      (#{match\ 3934}#
                                        #{e\ 4068}#
                                        #{z-pat\ 4053}#
                                        #{w\ 4069}#
                                        #{r\ 4055}#
                                        #{mod\ 4056}#)))))))
                     (#{f\ 4067}# #{e\ 4050}# #{w\ 4054}#))))
               (#{match-each\ 3922}#
                 (lambda (#{e\ 4083}#
                          #{p\ 4084}#
                          #{w\ 4085}#
                          #{mod\ 4086}#)
                   (if (pair? #{e\ 4083}#)
                     (let ((#{first\ 4094}#
                             (#{match\ 3934}#
                               (car #{e\ 4083}#)
                               #{p\ 4084}#
                               #{w\ 4085}#
                               '()
                               #{mod\ 4086}#)))
                       (if #{first\ 4094}#
                         (let ((#{rest\ 4098}#
                                 (#{match-each\ 3922}#
                                   (cdr #{e\ 4083}#)
                                   #{p\ 4084}#
                                   #{w\ 4085}#
                                   #{mod\ 4086}#)))
                           (if #{rest\ 4098}#
                             (cons #{first\ 4094}# #{rest\ 4098}#)
                             #f))
                         #f))
                     (if (null? #{e\ 4083}#)
                       '()
                       (if (#{syntax-object?\ 336}# #{e\ 4083}#)
                         (#{match-each\ 3922}#
                           (#{syntax-object-expression\ 338}# #{e\ 4083}#)
                           #{p\ 4084}#
                           (#{join-wraps\ 423}#
                             #{w\ 4085}#
                             (#{syntax-object-wrap\ 340}# #{e\ 4083}#))
                           (#{syntax-object-module\ 342}# #{e\ 4083}#))
                         #f))))))
        (set! $sc-dispatch
          (lambda (#{e\ 4106}# #{p\ 4107}#)
            (if (eq? #{p\ 4107}# (quote any))
              (list #{e\ 4106}#)
              (if (#{syntax-object?\ 336}# #{e\ 4106}#)
                (#{match*\ 3932}#
                  (#{syntax-object-expression\ 338}# #{e\ 4106}#)
                  #{p\ 4107}#
                  (#{syntax-object-wrap\ 340}# #{e\ 4106}#)
                  '()
                  (#{syntax-object-module\ 342}# #{e\ 4106}#))
                (#{match*\ 3932}#
                  #{e\ 4106}#
                  #{p\ 4107}#
                  '(())
                  '()
                  #f)))))))))

(define with-syntax
  (make-syntax-transformer
    'with-syntax
    'macro
    (cons (lambda (#{x\ 4116}#)
            ((lambda (#{tmp\ 4118}#)
               ((lambda (#{tmp\ 4119}#)
                  (if #{tmp\ 4119}#
                    (apply (lambda (#{_\ 4123}# #{e1\ 4124}# #{e2\ 4125}#)
                             (cons '#(syntax-object
                                      begin
                                      ((top)
                                       #(ribcage
                                         #(_ e1 e2)
                                         #((top) (top) (top))
                                         #("i4120" "i4121" "i4122"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4117")))
                                      (hygiene guile))
                                   (cons #{e1\ 4124}# #{e2\ 4125}#)))
                           #{tmp\ 4119}#)
                    ((lambda (#{tmp\ 4127}#)
                       (if #{tmp\ 4127}#
                         (apply (lambda (#{_\ 4133}#
                                         #{out\ 4134}#
                                         #{in\ 4135}#
                                         #{e1\ 4136}#
                                         #{e2\ 4137}#)
                                  (list '#(syntax-object
                                           syntax-case
                                           ((top)
                                            #(ribcage
                                              #(_ out in e1 e2)
                                              #((top) (top) (top) (top) (top))
                                              #("i4128"
                                                "i4129"
                                                "i4130"
                                                "i4131"
                                                "i4132"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i4117")))
                                           (hygiene guile))
                                        #{in\ 4135}#
                                        '()
                                        (list #{out\ 4134}#
                                              (cons '#(syntax-object
                                                       begin
                                                       ((top)
                                                        #(ribcage
                                                          #(_ out in e1 e2)
                                                          #((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                          #("i4128"
                                                            "i4129"
                                                            "i4130"
                                                            "i4131"
                                                            "i4132"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i4117")))
                                                       (hygiene guile))
                                                    (cons #{e1\ 4136}#
                                                          #{e2\ 4137}#)))))
                                #{tmp\ 4127}#)
                         ((lambda (#{tmp\ 4139}#)
                            (if #{tmp\ 4139}#
                              (apply (lambda (#{_\ 4145}#
                                              #{out\ 4146}#
                                              #{in\ 4147}#
                                              #{e1\ 4148}#
                                              #{e2\ 4149}#)
                                       (list '#(syntax-object
                                                syntax-case
                                                ((top)
                                                 #(ribcage
                                                   #(_ out in e1 e2)
                                                   #((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                   #("i4140"
                                                     "i4141"
                                                     "i4142"
                                                     "i4143"
                                                     "i4144"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i4117")))
                                                (hygiene guile))
                                             (cons '#(syntax-object
                                                      list
                                                      ((top)
                                                       #(ribcage
                                                         #(_ out in e1 e2)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("i4140"
                                                           "i4141"
                                                           "i4142"
                                                           "i4143"
                                                           "i4144"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i4117")))
                                                      (hygiene guile))
                                                   #{in\ 4147}#)
                                             '()
                                             (list #{out\ 4146}#
                                                   (cons '#(syntax-object
                                                            begin
                                                            ((top)
                                                             #(ribcage
                                                               #(_
                                                                 out
                                                                 in
                                                                 e1
                                                                 e2)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i4140"
                                                                 "i4141"
                                                                 "i4142"
                                                                 "i4143"
                                                                 "i4144"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i4117")))
                                                            (hygiene guile))
                                                         (cons #{e1\ 4148}#
                                                               #{e2\ 4149}#)))))
                                     #{tmp\ 4139}#)
                              (syntax-violation
                                #f
                                "source expression failed to match any pattern"
                                #{tmp\ 4118}#)))
                          ($sc-dispatch
                            #{tmp\ 4118}#
                            '(any #(each (any any)) any . each-any)))))
                     ($sc-dispatch
                       #{tmp\ 4118}#
                       '(any ((any any)) any . each-any)))))
                ($sc-dispatch
                  #{tmp\ 4118}#
                  '(any () any . each-any))))
             #{x\ 4116}#))
          (module-name (current-module)))))

(define syntax-rules
  (make-syntax-transformer
    'syntax-rules
    'macro
    (cons (lambda (#{x\ 4153}#)
            ((lambda (#{tmp\ 4155}#)
               ((lambda (#{tmp\ 4156}#)
                  (if #{tmp\ 4156}#
                    (apply (lambda (#{_\ 4162}#
                                    #{k\ 4163}#
                                    #{keyword\ 4164}#
                                    #{pattern\ 4165}#
                                    #{template\ 4166}#)
                             (list '#(syntax-object
                                      lambda
                                      ((top)
                                       #(ribcage
                                         #(_ k keyword pattern template)
                                         #((top) (top) (top) (top) (top))
                                         #("i4157"
                                           "i4158"
                                           "i4159"
                                           "i4160"
                                           "i4161"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4154")))
                                      (hygiene guile))
                                   '(#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(_ k keyword pattern template)
                                          #((top) (top) (top) (top) (top))
                                          #("i4157"
                                            "i4158"
                                            "i4159"
                                            "i4160"
                                            "i4161"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i4154")))
                                       (hygiene guile)))
                                   (vector
                                     '(#(syntax-object
                                         macro-type
                                         ((top)
                                          #(ribcage
                                            #(_ k keyword pattern template)
                                            #((top) (top) (top) (top) (top))
                                            #("i4157"
                                              "i4158"
                                              "i4159"
                                              "i4160"
                                              "i4161"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i4154")))
                                         (hygiene guile))
                                       .
                                       #(syntax-object
                                         syntax-rules
                                         ((top)
                                          #(ribcage
                                            #(_ k keyword pattern template)
                                            #((top) (top) (top) (top) (top))
                                            #("i4157"
                                              "i4158"
                                              "i4159"
                                              "i4160"
                                              "i4161"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i4154")))
                                         (hygiene guile)))
                                     (cons '#(syntax-object
                                              patterns
                                              ((top)
                                               #(ribcage
                                                 #(_
                                                   k
                                                   keyword
                                                   pattern
                                                   template)
                                                 #((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                 #("i4157"
                                                   "i4158"
                                                   "i4159"
                                                   "i4160"
                                                   "i4161"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i4154")))
                                              (hygiene guile))
                                           #{pattern\ 4165}#))
                                   (cons '#(syntax-object
                                            syntax-case
                                            ((top)
                                             #(ribcage
                                               #(_ k keyword pattern template)
                                               #((top) (top) (top) (top) (top))
                                               #("i4157"
                                                 "i4158"
                                                 "i4159"
                                                 "i4160"
                                                 "i4161"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i4154")))
                                            (hygiene guile))
                                         (cons '#(syntax-object
                                                  x
                                                  ((top)
                                                   #(ribcage
                                                     #(_
                                                       k
                                                       keyword
                                                       pattern
                                                       template)
                                                     #((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                     #("i4157"
                                                       "i4158"
                                                       "i4159"
                                                       "i4160"
                                                       "i4161"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i4154")))
                                                  (hygiene guile))
                                               (cons #{k\ 4163}#
                                                     (map (lambda (#{tmp\ 4170}#
                                                                   #{tmp\ 4169}#)
                                                            (list (cons '#(syntax-object
                                                                           dummy
                                                                           ((top)
                                                                            #(ribcage
                                                                              #(_
                                                                                k
                                                                                keyword
                                                                                pattern
                                                                                template)
                                                                              #((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                              #("i4157"
                                                                                "i4158"
                                                                                "i4159"
                                                                                "i4160"
                                                                                "i4161"))
                                                                            #(ribcage
                                                                              ()
                                                                              ()
                                                                              ())
                                                                            #(ribcage
                                                                              #(x)
                                                                              #((top))
                                                                              #("i4154")))
                                                                           (hygiene
                                                                             guile))
                                                                        #{tmp\ 4169}#)
                                                                  (list '#(syntax-object
                                                                           syntax
                                                                           ((top)
                                                                            #(ribcage
                                                                              #(_
                                                                                k
                                                                                keyword
                                                                                pattern
                                                                                template)
                                                                              #((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                              #("i4157"
                                                                                "i4158"
                                                                                "i4159"
                                                                                "i4160"
                                                                                "i4161"))
                                                                            #(ribcage
                                                                              ()
                                                                              ()
                                                                              ())
                                                                            #(ribcage
                                                                              #(x)
                                                                              #((top))
                                                                              #("i4154")))
                                                                           (hygiene
                                                                             guile))
                                                                        #{tmp\ 4170}#)))
                                                          #{template\ 4166}#
                                                          #{pattern\ 4165}#))))))
                           #{tmp\ 4156}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 4155}#)))
                ($sc-dispatch
                  #{tmp\ 4155}#
                  '(any each-any . #(each ((any . any) any))))))
             #{x\ 4153}#))
          (module-name (current-module)))))

(define let*
  (make-syntax-transformer
    'let*
    'macro
    (cons (lambda (#{x\ 4171}#)
            ((lambda (#{tmp\ 4173}#)
               ((lambda (#{tmp\ 4174}#)
                  (if (if #{tmp\ 4174}#
                        (apply (lambda (#{let*\ 4180}#
                                        #{x\ 4181}#
                                        #{v\ 4182}#
                                        #{e1\ 4183}#
                                        #{e2\ 4184}#)
                                 (and-map identifier? #{x\ 4181}#))
                               #{tmp\ 4174}#)
                        #f)
                    (apply (lambda (#{let*\ 4191}#
                                    #{x\ 4192}#
                                    #{v\ 4193}#
                                    #{e1\ 4194}#
                                    #{e2\ 4195}#)
                             (letrec ((#{f\ 4198}#
                                        (lambda (#{bindings\ 4199}#)
                                          (if (null? #{bindings\ 4199}#)
                                            (cons '#(syntax-object
                                                     let
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(f bindings)
                                                        #((top) (top))
                                                        #("i4196" "i4197"))
                                                      #(ribcage
                                                        #(let* x v e1 e2)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i4186"
                                                          "i4187"
                                                          "i4188"
                                                          "i4189"
                                                          "i4190"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i4172")))
                                                     (hygiene guile))
                                                  (cons '()
                                                        (cons #{e1\ 4194}#
                                                              #{e2\ 4195}#)))
                                            ((lambda (#{tmp\ 4204}#)
                                               ((lambda (#{tmp\ 4205}#)
                                                  (if #{tmp\ 4205}#
                                                    (apply (lambda (#{body\ 4208}#
                                                                    #{binding\ 4209}#)
                                                             (list '#(syntax-object
                                                                      let
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(body
                                                                           binding)
                                                                         #((top)
                                                                           (top))
                                                                         #("i4206"
                                                                           "i4207"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(f
                                                                           bindings)
                                                                         #((top)
                                                                           (top))
                                                                         #("i4196"
                                                                           "i4197"))
                                                                       #(ribcage
                                                                         #(let*
                                                                           x
                                                                           v
                                                                           e1
                                                                           e2)
                                                                         #((top)
                                                                           (top)
                                                                           (top)
                                                                           (top)
                                                                           (top))
                                                                         #("i4186"
                                                                           "i4187"
                                                                           "i4188"
                                                                           "i4189"
                                                                           "i4190"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(x)
                                                                         #((top))
                                                                         #("i4172")))
                                                                      (hygiene
                                                                        guile))
                                                                   (list #{binding\ 4209}#)
                                                                   #{body\ 4208}#))
                                                           #{tmp\ 4205}#)
                                                    (syntax-violation
                                                      #f
                                                      "source expression failed to match any pattern"
                                                      #{tmp\ 4204}#)))
                                                ($sc-dispatch
                                                  #{tmp\ 4204}#
                                                  '(any any))))
                                             (list (#{f\ 4198}#
                                                     (cdr #{bindings\ 4199}#))
                                                   (car #{bindings\ 4199}#)))))))
                               (#{f\ 4198}#
                                 (map list #{x\ 4192}# #{v\ 4193}#))))
                           #{tmp\ 4174}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 4173}#)))
                ($sc-dispatch
                  #{tmp\ 4173}#
                  '(any #(each (any any)) any . each-any))))
             #{x\ 4171}#))
          (module-name (current-module)))))

(define do
  (make-syntax-transformer
    'do
    'macro
    (cons (lambda (#{orig-x\ 4210}#)
            ((lambda (#{tmp\ 4212}#)
               ((lambda (#{tmp\ 4213}#)
                  (if #{tmp\ 4213}#
                    (apply (lambda (#{_\ 4221}#
                                    #{var\ 4222}#
                                    #{init\ 4223}#
                                    #{step\ 4224}#
                                    #{e0\ 4225}#
                                    #{e1\ 4226}#
                                    #{c\ 4227}#)
                             ((lambda (#{tmp\ 4229}#)
                                ((lambda (#{tmp\ 4230}#)
                                   (if #{tmp\ 4230}#
                                     (apply (lambda (#{step\ 4232}#)
                                              ((lambda (#{tmp\ 4233}#)
                                                 ((lambda (#{tmp\ 4234}#)
                                                    (if #{tmp\ 4234}#
                                                      (apply (lambda ()
                                                               (list '#(syntax-object
                                                                        let
                                                                        ((top)
                                                                         #(ribcage
                                                                           #(step)
                                                                           #((top))
                                                                           #("i4231"))
                                                                         #(ribcage
                                                                           #(_
                                                                             var
                                                                             init
                                                                             step
                                                                             e0
                                                                             e1
                                                                             c)
                                                                           #((top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top))
                                                                           #("i4214"
                                                                             "i4215"
                                                                             "i4216"
                                                                             "i4217"
                                                                             "i4218"
                                                                             "i4219"
                                                                             "i4220"))
                                                                         #(ribcage
                                                                           ()
                                                                           ()
                                                                           ())
                                                                         #(ribcage
                                                                           #(orig-x)
                                                                           #((top))
                                                                           #("i4211")))
                                                                        (hygiene
                                                                          guile))
                                                                     '#(syntax-object
                                                                        doloop
                                                                        ((top)
                                                                         #(ribcage
                                                                           #(step)
                                                                           #((top))
                                                                           #("i4231"))
                                                                         #(ribcage
                                                                           #(_
                                                                             var
                                                                             init
                                                                             step
                                                                             e0
                                                                             e1
                                                                             c)
                                                                           #((top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top))
                                                                           #("i4214"
                                                                             "i4215"
                                                                             "i4216"
                                                                             "i4217"
                                                                             "i4218"
                                                                             "i4219"
                                                                             "i4220"))
                                                                         #(ribcage
                                                                           ()
                                                                           ()
                                                                           ())
                                                                         #(ribcage
                                                                           #(orig-x)
                                                                           #((top))
                                                                           #("i4211")))
                                                                        (hygiene
                                                                          guile))
                                                                     (map list
                                                                          #{var\ 4222}#
                                                                          #{init\ 4223}#)
                                                                     (list '#(syntax-object
                                                                              if
                                                                              ((top)
                                                                               #(ribcage
                                                                                 #(step)
                                                                                 #((top))
                                                                                 #("i4231"))
                                                                               #(ribcage
                                                                                 #(_
                                                                                   var
                                                                                   init
                                                                                   step
                                                                                   e0
                                                                                   e1
                                                                                   c)
                                                                                 #((top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top))
                                                                                 #("i4214"
                                                                                   "i4215"
                                                                                   "i4216"
                                                                                   "i4217"
                                                                                   "i4218"
                                                                                   "i4219"
                                                                                   "i4220"))
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 #(orig-x)
                                                                                 #((top))
                                                                                 #("i4211")))
                                                                              (hygiene
                                                                                guile))
                                                                           (list '#(syntax-object
                                                                                    not
                                                                                    ((top)
                                                                                     #(ribcage
                                                                                       #(step)
                                                                                       #((top))
                                                                                       #("i4231"))
                                                                                     #(ribcage
                                                                                       #(_
                                                                                         var
                                                                                         init
                                                                                         step
                                                                                         e0
                                                                                         e1
                                                                                         c)
                                                                                       #((top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top))
                                                                                       #("i4214"
                                                                                         "i4215"
                                                                                         "i4216"
                                                                                         "i4217"
                                                                                         "i4218"
                                                                                         "i4219"
                                                                                         "i4220"))
                                                                                     #(ribcage
                                                                                       ()
                                                                                       ()
                                                                                       ())
                                                                                     #(ribcage
                                                                                       #(orig-x)
                                                                                       #((top))
                                                                                       #("i4211")))
                                                                                    (hygiene
                                                                                      guile))
                                                                                 #{e0\ 4225}#)
                                                                           (cons '#(syntax-object
                                                                                    begin
                                                                                    ((top)
                                                                                     #(ribcage
                                                                                       #(step)
                                                                                       #((top))
                                                                                       #("i4231"))
                                                                                     #(ribcage
                                                                                       #(_
                                                                                         var
                                                                                         init
                                                                                         step
                                                                                         e0
                                                                                         e1
                                                                                         c)
                                                                                       #((top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top))
                                                                                       #("i4214"
                                                                                         "i4215"
                                                                                         "i4216"
                                                                                         "i4217"
                                                                                         "i4218"
                                                                                         "i4219"
                                                                                         "i4220"))
                                                                                     #(ribcage
                                                                                       ()
                                                                                       ()
                                                                                       ())
                                                                                     #(ribcage
                                                                                       #(orig-x)
                                                                                       #((top))
                                                                                       #("i4211")))
                                                                                    (hygiene
                                                                                      guile))
                                                                                 (append
                                                                                   #{c\ 4227}#
                                                                                   (list (cons '#(syntax-object
                                                                                                  doloop
                                                                                                  ((top)
                                                                                                   #(ribcage
                                                                                                     #(step)
                                                                                                     #((top))
                                                                                                     #("i4231"))
                                                                                                   #(ribcage
                                                                                                     #(_
                                                                                                       var
                                                                                                       init
                                                                                                       step
                                                                                                       e0
                                                                                                       e1
                                                                                                       c)
                                                                                                     #((top)
                                                                                                       (top)
                                                                                                       (top)
                                                                                                       (top)
                                                                                                       (top)
                                                                                                       (top)
                                                                                                       (top))
                                                                                                     #("i4214"
                                                                                                       "i4215"
                                                                                                       "i4216"
                                                                                                       "i4217"
                                                                                                       "i4218"
                                                                                                       "i4219"
                                                                                                       "i4220"))
                                                                                                   #(ribcage
                                                                                                     ()
                                                                                                     ()
                                                                                                     ())
                                                                                                   #(ribcage
                                                                                                     #(orig-x)
                                                                                                     #((top))
                                                                                                     #("i4211")))
                                                                                                  (hygiene
                                                                                                    guile))
                                                                                               #{step\ 4232}#)))))))
                                                             #{tmp\ 4234}#)
                                                      ((lambda (#{tmp\ 4239}#)
                                                         (if #{tmp\ 4239}#
                                                           (apply (lambda (#{e1\ 4242}#
                                                                           #{e2\ 4243}#)
                                                                    (list '#(syntax-object
                                                                             let
                                                                             ((top)
                                                                              #(ribcage
                                                                                #(e1
                                                                                  e2)
                                                                                #((top)
                                                                                  (top))
                                                                                #("i4240"
                                                                                  "i4241"))
                                                                              #(ribcage
                                                                                #(step)
                                                                                #((top))
                                                                                #("i4231"))
                                                                              #(ribcage
                                                                                #(_
                                                                                  var
                                                                                  init
                                                                                  step
                                                                                  e0
                                                                                  e1
                                                                                  c)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4214"
                                                                                  "i4215"
                                                                                  "i4216"
                                                                                  "i4217"
                                                                                  "i4218"
                                                                                  "i4219"
                                                                                  "i4220"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(orig-x)
                                                                                #((top))
                                                                                #("i4211")))
                                                                             (hygiene
                                                                               guile))
                                                                          '#(syntax-object
                                                                             doloop
                                                                             ((top)
                                                                              #(ribcage
                                                                                #(e1
                                                                                  e2)
                                                                                #((top)
                                                                                  (top))
                                                                                #("i4240"
                                                                                  "i4241"))
                                                                              #(ribcage
                                                                                #(step)
                                                                                #((top))
                                                                                #("i4231"))
                                                                              #(ribcage
                                                                                #(_
                                                                                  var
                                                                                  init
                                                                                  step
                                                                                  e0
                                                                                  e1
                                                                                  c)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4214"
                                                                                  "i4215"
                                                                                  "i4216"
                                                                                  "i4217"
                                                                                  "i4218"
                                                                                  "i4219"
                                                                                  "i4220"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(orig-x)
                                                                                #((top))
                                                                                #("i4211")))
                                                                             (hygiene
                                                                               guile))
                                                                          (map list
                                                                               #{var\ 4222}#
                                                                               #{init\ 4223}#)
                                                                          (list '#(syntax-object
                                                                                   if
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(e1
                                                                                        e2)
                                                                                      #((top)
                                                                                        (top))
                                                                                      #("i4240"
                                                                                        "i4241"))
                                                                                    #(ribcage
                                                                                      #(step)
                                                                                      #((top))
                                                                                      #("i4231"))
                                                                                    #(ribcage
                                                                                      #(_
                                                                                        var
                                                                                        init
                                                                                        step
                                                                                        e0
                                                                                        e1
                                                                                        c)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4214"
                                                                                        "i4215"
                                                                                        "i4216"
                                                                                        "i4217"
                                                                                        "i4218"
                                                                                        "i4219"
                                                                                        "i4220"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(orig-x)
                                                                                      #((top))
                                                                                      #("i4211")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                #{e0\ 4225}#
                                                                                (cons '#(syntax-object
                                                                                         begin
                                                                                         ((top)
                                                                                          #(ribcage
                                                                                            #(e1
                                                                                              e2)
                                                                                            #((top)
                                                                                              (top))
                                                                                            #("i4240"
                                                                                              "i4241"))
                                                                                          #(ribcage
                                                                                            #(step)
                                                                                            #((top))
                                                                                            #("i4231"))
                                                                                          #(ribcage
                                                                                            #(_
                                                                                              var
                                                                                              init
                                                                                              step
                                                                                              e0
                                                                                              e1
                                                                                              c)
                                                                                            #((top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top))
                                                                                            #("i4214"
                                                                                              "i4215"
                                                                                              "i4216"
                                                                                              "i4217"
                                                                                              "i4218"
                                                                                              "i4219"
                                                                                              "i4220"))
                                                                                          #(ribcage
                                                                                            ()
                                                                                            ()
                                                                                            ())
                                                                                          #(ribcage
                                                                                            #(orig-x)
                                                                                            #((top))
                                                                                            #("i4211")))
                                                                                         (hygiene
                                                                                           guile))
                                                                                      (cons #{e1\ 4242}#
                                                                                            #{e2\ 4243}#))
                                                                                (cons '#(syntax-object
                                                                                         begin
                                                                                         ((top)
                                                                                          #(ribcage
                                                                                            #(e1
                                                                                              e2)
                                                                                            #((top)
                                                                                              (top))
                                                                                            #("i4240"
                                                                                              "i4241"))
                                                                                          #(ribcage
                                                                                            #(step)
                                                                                            #((top))
                                                                                            #("i4231"))
                                                                                          #(ribcage
                                                                                            #(_
                                                                                              var
                                                                                              init
                                                                                              step
                                                                                              e0
                                                                                              e1
                                                                                              c)
                                                                                            #((top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top))
                                                                                            #("i4214"
                                                                                              "i4215"
                                                                                              "i4216"
                                                                                              "i4217"
                                                                                              "i4218"
                                                                                              "i4219"
                                                                                              "i4220"))
                                                                                          #(ribcage
                                                                                            ()
                                                                                            ()
                                                                                            ())
                                                                                          #(ribcage
                                                                                            #(orig-x)
                                                                                            #((top))
                                                                                            #("i4211")))
                                                                                         (hygiene
                                                                                           guile))
                                                                                      (append
                                                                                        #{c\ 4227}#
                                                                                        (list (cons '#(syntax-object
                                                                                                       doloop
                                                                                                       ((top)
                                                                                                        #(ribcage
                                                                                                          #(e1
                                                                                                            e2)
                                                                                                          #((top)
                                                                                                            (top))
                                                                                                          #("i4240"
                                                                                                            "i4241"))
                                                                                                        #(ribcage
                                                                                                          #(step)
                                                                                                          #((top))
                                                                                                          #("i4231"))
                                                                                                        #(ribcage
                                                                                                          #(_
                                                                                                            var
                                                                                                            init
                                                                                                            step
                                                                                                            e0
                                                                                                            e1
                                                                                                            c)
                                                                                                          #((top)
                                                                                                            (top)
                                                                                                            (top)
                                                                                                            (top)
                                                                                                            (top)
                                                                                                            (top)
                                                                                                            (top))
                                                                                                          #("i4214"
                                                                                                            "i4215"
                                                                                                            "i4216"
                                                                                                            "i4217"
                                                                                                            "i4218"
                                                                                                            "i4219"
                                                                                                            "i4220"))
                                                                                                        #(ribcage
                                                                                                          ()
                                                                                                          ()
                                                                                                          ())
                                                                                                        #(ribcage
                                                                                                          #(orig-x)
                                                                                                          #((top))
                                                                                                          #("i4211")))
                                                                                                       (hygiene
                                                                                                         guile))
                                                                                                    #{step\ 4232}#)))))))
                                                                  #{tmp\ 4239}#)
                                                           (syntax-violation
                                                             #f
                                                             "source expression failed to match any pattern"
                                                             #{tmp\ 4233}#)))
                                                       ($sc-dispatch
                                                         #{tmp\ 4233}#
                                                         '(any . each-any)))))
                                                  ($sc-dispatch
                                                    #{tmp\ 4233}#
                                                    '())))
                                               #{e1\ 4226}#))
                                            #{tmp\ 4230}#)
                                     (syntax-violation
                                       #f
                                       "source expression failed to match any pattern"
                                       #{tmp\ 4229}#)))
                                 ($sc-dispatch
                                   #{tmp\ 4229}#
                                   'each-any)))
                              (map (lambda (#{v\ 4250}# #{s\ 4251}#)
                                     ((lambda (#{tmp\ 4254}#)
                                        ((lambda (#{tmp\ 4255}#)
                                           (if #{tmp\ 4255}#
                                             (apply (lambda () #{v\ 4250}#)
                                                    #{tmp\ 4255}#)
                                             ((lambda (#{tmp\ 4256}#)
                                                (if #{tmp\ 4256}#
                                                  (apply (lambda (#{e\ 4258}#)
                                                           #{e\ 4258}#)
                                                         #{tmp\ 4256}#)
                                                  ((lambda (#{_\ 4260}#)
                                                     (syntax-violation
                                                       'do
                                                       "bad step expression"
                                                       #{orig-x\ 4210}#
                                                       #{s\ 4251}#))
                                                   #{tmp\ 4254}#)))
                                              ($sc-dispatch
                                                #{tmp\ 4254}#
                                                '(any)))))
                                         ($sc-dispatch
                                           #{tmp\ 4254}#
                                           '())))
                                      #{s\ 4251}#))
                                   #{var\ 4222}#
                                   #{step\ 4224}#)))
                           #{tmp\ 4213}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 4212}#)))
                ($sc-dispatch
                  #{tmp\ 4212}#
                  '(any #(each (any any . any))
                        (any . each-any)
                        .
                        each-any))))
             #{orig-x\ 4210}#))
          (module-name (current-module)))))

(define quasiquote
  (make-syntax-transformer
    'quasiquote
    'macro
    (cons (letrec ((#{quasicons\ 4267}#
                     (lambda (#{x\ 4271}# #{y\ 4272}#)
                       ((lambda (#{tmp\ 4276}#)
                          ((lambda (#{tmp\ 4277}#)
                             (if #{tmp\ 4277}#
                               (apply (lambda (#{x\ 4280}# #{y\ 4281}#)
                                        ((lambda (#{tmp\ 4282}#)
                                           ((lambda (#{tmp\ 4283}#)
                                              (if #{tmp\ 4283}#
                                                (apply (lambda (#{dy\ 4285}#)
                                                         ((lambda (#{tmp\ 4286}#)
                                                            ((lambda (#{tmp\ 4287}#)
                                                               (if #{tmp\ 4287}#
                                                                 (apply (lambda (#{dx\ 4289}#)
                                                                          (list '#(syntax-object
                                                                                   quote
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(dx)
                                                                                      #((top))
                                                                                      #("i4288"))
                                                                                    #(ribcage
                                                                                      #(dy)
                                                                                      #((top))
                                                                                      #("i4284"))
                                                                                    #(ribcage
                                                                                      #(x
                                                                                        y)
                                                                                      #((top)
                                                                                        (top))
                                                                                      #("i4278"
                                                                                        "i4279"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(x
                                                                                        y)
                                                                                      #((top)
                                                                                        (top))
                                                                                      #("i4273"
                                                                                        "i4274"))
                                                                                    #(ribcage
                                                                                      #(quasicons
                                                                                        quasiappend
                                                                                        quasivector
                                                                                        quasi)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4263"
                                                                                        "i4264"
                                                                                        "i4265"
                                                                                        "i4266")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                (cons #{dx\ 4289}#
                                                                                      #{dy\ 4285}#)))
                                                                        #{tmp\ 4287}#)
                                                                 ((lambda (#{_\ 4291}#)
                                                                    (if (null? #{dy\ 4285}#)
                                                                      (list '#(syntax-object
                                                                               list
                                                                               ((top)
                                                                                #(ribcage
                                                                                  #(_)
                                                                                  #((top))
                                                                                  #("i4290"))
                                                                                #(ribcage
                                                                                  #(dy)
                                                                                  #((top))
                                                                                  #("i4284"))
                                                                                #(ribcage
                                                                                  #(x
                                                                                    y)
                                                                                  #((top)
                                                                                    (top))
                                                                                  #("i4278"
                                                                                    "i4279"))
                                                                                #(ribcage
                                                                                  ()
                                                                                  ()
                                                                                  ())
                                                                                #(ribcage
                                                                                  ()
                                                                                  ()
                                                                                  ())
                                                                                #(ribcage
                                                                                  #(x
                                                                                    y)
                                                                                  #((top)
                                                                                    (top))
                                                                                  #("i4273"
                                                                                    "i4274"))
                                                                                #(ribcage
                                                                                  #(quasicons
                                                                                    quasiappend
                                                                                    quasivector
                                                                                    quasi)
                                                                                  #((top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top))
                                                                                  #("i4263"
                                                                                    "i4264"
                                                                                    "i4265"
                                                                                    "i4266")))
                                                                               (hygiene
                                                                                 guile))
                                                                            #{x\ 4280}#)
                                                                      (list '#(syntax-object
                                                                               cons
                                                                               ((top)
                                                                                #(ribcage
                                                                                  #(_)
                                                                                  #((top))
                                                                                  #("i4290"))
                                                                                #(ribcage
                                                                                  #(dy)
                                                                                  #((top))
                                                                                  #("i4284"))
                                                                                #(ribcage
                                                                                  #(x
                                                                                    y)
                                                                                  #((top)
                                                                                    (top))
                                                                                  #("i4278"
                                                                                    "i4279"))
                                                                                #(ribcage
                                                                                  ()
                                                                                  ()
                                                                                  ())
                                                                                #(ribcage
                                                                                  ()
                                                                                  ()
                                                                                  ())
                                                                                #(ribcage
                                                                                  #(x
                                                                                    y)
                                                                                  #((top)
                                                                                    (top))
                                                                                  #("i4273"
                                                                                    "i4274"))
                                                                                #(ribcage
                                                                                  #(quasicons
                                                                                    quasiappend
                                                                                    quasivector
                                                                                    quasi)
                                                                                  #((top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top))
                                                                                  #("i4263"
                                                                                    "i4264"
                                                                                    "i4265"
                                                                                    "i4266")))
                                                                               (hygiene
                                                                                 guile))
                                                                            #{x\ 4280}#
                                                                            #{y\ 4281}#)))
                                                                  #{tmp\ 4286}#)))
                                                             ($sc-dispatch
                                                               #{tmp\ 4286}#
                                                               '(#(free-id
                                                                   #(syntax-object
                                                                     quote
                                                                     ((top)
                                                                      #(ribcage
                                                                        #(dy)
                                                                        #((top))
                                                                        #("i4284"))
                                                                      #(ribcage
                                                                        #(x y)
                                                                        #((top)
                                                                          (top))
                                                                        #("i4278"
                                                                          "i4279"))
                                                                      #(ribcage
                                                                        ()
                                                                        ()
                                                                        ())
                                                                      #(ribcage
                                                                        ()
                                                                        ()
                                                                        ())
                                                                      #(ribcage
                                                                        #(x y)
                                                                        #((top)
                                                                          (top))
                                                                        #("i4273"
                                                                          "i4274"))
                                                                      #(ribcage
                                                                        #(quasicons
                                                                          quasiappend
                                                                          quasivector
                                                                          quasi)
                                                                        #((top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                        #("i4263"
                                                                          "i4264"
                                                                          "i4265"
                                                                          "i4266")))
                                                                     (hygiene
                                                                       guile)))
                                                                 any))))
                                                          #{x\ 4280}#))
                                                       #{tmp\ 4283}#)
                                                ((lambda (#{tmp\ 4292}#)
                                                   (if #{tmp\ 4292}#
                                                     (apply (lambda (#{stuff\ 4294}#)
                                                              (cons '#(syntax-object
                                                                       list
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(stuff)
                                                                          #((top))
                                                                          #("i4293"))
                                                                        #(ribcage
                                                                          #(x
                                                                            y)
                                                                          #((top)
                                                                            (top))
                                                                          #("i4278"
                                                                            "i4279"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(x
                                                                            y)
                                                                          #((top)
                                                                            (top))
                                                                          #("i4273"
                                                                            "i4274"))
                                                                        #(ribcage
                                                                          #(quasicons
                                                                            quasiappend
                                                                            quasivector
                                                                            quasi)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i4263"
                                                                            "i4264"
                                                                            "i4265"
                                                                            "i4266")))
                                                                       (hygiene
                                                                         guile))
                                                                    (cons #{x\ 4280}#
                                                                          #{stuff\ 4294}#)))
                                                            #{tmp\ 4292}#)
                                                     ((lambda (#{else\ 4296}#)
                                                        (list '#(syntax-object
                                                                 cons
                                                                 ((top)
                                                                  #(ribcage
                                                                    #(else)
                                                                    #((top))
                                                                    #("i4295"))
                                                                  #(ribcage
                                                                    #(x y)
                                                                    #((top)
                                                                      (top))
                                                                    #("i4278"
                                                                      "i4279"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x y)
                                                                    #((top)
                                                                      (top))
                                                                    #("i4273"
                                                                      "i4274"))
                                                                  #(ribcage
                                                                    #(quasicons
                                                                      quasiappend
                                                                      quasivector
                                                                      quasi)
                                                                    #((top)
                                                                      (top)
                                                                      (top)
                                                                      (top))
                                                                    #("i4263"
                                                                      "i4264"
                                                                      "i4265"
                                                                      "i4266")))
                                                                 (hygiene
                                                                   guile))
                                                              #{x\ 4280}#
                                                              #{y\ 4281}#))
                                                      #{tmp\ 4282}#)))
                                                 ($sc-dispatch
                                                   #{tmp\ 4282}#
                                                   '(#(free-id
                                                       #(syntax-object
                                                         list
                                                         ((top)
                                                          #(ribcage
                                                            #(x y)
                                                            #((top) (top))
                                                            #("i4278" "i4279"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x y)
                                                            #((top) (top))
                                                            #("i4273" "i4274"))
                                                          #(ribcage
                                                            #(quasicons
                                                              quasiappend
                                                              quasivector
                                                              quasi)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i4263"
                                                              "i4264"
                                                              "i4265"
                                                              "i4266")))
                                                         (hygiene guile)))
                                                     .
                                                     any)))))
                                            ($sc-dispatch
                                              #{tmp\ 4282}#
                                              '(#(free-id
                                                  #(syntax-object
                                                    quote
                                                    ((top)
                                                     #(ribcage
                                                       #(x y)
                                                       #((top) (top))
                                                       #("i4278" "i4279"))
                                                     #(ribcage () () ())
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x y)
                                                       #((top) (top))
                                                       #("i4273" "i4274"))
                                                     #(ribcage
                                                       #(quasicons
                                                         quasiappend
                                                         quasivector
                                                         quasi)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i4263"
                                                         "i4264"
                                                         "i4265"
                                                         "i4266")))
                                                    (hygiene guile)))
                                                any))))
                                         #{y\ 4281}#))
                                      #{tmp\ 4277}#)
                               (syntax-violation
                                 #f
                                 "source expression failed to match any pattern"
                                 #{tmp\ 4276}#)))
                           ($sc-dispatch #{tmp\ 4276}# (quote (any any)))))
                        (list #{x\ 4271}# #{y\ 4272}#))))
                   (#{quasiappend\ 4268}#
                     (lambda (#{x\ 4297}# #{y\ 4298}#)
                       ((lambda (#{tmp\ 4302}#)
                          ((lambda (#{tmp\ 4303}#)
                             (if #{tmp\ 4303}#
                               (apply (lambda (#{x\ 4306}# #{y\ 4307}#)
                                        ((lambda (#{tmp\ 4308}#)
                                           ((lambda (#{tmp\ 4309}#)
                                              (if #{tmp\ 4309}#
                                                (apply (lambda () #{x\ 4306}#)
                                                       #{tmp\ 4309}#)
                                                ((lambda (#{_\ 4311}#)
                                                   (list '#(syntax-object
                                                            append
                                                            ((top)
                                                             #(ribcage
                                                               #(_)
                                                               #((top))
                                                               #("i4310"))
                                                             #(ribcage
                                                               #(x y)
                                                               #((top) (top))
                                                               #("i4304"
                                                                 "i4305"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x y)
                                                               #((top) (top))
                                                               #("i4299"
                                                                 "i4300"))
                                                             #(ribcage
                                                               #(quasicons
                                                                 quasiappend
                                                                 quasivector
                                                                 quasi)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i4263"
                                                                 "i4264"
                                                                 "i4265"
                                                                 "i4266")))
                                                            (hygiene guile))
                                                         #{x\ 4306}#
                                                         #{y\ 4307}#))
                                                 #{tmp\ 4308}#)))
                                            ($sc-dispatch
                                              #{tmp\ 4308}#
                                              '(#(free-id
                                                  #(syntax-object
                                                    quote
                                                    ((top)
                                                     #(ribcage
                                                       #(x y)
                                                       #((top) (top))
                                                       #("i4304" "i4305"))
                                                     #(ribcage () () ())
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x y)
                                                       #((top) (top))
                                                       #("i4299" "i4300"))
                                                     #(ribcage
                                                       #(quasicons
                                                         quasiappend
                                                         quasivector
                                                         quasi)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i4263"
                                                         "i4264"
                                                         "i4265"
                                                         "i4266")))
                                                    (hygiene guile)))
                                                ()))))
                                         #{y\ 4307}#))
                                      #{tmp\ 4303}#)
                               (syntax-violation
                                 #f
                                 "source expression failed to match any pattern"
                                 #{tmp\ 4302}#)))
                           ($sc-dispatch #{tmp\ 4302}# (quote (any any)))))
                        (list #{x\ 4297}# #{y\ 4298}#))))
                   (#{quasivector\ 4269}#
                     (lambda (#{x\ 4312}#)
                       ((lambda (#{tmp\ 4315}#)
                          ((lambda (#{x\ 4317}#)
                             ((lambda (#{tmp\ 4318}#)
                                ((lambda (#{tmp\ 4319}#)
                                   (if #{tmp\ 4319}#
                                     (apply (lambda (#{x\ 4321}#)
                                              (list '#(syntax-object
                                                       quote
                                                       ((top)
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i4320"))
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i4316"))
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i4313"))
                                                        #(ribcage
                                                          #(quasicons
                                                            quasiappend
                                                            quasivector
                                                            quasi)
                                                          #((top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                          #("i4263"
                                                            "i4264"
                                                            "i4265"
                                                            "i4266")))
                                                       (hygiene guile))
                                                    (list->vector
                                                      #{x\ 4321}#)))
                                            #{tmp\ 4319}#)
                                     ((lambda (#{tmp\ 4323}#)
                                        (if #{tmp\ 4323}#
                                          (apply (lambda (#{x\ 4325}#)
                                                   (cons '#(syntax-object
                                                            vector
                                                            ((top)
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i4324"))
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i4316"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i4313"))
                                                             #(ribcage
                                                               #(quasicons
                                                                 quasiappend
                                                                 quasivector
                                                                 quasi)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i4263"
                                                                 "i4264"
                                                                 "i4265"
                                                                 "i4266")))
                                                            (hygiene guile))
                                                         #{x\ 4325}#))
                                                 #{tmp\ 4323}#)
                                          ((lambda (#{_\ 4328}#)
                                             (list '#(syntax-object
                                                      list->vector
                                                      ((top)
                                                       #(ribcage
                                                         #(_)
                                                         #((top))
                                                         #("i4327"))
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i4316"))
                                                       #(ribcage () () ())
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i4313"))
                                                       #(ribcage
                                                         #(quasicons
                                                           quasiappend
                                                           quasivector
                                                           quasi)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("i4263"
                                                           "i4264"
                                                           "i4265"
                                                           "i4266")))
                                                      (hygiene guile))
                                                   #{x\ 4317}#))
                                           #{tmp\ 4318}#)))
                                      ($sc-dispatch
                                        #{tmp\ 4318}#
                                        '(#(free-id
                                            #(syntax-object
                                              list
                                              ((top)
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i4316"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i4313"))
                                               #(ribcage
                                                 #(quasicons
                                                   quasiappend
                                                   quasivector
                                                   quasi)
                                                 #((top) (top) (top) (top))
                                                 #("i4263"
                                                   "i4264"
                                                   "i4265"
                                                   "i4266")))
                                              (hygiene guile)))
                                          .
                                          each-any)))))
                                 ($sc-dispatch
                                   #{tmp\ 4318}#
                                   '(#(free-id
                                       #(syntax-object
                                         quote
                                         ((top)
                                          #(ribcage #(x) #((top)) #("i4316"))
                                          #(ribcage () () ())
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i4313"))
                                          #(ribcage
                                            #(quasicons
                                              quasiappend
                                              quasivector
                                              quasi)
                                            #((top) (top) (top) (top))
                                            #("i4263"
                                              "i4264"
                                              "i4265"
                                              "i4266")))
                                         (hygiene guile)))
                                     each-any))))
                              #{x\ 4317}#))
                           #{tmp\ 4315}#))
                        #{x\ 4312}#)))
                   (#{quasi\ 4270}#
                     (lambda (#{p\ 4329}# #{lev\ 4330}#)
                       ((lambda (#{tmp\ 4333}#)
                          ((lambda (#{tmp\ 4334}#)
                             (if #{tmp\ 4334}#
                               (apply (lambda (#{p\ 4336}#)
                                        (if (= #{lev\ 4330}# 0)
                                          #{p\ 4336}#
                                          (#{quasicons\ 4267}#
                                            '(#(syntax-object
                                                quote
                                                ((top)
                                                 #(ribcage
                                                   #(p)
                                                   #((top))
                                                   #("i4335"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(p lev)
                                                   #((top) (top))
                                                   #("i4331" "i4332"))
                                                 #(ribcage
                                                   #(quasicons
                                                     quasiappend
                                                     quasivector
                                                     quasi)
                                                   #((top) (top) (top) (top))
                                                   #("i4263"
                                                     "i4264"
                                                     "i4265"
                                                     "i4266")))
                                                (hygiene guile))
                                              #(syntax-object
                                                unquote
                                                ((top)
                                                 #(ribcage
                                                   #(p)
                                                   #((top))
                                                   #("i4335"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(p lev)
                                                   #((top) (top))
                                                   #("i4331" "i4332"))
                                                 #(ribcage
                                                   #(quasicons
                                                     quasiappend
                                                     quasivector
                                                     quasi)
                                                   #((top) (top) (top) (top))
                                                   #("i4263"
                                                     "i4264"
                                                     "i4265"
                                                     "i4266")))
                                                (hygiene guile)))
                                            (#{quasi\ 4270}#
                                              (list #{p\ 4336}#)
                                              (- #{lev\ 4330}# 1)))))
                                      #{tmp\ 4334}#)
                               ((lambda (#{tmp\ 4337}#)
                                  (if (if #{tmp\ 4337}#
                                        (apply (lambda (#{args\ 4339}#)
                                                 (= #{lev\ 4330}# 0))
                                               #{tmp\ 4337}#)
                                        #f)
                                    (apply (lambda (#{args\ 4341}#)
                                             (syntax-violation
                                               'unquote
                                               "unquote takes exactly one argument"
                                               #{p\ 4329}#
                                               (cons '#(syntax-object
                                                        unquote
                                                        ((top)
                                                         #(ribcage
                                                           #(args)
                                                           #((top))
                                                           #("i4340"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(p lev)
                                                           #((top) (top))
                                                           #("i4331" "i4332"))
                                                         #(ribcage
                                                           #(quasicons
                                                             quasiappend
                                                             quasivector
                                                             quasi)
                                                           #((top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                           #("i4263"
                                                             "i4264"
                                                             "i4265"
                                                             "i4266")))
                                                        (hygiene guile))
                                                     #{args\ 4341}#)))
                                           #{tmp\ 4337}#)
                                    ((lambda (#{tmp\ 4342}#)
                                       (if #{tmp\ 4342}#
                                         (apply (lambda (#{p\ 4345}#
                                                         #{q\ 4346}#)
                                                  (if (= #{lev\ 4330}# 0)
                                                    (#{quasiappend\ 4268}#
                                                      #{p\ 4345}#
                                                      (#{quasi\ 4270}#
                                                        #{q\ 4346}#
                                                        #{lev\ 4330}#))
                                                    (#{quasicons\ 4267}#
                                                      (#{quasicons\ 4267}#
                                                        '(#(syntax-object
                                                            quote
                                                            ((top)
                                                             #(ribcage
                                                               #(p q)
                                                               #((top) (top))
                                                               #("i4343"
                                                                 "i4344"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(p lev)
                                                               #((top) (top))
                                                               #("i4331"
                                                                 "i4332"))
                                                             #(ribcage
                                                               #(quasicons
                                                                 quasiappend
                                                                 quasivector
                                                                 quasi)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i4263"
                                                                 "i4264"
                                                                 "i4265"
                                                                 "i4266")))
                                                            (hygiene guile))
                                                          #(syntax-object
                                                            unquote-splicing
                                                            ((top)
                                                             #(ribcage
                                                               #(p q)
                                                               #((top) (top))
                                                               #("i4343"
                                                                 "i4344"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(p lev)
                                                               #((top) (top))
                                                               #("i4331"
                                                                 "i4332"))
                                                             #(ribcage
                                                               #(quasicons
                                                                 quasiappend
                                                                 quasivector
                                                                 quasi)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i4263"
                                                                 "i4264"
                                                                 "i4265"
                                                                 "i4266")))
                                                            (hygiene guile)))
                                                        (#{quasi\ 4270}#
                                                          (list #{p\ 4345}#)
                                                          (- #{lev\ 4330}# 1)))
                                                      (#{quasi\ 4270}#
                                                        #{q\ 4346}#
                                                        #{lev\ 4330}#))))
                                                #{tmp\ 4342}#)
                                         ((lambda (#{tmp\ 4347}#)
                                            (if (if #{tmp\ 4347}#
                                                  (apply (lambda (#{args\ 4350}#
                                                                  #{q\ 4351}#)
                                                           (= #{lev\ 4330}# 0))
                                                         #{tmp\ 4347}#)
                                                  #f)
                                              (apply (lambda (#{args\ 4354}#
                                                              #{q\ 4355}#)
                                                       (syntax-violation
                                                         'unquote-splicing
                                                         "unquote-splicing takes exactly one argument"
                                                         #{p\ 4329}#
                                                         (cons '#(syntax-object
                                                                  unquote-splicing
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(args q)
                                                                     #((top)
                                                                       (top))
                                                                     #("i4352"
                                                                       "i4353"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(p lev)
                                                                     #((top)
                                                                       (top))
                                                                     #("i4331"
                                                                       "i4332"))
                                                                   #(ribcage
                                                                     #(quasicons
                                                                       quasiappend
                                                                       quasivector
                                                                       quasi)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i4263"
                                                                       "i4264"
                                                                       "i4265"
                                                                       "i4266")))
                                                                  (hygiene
                                                                    guile))
                                                               #{args\ 4354}#)))
                                                     #{tmp\ 4347}#)
                                              ((lambda (#{tmp\ 4356}#)
                                                 (if #{tmp\ 4356}#
                                                   (apply (lambda (#{p\ 4358}#)
                                                            (#{quasicons\ 4267}#
                                                              '(#(syntax-object
                                                                  quote
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(p)
                                                                     #((top))
                                                                     #("i4357"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(p lev)
                                                                     #((top)
                                                                       (top))
                                                                     #("i4331"
                                                                       "i4332"))
                                                                   #(ribcage
                                                                     #(quasicons
                                                                       quasiappend
                                                                       quasivector
                                                                       quasi)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i4263"
                                                                       "i4264"
                                                                       "i4265"
                                                                       "i4266")))
                                                                  (hygiene
                                                                    guile))
                                                                #(syntax-object
                                                                  quasiquote
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(p)
                                                                     #((top))
                                                                     #("i4357"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(p lev)
                                                                     #((top)
                                                                       (top))
                                                                     #("i4331"
                                                                       "i4332"))
                                                                   #(ribcage
                                                                     #(quasicons
                                                                       quasiappend
                                                                       quasivector
                                                                       quasi)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i4263"
                                                                       "i4264"
                                                                       "i4265"
                                                                       "i4266")))
                                                                  (hygiene
                                                                    guile)))
                                                              (#{quasi\ 4270}#
                                                                (list #{p\ 4358}#)
                                                                (+ #{lev\ 4330}#
                                                                   1))))
                                                          #{tmp\ 4356}#)
                                                   ((lambda (#{tmp\ 4359}#)
                                                      (if #{tmp\ 4359}#
                                                        (apply (lambda (#{p\ 4362}#
                                                                        #{q\ 4363}#)
                                                                 (#{quasicons\ 4267}#
                                                                   (#{quasi\ 4270}#
                                                                     #{p\ 4362}#
                                                                     #{lev\ 4330}#)
                                                                   (#{quasi\ 4270}#
                                                                     #{q\ 4363}#
                                                                     #{lev\ 4330}#)))
                                                               #{tmp\ 4359}#)
                                                        ((lambda (#{tmp\ 4364}#)
                                                           (if #{tmp\ 4364}#
                                                             (apply (lambda (#{x\ 4366}#)
                                                                      (#{quasivector\ 4269}#
                                                                        (#{quasi\ 4270}#
                                                                          #{x\ 4366}#
                                                                          #{lev\ 4330}#)))
                                                                    #{tmp\ 4364}#)
                                                             ((lambda (#{p\ 4369}#)
                                                                (list '#(syntax-object
                                                                         quote
                                                                         ((top)
                                                                          #(ribcage
                                                                            #(p)
                                                                            #((top))
                                                                            #("i4368"))
                                                                          #(ribcage
                                                                            ()
                                                                            ()
                                                                            ())
                                                                          #(ribcage
                                                                            #(p
                                                                              lev)
                                                                            #((top)
                                                                              (top))
                                                                            #("i4331"
                                                                              "i4332"))
                                                                          #(ribcage
                                                                            #(quasicons
                                                                              quasiappend
                                                                              quasivector
                                                                              quasi)
                                                                            #((top)
                                                                              (top)
                                                                              (top)
                                                                              (top))
                                                                            #("i4263"
                                                                              "i4264"
                                                                              "i4265"
                                                                              "i4266")))
                                                                         (hygiene
                                                                           guile))
                                                                      #{p\ 4369}#))
                                                              #{tmp\ 4333}#)))
                                                         ($sc-dispatch
                                                           #{tmp\ 4333}#
                                                           '#(vector
                                                              each-any)))))
                                                    ($sc-dispatch
                                                      #{tmp\ 4333}#
                                                      '(any . any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 4333}#
                                                 '(#(free-id
                                                     #(syntax-object
                                                       quasiquote
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p lev)
                                                          #((top) (top))
                                                          #("i4331" "i4332"))
                                                        #(ribcage
                                                          #(quasicons
                                                            quasiappend
                                                            quasivector
                                                            quasi)
                                                          #((top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                          #("i4263"
                                                            "i4264"
                                                            "i4265"
                                                            "i4266")))
                                                       (hygiene guile)))
                                                   any)))))
                                          ($sc-dispatch
                                            #{tmp\ 4333}#
                                            '((#(free-id
                                                 #(syntax-object
                                                   unquote-splicing
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(p lev)
                                                      #((top) (top))
                                                      #("i4331" "i4332"))
                                                    #(ribcage
                                                      #(quasicons
                                                        quasiappend
                                                        quasivector
                                                        quasi)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i4263"
                                                        "i4264"
                                                        "i4265"
                                                        "i4266")))
                                                   (hygiene guile)))
                                               .
                                               any)
                                              .
                                              any)))))
                                     ($sc-dispatch
                                       #{tmp\ 4333}#
                                       '((#(free-id
                                            #(syntax-object
                                              unquote-splicing
                                              ((top)
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(p lev)
                                                 #((top) (top))
                                                 #("i4331" "i4332"))
                                               #(ribcage
                                                 #(quasicons
                                                   quasiappend
                                                   quasivector
                                                   quasi)
                                                 #((top) (top) (top) (top))
                                                 #("i4263"
                                                   "i4264"
                                                   "i4265"
                                                   "i4266")))
                                              (hygiene guile)))
                                          any)
                                         .
                                         any)))))
                                ($sc-dispatch
                                  #{tmp\ 4333}#
                                  '(#(free-id
                                      #(syntax-object
                                        unquote
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(p lev)
                                           #((top) (top))
                                           #("i4331" "i4332"))
                                         #(ribcage
                                           #(quasicons
                                             quasiappend
                                             quasivector
                                             quasi)
                                           #((top) (top) (top) (top))
                                           #("i4263" "i4264" "i4265" "i4266")))
                                        (hygiene guile)))
                                    .
                                    any)))))
                           ($sc-dispatch
                             #{tmp\ 4333}#
                             '(#(free-id
                                 #(syntax-object
                                   unquote
                                   ((top)
                                    #(ribcage () () ())
                                    #(ribcage
                                      #(p lev)
                                      #((top) (top))
                                      #("i4331" "i4332"))
                                    #(ribcage
                                      #(quasicons
                                        quasiappend
                                        quasivector
                                        quasi)
                                      #((top) (top) (top) (top))
                                      #("i4263" "i4264" "i4265" "i4266")))
                                   (hygiene guile)))
                               any))))
                        #{p\ 4329}#))))
            (lambda (#{x\ 4370}#)
              ((lambda (#{tmp\ 4372}#)
                 ((lambda (#{tmp\ 4373}#)
                    (if #{tmp\ 4373}#
                      (apply (lambda (#{_\ 4376}# #{e\ 4377}#)
                               (#{quasi\ 4270}# #{e\ 4377}# 0))
                             #{tmp\ 4373}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp\ 4372}#)))
                  ($sc-dispatch #{tmp\ 4372}# (quote (any any)))))
               #{x\ 4370}#)))
          (module-name (current-module)))))

(define include
  (make-syntax-transformer
    'include
    'macro
    (cons (lambda (#{x\ 4378}#)
            (letrec ((#{read-file\ 4381}#
                       (lambda (#{fn\ 4382}# #{k\ 4383}#)
                         (let ((#{p\ 4387}# (open-input-file #{fn\ 4382}#)))
                           (letrec ((#{f\ 4391}#
                                      (lambda (#{x\ 4392}# #{result\ 4393}#)
                                        (if (eof-object? #{x\ 4392}#)
                                          (begin
                                            (close-input-port #{p\ 4387}#)
                                            (reverse #{result\ 4393}#))
                                          (#{f\ 4391}#
                                            (read #{p\ 4387}#)
                                            (cons (datum->syntax
                                                    #{k\ 4383}#
                                                    #{x\ 4392}#)
                                                  #{result\ 4393}#))))))
                             (#{f\ 4391}# (read #{p\ 4387}#) (quote ())))))))
              ((lambda (#{tmp\ 4394}#)
                 ((lambda (#{tmp\ 4395}#)
                    (if #{tmp\ 4395}#
                      (apply (lambda (#{k\ 4398}# #{filename\ 4399}#)
                               (let ((#{fn\ 4401}#
                                       (syntax->datum #{filename\ 4399}#)))
                                 ((lambda (#{tmp\ 4403}#)
                                    ((lambda (#{tmp\ 4404}#)
                                       (if #{tmp\ 4404}#
                                         (apply (lambda (#{exp\ 4406}#)
                                                  (cons '#(syntax-object
                                                           begin
                                                           ((top)
                                                            #(ribcage
                                                              #(exp)
                                                              #((top))
                                                              #("i4405"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(fn)
                                                              #((top))
                                                              #("i4400"))
                                                            #(ribcage
                                                              #(k filename)
                                                              #((top) (top))
                                                              #("i4396"
                                                                "i4397"))
                                                            #(ribcage
                                                              (read-file)
                                                              ((top))
                                                              ("i4380"))
                                                            #(ribcage
                                                              #(x)
                                                              #((top))
                                                              #("i4379")))
                                                           (hygiene guile))
                                                        #{exp\ 4406}#))
                                                #{tmp\ 4404}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp\ 4403}#)))
                                     ($sc-dispatch
                                       #{tmp\ 4403}#
                                       'each-any)))
                                  (#{read-file\ 4381}#
                                    #{fn\ 4401}#
                                    #{filename\ 4399}#))))
                             #{tmp\ 4395}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp\ 4394}#)))
                  ($sc-dispatch #{tmp\ 4394}# (quote (any any)))))
               #{x\ 4378}#)))
          (module-name (current-module)))))

(define include-from-path
  (make-syntax-transformer
    'include-from-path
    'macro
    (cons (lambda (#{x\ 4408}#)
            ((lambda (#{tmp\ 4410}#)
               ((lambda (#{tmp\ 4411}#)
                  (if #{tmp\ 4411}#
                    (apply (lambda (#{k\ 4414}# #{filename\ 4415}#)
                             (let ((#{fn\ 4417}#
                                     (syntax->datum #{filename\ 4415}#)))
                               ((lambda (#{tmp\ 4419}#)
                                  ((lambda (#{fn\ 4421}#)
                                     (list '#(syntax-object
                                              include
                                              ((top)
                                               #(ribcage
                                                 #(fn)
                                                 #((top))
                                                 #("i4420"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(fn)
                                                 #((top))
                                                 #("i4416"))
                                               #(ribcage
                                                 #(k filename)
                                                 #((top) (top))
                                                 #("i4412" "i4413"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i4409")))
                                              (hygiene guile))
                                           #{fn\ 4421}#))
                                   #{tmp\ 4419}#))
                                (datum->syntax
                                  #{filename\ 4415}#
                                  (let ((#{t\ 4424}#
                                          (%search-load-path #{fn\ 4417}#)))
                                    (if #{t\ 4424}#
                                      #{t\ 4424}#
                                      (syntax-violation
                                        'include-from-path
                                        "file not found in path"
                                        #{x\ 4408}#
                                        #{filename\ 4415}#)))))))
                           #{tmp\ 4411}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 4410}#)))
                ($sc-dispatch #{tmp\ 4410}# (quote (any any)))))
             #{x\ 4408}#))
          (module-name (current-module)))))

(define unquote
  (make-syntax-transformer
    'unquote
    'macro
    (cons (lambda (#{x\ 4426}#)
            ((lambda (#{tmp\ 4428}#)
               ((lambda (#{tmp\ 4429}#)
                  (if #{tmp\ 4429}#
                    (apply (lambda (#{_\ 4432}# #{e\ 4433}#)
                             (syntax-violation
                               'unquote
                               "expression not valid outside of quasiquote"
                               #{x\ 4426}#))
                           #{tmp\ 4429}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 4428}#)))
                ($sc-dispatch #{tmp\ 4428}# (quote (any any)))))
             #{x\ 4426}#))
          (module-name (current-module)))))

(define unquote-splicing
  (make-syntax-transformer
    'unquote-splicing
    'macro
    (cons (lambda (#{x\ 4434}#)
            ((lambda (#{tmp\ 4436}#)
               ((lambda (#{tmp\ 4437}#)
                  (if #{tmp\ 4437}#
                    (apply (lambda (#{_\ 4440}# #{e\ 4441}#)
                             (syntax-violation
                               'unquote-splicing
                               "expression not valid outside of quasiquote"
                               #{x\ 4434}#))
                           #{tmp\ 4437}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 4436}#)))
                ($sc-dispatch #{tmp\ 4436}# (quote (any any)))))
             #{x\ 4434}#))
          (module-name (current-module)))))

(define case
  (make-syntax-transformer
    'case
    'macro
    (cons (lambda (#{x\ 4442}#)
            ((lambda (#{tmp\ 4444}#)
               ((lambda (#{tmp\ 4445}#)
                  (if #{tmp\ 4445}#
                    (apply (lambda (#{_\ 4450}#
                                    #{e\ 4451}#
                                    #{m1\ 4452}#
                                    #{m2\ 4453}#)
                             ((lambda (#{tmp\ 4455}#)
                                ((lambda (#{body\ 4457}#)
                                   (list '#(syntax-object
                                            let
                                            ((top)
                                             #(ribcage
                                               #(body)
                                               #((top))
                                               #("i4456"))
                                             #(ribcage
                                               #(_ e m1 m2)
                                               #((top) (top) (top) (top))
                                               #("i4446"
                                                 "i4447"
                                                 "i4448"
                                                 "i4449"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i4443")))
                                            (hygiene guile))
                                         (list (list '#(syntax-object
                                                        t
                                                        ((top)
                                                         #(ribcage
                                                           #(body)
                                                           #((top))
                                                           #("i4456"))
                                                         #(ribcage
                                                           #(_ e m1 m2)
                                                           #((top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                           #("i4446"
                                                             "i4447"
                                                             "i4448"
                                                             "i4449"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i4443")))
                                                        (hygiene guile))
                                                     #{e\ 4451}#))
                                         #{body\ 4457}#))
                                 #{tmp\ 4455}#))
                              (letrec ((#{f\ 4461}#
                                         (lambda (#{clause\ 4462}#
                                                  #{clauses\ 4463}#)
                                           (if (null? #{clauses\ 4463}#)
                                             ((lambda (#{tmp\ 4465}#)
                                                ((lambda (#{tmp\ 4466}#)
                                                   (if #{tmp\ 4466}#
                                                     (apply (lambda (#{e1\ 4469}#
                                                                     #{e2\ 4470}#)
                                                              (cons '#(syntax-object
                                                                       begin
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(e1
                                                                            e2)
                                                                          #((top)
                                                                            (top))
                                                                          #("i4467"
                                                                            "i4468"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(f
                                                                            clause
                                                                            clauses)
                                                                          #((top)
                                                                            (top)
                                                                            (top))
                                                                          #("i4458"
                                                                            "i4459"
                                                                            "i4460"))
                                                                        #(ribcage
                                                                          #(_
                                                                            e
                                                                            m1
                                                                            m2)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i4446"
                                                                            "i4447"
                                                                            "i4448"
                                                                            "i4449"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(x)
                                                                          #((top))
                                                                          #("i4443")))
                                                                       (hygiene
                                                                         guile))
                                                                    (cons #{e1\ 4469}#
                                                                          #{e2\ 4470}#)))
                                                            #{tmp\ 4466}#)
                                                     ((lambda (#{tmp\ 4472}#)
                                                        (if #{tmp\ 4472}#
                                                          (apply (lambda (#{k\ 4476}#
                                                                          #{e1\ 4477}#
                                                                          #{e2\ 4478}#)
                                                                   (list '#(syntax-object
                                                                            if
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(k
                                                                                 e1
                                                                                 e2)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4473"
                                                                                 "i4474"
                                                                                 "i4475"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(f
                                                                                 clause
                                                                                 clauses)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4458"
                                                                                 "i4459"
                                                                                 "i4460"))
                                                                             #(ribcage
                                                                               #(_
                                                                                 e
                                                                                 m1
                                                                                 m2)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4446"
                                                                                 "i4447"
                                                                                 "i4448"
                                                                                 "i4449"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(x)
                                                                               #((top))
                                                                               #("i4443")))
                                                                            (hygiene
                                                                              guile))
                                                                         (list '#(syntax-object
                                                                                  memv
                                                                                  ((top)
                                                                                   #(ribcage
                                                                                     #(k
                                                                                       e1
                                                                                       e2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4473"
                                                                                       "i4474"
                                                                                       "i4475"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(f
                                                                                       clause
                                                                                       clauses)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4458"
                                                                                       "i4459"
                                                                                       "i4460"))
                                                                                   #(ribcage
                                                                                     #(_
                                                                                       e
                                                                                       m1
                                                                                       m2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4446"
                                                                                       "i4447"
                                                                                       "i4448"
                                                                                       "i4449"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(x)
                                                                                     #((top))
                                                                                     #("i4443")))
                                                                                  (hygiene
                                                                                    guile))
                                                                               '#(syntax-object
                                                                                  t
                                                                                  ((top)
                                                                                   #(ribcage
                                                                                     #(k
                                                                                       e1
                                                                                       e2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4473"
                                                                                       "i4474"
                                                                                       "i4475"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(f
                                                                                       clause
                                                                                       clauses)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4458"
                                                                                       "i4459"
                                                                                       "i4460"))
                                                                                   #(ribcage
                                                                                     #(_
                                                                                       e
                                                                                       m1
                                                                                       m2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4446"
                                                                                       "i4447"
                                                                                       "i4448"
                                                                                       "i4449"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(x)
                                                                                     #((top))
                                                                                     #("i4443")))
                                                                                  (hygiene
                                                                                    guile))
                                                                               (list '#(syntax-object
                                                                                        quote
                                                                                        ((top)
                                                                                         #(ribcage
                                                                                           #(k
                                                                                             e1
                                                                                             e2)
                                                                                           #((top)
                                                                                             (top)
                                                                                             (top))
                                                                                           #("i4473"
                                                                                             "i4474"
                                                                                             "i4475"))
                                                                                         #(ribcage
                                                                                           ()
                                                                                           ()
                                                                                           ())
                                                                                         #(ribcage
                                                                                           #(f
                                                                                             clause
                                                                                             clauses)
                                                                                           #((top)
                                                                                             (top)
                                                                                             (top))
                                                                                           #("i4458"
                                                                                             "i4459"
                                                                                             "i4460"))
                                                                                         #(ribcage
                                                                                           #(_
                                                                                             e
                                                                                             m1
                                                                                             m2)
                                                                                           #((top)
                                                                                             (top)
                                                                                             (top)
                                                                                             (top))
                                                                                           #("i4446"
                                                                                             "i4447"
                                                                                             "i4448"
                                                                                             "i4449"))
                                                                                         #(ribcage
                                                                                           ()
                                                                                           ()
                                                                                           ())
                                                                                         #(ribcage
                                                                                           #(x)
                                                                                           #((top))
                                                                                           #("i4443")))
                                                                                        (hygiene
                                                                                          guile))
                                                                                     #{k\ 4476}#))
                                                                         (cons '#(syntax-object
                                                                                  begin
                                                                                  ((top)
                                                                                   #(ribcage
                                                                                     #(k
                                                                                       e1
                                                                                       e2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4473"
                                                                                       "i4474"
                                                                                       "i4475"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(f
                                                                                       clause
                                                                                       clauses)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4458"
                                                                                       "i4459"
                                                                                       "i4460"))
                                                                                   #(ribcage
                                                                                     #(_
                                                                                       e
                                                                                       m1
                                                                                       m2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4446"
                                                                                       "i4447"
                                                                                       "i4448"
                                                                                       "i4449"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(x)
                                                                                     #((top))
                                                                                     #("i4443")))
                                                                                  (hygiene
                                                                                    guile))
                                                                               (cons #{e1\ 4477}#
                                                                                     #{e2\ 4478}#))))
                                                                 #{tmp\ 4472}#)
                                                          ((lambda (#{_\ 4482}#)
                                                             (syntax-violation
                                                               'case
                                                               "bad clause"
                                                               #{x\ 4442}#
                                                               #{clause\ 4462}#))
                                                           #{tmp\ 4465}#)))
                                                      ($sc-dispatch
                                                        #{tmp\ 4465}#
                                                        '(each-any
                                                           any
                                                           .
                                                           each-any)))))
                                                 ($sc-dispatch
                                                   #{tmp\ 4465}#
                                                   '(#(free-id
                                                       #(syntax-object
                                                         else
                                                         ((top)
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(f clause clauses)
                                                            #((top)
                                                              (top)
                                                              (top))
                                                            #("i4458"
                                                              "i4459"
                                                              "i4460"))
                                                          #(ribcage
                                                            #(_ e m1 m2)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i4446"
                                                              "i4447"
                                                              "i4448"
                                                              "i4449"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i4443")))
                                                         (hygiene guile)))
                                                     any
                                                     .
                                                     each-any))))
                                              #{clause\ 4462}#)
                                             ((lambda (#{tmp\ 4484}#)
                                                ((lambda (#{rest\ 4486}#)
                                                   ((lambda (#{tmp\ 4487}#)
                                                      ((lambda (#{tmp\ 4488}#)
                                                         (if #{tmp\ 4488}#
                                                           (apply (lambda (#{k\ 4492}#
                                                                           #{e1\ 4493}#
                                                                           #{e2\ 4494}#)
                                                                    (list '#(syntax-object
                                                                             if
                                                                             ((top)
                                                                              #(ribcage
                                                                                #(k
                                                                                  e1
                                                                                  e2)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4489"
                                                                                  "i4490"
                                                                                  "i4491"))
                                                                              #(ribcage
                                                                                #(rest)
                                                                                #((top))
                                                                                #("i4485"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(f
                                                                                  clause
                                                                                  clauses)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4458"
                                                                                  "i4459"
                                                                                  "i4460"))
                                                                              #(ribcage
                                                                                #(_
                                                                                  e
                                                                                  m1
                                                                                  m2)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4446"
                                                                                  "i4447"
                                                                                  "i4448"
                                                                                  "i4449"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(x)
                                                                                #((top))
                                                                                #("i4443")))
                                                                             (hygiene
                                                                               guile))
                                                                          (list '#(syntax-object
                                                                                   memv
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(k
                                                                                        e1
                                                                                        e2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4489"
                                                                                        "i4490"
                                                                                        "i4491"))
                                                                                    #(ribcage
                                                                                      #(rest)
                                                                                      #((top))
                                                                                      #("i4485"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(f
                                                                                        clause
                                                                                        clauses)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4458"
                                                                                        "i4459"
                                                                                        "i4460"))
                                                                                    #(ribcage
                                                                                      #(_
                                                                                        e
                                                                                        m1
                                                                                        m2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4446"
                                                                                        "i4447"
                                                                                        "i4448"
                                                                                        "i4449"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(x)
                                                                                      #((top))
                                                                                      #("i4443")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                '#(syntax-object
                                                                                   t
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(k
                                                                                        e1
                                                                                        e2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4489"
                                                                                        "i4490"
                                                                                        "i4491"))
                                                                                    #(ribcage
                                                                                      #(rest)
                                                                                      #((top))
                                                                                      #("i4485"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(f
                                                                                        clause
                                                                                        clauses)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4458"
                                                                                        "i4459"
                                                                                        "i4460"))
                                                                                    #(ribcage
                                                                                      #(_
                                                                                        e
                                                                                        m1
                                                                                        m2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4446"
                                                                                        "i4447"
                                                                                        "i4448"
                                                                                        "i4449"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(x)
                                                                                      #((top))
                                                                                      #("i4443")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                (list '#(syntax-object
                                                                                         quote
                                                                                         ((top)
                                                                                          #(ribcage
                                                                                            #(k
                                                                                              e1
                                                                                              e2)
                                                                                            #((top)
                                                                                              (top)
                                                                                              (top))
                                                                                            #("i4489"
                                                                                              "i4490"
                                                                                              "i4491"))
                                                                                          #(ribcage
                                                                                            #(rest)
                                                                                            #((top))
                                                                                            #("i4485"))
                                                                                          #(ribcage
                                                                                            ()
                                                                                            ()
                                                                                            ())
                                                                                          #(ribcage
                                                                                            #(f
                                                                                              clause
                                                                                              clauses)
                                                                                            #((top)
                                                                                              (top)
                                                                                              (top))
                                                                                            #("i4458"
                                                                                              "i4459"
                                                                                              "i4460"))
                                                                                          #(ribcage
                                                                                            #(_
                                                                                              e
                                                                                              m1
                                                                                              m2)
                                                                                            #((top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top))
                                                                                            #("i4446"
                                                                                              "i4447"
                                                                                              "i4448"
                                                                                              "i4449"))
                                                                                          #(ribcage
                                                                                            ()
                                                                                            ()
                                                                                            ())
                                                                                          #(ribcage
                                                                                            #(x)
                                                                                            #((top))
                                                                                            #("i4443")))
                                                                                         (hygiene
                                                                                           guile))
                                                                                      #{k\ 4492}#))
                                                                          (cons '#(syntax-object
                                                                                   begin
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(k
                                                                                        e1
                                                                                        e2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4489"
                                                                                        "i4490"
                                                                                        "i4491"))
                                                                                    #(ribcage
                                                                                      #(rest)
                                                                                      #((top))
                                                                                      #("i4485"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(f
                                                                                        clause
                                                                                        clauses)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4458"
                                                                                        "i4459"
                                                                                        "i4460"))
                                                                                    #(ribcage
                                                                                      #(_
                                                                                        e
                                                                                        m1
                                                                                        m2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4446"
                                                                                        "i4447"
                                                                                        "i4448"
                                                                                        "i4449"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(x)
                                                                                      #((top))
                                                                                      #("i4443")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                (cons #{e1\ 4493}#
                                                                                      #{e2\ 4494}#))
                                                                          #{rest\ 4486}#))
                                                                  #{tmp\ 4488}#)
                                                           ((lambda (#{_\ 4498}#)
                                                              (syntax-violation
                                                                'case
                                                                "bad clause"
                                                                #{x\ 4442}#
                                                                #{clause\ 4462}#))
                                                            #{tmp\ 4487}#)))
                                                       ($sc-dispatch
                                                         #{tmp\ 4487}#
                                                         '(each-any
                                                            any
                                                            .
                                                            each-any))))
                                                    #{clause\ 4462}#))
                                                 #{tmp\ 4484}#))
                                              (#{f\ 4461}#
                                                (car #{clauses\ 4463}#)
                                                (cdr #{clauses\ 4463}#)))))))
                                (#{f\ 4461}# #{m1\ 4452}# #{m2\ 4453}#))))
                           #{tmp\ 4445}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 4444}#)))
                ($sc-dispatch
                  #{tmp\ 4444}#
                  '(any any any . each-any))))
             #{x\ 4442}#))
          (module-name (current-module)))))

(define identifier-syntax
  (make-syntax-transformer
    'identifier-syntax
    'macro
    (cons (lambda (#{x\ 4499}#)
            ((lambda (#{tmp\ 4501}#)
               ((lambda (#{tmp\ 4502}#)
                  (if #{tmp\ 4502}#
                    (apply (lambda (#{_\ 4505}# #{e\ 4506}#)
                             (list '#(syntax-object
                                      lambda
                                      ((top)
                                       #(ribcage
                                         #(_ e)
                                         #((top) (top))
                                         #("i4503" "i4504"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4500")))
                                      (hygiene guile))
                                   '(#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(_ e)
                                          #((top) (top))
                                          #("i4503" "i4504"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i4500")))
                                       (hygiene guile)))
                                   '#((#(syntax-object
                                         macro-type
                                         ((top)
                                          #(ribcage
                                            #(_ e)
                                            #((top) (top))
                                            #("i4503" "i4504"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i4500")))
                                         (hygiene guile))
                                       .
                                       #(syntax-object
                                         identifier-syntax
                                         ((top)
                                          #(ribcage
                                            #(_ e)
                                            #((top) (top))
                                            #("i4503" "i4504"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i4500")))
                                         (hygiene guile))))
                                   (list '#(syntax-object
                                            syntax-case
                                            ((top)
                                             #(ribcage
                                               #(_ e)
                                               #((top) (top))
                                               #("i4503" "i4504"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i4500")))
                                            (hygiene guile))
                                         '#(syntax-object
                                            x
                                            ((top)
                                             #(ribcage
                                               #(_ e)
                                               #((top) (top))
                                               #("i4503" "i4504"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i4500")))
                                            (hygiene guile))
                                         '()
                                         (list '#(syntax-object
                                                  id
                                                  ((top)
                                                   #(ribcage
                                                     #(_ e)
                                                     #((top) (top))
                                                     #("i4503" "i4504"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i4500")))
                                                  (hygiene guile))
                                               '(#(syntax-object
                                                   identifier?
                                                   ((top)
                                                    #(ribcage
                                                      #(_ e)
                                                      #((top) (top))
                                                      #("i4503" "i4504"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i4500")))
                                                   (hygiene guile))
                                                 (#(syntax-object
                                                    syntax
                                                    ((top)
                                                     #(ribcage
                                                       #(_ e)
                                                       #((top) (top))
                                                       #("i4503" "i4504"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i4500")))
                                                    (hygiene guile))
                                                  #(syntax-object
                                                    id
                                                    ((top)
                                                     #(ribcage
                                                       #(_ e)
                                                       #((top) (top))
                                                       #("i4503" "i4504"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i4500")))
                                                    (hygiene guile))))
                                               (list '#(syntax-object
                                                        syntax
                                                        ((top)
                                                         #(ribcage
                                                           #(_ e)
                                                           #((top) (top))
                                                           #("i4503" "i4504"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i4500")))
                                                        (hygiene guile))
                                                     #{e\ 4506}#))
                                         (list (cons #{_\ 4505}#
                                                     '(#(syntax-object
                                                         x
                                                         ((top)
                                                          #(ribcage
                                                            #(_ e)
                                                            #((top) (top))
                                                            #("i4503" "i4504"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i4500")))
                                                         (hygiene guile))
                                                       #(syntax-object
                                                         ...
                                                         ((top)
                                                          #(ribcage
                                                            #(_ e)
                                                            #((top) (top))
                                                            #("i4503" "i4504"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i4500")))
                                                         (hygiene guile))))
                                               (list '#(syntax-object
                                                        syntax
                                                        ((top)
                                                         #(ribcage
                                                           #(_ e)
                                                           #((top) (top))
                                                           #("i4503" "i4504"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i4500")))
                                                        (hygiene guile))
                                                     (cons #{e\ 4506}#
                                                           '(#(syntax-object
                                                               x
                                                               ((top)
                                                                #(ribcage
                                                                  #(_ e)
                                                                  #((top)
                                                                    (top))
                                                                  #("i4503"
                                                                    "i4504"))
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  #(x)
                                                                  #((top))
                                                                  #("i4500")))
                                                               (hygiene guile))
                                                             #(syntax-object
                                                               ...
                                                               ((top)
                                                                #(ribcage
                                                                  #(_ e)
                                                                  #((top)
                                                                    (top))
                                                                  #("i4503"
                                                                    "i4504"))
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  #(x)
                                                                  #((top))
                                                                  #("i4500")))
                                                               (hygiene
                                                                 guile)))))))))
                           #{tmp\ 4502}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 4501}#)))
                ($sc-dispatch #{tmp\ 4501}# (quote (any any)))))
             #{x\ 4499}#))
          (module-name (current-module)))))

(define define*
  (make-syntax-transformer
    'define*
    'macro
    (cons (lambda (#{x\ 4507}#)
            ((lambda (#{tmp\ 4509}#)
               ((lambda (#{tmp\ 4510}#)
                  (if #{tmp\ 4510}#
                    (apply (lambda (#{_\ 4516}#
                                    #{id\ 4517}#
                                    #{args\ 4518}#
                                    #{b0\ 4519}#
                                    #{b1\ 4520}#)
                             (list '#(syntax-object
                                      define
                                      ((top)
                                       #(ribcage
                                         #(_ id args b0 b1)
                                         #((top) (top) (top) (top) (top))
                                         #("i4511"
                                           "i4512"
                                           "i4513"
                                           "i4514"
                                           "i4515"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4508")))
                                      (hygiene guile))
                                   #{id\ 4517}#
                                   (cons '#(syntax-object
                                            lambda*
                                            ((top)
                                             #(ribcage
                                               #(_ id args b0 b1)
                                               #((top) (top) (top) (top) (top))
                                               #("i4511"
                                                 "i4512"
                                                 "i4513"
                                                 "i4514"
                                                 "i4515"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i4508")))
                                            (hygiene guile))
                                         (cons #{args\ 4518}#
                                               (cons #{b0\ 4519}#
                                                     #{b1\ 4520}#)))))
                           #{tmp\ 4510}#)
                    ((lambda (#{tmp\ 4522}#)
                       (if (if #{tmp\ 4522}#
                             (apply (lambda (#{_\ 4526}#
                                             #{id\ 4527}#
                                             #{val\ 4528}#)
                                      (identifier?
                                        '#(syntax-object
                                           x
                                           ((top)
                                            #(ribcage
                                              #(_ id val)
                                              #((top) (top) (top))
                                              #("i4523" "i4524" "i4525"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i4508")))
                                           (hygiene guile))))
                                    #{tmp\ 4522}#)
                             #f)
                         (apply (lambda (#{_\ 4532}#
                                         #{id\ 4533}#
                                         #{val\ 4534}#)
                                  (list '#(syntax-object
                                           define
                                           ((top)
                                            #(ribcage
                                              #(_ id val)
                                              #((top) (top) (top))
                                              #("i4529" "i4530" "i4531"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i4508")))
                                           (hygiene guile))
                                        #{id\ 4533}#
                                        #{val\ 4534}#))
                                #{tmp\ 4522}#)
                         (syntax-violation
                           #f
                           "source expression failed to match any pattern"
                           #{tmp\ 4509}#)))
                     ($sc-dispatch
                       #{tmp\ 4509}#
                       '(any any any)))))
                ($sc-dispatch
                  #{tmp\ 4509}#
                  '(any (any . any) any . each-any))))
             #{x\ 4507}#))
          (module-name (current-module)))))

