(eval-when (compile) (set-current-module (resolve-module (quote (guile)))))
(if #f #f)

(letrec*
  ((#{top-level-eval-hook 28198}#
     (lambda (#{x 58998}# #{mod 58999}#)
       (primitive-eval #{x 58998}#)))
   (#{maybe-name-value! 28203}#
     (lambda (#{name 42551}# #{val 42552}#)
       (if (if (struct? #{val 42552}#)
             (eq? (struct-vtable #{val 42552}#)
                  (vector-ref %expanded-vtables 14))
             #f)
         (let ((#{meta 42559}# (struct-ref #{val 42552}# 1)))
           (if (not (assq 'name #{meta 42559}#))
             (let ((#{v 42564}#
                     (cons (cons 'name #{name 42551}#) #{meta 42559}#)))
               (struct-set! #{val 42552}# 1 #{v 42564}#)))))))
   (#{build-call 28205}#
     (lambda (#{source 42296}#
              #{fun-exp 42297}#
              #{arg-exps 42298}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 11)
         #{source 42296}#
         #{fun-exp 42297}#
         #{arg-exps 42298}#)))
   (#{build-conditional 28206}#
     (lambda (#{source 42304}#
              #{test-exp 42305}#
              #{then-exp 42306}#
              #{else-exp 42307}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 10)
         #{source 42304}#
         #{test-exp 42305}#
         #{then-exp 42306}#
         #{else-exp 42307}#)))
   (#{build-dynlet 28207}#
     (lambda (#{source 42314}#
              #{fluids 42315}#
              #{vals 42316}#
              #{body 42317}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 18)
         #{source 42314}#
         #{fluids 42315}#
         #{vals 42316}#
         #{body 42317}#)))
   (#{build-lexical-reference 28208}#
     (lambda (#{type 59000}#
              #{source 59001}#
              #{name 59002}#
              #{var 59003}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 3)
         #{source 59001}#
         #{name 59002}#
         #{var 59003}#)))
   (#{build-lexical-assignment 28209}#
     (lambda (#{source 42324}#
              #{name 42325}#
              #{var 42326}#
              #{exp 42327}#)
       (begin
         (if (if (struct? #{exp 42327}#)
               (eq? (struct-vtable #{exp 42327}#)
                    (vector-ref %expanded-vtables 14))
               #f)
           (let ((#{meta 42343}# (struct-ref #{exp 42327}# 1)))
             (if (not (assq 'name #{meta 42343}#))
               (let ((#{v 42350}#
                       (cons (cons 'name #{name 42325}#) #{meta 42343}#)))
                 (struct-set! #{exp 42327}# 1 #{v 42350}#)))))
         (make-struct/no-tail
           (vector-ref %expanded-vtables 4)
           #{source 42324}#
           #{name 42325}#
           #{var 42326}#
           #{exp 42327}#))))
   (#{analyze-variable 28210}#
     (lambda (#{mod 59009}#
              #{var 59010}#
              #{modref-cont 59011}#
              #{bare-cont 59012}#)
       (if (not #{mod 59009}#)
         (#{bare-cont 59012}# #{var 59010}#)
         (let ((#{kind 59013}# (car #{mod 59009}#))
               (#{mod 59014}# (cdr #{mod 59009}#)))
           (if (eqv? #{kind 59013}# 'public)
             (#{modref-cont 59011}#
               #{mod 59014}#
               #{var 59010}#
               #t)
             (if (eqv? #{kind 59013}# 'private)
               (if (not (equal?
                          #{mod 59014}#
                          (module-name (current-module))))
                 (#{modref-cont 59011}#
                   #{mod 59014}#
                   #{var 59010}#
                   #f)
                 (#{bare-cont 59012}# #{var 59010}#))
               (if (eqv? #{kind 59013}# 'bare)
                 (#{bare-cont 59012}# #{var 59010}#)
                 (if (eqv? #{kind 59013}# 'hygiene)
                   (if (if (not (equal?
                                  #{mod 59014}#
                                  (module-name (current-module))))
                         (module-variable
                           (resolve-module #{mod 59014}#)
                           #{var 59010}#)
                         #f)
                     (#{modref-cont 59011}#
                       #{mod 59014}#
                       #{var 59010}#
                       #f)
                     (#{bare-cont 59012}# #{var 59010}#))
                   (syntax-violation
                     #f
                     "bad module kind"
                     #{var 59010}#
                     #{mod 59014}#)))))))))
   (#{build-global-reference 28211}#
     (lambda (#{source 59029}# #{var 59030}# #{mod 59031}#)
       (#{analyze-variable 28210}#
         #{mod 59031}#
         #{var 59030}#
         (lambda (#{mod 59034}# #{var 59035}# #{public? 59036}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 5)
             #{source 59029}#
             #{mod 59034}#
             #{var 59035}#
             #{public? 59036}#))
         (lambda (#{var 59043}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 7)
             #{source 59029}#
             #{var 59043}#)))))
   (#{build-global-assignment 28212}#
     (lambda (#{source 42359}#
              #{var 42360}#
              #{exp 42361}#
              #{mod 42362}#)
       (begin
         (if (if (struct? #{exp 42361}#)
               (eq? (struct-vtable #{exp 42361}#)
                    (vector-ref %expanded-vtables 14))
               #f)
           (let ((#{meta 42378}# (struct-ref #{exp 42361}# 1)))
             (if (not (assq 'name #{meta 42378}#))
               (let ((#{v 42385}#
                       (cons (cons 'name #{var 42360}#) #{meta 42378}#)))
                 (struct-set! #{exp 42361}# 1 #{v 42385}#)))))
         (#{analyze-variable 28210}#
           #{mod 42362}#
           #{var 42360}#
           (lambda (#{mod 42390}# #{var 42391}# #{public? 42392}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 6)
               #{source 42359}#
               #{mod 42390}#
               #{var 42391}#
               #{public? 42392}#
               #{exp 42361}#))
           (lambda (#{var 42400}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 8)
               #{source 42359}#
               #{var 42400}#
               #{exp 42361}#))))))
   (#{build-global-definition 28213}#
     (lambda (#{source 59048}# #{var 59049}# #{exp 59050}#)
       (begin
         (if (if (struct? #{exp 59050}#)
               (eq? (struct-vtable #{exp 59050}#)
                    (vector-ref %expanded-vtables 14))
               #f)
           (let ((#{meta 59066}# (struct-ref #{exp 59050}# 1)))
             (if (not (assq 'name #{meta 59066}#))
               (let ((#{v 59073}#
                       (cons (cons 'name #{var 59049}#) #{meta 59066}#)))
                 (struct-set! #{exp 59050}# 1 #{v 59073}#)))))
         (make-struct/no-tail
           (vector-ref %expanded-vtables 9)
           #{source 59048}#
           #{var 59049}#
           #{exp 59050}#))))
   (#{build-simple-lambda 28214}#
     (lambda (#{src 42406}#
              #{req 42407}#
              #{rest 42408}#
              #{vars 42409}#
              #{meta 42410}#
              #{exp 42411}#)
       (let ((#{body 42417}#
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 15)
                 #{src 42406}#
                 #{req 42407}#
                 #f
                 #{rest 42408}#
                 #f
                 '()
                 #{vars 42409}#
                 #{exp 42411}#
                 #f)))
         (make-struct/no-tail
           (vector-ref %expanded-vtables 14)
           #{src 42406}#
           #{meta 42410}#
           #{body 42417}#))))
   (#{build-primcall 28217}#
     (lambda (#{src 42429}# #{name 42430}# #{args 42431}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 12)
         #{src 42429}#
         #{name 42430}#
         #{args 42431}#)))
   (#{build-sequence 28220}#
     (lambda (#{src 59081}# #{exps 59082}#)
       (if (null? (cdr #{exps 59082}#))
         (car #{exps 59082}#)
         (let ((#{head 59086}# (car #{exps 59082}#))
               (#{tail 59087}#
                 (#{build-sequence 28220}#
                   #f
                   (cdr #{exps 59082}#))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 13)
             #{src 59081}#
             #{head 59086}#
             #{tail 59087}#)))))
   (#{build-named-let 28222}#
     (lambda (#{src 42437}#
              #{ids 42438}#
              #{vars 42439}#
              #{val-exps 42440}#
              #{body-exp 42441}#)
       (let ((#{f 42442}# (car #{vars 42439}#))
             (#{f-name 42443}# (car #{ids 42438}#))
             (#{vars 42444}# (cdr #{vars 42439}#))
             (#{ids 42445}# (cdr #{ids 42438}#)))
         (let ((#{proc 42446}#
                 (let ((#{body 42466}#
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 15)
                           #{src 42437}#
                           #{ids 42445}#
                           #f
                           #f
                           #f
                           '()
                           #{vars 42444}#
                           #{body-exp 42441}#
                           #f)))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 14)
                     #{src 42437}#
                     '()
                     #{body 42466}#))))
           (begin
             (if (if (struct? #{proc 42446}#)
                   (eq? (struct-vtable #{proc 42446}#)
                        (vector-ref %expanded-vtables 14))
                   #f)
               (let ((#{meta 42490}# (struct-ref #{proc 42446}# 1)))
                 (if (not (assq 'name #{meta 42490}#))
                   (let ((#{v 42497}#
                           (cons (cons 'name #{f-name 42443}#)
                                 #{meta 42490}#)))
                     (struct-set! #{proc 42446}# 1 #{v 42497}#)))))
             (for-each
               #{maybe-name-value! 28203}#
               #{ids 42445}#
               #{val-exps 42440}#)
             (let ((#{names 42521}# (list #{f-name 42443}#))
                   (#{gensyms 42522}# (list #{f 42442}#))
                   (#{vals 42523}# (list #{proc 42446}#))
                   (#{body 42524}#
                     (let ((#{fun-exp 42528}#
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 3)
                               #{src 42437}#
                               #{f-name 42443}#
                               #{f 42442}#)))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 11)
                         #{src 42437}#
                         #{fun-exp 42528}#
                         #{val-exps 42440}#))))
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 17)
                 #{src 42437}#
                 #f
                 #{names 42521}#
                 #{gensyms 42522}#
                 #{vals 42523}#
                 #{body 42524}#)))))))
   (#{build-letrec 28223}#
     (lambda (#{src 42544}#
              #{in-order? 42545}#
              #{ids 42546}#
              #{vars 42547}#
              #{val-exps 42548}#
              #{body-exp 42549}#)
       (if (null? #{vars 42547}#)
         #{body-exp 42549}#
         (begin
           (for-each
             #{maybe-name-value! 28203}#
             #{ids 42546}#
             #{val-exps 42548}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 17)
             #{src 42544}#
             #{in-order? 42545}#
             #{ids 42546}#
             #{vars 42547}#
             #{val-exps 42548}#
             #{body-exp 42549}#)))))
   (#{source-annotation 28232}#
     (lambda (#{x 42575}#)
       (if (if (vector? #{x 42575}#)
             (if (= (vector-length #{x 42575}#) 4)
               (eq? (vector-ref #{x 42575}# 0) 'syntax-object)
               #f)
             #f)
         (#{source-annotation 28232}#
           (vector-ref #{x 42575}# 1))
         (if (pair? #{x 42575}#)
           (let ((#{props 42590}# (source-properties #{x 42575}#)))
             (if (pair? #{props 42590}#) #{props 42590}# #f))
           #f))))
   (#{extend-env 28233}#
     (lambda (#{labels 42592}# #{bindings 42593}# #{r 42594}#)
       (if (null? #{labels 42592}#)
         #{r 42594}#
         (#{extend-env 28233}#
           (cdr #{labels 42592}#)
           (cdr #{bindings 42593}#)
           (cons (cons (car #{labels 42592}#)
                       (car #{bindings 42593}#))
                 #{r 42594}#)))))
   (#{extend-var-env 28234}#
     (lambda (#{labels 42595}# #{vars 42596}# #{r 42597}#)
       (if (null? #{labels 42595}#)
         #{r 42597}#
         (#{extend-var-env 28234}#
           (cdr #{labels 42595}#)
           (cdr #{vars 42596}#)
           (cons (cons (car #{labels 42595}#)
                       (cons 'lexical (car #{vars 42596}#)))
                 #{r 42597}#)))))
   (#{macros-only-env 28235}#
     (lambda (#{r 42598}#)
       (if (null? #{r 42598}#)
         '()
         (let ((#{a 42599}# (car #{r 42598}#)))
           (if (let ((#{t 42602}# (car (cdr #{a 42599}#))))
                 (if (eq? #{t 42602}# 'macro)
                   #t
                   (eq? #{t 42602}# 'syntax-parameter)))
             (cons #{a 42599}#
                   (#{macros-only-env 28235}# (cdr #{r 42598}#)))
             (#{macros-only-env 28235}# (cdr #{r 42598}#)))))))
   (#{global-extend 28236}#
     (lambda (#{type 42604}# #{sym 42605}# #{val 42606}#)
       (module-define!
         (current-module)
         #{sym 42605}#
         (make-syntax-transformer
           #{sym 42605}#
           #{type 42604}#
           #{val 42606}#))))
   (#{id? 28238}#
     (lambda (#{x 35679}#)
       (if (symbol? #{x 35679}#)
         #t
         (if (if (vector? #{x 35679}#)
               (if (= (vector-length #{x 35679}#) 4)
                 (eq? (vector-ref #{x 35679}# 0) 'syntax-object)
                 #f)
               #f)
           (symbol? (vector-ref #{x 35679}# 1))
           #f))))
   (#{gen-labels 28241}#
     (lambda (#{ls 42616}#)
       (if (null? #{ls 42616}#)
         '()
         (cons (symbol->string (gensym "i"))
               (#{gen-labels 28241}# (cdr #{ls 42616}#))))))
   (#{make-binding-wrap 28252}#
     (lambda (#{ids 42620}# #{labels 42621}# #{w 42622}#)
       (if (null? #{ids 42620}#)
         #{w 42622}#
         (cons (car #{w 42622}#)
               (cons (let ((#{labelvec 42623}#
                             (list->vector #{labels 42621}#)))
                       (let ((#{n 42624}# (vector-length #{labelvec 42623}#)))
                         (let ((#{symnamevec 42625}# (make-vector #{n 42624}#))
                               (#{marksvec 42626}# (make-vector #{n 42624}#)))
                           (begin
                             (letrec*
                               ((#{f 42627}#
                                  (lambda (#{ids 42824}# #{i 42825}#)
                                    (if (not (null? #{ids 42824}#))
                                      (call-with-values
                                        (lambda ()
                                          (let ((#{x 42828}#
                                                  (car #{ids 42824}#)))
                                            (if (if (vector? #{x 42828}#)
                                                  (if (= (vector-length
                                                           #{x 42828}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{x 42828}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (values
                                                (vector-ref #{x 42828}# 1)
                                                (let ((#{m1 42844}#
                                                        (car #{w 42622}#))
                                                      (#{m2 42845}#
                                                        (car (vector-ref
                                                               #{x 42828}#
                                                               2))))
                                                  (if (null? #{m2 42845}#)
                                                    #{m1 42844}#
                                                    (append
                                                      #{m1 42844}#
                                                      #{m2 42845}#))))
                                              (values
                                                #{x 42828}#
                                                (car #{w 42622}#)))))
                                        (lambda (#{symname 42865}#
                                                 #{marks 42866}#)
                                          (begin
                                            (vector-set!
                                              #{symnamevec 42625}#
                                              #{i 42825}#
                                              #{symname 42865}#)
                                            (vector-set!
                                              #{marksvec 42626}#
                                              #{i 42825}#
                                              #{marks 42866}#)
                                            (#{f 42627}#
                                              (cdr #{ids 42824}#)
                                              (#{1+}# #{i 42825}#)))))))))
                               (#{f 42627}# #{ids 42620}# 0))
                             (vector
                               'ribcage
                               #{symnamevec 42625}#
                               #{marksvec 42626}#
                               #{labelvec 42623}#)))))
                     (cdr #{w 42622}#))))))
   (#{same-marks? 28256}#
     (lambda (#{x 59088}# #{y 59089}#)
       (if (eq? #{x 59088}# #{y 59089}#)
         (eq? #{x 59088}# #{y 59089}#)
         (if (not (null? #{x 59088}#))
           (if (not (null? #{y 59089}#))
             (if (eq? (car #{x 59088}#) (car #{y 59089}#))
               (#{same-marks? 28256}#
                 (cdr #{x 59088}#)
                 (cdr #{y 59089}#))
               #f)
             #f)
           #f))))
   (#{id-var-name 28257}#
     (lambda (#{id 59097}# #{w 59098}# #{mod 59099}#)
       (letrec*
         ((#{search 59100}#
            (lambda (#{sym 59166}#
                     #{subst 59167}#
                     #{marks 59168}#
                     #{mod 59169}#)
              (if (null? #{subst 59167}#)
                (values #f #{marks 59168}#)
                (let ((#{fst 59170}# (car #{subst 59167}#)))
                  (if (eq? #{fst 59170}# 'shift)
                    (#{search 59100}#
                      #{sym 59166}#
                      (cdr #{subst 59167}#)
                      (cdr #{marks 59168}#)
                      #{mod 59169}#)
                    (let ((#{symnames 59172}# (vector-ref #{fst 59170}# 1)))
                      (if (vector? #{symnames 59172}#)
                        (#{search-vector-rib 59102}#
                          #{sym 59166}#
                          #{subst 59167}#
                          #{marks 59168}#
                          #{symnames 59172}#
                          #{fst 59170}#
                          #{mod 59169}#)
                        (#{search-list-rib 59101}#
                          #{sym 59166}#
                          #{subst 59167}#
                          #{marks 59168}#
                          #{symnames 59172}#
                          #{fst 59170}#
                          #{mod 59169}#))))))))
          (#{search-list-rib 59101}#
            (lambda (#{sym 59347}#
                     #{subst 59348}#
                     #{marks 59349}#
                     #{symnames 59350}#
                     #{ribcage 59351}#
                     #{mod 59352}#)
              (letrec*
                ((#{f 59353}#
                   (lambda (#{symnames 59356}# #{i 59357}#)
                     (if (null? #{symnames 59356}#)
                       (#{search 59100}#
                         #{sym 59347}#
                         (cdr #{subst 59348}#)
                         #{marks 59349}#
                         #{mod 59352}#)
                       (if (if (eq? (car #{symnames 59356}#) #{sym 59347}#)
                             (#{same-marks? 28256}#
                               #{marks 59349}#
                               (list-ref
                                 (vector-ref #{ribcage 59351}# 2)
                                 #{i 59357}#))
                             #f)
                         (let ((#{n 59503}#
                                 (list-ref
                                   (vector-ref #{ribcage 59351}# 3)
                                   #{i 59357}#)))
                           (if (pair? #{n 59503}#)
                             (if (equal? #{mod 59352}# (car #{n 59503}#))
                               (values (cdr #{n 59503}#) #{marks 59349}#)
                               (#{f 59353}#
                                 (cdr #{symnames 59356}#)
                                 (#{1+}# #{i 59357}#)))
                             (values #{n 59503}# #{marks 59349}#)))
                         (#{f 59353}#
                           (cdr #{symnames 59356}#)
                           (#{1+}# #{i 59357}#)))))))
                (#{f 59353}# #{symnames 59350}# 0))))
          (#{search-vector-rib 59102}#
            (lambda (#{sym 59508}#
                     #{subst 59509}#
                     #{marks 59510}#
                     #{symnames 59511}#
                     #{ribcage 59512}#
                     #{mod 59513}#)
              (let ((#{n 59514}# (vector-length #{symnames 59511}#)))
                (letrec*
                  ((#{f 59515}#
                     (lambda (#{i 59518}#)
                       (if (= #{i 59518}# #{n 59514}#)
                         (#{search 59100}#
                           #{sym 59508}#
                           (cdr #{subst 59509}#)
                           #{marks 59510}#
                           #{mod 59513}#)
                         (if (if (eq? (vector-ref
                                        #{symnames 59511}#
                                        #{i 59518}#)
                                      #{sym 59508}#)
                               (#{same-marks? 28256}#
                                 #{marks 59510}#
                                 (vector-ref
                                   (vector-ref #{ribcage 59512}# 2)
                                   #{i 59518}#))
                               #f)
                           (let ((#{n 59665}#
                                   (vector-ref
                                     (vector-ref #{ribcage 59512}# 3)
                                     #{i 59518}#)))
                             (if (pair? #{n 59665}#)
                               (if (equal? #{mod 59513}# (car #{n 59665}#))
                                 (values (cdr #{n 59665}#) #{marks 59510}#)
                                 (#{f 59515}# (#{1+}# #{i 59518}#)))
                               (values #{n 59665}# #{marks 59510}#)))
                           (#{f 59515}# (#{1+}# #{i 59518}#)))))))
                  (#{f 59515}# 0))))))
         (if (symbol? #{id 59097}#)
           (let ((#{t 59103}#
                   (#{search 59100}#
                     #{id 59097}#
                     (cdr #{w 59098}#)
                     (car #{w 59098}#)
                     #{mod 59099}#)))
             (if #{t 59103}# #{t 59103}# #{id 59097}#))
           (if (if (vector? #{id 59097}#)
                 (if (= (vector-length #{id 59097}#) 4)
                   (eq? (vector-ref #{id 59097}# 0) 'syntax-object)
                   #f)
                 #f)
             (let ((#{id 59118}# (vector-ref #{id 59097}# 1))
                   (#{w1 59119}# (vector-ref #{id 59097}# 2))
                   (#{mod 59120}# (vector-ref #{id 59097}# 3)))
               (let ((#{marks 59121}#
                       (let ((#{m1 59131}# (car #{w 59098}#))
                             (#{m2 59132}# (car #{w1 59119}#)))
                         (if (null? #{m2 59132}#)
                           #{m1 59131}#
                           (append #{m1 59131}# #{m2 59132}#)))))
                 (call-with-values
                   (lambda ()
                     (#{search 59100}#
                       #{id 59118}#
                       (cdr #{w 59098}#)
                       #{marks 59121}#
                       #{mod 59120}#))
                   (lambda (#{new-id 59152}# #{marks 59153}#)
                     (if #{new-id 59152}#
                       #{new-id 59152}#
                       (let ((#{t 59161}#
                               (#{search 59100}#
                                 #{id 59118}#
                                 (cdr #{w1 59119}#)
                                 #{marks 59153}#
                                 #{mod 59120}#)))
                         (if #{t 59161}# #{t 59161}# #{id 59118}#)))))))
             (syntax-violation
               'id-var-name
               "invalid id"
               #{id 59097}#))))))
   (#{resolve-identifier 28258}#
     (lambda (#{id 42873}#
              #{w 42874}#
              #{r 42875}#
              #{mod 42876}#
              #{resolve-syntax-parameters? 42877}#)
       (let ((#{n 42881}#
               (#{id-var-name 28257}#
                 #{id 42873}#
                 #{w 42874}#
                 #{mod 42876}#)))
         (if (if (vector? #{n 42881}#)
               (if (= (vector-length #{n 42881}#) 4)
                 (eq? (vector-ref #{n 42881}# 0) 'syntax-object)
                 #f)
               #f)
           (#{resolve-identifier 28258}#
             #{n 42881}#
             #{w 42874}#
             #{r 42875}#
             #{mod 42876}#
             #{resolve-syntax-parameters? 42877}#)
           (if (symbol? #{n 42881}#)
             (let ((#{mod 42896}#
                     (if (if (vector? #{id 42873}#)
                           (if (= (vector-length #{id 42873}#) 4)
                             (eq? (vector-ref #{id 42873}# 0) 'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{id 42873}# 3)
                       #{mod 42876}#)))
               (let ((#{b 42897}#
                       (let ((#{b 42900}#
                               (let ((#{t 42901}#
                                       (begin
                                         (if (if (not #{mod 42896}#)
                                               (current-module)
                                               #f)
                                           (warn "module system is booted, we should have a module"
                                                 #{n 42881}#))
                                         (let ((#{v 42950}#
                                                 (module-variable
                                                   (if #{mod 42896}#
                                                     (resolve-module
                                                       (cdr #{mod 42896}#))
                                                     (current-module))
                                                   #{n 42881}#)))
                                           (if #{v 42950}#
                                             (if (variable-bound? #{v 42950}#)
                                               (let ((#{val 42959}#
                                                       (variable-ref
                                                         #{v 42950}#)))
                                                 (if (macro? #{val 42959}#)
                                                   (if (macro-type
                                                         #{val 42959}#)
                                                     (cons (macro-type
                                                             #{val 42959}#)
                                                           (macro-binding
                                                             #{val 42959}#))
                                                     #f)
                                                   #f))
                                               #f)
                                             #f)))))
                                 (if #{t 42901}# #{t 42901}# '(global)))))
                         (if (if #{resolve-syntax-parameters? 42877}#
                               (eq? (car #{b 42900}#) 'syntax-parameter)
                               #f)
                           (let ((#{t 42968}#
                                   (assq-ref #{r 42875}# (cdr #{b 42900}#))))
                             (if #{t 42968}#
                               #{t 42968}#
                               (cons 'macro (car (cdr #{b 42900}#)))))
                           #{b 42900}#))))
                 (if (eq? (car #{b 42897}#) 'global)
                   (values 'global #{n 42881}# #{mod 42896}#)
                   (values
                     (car #{b 42897}#)
                     (cdr #{b 42897}#)
                     #{mod 42896}#))))
             (if (string? #{n 42881}#)
               (let ((#{mod 42974}#
                       (if (if (vector? #{id 42873}#)
                             (if (= (vector-length #{id 42873}#) 4)
                               (eq? (vector-ref #{id 42873}# 0) 'syntax-object)
                               #f)
                             #f)
                         (vector-ref #{id 42873}# 3)
                         #{mod 42876}#)))
                 (let ((#{b 42975}#
                         (let ((#{b 42978}#
                                 (let ((#{t 42979}#
                                         (assq-ref #{r 42875}# #{n 42881}#)))
                                   (if #{t 42979}#
                                     #{t 42979}#
                                     '(displaced-lexical)))))
                           (if (if #{resolve-syntax-parameters? 42877}#
                                 (eq? (car #{b 42978}#) 'syntax-parameter)
                                 #f)
                             (let ((#{t 42980}#
                                     (assq-ref #{r 42875}# (cdr #{b 42978}#))))
                               (if #{t 42980}#
                                 #{t 42980}#
                                 (cons 'macro (car (cdr #{b 42978}#)))))
                             #{b 42978}#))))
                   (values
                     (car #{b 42975}#)
                     (cdr #{b 42975}#)
                     #{mod 42974}#)))
               (error "unexpected id-var-name"
                      #{id 42873}#
                      #{w 42874}#
                      #{n 42881}#)))))))
   (#{free-id=? 28259}#
     (lambda (#{i 42993}# #{j 42994}#)
       (let ((#{mi 42995}#
               (if (if (vector? #{i 42993}#)
                     (if (= (vector-length #{i 42993}#) 4)
                       (eq? (vector-ref #{i 42993}# 0) 'syntax-object)
                       #f)
                     #f)
                 (vector-ref #{i 42993}# 3)
                 #f)))
         (let ((#{mj 42996}#
                 (if (if (vector? #{j 42994}#)
                       (if (= (vector-length #{j 42994}#) 4)
                         (eq? (vector-ref #{j 42994}# 0) 'syntax-object)
                         #f)
                       #f)
                   (vector-ref #{j 42994}# 3)
                   #f)))
           (let ((#{ni 42997}#
                   (#{id-var-name 28257}#
                     #{i 42993}#
                     '(())
                     #{mi 42995}#)))
             (let ((#{nj 42998}#
                     (#{id-var-name 28257}#
                       #{j 42994}#
                       '(())
                       #{mj 42996}#)))
               (if (if (vector? #{ni 42997}#)
                     (if (= (vector-length #{ni 42997}#) 4)
                       (eq? (vector-ref #{ni 42997}# 0) 'syntax-object)
                       #f)
                     #f)
                 (#{free-id=? 28259}# #{ni 42997}# #{j 42994}#)
                 (if (if (vector? #{nj 42998}#)
                       (if (= (vector-length #{nj 42998}#) 4)
                         (eq? (vector-ref #{nj 42998}# 0) 'syntax-object)
                         #f)
                       #f)
                   (#{free-id=? 28259}# #{i 42993}# #{nj 42998}#)
                   (if (symbol? #{ni 42997}#)
                     (if (eq? #{nj 42998}#
                              (if (if (vector? #{j 42994}#)
                                    (if (= (vector-length #{j 42994}#) 4)
                                      (eq? (vector-ref #{j 42994}# 0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (vector-ref #{j 42994}# 1)
                                #{j 42994}#))
                       (if (let ((#{bi 43070}#
                                   (module-variable
                                     (if #{mi 42995}#
                                       (resolve-module (cdr #{mi 42995}#))
                                       (current-module))
                                     (if (if (vector? #{i 42993}#)
                                           (if (= (vector-length #{i 42993}#)
                                                  4)
                                             (eq? (vector-ref #{i 42993}# 0)
                                                  'syntax-object)
                                             #f)
                                           #f)
                                       (vector-ref #{i 42993}# 1)
                                       #{i 42993}#))))
                             (if #{bi 43070}#
                               (eq? #{bi 43070}#
                                    (module-variable
                                      (if #{mj 42996}#
                                        (resolve-module (cdr #{mj 42996}#))
                                        (current-module))
                                      (if (if (vector? #{j 42994}#)
                                            (if (= (vector-length #{j 42994}#)
                                                   4)
                                              (eq? (vector-ref #{j 42994}# 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (vector-ref #{j 42994}# 1)
                                        #{j 42994}#)))
                               (if (not (module-variable
                                          (if #{mj 42996}#
                                            (resolve-module (cdr #{mj 42996}#))
                                            (current-module))
                                          (if (if (vector? #{j 42994}#)
                                                (if (= (vector-length
                                                         #{j 42994}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{j 42994}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{j 42994}# 1)
                                            #{j 42994}#)))
                                 (eq? #{ni 42997}# #{nj 42998}#)
                                 #f)))
                         (eq? (module-variable
                                (if #{mi 42995}#
                                  (resolve-module (cdr #{mi 42995}#))
                                  (current-module))
                                (if (if (vector? #{i 42993}#)
                                      (if (= (vector-length #{i 42993}#) 4)
                                        (eq? (vector-ref #{i 42993}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (vector-ref #{i 42993}# 1)
                                  #{i 42993}#))
                              (module-variable
                                (if #{mj 42996}#
                                  (resolve-module (cdr #{mj 42996}#))
                                  (current-module))
                                (if (if (vector? #{j 42994}#)
                                      (if (= (vector-length #{j 42994}#) 4)
                                        (eq? (vector-ref #{j 42994}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (vector-ref #{j 42994}# 1)
                                  #{j 42994}#)))
                         #f)
                       #f)
                     (equal? #{ni 42997}# #{nj 42998}#))))))))))
   (#{bound-id=? 28260}#
     (lambda (#{i 43263}# #{j 43264}#)
       (if (if (if (vector? #{i 43263}#)
                 (if (= (vector-length #{i 43263}#) 4)
                   (eq? (vector-ref #{i 43263}# 0) 'syntax-object)
                   #f)
                 #f)
             (if (vector? #{j 43264}#)
               (if (= (vector-length #{j 43264}#) 4)
                 (eq? (vector-ref #{j 43264}# 0) 'syntax-object)
                 #f)
               #f)
             #f)
         (if (eq? (vector-ref #{i 43263}# 1)
                  (vector-ref #{j 43264}# 1))
           (#{same-marks? 28256}#
             (car (vector-ref #{i 43263}# 2))
             (car (vector-ref #{j 43264}# 2)))
           #f)
         (eq? #{i 43263}# #{j 43264}#))))
   (#{valid-bound-ids? 28261}#
     (lambda (#{ids 43433}#)
       (if (letrec*
             ((#{all-ids? 43434}#
                (lambda (#{ids 43631}#)
                  (if (null? #{ids 43631}#)
                    (null? #{ids 43631}#)
                    (if (let ((#{x 43642}# (car #{ids 43631}#)))
                          (if (symbol? #{x 43642}#)
                            #t
                            (if (if (vector? #{x 43642}#)
                                  (if (= (vector-length #{x 43642}#) 4)
                                    (eq? (vector-ref #{x 43642}# 0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (symbol? (vector-ref #{x 43642}# 1))
                              #f)))
                      (#{all-ids? 43434}# (cdr #{ids 43631}#))
                      #f)))))
             (#{all-ids? 43434}# #{ids 43433}#))
         (#{distinct-bound-ids? 28262}# #{ids 43433}#)
         #f)))
   (#{distinct-bound-ids? 28262}#
     (lambda (#{ids 43763}#)
       (letrec*
         ((#{distinct? 43764}#
            (lambda (#{ids 43869}#)
              (if (null? #{ids 43869}#)
                (null? #{ids 43869}#)
                (if (not (#{bound-id-member? 28263}#
                           (car #{ids 43869}#)
                           (cdr #{ids 43869}#)))
                  (#{distinct? 43764}# (cdr #{ids 43869}#))
                  #f)))))
         (#{distinct? 43764}# #{ids 43763}#))))
   (#{bound-id-member? 28263}#
     (lambda (#{x 43965}# #{list 43966}#)
       (if (not (null? #{list 43966}#))
         (let ((#{t 43967}#
                 (#{bound-id=? 28260}#
                   #{x 43965}#
                   (car #{list 43966}#))))
           (if #{t 43967}#
             #{t 43967}#
             (#{bound-id-member? 28263}#
               #{x 43965}#
               (cdr #{list 43966}#))))
         #f)))
   (#{source-wrap 28265}#
     (lambda (#{x 44145}#
              #{w 44146}#
              #{s 44147}#
              #{defmod 44148}#)
       (let ((#{x 44152}#
               (begin
                 (if (if (pair? #{x 44145}#) #{s 44147}# #f)
                   (set-source-properties! #{x 44145}# #{s 44147}#))
                 #{x 44145}#)))
         (if (if (null? (car #{w 44146}#))
               (null? (cdr #{w 44146}#))
               #f)
           #{x 44152}#
           (if (if (vector? #{x 44152}#)
                 (if (= (vector-length #{x 44152}#) 4)
                   (eq? (vector-ref #{x 44152}# 0) 'syntax-object)
                   #f)
                 #f)
             (let ((#{expression 44184}# (vector-ref #{x 44152}# 1))
                   (#{wrap 44185}#
                     (let ((#{w2 44193}# (vector-ref #{x 44152}# 2)))
                       (let ((#{m1 44194}# (car #{w 44146}#))
                             (#{s1 44195}# (cdr #{w 44146}#)))
                         (if (null? #{m1 44194}#)
                           (if (null? #{s1 44195}#)
                             #{w2 44193}#
                             (cons (car #{w2 44193}#)
                                   (let ((#{m2 44210}# (cdr #{w2 44193}#)))
                                     (if (null? #{m2 44210}#)
                                       #{s1 44195}#
                                       (append #{s1 44195}# #{m2 44210}#)))))
                           (cons (let ((#{m2 44218}# (car #{w2 44193}#)))
                                   (if (null? #{m2 44218}#)
                                     #{m1 44194}#
                                     (append #{m1 44194}# #{m2 44218}#)))
                                 (let ((#{m2 44226}# (cdr #{w2 44193}#)))
                                   (if (null? #{m2 44226}#)
                                     #{s1 44195}#
                                     (append #{s1 44195}# #{m2 44226}#))))))))
                   (#{module 44186}# (vector-ref #{x 44152}# 3)))
               (vector
                 'syntax-object
                 #{expression 44184}#
                 #{wrap 44185}#
                 #{module 44186}#))
             (if (null? #{x 44152}#)
               #{x 44152}#
               (vector
                 'syntax-object
                 #{x 44152}#
                 #{w 44146}#
                 #{defmod 44148}#)))))))
   (#{expand-sequence 28266}#
     (lambda (#{body 59670}#
              #{r 59671}#
              #{w 59672}#
              #{s 59673}#
              #{mod 59674}#)
       (#{build-sequence 28220}#
         #{s 59673}#
         (letrec*
           ((#{dobody 59762}#
              (lambda (#{body 59845}#
                       #{r 59846}#
                       #{w 59847}#
                       #{mod 59848}#)
                (if (null? #{body 59845}#)
                  '()
                  (let ((#{first 59849}#
                          (#{expand 28271}#
                            (car #{body 59845}#)
                            #{r 59846}#
                            #{w 59847}#
                            #{mod 59848}#)))
                    (cons #{first 59849}#
                          (#{dobody 59762}#
                            (cdr #{body 59845}#)
                            #{r 59846}#
                            #{w 59847}#
                            #{mod 59848}#)))))))
           (#{dobody 59762}#
             #{body 59670}#
             #{r 59671}#
             #{w 59672}#
             #{mod 59674}#)))))
   (#{expand-top-sequence 28267}#
     (lambda (#{body 44255}#
              #{r 44256}#
              #{w 44257}#
              #{s 44258}#
              #{m 44259}#
              #{esew 44260}#
              #{mod 44261}#)
       (let ((#{r 44262}#
               (cons '("placeholder" placeholder) #{r 44256}#)))
         (let ((#{ribcage 44263}# (vector 'ribcage '() '() '())))
           (let ((#{w 44264}#
                   (cons (car #{w 44257}#)
                         (cons #{ribcage 44263}# (cdr #{w 44257}#)))))
             (letrec*
               ((#{record-definition! 44265}#
                  (lambda (#{id 47641}# #{var 47642}#)
                    (let ((#{mod 47643}#
                            (cons 'hygiene (module-name (current-module)))))
                      (let ((#{label 47649}#
                              (cons (vector-ref #{id 47641}# 3)
                                    (if (if (vector? #{var 47642}#)
                                          (if (= (vector-length #{var 47642}#)
                                                 4)
                                            (eq? (vector-ref #{var 47642}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (let ((#{expression 47711}#
                                              (vector-ref #{var 47642}# 1))
                                            (#{wrap 47712}#
                                              (let ((#{w2 47722}#
                                                      (vector-ref
                                                        #{var 47642}#
                                                        2)))
                                                (cons (let ((#{m2 47729}#
                                                              (car #{w2 47722}#)))
                                                        (if (null? #{m2 47729}#)
                                                          '(top)
                                                          (append
                                                            '(top)
                                                            #{m2 47729}#)))
                                                      (let ((#{m2 47738}#
                                                              (cdr #{w2 47722}#)))
                                                        (if (null? #{m2 47738}#)
                                                          '()
                                                          (append
                                                            '()
                                                            #{m2 47738}#))))))
                                            (#{module 47713}#
                                              (vector-ref #{var 47642}# 3)))
                                        (vector
                                          'syntax-object
                                          #{expression 47711}#
                                          #{wrap 47712}#
                                          #{module 47713}#))
                                      (if (null? #{var 47642}#)
                                        #{var 47642}#
                                        (vector
                                          'syntax-object
                                          #{var 47642}#
                                          '((top))
                                          #{mod 47643}#))))))
                        (begin
                          (let ((#{update 47652}#
                                  (cons (vector-ref #{id 47641}# 1)
                                        (vector-ref #{ribcage 44263}# 1))))
                            (vector-set!
                              #{ribcage 44263}#
                              1
                              #{update 47652}#))
                          (let ((#{update 47667}#
                                  (cons (car (vector-ref #{id 47641}# 2))
                                        (vector-ref #{ribcage 44263}# 2))))
                            (vector-set!
                              #{ribcage 44263}#
                              2
                              #{update 47667}#))
                          (let ((#{update 47682}#
                                  (cons #{label 47649}#
                                        (vector-ref #{ribcage 44263}# 3))))
                            (vector-set!
                              #{ribcage 44263}#
                              3
                              #{update 47682}#)))))))
                (#{parse 44268}#
                  (lambda (#{body 44463}#
                           #{r 44464}#
                           #{w 44465}#
                           #{s 44466}#
                           #{m 44467}#
                           #{esew 44468}#
                           #{mod 44469}#)
                    (letrec*
                      ((#{lp 44470}#
                         (lambda (#{body 44553}# #{exps 44554}#)
                           (if (null? #{body 44553}#)
                             #{exps 44554}#
                             (#{lp 44470}#
                               (cdr #{body 44553}#)
                               (append
                                 (#{parse1 44269}#
                                   (car #{body 44553}#)
                                   #{r 44464}#
                                   #{w 44465}#
                                   #{s 44466}#
                                   #{m 44467}#
                                   #{esew 44468}#
                                   #{mod 44469}#)
                                 #{exps 44554}#))))))
                      (#{lp 44470}# #{body 44463}# '()))))
                (#{parse1 44269}#
                  (lambda (#{x 44624}#
                           #{r 44625}#
                           #{w 44626}#
                           #{s 44627}#
                           #{m 44628}#
                           #{esew 44629}#
                           #{mod 44630}#)
                    (call-with-values
                      (lambda ()
                        (#{syntax-type 28270}#
                          #{x 44624}#
                          #{r 44625}#
                          #{w 44626}#
                          (#{source-annotation 28232}# #{x 44624}#)
                          #{ribcage 44263}#
                          #{mod 44630}#
                          #f))
                      (lambda (#{type 44816}#
                               #{value 44817}#
                               #{e 44818}#
                               #{w 44819}#
                               #{s 44820}#
                               #{mod 44821}#)
                        (if (eqv? #{type 44816}# 'define-form)
                          (let ((#{id 44825}#
                                  (if (if (null? (car #{w 44819}#))
                                        (null? (cdr #{w 44819}#))
                                        #f)
                                    #{value 44817}#
                                    (if (if (vector? #{value 44817}#)
                                          (if (= (vector-length
                                                   #{value 44817}#)
                                                 4)
                                            (eq? (vector-ref #{value 44817}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (let ((#{expression 44875}#
                                              (vector-ref #{value 44817}# 1))
                                            (#{wrap 44876}#
                                              (let ((#{w2 44886}#
                                                      (vector-ref
                                                        #{value 44817}#
                                                        2)))
                                                (let ((#{m1 44887}#
                                                        (car #{w 44819}#))
                                                      (#{s1 44888}#
                                                        (cdr #{w 44819}#)))
                                                  (if (null? #{m1 44887}#)
                                                    (if (null? #{s1 44888}#)
                                                      #{w2 44886}#
                                                      (cons (car #{w2 44886}#)
                                                            (let ((#{m2 44905}#
                                                                    (cdr #{w2 44886}#)))
                                                              (if (null? #{m2 44905}#)
                                                                #{s1 44888}#
                                                                (append
                                                                  #{s1 44888}#
                                                                  #{m2 44905}#)))))
                                                    (cons (let ((#{m2 44913}#
                                                                  (car #{w2 44886}#)))
                                                            (if (null? #{m2 44913}#)
                                                              #{m1 44887}#
                                                              (append
                                                                #{m1 44887}#
                                                                #{m2 44913}#)))
                                                          (let ((#{m2 44921}#
                                                                  (cdr #{w2 44886}#)))
                                                            (if (null? #{m2 44921}#)
                                                              #{s1 44888}#
                                                              (append
                                                                #{s1 44888}#
                                                                #{m2 44921}#))))))))
                                            (#{module 44877}#
                                              (vector-ref #{value 44817}# 3)))
                                        (vector
                                          'syntax-object
                                          #{expression 44875}#
                                          #{wrap 44876}#
                                          #{module 44877}#))
                                      (if (null? #{value 44817}#)
                                        #{value 44817}#
                                        (vector
                                          'syntax-object
                                          #{value 44817}#
                                          #{w 44819}#
                                          #{mod 44821}#))))))
                            (begin
                              (symbol->string (gensym "i"))
                              (let ((#{var 44827}#
                                      (if (not (equal?
                                                 (car (vector-ref
                                                        #{id 44825}#
                                                        2))
                                                 '(top)))
                                        (symbol-append
                                          (vector-ref #{id 44825}# 1)
                                          '-
                                          (string->symbol
                                            (number->string
                                              (hash (syntax->datum #{x 44624}#)
                                                    most-positive-fixnum)
                                              16)))
                                        (vector-ref #{id 44825}# 1))))
                                (begin
                                  (#{record-definition! 44265}#
                                    #{id 44825}#
                                    #{var 44827}#)
                                  (list (if (eq? #{m 44628}# 'c&e)
                                          (let ((#{x 45047}#
                                                  (#{build-global-definition 28213}#
                                                    #{s 44820}#
                                                    #{var 44827}#
                                                    (#{expand 28271}#
                                                      #{e 44818}#
                                                      #{r 44625}#
                                                      #{w 44819}#
                                                      #{mod 44821}#))))
                                            (begin
                                              (#{top-level-eval-hook 28198}#
                                                #{x 45047}#
                                                #{mod 44821}#)
                                              (lambda () #{x 45047}#)))
                                          (lambda ()
                                            (#{build-global-definition 28213}#
                                              #{s 44820}#
                                              #{var 44827}#
                                              (#{expand 28271}#
                                                #{e 44818}#
                                                #{r 44625}#
                                                #{w 44819}#
                                                #{mod 44821}#)))))))))
                          (if (if (eqv? #{type 44816}# 'define-syntax-form)
                                #t
                                (eqv? #{type 44816}#
                                      'define-syntax-parameter-form))
                            (let ((#{id 45541}#
                                    (if (if (null? (car #{w 44819}#))
                                          (null? (cdr #{w 44819}#))
                                          #f)
                                      #{value 44817}#
                                      (if (if (vector? #{value 44817}#)
                                            (if (= (vector-length
                                                     #{value 44817}#)
                                                   4)
                                              (eq? (vector-ref
                                                     #{value 44817}#
                                                     0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (let ((#{expression 45591}#
                                                (vector-ref #{value 44817}# 1))
                                              (#{wrap 45592}#
                                                (let ((#{w2 45602}#
                                                        (vector-ref
                                                          #{value 44817}#
                                                          2)))
                                                  (let ((#{m1 45603}#
                                                          (car #{w 44819}#))
                                                        (#{s1 45604}#
                                                          (cdr #{w 44819}#)))
                                                    (if (null? #{m1 45603}#)
                                                      (if (null? #{s1 45604}#)
                                                        #{w2 45602}#
                                                        (cons (car #{w2 45602}#)
                                                              (let ((#{m2 45621}#
                                                                      (cdr #{w2 45602}#)))
                                                                (if (null? #{m2 45621}#)
                                                                  #{s1 45604}#
                                                                  (append
                                                                    #{s1 45604}#
                                                                    #{m2 45621}#)))))
                                                      (cons (let ((#{m2 45629}#
                                                                    (car #{w2 45602}#)))
                                                              (if (null? #{m2 45629}#)
                                                                #{m1 45603}#
                                                                (append
                                                                  #{m1 45603}#
                                                                  #{m2 45629}#)))
                                                            (let ((#{m2 45637}#
                                                                    (cdr #{w2 45602}#)))
                                                              (if (null? #{m2 45637}#)
                                                                #{s1 45604}#
                                                                (append
                                                                  #{s1 45604}#
                                                                  #{m2 45637}#))))))))
                                              (#{module 45593}#
                                                (vector-ref
                                                  #{value 44817}#
                                                  3)))
                                          (vector
                                            'syntax-object
                                            #{expression 45591}#
                                            #{wrap 45592}#
                                            #{module 45593}#))
                                        (if (null? #{value 44817}#)
                                          #{value 44817}#
                                          (vector
                                            'syntax-object
                                            #{value 44817}#
                                            #{w 44819}#
                                            #{mod 44821}#))))))
                              (begin
                                (symbol->string (gensym "i"))
                                (let ((#{var 45543}#
                                        (if (not (equal?
                                                   (car (vector-ref
                                                          #{id 45541}#
                                                          2))
                                                   '(top)))
                                          (symbol-append
                                            (vector-ref #{id 45541}# 1)
                                            '-
                                            (string->symbol
                                              (number->string
                                                (hash (syntax->datum
                                                        #{x 44624}#)
                                                      most-positive-fixnum)
                                                16)))
                                          (vector-ref #{id 45541}# 1))))
                                  (begin
                                    (#{record-definition! 44265}#
                                      #{id 45541}#
                                      #{var 45543}#)
                                    (if (eqv? #{m 44628}# 'c)
                                      (if (memq 'compile #{esew 44629}#)
                                        (let ((#{e 45766}#
                                                (#{expand-install-global 28268}#
                                                  #{var 45543}#
                                                  #{type 44816}#
                                                  (#{expand 28271}#
                                                    #{e 44818}#
                                                    #{r 44625}#
                                                    #{w 44819}#
                                                    #{mod 44821}#))))
                                          (begin
                                            (#{top-level-eval-hook 28198}#
                                              #{e 45766}#
                                              #{mod 44821}#)
                                            (if (memq 'load #{esew 44629}#)
                                              (list (lambda () #{e 45766}#))
                                              '())))
                                        (if (memq 'load #{esew 44629}#)
                                          (list (lambda ()
                                                  (#{expand-install-global 28268}#
                                                    #{var 45543}#
                                                    #{type 44816}#
                                                    (#{expand 28271}#
                                                      #{e 44818}#
                                                      #{r 44625}#
                                                      #{w 44819}#
                                                      #{mod 44821}#))))
                                          '()))
                                      (if (eqv? #{m 44628}# 'c&e)
                                        (let ((#{e 46269}#
                                                (#{expand-install-global 28268}#
                                                  #{var 45543}#
                                                  #{type 44816}#
                                                  (#{expand 28271}#
                                                    #{e 44818}#
                                                    #{r 44625}#
                                                    #{w 44819}#
                                                    #{mod 44821}#))))
                                          (begin
                                            (#{top-level-eval-hook 28198}#
                                              #{e 46269}#
                                              #{mod 44821}#)
                                            (list (lambda () #{e 46269}#))))
                                        (begin
                                          (if (memq 'eval #{esew 44629}#)
                                            (#{top-level-eval-hook 28198}#
                                              (#{expand-install-global 28268}#
                                                #{var 45543}#
                                                #{type 44816}#
                                                (#{expand 28271}#
                                                  #{e 44818}#
                                                  #{r 44625}#
                                                  #{w 44819}#
                                                  #{mod 44821}#))
                                              #{mod 44821}#))
                                          '())))))))
                            (if (eqv? #{type 44816}# 'begin-form)
                              (let ((#{tmp 46879}#
                                      ($sc-dispatch
                                        #{e 44818}#
                                        '(_ . each-any))))
                                (if #{tmp 46879}#
                                  (@apply
                                    (lambda (#{e1 46883}#)
                                      (#{parse 44268}#
                                        #{e1 46883}#
                                        #{r 44625}#
                                        #{w 44819}#
                                        #{s 44820}#
                                        #{m 44628}#
                                        #{esew 44629}#
                                        #{mod 44821}#))
                                    #{tmp 46879}#)
                                  (syntax-violation
                                    #f
                                    "source expression failed to match any pattern"
                                    #{e 44818}#)))
                              (if (eqv? #{type 44816}# 'local-syntax-form)
                                (#{expand-local-syntax 28276}#
                                  #{value 44817}#
                                  #{e 44818}#
                                  #{r 44625}#
                                  #{w 44819}#
                                  #{s 44820}#
                                  #{mod 44821}#
                                  (lambda (#{forms 46926}#
                                           #{r 46927}#
                                           #{w 46928}#
                                           #{s 46929}#
                                           #{mod 46930}#)
                                    (#{parse 44268}#
                                      #{forms 46926}#
                                      #{r 46927}#
                                      #{w 46928}#
                                      #{s 46929}#
                                      #{m 44628}#
                                      #{esew 44629}#
                                      #{mod 46930}#)))
                                (if (eqv? #{type 44816}# 'eval-when-form)
                                  (let ((#{tmp 46966}#
                                          ($sc-dispatch
                                            #{e 44818}#
                                            '(_ each-any any . each-any))))
                                    (if #{tmp 46966}#
                                      (@apply
                                        (lambda (#{x 46970}#
                                                 #{e1 46971}#
                                                 #{e2 46972}#)
                                          (let ((#{when-list 46973}#
                                                  (#{parse-when-list 28269}#
                                                    #{e 44818}#
                                                    #{x 46970}#))
                                                (#{body 46974}#
                                                  (cons #{e1 46971}#
                                                        #{e2 46972}#)))
                                            (letrec*
                                              ((#{recurse 46975}#
                                                 (lambda (#{m 47561}#
                                                          #{esew 47562}#)
                                                   (#{parse 44268}#
                                                     #{body 46974}#
                                                     #{r 44625}#
                                                     #{w 44819}#
                                                     #{s 44820}#
                                                     #{m 47561}#
                                                     #{esew 47562}#
                                                     #{mod 44821}#))))
                                              (if (eq? #{m 44628}# 'e)
                                                (if (memq 'eval
                                                          #{when-list 46973}#)
                                                  (#{recurse 46975}#
                                                    (if (memq 'expand
                                                              #{when-list 46973}#)
                                                      'c&e
                                                      'e)
                                                    '(eval))
                                                  (begin
                                                    (if (memq 'expand
                                                              #{when-list 46973}#)
                                                      (let ((#{x 47082}#
                                                              (#{expand-top-sequence 28267}#
                                                                #{body 46974}#
                                                                #{r 44625}#
                                                                #{w 44819}#
                                                                #{s 44820}#
                                                                'e
                                                                '(eval)
                                                                #{mod 44821}#)))
                                                        (primitive-eval
                                                          #{x 47082}#)))
                                                    '()))
                                                (if (memq 'load
                                                          #{when-list 46973}#)
                                                  (if (let ((#{t 47110}#
                                                              (memq 'compile
                                                                    #{when-list 46973}#)))
                                                        (if #{t 47110}#
                                                          #{t 47110}#
                                                          (let ((#{t 47163}#
                                                                  (memq 'expand
                                                                        #{when-list 46973}#)))
                                                            (if #{t 47163}#
                                                              #{t 47163}#
                                                              (if (eq? #{m 44628}#
                                                                       'c&e)
                                                                (memq 'eval
                                                                      #{when-list 46973}#)
                                                                #f)))))
                                                    (#{recurse 46975}#
                                                      'c&e
                                                      '(compile load))
                                                    (if (if (eq? #{m 44628}#
                                                                 'c)
                                                          #t
                                                          (eq? #{m 44628}#
                                                               'c&e))
                                                      (#{recurse 46975}#
                                                        'c
                                                        '(load))
                                                      '()))
                                                  (if (let ((#{t 47372}#
                                                              (memq 'compile
                                                                    #{when-list 46973}#)))
                                                        (if #{t 47372}#
                                                          #{t 47372}#
                                                          (let ((#{t 47425}#
                                                                  (memq 'expand
                                                                        #{when-list 46973}#)))
                                                            (if #{t 47425}#
                                                              #{t 47425}#
                                                              (if (eq? #{m 44628}#
                                                                       'c&e)
                                                                (memq 'eval
                                                                      #{when-list 46973}#)
                                                                #f)))))
                                                    (begin
                                                      (let ((#{x 47559}#
                                                              (#{expand-top-sequence 28267}#
                                                                #{body 46974}#
                                                                #{r 44625}#
                                                                #{w 44819}#
                                                                #{s 44820}#
                                                                'e
                                                                '(eval)
                                                                #{mod 44821}#)))
                                                        (primitive-eval
                                                          #{x 47559}#))
                                                      '())
                                                    '()))))))
                                        #{tmp 46966}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{e 44818}#)))
                                  (list (if (eq? #{m 44628}# 'c&e)
                                          (let ((#{x 47632}#
                                                  (#{expand-expr 28272}#
                                                    #{type 44816}#
                                                    #{value 44817}#
                                                    #{e 44818}#
                                                    #{r 44625}#
                                                    #{w 44819}#
                                                    #{s 44820}#
                                                    #{mod 44821}#)))
                                            (begin
                                              (primitive-eval #{x 47632}#)
                                              (lambda () #{x 47632}#)))
                                          (lambda ()
                                            (#{expand-expr 28272}#
                                              #{type 44816}#
                                              #{value 44817}#
                                              #{e 44818}#
                                              #{r 44625}#
                                              #{w 44819}#
                                              #{s 44820}#
                                              #{mod 44821}#))))))))))))))
               (let ((#{exps 44270}#
                       (map (lambda (#{x 44393}#) (#{x 44393}#))
                            (reverse
                              (#{parse 44268}#
                                #{body 44255}#
                                #{r 44262}#
                                #{w 44264}#
                                #{s 44258}#
                                #{m 44259}#
                                #{esew 44260}#
                                #{mod 44261}#)))))
                 (if (null? #{exps 44270}#)
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 0)
                     #{s 44258}#)
                   (#{build-sequence 28220}#
                     #{s 44258}#
                     #{exps 44270}#)))))))))
   (#{expand-install-global 28268}#
     (lambda (#{name 47760}# #{type 47761}# #{e 47762}#)
       (let ((#{exp 47768}#
               (let ((#{args 47779}#
                       (if (eq? #{type 47761}#
                                'define-syntax-parameter-form)
                         (list (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 #{name 47760}#)
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 'syntax-parameter)
                               (let ((#{args 47802}# (list #{e 47762}#)))
                                 (make-struct/no-tail
                                   (vector-ref %expanded-vtables 12)
                                   #f
                                   'list
                                   #{args 47802}#)))
                         (list (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 #{name 47760}#)
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 'macro)
                               #{e 47762}#))))
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 12)
                   #f
                   'make-syntax-transformer
                   #{args 47779}#))))
         (begin
           (if (if (struct? #{exp 47768}#)
                 (eq? (struct-vtable #{exp 47768}#)
                      (vector-ref %expanded-vtables 14))
                 #f)
             (let ((#{meta 47829}# (struct-ref #{exp 47768}# 1)))
               (if (not (assq 'name #{meta 47829}#))
                 (let ((#{v 47836}#
                         (cons (cons 'name #{name 47760}#) #{meta 47829}#)))
                   (struct-set! #{exp 47768}# 1 #{v 47836}#)))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 9)
             #f
             #{name 47760}#
             #{exp 47768}#)))))
   (#{parse-when-list 28269}#
     (lambda (#{e 47847}# #{when-list 47848}#)
       (let ((#{result 47849}#
               (#{strip 28284}# #{when-list 47848}# '(()))))
         (letrec*
           ((#{lp 47850}#
              (lambda (#{l 47916}#)
                (if (null? #{l 47916}#)
                  #{result 47849}#
                  (if (let ((#{t 47918}# (car #{l 47916}#)))
                        (if (eq? #{t 47918}# 'compile)
                          #t
                          (if (eq? #{t 47918}# 'load)
                            #t
                            (if (eq? #{t 47918}# 'eval)
                              #t
                              (eq? #{t 47918}# 'expand)))))
                    (#{lp 47850}# (cdr #{l 47916}#))
                    (syntax-violation
                      'eval-when
                      "invalid situation"
                      #{e 47847}#
                      (car #{l 47916}#)))))))
           (#{lp 47850}# #{result 47849}#)))))
   (#{syntax-type 28270}#
     (lambda (#{e 47920}#
              #{r 47921}#
              #{w 47922}#
              #{s 47923}#
              #{rib 47924}#
              #{mod 47925}#
              #{for-car? 47926}#)
       (if (symbol? #{e 47920}#)
         (call-with-values
           (lambda ()
             (#{resolve-identifier 28258}#
               #{e 47920}#
               #{w 47922}#
               #{r 47921}#
               #{mod 47925}#
               #t))
           (lambda (#{type 47929}# #{value 47930}# #{mod* 47931}#)
             (if (eqv? #{type 47929}# 'macro)
               (if #{for-car? 47926}#
                 (values
                   #{type 47929}#
                   #{value 47930}#
                   #{e 47920}#
                   #{w 47922}#
                   #{s 47923}#
                   #{mod 47925}#)
                 (#{syntax-type 28270}#
                   (#{expand-macro 28274}#
                     #{value 47930}#
                     #{e 47920}#
                     #{r 47921}#
                     #{w 47922}#
                     #{s 47923}#
                     #{rib 47924}#
                     #{mod 47925}#)
                   #{r 47921}#
                   '(())
                   #{s 47923}#
                   #{rib 47924}#
                   #{mod 47925}#
                   #f))
               (if (eqv? #{type 47929}# 'global)
                 (values
                   #{type 47929}#
                   #{value 47930}#
                   #{value 47930}#
                   #{w 47922}#
                   #{s 47923}#
                   #{mod* 47931}#)
                 (values
                   #{type 47929}#
                   #{value 47930}#
                   #{e 47920}#
                   #{w 47922}#
                   #{s 47923}#
                   #{mod 47925}#)))))
         (if (pair? #{e 47920}#)
           (let ((#{first 47940}# (car #{e 47920}#)))
             (call-with-values
               (lambda ()
                 (#{syntax-type 28270}#
                   #{first 47940}#
                   #{r 47921}#
                   #{w 47922}#
                   #{s 47923}#
                   #{rib 47924}#
                   #{mod 47925}#
                   #t))
               (lambda (#{ftype 47942}#
                        #{fval 47943}#
                        #{fe 47944}#
                        #{fw 47945}#
                        #{fs 47946}#
                        #{fmod 47947}#)
                 (if (eqv? #{ftype 47942}# 'lexical)
                   (values
                     'lexical-call
                     #{fval 47943}#
                     #{e 47920}#
                     #{w 47922}#
                     #{s 47923}#
                     #{mod 47925}#)
                   (if (eqv? #{ftype 47942}# 'global)
                     (values
                       'global-call
                       (vector
                         'syntax-object
                         #{fval 47943}#
                         #{w 47922}#
                         #{fmod 47947}#)
                       #{e 47920}#
                       #{w 47922}#
                       #{s 47923}#
                       #{mod 47925}#)
                     (if (eqv? #{ftype 47942}# 'macro)
                       (#{syntax-type 28270}#
                         (#{expand-macro 28274}#
                           #{fval 47943}#
                           #{e 47920}#
                           #{r 47921}#
                           #{w 47922}#
                           #{s 47923}#
                           #{rib 47924}#
                           #{mod 47925}#)
                         #{r 47921}#
                         '(())
                         #{s 47923}#
                         #{rib 47924}#
                         #{mod 47925}#
                         #{for-car? 47926}#)
                       (if (eqv? #{ftype 47942}# 'module-ref)
                         (call-with-values
                           (lambda ()
                             (#{fval 47943}#
                               #{e 47920}#
                               #{r 47921}#
                               #{w 47922}#))
                           (lambda (#{e 47968}#
                                    #{r 47969}#
                                    #{w 47970}#
                                    #{s 47971}#
                                    #{mod 47972}#)
                             (#{syntax-type 28270}#
                               #{e 47968}#
                               #{r 47969}#
                               #{w 47970}#
                               #{s 47971}#
                               #{rib 47924}#
                               #{mod 47972}#
                               #{for-car? 47926}#)))
                         (if (eqv? #{ftype 47942}# 'core)
                           (values
                             'core-form
                             #{fval 47943}#
                             #{e 47920}#
                             #{w 47922}#
                             #{s 47923}#
                             #{mod 47925}#)
                           (if (eqv? #{ftype 47942}# 'local-syntax)
                             (values
                               'local-syntax-form
                               #{fval 47943}#
                               #{e 47920}#
                               #{w 47922}#
                               #{s 47923}#
                               #{mod 47925}#)
                             (if (eqv? #{ftype 47942}# 'begin)
                               (values
                                 'begin-form
                                 #f
                                 #{e 47920}#
                                 #{w 47922}#
                                 #{s 47923}#
                                 #{mod 47925}#)
                               (if (eqv? #{ftype 47942}# 'eval-when)
                                 (values
                                   'eval-when-form
                                   #f
                                   #{e 47920}#
                                   #{w 47922}#
                                   #{s 47923}#
                                   #{mod 47925}#)
                                 (if (eqv? #{ftype 47942}# 'define)
                                   (let ((#{tmp 47989}#
                                           ($sc-dispatch
                                             #{e 47920}#
                                             '(_ any any))))
                                     (if (if #{tmp 47989}#
                                           (@apply
                                             (lambda (#{name 47993}#
                                                      #{val 47994}#)
                                               (if (symbol? #{name 47993}#)
                                                 #t
                                                 (if (if (vector?
                                                           #{name 47993}#)
                                                       (if (= (vector-length
                                                                #{name 47993}#)
                                                              4)
                                                         (eq? (vector-ref
                                                                #{name 47993}#
                                                                0)
                                                              'syntax-object)
                                                         #f)
                                                       #f)
                                                   (symbol?
                                                     (vector-ref
                                                       #{name 47993}#
                                                       1))
                                                   #f)))
                                             #{tmp 47989}#)
                                           #f)
                                       (@apply
                                         (lambda (#{name 48021}# #{val 48022}#)
                                           (values
                                             'define-form
                                             #{name 48021}#
                                             #{val 48022}#
                                             #{w 47922}#
                                             #{s 47923}#
                                             #{mod 47925}#))
                                         #{tmp 47989}#)
                                       (let ((#{tmp 48023}#
                                               ($sc-dispatch
                                                 #{e 47920}#
                                                 '(_ (any . any)
                                                     any
                                                     .
                                                     each-any))))
                                         (if (if #{tmp 48023}#
                                               (@apply
                                                 (lambda (#{name 48027}#
                                                          #{args 48028}#
                                                          #{e1 48029}#
                                                          #{e2 48030}#)
                                                   (if (if (symbol?
                                                             #{name 48027}#)
                                                         #t
                                                         (if (if (vector?
                                                                   #{name 48027}#)
                                                               (if (= (vector-length
                                                                        #{name 48027}#)
                                                                      4)
                                                                 (eq? (vector-ref
                                                                        #{name 48027}#
                                                                        0)
                                                                      'syntax-object)
                                                                 #f)
                                                               #f)
                                                           (symbol?
                                                             (vector-ref
                                                               #{name 48027}#
                                                               1))
                                                           #f))
                                                     (#{valid-bound-ids? 28261}#
                                                       (#{lambda-var-list 28286}#
                                                         #{args 48028}#))
                                                     #f))
                                                 #{tmp 48023}#)
                                               #f)
                                           (@apply
                                             (lambda (#{name 48493}#
                                                      #{args 48494}#
                                                      #{e1 48495}#
                                                      #{e2 48496}#)
                                               (values
                                                 'define-form
                                                 (if (if (null? (car #{w 47922}#))
                                                       (null? (cdr #{w 47922}#))
                                                       #f)
                                                   #{name 48493}#
                                                   (if (if (vector?
                                                             #{name 48493}#)
                                                         (if (= (vector-length
                                                                  #{name 48493}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{name 48493}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (let ((#{expression 48526}#
                                                             (vector-ref
                                                               #{name 48493}#
                                                               1))
                                                           (#{wrap 48527}#
                                                             (let ((#{w2 48537}#
                                                                     (vector-ref
                                                                       #{name 48493}#
                                                                       2)))
                                                               (let ((#{m1 48538}#
                                                                       (car #{w 47922}#))
                                                                     (#{s1 48539}#
                                                                       (cdr #{w 47922}#)))
                                                                 (if (null? #{m1 48538}#)
                                                                   (if (null? #{s1 48539}#)
                                                                     #{w2 48537}#
                                                                     (cons (car #{w2 48537}#)
                                                                           (let ((#{m2 48556}#
                                                                                   (cdr #{w2 48537}#)))
                                                                             (if (null? #{m2 48556}#)
                                                                               #{s1 48539}#
                                                                               (append
                                                                                 #{s1 48539}#
                                                                                 #{m2 48556}#)))))
                                                                   (cons (let ((#{m2 48564}#
                                                                                 (car #{w2 48537}#)))
                                                                           (if (null? #{m2 48564}#)
                                                                             #{m1 48538}#
                                                                             (append
                                                                               #{m1 48538}#
                                                                               #{m2 48564}#)))
                                                                         (let ((#{m2 48572}#
                                                                                 (cdr #{w2 48537}#)))
                                                                           (if (null? #{m2 48572}#)
                                                                             #{s1 48539}#
                                                                             (append
                                                                               #{s1 48539}#
                                                                               #{m2 48572}#))))))))
                                                           (#{module 48528}#
                                                             (vector-ref
                                                               #{name 48493}#
                                                               3)))
                                                       (vector
                                                         'syntax-object
                                                         #{expression 48526}#
                                                         #{wrap 48527}#
                                                         #{module 48528}#))
                                                     (if (null? #{name 48493}#)
                                                       #{name 48493}#
                                                       (vector
                                                         'syntax-object
                                                         #{name 48493}#
                                                         #{w 47922}#
                                                         #{mod 47925}#))))
                                                 (let ((#{e 48598}#
                                                         (cons '#(syntax-object
                                                                  lambda
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(name
                                                                       args
                                                                       e1
                                                                       e2)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i25779"
                                                                       "i25780"
                                                                       "i25781"
                                                                       "i25782"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(ftype
                                                                       fval
                                                                       fe
                                                                       fw
                                                                       fs
                                                                       fmod)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i25732"
                                                                       "i25733"
                                                                       "i25734"
                                                                       "i25735"
                                                                       "i25736"
                                                                       "i25737"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(first)
                                                                     #((top))
                                                                     #("i25724"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(e
                                                                       r
                                                                       w
                                                                       s
                                                                       rib
                                                                       mod
                                                                       for-car?)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i25703"
                                                                       "i25704"
                                                                       "i25705"
                                                                       "i25706"
                                                                       "i25707"
                                                                       "i25708"
                                                                       "i25709"))
                                                                   #(ribcage
                                                                     (lambda-var-list
                                                                       gen-var
                                                                       strip
                                                                       expand-lambda-case
                                                                       lambda*-formals
                                                                       expand-simple-lambda
                                                                       lambda-formals
                                                                       ellipsis?
                                                                       expand-void
                                                                       eval-local-transformer
                                                                       expand-local-syntax
                                                                       expand-body
                                                                       expand-macro
                                                                       expand-call
                                                                       expand-expr
                                                                       expand
                                                                       syntax-type
                                                                       parse-when-list
                                                                       expand-install-global
                                                                       expand-top-sequence
                                                                       expand-sequence
                                                                       source-wrap
                                                                       wrap
                                                                       bound-id-member?
                                                                       distinct-bound-ids?
                                                                       valid-bound-ids?
                                                                       bound-id=?
                                                                       free-id=?
                                                                       resolve-identifier
                                                                       id-var-name
                                                                       same-marks?
                                                                       join-marks
                                                                       join-wraps
                                                                       smart-append
                                                                       make-binding-wrap
                                                                       extend-ribcage!
                                                                       make-empty-ribcage
                                                                       new-mark
                                                                       anti-mark
                                                                       the-anti-mark
                                                                       top-marked?
                                                                       top-wrap
                                                                       empty-wrap
                                                                       set-ribcage-labels!
                                                                       set-ribcage-marks!
                                                                       set-ribcage-symnames!
                                                                       ribcage-labels
                                                                       ribcage-marks
                                                                       ribcage-symnames
                                                                       ribcage?
                                                                       make-ribcage
                                                                       gen-labels
                                                                       gen-label
                                                                       make-rename
                                                                       rename-marks
                                                                       rename-new
                                                                       rename-old
                                                                       subst-rename?
                                                                       wrap-subst
                                                                       wrap-marks
                                                                       make-wrap
                                                                       id-sym-name&marks
                                                                       id-sym-name
                                                                       id?
                                                                       nonsymbol-id?
                                                                       global-extend
                                                                       macros-only-env
                                                                       extend-var-env
                                                                       extend-env
                                                                       null-env
                                                                       binding-value
                                                                       binding-type
                                                                       make-binding
                                                                       arg-check
                                                                       source-annotation
                                                                       no-source
                                                                       set-syntax-object-module!
                                                                       set-syntax-object-wrap!
                                                                       set-syntax-object-expression!
                                                                       syntax-object-module
                                                                       syntax-object-wrap
                                                                       syntax-object-expression
                                                                       syntax-object?
                                                                       make-syntax-object
                                                                       build-lexical-var
                                                                       build-letrec
                                                                       build-named-let
                                                                       build-let
                                                                       build-sequence
                                                                       build-data
                                                                       build-primref
                                                                       build-primcall
                                                                       build-lambda-case
                                                                       build-case-lambda
                                                                       build-simple-lambda
                                                                       build-global-definition
                                                                       build-global-assignment
                                                                       build-global-reference
                                                                       analyze-variable
                                                                       build-lexical-assignment
                                                                       build-lexical-reference
                                                                       build-dynlet
                                                                       build-conditional
                                                                       build-call
                                                                       build-void
                                                                       maybe-name-value!
                                                                       decorate-source
                                                                       get-global-definition-hook
                                                                       put-global-definition-hook
                                                                       gensym-hook
                                                                       local-eval-hook
                                                                       top-level-eval-hook
                                                                       fx<
                                                                       fx=
                                                                       fx-
                                                                       fx+
                                                                       set-lambda-meta!
                                                                       lambda-meta
                                                                       lambda?
                                                                       make-dynlet
                                                                       make-letrec
                                                                       make-let
                                                                       make-lambda-case
                                                                       make-lambda
                                                                       make-seq
                                                                       make-primcall
                                                                       make-call
                                                                       make-conditional
                                                                       make-toplevel-define
                                                                       make-toplevel-set
                                                                       make-toplevel-ref
                                                                       make-module-set
                                                                       make-module-ref
                                                                       make-lexical-set
                                                                       make-lexical-ref
                                                                       make-primitive-ref
                                                                       make-const
                                                                       make-void)
                                                                     ((top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top))
                                                                     ("i24298"
                                                                      "i24296"
                                                                      "i24294"
                                                                      "i24292"
                                                                      "i24290"
                                                                      "i24288"
                                                                      "i24286"
                                                                      "i24284"
                                                                      "i24282"
                                                                      "i24280"
                                                                      "i24278"
                                                                      "i24276"
                                                                      "i24274"
                                                                      "i24272"
                                                                      "i24270"
                                                                      "i24268"
                                                                      "i24266"
                                                                      "i24264"
                                                                      "i24262"
                                                                      "i24260"
                                                                      "i24258"
                                                                      "i24256"
                                                                      "i24254"
                                                                      "i24252"
                                                                      "i24250"
                                                                      "i24248"
                                                                      "i24246"
                                                                      "i24244"
                                                                      "i24242"
                                                                      "i24240"
                                                                      "i24238"
                                                                      "i24236"
                                                                      "i24234"
                                                                      "i24232"
                                                                      "i24230"
                                                                      "i24228"
                                                                      "i24227"
                                                                      "i24225"
                                                                      "i24222"
                                                                      "i24221"
                                                                      "i24220"
                                                                      "i24218"
                                                                      "i24217"
                                                                      "i24215"
                                                                      "i24213"
                                                                      "i24211"
                                                                      "i24209"
                                                                      "i24207"
                                                                      "i24205"
                                                                      "i24203"
                                                                      "i24201"
                                                                      "i24198"
                                                                      "i24196"
                                                                      "i24195"
                                                                      "i24193"
                                                                      "i24191"
                                                                      "i24189"
                                                                      "i24187"
                                                                      "i24186"
                                                                      "i24185"
                                                                      "i24184"
                                                                      "i24182"
                                                                      "i24181"
                                                                      "i24178"
                                                                      "i24176"
                                                                      "i24174"
                                                                      "i24172"
                                                                      "i24170"
                                                                      "i24168"
                                                                      "i24167"
                                                                      "i24166"
                                                                      "i24164"
                                                                      "i24162"
                                                                      "i24161"
                                                                      "i24158"
                                                                      "i24157"
                                                                      "i24155"
                                                                      "i24153"
                                                                      "i24151"
                                                                      "i24149"
                                                                      "i24147"
                                                                      "i24145"
                                                                      "i24143"
                                                                      "i24141"
                                                                      "i24139"
                                                                      "i24136"
                                                                      "i24134"
                                                                      "i24132"
                                                                      "i24130"
                                                                      "i24128"
                                                                      "i24126"
                                                                      "i24124"
                                                                      "i24122"
                                                                      "i24120"
                                                                      "i24118"
                                                                      "i24116"
                                                                      "i24114"
                                                                      "i24112"
                                                                      "i24110"
                                                                      "i24108"
                                                                      "i24106"
                                                                      "i24104"
                                                                      "i24102"
                                                                      "i24100"
                                                                      "i24098"
                                                                      "i24096"
                                                                      "i24094"
                                                                      "i24092"
                                                                      "i24090"
                                                                      "i24089"
                                                                      "i24086"
                                                                      "i24084"
                                                                      "i24083"
                                                                      "i24082"
                                                                      "i24081"
                                                                      "i24080"
                                                                      "i24078"
                                                                      "i24076"
                                                                      "i24074"
                                                                      "i24071"
                                                                      "i24069"
                                                                      "i24067"
                                                                      "i24065"
                                                                      "i24063"
                                                                      "i24061"
                                                                      "i24059"
                                                                      "i24057"
                                                                      "i24055"
                                                                      "i24053"
                                                                      "i24051"
                                                                      "i24049"
                                                                      "i24047"
                                                                      "i24045"
                                                                      "i24043"
                                                                      "i24041"
                                                                      "i24039"
                                                                      "i24037"
                                                                      "i24035"))
                                                                   #(ribcage
                                                                     (define-structure
                                                                       define-expansion-accessors
                                                                       define-expansion-constructors)
                                                                     ((top)
                                                                      (top)
                                                                      (top))
                                                                     ("i23873"
                                                                      "i23872"
                                                                      "i23871"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ()))
                                                                  (hygiene
                                                                    guile))
                                                               (let ((#{x 48602}#
                                                                       (cons #{args 48494}#
                                                                             (cons #{e1 48495}#
                                                                                   #{e2 48496}#))))
                                                                 (if (if (null? (car #{w 47922}#))
                                                                       (null? (cdr #{w 47922}#))
                                                                       #f)
                                                                   #{x 48602}#
                                                                   (if (if (vector?
                                                                             #{x 48602}#)
                                                                         (if (= (vector-length
                                                                                  #{x 48602}#)
                                                                                4)
                                                                           (eq? (vector-ref
                                                                                  #{x 48602}#
                                                                                  0)
                                                                                'syntax-object)
                                                                           #f)
                                                                         #f)
                                                                     (let ((#{expression 48620}#
                                                                             (vector-ref
                                                                               #{x 48602}#
                                                                               1))
                                                                           (#{wrap 48621}#
                                                                             (let ((#{w2 48629}#
                                                                                     (vector-ref
                                                                                       #{x 48602}#
                                                                                       2)))
                                                                               (let ((#{m1 48630}#
                                                                                       (car #{w 47922}#))
                                                                                     (#{s1 48631}#
                                                                                       (cdr #{w 47922}#)))
                                                                                 (if (null? #{m1 48630}#)
                                                                                   (if (null? #{s1 48631}#)
                                                                                     #{w2 48629}#
                                                                                     (cons (car #{w2 48629}#)
                                                                                           (let ((#{m2 48646}#
                                                                                                   (cdr #{w2 48629}#)))
                                                                                             (if (null? #{m2 48646}#)
                                                                                               #{s1 48631}#
                                                                                               (append
                                                                                                 #{s1 48631}#
                                                                                                 #{m2 48646}#)))))
                                                                                   (cons (let ((#{m2 48654}#
                                                                                                 (car #{w2 48629}#)))
                                                                                           (if (null? #{m2 48654}#)
                                                                                             #{m1 48630}#
                                                                                             (append
                                                                                               #{m1 48630}#
                                                                                               #{m2 48654}#)))
                                                                                         (let ((#{m2 48662}#
                                                                                                 (cdr #{w2 48629}#)))
                                                                                           (if (null? #{m2 48662}#)
                                                                                             #{s1 48631}#
                                                                                             (append
                                                                                               #{s1 48631}#
                                                                                               #{m2 48662}#))))))))
                                                                           (#{module 48622}#
                                                                             (vector-ref
                                                                               #{x 48602}#
                                                                               3)))
                                                                       (vector
                                                                         'syntax-object
                                                                         #{expression 48620}#
                                                                         #{wrap 48621}#
                                                                         #{module 48622}#))
                                                                     (if (null? #{x 48602}#)
                                                                       #{x 48602}#
                                                                       (vector
                                                                         'syntax-object
                                                                         #{x 48602}#
                                                                         #{w 47922}#
                                                                         #{mod 47925}#))))))))
                                                   (begin
                                                     (if (if (pair? #{e 48598}#)
                                                           #{s 47923}#
                                                           #f)
                                                       (set-source-properties!
                                                         #{e 48598}#
                                                         #{s 47923}#))
                                                     #{e 48598}#))
                                                 '(())
                                                 #{s 47923}#
                                                 #{mod 47925}#))
                                             #{tmp 48023}#)
                                           (let ((#{tmp 48681}#
                                                   ($sc-dispatch
                                                     #{e 47920}#
                                                     '(_ any))))
                                             (if (if #{tmp 48681}#
                                                   (@apply
                                                     (lambda (#{name 48685}#)
                                                       (if (symbol?
                                                             #{name 48685}#)
                                                         #t
                                                         (if (if (vector?
                                                                   #{name 48685}#)
                                                               (if (= (vector-length
                                                                        #{name 48685}#)
                                                                      4)
                                                                 (eq? (vector-ref
                                                                        #{name 48685}#
                                                                        0)
                                                                      'syntax-object)
                                                                 #f)
                                                               #f)
                                                           (symbol?
                                                             (vector-ref
                                                               #{name 48685}#
                                                               1))
                                                           #f)))
                                                     #{tmp 48681}#)
                                                   #f)
                                               (@apply
                                                 (lambda (#{name 48712}#)
                                                   (values
                                                     'define-form
                                                     (if (if (null? (car #{w 47922}#))
                                                           (null? (cdr #{w 47922}#))
                                                           #f)
                                                       #{name 48712}#
                                                       (if (if (vector?
                                                                 #{name 48712}#)
                                                             (if (= (vector-length
                                                                      #{name 48712}#)
                                                                    4)
                                                               (eq? (vector-ref
                                                                      #{name 48712}#
                                                                      0)
                                                                    'syntax-object)
                                                               #f)
                                                             #f)
                                                         (let ((#{expression 48742}#
                                                                 (vector-ref
                                                                   #{name 48712}#
                                                                   1))
                                                               (#{wrap 48743}#
                                                                 (let ((#{w2 48753}#
                                                                         (vector-ref
                                                                           #{name 48712}#
                                                                           2)))
                                                                   (let ((#{m1 48754}#
                                                                           (car #{w 47922}#))
                                                                         (#{s1 48755}#
                                                                           (cdr #{w 47922}#)))
                                                                     (if (null? #{m1 48754}#)
                                                                       (if (null? #{s1 48755}#)
                                                                         #{w2 48753}#
                                                                         (cons (car #{w2 48753}#)
                                                                               (let ((#{m2 48772}#
                                                                                       (cdr #{w2 48753}#)))
                                                                                 (if (null? #{m2 48772}#)
                                                                                   #{s1 48755}#
                                                                                   (append
                                                                                     #{s1 48755}#
                                                                                     #{m2 48772}#)))))
                                                                       (cons (let ((#{m2 48780}#
                                                                                     (car #{w2 48753}#)))
                                                                               (if (null? #{m2 48780}#)
                                                                                 #{m1 48754}#
                                                                                 (append
                                                                                   #{m1 48754}#
                                                                                   #{m2 48780}#)))
                                                                             (let ((#{m2 48788}#
                                                                                     (cdr #{w2 48753}#)))
                                                                               (if (null? #{m2 48788}#)
                                                                                 #{s1 48755}#
                                                                                 (append
                                                                                   #{s1 48755}#
                                                                                   #{m2 48788}#))))))))
                                                               (#{module 48744}#
                                                                 (vector-ref
                                                                   #{name 48712}#
                                                                   3)))
                                                           (vector
                                                             'syntax-object
                                                             #{expression 48742}#
                                                             #{wrap 48743}#
                                                             #{module 48744}#))
                                                         (if (null? #{name 48712}#)
                                                           #{name 48712}#
                                                           (vector
                                                             'syntax-object
                                                             #{name 48712}#
                                                             #{w 47922}#
                                                             #{mod 47925}#))))
                                                     '(#(syntax-object
                                                         if
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i25792"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i25732"
                                                              "i25733"
                                                              "i25734"
                                                              "i25735"
                                                              "i25736"
                                                              "i25737"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i25724"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i25703"
                                                              "i25704"
                                                              "i25705"
                                                              "i25706"
                                                              "i25707"
                                                              "i25708"
                                                              "i25709"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              expand-lambda-case
                                                              lambda*-formals
                                                              expand-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              expand-void
                                                              eval-local-transformer
                                                              expand-local-syntax
                                                              expand-body
                                                              expand-macro
                                                              expand-call
                                                              expand-expr
                                                              expand
                                                              syntax-type
                                                              parse-when-list
                                                              expand-install-global
                                                              expand-top-sequence
                                                              expand-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              resolve-identifier
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-primcall
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-call
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-seq
                                                              make-primcall
                                                              make-call
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i24298"
                                                             "i24296"
                                                             "i24294"
                                                             "i24292"
                                                             "i24290"
                                                             "i24288"
                                                             "i24286"
                                                             "i24284"
                                                             "i24282"
                                                             "i24280"
                                                             "i24278"
                                                             "i24276"
                                                             "i24274"
                                                             "i24272"
                                                             "i24270"
                                                             "i24268"
                                                             "i24266"
                                                             "i24264"
                                                             "i24262"
                                                             "i24260"
                                                             "i24258"
                                                             "i24256"
                                                             "i24254"
                                                             "i24252"
                                                             "i24250"
                                                             "i24248"
                                                             "i24246"
                                                             "i24244"
                                                             "i24242"
                                                             "i24240"
                                                             "i24238"
                                                             "i24236"
                                                             "i24234"
                                                             "i24232"
                                                             "i24230"
                                                             "i24228"
                                                             "i24227"
                                                             "i24225"
                                                             "i24222"
                                                             "i24221"
                                                             "i24220"
                                                             "i24218"
                                                             "i24217"
                                                             "i24215"
                                                             "i24213"
                                                             "i24211"
                                                             "i24209"
                                                             "i24207"
                                                             "i24205"
                                                             "i24203"
                                                             "i24201"
                                                             "i24198"
                                                             "i24196"
                                                             "i24195"
                                                             "i24193"
                                                             "i24191"
                                                             "i24189"
                                                             "i24187"
                                                             "i24186"
                                                             "i24185"
                                                             "i24184"
                                                             "i24182"
                                                             "i24181"
                                                             "i24178"
                                                             "i24176"
                                                             "i24174"
                                                             "i24172"
                                                             "i24170"
                                                             "i24168"
                                                             "i24167"
                                                             "i24166"
                                                             "i24164"
                                                             "i24162"
                                                             "i24161"
                                                             "i24158"
                                                             "i24157"
                                                             "i24155"
                                                             "i24153"
                                                             "i24151"
                                                             "i24149"
                                                             "i24147"
                                                             "i24145"
                                                             "i24143"
                                                             "i24141"
                                                             "i24139"
                                                             "i24136"
                                                             "i24134"
                                                             "i24132"
                                                             "i24130"
                                                             "i24128"
                                                             "i24126"
                                                             "i24124"
                                                             "i24122"
                                                             "i24120"
                                                             "i24118"
                                                             "i24116"
                                                             "i24114"
                                                             "i24112"
                                                             "i24110"
                                                             "i24108"
                                                             "i24106"
                                                             "i24104"
                                                             "i24102"
                                                             "i24100"
                                                             "i24098"
                                                             "i24096"
                                                             "i24094"
                                                             "i24092"
                                                             "i24090"
                                                             "i24089"
                                                             "i24086"
                                                             "i24084"
                                                             "i24083"
                                                             "i24082"
                                                             "i24081"
                                                             "i24080"
                                                             "i24078"
                                                             "i24076"
                                                             "i24074"
                                                             "i24071"
                                                             "i24069"
                                                             "i24067"
                                                             "i24065"
                                                             "i24063"
                                                             "i24061"
                                                             "i24059"
                                                             "i24057"
                                                             "i24055"
                                                             "i24053"
                                                             "i24051"
                                                             "i24049"
                                                             "i24047"
                                                             "i24045"
                                                             "i24043"
                                                             "i24041"
                                                             "i24039"
                                                             "i24037"
                                                             "i24035"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i23873"
                                                             "i23872"
                                                             "i23871"))
                                                          #(ribcage () () ()))
                                                         (hygiene guile))
                                                       #(syntax-object
                                                         #f
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i25792"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i25732"
                                                              "i25733"
                                                              "i25734"
                                                              "i25735"
                                                              "i25736"
                                                              "i25737"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i25724"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i25703"
                                                              "i25704"
                                                              "i25705"
                                                              "i25706"
                                                              "i25707"
                                                              "i25708"
                                                              "i25709"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              expand-lambda-case
                                                              lambda*-formals
                                                              expand-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              expand-void
                                                              eval-local-transformer
                                                              expand-local-syntax
                                                              expand-body
                                                              expand-macro
                                                              expand-call
                                                              expand-expr
                                                              expand
                                                              syntax-type
                                                              parse-when-list
                                                              expand-install-global
                                                              expand-top-sequence
                                                              expand-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              resolve-identifier
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-primcall
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-call
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-seq
                                                              make-primcall
                                                              make-call
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i24298"
                                                             "i24296"
                                                             "i24294"
                                                             "i24292"
                                                             "i24290"
                                                             "i24288"
                                                             "i24286"
                                                             "i24284"
                                                             "i24282"
                                                             "i24280"
                                                             "i24278"
                                                             "i24276"
                                                             "i24274"
                                                             "i24272"
                                                             "i24270"
                                                             "i24268"
                                                             "i24266"
                                                             "i24264"
                                                             "i24262"
                                                             "i24260"
                                                             "i24258"
                                                             "i24256"
                                                             "i24254"
                                                             "i24252"
                                                             "i24250"
                                                             "i24248"
                                                             "i24246"
                                                             "i24244"
                                                             "i24242"
                                                             "i24240"
                                                             "i24238"
                                                             "i24236"
                                                             "i24234"
                                                             "i24232"
                                                             "i24230"
                                                             "i24228"
                                                             "i24227"
                                                             "i24225"
                                                             "i24222"
                                                             "i24221"
                                                             "i24220"
                                                             "i24218"
                                                             "i24217"
                                                             "i24215"
                                                             "i24213"
                                                             "i24211"
                                                             "i24209"
                                                             "i24207"
                                                             "i24205"
                                                             "i24203"
                                                             "i24201"
                                                             "i24198"
                                                             "i24196"
                                                             "i24195"
                                                             "i24193"
                                                             "i24191"
                                                             "i24189"
                                                             "i24187"
                                                             "i24186"
                                                             "i24185"
                                                             "i24184"
                                                             "i24182"
                                                             "i24181"
                                                             "i24178"
                                                             "i24176"
                                                             "i24174"
                                                             "i24172"
                                                             "i24170"
                                                             "i24168"
                                                             "i24167"
                                                             "i24166"
                                                             "i24164"
                                                             "i24162"
                                                             "i24161"
                                                             "i24158"
                                                             "i24157"
                                                             "i24155"
                                                             "i24153"
                                                             "i24151"
                                                             "i24149"
                                                             "i24147"
                                                             "i24145"
                                                             "i24143"
                                                             "i24141"
                                                             "i24139"
                                                             "i24136"
                                                             "i24134"
                                                             "i24132"
                                                             "i24130"
                                                             "i24128"
                                                             "i24126"
                                                             "i24124"
                                                             "i24122"
                                                             "i24120"
                                                             "i24118"
                                                             "i24116"
                                                             "i24114"
                                                             "i24112"
                                                             "i24110"
                                                             "i24108"
                                                             "i24106"
                                                             "i24104"
                                                             "i24102"
                                                             "i24100"
                                                             "i24098"
                                                             "i24096"
                                                             "i24094"
                                                             "i24092"
                                                             "i24090"
                                                             "i24089"
                                                             "i24086"
                                                             "i24084"
                                                             "i24083"
                                                             "i24082"
                                                             "i24081"
                                                             "i24080"
                                                             "i24078"
                                                             "i24076"
                                                             "i24074"
                                                             "i24071"
                                                             "i24069"
                                                             "i24067"
                                                             "i24065"
                                                             "i24063"
                                                             "i24061"
                                                             "i24059"
                                                             "i24057"
                                                             "i24055"
                                                             "i24053"
                                                             "i24051"
                                                             "i24049"
                                                             "i24047"
                                                             "i24045"
                                                             "i24043"
                                                             "i24041"
                                                             "i24039"
                                                             "i24037"
                                                             "i24035"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i23873"
                                                             "i23872"
                                                             "i23871"))
                                                          #(ribcage () () ()))
                                                         (hygiene guile))
                                                       #(syntax-object
                                                         #f
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i25792"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i25732"
                                                              "i25733"
                                                              "i25734"
                                                              "i25735"
                                                              "i25736"
                                                              "i25737"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i25724"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i25703"
                                                              "i25704"
                                                              "i25705"
                                                              "i25706"
                                                              "i25707"
                                                              "i25708"
                                                              "i25709"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              expand-lambda-case
                                                              lambda*-formals
                                                              expand-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              expand-void
                                                              eval-local-transformer
                                                              expand-local-syntax
                                                              expand-body
                                                              expand-macro
                                                              expand-call
                                                              expand-expr
                                                              expand
                                                              syntax-type
                                                              parse-when-list
                                                              expand-install-global
                                                              expand-top-sequence
                                                              expand-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              resolve-identifier
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-primcall
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-call
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-seq
                                                              make-primcall
                                                              make-call
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i24298"
                                                             "i24296"
                                                             "i24294"
                                                             "i24292"
                                                             "i24290"
                                                             "i24288"
                                                             "i24286"
                                                             "i24284"
                                                             "i24282"
                                                             "i24280"
                                                             "i24278"
                                                             "i24276"
                                                             "i24274"
                                                             "i24272"
                                                             "i24270"
                                                             "i24268"
                                                             "i24266"
                                                             "i24264"
                                                             "i24262"
                                                             "i24260"
                                                             "i24258"
                                                             "i24256"
                                                             "i24254"
                                                             "i24252"
                                                             "i24250"
                                                             "i24248"
                                                             "i24246"
                                                             "i24244"
                                                             "i24242"
                                                             "i24240"
                                                             "i24238"
                                                             "i24236"
                                                             "i24234"
                                                             "i24232"
                                                             "i24230"
                                                             "i24228"
                                                             "i24227"
                                                             "i24225"
                                                             "i24222"
                                                             "i24221"
                                                             "i24220"
                                                             "i24218"
                                                             "i24217"
                                                             "i24215"
                                                             "i24213"
                                                             "i24211"
                                                             "i24209"
                                                             "i24207"
                                                             "i24205"
                                                             "i24203"
                                                             "i24201"
                                                             "i24198"
                                                             "i24196"
                                                             "i24195"
                                                             "i24193"
                                                             "i24191"
                                                             "i24189"
                                                             "i24187"
                                                             "i24186"
                                                             "i24185"
                                                             "i24184"
                                                             "i24182"
                                                             "i24181"
                                                             "i24178"
                                                             "i24176"
                                                             "i24174"
                                                             "i24172"
                                                             "i24170"
                                                             "i24168"
                                                             "i24167"
                                                             "i24166"
                                                             "i24164"
                                                             "i24162"
                                                             "i24161"
                                                             "i24158"
                                                             "i24157"
                                                             "i24155"
                                                             "i24153"
                                                             "i24151"
                                                             "i24149"
                                                             "i24147"
                                                             "i24145"
                                                             "i24143"
                                                             "i24141"
                                                             "i24139"
                                                             "i24136"
                                                             "i24134"
                                                             "i24132"
                                                             "i24130"
                                                             "i24128"
                                                             "i24126"
                                                             "i24124"
                                                             "i24122"
                                                             "i24120"
                                                             "i24118"
                                                             "i24116"
                                                             "i24114"
                                                             "i24112"
                                                             "i24110"
                                                             "i24108"
                                                             "i24106"
                                                             "i24104"
                                                             "i24102"
                                                             "i24100"
                                                             "i24098"
                                                             "i24096"
                                                             "i24094"
                                                             "i24092"
                                                             "i24090"
                                                             "i24089"
                                                             "i24086"
                                                             "i24084"
                                                             "i24083"
                                                             "i24082"
                                                             "i24081"
                                                             "i24080"
                                                             "i24078"
                                                             "i24076"
                                                             "i24074"
                                                             "i24071"
                                                             "i24069"
                                                             "i24067"
                                                             "i24065"
                                                             "i24063"
                                                             "i24061"
                                                             "i24059"
                                                             "i24057"
                                                             "i24055"
                                                             "i24053"
                                                             "i24051"
                                                             "i24049"
                                                             "i24047"
                                                             "i24045"
                                                             "i24043"
                                                             "i24041"
                                                             "i24039"
                                                             "i24037"
                                                             "i24035"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i23873"
                                                             "i23872"
                                                             "i23871"))
                                                          #(ribcage () () ()))
                                                         (hygiene guile)))
                                                     '(())
                                                     #{s 47923}#
                                                     #{mod 47925}#))
                                                 #{tmp 48681}#)
                                               (syntax-violation
                                                 #f
                                                 "source expression failed to match any pattern"
                                                 #{e 47920}#)))))))
                                   (if (eqv? #{ftype 47942}# 'define-syntax)
                                     (let ((#{tmp 48827}#
                                             ($sc-dispatch
                                               #{e 47920}#
                                               '(_ any any))))
                                       (if (if #{tmp 48827}#
                                             (@apply
                                               (lambda (#{name 48831}#
                                                        #{val 48832}#)
                                                 (if (symbol? #{name 48831}#)
                                                   #t
                                                   (if (if (vector?
                                                             #{name 48831}#)
                                                         (if (= (vector-length
                                                                  #{name 48831}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{name 48831}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (symbol?
                                                       (vector-ref
                                                         #{name 48831}#
                                                         1))
                                                     #f)))
                                               #{tmp 48827}#)
                                             #f)
                                         (@apply
                                           (lambda (#{name 48859}#
                                                    #{val 48860}#)
                                             (values
                                               'define-syntax-form
                                               #{name 48859}#
                                               #{val 48860}#
                                               #{w 47922}#
                                               #{s 47923}#
                                               #{mod 47925}#))
                                           #{tmp 48827}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{e 47920}#)))
                                     (if (eqv? #{ftype 47942}#
                                               'define-syntax-parameter)
                                       (let ((#{tmp 48871}#
                                               ($sc-dispatch
                                                 #{e 47920}#
                                                 '(_ any any))))
                                         (if (if #{tmp 48871}#
                                               (@apply
                                                 (lambda (#{name 48875}#
                                                          #{val 48876}#)
                                                   (if (symbol? #{name 48875}#)
                                                     #t
                                                     (if (if (vector?
                                                               #{name 48875}#)
                                                           (if (= (vector-length
                                                                    #{name 48875}#)
                                                                  4)
                                                             (eq? (vector-ref
                                                                    #{name 48875}#
                                                                    0)
                                                                  'syntax-object)
                                                             #f)
                                                           #f)
                                                       (symbol?
                                                         (vector-ref
                                                           #{name 48875}#
                                                           1))
                                                       #f)))
                                                 #{tmp 48871}#)
                                               #f)
                                           (@apply
                                             (lambda (#{name 48903}#
                                                      #{val 48904}#)
                                               (values
                                                 'define-syntax-parameter-form
                                                 #{name 48903}#
                                                 #{val 48904}#
                                                 #{w 47922}#
                                                 #{s 47923}#
                                                 #{mod 47925}#))
                                             #{tmp 48871}#)
                                           (syntax-violation
                                             #f
                                             "source expression failed to match any pattern"
                                             #{e 47920}#)))
                                       (values
                                         'call
                                         #f
                                         #{e 47920}#
                                         #{w 47922}#
                                         #{s 47923}#
                                         #{mod 47925}#)))))))))))))))
           (if (if (vector? #{e 47920}#)
                 (if (= (vector-length #{e 47920}#) 4)
                   (eq? (vector-ref #{e 47920}# 0) 'syntax-object)
                   #f)
                 #f)
             (#{syntax-type 28270}#
               (vector-ref #{e 47920}# 1)
               #{r 47921}#
               (let ((#{w2 48929}# (vector-ref #{e 47920}# 2)))
                 (let ((#{m1 48930}# (car #{w 47922}#))
                       (#{s1 48931}# (cdr #{w 47922}#)))
                   (if (null? #{m1 48930}#)
                     (if (null? #{s1 48931}#)
                       #{w2 48929}#
                       (cons (car #{w2 48929}#)
                             (let ((#{m2 48942}# (cdr #{w2 48929}#)))
                               (if (null? #{m2 48942}#)
                                 #{s1 48931}#
                                 (append #{s1 48931}# #{m2 48942}#)))))
                     (cons (let ((#{m2 48950}# (car #{w2 48929}#)))
                             (if (null? #{m2 48950}#)
                               #{m1 48930}#
                               (append #{m1 48930}# #{m2 48950}#)))
                           (let ((#{m2 48958}# (cdr #{w2 48929}#)))
                             (if (null? #{m2 48958}#)
                               #{s1 48931}#
                               (append #{s1 48931}# #{m2 48958}#)))))))
               (let ((#{t 48963}#
                       (#{source-annotation 28232}# #{e 47920}#)))
                 (if #{t 48963}# #{t 48963}# #{s 47923}#))
               #{rib 47924}#
               (let ((#{t 49239}# (vector-ref #{e 47920}# 3)))
                 (if #{t 49239}# #{t 49239}# #{mod 47925}#))
               #{for-car? 47926}#)
             (if (self-evaluating? #{e 47920}#)
               (values
                 'constant
                 #f
                 #{e 47920}#
                 #{w 47922}#
                 #{s 47923}#
                 #{mod 47925}#)
               (values
                 'other
                 #f
                 #{e 47920}#
                 #{w 47922}#
                 #{s 47923}#
                 #{mod 47925}#)))))))
   (#{expand 28271}#
     (lambda (#{e 49248}#
              #{r 49249}#
              #{w 49250}#
              #{mod 49251}#)
       (call-with-values
         (lambda ()
           (#{syntax-type 28270}#
             #{e 49248}#
             #{r 49249}#
             #{w 49250}#
             (#{source-annotation 28232}# #{e 49248}#)
             #f
             #{mod 49251}#
             #f))
         (lambda (#{type 49437}#
                  #{value 49438}#
                  #{e 49439}#
                  #{w 49440}#
                  #{s 49441}#
                  #{mod 49442}#)
           (#{expand-expr 28272}#
             #{type 49437}#
             #{value 49438}#
             #{e 49439}#
             #{r 49249}#
             #{w 49440}#
             #{s 49441}#
             #{mod 49442}#)))))
   (#{expand-expr 28272}#
     (lambda (#{type 49445}#
              #{value 49446}#
              #{e 49447}#
              #{r 49448}#
              #{w 49449}#
              #{s 49450}#
              #{mod 49451}#)
       (if (eqv? #{type 49445}# 'lexical)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 3)
           #{s 49450}#
           #{e 49447}#
           #{value 49446}#)
         (if (if (eqv? #{type 49445}# 'core)
               #t
               (eqv? #{type 49445}# 'core-form))
           (#{value 49446}#
             #{e 49447}#
             #{r 49448}#
             #{w 49449}#
             #{s 49450}#
             #{mod 49451}#)
           (if (eqv? #{type 49445}# 'module-ref)
             (call-with-values
               (lambda ()
                 (#{value 49446}#
                   #{e 49447}#
                   #{r 49448}#
                   #{w 49449}#))
               (lambda (#{e 49477}#
                        #{r 49478}#
                        #{w 49479}#
                        #{s 49480}#
                        #{mod 49481}#)
                 (#{expand 28271}#
                   #{e 49477}#
                   #{r 49478}#
                   #{w 49479}#
                   #{mod 49481}#)))
             (if (eqv? #{type 49445}# 'lexical-call)
               (#{expand-call 28273}#
                 (let ((#{id 49654}# (car #{e 49447}#)))
                   (#{build-lexical-reference 28208}#
                     'fun
                     (#{source-annotation 28232}# #{id 49654}#)
                     (if (if (vector? #{id 49654}#)
                           (if (= (vector-length #{id 49654}#) 4)
                             (eq? (vector-ref #{id 49654}# 0) 'syntax-object)
                             #f)
                           #f)
                       (syntax->datum #{id 49654}#)
                       #{id 49654}#)
                     #{value 49446}#))
                 #{e 49447}#
                 #{r 49448}#
                 #{w 49449}#
                 #{s 49450}#
                 #{mod 49451}#)
               (if (eqv? #{type 49445}# 'global-call)
                 (#{expand-call 28273}#
                   (#{build-global-reference 28211}#
                     (#{source-annotation 28232}# (car #{e 49447}#))
                     (if (if (vector? #{value 49446}#)
                           (if (= (vector-length #{value 49446}#) 4)
                             (eq? (vector-ref #{value 49446}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{value 49446}# 1)
                       #{value 49446}#)
                     (if (if (vector? #{value 49446}#)
                           (if (= (vector-length #{value 49446}#) 4)
                             (eq? (vector-ref #{value 49446}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{value 49446}# 3)
                       #{mod 49451}#))
                   #{e 49447}#
                   #{r 49448}#
                   #{w 49449}#
                   #{s 49450}#
                   #{mod 49451}#)
                 (if (eqv? #{type 49445}# 'constant)
                   (let ((#{exp 50328}#
                           (#{strip 28284}#
                             (let ((#{x 50341}#
                                     (begin
                                       (if (if (pair? #{e 49447}#)
                                             #{s 49450}#
                                             #f)
                                         (set-source-properties!
                                           #{e 49447}#
                                           #{s 49450}#))
                                       #{e 49447}#)))
                               (if (if (null? (car #{w 49449}#))
                                     (null? (cdr #{w 49449}#))
                                     #f)
                                 #{x 50341}#
                                 (if (if (vector? #{x 50341}#)
                                       (if (= (vector-length #{x 50341}#) 4)
                                         (eq? (vector-ref #{x 50341}# 0)
                                              'syntax-object)
                                         #f)
                                       #f)
                                   (let ((#{expression 50373}#
                                           (vector-ref #{x 50341}# 1))
                                         (#{wrap 50374}#
                                           (let ((#{w2 50382}#
                                                   (vector-ref #{x 50341}# 2)))
                                             (let ((#{m1 50383}#
                                                     (car #{w 49449}#))
                                                   (#{s1 50384}#
                                                     (cdr #{w 49449}#)))
                                               (if (null? #{m1 50383}#)
                                                 (if (null? #{s1 50384}#)
                                                   #{w2 50382}#
                                                   (cons (car #{w2 50382}#)
                                                         (let ((#{m2 50399}#
                                                                 (cdr #{w2 50382}#)))
                                                           (if (null? #{m2 50399}#)
                                                             #{s1 50384}#
                                                             (append
                                                               #{s1 50384}#
                                                               #{m2 50399}#)))))
                                                 (cons (let ((#{m2 50407}#
                                                               (car #{w2 50382}#)))
                                                         (if (null? #{m2 50407}#)
                                                           #{m1 50383}#
                                                           (append
                                                             #{m1 50383}#
                                                             #{m2 50407}#)))
                                                       (let ((#{m2 50415}#
                                                               (cdr #{w2 50382}#)))
                                                         (if (null? #{m2 50415}#)
                                                           #{s1 50384}#
                                                           (append
                                                             #{s1 50384}#
                                                             #{m2 50415}#))))))))
                                         (#{module 50375}#
                                           (vector-ref #{x 50341}# 3)))
                                     (vector
                                       'syntax-object
                                       #{expression 50373}#
                                       #{wrap 50374}#
                                       #{module 50375}#))
                                   (if (null? #{x 50341}#)
                                     #{x 50341}#
                                     (vector
                                       'syntax-object
                                       #{x 50341}#
                                       #{w 49449}#
                                       #{mod 49451}#)))))
                             '(()))))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 1)
                       #{s 49450}#
                       #{exp 50328}#))
                   (if (eqv? #{type 49445}# 'global)
                     (#{analyze-variable 28210}#
                       #{mod 49451}#
                       #{value 49446}#
                       (lambda (#{mod 50440}# #{var 50441}# #{public? 50442}#)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #{s 49450}#
                           #{mod 50440}#
                           #{var 50441}#
                           #{public? 50442}#))
                       (lambda (#{var 50450}#)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #{s 49450}#
                           #{var 50450}#)))
                     (if (eqv? #{type 49445}# 'call)
                       (#{expand-call 28273}#
                         (#{expand 28271}#
                           (car #{e 49447}#)
                           #{r 49448}#
                           #{w 49449}#
                           #{mod 49451}#)
                         #{e 49447}#
                         #{r 49448}#
                         #{w 49449}#
                         #{s 49450}#
                         #{mod 49451}#)
                       (if (eqv? #{type 49445}# 'begin-form)
                         (let ((#{tmp 50620}#
                                 ($sc-dispatch
                                   #{e 49447}#
                                   '(_ any . each-any))))
                           (if #{tmp 50620}#
                             (@apply
                               (lambda (#{e1 50624}# #{e2 50625}#)
                                 (#{expand-sequence 28266}#
                                   (cons #{e1 50624}# #{e2 50625}#)
                                   #{r 49448}#
                                   #{w 49449}#
                                   #{s 49450}#
                                   #{mod 49451}#))
                               #{tmp 50620}#)
                             (let ((#{tmp 50720}#
                                     ($sc-dispatch #{e 49447}# '(_))))
                               (if #{tmp 50720}#
                                 (@apply
                                   (lambda ()
                                     (begin
                                       (issue-deprecation-warning
                                         "Sequences of zero expressions are deprecated.  Use *unspecified*.")
                                       (make-struct/no-tail
                                         (vector-ref %expanded-vtables 0)
                                         #f)))
                                   #{tmp 50720}#)
                                 (syntax-violation
                                   #f
                                   "source expression failed to match any pattern"
                                   #{e 49447}#)))))
                         (if (eqv? #{type 49445}# 'local-syntax-form)
                           (#{expand-local-syntax 28276}#
                             #{value 49446}#
                             #{e 49447}#
                             #{r 49448}#
                             #{w 49449}#
                             #{s 49450}#
                             #{mod 49451}#
                             #{expand-sequence 28266}#)
                           (if (eqv? #{type 49445}# 'eval-when-form)
                             (let ((#{tmp 50812}#
                                     ($sc-dispatch
                                       #{e 49447}#
                                       '(_ each-any any . each-any))))
                               (if #{tmp 50812}#
                                 (@apply
                                   (lambda (#{x 50816}#
                                            #{e1 50817}#
                                            #{e2 50818}#)
                                     (let ((#{when-list 50819}#
                                             (#{parse-when-list 28269}#
                                               #{e 49447}#
                                               #{x 50816}#)))
                                       (if (memq 'eval #{when-list 50819}#)
                                         (#{expand-sequence 28266}#
                                           (cons #{e1 50817}# #{e2 50818}#)
                                           #{r 49448}#
                                           #{w 49449}#
                                           #{s 49450}#
                                           #{mod 49451}#)
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 0)
                                           #f))))
                                   #{tmp 50812}#)
                                 (syntax-violation
                                   #f
                                   "source expression failed to match any pattern"
                                   #{e 49447}#)))
                             (if (if (eqv? #{type 49445}# 'define-form)
                                   #t
                                   (if (eqv? #{type 49445}#
                                             'define-syntax-form)
                                     #t
                                     (eqv? #{type 49445}#
                                           'define-syntax-parameter-form)))
                               (syntax-violation
                                 #f
                                 "definition in expression context"
                                 #{e 49447}#
                                 (if (if (null? (car #{w 49449}#))
                                       (null? (cdr #{w 49449}#))
                                       #f)
                                   #{value 49446}#
                                   (if (if (vector? #{value 49446}#)
                                         (if (= (vector-length #{value 49446}#)
                                                4)
                                           (eq? (vector-ref #{value 49446}# 0)
                                                'syntax-object)
                                           #f)
                                         #f)
                                     (let ((#{expression 51026}#
                                             (vector-ref #{value 49446}# 1))
                                           (#{wrap 51027}#
                                             (let ((#{w2 51037}#
                                                     (vector-ref
                                                       #{value 49446}#
                                                       2)))
                                               (let ((#{m1 51038}#
                                                       (car #{w 49449}#))
                                                     (#{s1 51039}#
                                                       (cdr #{w 49449}#)))
                                                 (if (null? #{m1 51038}#)
                                                   (if (null? #{s1 51039}#)
                                                     #{w2 51037}#
                                                     (cons (car #{w2 51037}#)
                                                           (let ((#{m2 51056}#
                                                                   (cdr #{w2 51037}#)))
                                                             (if (null? #{m2 51056}#)
                                                               #{s1 51039}#
                                                               (append
                                                                 #{s1 51039}#
                                                                 #{m2 51056}#)))))
                                                   (cons (let ((#{m2 51064}#
                                                                 (car #{w2 51037}#)))
                                                           (if (null? #{m2 51064}#)
                                                             #{m1 51038}#
                                                             (append
                                                               #{m1 51038}#
                                                               #{m2 51064}#)))
                                                         (let ((#{m2 51072}#
                                                                 (cdr #{w2 51037}#)))
                                                           (if (null? #{m2 51072}#)
                                                             #{s1 51039}#
                                                             (append
                                                               #{s1 51039}#
                                                               #{m2 51072}#))))))))
                                           (#{module 51028}#
                                             (vector-ref #{value 49446}# 3)))
                                       (vector
                                         'syntax-object
                                         #{expression 51026}#
                                         #{wrap 51027}#
                                         #{module 51028}#))
                                     (if (null? #{value 49446}#)
                                       #{value 49446}#
                                       (vector
                                         'syntax-object
                                         #{value 49446}#
                                         #{w 49449}#
                                         #{mod 49451}#)))))
                               (if (eqv? #{type 49445}# 'syntax)
                                 (syntax-violation
                                   #f
                                   "reference to pattern variable outside syntax form"
                                   (let ((#{x 51107}#
                                           (begin
                                             (if (if (pair? #{e 49447}#)
                                                   #{s 49450}#
                                                   #f)
                                               (set-source-properties!
                                                 #{e 49447}#
                                                 #{s 49450}#))
                                             #{e 49447}#)))
                                     (if (if (null? (car #{w 49449}#))
                                           (null? (cdr #{w 49449}#))
                                           #f)
                                       #{x 51107}#
                                       (if (if (vector? #{x 51107}#)
                                             (if (= (vector-length #{x 51107}#)
                                                    4)
                                               (eq? (vector-ref #{x 51107}# 0)
                                                    'syntax-object)
                                               #f)
                                             #f)
                                         (let ((#{expression 51139}#
                                                 (vector-ref #{x 51107}# 1))
                                               (#{wrap 51140}#
                                                 (let ((#{w2 51148}#
                                                         (vector-ref
                                                           #{x 51107}#
                                                           2)))
                                                   (let ((#{m1 51149}#
                                                           (car #{w 49449}#))
                                                         (#{s1 51150}#
                                                           (cdr #{w 49449}#)))
                                                     (if (null? #{m1 51149}#)
                                                       (if (null? #{s1 51150}#)
                                                         #{w2 51148}#
                                                         (cons (car #{w2 51148}#)
                                                               (let ((#{m2 51165}#
                                                                       (cdr #{w2 51148}#)))
                                                                 (if (null? #{m2 51165}#)
                                                                   #{s1 51150}#
                                                                   (append
                                                                     #{s1 51150}#
                                                                     #{m2 51165}#)))))
                                                       (cons (let ((#{m2 51173}#
                                                                     (car #{w2 51148}#)))
                                                               (if (null? #{m2 51173}#)
                                                                 #{m1 51149}#
                                                                 (append
                                                                   #{m1 51149}#
                                                                   #{m2 51173}#)))
                                                             (let ((#{m2 51181}#
                                                                     (cdr #{w2 51148}#)))
                                                               (if (null? #{m2 51181}#)
                                                                 #{s1 51150}#
                                                                 (append
                                                                   #{s1 51150}#
                                                                   #{m2 51181}#))))))))
                                               (#{module 51141}#
                                                 (vector-ref #{x 51107}# 3)))
                                           (vector
                                             'syntax-object
                                             #{expression 51139}#
                                             #{wrap 51140}#
                                             #{module 51141}#))
                                         (if (null? #{x 51107}#)
                                           #{x 51107}#
                                           (vector
                                             'syntax-object
                                             #{x 51107}#
                                             #{w 49449}#
                                             #{mod 49451}#))))))
                                 (if (eqv? #{type 49445}# 'displaced-lexical)
                                   (syntax-violation
                                     #f
                                     "reference to identifier outside its scope"
                                     (let ((#{x 51208}#
                                             (begin
                                               (if (if (pair? #{e 49447}#)
                                                     #{s 49450}#
                                                     #f)
                                                 (set-source-properties!
                                                   #{e 49447}#
                                                   #{s 49450}#))
                                               #{e 49447}#)))
                                       (if (if (null? (car #{w 49449}#))
                                             (null? (cdr #{w 49449}#))
                                             #f)
                                         #{x 51208}#
                                         (if (if (vector? #{x 51208}#)
                                               (if (= (vector-length
                                                        #{x 51208}#)
                                                      4)
                                                 (eq? (vector-ref
                                                        #{x 51208}#
                                                        0)
                                                      'syntax-object)
                                                 #f)
                                               #f)
                                           (let ((#{expression 51240}#
                                                   (vector-ref #{x 51208}# 1))
                                                 (#{wrap 51241}#
                                                   (let ((#{w2 51249}#
                                                           (vector-ref
                                                             #{x 51208}#
                                                             2)))
                                                     (let ((#{m1 51250}#
                                                             (car #{w 49449}#))
                                                           (#{s1 51251}#
                                                             (cdr #{w 49449}#)))
                                                       (if (null? #{m1 51250}#)
                                                         (if (null? #{s1 51251}#)
                                                           #{w2 51249}#
                                                           (cons (car #{w2 51249}#)
                                                                 (let ((#{m2 51266}#
                                                                         (cdr #{w2 51249}#)))
                                                                   (if (null? #{m2 51266}#)
                                                                     #{s1 51251}#
                                                                     (append
                                                                       #{s1 51251}#
                                                                       #{m2 51266}#)))))
                                                         (cons (let ((#{m2 51274}#
                                                                       (car #{w2 51249}#)))
                                                                 (if (null? #{m2 51274}#)
                                                                   #{m1 51250}#
                                                                   (append
                                                                     #{m1 51250}#
                                                                     #{m2 51274}#)))
                                                               (let ((#{m2 51282}#
                                                                       (cdr #{w2 51249}#)))
                                                                 (if (null? #{m2 51282}#)
                                                                   #{s1 51251}#
                                                                   (append
                                                                     #{s1 51251}#
                                                                     #{m2 51282}#))))))))
                                                 (#{module 51242}#
                                                   (vector-ref #{x 51208}# 3)))
                                             (vector
                                               'syntax-object
                                               #{expression 51240}#
                                               #{wrap 51241}#
                                               #{module 51242}#))
                                           (if (null? #{x 51208}#)
                                             #{x 51208}#
                                             (vector
                                               'syntax-object
                                               #{x 51208}#
                                               #{w 49449}#
                                               #{mod 49451}#))))))
                                   (syntax-violation
                                     #f
                                     "unexpected syntax"
                                     (let ((#{x 51306}#
                                             (begin
                                               (if (if (pair? #{e 49447}#)
                                                     #{s 49450}#
                                                     #f)
                                                 (set-source-properties!
                                                   #{e 49447}#
                                                   #{s 49450}#))
                                               #{e 49447}#)))
                                       (if (if (null? (car #{w 49449}#))
                                             (null? (cdr #{w 49449}#))
                                             #f)
                                         #{x 51306}#
                                         (if (if (vector? #{x 51306}#)
                                               (if (= (vector-length
                                                        #{x 51306}#)
                                                      4)
                                                 (eq? (vector-ref
                                                        #{x 51306}#
                                                        0)
                                                      'syntax-object)
                                                 #f)
                                               #f)
                                           (let ((#{expression 51338}#
                                                   (vector-ref #{x 51306}# 1))
                                                 (#{wrap 51339}#
                                                   (let ((#{w2 51347}#
                                                           (vector-ref
                                                             #{x 51306}#
                                                             2)))
                                                     (let ((#{m1 51348}#
                                                             (car #{w 49449}#))
                                                           (#{s1 51349}#
                                                             (cdr #{w 49449}#)))
                                                       (if (null? #{m1 51348}#)
                                                         (if (null? #{s1 51349}#)
                                                           #{w2 51347}#
                                                           (cons (car #{w2 51347}#)
                                                                 (let ((#{m2 51364}#
                                                                         (cdr #{w2 51347}#)))
                                                                   (if (null? #{m2 51364}#)
                                                                     #{s1 51349}#
                                                                     (append
                                                                       #{s1 51349}#
                                                                       #{m2 51364}#)))))
                                                         (cons (let ((#{m2 51372}#
                                                                       (car #{w2 51347}#)))
                                                                 (if (null? #{m2 51372}#)
                                                                   #{m1 51348}#
                                                                   (append
                                                                     #{m1 51348}#
                                                                     #{m2 51372}#)))
                                                               (let ((#{m2 51380}#
                                                                       (cdr #{w2 51347}#)))
                                                                 (if (null? #{m2 51380}#)
                                                                   #{s1 51349}#
                                                                   (append
                                                                     #{s1 51349}#
                                                                     #{m2 51380}#))))))))
                                                 (#{module 51340}#
                                                   (vector-ref #{x 51306}# 3)))
                                             (vector
                                               'syntax-object
                                               #{expression 51338}#
                                               #{wrap 51339}#
                                               #{module 51340}#))
                                           (if (null? #{x 51306}#)
                                             #{x 51306}#
                                             (vector
                                               'syntax-object
                                               #{x 51306}#
                                               #{w 49449}#
                                               #{mod 49451}#))))))))))))))))))))))
   (#{expand-call 28273}#
     (lambda (#{x 51395}#
              #{e 51396}#
              #{r 51397}#
              #{w 51398}#
              #{s 51399}#
              #{mod 51400}#)
       (let ((#{tmp 51402}#
               ($sc-dispatch #{e 51396}# '(any . each-any))))
         (if #{tmp 51402}#
           (@apply
             (lambda (#{e0 51406}# #{e1 51407}#)
               (#{build-call 28205}#
                 #{s 51399}#
                 #{x 51395}#
                 (map (lambda (#{e 51495}#)
                        (#{expand 28271}#
                          #{e 51495}#
                          #{r 51397}#
                          #{w 51398}#
                          #{mod 51400}#))
                      #{e1 51407}#)))
             #{tmp 51402}#)
           (syntax-violation
             #f
             "source expression failed to match any pattern"
             #{e 51396}#)))))
   (#{expand-macro 28274}#
     (lambda (#{p 51579}#
              #{e 51580}#
              #{r 51581}#
              #{w 51582}#
              #{s 51583}#
              #{rib 51584}#
              #{mod 51585}#)
       (letrec*
         ((#{rebuild-macro-output 51586}#
            (lambda (#{x 51693}# #{m 51694}#)
              (if (pair? #{x 51693}#)
                (let ((#{e 51698}#
                        (cons (#{rebuild-macro-output 51586}#
                                (car #{x 51693}#)
                                #{m 51694}#)
                              (#{rebuild-macro-output 51586}#
                                (cdr #{x 51693}#)
                                #{m 51694}#))))
                  (begin
                    (if (if (pair? #{e 51698}#) #{s 51583}# #f)
                      (set-source-properties! #{e 51698}# #{s 51583}#))
                    #{e 51698}#))
                (if (if (vector? #{x 51693}#)
                      (if (= (vector-length #{x 51693}#) 4)
                        (eq? (vector-ref #{x 51693}# 0) 'syntax-object)
                        #f)
                      #f)
                  (let ((#{w 51714}# (vector-ref #{x 51693}# 2)))
                    (let ((#{ms 51715}# (car #{w 51714}#))
                          (#{s 51716}# (cdr #{w 51714}#)))
                      (if (if (pair? #{ms 51715}#)
                            (eq? (car #{ms 51715}#) #f)
                            #f)
                        (let ((#{expression 51724}# (vector-ref #{x 51693}# 1))
                              (#{wrap 51725}#
                                (cons (cdr #{ms 51715}#)
                                      (if #{rib 51584}#
                                        (cons #{rib 51584}# (cdr #{s 51716}#))
                                        (cdr #{s 51716}#))))
                              (#{module 51726}# (vector-ref #{x 51693}# 3)))
                          (vector
                            'syntax-object
                            #{expression 51724}#
                            #{wrap 51725}#
                            #{module 51726}#))
                        (let ((#{expression 51736}#
                                (let ((#{e 51741}# (vector-ref #{x 51693}# 1)))
                                  (begin
                                    (if (if (pair? #{e 51741}#) #{s 51716}# #f)
                                      (set-source-properties!
                                        #{e 51741}#
                                        #{s 51716}#))
                                    #{e 51741}#)))
                              (#{wrap 51737}#
                                (cons (cons #{m 51694}# #{ms 51715}#)
                                      (if #{rib 51584}#
                                        (cons #{rib 51584}#
                                              (cons 'shift #{s 51716}#))
                                        (cons 'shift #{s 51716}#))))
                              (#{module 51738}# (vector-ref #{x 51693}# 3)))
                          (vector
                            'syntax-object
                            #{expression 51736}#
                            #{wrap 51737}#
                            #{module 51738}#)))))
                  (if (vector? #{x 51693}#)
                    (let ((#{n 51753}# (vector-length #{x 51693}#)))
                      (let ((#{v 51754}#
                              (let ((#{e 51820}# (make-vector #{n 51753}#)))
                                (begin
                                  (if (if (pair? #{e 51820}#) #{x 51693}# #f)
                                    (set-source-properties!
                                      #{e 51820}#
                                      #{x 51693}#))
                                  #{e 51820}#))))
                        (letrec*
                          ((#{loop 51755}#
                             (lambda (#{i 51816}#)
                               (if (= #{i 51816}# #{n 51753}#)
                                 #{v 51754}#
                                 (begin
                                   (vector-set!
                                     #{v 51754}#
                                     #{i 51816}#
                                     (#{rebuild-macro-output 51586}#
                                       (vector-ref #{x 51693}# #{i 51816}#)
                                       #{m 51694}#))
                                   (#{loop 51755}# (#{1+}# #{i 51816}#)))))))
                          (#{loop 51755}# 0))))
                    (if (symbol? #{x 51693}#)
                      (syntax-violation
                        #f
                        "encountered raw symbol in macro output"
                        (let ((#{s 51831}# (cdr #{w 51582}#)))
                          (let ((#{x 51835}#
                                  (begin
                                    (if (if (pair? #{e 51580}#) #{s 51831}# #f)
                                      (set-source-properties!
                                        #{e 51580}#
                                        #{s 51831}#))
                                    #{e 51580}#)))
                            (if (if (null? (car #{w 51582}#))
                                  (null? (cdr #{w 51582}#))
                                  #f)
                              #{x 51835}#
                              (if (if (vector? #{x 51835}#)
                                    (if (= (vector-length #{x 51835}#) 4)
                                      (eq? (vector-ref #{x 51835}# 0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (let ((#{expression 51867}#
                                        (vector-ref #{x 51835}# 1))
                                      (#{wrap 51868}#
                                        (let ((#{w2 51876}#
                                                (vector-ref #{x 51835}# 2)))
                                          (let ((#{m1 51877}#
                                                  (car #{w 51582}#))
                                                (#{s1 51878}#
                                                  (cdr #{w 51582}#)))
                                            (if (null? #{m1 51877}#)
                                              (if (null? #{s1 51878}#)
                                                #{w2 51876}#
                                                (cons (car #{w2 51876}#)
                                                      (let ((#{m2 51893}#
                                                              (cdr #{w2 51876}#)))
                                                        (if (null? #{m2 51893}#)
                                                          #{s1 51878}#
                                                          (append
                                                            #{s1 51878}#
                                                            #{m2 51893}#)))))
                                              (cons (let ((#{m2 51901}#
                                                            (car #{w2 51876}#)))
                                                      (if (null? #{m2 51901}#)
                                                        #{m1 51877}#
                                                        (append
                                                          #{m1 51877}#
                                                          #{m2 51901}#)))
                                                    (let ((#{m2 51909}#
                                                            (cdr #{w2 51876}#)))
                                                      (if (null? #{m2 51909}#)
                                                        #{s1 51878}#
                                                        (append
                                                          #{s1 51878}#
                                                          #{m2 51909}#))))))))
                                      (#{module 51869}#
                                        (vector-ref #{x 51835}# 3)))
                                  (vector
                                    'syntax-object
                                    #{expression 51867}#
                                    #{wrap 51868}#
                                    #{module 51869}#))
                                (if (null? #{x 51835}#)
                                  #{x 51835}#
                                  (vector
                                    'syntax-object
                                    #{x 51835}#
                                    #{w 51582}#
                                    #{mod 51585}#))))))
                        #{x 51693}#)
                      (begin
                        (if (if (pair? #{x 51693}#) #{s 51583}# #f)
                          (set-source-properties! #{x 51693}# #{s 51583}#))
                        #{x 51693}#))))))))
         (#{rebuild-macro-output 51586}#
           (#{p 51579}#
             (let ((#{w 51593}#
                     (cons (cons #f (car #{w 51582}#))
                           (cons 'shift (cdr #{w 51582}#)))))
               (let ((#{x 51598}#
                       (begin
                         (if (if (pair? #{e 51580}#) #{s 51583}# #f)
                           (set-source-properties! #{e 51580}# #{s 51583}#))
                         #{e 51580}#)))
                 (if (if (null? (car #{w 51593}#))
                       (null? (cdr #{w 51593}#))
                       #f)
                   #{x 51598}#
                   (if (if (vector? #{x 51598}#)
                         (if (= (vector-length #{x 51598}#) 4)
                           (eq? (vector-ref #{x 51598}# 0) 'syntax-object)
                           #f)
                         #f)
                     (let ((#{expression 51636}# (vector-ref #{x 51598}# 1))
                           (#{wrap 51637}#
                             (let ((#{w2 51645}# (vector-ref #{x 51598}# 2)))
                               (let ((#{m1 51646}# (car #{w 51593}#))
                                     (#{s1 51647}# (cdr #{w 51593}#)))
                                 (if (null? #{m1 51646}#)
                                   (if (null? #{s1 51647}#)
                                     #{w2 51645}#
                                     (cons (car #{w2 51645}#)
                                           (let ((#{m2 51662}#
                                                   (cdr #{w2 51645}#)))
                                             (if (null? #{m2 51662}#)
                                               #{s1 51647}#
                                               (append
                                                 #{s1 51647}#
                                                 #{m2 51662}#)))))
                                   (cons (let ((#{m2 51670}#
                                                 (car #{w2 51645}#)))
                                           (if (null? #{m2 51670}#)
                                             #{m1 51646}#
                                             (append
                                               #{m1 51646}#
                                               #{m2 51670}#)))
                                         (let ((#{m2 51678}#
                                                 (cdr #{w2 51645}#)))
                                           (if (null? #{m2 51678}#)
                                             #{s1 51647}#
                                             (append
                                               #{s1 51647}#
                                               #{m2 51678}#))))))))
                           (#{module 51638}# (vector-ref #{x 51598}# 3)))
                       (vector
                         'syntax-object
                         #{expression 51636}#
                         #{wrap 51637}#
                         #{module 51638}#))
                     (if (null? #{x 51598}#)
                       #{x 51598}#
                       (vector
                         'syntax-object
                         #{x 51598}#
                         #{w 51593}#
                         #{mod 51585}#)))))))
           (gensym "m")))))
   (#{expand-body 28275}#
     (lambda (#{body 51939}#
              #{outer-form 51940}#
              #{r 51941}#
              #{w 51942}#
              #{mod 51943}#)
       (let ((#{r 51944}#
               (cons '("placeholder" placeholder) #{r 51941}#)))
         (let ((#{ribcage 51945}# (vector 'ribcage '() '() '())))
           (let ((#{w 51946}#
                   (cons (car #{w 51942}#)
                         (cons #{ribcage 51945}# (cdr #{w 51942}#)))))
             (letrec*
               ((#{parse 51947}#
                  (lambda (#{body 52055}#
                           #{ids 52056}#
                           #{labels 52057}#
                           #{var-ids 52058}#
                           #{vars 52059}#
                           #{vals 52060}#
                           #{bindings 52061}#)
                    (if (null? #{body 52055}#)
                      (syntax-violation
                        #f
                        "no expressions in body"
                        #{outer-form 51940}#)
                      (let ((#{e 52062}# (cdr (car #{body 52055}#)))
                            (#{er 52063}# (car (car #{body 52055}#))))
                        (call-with-values
                          (lambda ()
                            (#{syntax-type 28270}#
                              #{e 52062}#
                              #{er 52063}#
                              '(())
                              (#{source-annotation 28232}# #{er 52063}#)
                              #{ribcage 51945}#
                              #{mod 51943}#
                              #f))
                          (lambda (#{type 52251}#
                                   #{value 52252}#
                                   #{e 52253}#
                                   #{w 52254}#
                                   #{s 52255}#
                                   #{mod 52256}#)
                            (if (eqv? #{type 52251}# 'define-form)
                              (let ((#{id 52260}#
                                      (if (if (null? (car #{w 52254}#))
                                            (null? (cdr #{w 52254}#))
                                            #f)
                                        #{value 52252}#
                                        (if (if (vector? #{value 52252}#)
                                              (if (= (vector-length
                                                       #{value 52252}#)
                                                     4)
                                                (eq? (vector-ref
                                                       #{value 52252}#
                                                       0)
                                                     'syntax-object)
                                                #f)
                                              #f)
                                          (let ((#{expression 52305}#
                                                  (vector-ref
                                                    #{value 52252}#
                                                    1))
                                                (#{wrap 52306}#
                                                  (let ((#{w2 52316}#
                                                          (vector-ref
                                                            #{value 52252}#
                                                            2)))
                                                    (let ((#{m1 52317}#
                                                            (car #{w 52254}#))
                                                          (#{s1 52318}#
                                                            (cdr #{w 52254}#)))
                                                      (if (null? #{m1 52317}#)
                                                        (if (null? #{s1 52318}#)
                                                          #{w2 52316}#
                                                          (cons (car #{w2 52316}#)
                                                                (let ((#{m2 52335}#
                                                                        (cdr #{w2 52316}#)))
                                                                  (if (null? #{m2 52335}#)
                                                                    #{s1 52318}#
                                                                    (append
                                                                      #{s1 52318}#
                                                                      #{m2 52335}#)))))
                                                        (cons (let ((#{m2 52343}#
                                                                      (car #{w2 52316}#)))
                                                                (if (null? #{m2 52343}#)
                                                                  #{m1 52317}#
                                                                  (append
                                                                    #{m1 52317}#
                                                                    #{m2 52343}#)))
                                                              (let ((#{m2 52351}#
                                                                      (cdr #{w2 52316}#)))
                                                                (if (null? #{m2 52351}#)
                                                                  #{s1 52318}#
                                                                  (append
                                                                    #{s1 52318}#
                                                                    #{m2 52351}#))))))))
                                                (#{module 52307}#
                                                  (vector-ref
                                                    #{value 52252}#
                                                    3)))
                                            (vector
                                              'syntax-object
                                              #{expression 52305}#
                                              #{wrap 52306}#
                                              #{module 52307}#))
                                          (if (null? #{value 52252}#)
                                            #{value 52252}#
                                            (vector
                                              'syntax-object
                                              #{value 52252}#
                                              #{w 52254}#
                                              #{mod 52256}#)))))
                                    (#{label 52261}#
                                      (symbol->string (gensym "i"))))
                                (let ((#{var 52262}#
                                        (let ((#{id 52412}#
                                                (if (if (vector? #{id 52260}#)
                                                      (if (= (vector-length
                                                               #{id 52260}#)
                                                             4)
                                                        (eq? (vector-ref
                                                               #{id 52260}#
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (vector-ref #{id 52260}# 1)
                                                  #{id 52260}#)))
                                          (gensym
                                            (string-append
                                              (symbol->string #{id 52412}#)
                                              " ")))))
                                  (begin
                                    (begin
                                      (let ((#{update 52271}#
                                              (cons (vector-ref #{id 52260}# 1)
                                                    (vector-ref
                                                      #{ribcage 51945}#
                                                      1))))
                                        (vector-set!
                                          #{ribcage 51945}#
                                          1
                                          #{update 52271}#))
                                      (let ((#{update 52383}#
                                              (cons (car (vector-ref
                                                           #{id 52260}#
                                                           2))
                                                    (vector-ref
                                                      #{ribcage 51945}#
                                                      2))))
                                        (vector-set!
                                          #{ribcage 51945}#
                                          2
                                          #{update 52383}#))
                                      (let ((#{update 52398}#
                                              (cons #{label 52261}#
                                                    (vector-ref
                                                      #{ribcage 51945}#
                                                      3))))
                                        (vector-set!
                                          #{ribcage 51945}#
                                          3
                                          #{update 52398}#)))
                                    (#{parse 51947}#
                                      (cdr #{body 52055}#)
                                      (cons #{id 52260}# #{ids 52056}#)
                                      (cons #{label 52261}# #{labels 52057}#)
                                      (cons #{id 52260}# #{var-ids 52058}#)
                                      (cons #{var 52262}# #{vars 52059}#)
                                      (cons (cons #{er 52063}#
                                                  (if (if (null? (car #{w 52254}#))
                                                        (null? (cdr #{w 52254}#))
                                                        #f)
                                                    #{e 52253}#
                                                    (if (if (vector?
                                                              #{e 52253}#)
                                                          (if (= (vector-length
                                                                   #{e 52253}#)
                                                                 4)
                                                            (eq? (vector-ref
                                                                   #{e 52253}#
                                                                   0)
                                                                 'syntax-object)
                                                            #f)
                                                          #f)
                                                      (let ((#{expression 52464}#
                                                              (vector-ref
                                                                #{e 52253}#
                                                                1))
                                                            (#{wrap 52465}#
                                                              (let ((#{w2 52475}#
                                                                      (vector-ref
                                                                        #{e 52253}#
                                                                        2)))
                                                                (let ((#{m1 52476}#
                                                                        (car #{w 52254}#))
                                                                      (#{s1 52477}#
                                                                        (cdr #{w 52254}#)))
                                                                  (if (null? #{m1 52476}#)
                                                                    (if (null? #{s1 52477}#)
                                                                      #{w2 52475}#
                                                                      (cons (car #{w2 52475}#)
                                                                            (let ((#{m2 52494}#
                                                                                    (cdr #{w2 52475}#)))
                                                                              (if (null? #{m2 52494}#)
                                                                                #{s1 52477}#
                                                                                (append
                                                                                  #{s1 52477}#
                                                                                  #{m2 52494}#)))))
                                                                    (cons (let ((#{m2 52502}#
                                                                                  (car #{w2 52475}#)))
                                                                            (if (null? #{m2 52502}#)
                                                                              #{m1 52476}#
                                                                              (append
                                                                                #{m1 52476}#
                                                                                #{m2 52502}#)))
                                                                          (let ((#{m2 52510}#
                                                                                  (cdr #{w2 52475}#)))
                                                                            (if (null? #{m2 52510}#)
                                                                              #{s1 52477}#
                                                                              (append
                                                                                #{s1 52477}#
                                                                                #{m2 52510}#))))))))
                                                            (#{module 52466}#
                                                              (vector-ref
                                                                #{e 52253}#
                                                                3)))
                                                        (vector
                                                          'syntax-object
                                                          #{expression 52464}#
                                                          #{wrap 52465}#
                                                          #{module 52466}#))
                                                      (if (null? #{e 52253}#)
                                                        #{e 52253}#
                                                        (vector
                                                          'syntax-object
                                                          #{e 52253}#
                                                          #{w 52254}#
                                                          #{mod 52256}#)))))
                                            #{vals 52060}#)
                                      (cons (cons 'lexical #{var 52262}#)
                                            #{bindings 52061}#)))))
                              (if (if (eqv? #{type 52251}# 'define-syntax-form)
                                    #t
                                    (eqv? #{type 52251}#
                                          'define-syntax-parameter-form))
                                (let ((#{id 52541}#
                                        (if (if (null? (car #{w 52254}#))
                                              (null? (cdr #{w 52254}#))
                                              #f)
                                          #{value 52252}#
                                          (if (if (vector? #{value 52252}#)
                                                (if (= (vector-length
                                                         #{value 52252}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{value 52252}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (let ((#{expression 52585}#
                                                    (vector-ref
                                                      #{value 52252}#
                                                      1))
                                                  (#{wrap 52586}#
                                                    (let ((#{w2 52596}#
                                                            (vector-ref
                                                              #{value 52252}#
                                                              2)))
                                                      (let ((#{m1 52597}#
                                                              (car #{w 52254}#))
                                                            (#{s1 52598}#
                                                              (cdr #{w 52254}#)))
                                                        (if (null? #{m1 52597}#)
                                                          (if (null? #{s1 52598}#)
                                                            #{w2 52596}#
                                                            (cons (car #{w2 52596}#)
                                                                  (let ((#{m2 52615}#
                                                                          (cdr #{w2 52596}#)))
                                                                    (if (null? #{m2 52615}#)
                                                                      #{s1 52598}#
                                                                      (append
                                                                        #{s1 52598}#
                                                                        #{m2 52615}#)))))
                                                          (cons (let ((#{m2 52623}#
                                                                        (car #{w2 52596}#)))
                                                                  (if (null? #{m2 52623}#)
                                                                    #{m1 52597}#
                                                                    (append
                                                                      #{m1 52597}#
                                                                      #{m2 52623}#)))
                                                                (let ((#{m2 52631}#
                                                                        (cdr #{w2 52596}#)))
                                                                  (if (null? #{m2 52631}#)
                                                                    #{s1 52598}#
                                                                    (append
                                                                      #{s1 52598}#
                                                                      #{m2 52631}#))))))))
                                                  (#{module 52587}#
                                                    (vector-ref
                                                      #{value 52252}#
                                                      3)))
                                              (vector
                                                'syntax-object
                                                #{expression 52585}#
                                                #{wrap 52586}#
                                                #{module 52587}#))
                                            (if (null? #{value 52252}#)
                                              #{value 52252}#
                                              (vector
                                                'syntax-object
                                                #{value 52252}#
                                                #{w 52254}#
                                                #{mod 52256}#)))))
                                      (#{label 52542}#
                                        (symbol->string (gensym "i"))))
                                  (begin
                                    (begin
                                      (let ((#{update 52551}#
                                              (cons (vector-ref #{id 52541}# 1)
                                                    (vector-ref
                                                      #{ribcage 51945}#
                                                      1))))
                                        (vector-set!
                                          #{ribcage 51945}#
                                          1
                                          #{update 52551}#))
                                      (let ((#{update 52663}#
                                              (cons (car (vector-ref
                                                           #{id 52541}#
                                                           2))
                                                    (vector-ref
                                                      #{ribcage 51945}#
                                                      2))))
                                        (vector-set!
                                          #{ribcage 51945}#
                                          2
                                          #{update 52663}#))
                                      (let ((#{update 52678}#
                                              (cons #{label 52542}#
                                                    (vector-ref
                                                      #{ribcage 51945}#
                                                      3))))
                                        (vector-set!
                                          #{ribcage 51945}#
                                          3
                                          #{update 52678}#)))
                                    (#{parse 51947}#
                                      (cdr #{body 52055}#)
                                      (cons #{id 52541}# #{ids 52056}#)
                                      (cons #{label 52542}# #{labels 52057}#)
                                      #{var-ids 52058}#
                                      #{vars 52059}#
                                      #{vals 52060}#
                                      (cons (cons (if (eq? #{type 52251}#
                                                           'define-syntax-parameter-form)
                                                    'syntax-parameter
                                                    'macro)
                                                  (cons #{er 52063}#
                                                        (if (if (null? (car #{w 52254}#))
                                                              (null? (cdr #{w 52254}#))
                                                              #f)
                                                          #{e 52253}#
                                                          (if (if (vector?
                                                                    #{e 52253}#)
                                                                (if (= (vector-length
                                                                         #{e 52253}#)
                                                                       4)
                                                                  (eq? (vector-ref
                                                                         #{e 52253}#
                                                                         0)
                                                                       'syntax-object)
                                                                  #f)
                                                                #f)
                                                            (let ((#{expression 52717}#
                                                                    (vector-ref
                                                                      #{e 52253}#
                                                                      1))
                                                                  (#{wrap 52718}#
                                                                    (let ((#{w2 52728}#
                                                                            (vector-ref
                                                                              #{e 52253}#
                                                                              2)))
                                                                      (let ((#{m1 52729}#
                                                                              (car #{w 52254}#))
                                                                            (#{s1 52730}#
                                                                              (cdr #{w 52254}#)))
                                                                        (if (null? #{m1 52729}#)
                                                                          (if (null? #{s1 52730}#)
                                                                            #{w2 52728}#
                                                                            (cons (car #{w2 52728}#)
                                                                                  (let ((#{m2 52747}#
                                                                                          (cdr #{w2 52728}#)))
                                                                                    (if (null? #{m2 52747}#)
                                                                                      #{s1 52730}#
                                                                                      (append
                                                                                        #{s1 52730}#
                                                                                        #{m2 52747}#)))))
                                                                          (cons (let ((#{m2 52755}#
                                                                                        (car #{w2 52728}#)))
                                                                                  (if (null? #{m2 52755}#)
                                                                                    #{m1 52729}#
                                                                                    (append
                                                                                      #{m1 52729}#
                                                                                      #{m2 52755}#)))
                                                                                (let ((#{m2 52763}#
                                                                                        (cdr #{w2 52728}#)))
                                                                                  (if (null? #{m2 52763}#)
                                                                                    #{s1 52730}#
                                                                                    (append
                                                                                      #{s1 52730}#
                                                                                      #{m2 52763}#))))))))
                                                                  (#{module 52719}#
                                                                    (vector-ref
                                                                      #{e 52253}#
                                                                      3)))
                                                              (vector
                                                                'syntax-object
                                                                #{expression 52717}#
                                                                #{wrap 52718}#
                                                                #{module 52719}#))
                                                            (if (null? #{e 52253}#)
                                                              #{e 52253}#
                                                              (vector
                                                                'syntax-object
                                                                #{e 52253}#
                                                                #{w 52254}#
                                                                #{mod 52256}#))))))
                                            #{bindings 52061}#))))
                                (if (eqv? #{type 52251}# 'begin-form)
                                  (let ((#{tmp 52790}#
                                          ($sc-dispatch
                                            #{e 52253}#
                                            '(_ . each-any))))
                                    (if #{tmp 52790}#
                                      (@apply
                                        (lambda (#{e1 52794}#)
                                          (#{parse 51947}#
                                            (letrec*
                                              ((#{f 52795}#
                                                 (lambda (#{forms 52996}#)
                                                   (if (null? #{forms 52996}#)
                                                     (cdr #{body 52055}#)
                                                     (cons (cons #{er 52063}#
                                                                 (let ((#{x 53000}#
                                                                         (car #{forms 52996}#)))
                                                                   (if (if (null? (car #{w 52254}#))
                                                                         (null? (cdr #{w 52254}#))
                                                                         #f)
                                                                     #{x 53000}#
                                                                     (if (if (vector?
                                                                               #{x 53000}#)
                                                                           (if (= (vector-length
                                                                                    #{x 53000}#)
                                                                                  4)
                                                                             (eq? (vector-ref
                                                                                    #{x 53000}#
                                                                                    0)
                                                                                  'syntax-object)
                                                                             #f)
                                                                           #f)
                                                                       (let ((#{expression 53018}#
                                                                               (vector-ref
                                                                                 #{x 53000}#
                                                                                 1))
                                                                             (#{wrap 53019}#
                                                                               (let ((#{w2 53027}#
                                                                                       (vector-ref
                                                                                         #{x 53000}#
                                                                                         2)))
                                                                                 (let ((#{m1 53028}#
                                                                                         (car #{w 52254}#))
                                                                                       (#{s1 53029}#
                                                                                         (cdr #{w 52254}#)))
                                                                                   (if (null? #{m1 53028}#)
                                                                                     (if (null? #{s1 53029}#)
                                                                                       #{w2 53027}#
                                                                                       (cons (car #{w2 53027}#)
                                                                                             (let ((#{m2 53044}#
                                                                                                     (cdr #{w2 53027}#)))
                                                                                               (if (null? #{m2 53044}#)
                                                                                                 #{s1 53029}#
                                                                                                 (append
                                                                                                   #{s1 53029}#
                                                                                                   #{m2 53044}#)))))
                                                                                     (cons (let ((#{m2 53052}#
                                                                                                   (car #{w2 53027}#)))
                                                                                             (if (null? #{m2 53052}#)
                                                                                               #{m1 53028}#
                                                                                               (append
                                                                                                 #{m1 53028}#
                                                                                                 #{m2 53052}#)))
                                                                                           (let ((#{m2 53060}#
                                                                                                   (cdr #{w2 53027}#)))
                                                                                             (if (null? #{m2 53060}#)
                                                                                               #{s1 53029}#
                                                                                               (append
                                                                                                 #{s1 53029}#
                                                                                                 #{m2 53060}#))))))))
                                                                             (#{module 53020}#
                                                                               (vector-ref
                                                                                 #{x 53000}#
                                                                                 3)))
                                                                         (vector
                                                                           'syntax-object
                                                                           #{expression 53018}#
                                                                           #{wrap 53019}#
                                                                           #{module 53020}#))
                                                                       (if (null? #{x 53000}#)
                                                                         #{x 53000}#
                                                                         (vector
                                                                           'syntax-object
                                                                           #{x 53000}#
                                                                           #{w 52254}#
                                                                           #{mod 52256}#))))))
                                                           (#{f 52795}#
                                                             (cdr #{forms 52996}#)))))))
                                              (#{f 52795}# #{e1 52794}#))
                                            #{ids 52056}#
                                            #{labels 52057}#
                                            #{var-ids 52058}#
                                            #{vars 52059}#
                                            #{vals 52060}#
                                            #{bindings 52061}#))
                                        #{tmp 52790}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{e 52253}#)))
                                  (if (eqv? #{type 52251}# 'local-syntax-form)
                                    (#{expand-local-syntax 28276}#
                                      #{value 52252}#
                                      #{e 52253}#
                                      #{er 52063}#
                                      #{w 52254}#
                                      #{s 52255}#
                                      #{mod 52256}#
                                      (lambda (#{forms 53086}#
                                               #{er 53087}#
                                               #{w 53088}#
                                               #{s 53089}#
                                               #{mod 53090}#)
                                        (#{parse 51947}#
                                          (letrec*
                                            ((#{f 53091}#
                                               (lambda (#{forms 53292}#)
                                                 (if (null? #{forms 53292}#)
                                                   (cdr #{body 52055}#)
                                                   (cons (cons #{er 53087}#
                                                               (let ((#{x 53296}#
                                                                       (car #{forms 53292}#)))
                                                                 (if (if (null? (car #{w 53088}#))
                                                                       (null? (cdr #{w 53088}#))
                                                                       #f)
                                                                   #{x 53296}#
                                                                   (if (if (vector?
                                                                             #{x 53296}#)
                                                                         (if (= (vector-length
                                                                                  #{x 53296}#)
                                                                                4)
                                                                           (eq? (vector-ref
                                                                                  #{x 53296}#
                                                                                  0)
                                                                                'syntax-object)
                                                                           #f)
                                                                         #f)
                                                                     (let ((#{expression 53314}#
                                                                             (vector-ref
                                                                               #{x 53296}#
                                                                               1))
                                                                           (#{wrap 53315}#
                                                                             (let ((#{w2 53323}#
                                                                                     (vector-ref
                                                                                       #{x 53296}#
                                                                                       2)))
                                                                               (let ((#{m1 53324}#
                                                                                       (car #{w 53088}#))
                                                                                     (#{s1 53325}#
                                                                                       (cdr #{w 53088}#)))
                                                                                 (if (null? #{m1 53324}#)
                                                                                   (if (null? #{s1 53325}#)
                                                                                     #{w2 53323}#
                                                                                     (cons (car #{w2 53323}#)
                                                                                           (let ((#{m2 53340}#
                                                                                                   (cdr #{w2 53323}#)))
                                                                                             (if (null? #{m2 53340}#)
                                                                                               #{s1 53325}#
                                                                                               (append
                                                                                                 #{s1 53325}#
                                                                                                 #{m2 53340}#)))))
                                                                                   (cons (let ((#{m2 53348}#
                                                                                                 (car #{w2 53323}#)))
                                                                                           (if (null? #{m2 53348}#)
                                                                                             #{m1 53324}#
                                                                                             (append
                                                                                               #{m1 53324}#
                                                                                               #{m2 53348}#)))
                                                                                         (let ((#{m2 53356}#
                                                                                                 (cdr #{w2 53323}#)))
                                                                                           (if (null? #{m2 53356}#)
                                                                                             #{s1 53325}#
                                                                                             (append
                                                                                               #{s1 53325}#
                                                                                               #{m2 53356}#))))))))
                                                                           (#{module 53316}#
                                                                             (vector-ref
                                                                               #{x 53296}#
                                                                               3)))
                                                                       (vector
                                                                         'syntax-object
                                                                         #{expression 53314}#
                                                                         #{wrap 53315}#
                                                                         #{module 53316}#))
                                                                     (if (null? #{x 53296}#)
                                                                       #{x 53296}#
                                                                       (vector
                                                                         'syntax-object
                                                                         #{x 53296}#
                                                                         #{w 53088}#
                                                                         #{mod 53090}#))))))
                                                         (#{f 53091}#
                                                           (cdr #{forms 53292}#)))))))
                                            (#{f 53091}# #{forms 53086}#))
                                          #{ids 52056}#
                                          #{labels 52057}#
                                          #{var-ids 52058}#
                                          #{vars 52059}#
                                          #{vals 52060}#
                                          #{bindings 52061}#)))
                                    (if (null? #{ids 52056}#)
                                      (#{build-sequence 28220}#
                                        #f
                                        (map (lambda (#{x 53441}#)
                                               (#{expand 28271}#
                                                 (cdr #{x 53441}#)
                                                 (car #{x 53441}#)
                                                 '(())
                                                 #{mod 52256}#))
                                             (cons (cons #{er 52063}#
                                                         (let ((#{x 53516}#
                                                                 (begin
                                                                   (if (if (pair? #{e 52253}#)
                                                                         #{s 52255}#
                                                                         #f)
                                                                     (set-source-properties!
                                                                       #{e 52253}#
                                                                       #{s 52255}#))
                                                                   #{e 52253}#)))
                                                           (if (if (null? (car #{w 52254}#))
                                                                 (null? (cdr #{w 52254}#))
                                                                 #f)
                                                             #{x 53516}#
                                                             (if (if (vector?
                                                                       #{x 53516}#)
                                                                   (if (= (vector-length
                                                                            #{x 53516}#)
                                                                          4)
                                                                     (eq? (vector-ref
                                                                            #{x 53516}#
                                                                            0)
                                                                          'syntax-object)
                                                                     #f)
                                                                   #f)
                                                               (let ((#{expression 53548}#
                                                                       (vector-ref
                                                                         #{x 53516}#
                                                                         1))
                                                                     (#{wrap 53549}#
                                                                       (let ((#{w2 53557}#
                                                                               (vector-ref
                                                                                 #{x 53516}#
                                                                                 2)))
                                                                         (let ((#{m1 53558}#
                                                                                 (car #{w 52254}#))
                                                                               (#{s1 53559}#
                                                                                 (cdr #{w 52254}#)))
                                                                           (if (null? #{m1 53558}#)
                                                                             (if (null? #{s1 53559}#)
                                                                               #{w2 53557}#
                                                                               (cons (car #{w2 53557}#)
                                                                                     (let ((#{m2 53574}#
                                                                                             (cdr #{w2 53557}#)))
                                                                                       (if (null? #{m2 53574}#)
                                                                                         #{s1 53559}#
                                                                                         (append
                                                                                           #{s1 53559}#
                                                                                           #{m2 53574}#)))))
                                                                             (cons (let ((#{m2 53582}#
                                                                                           (car #{w2 53557}#)))
                                                                                     (if (null? #{m2 53582}#)
                                                                                       #{m1 53558}#
                                                                                       (append
                                                                                         #{m1 53558}#
                                                                                         #{m2 53582}#)))
                                                                                   (let ((#{m2 53590}#
                                                                                           (cdr #{w2 53557}#)))
                                                                                     (if (null? #{m2 53590}#)
                                                                                       #{s1 53559}#
                                                                                       (append
                                                                                         #{s1 53559}#
                                                                                         #{m2 53590}#))))))))
                                                                     (#{module 53550}#
                                                                       (vector-ref
                                                                         #{x 53516}#
                                                                         3)))
                                                                 (vector
                                                                   'syntax-object
                                                                   #{expression 53548}#
                                                                   #{wrap 53549}#
                                                                   #{module 53550}#))
                                                               (if (null? #{x 53516}#)
                                                                 #{x 53516}#
                                                                 (vector
                                                                   'syntax-object
                                                                   #{x 53516}#
                                                                   #{w 52254}#
                                                                   #{mod 52256}#))))))
                                                   (cdr #{body 52055}#))))
                                      (begin
                                        (if (not (#{valid-bound-ids? 28261}#
                                                   #{ids 52056}#))
                                          (syntax-violation
                                            #f
                                            "invalid or duplicate identifier in definition"
                                            #{outer-form 51940}#))
                                        (letrec*
                                          ((#{loop 53689}#
                                             (lambda (#{bs 53692}#
                                                      #{er-cache 53693}#
                                                      #{r-cache 53694}#)
                                               (if (not (null? #{bs 53692}#))
                                                 (let ((#{b 53695}#
                                                         (car #{bs 53692}#)))
                                                   (if (let ((#{t 53698}#
                                                               (car #{b 53695}#)))
                                                         (if (eq? #{t 53698}#
                                                                  'macro)
                                                           #t
                                                           (eq? #{t 53698}#
                                                                'syntax-parameter)))
                                                     (let ((#{er 53700}#
                                                             (car (cdr #{b 53695}#))))
                                                       (let ((#{r-cache 53701}#
                                                               (if (eq? #{er 53700}#
                                                                        #{er-cache 53693}#)
                                                                 #{r-cache 53694}#
                                                                 (#{macros-only-env 28235}#
                                                                   #{er 53700}#))))
                                                         (begin
                                                           (set-cdr!
                                                             #{b 53695}#
                                                             (#{eval-local-transformer 28277}#
                                                               (#{expand 28271}#
                                                                 (cdr (cdr #{b 53695}#))
                                                                 #{r-cache 53701}#
                                                                 '(())
                                                                 #{mod 52256}#)
                                                               #{mod 52256}#))
                                                           (if (eq? (car #{b 53695}#)
                                                                    'syntax-parameter)
                                                             (set-cdr!
                                                               #{b 53695}#
                                                               (list (cdr #{b 53695}#))))
                                                           (#{loop 53689}#
                                                             (cdr #{bs 53692}#)
                                                             #{er 53700}#
                                                             #{r-cache 53701}#))))
                                                     (#{loop 53689}#
                                                       (cdr #{bs 53692}#)
                                                       #{er-cache 53693}#
                                                       #{r-cache 53694}#)))))))
                                          (#{loop 53689}#
                                            #{bindings 52061}#
                                            #f
                                            #f))
                                        (set-cdr!
                                          #{r 51944}#
                                          (#{extend-env 28233}#
                                            #{labels 52057}#
                                            #{bindings 52061}#
                                            (cdr #{r 51944}#)))
                                        (#{build-letrec 28223}#
                                          #f
                                          #t
                                          (reverse
                                            (map syntax->datum
                                                 #{var-ids 52058}#))
                                          (reverse #{vars 52059}#)
                                          (map (lambda (#{x 54121}#)
                                                 (#{expand 28271}#
                                                   (cdr #{x 54121}#)
                                                   (car #{x 54121}#)
                                                   '(())
                                                   #{mod 52256}#))
                                               (reverse #{vals 52060}#))
                                          (#{build-sequence 28220}#
                                            #f
                                            (map (lambda (#{x 54257}#)
                                                   (#{expand 28271}#
                                                     (cdr #{x 54257}#)
                                                     (car #{x 54257}#)
                                                     '(())
                                                     #{mod 52256}#))
                                                 (cons (cons #{er 52063}#
                                                             (let ((#{x 54332}#
                                                                     (begin
                                                                       (if (if (pair? #{e 52253}#)
                                                                             #{s 52255}#
                                                                             #f)
                                                                         (set-source-properties!
                                                                           #{e 52253}#
                                                                           #{s 52255}#))
                                                                       #{e 52253}#)))
                                                               (if (if (null? (car #{w 52254}#))
                                                                     (null? (cdr #{w 52254}#))
                                                                     #f)
                                                                 #{x 54332}#
                                                                 (if (if (vector?
                                                                           #{x 54332}#)
                                                                       (if (= (vector-length
                                                                                #{x 54332}#)
                                                                              4)
                                                                         (eq? (vector-ref
                                                                                #{x 54332}#
                                                                                0)
                                                                              'syntax-object)
                                                                         #f)
                                                                       #f)
                                                                   (let ((#{expression 54364}#
                                                                           (vector-ref
                                                                             #{x 54332}#
                                                                             1))
                                                                         (#{wrap 54365}#
                                                                           (let ((#{w2 54373}#
                                                                                   (vector-ref
                                                                                     #{x 54332}#
                                                                                     2)))
                                                                             (let ((#{m1 54374}#
                                                                                     (car #{w 52254}#))
                                                                                   (#{s1 54375}#
                                                                                     (cdr #{w 52254}#)))
                                                                               (if (null? #{m1 54374}#)
                                                                                 (if (null? #{s1 54375}#)
                                                                                   #{w2 54373}#
                                                                                   (cons (car #{w2 54373}#)
                                                                                         (let ((#{m2 54390}#
                                                                                                 (cdr #{w2 54373}#)))
                                                                                           (if (null? #{m2 54390}#)
                                                                                             #{s1 54375}#
                                                                                             (append
                                                                                               #{s1 54375}#
                                                                                               #{m2 54390}#)))))
                                                                                 (cons (let ((#{m2 54398}#
                                                                                               (car #{w2 54373}#)))
                                                                                         (if (null? #{m2 54398}#)
                                                                                           #{m1 54374}#
                                                                                           (append
                                                                                             #{m1 54374}#
                                                                                             #{m2 54398}#)))
                                                                                       (let ((#{m2 54406}#
                                                                                               (cdr #{w2 54373}#)))
                                                                                         (if (null? #{m2 54406}#)
                                                                                           #{s1 54375}#
                                                                                           (append
                                                                                             #{s1 54375}#
                                                                                             #{m2 54406}#))))))))
                                                                         (#{module 54366}#
                                                                           (vector-ref
                                                                             #{x 54332}#
                                                                             3)))
                                                                     (vector
                                                                       'syntax-object
                                                                       #{expression 54364}#
                                                                       #{wrap 54365}#
                                                                       #{module 54366}#))
                                                                   (if (null? #{x 54332}#)
                                                                     #{x 54332}#
                                                                     (vector
                                                                       'syntax-object
                                                                       #{x 54332}#
                                                                       #{w 52254}#
                                                                       #{mod 52256}#))))))
                                                       (cdr #{body 52055}#))))))))))))))))))
               (#{parse 51947}#
                 (map (lambda (#{x 51950}#)
                        (cons #{r 51944}#
                              (if (if (null? (car #{w 51946}#))
                                    (null? (cdr #{w 51946}#))
                                    #f)
                                #{x 51950}#
                                (if (if (vector? #{x 51950}#)
                                      (if (= (vector-length #{x 51950}#) 4)
                                        (eq? (vector-ref #{x 51950}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (let ((#{expression 51986}#
                                          (vector-ref #{x 51950}# 1))
                                        (#{wrap 51987}#
                                          (let ((#{w2 51997}#
                                                  (vector-ref #{x 51950}# 2)))
                                            (let ((#{m1 51998}#
                                                    (car #{w 51946}#))
                                                  (#{s1 51999}#
                                                    (cdr #{w 51946}#)))
                                              (if (null? #{m1 51998}#)
                                                (if (null? #{s1 51999}#)
                                                  #{w2 51997}#
                                                  (cons (car #{w2 51997}#)
                                                        (let ((#{m2 52016}#
                                                                (cdr #{w2 51997}#)))
                                                          (if (null? #{m2 52016}#)
                                                            #{s1 51999}#
                                                            (append
                                                              #{s1 51999}#
                                                              #{m2 52016}#)))))
                                                (cons (let ((#{m2 52024}#
                                                              (car #{w2 51997}#)))
                                                        (if (null? #{m2 52024}#)
                                                          #{m1 51998}#
                                                          (append
                                                            #{m1 51998}#
                                                            #{m2 52024}#)))
                                                      (let ((#{m2 52032}#
                                                              (cdr #{w2 51997}#)))
                                                        (if (null? #{m2 52032}#)
                                                          #{s1 51999}#
                                                          (append
                                                            #{s1 51999}#
                                                            #{m2 52032}#))))))))
                                        (#{module 51988}#
                                          (vector-ref #{x 51950}# 3)))
                                    (vector
                                      'syntax-object
                                      #{expression 51986}#
                                      #{wrap 51987}#
                                      #{module 51988}#))
                                  (if (null? #{x 51950}#)
                                    #{x 51950}#
                                    (vector
                                      'syntax-object
                                      #{x 51950}#
                                      #{w 51946}#
                                      #{mod 51943}#))))))
                      #{body 51939}#)
                 '()
                 '()
                 '()
                 '()
                 '()
                 '())))))))
   (#{expand-local-syntax 28276}#
     (lambda (#{rec? 54421}#
              #{e 54422}#
              #{r 54423}#
              #{w 54424}#
              #{s 54425}#
              #{mod 54426}#
              #{k 54427}#)
       (let ((#{tmp 54429}#
               ($sc-dispatch
                 #{e 54422}#
                 '(_ #(each (any any)) any . each-any))))
         (if #{tmp 54429}#
           (@apply
             (lambda (#{id 54433}#
                      #{val 54434}#
                      #{e1 54435}#
                      #{e2 54436}#)
               (if (not (#{valid-bound-ids? 28261}# #{id 54433}#))
                 (syntax-violation
                   #f
                   "duplicate bound keyword"
                   #{e 54422}#)
                 (let ((#{labels 54533}#
                         (#{gen-labels 28241}# #{id 54433}#)))
                   (let ((#{new-w 54534}#
                           (#{make-binding-wrap 28252}#
                             #{id 54433}#
                             #{labels 54533}#
                             #{w 54424}#)))
                     (#{k 54427}#
                       (cons #{e1 54435}# #{e2 54436}#)
                       (#{extend-env 28233}#
                         #{labels 54533}#
                         (let ((#{trans-r 54574}#
                                 (#{macros-only-env 28235}# #{r 54423}#)))
                           (begin
                             (if #{rec? 54421}# #{new-w 54534}# #{w 54424}#)
                             (map (lambda (#{x 54575}#)
                                    (cons 'macro
                                          (#{eval-local-transformer 28277}#
                                            (#{expand 28271}#
                                              #{x 54575}#
                                              #{trans-r 54574}#
                                              (values
                                                (if #{rec? 54421}#
                                                  #{new-w 54534}#
                                                  #{w 54424}#))
                                              #{mod 54426}#)
                                            #{mod 54426}#)))
                                  #{val 54434}#)))
                         #{r 54423}#)
                       #{new-w 54534}#
                       #{s 54425}#
                       #{mod 54426}#)))))
             #{tmp 54429}#)
           (syntax-violation
             #f
             "bad local syntax definition"
             (let ((#{x 54904}#
                     (begin
                       (if (if (pair? #{e 54422}#) #{s 54425}# #f)
                         (set-source-properties! #{e 54422}# #{s 54425}#))
                       #{e 54422}#)))
               (if (if (null? (car #{w 54424}#))
                     (null? (cdr #{w 54424}#))
                     #f)
                 #{x 54904}#
                 (if (if (vector? #{x 54904}#)
                       (if (= (vector-length #{x 54904}#) 4)
                         (eq? (vector-ref #{x 54904}# 0) 'syntax-object)
                         #f)
                       #f)
                   (let ((#{expression 54936}# (vector-ref #{x 54904}# 1))
                         (#{wrap 54937}#
                           (let ((#{w2 54945}# (vector-ref #{x 54904}# 2)))
                             (let ((#{m1 54946}# (car #{w 54424}#))
                                   (#{s1 54947}# (cdr #{w 54424}#)))
                               (if (null? #{m1 54946}#)
                                 (if (null? #{s1 54947}#)
                                   #{w2 54945}#
                                   (cons (car #{w2 54945}#)
                                         (let ((#{m2 54962}#
                                                 (cdr #{w2 54945}#)))
                                           (if (null? #{m2 54962}#)
                                             #{s1 54947}#
                                             (append
                                               #{s1 54947}#
                                               #{m2 54962}#)))))
                                 (cons (let ((#{m2 54970}# (car #{w2 54945}#)))
                                         (if (null? #{m2 54970}#)
                                           #{m1 54946}#
                                           (append #{m1 54946}# #{m2 54970}#)))
                                       (let ((#{m2 54978}# (cdr #{w2 54945}#)))
                                         (if (null? #{m2 54978}#)
                                           #{s1 54947}#
                                           (append
                                             #{s1 54947}#
                                             #{m2 54978}#))))))))
                         (#{module 54938}# (vector-ref #{x 54904}# 3)))
                     (vector
                       'syntax-object
                       #{expression 54936}#
                       #{wrap 54937}#
                       #{module 54938}#))
                   (if (null? #{x 54904}#)
                     #{x 54904}#
                     (vector
                       'syntax-object
                       #{x 54904}#
                       #{w 54424}#
                       #{mod 54426}#))))))))))
   (#{eval-local-transformer 28277}#
     (lambda (#{expanded 54996}# #{mod 54997}#)
       (let ((#{p 54998}# (primitive-eval #{expanded 54996}#)))
         (if (procedure? #{p 54998}#)
           #{p 54998}#
           (syntax-violation
             #f
             "nonprocedure transformer"
             #{p 54998}#)))))
   (#{ellipsis? 28279}#
     (lambda (#{x 29819}#)
       (if (if (if (vector? #{x 29819}#)
                 (if (= (vector-length #{x 29819}#) 4)
                   (eq? (vector-ref #{x 29819}# 0) 'syntax-object)
                   #f)
                 #f)
             (symbol? (vector-ref #{x 29819}# 1))
             #f)
         (#{free-id=? 28259}#
           #{x 29819}#
           '#(syntax-object
              ...
              ((top)
               #(ribcage () () ())
               #(ribcage () () ())
               #(ribcage #(x) #((top)) #("i26166"))
               #(ribcage
                 (lambda-var-list
                   gen-var
                   strip
                   expand-lambda-case
                   lambda*-formals
                   expand-simple-lambda
                   lambda-formals
                   ellipsis?
                   expand-void
                   eval-local-transformer
                   expand-local-syntax
                   expand-body
                   expand-macro
                   expand-call
                   expand-expr
                   expand
                   syntax-type
                   parse-when-list
                   expand-install-global
                   expand-top-sequence
                   expand-sequence
                   source-wrap
                   wrap
                   bound-id-member?
                   distinct-bound-ids?
                   valid-bound-ids?
                   bound-id=?
                   free-id=?
                   resolve-identifier
                   id-var-name
                   same-marks?
                   join-marks
                   join-wraps
                   smart-append
                   make-binding-wrap
                   extend-ribcage!
                   make-empty-ribcage
                   new-mark
                   anti-mark
                   the-anti-mark
                   top-marked?
                   top-wrap
                   empty-wrap
                   set-ribcage-labels!
                   set-ribcage-marks!
                   set-ribcage-symnames!
                   ribcage-labels
                   ribcage-marks
                   ribcage-symnames
                   ribcage?
                   make-ribcage
                   gen-labels
                   gen-label
                   make-rename
                   rename-marks
                   rename-new
                   rename-old
                   subst-rename?
                   wrap-subst
                   wrap-marks
                   make-wrap
                   id-sym-name&marks
                   id-sym-name
                   id?
                   nonsymbol-id?
                   global-extend
                   macros-only-env
                   extend-var-env
                   extend-env
                   null-env
                   binding-value
                   binding-type
                   make-binding
                   arg-check
                   source-annotation
                   no-source
                   set-syntax-object-module!
                   set-syntax-object-wrap!
                   set-syntax-object-expression!
                   syntax-object-module
                   syntax-object-wrap
                   syntax-object-expression
                   syntax-object?
                   make-syntax-object
                   build-lexical-var
                   build-letrec
                   build-named-let
                   build-let
                   build-sequence
                   build-data
                   build-primref
                   build-primcall
                   build-lambda-case
                   build-case-lambda
                   build-simple-lambda
                   build-global-definition
                   build-global-assignment
                   build-global-reference
                   analyze-variable
                   build-lexical-assignment
                   build-lexical-reference
                   build-dynlet
                   build-conditional
                   build-call
                   build-void
                   maybe-name-value!
                   decorate-source
                   get-global-definition-hook
                   put-global-definition-hook
                   gensym-hook
                   local-eval-hook
                   top-level-eval-hook
                   fx<
                   fx=
                   fx-
                   fx+
                   set-lambda-meta!
                   lambda-meta
                   lambda?
                   make-dynlet
                   make-letrec
                   make-let
                   make-lambda-case
                   make-lambda
                   make-seq
                   make-primcall
                   make-call
                   make-conditional
                   make-toplevel-define
                   make-toplevel-set
                   make-toplevel-ref
                   make-module-set
                   make-module-ref
                   make-lexical-set
                   make-lexical-ref
                   make-primitive-ref
                   make-const
                   make-void)
                 ((top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top))
                 ("i24298"
                  "i24296"
                  "i24294"
                  "i24292"
                  "i24290"
                  "i24288"
                  "i24286"
                  "i24284"
                  "i24282"
                  "i24280"
                  "i24278"
                  "i24276"
                  "i24274"
                  "i24272"
                  "i24270"
                  "i24268"
                  "i24266"
                  "i24264"
                  "i24262"
                  "i24260"
                  "i24258"
                  "i24256"
                  "i24254"
                  "i24252"
                  "i24250"
                  "i24248"
                  "i24246"
                  "i24244"
                  "i24242"
                  "i24240"
                  "i24238"
                  "i24236"
                  "i24234"
                  "i24232"
                  "i24230"
                  "i24228"
                  "i24227"
                  "i24225"
                  "i24222"
                  "i24221"
                  "i24220"
                  "i24218"
                  "i24217"
                  "i24215"
                  "i24213"
                  "i24211"
                  "i24209"
                  "i24207"
                  "i24205"
                  "i24203"
                  "i24201"
                  "i24198"
                  "i24196"
                  "i24195"
                  "i24193"
                  "i24191"
                  "i24189"
                  "i24187"
                  "i24186"
                  "i24185"
                  "i24184"
                  "i24182"
                  "i24181"
                  "i24178"
                  "i24176"
                  "i24174"
                  "i24172"
                  "i24170"
                  "i24168"
                  "i24167"
                  "i24166"
                  "i24164"
                  "i24162"
                  "i24161"
                  "i24158"
                  "i24157"
                  "i24155"
                  "i24153"
                  "i24151"
                  "i24149"
                  "i24147"
                  "i24145"
                  "i24143"
                  "i24141"
                  "i24139"
                  "i24136"
                  "i24134"
                  "i24132"
                  "i24130"
                  "i24128"
                  "i24126"
                  "i24124"
                  "i24122"
                  "i24120"
                  "i24118"
                  "i24116"
                  "i24114"
                  "i24112"
                  "i24110"
                  "i24108"
                  "i24106"
                  "i24104"
                  "i24102"
                  "i24100"
                  "i24098"
                  "i24096"
                  "i24094"
                  "i24092"
                  "i24090"
                  "i24089"
                  "i24086"
                  "i24084"
                  "i24083"
                  "i24082"
                  "i24081"
                  "i24080"
                  "i24078"
                  "i24076"
                  "i24074"
                  "i24071"
                  "i24069"
                  "i24067"
                  "i24065"
                  "i24063"
                  "i24061"
                  "i24059"
                  "i24057"
                  "i24055"
                  "i24053"
                  "i24051"
                  "i24049"
                  "i24047"
                  "i24045"
                  "i24043"
                  "i24041"
                  "i24039"
                  "i24037"
                  "i24035"))
               #(ribcage
                 (define-structure
                   define-expansion-accessors
                   define-expansion-constructors)
                 ((top) (top) (top))
                 ("i23873" "i23872" "i23871"))
               #(ribcage () () ()))
              (hygiene guile)))
         #f)))
   (#{lambda-formals 28280}#
     (lambda (#{orig-args 55003}#)
       (letrec*
         ((#{req 55004}#
            (lambda (#{args 55008}# #{rreq 55009}#)
              (let ((#{tmp 55011}# ($sc-dispatch #{args 55008}# '())))
                (if #{tmp 55011}#
                  (@apply
                    (lambda ()
                      (#{check 55005}# (reverse #{rreq 55009}#) #f))
                    #{tmp 55011}#)
                  (let ((#{tmp 55127}#
                          ($sc-dispatch #{args 55008}# '(any . any))))
                    (if (if #{tmp 55127}#
                          (@apply
                            (lambda (#{a 55131}# #{b 55132}#)
                              (if (symbol? #{a 55131}#)
                                #t
                                (if (if (vector? #{a 55131}#)
                                      (if (= (vector-length #{a 55131}#) 4)
                                        (eq? (vector-ref #{a 55131}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 55131}# 1))
                                  #f)))
                            #{tmp 55127}#)
                          #f)
                      (@apply
                        (lambda (#{a 55159}# #{b 55160}#)
                          (#{req 55004}#
                            #{b 55160}#
                            (cons #{a 55159}# #{rreq 55009}#)))
                        #{tmp 55127}#)
                      (let ((#{tmp 55161}# (list #{args 55008}#)))
                        (if (@apply
                              (lambda (#{r 55163}#)
                                (if (symbol? #{r 55163}#)
                                  #t
                                  (if (if (vector? #{r 55163}#)
                                        (if (= (vector-length #{r 55163}#) 4)
                                          (eq? (vector-ref #{r 55163}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref #{r 55163}# 1))
                                    #f)))
                              #{tmp 55161}#)
                          (@apply
                            (lambda (#{r 55193}#)
                              (#{check 55005}#
                                (reverse #{rreq 55009}#)
                                #{r 55193}#))
                            #{tmp 55161}#)
                          (syntax-violation
                            'lambda
                            "invalid argument list"
                            #{orig-args 55003}#
                            #{args 55008}#)))))))))
          (#{check 55005}#
            (lambda (#{req 55317}# #{rest 55318}#)
              (if (#{distinct-bound-ids? 28262}#
                    (if #{rest 55318}#
                      (cons #{rest 55318}# #{req 55317}#)
                      #{req 55317}#))
                (values #{req 55317}# #f #{rest 55318}# #f)
                (syntax-violation
                  'lambda
                  "duplicate identifier in argument list"
                  #{orig-args 55003}#)))))
         (#{req 55004}# #{orig-args 55003}# '()))))
   (#{expand-simple-lambda 28281}#
     (lambda (#{e 55427}#
              #{r 55428}#
              #{w 55429}#
              #{s 55430}#
              #{mod 55431}#
              #{req 55432}#
              #{rest 55433}#
              #{meta 55434}#
              #{body 55435}#)
       (let ((#{ids 55436}#
               (if #{rest 55433}#
                 (append #{req 55432}# (list #{rest 55433}#))
                 #{req 55432}#)))
         (let ((#{vars 55437}#
                 (map #{gen-var 28285}# #{ids 55436}#)))
           (let ((#{labels 55438}#
                   (#{gen-labels 28241}# #{ids 55436}#)))
             (#{build-simple-lambda 28214}#
               #{s 55430}#
               (map syntax->datum #{req 55432}#)
               (if #{rest 55433}#
                 (syntax->datum #{rest 55433}#)
                 #f)
               #{vars 55437}#
               #{meta 55434}#
               (#{expand-body 28275}#
                 #{body 55435}#
                 (let ((#{x 55627}#
                         (begin
                           (if (if (pair? #{e 55427}#) #{s 55430}# #f)
                             (set-source-properties! #{e 55427}# #{s 55430}#))
                           #{e 55427}#)))
                   (if (if (null? (car #{w 55429}#))
                         (null? (cdr #{w 55429}#))
                         #f)
                     #{x 55627}#
                     (if (if (vector? #{x 55627}#)
                           (if (= (vector-length #{x 55627}#) 4)
                             (eq? (vector-ref #{x 55627}# 0) 'syntax-object)
                             #f)
                           #f)
                       (let ((#{expression 55659}# (vector-ref #{x 55627}# 1))
                             (#{wrap 55660}#
                               (let ((#{w2 55668}# (vector-ref #{x 55627}# 2)))
                                 (let ((#{m1 55669}# (car #{w 55429}#))
                                       (#{s1 55670}# (cdr #{w 55429}#)))
                                   (if (null? #{m1 55669}#)
                                     (if (null? #{s1 55670}#)
                                       #{w2 55668}#
                                       (cons (car #{w2 55668}#)
                                             (let ((#{m2 55685}#
                                                     (cdr #{w2 55668}#)))
                                               (if (null? #{m2 55685}#)
                                                 #{s1 55670}#
                                                 (append
                                                   #{s1 55670}#
                                                   #{m2 55685}#)))))
                                     (cons (let ((#{m2 55693}#
                                                   (car #{w2 55668}#)))
                                             (if (null? #{m2 55693}#)
                                               #{m1 55669}#
                                               (append
                                                 #{m1 55669}#
                                                 #{m2 55693}#)))
                                           (let ((#{m2 55701}#
                                                   (cdr #{w2 55668}#)))
                                             (if (null? #{m2 55701}#)
                                               #{s1 55670}#
                                               (append
                                                 #{s1 55670}#
                                                 #{m2 55701}#))))))))
                             (#{module 55661}# (vector-ref #{x 55627}# 3)))
                         (vector
                           'syntax-object
                           #{expression 55659}#
                           #{wrap 55660}#
                           #{module 55661}#))
                       (if (null? #{x 55627}#)
                         #{x 55627}#
                         (vector
                           'syntax-object
                           #{x 55627}#
                           #{w 55429}#
                           #{mod 55431}#)))))
                 (#{extend-var-env 28234}#
                   #{labels 55438}#
                   #{vars 55437}#
                   #{r 55428}#)
                 (#{make-binding-wrap 28252}#
                   #{ids 55436}#
                   #{labels 55438}#
                   #{w 55429}#)
                 #{mod 55431}#)))))))
   (#{lambda*-formals 28282}#
     (lambda (#{orig-args 55932}#)
       (letrec*
         ((#{req 55933}#
            (lambda (#{args 55940}# #{rreq 55941}#)
              (let ((#{tmp 55943}# ($sc-dispatch #{args 55940}# '())))
                (if #{tmp 55943}#
                  (@apply
                    (lambda ()
                      (#{check 55937}#
                        (reverse #{rreq 55941}#)
                        '()
                        #f
                        '()))
                    #{tmp 55943}#)
                  (let ((#{tmp 56062}#
                          ($sc-dispatch #{args 55940}# '(any . any))))
                    (if (if #{tmp 56062}#
                          (@apply
                            (lambda (#{a 56066}# #{b 56067}#)
                              (if (symbol? #{a 56066}#)
                                #t
                                (if (if (vector? #{a 56066}#)
                                      (if (= (vector-length #{a 56066}#) 4)
                                        (eq? (vector-ref #{a 56066}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 56066}# 1))
                                  #f)))
                            #{tmp 56062}#)
                          #f)
                      (@apply
                        (lambda (#{a 56094}# #{b 56095}#)
                          (#{req 55933}#
                            #{b 56095}#
                            (cons #{a 56094}# #{rreq 55941}#)))
                        #{tmp 56062}#)
                      (let ((#{tmp 56096}#
                              ($sc-dispatch #{args 55940}# '(any . any))))
                        (if (if #{tmp 56096}#
                              (@apply
                                (lambda (#{a 56100}# #{b 56101}#)
                                  (eq? (syntax->datum #{a 56100}#) #:optional))
                                #{tmp 56096}#)
                              #f)
                          (@apply
                            (lambda (#{a 56102}# #{b 56103}#)
                              (#{opt 55934}#
                                #{b 56103}#
                                (reverse #{rreq 55941}#)
                                '()))
                            #{tmp 56096}#)
                          (let ((#{tmp 56106}#
                                  ($sc-dispatch #{args 55940}# '(any . any))))
                            (if (if #{tmp 56106}#
                                  (@apply
                                    (lambda (#{a 56110}# #{b 56111}#)
                                      (eq? (syntax->datum #{a 56110}#) #:key))
                                    #{tmp 56106}#)
                                  #f)
                              (@apply
                                (lambda (#{a 56112}# #{b 56113}#)
                                  (#{key 55935}#
                                    #{b 56113}#
                                    (reverse #{rreq 55941}#)
                                    '()
                                    '()))
                                #{tmp 56106}#)
                              (let ((#{tmp 56116}#
                                      ($sc-dispatch
                                        #{args 55940}#
                                        '(any any))))
                                (if (if #{tmp 56116}#
                                      (@apply
                                        (lambda (#{a 56120}# #{b 56121}#)
                                          (eq? (syntax->datum #{a 56120}#)
                                               #:rest))
                                        #{tmp 56116}#)
                                      #f)
                                  (@apply
                                    (lambda (#{a 56122}# #{b 56123}#)
                                      (#{rest 55936}#
                                        #{b 56123}#
                                        (reverse #{rreq 55941}#)
                                        '()
                                        '()))
                                    #{tmp 56116}#)
                                  (let ((#{tmp 56126}# (list #{args 55940}#)))
                                    (if (@apply
                                          (lambda (#{r 56128}#)
                                            (if (symbol? #{r 56128}#)
                                              #t
                                              (if (if (vector? #{r 56128}#)
                                                    (if (= (vector-length
                                                             #{r 56128}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{r 56128}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref #{r 56128}# 1))
                                                #f)))
                                          #{tmp 56126}#)
                                      (@apply
                                        (lambda (#{r 56158}#)
                                          (#{rest 55936}#
                                            #{r 56158}#
                                            (reverse #{rreq 55941}#)
                                            '()
                                            '()))
                                        #{tmp 56126}#)
                                      (syntax-violation
                                        'lambda*
                                        "invalid argument list"
                                        #{orig-args 55932}#
                                        #{args 55940}#)))))))))))))))
          (#{opt 55934}#
            (lambda (#{args 56177}# #{req 56178}# #{ropt 56179}#)
              (let ((#{tmp 56181}# ($sc-dispatch #{args 56177}# '())))
                (if #{tmp 56181}#
                  (@apply
                    (lambda ()
                      (#{check 55937}#
                        #{req 56178}#
                        (reverse #{ropt 56179}#)
                        #f
                        '()))
                    #{tmp 56181}#)
                  (let ((#{tmp 56302}#
                          ($sc-dispatch #{args 56177}# '(any . any))))
                    (if (if #{tmp 56302}#
                          (@apply
                            (lambda (#{a 56306}# #{b 56307}#)
                              (if (symbol? #{a 56306}#)
                                #t
                                (if (if (vector? #{a 56306}#)
                                      (if (= (vector-length #{a 56306}#) 4)
                                        (eq? (vector-ref #{a 56306}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 56306}# 1))
                                  #f)))
                            #{tmp 56302}#)
                          #f)
                      (@apply
                        (lambda (#{a 56334}# #{b 56335}#)
                          (#{opt 55934}#
                            #{b 56335}#
                            #{req 56178}#
                            (cons (cons #{a 56334}#
                                        '(#(syntax-object
                                            #f
                                            ((top)
                                             #(ribcage
                                               #(a b)
                                               #((top) (top))
                                               #("i26305" "i26306"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(args req ropt)
                                               #((top) (top) (top))
                                               #("i26295" "i26296" "i26297"))
                                             #(ribcage
                                               (check rest key opt req)
                                               ((top) (top) (top) (top) (top))
                                               ("i26241"
                                                "i26239"
                                                "i26237"
                                                "i26235"
                                                "i26233"))
                                             #(ribcage
                                               #(orig-args)
                                               #((top))
                                               #("i26232"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 expand-lambda-case
                                                 lambda*-formals
                                                 expand-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 expand-void
                                                 eval-local-transformer
                                                 expand-local-syntax
                                                 expand-body
                                                 expand-macro
                                                 expand-call
                                                 expand-expr
                                                 expand
                                                 syntax-type
                                                 parse-when-list
                                                 expand-install-global
                                                 expand-top-sequence
                                                 expand-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 resolve-identifier
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-primcall
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-call
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-seq
                                                 make-primcall
                                                 make-call
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i24298"
                                                "i24296"
                                                "i24294"
                                                "i24292"
                                                "i24290"
                                                "i24288"
                                                "i24286"
                                                "i24284"
                                                "i24282"
                                                "i24280"
                                                "i24278"
                                                "i24276"
                                                "i24274"
                                                "i24272"
                                                "i24270"
                                                "i24268"
                                                "i24266"
                                                "i24264"
                                                "i24262"
                                                "i24260"
                                                "i24258"
                                                "i24256"
                                                "i24254"
                                                "i24252"
                                                "i24250"
                                                "i24248"
                                                "i24246"
                                                "i24244"
                                                "i24242"
                                                "i24240"
                                                "i24238"
                                                "i24236"
                                                "i24234"
                                                "i24232"
                                                "i24230"
                                                "i24228"
                                                "i24227"
                                                "i24225"
                                                "i24222"
                                                "i24221"
                                                "i24220"
                                                "i24218"
                                                "i24217"
                                                "i24215"
                                                "i24213"
                                                "i24211"
                                                "i24209"
                                                "i24207"
                                                "i24205"
                                                "i24203"
                                                "i24201"
                                                "i24198"
                                                "i24196"
                                                "i24195"
                                                "i24193"
                                                "i24191"
                                                "i24189"
                                                "i24187"
                                                "i24186"
                                                "i24185"
                                                "i24184"
                                                "i24182"
                                                "i24181"
                                                "i24178"
                                                "i24176"
                                                "i24174"
                                                "i24172"
                                                "i24170"
                                                "i24168"
                                                "i24167"
                                                "i24166"
                                                "i24164"
                                                "i24162"
                                                "i24161"
                                                "i24158"
                                                "i24157"
                                                "i24155"
                                                "i24153"
                                                "i24151"
                                                "i24149"
                                                "i24147"
                                                "i24145"
                                                "i24143"
                                                "i24141"
                                                "i24139"
                                                "i24136"
                                                "i24134"
                                                "i24132"
                                                "i24130"
                                                "i24128"
                                                "i24126"
                                                "i24124"
                                                "i24122"
                                                "i24120"
                                                "i24118"
                                                "i24116"
                                                "i24114"
                                                "i24112"
                                                "i24110"
                                                "i24108"
                                                "i24106"
                                                "i24104"
                                                "i24102"
                                                "i24100"
                                                "i24098"
                                                "i24096"
                                                "i24094"
                                                "i24092"
                                                "i24090"
                                                "i24089"
                                                "i24086"
                                                "i24084"
                                                "i24083"
                                                "i24082"
                                                "i24081"
                                                "i24080"
                                                "i24078"
                                                "i24076"
                                                "i24074"
                                                "i24071"
                                                "i24069"
                                                "i24067"
                                                "i24065"
                                                "i24063"
                                                "i24061"
                                                "i24059"
                                                "i24057"
                                                "i24055"
                                                "i24053"
                                                "i24051"
                                                "i24049"
                                                "i24047"
                                                "i24045"
                                                "i24043"
                                                "i24041"
                                                "i24039"
                                                "i24037"
                                                "i24035"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("i23873" "i23872" "i23871"))
                                             #(ribcage () () ()))
                                            (hygiene guile))))
                                  #{ropt 56179}#)))
                        #{tmp 56302}#)
                      (let ((#{tmp 56336}#
                              ($sc-dispatch
                                #{args 56177}#
                                '((any any) . any))))
                        (if (if #{tmp 56336}#
                              (@apply
                                (lambda (#{a 56340}#
                                         #{init 56341}#
                                         #{b 56342}#)
                                  (if (symbol? #{a 56340}#)
                                    #t
                                    (if (if (vector? #{a 56340}#)
                                          (if (= (vector-length #{a 56340}#) 4)
                                            (eq? (vector-ref #{a 56340}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref #{a 56340}# 1))
                                      #f)))
                                #{tmp 56336}#)
                              #f)
                          (@apply
                            (lambda (#{a 56369}# #{init 56370}# #{b 56371}#)
                              (#{opt 55934}#
                                #{b 56371}#
                                #{req 56178}#
                                (cons (list #{a 56369}# #{init 56370}#)
                                      #{ropt 56179}#)))
                            #{tmp 56336}#)
                          (let ((#{tmp 56372}#
                                  ($sc-dispatch #{args 56177}# '(any . any))))
                            (if (if #{tmp 56372}#
                                  (@apply
                                    (lambda (#{a 56376}# #{b 56377}#)
                                      (eq? (syntax->datum #{a 56376}#) #:key))
                                    #{tmp 56372}#)
                                  #f)
                              (@apply
                                (lambda (#{a 56378}# #{b 56379}#)
                                  (#{key 55935}#
                                    #{b 56379}#
                                    #{req 56178}#
                                    (reverse #{ropt 56179}#)
                                    '()))
                                #{tmp 56372}#)
                              (let ((#{tmp 56382}#
                                      ($sc-dispatch
                                        #{args 56177}#
                                        '(any any))))
                                (if (if #{tmp 56382}#
                                      (@apply
                                        (lambda (#{a 56386}# #{b 56387}#)
                                          (eq? (syntax->datum #{a 56386}#)
                                               #:rest))
                                        #{tmp 56382}#)
                                      #f)
                                  (@apply
                                    (lambda (#{a 56388}# #{b 56389}#)
                                      (#{rest 55936}#
                                        #{b 56389}#
                                        #{req 56178}#
                                        (reverse #{ropt 56179}#)
                                        '()))
                                    #{tmp 56382}#)
                                  (let ((#{tmp 56392}# (list #{args 56177}#)))
                                    (if (@apply
                                          (lambda (#{r 56394}#)
                                            (if (symbol? #{r 56394}#)
                                              #t
                                              (if (if (vector? #{r 56394}#)
                                                    (if (= (vector-length
                                                             #{r 56394}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{r 56394}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref #{r 56394}# 1))
                                                #f)))
                                          #{tmp 56392}#)
                                      (@apply
                                        (lambda (#{r 56424}#)
                                          (#{rest 55936}#
                                            #{r 56424}#
                                            #{req 56178}#
                                            (reverse #{ropt 56179}#)
                                            '()))
                                        #{tmp 56392}#)
                                      (syntax-violation
                                        'lambda*
                                        "invalid optional argument list"
                                        #{orig-args 55932}#
                                        #{args 56177}#)))))))))))))))
          (#{key 55935}#
            (lambda (#{args 56443}#
                     #{req 56444}#
                     #{opt 56445}#
                     #{rkey 56446}#)
              (let ((#{tmp 56448}# ($sc-dispatch #{args 56443}# '())))
                (if #{tmp 56448}#
                  (@apply
                    (lambda ()
                      (#{check 55937}#
                        #{req 56444}#
                        #{opt 56445}#
                        #f
                        (cons #f (reverse #{rkey 56446}#))))
                    #{tmp 56448}#)
                  (let ((#{tmp 56570}#
                          ($sc-dispatch #{args 56443}# '(any . any))))
                    (if (if #{tmp 56570}#
                          (@apply
                            (lambda (#{a 56574}# #{b 56575}#)
                              (if (symbol? #{a 56574}#)
                                #t
                                (if (if (vector? #{a 56574}#)
                                      (if (= (vector-length #{a 56574}#) 4)
                                        (eq? (vector-ref #{a 56574}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 56574}# 1))
                                  #f)))
                            #{tmp 56570}#)
                          #f)
                      (@apply
                        (lambda (#{a 56602}# #{b 56603}#)
                          (let ((#{tmp 56604}#
                                  (symbol->keyword
                                    (syntax->datum #{a 56602}#))))
                            (#{key 55935}#
                              #{b 56603}#
                              #{req 56444}#
                              #{opt 56445}#
                              (cons (cons #{tmp 56604}#
                                          (cons #{a 56602}#
                                                '(#(syntax-object
                                                    #f
                                                    ((top)
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(k)
                                                       #((top))
                                                       #("i26368"))
                                                     #(ribcage
                                                       #(a b)
                                                       #((top) (top))
                                                       #("i26362" "i26363"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(args req opt rkey)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i26351"
                                                         "i26352"
                                                         "i26353"
                                                         "i26354"))
                                                     #(ribcage
                                                       (check rest key opt req)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i26241"
                                                        "i26239"
                                                        "i26237"
                                                        "i26235"
                                                        "i26233"))
                                                     #(ribcage
                                                       #(orig-args)
                                                       #((top))
                                                       #("i26232"))
                                                     #(ribcage
                                                       (lambda-var-list
                                                         gen-var
                                                         strip
                                                         expand-lambda-case
                                                         lambda*-formals
                                                         expand-simple-lambda
                                                         lambda-formals
                                                         ellipsis?
                                                         expand-void
                                                         eval-local-transformer
                                                         expand-local-syntax
                                                         expand-body
                                                         expand-macro
                                                         expand-call
                                                         expand-expr
                                                         expand
                                                         syntax-type
                                                         parse-when-list
                                                         expand-install-global
                                                         expand-top-sequence
                                                         expand-sequence
                                                         source-wrap
                                                         wrap
                                                         bound-id-member?
                                                         distinct-bound-ids?
                                                         valid-bound-ids?
                                                         bound-id=?
                                                         free-id=?
                                                         resolve-identifier
                                                         id-var-name
                                                         same-marks?
                                                         join-marks
                                                         join-wraps
                                                         smart-append
                                                         make-binding-wrap
                                                         extend-ribcage!
                                                         make-empty-ribcage
                                                         new-mark
                                                         anti-mark
                                                         the-anti-mark
                                                         top-marked?
                                                         top-wrap
                                                         empty-wrap
                                                         set-ribcage-labels!
                                                         set-ribcage-marks!
                                                         set-ribcage-symnames!
                                                         ribcage-labels
                                                         ribcage-marks
                                                         ribcage-symnames
                                                         ribcage?
                                                         make-ribcage
                                                         gen-labels
                                                         gen-label
                                                         make-rename
                                                         rename-marks
                                                         rename-new
                                                         rename-old
                                                         subst-rename?
                                                         wrap-subst
                                                         wrap-marks
                                                         make-wrap
                                                         id-sym-name&marks
                                                         id-sym-name
                                                         id?
                                                         nonsymbol-id?
                                                         global-extend
                                                         macros-only-env
                                                         extend-var-env
                                                         extend-env
                                                         null-env
                                                         binding-value
                                                         binding-type
                                                         make-binding
                                                         arg-check
                                                         source-annotation
                                                         no-source
                                                         set-syntax-object-module!
                                                         set-syntax-object-wrap!
                                                         set-syntax-object-expression!
                                                         syntax-object-module
                                                         syntax-object-wrap
                                                         syntax-object-expression
                                                         syntax-object?
                                                         make-syntax-object
                                                         build-lexical-var
                                                         build-letrec
                                                         build-named-let
                                                         build-let
                                                         build-sequence
                                                         build-data
                                                         build-primref
                                                         build-primcall
                                                         build-lambda-case
                                                         build-case-lambda
                                                         build-simple-lambda
                                                         build-global-definition
                                                         build-global-assignment
                                                         build-global-reference
                                                         analyze-variable
                                                         build-lexical-assignment
                                                         build-lexical-reference
                                                         build-dynlet
                                                         build-conditional
                                                         build-call
                                                         build-void
                                                         maybe-name-value!
                                                         decorate-source
                                                         get-global-definition-hook
                                                         put-global-definition-hook
                                                         gensym-hook
                                                         local-eval-hook
                                                         top-level-eval-hook
                                                         fx<
                                                         fx=
                                                         fx-
                                                         fx+
                                                         set-lambda-meta!
                                                         lambda-meta
                                                         lambda?
                                                         make-dynlet
                                                         make-letrec
                                                         make-let
                                                         make-lambda-case
                                                         make-lambda
                                                         make-seq
                                                         make-primcall
                                                         make-call
                                                         make-conditional
                                                         make-toplevel-define
                                                         make-toplevel-set
                                                         make-toplevel-ref
                                                         make-module-set
                                                         make-module-ref
                                                         make-lexical-set
                                                         make-lexical-ref
                                                         make-primitive-ref
                                                         make-const
                                                         make-void)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i24298"
                                                        "i24296"
                                                        "i24294"
                                                        "i24292"
                                                        "i24290"
                                                        "i24288"
                                                        "i24286"
                                                        "i24284"
                                                        "i24282"
                                                        "i24280"
                                                        "i24278"
                                                        "i24276"
                                                        "i24274"
                                                        "i24272"
                                                        "i24270"
                                                        "i24268"
                                                        "i24266"
                                                        "i24264"
                                                        "i24262"
                                                        "i24260"
                                                        "i24258"
                                                        "i24256"
                                                        "i24254"
                                                        "i24252"
                                                        "i24250"
                                                        "i24248"
                                                        "i24246"
                                                        "i24244"
                                                        "i24242"
                                                        "i24240"
                                                        "i24238"
                                                        "i24236"
                                                        "i24234"
                                                        "i24232"
                                                        "i24230"
                                                        "i24228"
                                                        "i24227"
                                                        "i24225"
                                                        "i24222"
                                                        "i24221"
                                                        "i24220"
                                                        "i24218"
                                                        "i24217"
                                                        "i24215"
                                                        "i24213"
                                                        "i24211"
                                                        "i24209"
                                                        "i24207"
                                                        "i24205"
                                                        "i24203"
                                                        "i24201"
                                                        "i24198"
                                                        "i24196"
                                                        "i24195"
                                                        "i24193"
                                                        "i24191"
                                                        "i24189"
                                                        "i24187"
                                                        "i24186"
                                                        "i24185"
                                                        "i24184"
                                                        "i24182"
                                                        "i24181"
                                                        "i24178"
                                                        "i24176"
                                                        "i24174"
                                                        "i24172"
                                                        "i24170"
                                                        "i24168"
                                                        "i24167"
                                                        "i24166"
                                                        "i24164"
                                                        "i24162"
                                                        "i24161"
                                                        "i24158"
                                                        "i24157"
                                                        "i24155"
                                                        "i24153"
                                                        "i24151"
                                                        "i24149"
                                                        "i24147"
                                                        "i24145"
                                                        "i24143"
                                                        "i24141"
                                                        "i24139"
                                                        "i24136"
                                                        "i24134"
                                                        "i24132"
                                                        "i24130"
                                                        "i24128"
                                                        "i24126"
                                                        "i24124"
                                                        "i24122"
                                                        "i24120"
                                                        "i24118"
                                                        "i24116"
                                                        "i24114"
                                                        "i24112"
                                                        "i24110"
                                                        "i24108"
                                                        "i24106"
                                                        "i24104"
                                                        "i24102"
                                                        "i24100"
                                                        "i24098"
                                                        "i24096"
                                                        "i24094"
                                                        "i24092"
                                                        "i24090"
                                                        "i24089"
                                                        "i24086"
                                                        "i24084"
                                                        "i24083"
                                                        "i24082"
                                                        "i24081"
                                                        "i24080"
                                                        "i24078"
                                                        "i24076"
                                                        "i24074"
                                                        "i24071"
                                                        "i24069"
                                                        "i24067"
                                                        "i24065"
                                                        "i24063"
                                                        "i24061"
                                                        "i24059"
                                                        "i24057"
                                                        "i24055"
                                                        "i24053"
                                                        "i24051"
                                                        "i24049"
                                                        "i24047"
                                                        "i24045"
                                                        "i24043"
                                                        "i24041"
                                                        "i24039"
                                                        "i24037"
                                                        "i24035"))
                                                     #(ribcage
                                                       (define-structure
                                                         define-expansion-accessors
                                                         define-expansion-constructors)
                                                       ((top) (top) (top))
                                                       ("i23873"
                                                        "i23872"
                                                        "i23871"))
                                                     #(ribcage () () ()))
                                                    (hygiene guile)))))
                                    #{rkey 56446}#))))
                        #{tmp 56570}#)
                      (let ((#{tmp 56607}#
                              ($sc-dispatch
                                #{args 56443}#
                                '((any any) . any))))
                        (if (if #{tmp 56607}#
                              (@apply
                                (lambda (#{a 56611}#
                                         #{init 56612}#
                                         #{b 56613}#)
                                  (if (symbol? #{a 56611}#)
                                    #t
                                    (if (if (vector? #{a 56611}#)
                                          (if (= (vector-length #{a 56611}#) 4)
                                            (eq? (vector-ref #{a 56611}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref #{a 56611}# 1))
                                      #f)))
                                #{tmp 56607}#)
                              #f)
                          (@apply
                            (lambda (#{a 56640}# #{init 56641}# #{b 56642}#)
                              (let ((#{tmp 56643}#
                                      (symbol->keyword
                                        (syntax->datum #{a 56640}#))))
                                (#{key 55935}#
                                  #{b 56642}#
                                  #{req 56444}#
                                  #{opt 56445}#
                                  (cons (list #{tmp 56643}#
                                              #{a 56640}#
                                              #{init 56641}#)
                                        #{rkey 56446}#))))
                            #{tmp 56607}#)
                          (let ((#{tmp 56646}#
                                  ($sc-dispatch
                                    #{args 56443}#
                                    '((any any any) . any))))
                            (if (if #{tmp 56646}#
                                  (@apply
                                    (lambda (#{a 56650}#
                                             #{init 56651}#
                                             #{k 56652}#
                                             #{b 56653}#)
                                      (if (if (symbol? #{a 56650}#)
                                            #t
                                            (if (if (vector? #{a 56650}#)
                                                  (if (= (vector-length
                                                           #{a 56650}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{a 56650}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (symbol?
                                                (vector-ref #{a 56650}# 1))
                                              #f))
                                        (keyword? (syntax->datum #{k 56652}#))
                                        #f))
                                    #{tmp 56646}#)
                                  #f)
                              (@apply
                                (lambda (#{a 56680}#
                                         #{init 56681}#
                                         #{k 56682}#
                                         #{b 56683}#)
                                  (#{key 55935}#
                                    #{b 56683}#
                                    #{req 56444}#
                                    #{opt 56445}#
                                    (cons (list #{k 56682}#
                                                #{a 56680}#
                                                #{init 56681}#)
                                          #{rkey 56446}#)))
                                #{tmp 56646}#)
                              (let ((#{tmp 56684}#
                                      ($sc-dispatch #{args 56443}# '(any))))
                                (if (if #{tmp 56684}#
                                      (@apply
                                        (lambda (#{aok 56688}#)
                                          (eq? (syntax->datum #{aok 56688}#)
                                               #:allow-other-keys))
                                        #{tmp 56684}#)
                                      #f)
                                  (@apply
                                    (lambda (#{aok 56689}#)
                                      (#{check 55937}#
                                        #{req 56444}#
                                        #{opt 56445}#
                                        #f
                                        (cons #t (reverse #{rkey 56446}#))))
                                    #{tmp 56684}#)
                                  (let ((#{tmp 56808}#
                                          ($sc-dispatch
                                            #{args 56443}#
                                            '(any any any))))
                                    (if (if #{tmp 56808}#
                                          (@apply
                                            (lambda (#{aok 56812}#
                                                     #{a 56813}#
                                                     #{b 56814}#)
                                              (if (eq? (syntax->datum
                                                         #{aok 56812}#)
                                                       #:allow-other-keys)
                                                (eq? (syntax->datum
                                                       #{a 56813}#)
                                                     #:rest)
                                                #f))
                                            #{tmp 56808}#)
                                          #f)
                                      (@apply
                                        (lambda (#{aok 56815}#
                                                 #{a 56816}#
                                                 #{b 56817}#)
                                          (#{rest 55936}#
                                            #{b 56817}#
                                            #{req 56444}#
                                            #{opt 56445}#
                                            (cons #t
                                                  (reverse #{rkey 56446}#))))
                                        #{tmp 56808}#)
                                      (let ((#{tmp 56820}#
                                              ($sc-dispatch
                                                #{args 56443}#
                                                '(any . any))))
                                        (if (if #{tmp 56820}#
                                              (@apply
                                                (lambda (#{aok 56824}#
                                                         #{r 56825}#)
                                                  (if (eq? (syntax->datum
                                                             #{aok 56824}#)
                                                           #:allow-other-keys)
                                                    (if (symbol? #{r 56825}#)
                                                      #t
                                                      (if (if (vector?
                                                                #{r 56825}#)
                                                            (if (= (vector-length
                                                                     #{r 56825}#)
                                                                   4)
                                                              (eq? (vector-ref
                                                                     #{r 56825}#
                                                                     0)
                                                                   'syntax-object)
                                                              #f)
                                                            #f)
                                                        (symbol?
                                                          (vector-ref
                                                            #{r 56825}#
                                                            1))
                                                        #f))
                                                    #f))
                                                #{tmp 56820}#)
                                              #f)
                                          (@apply
                                            (lambda (#{aok 56852}# #{r 56853}#)
                                              (#{rest 55936}#
                                                #{r 56853}#
                                                #{req 56444}#
                                                #{opt 56445}#
                                                (cons #t
                                                      (reverse
                                                        #{rkey 56446}#))))
                                            #{tmp 56820}#)
                                          (let ((#{tmp 56856}#
                                                  ($sc-dispatch
                                                    #{args 56443}#
                                                    '(any any))))
                                            (if (if #{tmp 56856}#
                                                  (@apply
                                                    (lambda (#{a 56860}#
                                                             #{b 56861}#)
                                                      (eq? (syntax->datum
                                                             #{a 56860}#)
                                                           #:rest))
                                                    #{tmp 56856}#)
                                                  #f)
                                              (@apply
                                                (lambda (#{a 56862}#
                                                         #{b 56863}#)
                                                  (#{rest 55936}#
                                                    #{b 56863}#
                                                    #{req 56444}#
                                                    #{opt 56445}#
                                                    (cons #f
                                                          (reverse
                                                            #{rkey 56446}#))))
                                                #{tmp 56856}#)
                                              (let ((#{tmp 56866}#
                                                      (list #{args 56443}#)))
                                                (if (@apply
                                                      (lambda (#{r 56868}#)
                                                        (if (symbol?
                                                              #{r 56868}#)
                                                          #t
                                                          (if (if (vector?
                                                                    #{r 56868}#)
                                                                (if (= (vector-length
                                                                         #{r 56868}#)
                                                                       4)
                                                                  (eq? (vector-ref
                                                                         #{r 56868}#
                                                                         0)
                                                                       'syntax-object)
                                                                  #f)
                                                                #f)
                                                            (symbol?
                                                              (vector-ref
                                                                #{r 56868}#
                                                                1))
                                                            #f)))
                                                      #{tmp 56866}#)
                                                  (@apply
                                                    (lambda (#{r 56898}#)
                                                      (#{rest 55936}#
                                                        #{r 56898}#
                                                        #{req 56444}#
                                                        #{opt 56445}#
                                                        (cons #f
                                                              (reverse
                                                                #{rkey 56446}#))))
                                                    #{tmp 56866}#)
                                                  (syntax-violation
                                                    'lambda*
                                                    "invalid keyword argument list"
                                                    #{orig-args 55932}#
                                                    #{args 56443}#)))))))))))))))))))))
          (#{rest 55936}#
            (lambda (#{args 56926}#
                     #{req 56927}#
                     #{opt 56928}#
                     #{kw 56929}#)
              (let ((#{tmp 56931}# (list #{args 56926}#)))
                (if (@apply
                      (lambda (#{r 56933}#)
                        (if (symbol? #{r 56933}#)
                          #t
                          (if (if (vector? #{r 56933}#)
                                (if (= (vector-length #{r 56933}#) 4)
                                  (eq? (vector-ref #{r 56933}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{r 56933}# 1))
                            #f)))
                      #{tmp 56931}#)
                  (@apply
                    (lambda (#{r 56963}#)
                      (#{check 55937}#
                        #{req 56927}#
                        #{opt 56928}#
                        #{r 56963}#
                        #{kw 56929}#))
                    #{tmp 56931}#)
                  (syntax-violation
                    'lambda*
                    "invalid rest argument"
                    #{orig-args 55932}#
                    #{args 56926}#)))))
          (#{check 55937}#
            (lambda (#{req 57091}#
                     #{opt 57092}#
                     #{rest 57093}#
                     #{kw 57094}#)
              (if (#{distinct-bound-ids? 28262}#
                    (append
                      #{req 57091}#
                      (map car #{opt 57092}#)
                      (if #{rest 57093}# (list #{rest 57093}#) '())
                      (if (pair? #{kw 57094}#)
                        (map cadr (cdr #{kw 57094}#))
                        '())))
                (values
                  #{req 57091}#
                  #{opt 57092}#
                  #{rest 57093}#
                  #{kw 57094}#)
                (syntax-violation
                  'lambda*
                  "duplicate identifier in argument list"
                  #{orig-args 55932}#)))))
         (#{req 55933}# #{orig-args 55932}# '()))))
   (#{expand-lambda-case 28283}#
     (lambda (#{e 57203}#
              #{r 57204}#
              #{w 57205}#
              #{s 57206}#
              #{mod 57207}#
              #{get-formals 57208}#
              #{clauses 57209}#)
       (letrec*
         ((#{parse-req 57210}#
            (lambda (#{req 57345}#
                     #{opt 57346}#
                     #{rest 57347}#
                     #{kw 57348}#
                     #{body 57349}#)
              (let ((#{vars 57350}#
                      (map #{gen-var 28285}# #{req 57345}#))
                    (#{labels 57351}#
                      (#{gen-labels 28241}# #{req 57345}#)))
                (let ((#{r* 57352}#
                        (#{extend-var-env 28234}#
                          #{labels 57351}#
                          #{vars 57350}#
                          #{r 57204}#))
                      (#{w* 57353}#
                        (#{make-binding-wrap 28252}#
                          #{req 57345}#
                          #{labels 57351}#
                          #{w 57205}#)))
                  (#{parse-opt 57211}#
                    (map syntax->datum #{req 57345}#)
                    #{opt 57346}#
                    #{rest 57347}#
                    #{kw 57348}#
                    #{body 57349}#
                    (reverse #{vars 57350}#)
                    #{r* 57352}#
                    #{w* 57353}#
                    '()
                    '())))))
          (#{parse-opt 57211}#
            (lambda (#{req 57587}#
                     #{opt 57588}#
                     #{rest 57589}#
                     #{kw 57590}#
                     #{body 57591}#
                     #{vars 57592}#
                     #{r* 57593}#
                     #{w* 57594}#
                     #{out 57595}#
                     #{inits 57596}#)
              (if (pair? #{opt 57588}#)
                (let ((#{tmp 57597}# (car #{opt 57588}#)))
                  (let ((#{tmp 57598}#
                          ($sc-dispatch #{tmp 57597}# '(any any))))
                    (if #{tmp 57598}#
                      (@apply
                        (lambda (#{id 57600}# #{i 57601}#)
                          (let ((#{v 57602}#
                                  (let ((#{id 57610}#
                                          (if (if (vector? #{id 57600}#)
                                                (if (= (vector-length
                                                         #{id 57600}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{id 57600}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{id 57600}# 1)
                                            #{id 57600}#)))
                                    (gensym
                                      (string-append
                                        (symbol->string #{id 57610}#)
                                        " ")))))
                            (let ((#{l 57603}#
                                    (#{gen-labels 28241}# (list #{v 57602}#))))
                              (let ((#{r** 57604}#
                                      (#{extend-var-env 28234}#
                                        #{l 57603}#
                                        (list #{v 57602}#)
                                        #{r* 57593}#)))
                                (let ((#{w** 57605}#
                                        (#{make-binding-wrap 28252}#
                                          (list #{id 57600}#)
                                          #{l 57603}#
                                          #{w* 57594}#)))
                                  (#{parse-opt 57211}#
                                    #{req 57587}#
                                    (cdr #{opt 57588}#)
                                    #{rest 57589}#
                                    #{kw 57590}#
                                    #{body 57591}#
                                    (cons #{v 57602}# #{vars 57592}#)
                                    #{r** 57604}#
                                    #{w** 57605}#
                                    (cons (syntax->datum #{id 57600}#)
                                          #{out 57595}#)
                                    (cons (#{expand 28271}#
                                            #{i 57601}#
                                            #{r* 57593}#
                                            #{w* 57594}#
                                            #{mod 57207}#)
                                          #{inits 57596}#)))))))
                        #{tmp 57598}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp 57597}#))))
                (if #{rest 57589}#
                  (let ((#{v 57904}#
                          (let ((#{id 57914}#
                                  (if (if (vector? #{rest 57589}#)
                                        (if (= (vector-length #{rest 57589}#)
                                               4)
                                          (eq? (vector-ref #{rest 57589}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (vector-ref #{rest 57589}# 1)
                                    #{rest 57589}#)))
                            (gensym
                              (string-append
                                (symbol->string #{id 57914}#)
                                " ")))))
                    (let ((#{l 57905}#
                            (#{gen-labels 28241}# (list #{v 57904}#))))
                      (let ((#{r* 57906}#
                              (#{extend-var-env 28234}#
                                #{l 57905}#
                                (list #{v 57904}#)
                                #{r* 57593}#)))
                        (let ((#{w* 57907}#
                                (#{make-binding-wrap 28252}#
                                  (list #{rest 57589}#)
                                  #{l 57905}#
                                  #{w* 57594}#)))
                          (#{parse-kw 57212}#
                            #{req 57587}#
                            (if (pair? #{out 57595}#)
                              (reverse #{out 57595}#)
                              #f)
                            (syntax->datum #{rest 57589}#)
                            (if (pair? #{kw 57590}#)
                              (cdr #{kw 57590}#)
                              #{kw 57590}#)
                            #{body 57591}#
                            (cons #{v 57904}# #{vars 57592}#)
                            #{r* 57906}#
                            #{w* 57907}#
                            (if (pair? #{kw 57590}#) (car #{kw 57590}#) #f)
                            '()
                            #{inits 57596}#)))))
                  (#{parse-kw 57212}#
                    #{req 57587}#
                    (if (pair? #{out 57595}#)
                      (reverse #{out 57595}#)
                      #f)
                    #f
                    (if (pair? #{kw 57590}#)
                      (cdr #{kw 57590}#)
                      #{kw 57590}#)
                    #{body 57591}#
                    #{vars 57592}#
                    #{r* 57593}#
                    #{w* 57594}#
                    (if (pair? #{kw 57590}#) (car #{kw 57590}#) #f)
                    '()
                    #{inits 57596}#)))))
          (#{parse-kw 57212}#
            (lambda (#{req 58133}#
                     #{opt 58134}#
                     #{rest 58135}#
                     #{kw 58136}#
                     #{body 58137}#
                     #{vars 58138}#
                     #{r* 58139}#
                     #{w* 58140}#
                     #{aok 58141}#
                     #{out 58142}#
                     #{inits 58143}#)
              (if (pair? #{kw 58136}#)
                (let ((#{tmp 58144}# (car #{kw 58136}#)))
                  (let ((#{tmp 58145}#
                          ($sc-dispatch #{tmp 58144}# '(any any any))))
                    (if #{tmp 58145}#
                      (@apply
                        (lambda (#{k 58147}# #{id 58148}# #{i 58149}#)
                          (let ((#{v 58150}#
                                  (let ((#{id 58158}#
                                          (if (if (vector? #{id 58148}#)
                                                (if (= (vector-length
                                                         #{id 58148}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{id 58148}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{id 58148}# 1)
                                            #{id 58148}#)))
                                    (gensym
                                      (string-append
                                        (symbol->string #{id 58158}#)
                                        " ")))))
                            (let ((#{l 58151}#
                                    (#{gen-labels 28241}# (list #{v 58150}#))))
                              (let ((#{r** 58152}#
                                      (#{extend-var-env 28234}#
                                        #{l 58151}#
                                        (list #{v 58150}#)
                                        #{r* 58139}#)))
                                (let ((#{w** 58153}#
                                        (#{make-binding-wrap 28252}#
                                          (list #{id 58148}#)
                                          #{l 58151}#
                                          #{w* 58140}#)))
                                  (#{parse-kw 57212}#
                                    #{req 58133}#
                                    #{opt 58134}#
                                    #{rest 58135}#
                                    (cdr #{kw 58136}#)
                                    #{body 58137}#
                                    (cons #{v 58150}# #{vars 58138}#)
                                    #{r** 58152}#
                                    #{w** 58153}#
                                    #{aok 58141}#
                                    (cons (list (syntax->datum #{k 58147}#)
                                                (syntax->datum #{id 58148}#)
                                                #{v 58150}#)
                                          #{out 58142}#)
                                    (cons (#{expand 28271}#
                                            #{i 58149}#
                                            #{r* 58139}#
                                            #{w* 58140}#
                                            #{mod 57207}#)
                                          #{inits 58143}#)))))))
                        #{tmp 58145}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp 58144}#))))
                (#{parse-body 57213}#
                  #{req 58133}#
                  #{opt 58134}#
                  #{rest 58135}#
                  (if (if #{aok 58141}#
                        #{aok 58141}#
                        (pair? #{out 58142}#))
                    (cons #{aok 58141}# (reverse #{out 58142}#))
                    #f)
                  #{body 58137}#
                  (reverse #{vars 58138}#)
                  #{r* 58139}#
                  #{w* 58140}#
                  (reverse #{inits 58143}#)
                  '()))))
          (#{parse-body 57213}#
            (lambda (#{req 58461}#
                     #{opt 58462}#
                     #{rest 58463}#
                     #{kw 58464}#
                     #{body 58465}#
                     #{vars 58466}#
                     #{r* 58467}#
                     #{w* 58468}#
                     #{inits 58469}#
                     #{meta 58470}#)
              (let ((#{tmp 58472}#
                      ($sc-dispatch
                        #{body 58465}#
                        '(any any . each-any))))
                (if (if #{tmp 58472}#
                      (@apply
                        (lambda (#{docstring 58476}# #{e1 58477}# #{e2 58478}#)
                          (string? (syntax->datum #{docstring 58476}#)))
                        #{tmp 58472}#)
                      #f)
                  (@apply
                    (lambda (#{docstring 58479}# #{e1 58480}# #{e2 58481}#)
                      (#{parse-body 57213}#
                        #{req 58461}#
                        #{opt 58462}#
                        #{rest 58463}#
                        #{kw 58464}#
                        (cons #{e1 58480}# #{e2 58481}#)
                        #{vars 58466}#
                        #{r* 58467}#
                        #{w* 58468}#
                        #{inits 58469}#
                        (append
                          #{meta 58470}#
                          (list (cons 'documentation
                                      (syntax->datum #{docstring 58479}#))))))
                    #{tmp 58472}#)
                  (let ((#{tmp 58482}#
                          ($sc-dispatch
                            #{body 58465}#
                            '(#(vector #(each (any . any))) any . each-any))))
                    (if #{tmp 58482}#
                      (@apply
                        (lambda (#{k 58486}#
                                 #{v 58487}#
                                 #{e1 58488}#
                                 #{e2 58489}#)
                          (#{parse-body 57213}#
                            #{req 58461}#
                            #{opt 58462}#
                            #{rest 58463}#
                            #{kw 58464}#
                            (cons #{e1 58488}# #{e2 58489}#)
                            #{vars 58466}#
                            #{r* 58467}#
                            #{w* 58468}#
                            #{inits 58469}#
                            (append
                              #{meta 58470}#
                              (syntax->datum
                                (map cons #{k 58486}# #{v 58487}#)))))
                        #{tmp 58482}#)
                      (let ((#{tmp 58490}#
                              ($sc-dispatch #{body 58465}# '(any . each-any))))
                        (if #{tmp 58490}#
                          (@apply
                            (lambda (#{e1 58494}# #{e2 58495}#)
                              (values
                                #{meta 58470}#
                                #{req 58461}#
                                #{opt 58462}#
                                #{rest 58463}#
                                #{kw 58464}#
                                #{inits 58469}#
                                #{vars 58466}#
                                (#{expand-body 28275}#
                                  (cons #{e1 58494}# #{e2 58495}#)
                                  (let ((#{x 58507}#
                                          (begin
                                            (if (if (pair? #{e 57203}#)
                                                  #{s 57206}#
                                                  #f)
                                              (set-source-properties!
                                                #{e 57203}#
                                                #{s 57206}#))
                                            #{e 57203}#)))
                                    (if (if (null? (car #{w 57205}#))
                                          (null? (cdr #{w 57205}#))
                                          #f)
                                      #{x 58507}#
                                      (if (if (vector? #{x 58507}#)
                                            (if (= (vector-length #{x 58507}#)
                                                   4)
                                              (eq? (vector-ref #{x 58507}# 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (let ((#{expression 58539}#
                                                (vector-ref #{x 58507}# 1))
                                              (#{wrap 58540}#
                                                (let ((#{w2 58548}#
                                                        (vector-ref
                                                          #{x 58507}#
                                                          2)))
                                                  (let ((#{m1 58549}#
                                                          (car #{w 57205}#))
                                                        (#{s1 58550}#
                                                          (cdr #{w 57205}#)))
                                                    (if (null? #{m1 58549}#)
                                                      (if (null? #{s1 58550}#)
                                                        #{w2 58548}#
                                                        (cons (car #{w2 58548}#)
                                                              (let ((#{m2 58565}#
                                                                      (cdr #{w2 58548}#)))
                                                                (if (null? #{m2 58565}#)
                                                                  #{s1 58550}#
                                                                  (append
                                                                    #{s1 58550}#
                                                                    #{m2 58565}#)))))
                                                      (cons (let ((#{m2 58573}#
                                                                    (car #{w2 58548}#)))
                                                              (if (null? #{m2 58573}#)
                                                                #{m1 58549}#
                                                                (append
                                                                  #{m1 58549}#
                                                                  #{m2 58573}#)))
                                                            (let ((#{m2 58581}#
                                                                    (cdr #{w2 58548}#)))
                                                              (if (null? #{m2 58581}#)
                                                                #{s1 58550}#
                                                                (append
                                                                  #{s1 58550}#
                                                                  #{m2 58581}#))))))))
                                              (#{module 58541}#
                                                (vector-ref #{x 58507}# 3)))
                                          (vector
                                            'syntax-object
                                            #{expression 58539}#
                                            #{wrap 58540}#
                                            #{module 58541}#))
                                        (if (null? #{x 58507}#)
                                          #{x 58507}#
                                          (vector
                                            'syntax-object
                                            #{x 58507}#
                                            #{w 57205}#
                                            #{mod 57207}#)))))
                                  #{r* 58467}#
                                  #{w* 58468}#
                                  #{mod 57207}#)))
                            #{tmp 58490}#)
                          (syntax-violation
                            #f
                            "source expression failed to match any pattern"
                            #{body 58465}#))))))))))
         (let ((#{tmp 57215}#
                 ($sc-dispatch #{clauses 57209}# '())))
           (if #{tmp 57215}#
             (@apply
               (lambda () (values '() #f))
               #{tmp 57215}#)
             (let ((#{tmp 57219}#
                     ($sc-dispatch
                       #{clauses 57209}#
                       '((any any . each-any)
                         .
                         #(each (any any . each-any))))))
               (if #{tmp 57219}#
                 (@apply
                   (lambda (#{args 57223}#
                            #{e1 57224}#
                            #{e2 57225}#
                            #{args* 57226}#
                            #{e1* 57227}#
                            #{e2* 57228}#)
                     (call-with-values
                       (lambda ()
                         (#{get-formals 57208}# #{args 57223}#))
                       (lambda (#{req 57229}#
                                #{opt 57230}#
                                #{rest 57231}#
                                #{kw 57232}#)
                         (call-with-values
                           (lambda ()
                             (#{parse-req 57210}#
                               #{req 57229}#
                               #{opt 57230}#
                               #{rest 57231}#
                               #{kw 57232}#
                               (cons #{e1 57224}# #{e2 57225}#)))
                           (lambda (#{meta 57301}#
                                    #{req 57302}#
                                    #{opt 57303}#
                                    #{rest 57304}#
                                    #{kw 57305}#
                                    #{inits 57306}#
                                    #{vars 57307}#
                                    #{body 57308}#)
                             (call-with-values
                               (lambda ()
                                 (#{expand-lambda-case 28283}#
                                   #{e 57203}#
                                   #{r 57204}#
                                   #{w 57205}#
                                   #{s 57206}#
                                   #{mod 57207}#
                                   #{get-formals 57208}#
                                   (map (lambda (#{tmp 26711 57309}#
                                                 #{tmp 26710 57310}#
                                                 #{tmp 26709 57311}#)
                                          (cons #{tmp 26709 57311}#
                                                (cons #{tmp 26710 57310}#
                                                      #{tmp 26711 57309}#)))
                                        #{e2* 57228}#
                                        #{e1* 57227}#
                                        #{args* 57226}#)))
                               (lambda (#{meta* 57312}# #{else* 57313}#)
                                 (values
                                   (append #{meta 57301}# #{meta* 57312}#)
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 15)
                                     #{s 57206}#
                                     #{req 57302}#
                                     #{opt 57303}#
                                     #{rest 57304}#
                                     #{kw 57305}#
                                     #{inits 57306}#
                                     #{vars 57307}#
                                     #{body 57308}#
                                     #{else* 57313}#)))))))))
                   #{tmp 57219}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{clauses 57209}#))))))))
   (#{strip 28284}#
     (lambda (#{x 58608}# #{w 58609}#)
       (if (memq 'top (car #{w 58609}#))
         #{x 58608}#
         (letrec*
           ((#{f 58610}#
              (lambda (#{x 58613}#)
                (if (if (vector? #{x 58613}#)
                      (if (= (vector-length #{x 58613}#) 4)
                        (eq? (vector-ref #{x 58613}# 0) 'syntax-object)
                        #f)
                      #f)
                  (#{strip 28284}#
                    (vector-ref #{x 58613}# 1)
                    (vector-ref #{x 58613}# 2))
                  (if (pair? #{x 58613}#)
                    (let ((#{a 58632}# (#{f 58610}# (car #{x 58613}#)))
                          (#{d 58633}# (#{f 58610}# (cdr #{x 58613}#))))
                      (if (if (eq? #{a 58632}# (car #{x 58613}#))
                            (eq? #{d 58633}# (cdr #{x 58613}#))
                            #f)
                        #{x 58613}#
                        (cons #{a 58632}# #{d 58633}#)))
                    (if (vector? #{x 58613}#)
                      (let ((#{old 58636}# (vector->list #{x 58613}#)))
                        (let ((#{new 58637}# (map #{f 58610}# #{old 58636}#)))
                          (letrec*
                            ((#{lp 58638}#
                               (lambda (#{l1 58735}# #{l2 58736}#)
                                 (if (null? #{l1 58735}#)
                                   #{x 58613}#
                                   (if (eq? (car #{l1 58735}#)
                                            (car #{l2 58736}#))
                                     (#{lp 58638}#
                                       (cdr #{l1 58735}#)
                                       (cdr #{l2 58736}#))
                                     (list->vector #{new 58637}#))))))
                            (#{lp 58638}# #{old 58636}# #{new 58637}#))))
                      #{x 58613}#))))))
           (#{f 58610}# #{x 58608}#)))))
   (#{gen-var 28285}#
     (lambda (#{id 57357}#)
       (let ((#{id 57358}#
               (if (if (vector? #{id 57357}#)
                     (if (= (vector-length #{id 57357}#) 4)
                       (eq? (vector-ref #{id 57357}# 0) 'syntax-object)
                       #f)
                     #f)
                 (vector-ref #{id 57357}# 1)
                 #{id 57357}#)))
         (gensym
           (string-append (symbol->string #{id 57358}#) " ")))))
   (#{lambda-var-list 28286}#
     (lambda (#{vars 58737}#)
       (letrec*
         ((#{lvl 58738}#
            (lambda (#{vars 58741}# #{ls 58742}# #{w 58743}#)
              (if (pair? #{vars 58741}#)
                (#{lvl 58738}#
                  (cdr #{vars 58741}#)
                  (cons (let ((#{x 58747}# (car #{vars 58741}#)))
                          (if (if (null? (car #{w 58743}#))
                                (null? (cdr #{w 58743}#))
                                #f)
                            #{x 58747}#
                            (if (if (vector? #{x 58747}#)
                                  (if (= (vector-length #{x 58747}#) 4)
                                    (eq? (vector-ref #{x 58747}# 0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (let ((#{expression 58765}#
                                      (vector-ref #{x 58747}# 1))
                                    (#{wrap 58766}#
                                      (let ((#{w2 58774}#
                                              (vector-ref #{x 58747}# 2)))
                                        (let ((#{m1 58775}# (car #{w 58743}#))
                                              (#{s1 58776}# (cdr #{w 58743}#)))
                                          (if (null? #{m1 58775}#)
                                            (if (null? #{s1 58776}#)
                                              #{w2 58774}#
                                              (cons (car #{w2 58774}#)
                                                    (let ((#{m2 58791}#
                                                            (cdr #{w2 58774}#)))
                                                      (if (null? #{m2 58791}#)
                                                        #{s1 58776}#
                                                        (append
                                                          #{s1 58776}#
                                                          #{m2 58791}#)))))
                                            (cons (let ((#{m2 58799}#
                                                          (car #{w2 58774}#)))
                                                    (if (null? #{m2 58799}#)
                                                      #{m1 58775}#
                                                      (append
                                                        #{m1 58775}#
                                                        #{m2 58799}#)))
                                                  (let ((#{m2 58807}#
                                                          (cdr #{w2 58774}#)))
                                                    (if (null? #{m2 58807}#)
                                                      #{s1 58776}#
                                                      (append
                                                        #{s1 58776}#
                                                        #{m2 58807}#))))))))
                                    (#{module 58767}#
                                      (vector-ref #{x 58747}# 3)))
                                (vector
                                  'syntax-object
                                  #{expression 58765}#
                                  #{wrap 58766}#
                                  #{module 58767}#))
                              (if (null? #{x 58747}#)
                                #{x 58747}#
                                (vector
                                  'syntax-object
                                  #{x 58747}#
                                  #{w 58743}#
                                  #f)))))
                        #{ls 58742}#)
                  #{w 58743}#)
                (if (if (symbol? #{vars 58741}#)
                      #t
                      (if (if (vector? #{vars 58741}#)
                            (if (= (vector-length #{vars 58741}#) 4)
                              (eq? (vector-ref #{vars 58741}# 0)
                                   'syntax-object)
                              #f)
                            #f)
                        (symbol? (vector-ref #{vars 58741}# 1))
                        #f))
                  (cons (if (if (null? (car #{w 58743}#))
                              (null? (cdr #{w 58743}#))
                              #f)
                          #{vars 58741}#
                          (if (if (vector? #{vars 58741}#)
                                (if (= (vector-length #{vars 58741}#) 4)
                                  (eq? (vector-ref #{vars 58741}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (let ((#{expression 58877}#
                                    (vector-ref #{vars 58741}# 1))
                                  (#{wrap 58878}#
                                    (let ((#{w2 58888}#
                                            (vector-ref #{vars 58741}# 2)))
                                      (let ((#{m1 58889}# (car #{w 58743}#))
                                            (#{s1 58890}# (cdr #{w 58743}#)))
                                        (if (null? #{m1 58889}#)
                                          (if (null? #{s1 58890}#)
                                            #{w2 58888}#
                                            (cons (car #{w2 58888}#)
                                                  (let ((#{m2 58907}#
                                                          (cdr #{w2 58888}#)))
                                                    (if (null? #{m2 58907}#)
                                                      #{s1 58890}#
                                                      (append
                                                        #{s1 58890}#
                                                        #{m2 58907}#)))))
                                          (cons (let ((#{m2 58915}#
                                                        (car #{w2 58888}#)))
                                                  (if (null? #{m2 58915}#)
                                                    #{m1 58889}#
                                                    (append
                                                      #{m1 58889}#
                                                      #{m2 58915}#)))
                                                (let ((#{m2 58923}#
                                                        (cdr #{w2 58888}#)))
                                                  (if (null? #{m2 58923}#)
                                                    #{s1 58890}#
                                                    (append
                                                      #{s1 58890}#
                                                      #{m2 58923}#))))))))
                                  (#{module 58879}#
                                    (vector-ref #{vars 58741}# 3)))
                              (vector
                                'syntax-object
                                #{expression 58877}#
                                #{wrap 58878}#
                                #{module 58879}#))
                            (if (null? #{vars 58741}#)
                              #{vars 58741}#
                              (vector
                                'syntax-object
                                #{vars 58741}#
                                #{w 58743}#
                                #f))))
                        #{ls 58742}#)
                  (if (null? #{vars 58741}#)
                    #{ls 58742}#
                    (if (if (vector? #{vars 58741}#)
                          (if (= (vector-length #{vars 58741}#) 4)
                            (eq? (vector-ref #{vars 58741}# 0)
                                 'syntax-object)
                            #f)
                          #f)
                      (#{lvl 58738}#
                        (vector-ref #{vars 58741}# 1)
                        #{ls 58742}#
                        (let ((#{w2 58964}# (vector-ref #{vars 58741}# 2)))
                          (let ((#{m1 58965}# (car #{w 58743}#))
                                (#{s1 58966}# (cdr #{w 58743}#)))
                            (if (null? #{m1 58965}#)
                              (if (null? #{s1 58966}#)
                                #{w2 58964}#
                                (cons (car #{w2 58964}#)
                                      (let ((#{m2 58977}# (cdr #{w2 58964}#)))
                                        (if (null? #{m2 58977}#)
                                          #{s1 58966}#
                                          (append
                                            #{s1 58966}#
                                            #{m2 58977}#)))))
                              (cons (let ((#{m2 58985}# (car #{w2 58964}#)))
                                      (if (null? #{m2 58985}#)
                                        #{m1 58965}#
                                        (append #{m1 58965}# #{m2 58985}#)))
                                    (let ((#{m2 58993}# (cdr #{w2 58964}#)))
                                      (if (null? #{m2 58993}#)
                                        #{s1 58966}#
                                        (append
                                          #{s1 58966}#
                                          #{m2 58993}#))))))))
                      (cons #{vars 58741}# #{ls 58742}#))))))))
         (#{lvl 58738}# #{vars 58737}# '() '(()))))))
  (begin
    (module-define!
      (current-module)
      'letrec-syntax
      (make-syntax-transformer
        'letrec-syntax
        'local-syntax
        #t))
    (module-define!
      (current-module)
      'let-syntax
      (make-syntax-transformer
        'let-syntax
        'local-syntax
        #f))
    (#{global-extend 28236}#
      'core
      'syntax-parameterize
      (lambda (#{e 28413}#
               #{r 28414}#
               #{w 28415}#
               #{s 28416}#
               #{mod 28417}#)
        (let ((#{tmp 28419}#
                ($sc-dispatch
                  #{e 28413}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 28419}#
                (@apply
                  (lambda (#{var 28423}#
                           #{val 28424}#
                           #{e1 28425}#
                           #{e2 28426}#)
                    (#{valid-bound-ids? 28261}# #{var 28423}#))
                  #{tmp 28419}#)
                #f)
            (@apply
              (lambda (#{var 28511}#
                       #{val 28512}#
                       #{e1 28513}#
                       #{e2 28514}#)
                (let ((#{names 28515}#
                        (map (lambda (#{x 28855}#)
                               (call-with-values
                                 (lambda ()
                                   (#{resolve-identifier 28258}#
                                     #{x 28855}#
                                     #{w 28415}#
                                     #{r 28414}#
                                     #{mod 28417}#
                                     #f))
                                 (lambda (#{type 28858}#
                                          #{value 28859}#
                                          #{mod 28860}#)
                                   (if (eqv? #{type 28858}# 'displaced-lexical)
                                     (syntax-violation
                                       'syntax-parameterize
                                       "identifier out of context"
                                       #{e 28413}#
                                       (let ((#{x 28873}#
                                               (begin
                                                 (if (if (pair? #{x 28855}#)
                                                       #{s 28416}#
                                                       #f)
                                                   (set-source-properties!
                                                     #{x 28855}#
                                                     #{s 28416}#))
                                                 #{x 28855}#)))
                                         (if (if (null? (car #{w 28415}#))
                                               (null? (cdr #{w 28415}#))
                                               #f)
                                           #{x 28873}#
                                           (if (if (vector? #{x 28873}#)
                                                 (if (= (vector-length
                                                          #{x 28873}#)
                                                        4)
                                                   (eq? (vector-ref
                                                          #{x 28873}#
                                                          0)
                                                        'syntax-object)
                                                   #f)
                                                 #f)
                                             (let ((#{expression 28905}#
                                                     (vector-ref
                                                       #{x 28873}#
                                                       1))
                                                   (#{wrap 28906}#
                                                     (let ((#{w2 28914}#
                                                             (vector-ref
                                                               #{x 28873}#
                                                               2)))
                                                       (let ((#{m1 28915}#
                                                               (car #{w 28415}#))
                                                             (#{s1 28916}#
                                                               (cdr #{w 28415}#)))
                                                         (if (null? #{m1 28915}#)
                                                           (if (null? #{s1 28916}#)
                                                             #{w2 28914}#
                                                             (cons (car #{w2 28914}#)
                                                                   (let ((#{m2 28931}#
                                                                           (cdr #{w2 28914}#)))
                                                                     (if (null? #{m2 28931}#)
                                                                       #{s1 28916}#
                                                                       (append
                                                                         #{s1 28916}#
                                                                         #{m2 28931}#)))))
                                                           (cons (let ((#{m2 28939}#
                                                                         (car #{w2 28914}#)))
                                                                   (if (null? #{m2 28939}#)
                                                                     #{m1 28915}#
                                                                     (append
                                                                       #{m1 28915}#
                                                                       #{m2 28939}#)))
                                                                 (let ((#{m2 28947}#
                                                                         (cdr #{w2 28914}#)))
                                                                   (if (null? #{m2 28947}#)
                                                                     #{s1 28916}#
                                                                     (append
                                                                       #{s1 28916}#
                                                                       #{m2 28947}#))))))))
                                                   (#{module 28907}#
                                                     (vector-ref
                                                       #{x 28873}#
                                                       3)))
                                               (vector
                                                 'syntax-object
                                                 #{expression 28905}#
                                                 #{wrap 28906}#
                                                 #{module 28907}#))
                                             (if (null? #{x 28873}#)
                                               #{x 28873}#
                                               (vector
                                                 'syntax-object
                                                 #{x 28873}#
                                                 #{w 28415}#
                                                 #{mod 28860}#))))))
                                     (if (eqv? #{type 28858}#
                                               'syntax-parameter)
                                       #{value 28859}#
                                       (syntax-violation
                                         'syntax-parameterize
                                         "invalid syntax parameter"
                                         #{e 28413}#
                                         (let ((#{x 28974}#
                                                 (begin
                                                   (if (if (pair? #{x 28855}#)
                                                         #{s 28416}#
                                                         #f)
                                                     (set-source-properties!
                                                       #{x 28855}#
                                                       #{s 28416}#))
                                                   #{x 28855}#)))
                                           (if (if (null? (car #{w 28415}#))
                                                 (null? (cdr #{w 28415}#))
                                                 #f)
                                             #{x 28974}#
                                             (if (if (vector? #{x 28974}#)
                                                   (if (= (vector-length
                                                            #{x 28974}#)
                                                          4)
                                                     (eq? (vector-ref
                                                            #{x 28974}#
                                                            0)
                                                          'syntax-object)
                                                     #f)
                                                   #f)
                                               (let ((#{expression 29006}#
                                                       (vector-ref
                                                         #{x 28974}#
                                                         1))
                                                     (#{wrap 29007}#
                                                       (let ((#{w2 29015}#
                                                               (vector-ref
                                                                 #{x 28974}#
                                                                 2)))
                                                         (let ((#{m1 29016}#
                                                                 (car #{w 28415}#))
                                                               (#{s1 29017}#
                                                                 (cdr #{w 28415}#)))
                                                           (if (null? #{m1 29016}#)
                                                             (if (null? #{s1 29017}#)
                                                               #{w2 29015}#
                                                               (cons (car #{w2 29015}#)
                                                                     (let ((#{m2 29032}#
                                                                             (cdr #{w2 29015}#)))
                                                                       (if (null? #{m2 29032}#)
                                                                         #{s1 29017}#
                                                                         (append
                                                                           #{s1 29017}#
                                                                           #{m2 29032}#)))))
                                                             (cons (let ((#{m2 29040}#
                                                                           (car #{w2 29015}#)))
                                                                     (if (null? #{m2 29040}#)
                                                                       #{m1 29016}#
                                                                       (append
                                                                         #{m1 29016}#
                                                                         #{m2 29040}#)))
                                                                   (let ((#{m2 29048}#
                                                                           (cdr #{w2 29015}#)))
                                                                     (if (null? #{m2 29048}#)
                                                                       #{s1 29017}#
                                                                       (append
                                                                         #{s1 29017}#
                                                                         #{m2 29048}#))))))))
                                                     (#{module 29008}#
                                                       (vector-ref
                                                         #{x 28974}#
                                                         3)))
                                                 (vector
                                                   'syntax-object
                                                   #{expression 29006}#
                                                   #{wrap 29007}#
                                                   #{module 29008}#))
                                               (if (null? #{x 28974}#)
                                                 #{x 28974}#
                                                 (vector
                                                   'syntax-object
                                                   #{x 28974}#
                                                   #{w 28415}#
                                                   #{mod 28860}#)))))))))))
                             #{var 28511}#))
                      (#{bindings 28516}#
                        (let ((#{trans-r 29063}#
                                (#{macros-only-env 28235}# #{r 28414}#)))
                          (map (lambda (#{x 29064}#)
                                 (cons 'macro
                                       (#{eval-local-transformer 28277}#
                                         (#{expand 28271}#
                                           #{x 29064}#
                                           #{trans-r 29063}#
                                           #{w 28415}#
                                           #{mod 28417}#)
                                         #{mod 28417}#)))
                               #{val 28512}#))))
                  (#{expand-body 28275}#
                    (cons #{e1 28513}# #{e2 28514}#)
                    (let ((#{x 28528}#
                            (begin
                              (if (if (pair? #{e 28413}#) #{s 28416}# #f)
                                (set-source-properties!
                                  #{e 28413}#
                                  #{s 28416}#))
                              #{e 28413}#)))
                      (if (if (null? (car #{w 28415}#))
                            (null? (cdr #{w 28415}#))
                            #f)
                        #{x 28528}#
                        (if (if (vector? #{x 28528}#)
                              (if (= (vector-length #{x 28528}#) 4)
                                (eq? (vector-ref #{x 28528}# 0) 'syntax-object)
                                #f)
                              #f)
                          (let ((#{expression 28560}#
                                  (vector-ref #{x 28528}# 1))
                                (#{wrap 28561}#
                                  (let ((#{w2 28569}#
                                          (vector-ref #{x 28528}# 2)))
                                    (let ((#{m1 28570}# (car #{w 28415}#))
                                          (#{s1 28571}# (cdr #{w 28415}#)))
                                      (if (null? #{m1 28570}#)
                                        (if (null? #{s1 28571}#)
                                          #{w2 28569}#
                                          (cons (car #{w2 28569}#)
                                                (let ((#{m2 28586}#
                                                        (cdr #{w2 28569}#)))
                                                  (if (null? #{m2 28586}#)
                                                    #{s1 28571}#
                                                    (append
                                                      #{s1 28571}#
                                                      #{m2 28586}#)))))
                                        (cons (let ((#{m2 28594}#
                                                      (car #{w2 28569}#)))
                                                (if (null? #{m2 28594}#)
                                                  #{m1 28570}#
                                                  (append
                                                    #{m1 28570}#
                                                    #{m2 28594}#)))
                                              (let ((#{m2 28602}#
                                                      (cdr #{w2 28569}#)))
                                                (if (null? #{m2 28602}#)
                                                  #{s1 28571}#
                                                  (append
                                                    #{s1 28571}#
                                                    #{m2 28602}#))))))))
                                (#{module 28562}# (vector-ref #{x 28528}# 3)))
                            (vector
                              'syntax-object
                              #{expression 28560}#
                              #{wrap 28561}#
                              #{module 28562}#))
                          (if (null? #{x 28528}#)
                            #{x 28528}#
                            (vector
                              'syntax-object
                              #{x 28528}#
                              #{w 28415}#
                              #{mod 28417}#)))))
                    (#{extend-env 28233}#
                      #{names 28515}#
                      #{bindings 28516}#
                      #{r 28414}#)
                    #{w 28415}#
                    #{mod 28417}#)))
              #{tmp 28419}#)
            (syntax-violation
              'syntax-parameterize
              "bad syntax"
              (let ((#{x 29284}#
                      (begin
                        (if (if (pair? #{e 28413}#) #{s 28416}# #f)
                          (set-source-properties! #{e 28413}# #{s 28416}#))
                        #{e 28413}#)))
                (if (if (null? (car #{w 28415}#))
                      (null? (cdr #{w 28415}#))
                      #f)
                  #{x 29284}#
                  (if (if (vector? #{x 29284}#)
                        (if (= (vector-length #{x 29284}#) 4)
                          (eq? (vector-ref #{x 29284}# 0) 'syntax-object)
                          #f)
                        #f)
                    (let ((#{expression 29316}# (vector-ref #{x 29284}# 1))
                          (#{wrap 29317}#
                            (let ((#{w2 29325}# (vector-ref #{x 29284}# 2)))
                              (let ((#{m1 29326}# (car #{w 28415}#))
                                    (#{s1 29327}# (cdr #{w 28415}#)))
                                (if (null? #{m1 29326}#)
                                  (if (null? #{s1 29327}#)
                                    #{w2 29325}#
                                    (cons (car #{w2 29325}#)
                                          (let ((#{m2 29342}#
                                                  (cdr #{w2 29325}#)))
                                            (if (null? #{m2 29342}#)
                                              #{s1 29327}#
                                              (append
                                                #{s1 29327}#
                                                #{m2 29342}#)))))
                                  (cons (let ((#{m2 29350}#
                                                (car #{w2 29325}#)))
                                          (if (null? #{m2 29350}#)
                                            #{m1 29326}#
                                            (append
                                              #{m1 29326}#
                                              #{m2 29350}#)))
                                        (let ((#{m2 29358}#
                                                (cdr #{w2 29325}#)))
                                          (if (null? #{m2 29358}#)
                                            #{s1 29327}#
                                            (append
                                              #{s1 29327}#
                                              #{m2 29358}#))))))))
                          (#{module 29318}# (vector-ref #{x 29284}# 3)))
                      (vector
                        'syntax-object
                        #{expression 29316}#
                        #{wrap 29317}#
                        #{module 29318}#))
                    (if (null? #{x 29284}#)
                      #{x 29284}#
                      (vector
                        'syntax-object
                        #{x 29284}#
                        #{w 28415}#
                        #{mod 28417}#))))))))))
    (module-define!
      (current-module)
      'quote
      (make-syntax-transformer
        'quote
        'core
        (lambda (#{e 29386}#
                 #{r 29387}#
                 #{w 29388}#
                 #{s 29389}#
                 #{mod 29390}#)
          (let ((#{tmp 29392}#
                  ($sc-dispatch #{e 29386}# '(_ any))))
            (if #{tmp 29392}#
              (@apply
                (lambda (#{e 29395}#)
                  (let ((#{exp 29399}#
                          (#{strip 28284}# #{e 29395}# #{w 29388}#)))
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 1)
                      #{s 29389}#
                      #{exp 29399}#)))
                #{tmp 29392}#)
              (syntax-violation
                'quote
                "bad syntax"
                (let ((#{x 29413}#
                        (begin
                          (if (if (pair? #{e 29386}#) #{s 29389}# #f)
                            (set-source-properties! #{e 29386}# #{s 29389}#))
                          #{e 29386}#)))
                  (if (if (null? (car #{w 29388}#))
                        (null? (cdr #{w 29388}#))
                        #f)
                    #{x 29413}#
                    (if (if (vector? #{x 29413}#)
                          (if (= (vector-length #{x 29413}#) 4)
                            (eq? (vector-ref #{x 29413}# 0) 'syntax-object)
                            #f)
                          #f)
                      (let ((#{expression 29445}# (vector-ref #{x 29413}# 1))
                            (#{wrap 29446}#
                              (let ((#{w2 29454}# (vector-ref #{x 29413}# 2)))
                                (let ((#{m1 29455}# (car #{w 29388}#))
                                      (#{s1 29456}# (cdr #{w 29388}#)))
                                  (if (null? #{m1 29455}#)
                                    (if (null? #{s1 29456}#)
                                      #{w2 29454}#
                                      (cons (car #{w2 29454}#)
                                            (let ((#{m2 29471}#
                                                    (cdr #{w2 29454}#)))
                                              (if (null? #{m2 29471}#)
                                                #{s1 29456}#
                                                (append
                                                  #{s1 29456}#
                                                  #{m2 29471}#)))))
                                    (cons (let ((#{m2 29479}#
                                                  (car #{w2 29454}#)))
                                            (if (null? #{m2 29479}#)
                                              #{m1 29455}#
                                              (append
                                                #{m1 29455}#
                                                #{m2 29479}#)))
                                          (let ((#{m2 29487}#
                                                  (cdr #{w2 29454}#)))
                                            (if (null? #{m2 29487}#)
                                              #{s1 29456}#
                                              (append
                                                #{s1 29456}#
                                                #{m2 29487}#))))))))
                            (#{module 29447}# (vector-ref #{x 29413}# 3)))
                        (vector
                          'syntax-object
                          #{expression 29445}#
                          #{wrap 29446}#
                          #{module 29447}#))
                      (if (null? #{x 29413}#)
                        #{x 29413}#
                        (vector
                          'syntax-object
                          #{x 29413}#
                          #{w 29388}#
                          #{mod 29390}#)))))))))))
    (#{global-extend 28236}#
      'core
      'syntax
      (letrec*
        ((#{gen-syntax 29705}#
           (lambda (#{src 30136}#
                    #{e 30137}#
                    #{r 30138}#
                    #{maps 30139}#
                    #{ellipsis? 30140}#
                    #{mod 30141}#)
             (if (if (symbol? #{e 30137}#)
                   #t
                   (if (if (vector? #{e 30137}#)
                         (if (= (vector-length #{e 30137}#) 4)
                           (eq? (vector-ref #{e 30137}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{e 30137}# 1))
                     #f))
               (call-with-values
                 (lambda ()
                   (#{resolve-identifier 28258}#
                     #{e 30137}#
                     '(())
                     #{r 30138}#
                     #{mod 30141}#
                     #f))
                 (lambda (#{type 30170}# #{value 30171}# #{mod 30172}#)
                   (if (eqv? #{type 30170}# 'syntax)
                     (call-with-values
                       (lambda ()
                         (#{gen-ref 29706}#
                           #{src 30136}#
                           (car #{value 30171}#)
                           (cdr #{value 30171}#)
                           #{maps 30139}#))
                       (lambda (#{var 30178}# #{maps 30179}#)
                         (values (list 'ref #{var 30178}#) #{maps 30179}#)))
                     (if (#{ellipsis? 30140}# #{e 30137}#)
                       (syntax-violation
                         'syntax
                         "misplaced ellipsis"
                         #{src 30136}#)
                       (values (list 'quote #{e 30137}#) #{maps 30139}#)))))
               (let ((#{tmp 30181}#
                       ($sc-dispatch #{e 30137}# '(any any))))
                 (if (if #{tmp 30181}#
                       (@apply
                         (lambda (#{dots 30185}# #{e 30186}#)
                           (#{ellipsis? 30140}# #{dots 30185}#))
                         #{tmp 30181}#)
                       #f)
                   (@apply
                     (lambda (#{dots 30187}# #{e 30188}#)
                       (#{gen-syntax 29705}#
                         #{src 30136}#
                         #{e 30188}#
                         #{r 30138}#
                         #{maps 30139}#
                         (lambda (#{x 30189}#) #f)
                         #{mod 30141}#))
                     #{tmp 30181}#)
                   (let ((#{tmp 30190}#
                           ($sc-dispatch #{e 30137}# '(any any . any))))
                     (if (if #{tmp 30190}#
                           (@apply
                             (lambda (#{x 30194}# #{dots 30195}# #{y 30196}#)
                               (#{ellipsis? 30140}# #{dots 30195}#))
                             #{tmp 30190}#)
                           #f)
                       (@apply
                         (lambda (#{x 30197}# #{dots 30198}# #{y 30199}#)
                           (letrec*
                             ((#{f 30200}#
                                (lambda (#{y 30208}# #{k 30209}#)
                                  (let ((#{tmp 30211}#
                                          ($sc-dispatch
                                            #{y 30208}#
                                            '(any . any))))
                                    (if (if #{tmp 30211}#
                                          (@apply
                                            (lambda (#{dots 30215}#
                                                     #{y 30216}#)
                                              (#{ellipsis? 30140}#
                                                #{dots 30215}#))
                                            #{tmp 30211}#)
                                          #f)
                                      (@apply
                                        (lambda (#{dots 30217}# #{y 30218}#)
                                          (#{f 30200}#
                                            #{y 30218}#
                                            (lambda (#{maps 30219}#)
                                              (call-with-values
                                                (lambda ()
                                                  (#{k 30209}#
                                                    (cons '() #{maps 30219}#)))
                                                (lambda (#{x 30220}#
                                                         #{maps 30221}#)
                                                  (if (null? (car #{maps 30221}#))
                                                    (syntax-violation
                                                      'syntax
                                                      "extra ellipsis"
                                                      #{src 30136}#)
                                                    (values
                                                      (let ((#{map-env 30225}#
                                                              (car #{maps 30221}#)))
                                                        (list 'apply
                                                              '(primitive
                                                                 append)
                                                              (#{gen-map 29708}#
                                                                #{x 30220}#
                                                                #{map-env 30225}#)))
                                                      (cdr #{maps 30221}#))))))))
                                        #{tmp 30211}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{gen-syntax 29705}#
                                            #{src 30136}#
                                            #{y 30208}#
                                            #{r 30138}#
                                            #{maps 30139}#
                                            #{ellipsis? 30140}#
                                            #{mod 30141}#))
                                        (lambda (#{y 30228}# #{maps 30229}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{k 30209}# #{maps 30229}#))
                                            (lambda (#{x 30230}#
                                                     #{maps 30231}#)
                                              (values
                                                (if (equal? #{y 30228}# ''())
                                                  #{x 30230}#
                                                  (list 'append
                                                        #{x 30230}#
                                                        #{y 30228}#))
                                                #{maps 30231}#))))))))))
                             (#{f 30200}#
                               #{y 30199}#
                               (lambda (#{maps 30203}#)
                                 (call-with-values
                                   (lambda ()
                                     (#{gen-syntax 29705}#
                                       #{src 30136}#
                                       #{x 30197}#
                                       #{r 30138}#
                                       (cons '() #{maps 30203}#)
                                       #{ellipsis? 30140}#
                                       #{mod 30141}#))
                                   (lambda (#{x 30204}# #{maps 30205}#)
                                     (if (null? (car #{maps 30205}#))
                                       (syntax-violation
                                         'syntax
                                         "extra ellipsis"
                                         #{src 30136}#)
                                       (values
                                         (#{gen-map 29708}#
                                           #{x 30204}#
                                           (car #{maps 30205}#))
                                         (cdr #{maps 30205}#)))))))))
                         #{tmp 30190}#)
                       (let ((#{tmp 30247}#
                               ($sc-dispatch #{e 30137}# '(any . any))))
                         (if #{tmp 30247}#
                           (@apply
                             (lambda (#{x 30251}# #{y 30252}#)
                               (call-with-values
                                 (lambda ()
                                   (#{gen-syntax 29705}#
                                     #{src 30136}#
                                     #{x 30251}#
                                     #{r 30138}#
                                     #{maps 30139}#
                                     #{ellipsis? 30140}#
                                     #{mod 30141}#))
                                 (lambda (#{x 30253}# #{maps 30254}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{gen-syntax 29705}#
                                         #{src 30136}#
                                         #{y 30252}#
                                         #{r 30138}#
                                         #{maps 30254}#
                                         #{ellipsis? 30140}#
                                         #{mod 30141}#))
                                     (lambda (#{y 30255}# #{maps 30256}#)
                                       (values
                                         (let ((#{atom-key 30261}#
                                                 (car #{y 30255}#)))
                                           (if (eqv? #{atom-key 30261}# 'quote)
                                             (if (eq? (car #{x 30253}#) 'quote)
                                               (list 'quote
                                                     (cons (car (cdr #{x 30253}#))
                                                           (car (cdr #{y 30255}#))))
                                               (if (eq? (car (cdr #{y 30255}#))
                                                        '())
                                                 (list 'list #{x 30253}#)
                                                 (list 'cons
                                                       #{x 30253}#
                                                       #{y 30255}#)))
                                             (if (eqv? #{atom-key 30261}#
                                                       'list)
                                               (cons 'list
                                                     (cons #{x 30253}#
                                                           (cdr #{y 30255}#)))
                                               (list 'cons
                                                     #{x 30253}#
                                                     #{y 30255}#))))
                                         #{maps 30256}#))))))
                             #{tmp 30247}#)
                           (let ((#{tmp 30290}#
                                   ($sc-dispatch
                                     #{e 30137}#
                                     '#(vector (any . each-any)))))
                             (if #{tmp 30290}#
                               (@apply
                                 (lambda (#{e1 30294}# #{e2 30295}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{gen-syntax 29705}#
                                         #{src 30136}#
                                         (cons #{e1 30294}# #{e2 30295}#)
                                         #{r 30138}#
                                         #{maps 30139}#
                                         #{ellipsis? 30140}#
                                         #{mod 30141}#))
                                     (lambda (#{e 30296}# #{maps 30297}#)
                                       (values
                                         (if (eq? (car #{e 30296}#) 'list)
                                           (cons 'vector (cdr #{e 30296}#))
                                           (if (eq? (car #{e 30296}#) 'quote)
                                             (list 'quote
                                                   (list->vector
                                                     (car (cdr #{e 30296}#))))
                                             (list 'list->vector #{e 30296}#)))
                                         #{maps 30297}#))))
                                 #{tmp 30290}#)
                               (values
                                 (list 'quote #{e 30137}#)
                                 #{maps 30139}#))))))))))))
         (#{gen-ref 29706}#
           (lambda (#{src 30324}#
                    #{var 30325}#
                    #{level 30326}#
                    #{maps 30327}#)
             (if (= #{level 30326}# 0)
               (values #{var 30325}# #{maps 30327}#)
               (if (null? #{maps 30327}#)
                 (syntax-violation
                   'syntax
                   "missing ellipsis"
                   #{src 30324}#)
                 (call-with-values
                   (lambda ()
                     (#{gen-ref 29706}#
                       #{src 30324}#
                       #{var 30325}#
                       (#{1-}# #{level 30326}#)
                       (cdr #{maps 30327}#)))
                   (lambda (#{outer-var 30328}# #{outer-maps 30329}#)
                     (let ((#{b 30330}#
                             (assq #{outer-var 30328}# (car #{maps 30327}#))))
                       (if #{b 30330}#
                         (values (cdr #{b 30330}#) #{maps 30327}#)
                         (let ((#{inner-var 30332}#
                                 (gensym
                                   (string-append (symbol->string 'tmp) " "))))
                           (values
                             #{inner-var 30332}#
                             (cons (cons (cons #{outer-var 30328}#
                                               #{inner-var 30332}#)
                                         (car #{maps 30327}#))
                                   #{outer-maps 30329}#)))))))))))
         (#{gen-map 29708}#
           (lambda (#{e 30346}# #{map-env 30347}#)
             (let ((#{formals 30348}# (map cdr #{map-env 30347}#))
                   (#{actuals 30349}#
                     (map (lambda (#{x 30351}#)
                            (list 'ref (car #{x 30351}#)))
                          #{map-env 30347}#)))
               (if (eq? (car #{e 30346}#) 'ref)
                 (car #{actuals 30349}#)
                 (if (and-map
                       (lambda (#{x 30352}#)
                         (if (eq? (car #{x 30352}#) 'ref)
                           (memq (car (cdr #{x 30352}#)) #{formals 30348}#)
                           #f))
                       (cdr #{e 30346}#))
                   (cons 'map
                         (cons (list 'primitive (car #{e 30346}#))
                               (map (let ((#{r 30354}#
                                            (map cons
                                                 #{formals 30348}#
                                                 #{actuals 30349}#)))
                                      (lambda (#{x 30355}#)
                                        (cdr (assq (car (cdr #{x 30355}#))
                                                   #{r 30354}#))))
                                    (cdr #{e 30346}#))))
                   (cons 'map
                         (cons (list 'lambda #{formals 30348}# #{e 30346}#)
                               #{actuals 30349}#)))))))
         (#{regen 29712}#
           (lambda (#{x 30357}#)
             (let ((#{atom-key 30358}# (car #{x 30357}#)))
               (if (eqv? #{atom-key 30358}# 'ref)
                 (let ((#{name 30368}# (car (cdr #{x 30357}#)))
                       (#{var 30369}# (car (cdr #{x 30357}#))))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 3)
                     #f
                     #{name 30368}#
                     #{var 30369}#))
                 (if (eqv? #{atom-key 30358}# 'primitive)
                   (let ((#{name 30380}# (car (cdr #{x 30357}#))))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 2)
                       #f
                       #{name 30380}#))
                   (if (eqv? #{atom-key 30358}# 'quote)
                     (let ((#{exp 30391}# (car (cdr #{x 30357}#))))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 1)
                         #f
                         #{exp 30391}#))
                     (if (eqv? #{atom-key 30358}# 'lambda)
                       (if (list? (car (cdr #{x 30357}#)))
                         (let ((#{req 30402}# (car (cdr #{x 30357}#)))
                               (#{vars 30404}# (car (cdr #{x 30357}#)))
                               (#{exp 30406}#
                                 (#{regen 29712}#
                                   (car (cdr (cdr #{x 30357}#))))))
                           (let ((#{body 30411}#
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 15)
                                     #f
                                     #{req 30402}#
                                     #f
                                     #f
                                     #f
                                     '()
                                     #{vars 30404}#
                                     #{exp 30406}#
                                     #f)))
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 14)
                               #f
                               '()
                               #{body 30411}#)))
                         (error "how did we get here" #{x 30357}#))
                       (let ((#{name 30427}# (car #{x 30357}#))
                             (#{args 30428}#
                               (map #{regen 29712}# (cdr #{x 30357}#))))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 12)
                           #f
                           #{name 30427}#
                           #{args 30428}#))))))))))
        (lambda (#{e 29713}#
                 #{r 29714}#
                 #{w 29715}#
                 #{s 29716}#
                 #{mod 29717}#)
          (let ((#{e 29718}#
                  (let ((#{x 30047}#
                          (begin
                            (if (if (pair? #{e 29713}#) #{s 29716}# #f)
                              (set-source-properties! #{e 29713}# #{s 29716}#))
                            #{e 29713}#)))
                    (if (if (null? (car #{w 29715}#))
                          (null? (cdr #{w 29715}#))
                          #f)
                      #{x 30047}#
                      (if (if (vector? #{x 30047}#)
                            (if (= (vector-length #{x 30047}#) 4)
                              (eq? (vector-ref #{x 30047}# 0) 'syntax-object)
                              #f)
                            #f)
                        (let ((#{expression 30079}# (vector-ref #{x 30047}# 1))
                              (#{wrap 30080}#
                                (let ((#{w2 30088}#
                                        (vector-ref #{x 30047}# 2)))
                                  (let ((#{m1 30089}# (car #{w 29715}#))
                                        (#{s1 30090}# (cdr #{w 29715}#)))
                                    (if (null? #{m1 30089}#)
                                      (if (null? #{s1 30090}#)
                                        #{w2 30088}#
                                        (cons (car #{w2 30088}#)
                                              (let ((#{m2 30105}#
                                                      (cdr #{w2 30088}#)))
                                                (if (null? #{m2 30105}#)
                                                  #{s1 30090}#
                                                  (append
                                                    #{s1 30090}#
                                                    #{m2 30105}#)))))
                                      (cons (let ((#{m2 30113}#
                                                    (car #{w2 30088}#)))
                                              (if (null? #{m2 30113}#)
                                                #{m1 30089}#
                                                (append
                                                  #{m1 30089}#
                                                  #{m2 30113}#)))
                                            (let ((#{m2 30121}#
                                                    (cdr #{w2 30088}#)))
                                              (if (null? #{m2 30121}#)
                                                #{s1 30090}#
                                                (append
                                                  #{s1 30090}#
                                                  #{m2 30121}#))))))))
                              (#{module 30081}# (vector-ref #{x 30047}# 3)))
                          (vector
                            'syntax-object
                            #{expression 30079}#
                            #{wrap 30080}#
                            #{module 30081}#))
                        (if (null? #{x 30047}#)
                          #{x 30047}#
                          (vector
                            'syntax-object
                            #{x 30047}#
                            #{w 29715}#
                            #{mod 29717}#)))))))
            (let ((#{tmp 29719}# #{e 29718}#))
              (let ((#{tmp 29720}#
                      ($sc-dispatch #{tmp 29719}# '(_ any))))
                (if #{tmp 29720}#
                  (@apply
                    (lambda (#{x 29768}#)
                      (call-with-values
                        (lambda ()
                          (#{gen-syntax 29705}#
                            #{e 29718}#
                            #{x 29768}#
                            #{r 29714}#
                            '()
                            #{ellipsis? 28279}#
                            #{mod 29717}#))
                        (lambda (#{e 29845}# #{maps 29846}#)
                          (#{regen 29712}# #{e 29845}#))))
                    #{tmp 29720}#)
                  (syntax-violation
                    'syntax
                    "bad `syntax' form"
                    #{e 29718}#))))))))
    (#{global-extend 28236}#
      'core
      'lambda
      (lambda (#{e 30659}#
               #{r 30660}#
               #{w 30661}#
               #{s 30662}#
               #{mod 30663}#)
        (let ((#{tmp 30665}#
                ($sc-dispatch
                  #{e 30659}#
                  '(_ any any . each-any))))
          (if #{tmp 30665}#
            (@apply
              (lambda (#{args 30669}# #{e1 30670}# #{e2 30671}#)
                (call-with-values
                  (lambda ()
                    (#{lambda-formals 28280}# #{args 30669}#))
                  (lambda (#{req 30674}#
                           #{opt 30675}#
                           #{rest 30676}#
                           #{kw 30677}#)
                    (letrec*
                      ((#{lp 30678}#
                         (lambda (#{body 30681}# #{meta 30682}#)
                           (let ((#{tmp 30684}#
                                   ($sc-dispatch
                                     #{body 30681}#
                                     '(any any . each-any))))
                             (if (if #{tmp 30684}#
                                   (@apply
                                     (lambda (#{docstring 30688}#
                                              #{e1 30689}#
                                              #{e2 30690}#)
                                       (string?
                                         (syntax->datum #{docstring 30688}#)))
                                     #{tmp 30684}#)
                                   #f)
                               (@apply
                                 (lambda (#{docstring 30691}#
                                          #{e1 30692}#
                                          #{e2 30693}#)
                                   (#{lp 30678}#
                                     (cons #{e1 30692}# #{e2 30693}#)
                                     (append
                                       #{meta 30682}#
                                       (list (cons 'documentation
                                                   (syntax->datum
                                                     #{docstring 30691}#))))))
                                 #{tmp 30684}#)
                               (let ((#{tmp 30694}#
                                       ($sc-dispatch
                                         #{body 30681}#
                                         '(#(vector #(each (any . any)))
                                           any
                                           .
                                           each-any))))
                                 (if #{tmp 30694}#
                                   (@apply
                                     (lambda (#{k 30698}#
                                              #{v 30699}#
                                              #{e1 30700}#
                                              #{e2 30701}#)
                                       (#{lp 30678}#
                                         (cons #{e1 30700}# #{e2 30701}#)
                                         (append
                                           #{meta 30682}#
                                           (syntax->datum
                                             (map cons
                                                  #{k 30698}#
                                                  #{v 30699}#)))))
                                     #{tmp 30694}#)
                                   (#{expand-simple-lambda 28281}#
                                     #{e 30659}#
                                     #{r 30660}#
                                     #{w 30661}#
                                     #{s 30662}#
                                     #{mod 30663}#
                                     #{req 30674}#
                                     #{rest 30676}#
                                     #{meta 30682}#
                                     #{body 30681}#))))))))
                      (#{lp 30678}#
                        (cons #{e1 30670}# #{e2 30671}#)
                        '())))))
              #{tmp 30665}#)
            (syntax-violation
              'lambda
              "bad lambda"
              #{e 30659}#)))))
    (#{global-extend 28236}#
      'core
      'lambda*
      (lambda (#{e 31081}#
               #{r 31082}#
               #{w 31083}#
               #{s 31084}#
               #{mod 31085}#)
        (let ((#{tmp 31087}#
                ($sc-dispatch
                  #{e 31081}#
                  '(_ any any . each-any))))
          (if #{tmp 31087}#
            (@apply
              (lambda (#{args 31091}# #{e1 31092}# #{e2 31093}#)
                (call-with-values
                  (lambda ()
                    (#{expand-lambda-case 28283}#
                      #{e 31081}#
                      #{r 31082}#
                      #{w 31083}#
                      #{s 31084}#
                      #{mod 31085}#
                      #{lambda*-formals 28282}#
                      (list (cons #{args 31091}#
                                  (cons #{e1 31092}# #{e2 31093}#)))))
                  (lambda (#{meta 31096}# #{lcase 31097}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 14)
                      #{s 31084}#
                      #{meta 31096}#
                      #{lcase 31097}#))))
              #{tmp 31087}#)
            (syntax-violation
              'lambda
              "bad lambda*"
              #{e 31081}#)))))
    (#{global-extend 28236}#
      'core
      'case-lambda
      (lambda (#{e 31260}#
               #{r 31261}#
               #{w 31262}#
               #{s 31263}#
               #{mod 31264}#)
        (let ((#{tmp 31266}#
                ($sc-dispatch
                  #{e 31260}#
                  '(_ (any any . each-any)
                      .
                      #(each (any any . each-any))))))
          (if #{tmp 31266}#
            (@apply
              (lambda (#{args 31270}#
                       #{e1 31271}#
                       #{e2 31272}#
                       #{args* 31273}#
                       #{e1* 31274}#
                       #{e2* 31275}#)
                (call-with-values
                  (lambda ()
                    (#{expand-lambda-case 28283}#
                      #{e 31260}#
                      #{r 31261}#
                      #{w 31262}#
                      #{s 31263}#
                      #{mod 31264}#
                      #{lambda-formals 28280}#
                      (cons (cons #{args 31270}#
                                  (cons #{e1 31271}# #{e2 31272}#))
                            (map (lambda (#{tmp 27210 31278}#
                                          #{tmp 27209 31279}#
                                          #{tmp 27208 31280}#)
                                   (cons #{tmp 27208 31280}#
                                         (cons #{tmp 27209 31279}#
                                               #{tmp 27210 31278}#)))
                                 #{e2* 31275}#
                                 #{e1* 31274}#
                                 #{args* 31273}#))))
                  (lambda (#{meta 31281}# #{lcase 31282}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 14)
                      #{s 31263}#
                      #{meta 31281}#
                      #{lcase 31282}#))))
              #{tmp 31266}#)
            (syntax-violation
              'case-lambda
              "bad case-lambda"
              #{e 31260}#)))))
    (#{global-extend 28236}#
      'core
      'case-lambda*
      (lambda (#{e 31451}#
               #{r 31452}#
               #{w 31453}#
               #{s 31454}#
               #{mod 31455}#)
        (let ((#{tmp 31457}#
                ($sc-dispatch
                  #{e 31451}#
                  '(_ (any any . each-any)
                      .
                      #(each (any any . each-any))))))
          (if #{tmp 31457}#
            (@apply
              (lambda (#{args 31461}#
                       #{e1 31462}#
                       #{e2 31463}#
                       #{args* 31464}#
                       #{e1* 31465}#
                       #{e2* 31466}#)
                (call-with-values
                  (lambda ()
                    (#{expand-lambda-case 28283}#
                      #{e 31451}#
                      #{r 31452}#
                      #{w 31453}#
                      #{s 31454}#
                      #{mod 31455}#
                      #{lambda*-formals 28282}#
                      (cons (cons #{args 31461}#
                                  (cons #{e1 31462}# #{e2 31463}#))
                            (map (lambda (#{tmp 27245 31469}#
                                          #{tmp 27244 31470}#
                                          #{tmp 27243 31471}#)
                                   (cons #{tmp 27243 31471}#
                                         (cons #{tmp 27244 31470}#
                                               #{tmp 27245 31469}#)))
                                 #{e2* 31466}#
                                 #{e1* 31465}#
                                 #{args* 31464}#))))
                  (lambda (#{meta 31472}# #{lcase 31473}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 14)
                      #{s 31454}#
                      #{meta 31472}#
                      #{lcase 31473}#))))
              #{tmp 31457}#)
            (syntax-violation
              'case-lambda
              "bad case-lambda*"
              #{e 31451}#)))))
    (#{global-extend 28236}#
      'core
      'let
      (letrec*
        ((#{expand-let 31681}#
           (lambda (#{e 31891}#
                    #{r 31892}#
                    #{w 31893}#
                    #{s 31894}#
                    #{mod 31895}#
                    #{constructor 31896}#
                    #{ids 31897}#
                    #{vals 31898}#
                    #{exps 31899}#)
             (if (not (#{valid-bound-ids? 28261}# #{ids 31897}#))
               (syntax-violation
                 'let
                 "duplicate bound variable"
                 #{e 31891}#)
               (let ((#{labels 31984}#
                       (#{gen-labels 28241}# #{ids 31897}#))
                     (#{new-vars 31985}#
                       (map #{gen-var 28285}# #{ids 31897}#)))
                 (let ((#{nw 31986}#
                         (#{make-binding-wrap 28252}#
                           #{ids 31897}#
                           #{labels 31984}#
                           #{w 31893}#))
                       (#{nr 31987}#
                         (#{extend-var-env 28234}#
                           #{labels 31984}#
                           #{new-vars 31985}#
                           #{r 31892}#)))
                   (#{constructor 31896}#
                     #{s 31894}#
                     (map syntax->datum #{ids 31897}#)
                     #{new-vars 31985}#
                     (map (lambda (#{x 32004}#)
                            (#{expand 28271}#
                              #{x 32004}#
                              #{r 31892}#
                              #{w 31893}#
                              #{mod 31895}#))
                          #{vals 31898}#)
                     (#{expand-body 28275}#
                       #{exps 31899}#
                       (#{source-wrap 28265}#
                         #{e 31891}#
                         #{nw 31986}#
                         #{s 31894}#
                         #{mod 31895}#)
                       #{nr 31987}#
                       #{nw 31986}#
                       #{mod 31895}#))))))))
        (lambda (#{e 31682}#
                 #{r 31683}#
                 #{w 31684}#
                 #{s 31685}#
                 #{mod 31686}#)
          (let ((#{tmp 31688}#
                  ($sc-dispatch
                    #{e 31682}#
                    '(_ #(each (any any)) any . each-any))))
            (if (if #{tmp 31688}#
                  (@apply
                    (lambda (#{id 31692}#
                             #{val 31693}#
                             #{e1 31694}#
                             #{e2 31695}#)
                      (and-map #{id? 28238}# #{id 31692}#))
                    #{tmp 31688}#)
                  #f)
              (@apply
                (lambda (#{id 31711}#
                         #{val 31712}#
                         #{e1 31713}#
                         #{e2 31714}#)
                  (#{expand-let 31681}#
                    #{e 31682}#
                    #{r 31683}#
                    #{w 31684}#
                    #{s 31685}#
                    #{mod 31686}#
                    (lambda (#{src 31718}#
                             #{ids 31719}#
                             #{vars 31720}#
                             #{val-exps 31721}#
                             #{body-exp 31722}#)
                      (begin
                        (for-each
                          #{maybe-name-value! 28203}#
                          #{ids 31719}#
                          #{val-exps 31721}#)
                        (if (null? #{vars 31720}#)
                          #{body-exp 31722}#
                          (make-struct/no-tail
                            (vector-ref %expanded-vtables 16)
                            #{src 31718}#
                            #{ids 31719}#
                            #{vars 31720}#
                            #{val-exps 31721}#
                            #{body-exp 31722}#))))
                    #{id 31711}#
                    #{val 31712}#
                    (cons #{e1 31713}# #{e2 31714}#)))
                #{tmp 31688}#)
              (let ((#{tmp 31729}#
                      ($sc-dispatch
                        #{e 31682}#
                        '(_ any #(each (any any)) any . each-any))))
                (if (if #{tmp 31729}#
                      (@apply
                        (lambda (#{f 31733}#
                                 #{id 31734}#
                                 #{val 31735}#
                                 #{e1 31736}#
                                 #{e2 31737}#)
                          (if (if (symbol? #{f 31733}#)
                                #t
                                (if (if (vector? #{f 31733}#)
                                      (if (= (vector-length #{f 31733}#) 4)
                                        (eq? (vector-ref #{f 31733}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{f 31733}# 1))
                                  #f))
                            (and-map #{id? 28238}# #{id 31734}#)
                            #f))
                        #{tmp 31729}#)
                      #f)
                  (@apply
                    (lambda (#{f 31779}#
                             #{id 31780}#
                             #{val 31781}#
                             #{e1 31782}#
                             #{e2 31783}#)
                      (#{expand-let 31681}#
                        #{e 31682}#
                        #{r 31683}#
                        #{w 31684}#
                        #{s 31685}#
                        #{mod 31686}#
                        #{build-named-let 28222}#
                        (cons #{f 31779}# #{id 31780}#)
                        #{val 31781}#
                        (cons #{e1 31782}# #{e2 31783}#)))
                    #{tmp 31729}#)
                  (syntax-violation
                    'let
                    "bad let"
                    (let ((#{x 31796}#
                            (begin
                              (if (if (pair? #{e 31682}#) #{s 31685}# #f)
                                (set-source-properties!
                                  #{e 31682}#
                                  #{s 31685}#))
                              #{e 31682}#)))
                      (if (if (null? (car #{w 31684}#))
                            (null? (cdr #{w 31684}#))
                            #f)
                        #{x 31796}#
                        (if (if (vector? #{x 31796}#)
                              (if (= (vector-length #{x 31796}#) 4)
                                (eq? (vector-ref #{x 31796}# 0) 'syntax-object)
                                #f)
                              #f)
                          (let ((#{expression 31828}#
                                  (vector-ref #{x 31796}# 1))
                                (#{wrap 31829}#
                                  (let ((#{w2 31837}#
                                          (vector-ref #{x 31796}# 2)))
                                    (let ((#{m1 31838}# (car #{w 31684}#))
                                          (#{s1 31839}# (cdr #{w 31684}#)))
                                      (if (null? #{m1 31838}#)
                                        (if (null? #{s1 31839}#)
                                          #{w2 31837}#
                                          (cons (car #{w2 31837}#)
                                                (let ((#{m2 31854}#
                                                        (cdr #{w2 31837}#)))
                                                  (if (null? #{m2 31854}#)
                                                    #{s1 31839}#
                                                    (append
                                                      #{s1 31839}#
                                                      #{m2 31854}#)))))
                                        (cons (let ((#{m2 31862}#
                                                      (car #{w2 31837}#)))
                                                (if (null? #{m2 31862}#)
                                                  #{m1 31838}#
                                                  (append
                                                    #{m1 31838}#
                                                    #{m2 31862}#)))
                                              (let ((#{m2 31870}#
                                                      (cdr #{w2 31837}#)))
                                                (if (null? #{m2 31870}#)
                                                  #{s1 31839}#
                                                  (append
                                                    #{s1 31839}#
                                                    #{m2 31870}#))))))))
                                (#{module 31830}# (vector-ref #{x 31796}# 3)))
                            (vector
                              'syntax-object
                              #{expression 31828}#
                              #{wrap 31829}#
                              #{module 31830}#))
                          (if (null? #{x 31796}#)
                            #{x 31796}#
                            (vector
                              'syntax-object
                              #{x 31796}#
                              #{w 31684}#
                              #{mod 31686}#)))))))))))))
    (#{global-extend 28236}#
      'core
      'letrec
      (lambda (#{e 32475}#
               #{r 32476}#
               #{w 32477}#
               #{s 32478}#
               #{mod 32479}#)
        (let ((#{tmp 32481}#
                ($sc-dispatch
                  #{e 32475}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 32481}#
                (@apply
                  (lambda (#{id 32485}#
                           #{val 32486}#
                           #{e1 32487}#
                           #{e2 32488}#)
                    (and-map #{id? 28238}# #{id 32485}#))
                  #{tmp 32481}#)
                #f)
            (@apply
              (lambda (#{id 32504}#
                       #{val 32505}#
                       #{e1 32506}#
                       #{e2 32507}#)
                (if (not (#{valid-bound-ids? 28261}# #{id 32504}#))
                  (syntax-violation
                    'letrec
                    "duplicate bound variable"
                    #{e 32475}#)
                  (let ((#{labels 32604}#
                          (#{gen-labels 28241}# #{id 32504}#))
                        (#{new-vars 32605}#
                          (map #{gen-var 28285}# #{id 32504}#)))
                    (let ((#{w 32606}#
                            (#{make-binding-wrap 28252}#
                              #{id 32504}#
                              #{labels 32604}#
                              #{w 32477}#))
                          (#{r 32607}#
                            (#{extend-var-env 28234}#
                              #{labels 32604}#
                              #{new-vars 32605}#
                              #{r 32476}#)))
                      (#{build-letrec 28223}#
                        #{s 32478}#
                        #f
                        (map syntax->datum #{id 32504}#)
                        #{new-vars 32605}#
                        (map (lambda (#{x 32686}#)
                               (#{expand 28271}#
                                 #{x 32686}#
                                 #{r 32607}#
                                 #{w 32606}#
                                 #{mod 32479}#))
                             #{val 32505}#)
                        (#{expand-body 28275}#
                          (cons #{e1 32506}# #{e2 32507}#)
                          (let ((#{x 32748}#
                                  (begin
                                    (if (if (pair? #{e 32475}#) #{s 32478}# #f)
                                      (set-source-properties!
                                        #{e 32475}#
                                        #{s 32478}#))
                                    #{e 32475}#)))
                            (if (if (null? (car #{w 32606}#))
                                  (null? (cdr #{w 32606}#))
                                  #f)
                              #{x 32748}#
                              (if (if (vector? #{x 32748}#)
                                    (if (= (vector-length #{x 32748}#) 4)
                                      (eq? (vector-ref #{x 32748}# 0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (let ((#{expression 32780}#
                                        (vector-ref #{x 32748}# 1))
                                      (#{wrap 32781}#
                                        (let ((#{w2 32789}#
                                                (vector-ref #{x 32748}# 2)))
                                          (let ((#{m1 32790}#
                                                  (car #{w 32606}#))
                                                (#{s1 32791}#
                                                  (cdr #{w 32606}#)))
                                            (if (null? #{m1 32790}#)
                                              (if (null? #{s1 32791}#)
                                                #{w2 32789}#
                                                (cons (car #{w2 32789}#)
                                                      (let ((#{m2 32806}#
                                                              (cdr #{w2 32789}#)))
                                                        (if (null? #{m2 32806}#)
                                                          #{s1 32791}#
                                                          (append
                                                            #{s1 32791}#
                                                            #{m2 32806}#)))))
                                              (cons (let ((#{m2 32814}#
                                                            (car #{w2 32789}#)))
                                                      (if (null? #{m2 32814}#)
                                                        #{m1 32790}#
                                                        (append
                                                          #{m1 32790}#
                                                          #{m2 32814}#)))
                                                    (let ((#{m2 32822}#
                                                            (cdr #{w2 32789}#)))
                                                      (if (null? #{m2 32822}#)
                                                        #{s1 32791}#
                                                        (append
                                                          #{s1 32791}#
                                                          #{m2 32822}#))))))))
                                      (#{module 32782}#
                                        (vector-ref #{x 32748}# 3)))
                                  (vector
                                    'syntax-object
                                    #{expression 32780}#
                                    #{wrap 32781}#
                                    #{module 32782}#))
                                (if (null? #{x 32748}#)
                                  #{x 32748}#
                                  (vector
                                    'syntax-object
                                    #{x 32748}#
                                    #{w 32606}#
                                    #{mod 32479}#)))))
                          #{r 32607}#
                          #{w 32606}#
                          #{mod 32479}#))))))
              #{tmp 32481}#)
            (syntax-violation
              'letrec
              "bad letrec"
              (let ((#{x 33061}#
                      (begin
                        (if (if (pair? #{e 32475}#) #{s 32478}# #f)
                          (set-source-properties! #{e 32475}# #{s 32478}#))
                        #{e 32475}#)))
                (if (if (null? (car #{w 32477}#))
                      (null? (cdr #{w 32477}#))
                      #f)
                  #{x 33061}#
                  (if (if (vector? #{x 33061}#)
                        (if (= (vector-length #{x 33061}#) 4)
                          (eq? (vector-ref #{x 33061}# 0) 'syntax-object)
                          #f)
                        #f)
                    (let ((#{expression 33093}# (vector-ref #{x 33061}# 1))
                          (#{wrap 33094}#
                            (let ((#{w2 33102}# (vector-ref #{x 33061}# 2)))
                              (let ((#{m1 33103}# (car #{w 32477}#))
                                    (#{s1 33104}# (cdr #{w 32477}#)))
                                (if (null? #{m1 33103}#)
                                  (if (null? #{s1 33104}#)
                                    #{w2 33102}#
                                    (cons (car #{w2 33102}#)
                                          (let ((#{m2 33119}#
                                                  (cdr #{w2 33102}#)))
                                            (if (null? #{m2 33119}#)
                                              #{s1 33104}#
                                              (append
                                                #{s1 33104}#
                                                #{m2 33119}#)))))
                                  (cons (let ((#{m2 33127}#
                                                (car #{w2 33102}#)))
                                          (if (null? #{m2 33127}#)
                                            #{m1 33103}#
                                            (append
                                              #{m1 33103}#
                                              #{m2 33127}#)))
                                        (let ((#{m2 33135}#
                                                (cdr #{w2 33102}#)))
                                          (if (null? #{m2 33135}#)
                                            #{s1 33104}#
                                            (append
                                              #{s1 33104}#
                                              #{m2 33135}#))))))))
                          (#{module 33095}# (vector-ref #{x 33061}# 3)))
                      (vector
                        'syntax-object
                        #{expression 33093}#
                        #{wrap 33094}#
                        #{module 33095}#))
                    (if (null? #{x 33061}#)
                      #{x 33061}#
                      (vector
                        'syntax-object
                        #{x 33061}#
                        #{w 32477}#
                        #{mod 32479}#))))))))))
    (#{global-extend 28236}#
      'core
      'letrec*
      (lambda (#{e 33286}#
               #{r 33287}#
               #{w 33288}#
               #{s 33289}#
               #{mod 33290}#)
        (let ((#{tmp 33292}#
                ($sc-dispatch
                  #{e 33286}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 33292}#
                (@apply
                  (lambda (#{id 33296}#
                           #{val 33297}#
                           #{e1 33298}#
                           #{e2 33299}#)
                    (and-map #{id? 28238}# #{id 33296}#))
                  #{tmp 33292}#)
                #f)
            (@apply
              (lambda (#{id 33315}#
                       #{val 33316}#
                       #{e1 33317}#
                       #{e2 33318}#)
                (if (not (#{valid-bound-ids? 28261}# #{id 33315}#))
                  (syntax-violation
                    'letrec*
                    "duplicate bound variable"
                    #{e 33286}#)
                  (let ((#{labels 33415}#
                          (#{gen-labels 28241}# #{id 33315}#))
                        (#{new-vars 33416}#
                          (map #{gen-var 28285}# #{id 33315}#)))
                    (let ((#{w 33417}#
                            (#{make-binding-wrap 28252}#
                              #{id 33315}#
                              #{labels 33415}#
                              #{w 33288}#))
                          (#{r 33418}#
                            (#{extend-var-env 28234}#
                              #{labels 33415}#
                              #{new-vars 33416}#
                              #{r 33287}#)))
                      (#{build-letrec 28223}#
                        #{s 33289}#
                        #t
                        (map syntax->datum #{id 33315}#)
                        #{new-vars 33416}#
                        (map (lambda (#{x 33497}#)
                               (#{expand 28271}#
                                 #{x 33497}#
                                 #{r 33418}#
                                 #{w 33417}#
                                 #{mod 33290}#))
                             #{val 33316}#)
                        (#{expand-body 28275}#
                          (cons #{e1 33317}# #{e2 33318}#)
                          (let ((#{x 33559}#
                                  (begin
                                    (if (if (pair? #{e 33286}#) #{s 33289}# #f)
                                      (set-source-properties!
                                        #{e 33286}#
                                        #{s 33289}#))
                                    #{e 33286}#)))
                            (if (if (null? (car #{w 33417}#))
                                  (null? (cdr #{w 33417}#))
                                  #f)
                              #{x 33559}#
                              (if (if (vector? #{x 33559}#)
                                    (if (= (vector-length #{x 33559}#) 4)
                                      (eq? (vector-ref #{x 33559}# 0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (let ((#{expression 33591}#
                                        (vector-ref #{x 33559}# 1))
                                      (#{wrap 33592}#
                                        (let ((#{w2 33600}#
                                                (vector-ref #{x 33559}# 2)))
                                          (let ((#{m1 33601}#
                                                  (car #{w 33417}#))
                                                (#{s1 33602}#
                                                  (cdr #{w 33417}#)))
                                            (if (null? #{m1 33601}#)
                                              (if (null? #{s1 33602}#)
                                                #{w2 33600}#
                                                (cons (car #{w2 33600}#)
                                                      (let ((#{m2 33617}#
                                                              (cdr #{w2 33600}#)))
                                                        (if (null? #{m2 33617}#)
                                                          #{s1 33602}#
                                                          (append
                                                            #{s1 33602}#
                                                            #{m2 33617}#)))))
                                              (cons (let ((#{m2 33625}#
                                                            (car #{w2 33600}#)))
                                                      (if (null? #{m2 33625}#)
                                                        #{m1 33601}#
                                                        (append
                                                          #{m1 33601}#
                                                          #{m2 33625}#)))
                                                    (let ((#{m2 33633}#
                                                            (cdr #{w2 33600}#)))
                                                      (if (null? #{m2 33633}#)
                                                        #{s1 33602}#
                                                        (append
                                                          #{s1 33602}#
                                                          #{m2 33633}#))))))))
                                      (#{module 33593}#
                                        (vector-ref #{x 33559}# 3)))
                                  (vector
                                    'syntax-object
                                    #{expression 33591}#
                                    #{wrap 33592}#
                                    #{module 33593}#))
                                (if (null? #{x 33559}#)
                                  #{x 33559}#
                                  (vector
                                    'syntax-object
                                    #{x 33559}#
                                    #{w 33417}#
                                    #{mod 33290}#)))))
                          #{r 33418}#
                          #{w 33417}#
                          #{mod 33290}#))))))
              #{tmp 33292}#)
            (syntax-violation
              'letrec*
              "bad letrec*"
              (let ((#{x 33872}#
                      (begin
                        (if (if (pair? #{e 33286}#) #{s 33289}# #f)
                          (set-source-properties! #{e 33286}# #{s 33289}#))
                        #{e 33286}#)))
                (if (if (null? (car #{w 33288}#))
                      (null? (cdr #{w 33288}#))
                      #f)
                  #{x 33872}#
                  (if (if (vector? #{x 33872}#)
                        (if (= (vector-length #{x 33872}#) 4)
                          (eq? (vector-ref #{x 33872}# 0) 'syntax-object)
                          #f)
                        #f)
                    (let ((#{expression 33904}# (vector-ref #{x 33872}# 1))
                          (#{wrap 33905}#
                            (let ((#{w2 33913}# (vector-ref #{x 33872}# 2)))
                              (let ((#{m1 33914}# (car #{w 33288}#))
                                    (#{s1 33915}# (cdr #{w 33288}#)))
                                (if (null? #{m1 33914}#)
                                  (if (null? #{s1 33915}#)
                                    #{w2 33913}#
                                    (cons (car #{w2 33913}#)
                                          (let ((#{m2 33930}#
                                                  (cdr #{w2 33913}#)))
                                            (if (null? #{m2 33930}#)
                                              #{s1 33915}#
                                              (append
                                                #{s1 33915}#
                                                #{m2 33930}#)))))
                                  (cons (let ((#{m2 33938}#
                                                (car #{w2 33913}#)))
                                          (if (null? #{m2 33938}#)
                                            #{m1 33914}#
                                            (append
                                              #{m1 33914}#
                                              #{m2 33938}#)))
                                        (let ((#{m2 33946}#
                                                (cdr #{w2 33913}#)))
                                          (if (null? #{m2 33946}#)
                                            #{s1 33915}#
                                            (append
                                              #{s1 33915}#
                                              #{m2 33946}#))))))))
                          (#{module 33906}# (vector-ref #{x 33872}# 3)))
                      (vector
                        'syntax-object
                        #{expression 33904}#
                        #{wrap 33905}#
                        #{module 33906}#))
                    (if (null? #{x 33872}#)
                      #{x 33872}#
                      (vector
                        'syntax-object
                        #{x 33872}#
                        #{w 33288}#
                        #{mod 33290}#))))))))))
    (#{global-extend 28236}#
      'core
      'set!
      (lambda (#{e 34105}#
               #{r 34106}#
               #{w 34107}#
               #{s 34108}#
               #{mod 34109}#)
        (let ((#{tmp 34111}#
                ($sc-dispatch #{e 34105}# '(_ any any))))
          (if (if #{tmp 34111}#
                (@apply
                  (lambda (#{id 34115}# #{val 34116}#)
                    (if (symbol? #{id 34115}#)
                      #t
                      (if (if (vector? #{id 34115}#)
                            (if (= (vector-length #{id 34115}#) 4)
                              (eq? (vector-ref #{id 34115}# 0) 'syntax-object)
                              #f)
                            #f)
                        (symbol? (vector-ref #{id 34115}# 1))
                        #f)))
                  #{tmp 34111}#)
                #f)
            (@apply
              (lambda (#{id 34143}# #{val 34144}#)
                (call-with-values
                  (lambda ()
                    (#{resolve-identifier 28258}#
                      #{id 34143}#
                      #{w 34107}#
                      #{r 34106}#
                      #{mod 34109}#
                      #t))
                  (lambda (#{type 34147}# #{value 34148}# #{id-mod 34149}#)
                    (if (eqv? #{type 34147}# 'lexical)
                      (#{build-lexical-assignment 28209}#
                        #{s 34108}#
                        (syntax->datum #{id 34143}#)
                        #{value 34148}#
                        (#{expand 28271}#
                          #{val 34144}#
                          #{r 34106}#
                          #{w 34107}#
                          #{mod 34109}#))
                      (if (eqv? #{type 34147}# 'global)
                        (#{build-global-assignment 28212}#
                          #{s 34108}#
                          #{value 34148}#
                          (#{expand 28271}#
                            #{val 34144}#
                            #{r 34106}#
                            #{w 34107}#
                            #{mod 34109}#)
                          #{id-mod 34149}#)
                        (if (eqv? #{type 34147}# 'macro)
                          (if (procedure-property
                                #{value 34148}#
                                'variable-transformer)
                            (#{expand 28271}#
                              (#{expand-macro 28274}#
                                #{value 34148}#
                                #{e 34105}#
                                #{r 34106}#
                                #{w 34107}#
                                #{s 34108}#
                                #f
                                #{mod 34109}#)
                              #{r 34106}#
                              '(())
                              #{mod 34109}#)
                            (syntax-violation
                              'set!
                              "not a variable transformer"
                              (if (if (null? (car #{w 34107}#))
                                    (null? (cdr #{w 34107}#))
                                    #f)
                                #{e 34105}#
                                (if (if (vector? #{e 34105}#)
                                      (if (= (vector-length #{e 34105}#) 4)
                                        (eq? (vector-ref #{e 34105}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (let ((#{expression 34589}#
                                          (vector-ref #{e 34105}# 1))
                                        (#{wrap 34590}#
                                          (let ((#{w2 34600}#
                                                  (vector-ref #{e 34105}# 2)))
                                            (let ((#{m1 34601}#
                                                    (car #{w 34107}#))
                                                  (#{s1 34602}#
                                                    (cdr #{w 34107}#)))
                                              (if (null? #{m1 34601}#)
                                                (if (null? #{s1 34602}#)
                                                  #{w2 34600}#
                                                  (cons (car #{w2 34600}#)
                                                        (let ((#{m2 34619}#
                                                                (cdr #{w2 34600}#)))
                                                          (if (null? #{m2 34619}#)
                                                            #{s1 34602}#
                                                            (append
                                                              #{s1 34602}#
                                                              #{m2 34619}#)))))
                                                (cons (let ((#{m2 34627}#
                                                              (car #{w2 34600}#)))
                                                        (if (null? #{m2 34627}#)
                                                          #{m1 34601}#
                                                          (append
                                                            #{m1 34601}#
                                                            #{m2 34627}#)))
                                                      (let ((#{m2 34635}#
                                                              (cdr #{w2 34600}#)))
                                                        (if (null? #{m2 34635}#)
                                                          #{s1 34602}#
                                                          (append
                                                            #{s1 34602}#
                                                            #{m2 34635}#))))))))
                                        (#{module 34591}#
                                          (vector-ref #{e 34105}# 3)))
                                    (vector
                                      'syntax-object
                                      #{expression 34589}#
                                      #{wrap 34590}#
                                      #{module 34591}#))
                                  (if (null? #{e 34105}#)
                                    #{e 34105}#
                                    (vector
                                      'syntax-object
                                      #{e 34105}#
                                      #{w 34107}#
                                      #{mod 34109}#))))
                              (if (if (null? (car #{w 34107}#))
                                    (null? (cdr #{w 34107}#))
                                    #f)
                                #{id 34143}#
                                (if (if (vector? #{id 34143}#)
                                      (if (= (vector-length #{id 34143}#) 4)
                                        (eq? (vector-ref #{id 34143}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (let ((#{expression 34687}#
                                          (vector-ref #{id 34143}# 1))
                                        (#{wrap 34688}#
                                          (let ((#{w2 34698}#
                                                  (vector-ref #{id 34143}# 2)))
                                            (let ((#{m1 34699}#
                                                    (car #{w 34107}#))
                                                  (#{s1 34700}#
                                                    (cdr #{w 34107}#)))
                                              (if (null? #{m1 34699}#)
                                                (if (null? #{s1 34700}#)
                                                  #{w2 34698}#
                                                  (cons (car #{w2 34698}#)
                                                        (let ((#{m2 34717}#
                                                                (cdr #{w2 34698}#)))
                                                          (if (null? #{m2 34717}#)
                                                            #{s1 34700}#
                                                            (append
                                                              #{s1 34700}#
                                                              #{m2 34717}#)))))
                                                (cons (let ((#{m2 34725}#
                                                              (car #{w2 34698}#)))
                                                        (if (null? #{m2 34725}#)
                                                          #{m1 34699}#
                                                          (append
                                                            #{m1 34699}#
                                                            #{m2 34725}#)))
                                                      (let ((#{m2 34733}#
                                                              (cdr #{w2 34698}#)))
                                                        (if (null? #{m2 34733}#)
                                                          #{s1 34700}#
                                                          (append
                                                            #{s1 34700}#
                                                            #{m2 34733}#))))))))
                                        (#{module 34689}#
                                          (vector-ref #{id 34143}# 3)))
                                    (vector
                                      'syntax-object
                                      #{expression 34687}#
                                      #{wrap 34688}#
                                      #{module 34689}#))
                                  (if (null? #{id 34143}#)
                                    #{id 34143}#
                                    (vector
                                      'syntax-object
                                      #{id 34143}#
                                      #{w 34107}#
                                      #{id-mod 34149}#))))))
                          (if (eqv? #{type 34147}# 'displaced-lexical)
                            (syntax-violation
                              'set!
                              "identifier out of context"
                              (if (if (null? (car #{w 34107}#))
                                    (null? (cdr #{w 34107}#))
                                    #f)
                                #{id 34143}#
                                (if (if (vector? #{id 34143}#)
                                      (if (= (vector-length #{id 34143}#) 4)
                                        (eq? (vector-ref #{id 34143}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (let ((#{expression 34788}#
                                          (vector-ref #{id 34143}# 1))
                                        (#{wrap 34789}#
                                          (let ((#{w2 34799}#
                                                  (vector-ref #{id 34143}# 2)))
                                            (let ((#{m1 34800}#
                                                    (car #{w 34107}#))
                                                  (#{s1 34801}#
                                                    (cdr #{w 34107}#)))
                                              (if (null? #{m1 34800}#)
                                                (if (null? #{s1 34801}#)
                                                  #{w2 34799}#
                                                  (cons (car #{w2 34799}#)
                                                        (let ((#{m2 34818}#
                                                                (cdr #{w2 34799}#)))
                                                          (if (null? #{m2 34818}#)
                                                            #{s1 34801}#
                                                            (append
                                                              #{s1 34801}#
                                                              #{m2 34818}#)))))
                                                (cons (let ((#{m2 34826}#
                                                              (car #{w2 34799}#)))
                                                        (if (null? #{m2 34826}#)
                                                          #{m1 34800}#
                                                          (append
                                                            #{m1 34800}#
                                                            #{m2 34826}#)))
                                                      (let ((#{m2 34834}#
                                                              (cdr #{w2 34799}#)))
                                                        (if (null? #{m2 34834}#)
                                                          #{s1 34801}#
                                                          (append
                                                            #{s1 34801}#
                                                            #{m2 34834}#))))))))
                                        (#{module 34790}#
                                          (vector-ref #{id 34143}# 3)))
                                    (vector
                                      'syntax-object
                                      #{expression 34788}#
                                      #{wrap 34789}#
                                      #{module 34790}#))
                                  (if (null? #{id 34143}#)
                                    #{id 34143}#
                                    (vector
                                      'syntax-object
                                      #{id 34143}#
                                      #{w 34107}#
                                      #{mod 34109}#)))))
                            (syntax-violation
                              'set!
                              "bad set!"
                              (let ((#{x 34866}#
                                      (begin
                                        (if (if (pair? #{e 34105}#)
                                              #{s 34108}#
                                              #f)
                                          (set-source-properties!
                                            #{e 34105}#
                                            #{s 34108}#))
                                        #{e 34105}#)))
                                (if (if (null? (car #{w 34107}#))
                                      (null? (cdr #{w 34107}#))
                                      #f)
                                  #{x 34866}#
                                  (if (if (vector? #{x 34866}#)
                                        (if (= (vector-length #{x 34866}#) 4)
                                          (eq? (vector-ref #{x 34866}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (let ((#{expression 34898}#
                                            (vector-ref #{x 34866}# 1))
                                          (#{wrap 34899}#
                                            (let ((#{w2 34907}#
                                                    (vector-ref
                                                      #{x 34866}#
                                                      2)))
                                              (let ((#{m1 34908}#
                                                      (car #{w 34107}#))
                                                    (#{s1 34909}#
                                                      (cdr #{w 34107}#)))
                                                (if (null? #{m1 34908}#)
                                                  (if (null? #{s1 34909}#)
                                                    #{w2 34907}#
                                                    (cons (car #{w2 34907}#)
                                                          (let ((#{m2 34924}#
                                                                  (cdr #{w2 34907}#)))
                                                            (if (null? #{m2 34924}#)
                                                              #{s1 34909}#
                                                              (append
                                                                #{s1 34909}#
                                                                #{m2 34924}#)))))
                                                  (cons (let ((#{m2 34932}#
                                                                (car #{w2 34907}#)))
                                                          (if (null? #{m2 34932}#)
                                                            #{m1 34908}#
                                                            (append
                                                              #{m1 34908}#
                                                              #{m2 34932}#)))
                                                        (let ((#{m2 34940}#
                                                                (cdr #{w2 34907}#)))
                                                          (if (null? #{m2 34940}#)
                                                            #{s1 34909}#
                                                            (append
                                                              #{s1 34909}#
                                                              #{m2 34940}#))))))))
                                          (#{module 34900}#
                                            (vector-ref #{x 34866}# 3)))
                                      (vector
                                        'syntax-object
                                        #{expression 34898}#
                                        #{wrap 34899}#
                                        #{module 34900}#))
                                    (if (null? #{x 34866}#)
                                      #{x 34866}#
                                      (vector
                                        'syntax-object
                                        #{x 34866}#
                                        #{w 34107}#
                                        #{mod 34109}#)))))))))))))
              #{tmp 34111}#)
            (let ((#{tmp 34955}#
                    ($sc-dispatch
                      #{e 34105}#
                      '(_ (any . each-any) any))))
              (if #{tmp 34955}#
                (@apply
                  (lambda (#{head 34959}# #{tail 34960}# #{val 34961}#)
                    (call-with-values
                      (lambda ()
                        (#{syntax-type 28270}#
                          #{head 34959}#
                          #{r 34106}#
                          '(())
                          #f
                          #f
                          #{mod 34109}#
                          #t))
                      (lambda (#{type 34964}#
                               #{value 34965}#
                               #{ee 34966}#
                               #{ww 34967}#
                               #{ss 34968}#
                               #{modmod 34969}#)
                        (if (eqv? #{type 34964}# 'module-ref)
                          (let ((#{val 34973}#
                                  (#{expand 28271}#
                                    #{val 34961}#
                                    #{r 34106}#
                                    #{w 34107}#
                                    #{mod 34109}#)))
                            (call-with-values
                              (lambda ()
                                (#{value 34965}#
                                  (cons #{head 34959}# #{tail 34960}#)
                                  #{r 34106}#
                                  #{w 34107}#))
                              (lambda (#{e 34974}#
                                       #{r 34975}#
                                       #{w 34976}#
                                       #{s* 34977}#
                                       #{mod 34978}#)
                                (let ((#{tmp 34980}# (list #{e 34974}#)))
                                  (if (@apply
                                        (lambda (#{e 34982}#)
                                          (if (symbol? #{e 34982}#)
                                            #t
                                            (if (if (vector? #{e 34982}#)
                                                  (if (= (vector-length
                                                           #{e 34982}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{e 34982}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (symbol?
                                                (vector-ref #{e 34982}# 1))
                                              #f)))
                                        #{tmp 34980}#)
                                    (@apply
                                      (lambda (#{e 35012}#)
                                        (#{build-global-assignment 28212}#
                                          #{s 34108}#
                                          (syntax->datum #{e 35012}#)
                                          #{val 34973}#
                                          #{mod 34978}#))
                                      #{tmp 34980}#)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      #{e 34974}#))))))
                          (#{build-call 28205}#
                            #{s 34108}#
                            (#{expand 28271}#
                              (list '#(syntax-object
                                       setter
                                       ((top)
                                        #(ribcage () () ())
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(type value ee ww ss modmod)
                                          #((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                          #("i27483"
                                            "i27484"
                                            "i27485"
                                            "i27486"
                                            "i27487"
                                            "i27488"))
                                        #(ribcage
                                          #(head tail val)
                                          #((top) (top) (top))
                                          #("i27469" "i27470" "i27471"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(e r w s mod)
                                          #((top) (top) (top) (top) (top))
                                          #("i27441"
                                            "i27442"
                                            "i27443"
                                            "i27444"
                                            "i27445"))
                                        #(ribcage
                                          (lambda-var-list
                                            gen-var
                                            strip
                                            expand-lambda-case
                                            lambda*-formals
                                            expand-simple-lambda
                                            lambda-formals
                                            ellipsis?
                                            expand-void
                                            eval-local-transformer
                                            expand-local-syntax
                                            expand-body
                                            expand-macro
                                            expand-call
                                            expand-expr
                                            expand
                                            syntax-type
                                            parse-when-list
                                            expand-install-global
                                            expand-top-sequence
                                            expand-sequence
                                            source-wrap
                                            wrap
                                            bound-id-member?
                                            distinct-bound-ids?
                                            valid-bound-ids?
                                            bound-id=?
                                            free-id=?
                                            resolve-identifier
                                            id-var-name
                                            same-marks?
                                            join-marks
                                            join-wraps
                                            smart-append
                                            make-binding-wrap
                                            extend-ribcage!
                                            make-empty-ribcage
                                            new-mark
                                            anti-mark
                                            the-anti-mark
                                            top-marked?
                                            top-wrap
                                            empty-wrap
                                            set-ribcage-labels!
                                            set-ribcage-marks!
                                            set-ribcage-symnames!
                                            ribcage-labels
                                            ribcage-marks
                                            ribcage-symnames
                                            ribcage?
                                            make-ribcage
                                            gen-labels
                                            gen-label
                                            make-rename
                                            rename-marks
                                            rename-new
                                            rename-old
                                            subst-rename?
                                            wrap-subst
                                            wrap-marks
                                            make-wrap
                                            id-sym-name&marks
                                            id-sym-name
                                            id?
                                            nonsymbol-id?
                                            global-extend
                                            macros-only-env
                                            extend-var-env
                                            extend-env
                                            null-env
                                            binding-value
                                            binding-type
                                            make-binding
                                            arg-check
                                            source-annotation
                                            no-source
                                            set-syntax-object-module!
                                            set-syntax-object-wrap!
                                            set-syntax-object-expression!
                                            syntax-object-module
                                            syntax-object-wrap
                                            syntax-object-expression
                                            syntax-object?
                                            make-syntax-object
                                            build-lexical-var
                                            build-letrec
                                            build-named-let
                                            build-let
                                            build-sequence
                                            build-data
                                            build-primref
                                            build-primcall
                                            build-lambda-case
                                            build-case-lambda
                                            build-simple-lambda
                                            build-global-definition
                                            build-global-assignment
                                            build-global-reference
                                            analyze-variable
                                            build-lexical-assignment
                                            build-lexical-reference
                                            build-dynlet
                                            build-conditional
                                            build-call
                                            build-void
                                            maybe-name-value!
                                            decorate-source
                                            get-global-definition-hook
                                            put-global-definition-hook
                                            gensym-hook
                                            local-eval-hook
                                            top-level-eval-hook
                                            fx<
                                            fx=
                                            fx-
                                            fx+
                                            set-lambda-meta!
                                            lambda-meta
                                            lambda?
                                            make-dynlet
                                            make-letrec
                                            make-let
                                            make-lambda-case
                                            make-lambda
                                            make-seq
                                            make-primcall
                                            make-call
                                            make-conditional
                                            make-toplevel-define
                                            make-toplevel-set
                                            make-toplevel-ref
                                            make-module-set
                                            make-module-ref
                                            make-lexical-set
                                            make-lexical-ref
                                            make-primitive-ref
                                            make-const
                                            make-void)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("i24298"
                                           "i24296"
                                           "i24294"
                                           "i24292"
                                           "i24290"
                                           "i24288"
                                           "i24286"
                                           "i24284"
                                           "i24282"
                                           "i24280"
                                           "i24278"
                                           "i24276"
                                           "i24274"
                                           "i24272"
                                           "i24270"
                                           "i24268"
                                           "i24266"
                                           "i24264"
                                           "i24262"
                                           "i24260"
                                           "i24258"
                                           "i24256"
                                           "i24254"
                                           "i24252"
                                           "i24250"
                                           "i24248"
                                           "i24246"
                                           "i24244"
                                           "i24242"
                                           "i24240"
                                           "i24238"
                                           "i24236"
                                           "i24234"
                                           "i24232"
                                           "i24230"
                                           "i24228"
                                           "i24227"
                                           "i24225"
                                           "i24222"
                                           "i24221"
                                           "i24220"
                                           "i24218"
                                           "i24217"
                                           "i24215"
                                           "i24213"
                                           "i24211"
                                           "i24209"
                                           "i24207"
                                           "i24205"
                                           "i24203"
                                           "i24201"
                                           "i24198"
                                           "i24196"
                                           "i24195"
                                           "i24193"
                                           "i24191"
                                           "i24189"
                                           "i24187"
                                           "i24186"
                                           "i24185"
                                           "i24184"
                                           "i24182"
                                           "i24181"
                                           "i24178"
                                           "i24176"
                                           "i24174"
                                           "i24172"
                                           "i24170"
                                           "i24168"
                                           "i24167"
                                           "i24166"
                                           "i24164"
                                           "i24162"
                                           "i24161"
                                           "i24158"
                                           "i24157"
                                           "i24155"
                                           "i24153"
                                           "i24151"
                                           "i24149"
                                           "i24147"
                                           "i24145"
                                           "i24143"
                                           "i24141"
                                           "i24139"
                                           "i24136"
                                           "i24134"
                                           "i24132"
                                           "i24130"
                                           "i24128"
                                           "i24126"
                                           "i24124"
                                           "i24122"
                                           "i24120"
                                           "i24118"
                                           "i24116"
                                           "i24114"
                                           "i24112"
                                           "i24110"
                                           "i24108"
                                           "i24106"
                                           "i24104"
                                           "i24102"
                                           "i24100"
                                           "i24098"
                                           "i24096"
                                           "i24094"
                                           "i24092"
                                           "i24090"
                                           "i24089"
                                           "i24086"
                                           "i24084"
                                           "i24083"
                                           "i24082"
                                           "i24081"
                                           "i24080"
                                           "i24078"
                                           "i24076"
                                           "i24074"
                                           "i24071"
                                           "i24069"
                                           "i24067"
                                           "i24065"
                                           "i24063"
                                           "i24061"
                                           "i24059"
                                           "i24057"
                                           "i24055"
                                           "i24053"
                                           "i24051"
                                           "i24049"
                                           "i24047"
                                           "i24045"
                                           "i24043"
                                           "i24041"
                                           "i24039"
                                           "i24037"
                                           "i24035"))
                                        #(ribcage
                                          (define-structure
                                            define-expansion-accessors
                                            define-expansion-constructors)
                                          ((top) (top) (top))
                                          ("i23873" "i23872" "i23871"))
                                        #(ribcage () () ()))
                                       (hygiene guile))
                                    #{head 34959}#)
                              #{r 34106}#
                              #{w 34107}#
                              #{mod 34109}#)
                            (map (lambda (#{e 35325}#)
                                   (#{expand 28271}#
                                     #{e 35325}#
                                     #{r 34106}#
                                     #{w 34107}#
                                     #{mod 34109}#))
                                 (append
                                   #{tail 34960}#
                                   (list #{val 34961}#))))))))
                  #{tmp 34955}#)
                (syntax-violation
                  'set!
                  "bad set!"
                  (let ((#{x 35413}#
                          (begin
                            (if (if (pair? #{e 34105}#) #{s 34108}# #f)
                              (set-source-properties! #{e 34105}# #{s 34108}#))
                            #{e 34105}#)))
                    (if (if (null? (car #{w 34107}#))
                          (null? (cdr #{w 34107}#))
                          #f)
                      #{x 35413}#
                      (if (if (vector? #{x 35413}#)
                            (if (= (vector-length #{x 35413}#) 4)
                              (eq? (vector-ref #{x 35413}# 0) 'syntax-object)
                              #f)
                            #f)
                        (let ((#{expression 35445}# (vector-ref #{x 35413}# 1))
                              (#{wrap 35446}#
                                (let ((#{w2 35454}#
                                        (vector-ref #{x 35413}# 2)))
                                  (let ((#{m1 35455}# (car #{w 34107}#))
                                        (#{s1 35456}# (cdr #{w 34107}#)))
                                    (if (null? #{m1 35455}#)
                                      (if (null? #{s1 35456}#)
                                        #{w2 35454}#
                                        (cons (car #{w2 35454}#)
                                              (let ((#{m2 35471}#
                                                      (cdr #{w2 35454}#)))
                                                (if (null? #{m2 35471}#)
                                                  #{s1 35456}#
                                                  (append
                                                    #{s1 35456}#
                                                    #{m2 35471}#)))))
                                      (cons (let ((#{m2 35479}#
                                                    (car #{w2 35454}#)))
                                              (if (null? #{m2 35479}#)
                                                #{m1 35455}#
                                                (append
                                                  #{m1 35455}#
                                                  #{m2 35479}#)))
                                            (let ((#{m2 35487}#
                                                    (cdr #{w2 35454}#)))
                                              (if (null? #{m2 35487}#)
                                                #{s1 35456}#
                                                (append
                                                  #{s1 35456}#
                                                  #{m2 35487}#))))))))
                              (#{module 35447}# (vector-ref #{x 35413}# 3)))
                          (vector
                            'syntax-object
                            #{expression 35445}#
                            #{wrap 35446}#
                            #{module 35447}#))
                        (if (null? #{x 35413}#)
                          #{x 35413}#
                          (vector
                            'syntax-object
                            #{x 35413}#
                            #{w 34107}#
                            #{mod 34109}#))))))))))))
    (module-define!
      (current-module)
      '@
      (make-syntax-transformer
        '@
        'module-ref
        (lambda (#{e 35518}# #{r 35519}# #{w 35520}#)
          (let ((#{tmp 35522}#
                  ($sc-dispatch #{e 35518}# '(_ each-any any))))
            (if (if #{tmp 35522}#
                  (@apply
                    (lambda (#{mod 35525}# #{id 35526}#)
                      (if (and-map #{id? 28238}# #{mod 35525}#)
                        (if (symbol? #{id 35526}#)
                          #t
                          (if (if (vector? #{id 35526}#)
                                (if (= (vector-length #{id 35526}#) 4)
                                  (eq? (vector-ref #{id 35526}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{id 35526}# 1))
                            #f))
                        #f))
                    #{tmp 35522}#)
                  #f)
              (@apply
                (lambda (#{mod 35566}# #{id 35567}#)
                  (values
                    (syntax->datum #{id 35567}#)
                    #{r 35519}#
                    #{w 35520}#
                    #f
                    (syntax->datum
                      (cons '#(syntax-object
                               public
                               ((top)
                                #(ribcage
                                  #(mod id)
                                  #((top) (top))
                                  #("i27530" "i27531"))
                                #(ribcage () () ())
                                #(ribcage
                                  #(e r w)
                                  #((top) (top) (top))
                                  #("i27518" "i27519" "i27520"))
                                #(ribcage
                                  (lambda-var-list
                                    gen-var
                                    strip
                                    expand-lambda-case
                                    lambda*-formals
                                    expand-simple-lambda
                                    lambda-formals
                                    ellipsis?
                                    expand-void
                                    eval-local-transformer
                                    expand-local-syntax
                                    expand-body
                                    expand-macro
                                    expand-call
                                    expand-expr
                                    expand
                                    syntax-type
                                    parse-when-list
                                    expand-install-global
                                    expand-top-sequence
                                    expand-sequence
                                    source-wrap
                                    wrap
                                    bound-id-member?
                                    distinct-bound-ids?
                                    valid-bound-ids?
                                    bound-id=?
                                    free-id=?
                                    resolve-identifier
                                    id-var-name
                                    same-marks?
                                    join-marks
                                    join-wraps
                                    smart-append
                                    make-binding-wrap
                                    extend-ribcage!
                                    make-empty-ribcage
                                    new-mark
                                    anti-mark
                                    the-anti-mark
                                    top-marked?
                                    top-wrap
                                    empty-wrap
                                    set-ribcage-labels!
                                    set-ribcage-marks!
                                    set-ribcage-symnames!
                                    ribcage-labels
                                    ribcage-marks
                                    ribcage-symnames
                                    ribcage?
                                    make-ribcage
                                    gen-labels
                                    gen-label
                                    make-rename
                                    rename-marks
                                    rename-new
                                    rename-old
                                    subst-rename?
                                    wrap-subst
                                    wrap-marks
                                    make-wrap
                                    id-sym-name&marks
                                    id-sym-name
                                    id?
                                    nonsymbol-id?
                                    global-extend
                                    macros-only-env
                                    extend-var-env
                                    extend-env
                                    null-env
                                    binding-value
                                    binding-type
                                    make-binding
                                    arg-check
                                    source-annotation
                                    no-source
                                    set-syntax-object-module!
                                    set-syntax-object-wrap!
                                    set-syntax-object-expression!
                                    syntax-object-module
                                    syntax-object-wrap
                                    syntax-object-expression
                                    syntax-object?
                                    make-syntax-object
                                    build-lexical-var
                                    build-letrec
                                    build-named-let
                                    build-let
                                    build-sequence
                                    build-data
                                    build-primref
                                    build-primcall
                                    build-lambda-case
                                    build-case-lambda
                                    build-simple-lambda
                                    build-global-definition
                                    build-global-assignment
                                    build-global-reference
                                    analyze-variable
                                    build-lexical-assignment
                                    build-lexical-reference
                                    build-dynlet
                                    build-conditional
                                    build-call
                                    build-void
                                    maybe-name-value!
                                    decorate-source
                                    get-global-definition-hook
                                    put-global-definition-hook
                                    gensym-hook
                                    local-eval-hook
                                    top-level-eval-hook
                                    fx<
                                    fx=
                                    fx-
                                    fx+
                                    set-lambda-meta!
                                    lambda-meta
                                    lambda?
                                    make-dynlet
                                    make-letrec
                                    make-let
                                    make-lambda-case
                                    make-lambda
                                    make-seq
                                    make-primcall
                                    make-call
                                    make-conditional
                                    make-toplevel-define
                                    make-toplevel-set
                                    make-toplevel-ref
                                    make-module-set
                                    make-module-ref
                                    make-lexical-set
                                    make-lexical-ref
                                    make-primitive-ref
                                    make-const
                                    make-void)
                                  ((top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top))
                                  ("i24298"
                                   "i24296"
                                   "i24294"
                                   "i24292"
                                   "i24290"
                                   "i24288"
                                   "i24286"
                                   "i24284"
                                   "i24282"
                                   "i24280"
                                   "i24278"
                                   "i24276"
                                   "i24274"
                                   "i24272"
                                   "i24270"
                                   "i24268"
                                   "i24266"
                                   "i24264"
                                   "i24262"
                                   "i24260"
                                   "i24258"
                                   "i24256"
                                   "i24254"
                                   "i24252"
                                   "i24250"
                                   "i24248"
                                   "i24246"
                                   "i24244"
                                   "i24242"
                                   "i24240"
                                   "i24238"
                                   "i24236"
                                   "i24234"
                                   "i24232"
                                   "i24230"
                                   "i24228"
                                   "i24227"
                                   "i24225"
                                   "i24222"
                                   "i24221"
                                   "i24220"
                                   "i24218"
                                   "i24217"
                                   "i24215"
                                   "i24213"
                                   "i24211"
                                   "i24209"
                                   "i24207"
                                   "i24205"
                                   "i24203"
                                   "i24201"
                                   "i24198"
                                   "i24196"
                                   "i24195"
                                   "i24193"
                                   "i24191"
                                   "i24189"
                                   "i24187"
                                   "i24186"
                                   "i24185"
                                   "i24184"
                                   "i24182"
                                   "i24181"
                                   "i24178"
                                   "i24176"
                                   "i24174"
                                   "i24172"
                                   "i24170"
                                   "i24168"
                                   "i24167"
                                   "i24166"
                                   "i24164"
                                   "i24162"
                                   "i24161"
                                   "i24158"
                                   "i24157"
                                   "i24155"
                                   "i24153"
                                   "i24151"
                                   "i24149"
                                   "i24147"
                                   "i24145"
                                   "i24143"
                                   "i24141"
                                   "i24139"
                                   "i24136"
                                   "i24134"
                                   "i24132"
                                   "i24130"
                                   "i24128"
                                   "i24126"
                                   "i24124"
                                   "i24122"
                                   "i24120"
                                   "i24118"
                                   "i24116"
                                   "i24114"
                                   "i24112"
                                   "i24110"
                                   "i24108"
                                   "i24106"
                                   "i24104"
                                   "i24102"
                                   "i24100"
                                   "i24098"
                                   "i24096"
                                   "i24094"
                                   "i24092"
                                   "i24090"
                                   "i24089"
                                   "i24086"
                                   "i24084"
                                   "i24083"
                                   "i24082"
                                   "i24081"
                                   "i24080"
                                   "i24078"
                                   "i24076"
                                   "i24074"
                                   "i24071"
                                   "i24069"
                                   "i24067"
                                   "i24065"
                                   "i24063"
                                   "i24061"
                                   "i24059"
                                   "i24057"
                                   "i24055"
                                   "i24053"
                                   "i24051"
                                   "i24049"
                                   "i24047"
                                   "i24045"
                                   "i24043"
                                   "i24041"
                                   "i24039"
                                   "i24037"
                                   "i24035"))
                                #(ribcage
                                  (define-structure
                                    define-expansion-accessors
                                    define-expansion-constructors)
                                  ((top) (top) (top))
                                  ("i23873" "i23872" "i23871"))
                                #(ribcage () () ()))
                               (hygiene guile))
                            #{mod 35566}#))))
                #{tmp 35522}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{e 35518}#))))))
    (#{global-extend 28236}#
      'module-ref
      '@@
      (lambda (#{e 35667}# #{r 35668}# #{w 35669}#)
        (letrec*
          ((#{remodulate 35670}#
             (lambda (#{x 35888}# #{mod 35889}#)
               (if (pair? #{x 35888}#)
                 (cons (#{remodulate 35670}#
                         (car #{x 35888}#)
                         #{mod 35889}#)
                       (#{remodulate 35670}#
                         (cdr #{x 35888}#)
                         #{mod 35889}#))
                 (if (if (vector? #{x 35888}#)
                       (if (= (vector-length #{x 35888}#) 4)
                         (eq? (vector-ref #{x 35888}# 0) 'syntax-object)
                         #f)
                       #f)
                   (let ((#{expression 35903}#
                           (#{remodulate 35670}#
                             (vector-ref #{x 35888}# 1)
                             #{mod 35889}#))
                         (#{wrap 35904}# (vector-ref #{x 35888}# 2)))
                     (vector
                       'syntax-object
                       #{expression 35903}#
                       #{wrap 35904}#
                       #{mod 35889}#))
                   (if (vector? #{x 35888}#)
                     (let ((#{n 35912}# (vector-length #{x 35888}#)))
                       (let ((#{v 35913}# (make-vector #{n 35912}#)))
                         (letrec*
                           ((#{loop 35914}#
                              (lambda (#{i 35969}#)
                                (if (= #{i 35969}# #{n 35912}#)
                                  #{v 35913}#
                                  (begin
                                    (vector-set!
                                      #{v 35913}#
                                      #{i 35969}#
                                      (#{remodulate 35670}#
                                        (vector-ref #{x 35888}# #{i 35969}#)
                                        #{mod 35889}#))
                                    (#{loop 35914}# (#{1+}# #{i 35969}#)))))))
                           (#{loop 35914}# 0))))
                     #{x 35888}#))))))
          (let ((#{tmp 35672}#
                  ($sc-dispatch #{e 35667}# '(_ each-any any))))
            (if (if #{tmp 35672}#
                  (@apply
                    (lambda (#{mod 35676}# #{exp 35677}#)
                      (and-map #{id? 28238}# #{mod 35676}#))
                    #{tmp 35672}#)
                  #f)
              (@apply
                (lambda (#{mod 35693}# #{exp 35694}#)
                  (let ((#{mod 35695}#
                          (syntax->datum
                            (cons '#(syntax-object
                                     private
                                     ((top)
                                      #(ribcage
                                        #(mod exp)
                                        #((top) (top))
                                        #("i27574" "i27575"))
                                      #(ribcage
                                        (remodulate)
                                        ((top))
                                        ("i27541"))
                                      #(ribcage
                                        #(e r w)
                                        #((top) (top) (top))
                                        #("i27538" "i27539" "i27540"))
                                      #(ribcage
                                        (lambda-var-list
                                          gen-var
                                          strip
                                          expand-lambda-case
                                          lambda*-formals
                                          expand-simple-lambda
                                          lambda-formals
                                          ellipsis?
                                          expand-void
                                          eval-local-transformer
                                          expand-local-syntax
                                          expand-body
                                          expand-macro
                                          expand-call
                                          expand-expr
                                          expand
                                          syntax-type
                                          parse-when-list
                                          expand-install-global
                                          expand-top-sequence
                                          expand-sequence
                                          source-wrap
                                          wrap
                                          bound-id-member?
                                          distinct-bound-ids?
                                          valid-bound-ids?
                                          bound-id=?
                                          free-id=?
                                          resolve-identifier
                                          id-var-name
                                          same-marks?
                                          join-marks
                                          join-wraps
                                          smart-append
                                          make-binding-wrap
                                          extend-ribcage!
                                          make-empty-ribcage
                                          new-mark
                                          anti-mark
                                          the-anti-mark
                                          top-marked?
                                          top-wrap
                                          empty-wrap
                                          set-ribcage-labels!
                                          set-ribcage-marks!
                                          set-ribcage-symnames!
                                          ribcage-labels
                                          ribcage-marks
                                          ribcage-symnames
                                          ribcage?
                                          make-ribcage
                                          gen-labels
                                          gen-label
                                          make-rename
                                          rename-marks
                                          rename-new
                                          rename-old
                                          subst-rename?
                                          wrap-subst
                                          wrap-marks
                                          make-wrap
                                          id-sym-name&marks
                                          id-sym-name
                                          id?
                                          nonsymbol-id?
                                          global-extend
                                          macros-only-env
                                          extend-var-env
                                          extend-env
                                          null-env
                                          binding-value
                                          binding-type
                                          make-binding
                                          arg-check
                                          source-annotation
                                          no-source
                                          set-syntax-object-module!
                                          set-syntax-object-wrap!
                                          set-syntax-object-expression!
                                          syntax-object-module
                                          syntax-object-wrap
                                          syntax-object-expression
                                          syntax-object?
                                          make-syntax-object
                                          build-lexical-var
                                          build-letrec
                                          build-named-let
                                          build-let
                                          build-sequence
                                          build-data
                                          build-primref
                                          build-primcall
                                          build-lambda-case
                                          build-case-lambda
                                          build-simple-lambda
                                          build-global-definition
                                          build-global-assignment
                                          build-global-reference
                                          analyze-variable
                                          build-lexical-assignment
                                          build-lexical-reference
                                          build-dynlet
                                          build-conditional
                                          build-call
                                          build-void
                                          maybe-name-value!
                                          decorate-source
                                          get-global-definition-hook
                                          put-global-definition-hook
                                          gensym-hook
                                          local-eval-hook
                                          top-level-eval-hook
                                          fx<
                                          fx=
                                          fx-
                                          fx+
                                          set-lambda-meta!
                                          lambda-meta
                                          lambda?
                                          make-dynlet
                                          make-letrec
                                          make-let
                                          make-lambda-case
                                          make-lambda
                                          make-seq
                                          make-primcall
                                          make-call
                                          make-conditional
                                          make-toplevel-define
                                          make-toplevel-set
                                          make-toplevel-ref
                                          make-module-set
                                          make-module-ref
                                          make-lexical-set
                                          make-lexical-ref
                                          make-primitive-ref
                                          make-const
                                          make-void)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i24298"
                                         "i24296"
                                         "i24294"
                                         "i24292"
                                         "i24290"
                                         "i24288"
                                         "i24286"
                                         "i24284"
                                         "i24282"
                                         "i24280"
                                         "i24278"
                                         "i24276"
                                         "i24274"
                                         "i24272"
                                         "i24270"
                                         "i24268"
                                         "i24266"
                                         "i24264"
                                         "i24262"
                                         "i24260"
                                         "i24258"
                                         "i24256"
                                         "i24254"
                                         "i24252"
                                         "i24250"
                                         "i24248"
                                         "i24246"
                                         "i24244"
                                         "i24242"
                                         "i24240"
                                         "i24238"
                                         "i24236"
                                         "i24234"
                                         "i24232"
                                         "i24230"
                                         "i24228"
                                         "i24227"
                                         "i24225"
                                         "i24222"
                                         "i24221"
                                         "i24220"
                                         "i24218"
                                         "i24217"
                                         "i24215"
                                         "i24213"
                                         "i24211"
                                         "i24209"
                                         "i24207"
                                         "i24205"
                                         "i24203"
                                         "i24201"
                                         "i24198"
                                         "i24196"
                                         "i24195"
                                         "i24193"
                                         "i24191"
                                         "i24189"
                                         "i24187"
                                         "i24186"
                                         "i24185"
                                         "i24184"
                                         "i24182"
                                         "i24181"
                                         "i24178"
                                         "i24176"
                                         "i24174"
                                         "i24172"
                                         "i24170"
                                         "i24168"
                                         "i24167"
                                         "i24166"
                                         "i24164"
                                         "i24162"
                                         "i24161"
                                         "i24158"
                                         "i24157"
                                         "i24155"
                                         "i24153"
                                         "i24151"
                                         "i24149"
                                         "i24147"
                                         "i24145"
                                         "i24143"
                                         "i24141"
                                         "i24139"
                                         "i24136"
                                         "i24134"
                                         "i24132"
                                         "i24130"
                                         "i24128"
                                         "i24126"
                                         "i24124"
                                         "i24122"
                                         "i24120"
                                         "i24118"
                                         "i24116"
                                         "i24114"
                                         "i24112"
                                         "i24110"
                                         "i24108"
                                         "i24106"
                                         "i24104"
                                         "i24102"
                                         "i24100"
                                         "i24098"
                                         "i24096"
                                         "i24094"
                                         "i24092"
                                         "i24090"
                                         "i24089"
                                         "i24086"
                                         "i24084"
                                         "i24083"
                                         "i24082"
                                         "i24081"
                                         "i24080"
                                         "i24078"
                                         "i24076"
                                         "i24074"
                                         "i24071"
                                         "i24069"
                                         "i24067"
                                         "i24065"
                                         "i24063"
                                         "i24061"
                                         "i24059"
                                         "i24057"
                                         "i24055"
                                         "i24053"
                                         "i24051"
                                         "i24049"
                                         "i24047"
                                         "i24045"
                                         "i24043"
                                         "i24041"
                                         "i24039"
                                         "i24037"
                                         "i24035"))
                                      #(ribcage
                                        (define-structure
                                          define-expansion-accessors
                                          define-expansion-constructors)
                                        ((top) (top) (top))
                                        ("i23873" "i23872" "i23871"))
                                      #(ribcage () () ()))
                                     (hygiene guile))
                                  #{mod 35693}#))))
                    (values
                      (#{remodulate 35670}#
                        #{exp 35694}#
                        #{mod 35695}#)
                      #{r 35668}#
                      #{w 35669}#
                      (#{source-annotation 28232}# #{exp 35694}#)
                      #{mod 35695}#)))
                #{tmp 35672}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{e 35667}#))))))
    (#{global-extend 28236}#
      'core
      'if
      (lambda (#{e 36078}#
               #{r 36079}#
               #{w 36080}#
               #{s 36081}#
               #{mod 36082}#)
        (let ((#{tmp 36084}#
                ($sc-dispatch #{e 36078}# '(_ any any))))
          (if #{tmp 36084}#
            (@apply
              (lambda (#{test 36088}# #{then 36089}#)
                (#{build-conditional 28206}#
                  #{s 36081}#
                  (#{expand 28271}#
                    #{test 36088}#
                    #{r 36079}#
                    #{w 36080}#
                    #{mod 36082}#)
                  (#{expand 28271}#
                    #{then 36089}#
                    #{r 36079}#
                    #{w 36080}#
                    #{mod 36082}#)
                  (make-struct/no-tail
                    (vector-ref %expanded-vtables 0)
                    #f)))
              #{tmp 36084}#)
            (let ((#{tmp 36338}#
                    ($sc-dispatch #{e 36078}# '(_ any any any))))
              (if #{tmp 36338}#
                (@apply
                  (lambda (#{test 36342}# #{then 36343}# #{else 36344}#)
                    (#{build-conditional 28206}#
                      #{s 36081}#
                      (#{expand 28271}#
                        #{test 36342}#
                        #{r 36079}#
                        #{w 36080}#
                        #{mod 36082}#)
                      (#{expand 28271}#
                        #{then 36343}#
                        #{r 36079}#
                        #{w 36080}#
                        #{mod 36082}#)
                      (#{expand 28271}#
                        #{else 36344}#
                        #{r 36079}#
                        #{w 36080}#
                        #{mod 36082}#)))
                  #{tmp 36338}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{e 36078}#)))))))
    (#{global-extend 28236}#
      'core
      'with-fluids
      (lambda (#{e 36783}#
               #{r 36784}#
               #{w 36785}#
               #{s 36786}#
               #{mod 36787}#)
        (let ((#{tmp 36789}#
                ($sc-dispatch
                  #{e 36783}#
                  '(_ #(each (any any)) any . each-any))))
          (if #{tmp 36789}#
            (@apply
              (lambda (#{fluid 36793}#
                       #{val 36794}#
                       #{b 36795}#
                       #{b* 36796}#)
                (#{build-dynlet 28207}#
                  #{s 36786}#
                  (map (lambda (#{x 36885}#)
                         (#{expand 28271}#
                           #{x 36885}#
                           #{r 36784}#
                           #{w 36785}#
                           #{mod 36787}#))
                       #{fluid 36793}#)
                  (map (lambda (#{x 36963}#)
                         (#{expand 28271}#
                           #{x 36963}#
                           #{r 36784}#
                           #{w 36785}#
                           #{mod 36787}#))
                       #{val 36794}#)
                  (#{expand-body 28275}#
                    (cons #{b 36795}# #{b* 36796}#)
                    (let ((#{x 37052}#
                            (begin
                              (if (if (pair? #{e 36783}#) #{s 36786}# #f)
                                (set-source-properties!
                                  #{e 36783}#
                                  #{s 36786}#))
                              #{e 36783}#)))
                      (if (if (null? (car #{w 36785}#))
                            (null? (cdr #{w 36785}#))
                            #f)
                        #{x 37052}#
                        (if (if (vector? #{x 37052}#)
                              (if (= (vector-length #{x 37052}#) 4)
                                (eq? (vector-ref #{x 37052}# 0) 'syntax-object)
                                #f)
                              #f)
                          (let ((#{expression 37084}#
                                  (vector-ref #{x 37052}# 1))
                                (#{wrap 37085}#
                                  (let ((#{w2 37093}#
                                          (vector-ref #{x 37052}# 2)))
                                    (let ((#{m1 37094}# (car #{w 36785}#))
                                          (#{s1 37095}# (cdr #{w 36785}#)))
                                      (if (null? #{m1 37094}#)
                                        (if (null? #{s1 37095}#)
                                          #{w2 37093}#
                                          (cons (car #{w2 37093}#)
                                                (let ((#{m2 37110}#
                                                        (cdr #{w2 37093}#)))
                                                  (if (null? #{m2 37110}#)
                                                    #{s1 37095}#
                                                    (append
                                                      #{s1 37095}#
                                                      #{m2 37110}#)))))
                                        (cons (let ((#{m2 37118}#
                                                      (car #{w2 37093}#)))
                                                (if (null? #{m2 37118}#)
                                                  #{m1 37094}#
                                                  (append
                                                    #{m1 37094}#
                                                    #{m2 37118}#)))
                                              (let ((#{m2 37126}#
                                                      (cdr #{w2 37093}#)))
                                                (if (null? #{m2 37126}#)
                                                  #{s1 37095}#
                                                  (append
                                                    #{s1 37095}#
                                                    #{m2 37126}#))))))))
                                (#{module 37086}# (vector-ref #{x 37052}# 3)))
                            (vector
                              'syntax-object
                              #{expression 37084}#
                              #{wrap 37085}#
                              #{module 37086}#))
                          (if (null? #{x 37052}#)
                            #{x 37052}#
                            (vector
                              'syntax-object
                              #{x 37052}#
                              #{w 36785}#
                              #{mod 36787}#)))))
                    #{r 36784}#
                    #{w 36785}#
                    #{mod 36787}#)))
              #{tmp 36789}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{e 36783}#)))))
    (module-define!
      (current-module)
      'begin
      (make-syntax-transformer 'begin 'begin '()))
    (module-define!
      (current-module)
      'define
      (make-syntax-transformer 'define 'define '()))
    (module-define!
      (current-module)
      'define-syntax
      (make-syntax-transformer
        'define-syntax
        'define-syntax
        '()))
    (module-define!
      (current-module)
      'define-syntax-parameter
      (make-syntax-transformer
        'define-syntax-parameter
        'define-syntax-parameter
        '()))
    (module-define!
      (current-module)
      'eval-when
      (make-syntax-transformer
        'eval-when
        'eval-when
        '()))
    (#{global-extend 28236}#
      'core
      'syntax-case
      (letrec*
        ((#{convert-pattern 37426}#
           (lambda (#{pattern 39048}# #{keys 39049}#)
             (letrec*
               ((#{cvt* 39050}#
                  (lambda (#{p* 39849}# #{n 39850}# #{ids 39851}#)
                    (if (not (pair? #{p* 39849}#))
                      (#{cvt 39052}#
                        #{p* 39849}#
                        #{n 39850}#
                        #{ids 39851}#)
                      (call-with-values
                        (lambda ()
                          (#{cvt* 39050}#
                            (cdr #{p* 39849}#)
                            #{n 39850}#
                            #{ids 39851}#))
                        (lambda (#{y 39854}# #{ids 39855}#)
                          (call-with-values
                            (lambda ()
                              (#{cvt 39052}#
                                (car #{p* 39849}#)
                                #{n 39850}#
                                #{ids 39855}#))
                            (lambda (#{x 39858}# #{ids 39859}#)
                              (values
                                (cons #{x 39858}# #{y 39854}#)
                                #{ids 39859}#))))))))
                (#{v-reverse 39051}#
                  (lambda (#{x 39860}#)
                    (letrec*
                      ((#{loop 39861}#
                         (lambda (#{r 39962}# #{x 39963}#)
                           (if (not (pair? #{x 39963}#))
                             (values #{r 39962}# #{x 39963}#)
                             (#{loop 39861}#
                               (cons (car #{x 39963}#) #{r 39962}#)
                               (cdr #{x 39963}#))))))
                      (#{loop 39861}# '() #{x 39860}#))))
                (#{cvt 39052}#
                  (lambda (#{p 39055}# #{n 39056}# #{ids 39057}#)
                    (if (if (symbol? #{p 39055}#)
                          #t
                          (if (if (vector? #{p 39055}#)
                                (if (= (vector-length #{p 39055}#) 4)
                                  (eq? (vector-ref #{p 39055}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{p 39055}# 1))
                            #f))
                      (if (#{bound-id-member? 28263}#
                            #{p 39055}#
                            #{keys 39049}#)
                        (values
                          (vector 'free-id #{p 39055}#)
                          #{ids 39057}#)
                        (if (#{free-id=? 28259}#
                              #{p 39055}#
                              '#(syntax-object
                                 _
                                 ((top)
                                  #(ribcage () () ())
                                  #(ribcage
                                    #(p n ids)
                                    #((top) (top) (top))
                                    #("i27675" "i27676" "i27677"))
                                  #(ribcage
                                    (cvt v-reverse cvt*)
                                    ((top) (top) (top))
                                    ("i27648" "i27646" "i27644"))
                                  #(ribcage
                                    #(pattern keys)
                                    #((top) (top))
                                    #("i27642" "i27643"))
                                  #(ribcage
                                    (gen-syntax-case
                                      gen-clause
                                      build-dispatch-call
                                      convert-pattern)
                                    ((top) (top) (top) (top))
                                    ("i27638" "i27636" "i27634" "i27632"))
                                  #(ribcage
                                    (lambda-var-list
                                      gen-var
                                      strip
                                      expand-lambda-case
                                      lambda*-formals
                                      expand-simple-lambda
                                      lambda-formals
                                      ellipsis?
                                      expand-void
                                      eval-local-transformer
                                      expand-local-syntax
                                      expand-body
                                      expand-macro
                                      expand-call
                                      expand-expr
                                      expand
                                      syntax-type
                                      parse-when-list
                                      expand-install-global
                                      expand-top-sequence
                                      expand-sequence
                                      source-wrap
                                      wrap
                                      bound-id-member?
                                      distinct-bound-ids?
                                      valid-bound-ids?
                                      bound-id=?
                                      free-id=?
                                      resolve-identifier
                                      id-var-name
                                      same-marks?
                                      join-marks
                                      join-wraps
                                      smart-append
                                      make-binding-wrap
                                      extend-ribcage!
                                      make-empty-ribcage
                                      new-mark
                                      anti-mark
                                      the-anti-mark
                                      top-marked?
                                      top-wrap
                                      empty-wrap
                                      set-ribcage-labels!
                                      set-ribcage-marks!
                                      set-ribcage-symnames!
                                      ribcage-labels
                                      ribcage-marks
                                      ribcage-symnames
                                      ribcage?
                                      make-ribcage
                                      gen-labels
                                      gen-label
                                      make-rename
                                      rename-marks
                                      rename-new
                                      rename-old
                                      subst-rename?
                                      wrap-subst
                                      wrap-marks
                                      make-wrap
                                      id-sym-name&marks
                                      id-sym-name
                                      id?
                                      nonsymbol-id?
                                      global-extend
                                      macros-only-env
                                      extend-var-env
                                      extend-env
                                      null-env
                                      binding-value
                                      binding-type
                                      make-binding
                                      arg-check
                                      source-annotation
                                      no-source
                                      set-syntax-object-module!
                                      set-syntax-object-wrap!
                                      set-syntax-object-expression!
                                      syntax-object-module
                                      syntax-object-wrap
                                      syntax-object-expression
                                      syntax-object?
                                      make-syntax-object
                                      build-lexical-var
                                      build-letrec
                                      build-named-let
                                      build-let
                                      build-sequence
                                      build-data
                                      build-primref
                                      build-primcall
                                      build-lambda-case
                                      build-case-lambda
                                      build-simple-lambda
                                      build-global-definition
                                      build-global-assignment
                                      build-global-reference
                                      analyze-variable
                                      build-lexical-assignment
                                      build-lexical-reference
                                      build-dynlet
                                      build-conditional
                                      build-call
                                      build-void
                                      maybe-name-value!
                                      decorate-source
                                      get-global-definition-hook
                                      put-global-definition-hook
                                      gensym-hook
                                      local-eval-hook
                                      top-level-eval-hook
                                      fx<
                                      fx=
                                      fx-
                                      fx+
                                      set-lambda-meta!
                                      lambda-meta
                                      lambda?
                                      make-dynlet
                                      make-letrec
                                      make-let
                                      make-lambda-case
                                      make-lambda
                                      make-seq
                                      make-primcall
                                      make-call
                                      make-conditional
                                      make-toplevel-define
                                      make-toplevel-set
                                      make-toplevel-ref
                                      make-module-set
                                      make-module-ref
                                      make-lexical-set
                                      make-lexical-ref
                                      make-primitive-ref
                                      make-const
                                      make-void)
                                    ((top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top))
                                    ("i24298"
                                     "i24296"
                                     "i24294"
                                     "i24292"
                                     "i24290"
                                     "i24288"
                                     "i24286"
                                     "i24284"
                                     "i24282"
                                     "i24280"
                                     "i24278"
                                     "i24276"
                                     "i24274"
                                     "i24272"
                                     "i24270"
                                     "i24268"
                                     "i24266"
                                     "i24264"
                                     "i24262"
                                     "i24260"
                                     "i24258"
                                     "i24256"
                                     "i24254"
                                     "i24252"
                                     "i24250"
                                     "i24248"
                                     "i24246"
                                     "i24244"
                                     "i24242"
                                     "i24240"
                                     "i24238"
                                     "i24236"
                                     "i24234"
                                     "i24232"
                                     "i24230"
                                     "i24228"
                                     "i24227"
                                     "i24225"
                                     "i24222"
                                     "i24221"
                                     "i24220"
                                     "i24218"
                                     "i24217"
                                     "i24215"
                                     "i24213"
                                     "i24211"
                                     "i24209"
                                     "i24207"
                                     "i24205"
                                     "i24203"
                                     "i24201"
                                     "i24198"
                                     "i24196"
                                     "i24195"
                                     "i24193"
                                     "i24191"
                                     "i24189"
                                     "i24187"
                                     "i24186"
                                     "i24185"
                                     "i24184"
                                     "i24182"
                                     "i24181"
                                     "i24178"
                                     "i24176"
                                     "i24174"
                                     "i24172"
                                     "i24170"
                                     "i24168"
                                     "i24167"
                                     "i24166"
                                     "i24164"
                                     "i24162"
                                     "i24161"
                                     "i24158"
                                     "i24157"
                                     "i24155"
                                     "i24153"
                                     "i24151"
                                     "i24149"
                                     "i24147"
                                     "i24145"
                                     "i24143"
                                     "i24141"
                                     "i24139"
                                     "i24136"
                                     "i24134"
                                     "i24132"
                                     "i24130"
                                     "i24128"
                                     "i24126"
                                     "i24124"
                                     "i24122"
                                     "i24120"
                                     "i24118"
                                     "i24116"
                                     "i24114"
                                     "i24112"
                                     "i24110"
                                     "i24108"
                                     "i24106"
                                     "i24104"
                                     "i24102"
                                     "i24100"
                                     "i24098"
                                     "i24096"
                                     "i24094"
                                     "i24092"
                                     "i24090"
                                     "i24089"
                                     "i24086"
                                     "i24084"
                                     "i24083"
                                     "i24082"
                                     "i24081"
                                     "i24080"
                                     "i24078"
                                     "i24076"
                                     "i24074"
                                     "i24071"
                                     "i24069"
                                     "i24067"
                                     "i24065"
                                     "i24063"
                                     "i24061"
                                     "i24059"
                                     "i24057"
                                     "i24055"
                                     "i24053"
                                     "i24051"
                                     "i24049"
                                     "i24047"
                                     "i24045"
                                     "i24043"
                                     "i24041"
                                     "i24039"
                                     "i24037"
                                     "i24035"))
                                  #(ribcage
                                    (define-structure
                                      define-expansion-accessors
                                      define-expansion-constructors)
                                    ((top) (top) (top))
                                    ("i23873" "i23872" "i23871"))
                                  #(ribcage () () ()))
                                 (hygiene guile)))
                          (values '_ #{ids 39057}#)
                          (values
                            'any
                            (cons (cons #{p 39055}# #{n 39056}#)
                                  #{ids 39057}#))))
                      (let ((#{tmp 39189}#
                              ($sc-dispatch #{p 39055}# '(any any))))
                        (if (if #{tmp 39189}#
                              (@apply
                                (lambda (#{x 39193}# #{dots 39194}#)
                                  (if (if (if (vector? #{dots 39194}#)
                                            (if (= (vector-length
                                                     #{dots 39194}#)
                                                   4)
                                              (eq? (vector-ref
                                                     #{dots 39194}#
                                                     0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (symbol? (vector-ref #{dots 39194}# 1))
                                        #f)
                                    (#{free-id=? 28259}#
                                      #{dots 39194}#
                                      '#(syntax-object
                                         ...
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i26166"))
                                          #(ribcage
                                            (lambda-var-list
                                              gen-var
                                              strip
                                              expand-lambda-case
                                              lambda*-formals
                                              expand-simple-lambda
                                              lambda-formals
                                              ellipsis?
                                              expand-void
                                              eval-local-transformer
                                              expand-local-syntax
                                              expand-body
                                              expand-macro
                                              expand-call
                                              expand-expr
                                              expand
                                              syntax-type
                                              parse-when-list
                                              expand-install-global
                                              expand-top-sequence
                                              expand-sequence
                                              source-wrap
                                              wrap
                                              bound-id-member?
                                              distinct-bound-ids?
                                              valid-bound-ids?
                                              bound-id=?
                                              free-id=?
                                              resolve-identifier
                                              id-var-name
                                              same-marks?
                                              join-marks
                                              join-wraps
                                              smart-append
                                              make-binding-wrap
                                              extend-ribcage!
                                              make-empty-ribcage
                                              new-mark
                                              anti-mark
                                              the-anti-mark
                                              top-marked?
                                              top-wrap
                                              empty-wrap
                                              set-ribcage-labels!
                                              set-ribcage-marks!
                                              set-ribcage-symnames!
                                              ribcage-labels
                                              ribcage-marks
                                              ribcage-symnames
                                              ribcage?
                                              make-ribcage
                                              gen-labels
                                              gen-label
                                              make-rename
                                              rename-marks
                                              rename-new
                                              rename-old
                                              subst-rename?
                                              wrap-subst
                                              wrap-marks
                                              make-wrap
                                              id-sym-name&marks
                                              id-sym-name
                                              id?
                                              nonsymbol-id?
                                              global-extend
                                              macros-only-env
                                              extend-var-env
                                              extend-env
                                              null-env
                                              binding-value
                                              binding-type
                                              make-binding
                                              arg-check
                                              source-annotation
                                              no-source
                                              set-syntax-object-module!
                                              set-syntax-object-wrap!
                                              set-syntax-object-expression!
                                              syntax-object-module
                                              syntax-object-wrap
                                              syntax-object-expression
                                              syntax-object?
                                              make-syntax-object
                                              build-lexical-var
                                              build-letrec
                                              build-named-let
                                              build-let
                                              build-sequence
                                              build-data
                                              build-primref
                                              build-primcall
                                              build-lambda-case
                                              build-case-lambda
                                              build-simple-lambda
                                              build-global-definition
                                              build-global-assignment
                                              build-global-reference
                                              analyze-variable
                                              build-lexical-assignment
                                              build-lexical-reference
                                              build-dynlet
                                              build-conditional
                                              build-call
                                              build-void
                                              maybe-name-value!
                                              decorate-source
                                              get-global-definition-hook
                                              put-global-definition-hook
                                              gensym-hook
                                              local-eval-hook
                                              top-level-eval-hook
                                              fx<
                                              fx=
                                              fx-
                                              fx+
                                              set-lambda-meta!
                                              lambda-meta
                                              lambda?
                                              make-dynlet
                                              make-letrec
                                              make-let
                                              make-lambda-case
                                              make-lambda
                                              make-seq
                                              make-primcall
                                              make-call
                                              make-conditional
                                              make-toplevel-define
                                              make-toplevel-set
                                              make-toplevel-ref
                                              make-module-set
                                              make-module-ref
                                              make-lexical-set
                                              make-lexical-ref
                                              make-primitive-ref
                                              make-const
                                              make-void)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i24298"
                                             "i24296"
                                             "i24294"
                                             "i24292"
                                             "i24290"
                                             "i24288"
                                             "i24286"
                                             "i24284"
                                             "i24282"
                                             "i24280"
                                             "i24278"
                                             "i24276"
                                             "i24274"
                                             "i24272"
                                             "i24270"
                                             "i24268"
                                             "i24266"
                                             "i24264"
                                             "i24262"
                                             "i24260"
                                             "i24258"
                                             "i24256"
                                             "i24254"
                                             "i24252"
                                             "i24250"
                                             "i24248"
                                             "i24246"
                                             "i24244"
                                             "i24242"
                                             "i24240"
                                             "i24238"
                                             "i24236"
                                             "i24234"
                                             "i24232"
                                             "i24230"
                                             "i24228"
                                             "i24227"
                                             "i24225"
                                             "i24222"
                                             "i24221"
                                             "i24220"
                                             "i24218"
                                             "i24217"
                                             "i24215"
                                             "i24213"
                                             "i24211"
                                             "i24209"
                                             "i24207"
                                             "i24205"
                                             "i24203"
                                             "i24201"
                                             "i24198"
                                             "i24196"
                                             "i24195"
                                             "i24193"
                                             "i24191"
                                             "i24189"
                                             "i24187"
                                             "i24186"
                                             "i24185"
                                             "i24184"
                                             "i24182"
                                             "i24181"
                                             "i24178"
                                             "i24176"
                                             "i24174"
                                             "i24172"
                                             "i24170"
                                             "i24168"
                                             "i24167"
                                             "i24166"
                                             "i24164"
                                             "i24162"
                                             "i24161"
                                             "i24158"
                                             "i24157"
                                             "i24155"
                                             "i24153"
                                             "i24151"
                                             "i24149"
                                             "i24147"
                                             "i24145"
                                             "i24143"
                                             "i24141"
                                             "i24139"
                                             "i24136"
                                             "i24134"
                                             "i24132"
                                             "i24130"
                                             "i24128"
                                             "i24126"
                                             "i24124"
                                             "i24122"
                                             "i24120"
                                             "i24118"
                                             "i24116"
                                             "i24114"
                                             "i24112"
                                             "i24110"
                                             "i24108"
                                             "i24106"
                                             "i24104"
                                             "i24102"
                                             "i24100"
                                             "i24098"
                                             "i24096"
                                             "i24094"
                                             "i24092"
                                             "i24090"
                                             "i24089"
                                             "i24086"
                                             "i24084"
                                             "i24083"
                                             "i24082"
                                             "i24081"
                                             "i24080"
                                             "i24078"
                                             "i24076"
                                             "i24074"
                                             "i24071"
                                             "i24069"
                                             "i24067"
                                             "i24065"
                                             "i24063"
                                             "i24061"
                                             "i24059"
                                             "i24057"
                                             "i24055"
                                             "i24053"
                                             "i24051"
                                             "i24049"
                                             "i24047"
                                             "i24045"
                                             "i24043"
                                             "i24041"
                                             "i24039"
                                             "i24037"
                                             "i24035"))
                                          #(ribcage
                                            (define-structure
                                              define-expansion-accessors
                                              define-expansion-constructors)
                                            ((top) (top) (top))
                                            ("i23873" "i23872" "i23871"))
                                          #(ribcage () () ()))
                                         (hygiene guile)))
                                    #f))
                                #{tmp 39189}#)
                              #f)
                          (@apply
                            (lambda (#{x 39233}# #{dots 39234}#)
                              (call-with-values
                                (lambda ()
                                  (#{cvt 39052}#
                                    #{x 39233}#
                                    (#{1+}# #{n 39056}#)
                                    #{ids 39057}#))
                                (lambda (#{p 39235}# #{ids 39236}#)
                                  (values
                                    (if (eq? #{p 39235}# 'any)
                                      'each-any
                                      (vector 'each #{p 39235}#))
                                    #{ids 39236}#))))
                            #{tmp 39189}#)
                          (let ((#{tmp 39237}#
                                  ($sc-dispatch #{p 39055}# '(any any . any))))
                            (if (if #{tmp 39237}#
                                  (@apply
                                    (lambda (#{x 39241}#
                                             #{dots 39242}#
                                             #{ys 39243}#)
                                      (if (if (if (vector? #{dots 39242}#)
                                                (if (= (vector-length
                                                         #{dots 39242}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{dots 39242}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (symbol?
                                              (vector-ref #{dots 39242}# 1))
                                            #f)
                                        (#{free-id=? 28259}#
                                          #{dots 39242}#
                                          '#(syntax-object
                                             ...
                                             ((top)
                                              #(ribcage () () ())
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("i26166"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  expand-lambda-case
                                                  lambda*-formals
                                                  expand-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  expand-void
                                                  eval-local-transformer
                                                  expand-local-syntax
                                                  expand-body
                                                  expand-macro
                                                  expand-call
                                                  expand-expr
                                                  expand
                                                  syntax-type
                                                  parse-when-list
                                                  expand-install-global
                                                  expand-top-sequence
                                                  expand-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  resolve-identifier
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-primcall
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-call
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-seq
                                                  make-primcall
                                                  make-call
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i24298"
                                                 "i24296"
                                                 "i24294"
                                                 "i24292"
                                                 "i24290"
                                                 "i24288"
                                                 "i24286"
                                                 "i24284"
                                                 "i24282"
                                                 "i24280"
                                                 "i24278"
                                                 "i24276"
                                                 "i24274"
                                                 "i24272"
                                                 "i24270"
                                                 "i24268"
                                                 "i24266"
                                                 "i24264"
                                                 "i24262"
                                                 "i24260"
                                                 "i24258"
                                                 "i24256"
                                                 "i24254"
                                                 "i24252"
                                                 "i24250"
                                                 "i24248"
                                                 "i24246"
                                                 "i24244"
                                                 "i24242"
                                                 "i24240"
                                                 "i24238"
                                                 "i24236"
                                                 "i24234"
                                                 "i24232"
                                                 "i24230"
                                                 "i24228"
                                                 "i24227"
                                                 "i24225"
                                                 "i24222"
                                                 "i24221"
                                                 "i24220"
                                                 "i24218"
                                                 "i24217"
                                                 "i24215"
                                                 "i24213"
                                                 "i24211"
                                                 "i24209"
                                                 "i24207"
                                                 "i24205"
                                                 "i24203"
                                                 "i24201"
                                                 "i24198"
                                                 "i24196"
                                                 "i24195"
                                                 "i24193"
                                                 "i24191"
                                                 "i24189"
                                                 "i24187"
                                                 "i24186"
                                                 "i24185"
                                                 "i24184"
                                                 "i24182"
                                                 "i24181"
                                                 "i24178"
                                                 "i24176"
                                                 "i24174"
                                                 "i24172"
                                                 "i24170"
                                                 "i24168"
                                                 "i24167"
                                                 "i24166"
                                                 "i24164"
                                                 "i24162"
                                                 "i24161"
                                                 "i24158"
                                                 "i24157"
                                                 "i24155"
                                                 "i24153"
                                                 "i24151"
                                                 "i24149"
                                                 "i24147"
                                                 "i24145"
                                                 "i24143"
                                                 "i24141"
                                                 "i24139"
                                                 "i24136"
                                                 "i24134"
                                                 "i24132"
                                                 "i24130"
                                                 "i24128"
                                                 "i24126"
                                                 "i24124"
                                                 "i24122"
                                                 "i24120"
                                                 "i24118"
                                                 "i24116"
                                                 "i24114"
                                                 "i24112"
                                                 "i24110"
                                                 "i24108"
                                                 "i24106"
                                                 "i24104"
                                                 "i24102"
                                                 "i24100"
                                                 "i24098"
                                                 "i24096"
                                                 "i24094"
                                                 "i24092"
                                                 "i24090"
                                                 "i24089"
                                                 "i24086"
                                                 "i24084"
                                                 "i24083"
                                                 "i24082"
                                                 "i24081"
                                                 "i24080"
                                                 "i24078"
                                                 "i24076"
                                                 "i24074"
                                                 "i24071"
                                                 "i24069"
                                                 "i24067"
                                                 "i24065"
                                                 "i24063"
                                                 "i24061"
                                                 "i24059"
                                                 "i24057"
                                                 "i24055"
                                                 "i24053"
                                                 "i24051"
                                                 "i24049"
                                                 "i24047"
                                                 "i24045"
                                                 "i24043"
                                                 "i24041"
                                                 "i24039"
                                                 "i24037"
                                                 "i24035"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("i23873" "i23872" "i23871"))
                                              #(ribcage () () ()))
                                             (hygiene guile)))
                                        #f))
                                    #{tmp 39237}#)
                                  #f)
                              (@apply
                                (lambda (#{x 39282}#
                                         #{dots 39283}#
                                         #{ys 39284}#)
                                  (call-with-values
                                    (lambda ()
                                      (#{cvt* 39050}#
                                        #{ys 39284}#
                                        #{n 39056}#
                                        #{ids 39057}#))
                                    (lambda (#{ys 39769}# #{ids 39770}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{cvt 39052}#
                                            #{x 39282}#
                                            (#{1+}# #{n 39056}#)
                                            #{ids 39770}#))
                                        (lambda (#{x 39771}# #{ids 39772}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{v-reverse 39051}#
                                                #{ys 39769}#))
                                            (lambda (#{ys 39808}# #{e 39809}#)
                                              (values
                                                (vector
                                                  'each+
                                                  #{x 39771}#
                                                  #{ys 39808}#
                                                  #{e 39809}#)
                                                #{ids 39772}#))))))))
                                #{tmp 39237}#)
                              (let ((#{tmp 39810}#
                                      ($sc-dispatch #{p 39055}# '(any . any))))
                                (if #{tmp 39810}#
                                  (@apply
                                    (lambda (#{x 39814}# #{y 39815}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{cvt 39052}#
                                            #{y 39815}#
                                            #{n 39056}#
                                            #{ids 39057}#))
                                        (lambda (#{y 39816}# #{ids 39817}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{cvt 39052}#
                                                #{x 39814}#
                                                #{n 39056}#
                                                #{ids 39817}#))
                                            (lambda (#{x 39818}# #{ids 39819}#)
                                              (values
                                                (cons #{x 39818}# #{y 39816}#)
                                                #{ids 39819}#))))))
                                    #{tmp 39810}#)
                                  (let ((#{tmp 39820}#
                                          ($sc-dispatch #{p 39055}# '())))
                                    (if #{tmp 39820}#
                                      (@apply
                                        (lambda () (values '() #{ids 39057}#))
                                        #{tmp 39820}#)
                                      (let ((#{tmp 39824}#
                                              ($sc-dispatch
                                                #{p 39055}#
                                                '#(vector each-any))))
                                        (if #{tmp 39824}#
                                          (@apply
                                            (lambda (#{x 39828}#)
                                              (call-with-values
                                                (lambda ()
                                                  (#{cvt 39052}#
                                                    #{x 39828}#
                                                    #{n 39056}#
                                                    #{ids 39057}#))
                                                (lambda (#{p 39829}#
                                                         #{ids 39830}#)
                                                  (values
                                                    (vector
                                                      'vector
                                                      #{p 39829}#)
                                                    #{ids 39830}#))))
                                            #{tmp 39824}#)
                                          (values
                                            (vector
                                              'atom
                                              (#{strip 28284}#
                                                #{p 39055}#
                                                '(())))
                                            #{ids 39057}#)))))))))))))))
               (#{cvt 39052}# #{pattern 39048}# 0 '()))))
         (#{build-dispatch-call 37427}#
           (lambda (#{pvars 39964}#
                    #{exp 39965}#
                    #{y 39966}#
                    #{r 39967}#
                    #{mod 39968}#)
             (let ((#{ids 39969}# (map car #{pvars 39964}#)))
               (begin
                 (map cdr #{pvars 39964}#)
                 (let ((#{labels 39971}#
                         (#{gen-labels 28241}# #{ids 39969}#))
                       (#{new-vars 39972}#
                         (map #{gen-var 28285}# #{ids 39969}#)))
                   (#{build-primcall 28217}#
                     #f
                     'apply
                     (list (#{build-simple-lambda 28214}#
                             #f
                             (map syntax->datum #{ids 39969}#)
                             #f
                             #{new-vars 39972}#
                             '()
                             (#{expand 28271}#
                               #{exp 39965}#
                               (#{extend-env 28233}#
                                 #{labels 39971}#
                                 (map (lambda (#{var 40304}# #{level 40305}#)
                                        (cons 'syntax
                                              (cons #{var 40304}#
                                                    #{level 40305}#)))
                                      #{new-vars 39972}#
                                      (map cdr #{pvars 39964}#))
                                 #{r 39967}#)
                               (#{make-binding-wrap 28252}#
                                 #{ids 39969}#
                                 #{labels 39971}#
                                 '(()))
                               #{mod 39968}#))
                           #{y 39966}#)))))))
         (#{gen-clause 37428}#
           (lambda (#{x 38632}#
                    #{keys 38633}#
                    #{clauses 38634}#
                    #{r 38635}#
                    #{pat 38636}#
                    #{fender 38637}#
                    #{exp 38638}#
                    #{mod 38639}#)
             (call-with-values
               (lambda ()
                 (#{convert-pattern 37426}#
                   #{pat 38636}#
                   #{keys 38633}#))
               (lambda (#{p 38777}# #{pvars 38778}#)
                 (if (not (#{distinct-bound-ids? 28262}#
                            (map car #{pvars 38778}#)))
                   (syntax-violation
                     'syntax-case
                     "duplicate pattern variable"
                     #{pat 38636}#)
                   (if (not (and-map
                              (lambda (#{x 38887}#)
                                (not (let ((#{x 38891}# (car #{x 38887}#)))
                                       (if (if (if (vector? #{x 38891}#)
                                                 (if (= (vector-length
                                                          #{x 38891}#)
                                                        4)
                                                   (eq? (vector-ref
                                                          #{x 38891}#
                                                          0)
                                                        'syntax-object)
                                                   #f)
                                                 #f)
                                             (symbol?
                                               (vector-ref #{x 38891}# 1))
                                             #f)
                                         (#{free-id=? 28259}#
                                           #{x 38891}#
                                           '#(syntax-object
                                              ...
                                              ((top)
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i26166"))
                                               #(ribcage
                                                 (lambda-var-list
                                                   gen-var
                                                   strip
                                                   expand-lambda-case
                                                   lambda*-formals
                                                   expand-simple-lambda
                                                   lambda-formals
                                                   ellipsis?
                                                   expand-void
                                                   eval-local-transformer
                                                   expand-local-syntax
                                                   expand-body
                                                   expand-macro
                                                   expand-call
                                                   expand-expr
                                                   expand
                                                   syntax-type
                                                   parse-when-list
                                                   expand-install-global
                                                   expand-top-sequence
                                                   expand-sequence
                                                   source-wrap
                                                   wrap
                                                   bound-id-member?
                                                   distinct-bound-ids?
                                                   valid-bound-ids?
                                                   bound-id=?
                                                   free-id=?
                                                   resolve-identifier
                                                   id-var-name
                                                   same-marks?
                                                   join-marks
                                                   join-wraps
                                                   smart-append
                                                   make-binding-wrap
                                                   extend-ribcage!
                                                   make-empty-ribcage
                                                   new-mark
                                                   anti-mark
                                                   the-anti-mark
                                                   top-marked?
                                                   top-wrap
                                                   empty-wrap
                                                   set-ribcage-labels!
                                                   set-ribcage-marks!
                                                   set-ribcage-symnames!
                                                   ribcage-labels
                                                   ribcage-marks
                                                   ribcage-symnames
                                                   ribcage?
                                                   make-ribcage
                                                   gen-labels
                                                   gen-label
                                                   make-rename
                                                   rename-marks
                                                   rename-new
                                                   rename-old
                                                   subst-rename?
                                                   wrap-subst
                                                   wrap-marks
                                                   make-wrap
                                                   id-sym-name&marks
                                                   id-sym-name
                                                   id?
                                                   nonsymbol-id?
                                                   global-extend
                                                   macros-only-env
                                                   extend-var-env
                                                   extend-env
                                                   null-env
                                                   binding-value
                                                   binding-type
                                                   make-binding
                                                   arg-check
                                                   source-annotation
                                                   no-source
                                                   set-syntax-object-module!
                                                   set-syntax-object-wrap!
                                                   set-syntax-object-expression!
                                                   syntax-object-module
                                                   syntax-object-wrap
                                                   syntax-object-expression
                                                   syntax-object?
                                                   make-syntax-object
                                                   build-lexical-var
                                                   build-letrec
                                                   build-named-let
                                                   build-let
                                                   build-sequence
                                                   build-data
                                                   build-primref
                                                   build-primcall
                                                   build-lambda-case
                                                   build-case-lambda
                                                   build-simple-lambda
                                                   build-global-definition
                                                   build-global-assignment
                                                   build-global-reference
                                                   analyze-variable
                                                   build-lexical-assignment
                                                   build-lexical-reference
                                                   build-dynlet
                                                   build-conditional
                                                   build-call
                                                   build-void
                                                   maybe-name-value!
                                                   decorate-source
                                                   get-global-definition-hook
                                                   put-global-definition-hook
                                                   gensym-hook
                                                   local-eval-hook
                                                   top-level-eval-hook
                                                   fx<
                                                   fx=
                                                   fx-
                                                   fx+
                                                   set-lambda-meta!
                                                   lambda-meta
                                                   lambda?
                                                   make-dynlet
                                                   make-letrec
                                                   make-let
                                                   make-lambda-case
                                                   make-lambda
                                                   make-seq
                                                   make-primcall
                                                   make-call
                                                   make-conditional
                                                   make-toplevel-define
                                                   make-toplevel-set
                                                   make-toplevel-ref
                                                   make-module-set
                                                   make-module-ref
                                                   make-lexical-set
                                                   make-lexical-ref
                                                   make-primitive-ref
                                                   make-const
                                                   make-void)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i24298"
                                                  "i24296"
                                                  "i24294"
                                                  "i24292"
                                                  "i24290"
                                                  "i24288"
                                                  "i24286"
                                                  "i24284"
                                                  "i24282"
                                                  "i24280"
                                                  "i24278"
                                                  "i24276"
                                                  "i24274"
                                                  "i24272"
                                                  "i24270"
                                                  "i24268"
                                                  "i24266"
                                                  "i24264"
                                                  "i24262"
                                                  "i24260"
                                                  "i24258"
                                                  "i24256"
                                                  "i24254"
                                                  "i24252"
                                                  "i24250"
                                                  "i24248"
                                                  "i24246"
                                                  "i24244"
                                                  "i24242"
                                                  "i24240"
                                                  "i24238"
                                                  "i24236"
                                                  "i24234"
                                                  "i24232"
                                                  "i24230"
                                                  "i24228"
                                                  "i24227"
                                                  "i24225"
                                                  "i24222"
                                                  "i24221"
                                                  "i24220"
                                                  "i24218"
                                                  "i24217"
                                                  "i24215"
                                                  "i24213"
                                                  "i24211"
                                                  "i24209"
                                                  "i24207"
                                                  "i24205"
                                                  "i24203"
                                                  "i24201"
                                                  "i24198"
                                                  "i24196"
                                                  "i24195"
                                                  "i24193"
                                                  "i24191"
                                                  "i24189"
                                                  "i24187"
                                                  "i24186"
                                                  "i24185"
                                                  "i24184"
                                                  "i24182"
                                                  "i24181"
                                                  "i24178"
                                                  "i24176"
                                                  "i24174"
                                                  "i24172"
                                                  "i24170"
                                                  "i24168"
                                                  "i24167"
                                                  "i24166"
                                                  "i24164"
                                                  "i24162"
                                                  "i24161"
                                                  "i24158"
                                                  "i24157"
                                                  "i24155"
                                                  "i24153"
                                                  "i24151"
                                                  "i24149"
                                                  "i24147"
                                                  "i24145"
                                                  "i24143"
                                                  "i24141"
                                                  "i24139"
                                                  "i24136"
                                                  "i24134"
                                                  "i24132"
                                                  "i24130"
                                                  "i24128"
                                                  "i24126"
                                                  "i24124"
                                                  "i24122"
                                                  "i24120"
                                                  "i24118"
                                                  "i24116"
                                                  "i24114"
                                                  "i24112"
                                                  "i24110"
                                                  "i24108"
                                                  "i24106"
                                                  "i24104"
                                                  "i24102"
                                                  "i24100"
                                                  "i24098"
                                                  "i24096"
                                                  "i24094"
                                                  "i24092"
                                                  "i24090"
                                                  "i24089"
                                                  "i24086"
                                                  "i24084"
                                                  "i24083"
                                                  "i24082"
                                                  "i24081"
                                                  "i24080"
                                                  "i24078"
                                                  "i24076"
                                                  "i24074"
                                                  "i24071"
                                                  "i24069"
                                                  "i24067"
                                                  "i24065"
                                                  "i24063"
                                                  "i24061"
                                                  "i24059"
                                                  "i24057"
                                                  "i24055"
                                                  "i24053"
                                                  "i24051"
                                                  "i24049"
                                                  "i24047"
                                                  "i24045"
                                                  "i24043"
                                                  "i24041"
                                                  "i24039"
                                                  "i24037"
                                                  "i24035"))
                                               #(ribcage
                                                 (define-structure
                                                   define-expansion-accessors
                                                   define-expansion-constructors)
                                                 ((top) (top) (top))
                                                 ("i23873" "i23872" "i23871"))
                                               #(ribcage () () ()))
                                              (hygiene guile)))
                                         #f))))
                              #{pvars 38778}#))
                     (syntax-violation
                       'syntax-case
                       "misplaced ellipsis"
                       #{pat 38636}#)
                     (let ((#{y 38916}#
                             (gensym
                               (string-append (symbol->string 'tmp) " "))))
                       (let ((#{fun-exp 38921}#
                               (let ((#{req 38930}# (list 'tmp))
                                     (#{vars 38932}# (list #{y 38916}#))
                                     (#{exp 38934}#
                                       (let ((#{y 38963}#
                                               (make-struct/no-tail
                                                 (vector-ref
                                                   %expanded-vtables
                                                   3)
                                                 #f
                                                 'tmp
                                                 #{y 38916}#)))
                                         (let ((#{test-exp 38967}#
                                                 (let ((#{tmp 38976}#
                                                         ($sc-dispatch
                                                           #{fender 38637}#
                                                           '#(atom #t))))
                                                   (if #{tmp 38976}#
                                                     (@apply
                                                       (lambda () #{y 38963}#)
                                                       #{tmp 38976}#)
                                                     (let ((#{then-exp 38994}#
                                                             (#{build-dispatch-call 37427}#
                                                               #{pvars 38778}#
                                                               #{fender 38637}#
                                                               #{y 38963}#
                                                               #{r 38635}#
                                                               #{mod 38639}#))
                                                           (#{else-exp 38995}#
                                                             (make-struct/no-tail
                                                               (vector-ref
                                                                 %expanded-vtables
                                                                 1)
                                                               #f
                                                               #f)))
                                                       (make-struct/no-tail
                                                         (vector-ref
                                                           %expanded-vtables
                                                           10)
                                                         #f
                                                         #{y 38963}#
                                                         #{then-exp 38994}#
                                                         #{else-exp 38995}#)))))
                                               (#{then-exp 38968}#
                                                 (#{build-dispatch-call 37427}#
                                                   #{pvars 38778}#
                                                   #{exp 38638}#
                                                   #{y 38963}#
                                                   #{r 38635}#
                                                   #{mod 38639}#))
                                               (#{else-exp 38969}#
                                                 (#{gen-syntax-case 37429}#
                                                   #{x 38632}#
                                                   #{keys 38633}#
                                                   #{clauses 38634}#
                                                   #{r 38635}#
                                                   #{mod 38639}#)))
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 10)
                                             #f
                                             #{test-exp 38967}#
                                             #{then-exp 38968}#
                                             #{else-exp 38969}#)))))
                                 (let ((#{body 38939}#
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 15)
                                           #f
                                           #{req 38930}#
                                           #f
                                           #f
                                           #f
                                           '()
                                           #{vars 38932}#
                                           #{exp 38934}#
                                           #f)))
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 14)
                                     #f
                                     '()
                                     #{body 38939}#))))
                             (#{arg-exps 38922}#
                               (list (if (eq? #{p 38777}# 'any)
                                       (let ((#{args 39027}#
                                               (list #{x 38632}#)))
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 12)
                                           #f
                                           'list
                                           #{args 39027}#))
                                       (let ((#{args 39036}#
                                               (list #{x 38632}#
                                                     (make-struct/no-tail
                                                       (vector-ref
                                                         %expanded-vtables
                                                         1)
                                                       #f
                                                       #{p 38777}#))))
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 12)
                                           #f
                                           '$sc-dispatch
                                           #{args 39036}#))))))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 11)
                           #f
                           #{fun-exp 38921}#
                           #{arg-exps 38922}#)))))))))
         (#{gen-syntax-case 37429}#
           (lambda (#{x 38133}#
                    #{keys 38134}#
                    #{clauses 38135}#
                    #{r 38136}#
                    #{mod 38137}#)
             (if (null? #{clauses 38135}#)
               (let ((#{args 38143}#
                       (list (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               #f)
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               "source expression failed to match any pattern")
                             #{x 38133}#)))
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 12)
                   #f
                   'syntax-violation
                   #{args 38143}#))
               (let ((#{tmp 38162}# (car #{clauses 38135}#)))
                 (let ((#{tmp 38163}#
                         ($sc-dispatch #{tmp 38162}# '(any any))))
                   (if #{tmp 38163}#
                     (@apply
                       (lambda (#{pat 38165}# #{exp 38166}#)
                         (if (if (if (symbol? #{pat 38165}#)
                                   #t
                                   (if (if (vector? #{pat 38165}#)
                                         (if (= (vector-length #{pat 38165}#)
                                                4)
                                           (eq? (vector-ref #{pat 38165}# 0)
                                                'syntax-object)
                                           #f)
                                         #f)
                                     (symbol? (vector-ref #{pat 38165}# 1))
                                     #f))
                               (and-map
                                 (lambda (#{x 38193}#)
                                   (not (#{free-id=? 28259}#
                                          #{pat 38165}#
                                          #{x 38193}#)))
                                 (cons '#(syntax-object
                                          ...
                                          ((top)
                                           #(ribcage
                                             #(pat exp)
                                             #((top) (top))
                                             #("i27835" "i27836"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x keys clauses r mod)
                                             #((top) (top) (top) (top) (top))
                                             #("i27825"
                                               "i27826"
                                               "i27827"
                                               "i27828"
                                               "i27829"))
                                           #(ribcage
                                             (gen-syntax-case
                                               gen-clause
                                               build-dispatch-call
                                               convert-pattern)
                                             ((top) (top) (top) (top))
                                             ("i27638"
                                              "i27636"
                                              "i27634"
                                              "i27632"))
                                           #(ribcage
                                             (lambda-var-list
                                               gen-var
                                               strip
                                               expand-lambda-case
                                               lambda*-formals
                                               expand-simple-lambda
                                               lambda-formals
                                               ellipsis?
                                               expand-void
                                               eval-local-transformer
                                               expand-local-syntax
                                               expand-body
                                               expand-macro
                                               expand-call
                                               expand-expr
                                               expand
                                               syntax-type
                                               parse-when-list
                                               expand-install-global
                                               expand-top-sequence
                                               expand-sequence
                                               source-wrap
                                               wrap
                                               bound-id-member?
                                               distinct-bound-ids?
                                               valid-bound-ids?
                                               bound-id=?
                                               free-id=?
                                               resolve-identifier
                                               id-var-name
                                               same-marks?
                                               join-marks
                                               join-wraps
                                               smart-append
                                               make-binding-wrap
                                               extend-ribcage!
                                               make-empty-ribcage
                                               new-mark
                                               anti-mark
                                               the-anti-mark
                                               top-marked?
                                               top-wrap
                                               empty-wrap
                                               set-ribcage-labels!
                                               set-ribcage-marks!
                                               set-ribcage-symnames!
                                               ribcage-labels
                                               ribcage-marks
                                               ribcage-symnames
                                               ribcage?
                                               make-ribcage
                                               gen-labels
                                               gen-label
                                               make-rename
                                               rename-marks
                                               rename-new
                                               rename-old
                                               subst-rename?
                                               wrap-subst
                                               wrap-marks
                                               make-wrap
                                               id-sym-name&marks
                                               id-sym-name
                                               id?
                                               nonsymbol-id?
                                               global-extend
                                               macros-only-env
                                               extend-var-env
                                               extend-env
                                               null-env
                                               binding-value
                                               binding-type
                                               make-binding
                                               arg-check
                                               source-annotation
                                               no-source
                                               set-syntax-object-module!
                                               set-syntax-object-wrap!
                                               set-syntax-object-expression!
                                               syntax-object-module
                                               syntax-object-wrap
                                               syntax-object-expression
                                               syntax-object?
                                               make-syntax-object
                                               build-lexical-var
                                               build-letrec
                                               build-named-let
                                               build-let
                                               build-sequence
                                               build-data
                                               build-primref
                                               build-primcall
                                               build-lambda-case
                                               build-case-lambda
                                               build-simple-lambda
                                               build-global-definition
                                               build-global-assignment
                                               build-global-reference
                                               analyze-variable
                                               build-lexical-assignment
                                               build-lexical-reference
                                               build-dynlet
                                               build-conditional
                                               build-call
                                               build-void
                                               maybe-name-value!
                                               decorate-source
                                               get-global-definition-hook
                                               put-global-definition-hook
                                               gensym-hook
                                               local-eval-hook
                                               top-level-eval-hook
                                               fx<
                                               fx=
                                               fx-
                                               fx+
                                               set-lambda-meta!
                                               lambda-meta
                                               lambda?
                                               make-dynlet
                                               make-letrec
                                               make-let
                                               make-lambda-case
                                               make-lambda
                                               make-seq
                                               make-primcall
                                               make-call
                                               make-conditional
                                               make-toplevel-define
                                               make-toplevel-set
                                               make-toplevel-ref
                                               make-module-set
                                               make-module-ref
                                               make-lexical-set
                                               make-lexical-ref
                                               make-primitive-ref
                                               make-const
                                               make-void)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i24298"
                                              "i24296"
                                              "i24294"
                                              "i24292"
                                              "i24290"
                                              "i24288"
                                              "i24286"
                                              "i24284"
                                              "i24282"
                                              "i24280"
                                              "i24278"
                                              "i24276"
                                              "i24274"
                                              "i24272"
                                              "i24270"
                                              "i24268"
                                              "i24266"
                                              "i24264"
                                              "i24262"
                                              "i24260"
                                              "i24258"
                                              "i24256"
                                              "i24254"
                                              "i24252"
                                              "i24250"
                                              "i24248"
                                              "i24246"
                                              "i24244"
                                              "i24242"
                                              "i24240"
                                              "i24238"
                                              "i24236"
                                              "i24234"
                                              "i24232"
                                              "i24230"
                                              "i24228"
                                              "i24227"
                                              "i24225"
                                              "i24222"
                                              "i24221"
                                              "i24220"
                                              "i24218"
                                              "i24217"
                                              "i24215"
                                              "i24213"
                                              "i24211"
                                              "i24209"
                                              "i24207"
                                              "i24205"
                                              "i24203"
                                              "i24201"
                                              "i24198"
                                              "i24196"
                                              "i24195"
                                              "i24193"
                                              "i24191"
                                              "i24189"
                                              "i24187"
                                              "i24186"
                                              "i24185"
                                              "i24184"
                                              "i24182"
                                              "i24181"
                                              "i24178"
                                              "i24176"
                                              "i24174"
                                              "i24172"
                                              "i24170"
                                              "i24168"
                                              "i24167"
                                              "i24166"
                                              "i24164"
                                              "i24162"
                                              "i24161"
                                              "i24158"
                                              "i24157"
                                              "i24155"
                                              "i24153"
                                              "i24151"
                                              "i24149"
                                              "i24147"
                                              "i24145"
                                              "i24143"
                                              "i24141"
                                              "i24139"
                                              "i24136"
                                              "i24134"
                                              "i24132"
                                              "i24130"
                                              "i24128"
                                              "i24126"
                                              "i24124"
                                              "i24122"
                                              "i24120"
                                              "i24118"
                                              "i24116"
                                              "i24114"
                                              "i24112"
                                              "i24110"
                                              "i24108"
                                              "i24106"
                                              "i24104"
                                              "i24102"
                                              "i24100"
                                              "i24098"
                                              "i24096"
                                              "i24094"
                                              "i24092"
                                              "i24090"
                                              "i24089"
                                              "i24086"
                                              "i24084"
                                              "i24083"
                                              "i24082"
                                              "i24081"
                                              "i24080"
                                              "i24078"
                                              "i24076"
                                              "i24074"
                                              "i24071"
                                              "i24069"
                                              "i24067"
                                              "i24065"
                                              "i24063"
                                              "i24061"
                                              "i24059"
                                              "i24057"
                                              "i24055"
                                              "i24053"
                                              "i24051"
                                              "i24049"
                                              "i24047"
                                              "i24045"
                                              "i24043"
                                              "i24041"
                                              "i24039"
                                              "i24037"
                                              "i24035"))
                                           #(ribcage
                                             (define-structure
                                               define-expansion-accessors
                                               define-expansion-constructors)
                                             ((top) (top) (top))
                                             ("i23873" "i23872" "i23871"))
                                           #(ribcage () () ()))
                                          (hygiene guile))
                                       #{keys 38134}#))
                               #f)
                           (if (#{free-id=? 28259}#
                                 '#(syntax-object
                                    pad
                                    ((top)
                                     #(ribcage
                                       #(pat exp)
                                       #((top) (top))
                                       #("i27835" "i27836"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x keys clauses r mod)
                                       #((top) (top) (top) (top) (top))
                                       #("i27825"
                                         "i27826"
                                         "i27827"
                                         "i27828"
                                         "i27829"))
                                     #(ribcage
                                       (gen-syntax-case
                                         gen-clause
                                         build-dispatch-call
                                         convert-pattern)
                                       ((top) (top) (top) (top))
                                       ("i27638" "i27636" "i27634" "i27632"))
                                     #(ribcage
                                       (lambda-var-list
                                         gen-var
                                         strip
                                         expand-lambda-case
                                         lambda*-formals
                                         expand-simple-lambda
                                         lambda-formals
                                         ellipsis?
                                         expand-void
                                         eval-local-transformer
                                         expand-local-syntax
                                         expand-body
                                         expand-macro
                                         expand-call
                                         expand-expr
                                         expand
                                         syntax-type
                                         parse-when-list
                                         expand-install-global
                                         expand-top-sequence
                                         expand-sequence
                                         source-wrap
                                         wrap
                                         bound-id-member?
                                         distinct-bound-ids?
                                         valid-bound-ids?
                                         bound-id=?
                                         free-id=?
                                         resolve-identifier
                                         id-var-name
                                         same-marks?
                                         join-marks
                                         join-wraps
                                         smart-append
                                         make-binding-wrap
                                         extend-ribcage!
                                         make-empty-ribcage
                                         new-mark
                                         anti-mark
                                         the-anti-mark
                                         top-marked?
                                         top-wrap
                                         empty-wrap
                                         set-ribcage-labels!
                                         set-ribcage-marks!
                                         set-ribcage-symnames!
                                         ribcage-labels
                                         ribcage-marks
                                         ribcage-symnames
                                         ribcage?
                                         make-ribcage
                                         gen-labels
                                         gen-label
                                         make-rename
                                         rename-marks
                                         rename-new
                                         rename-old
                                         subst-rename?
                                         wrap-subst
                                         wrap-marks
                                         make-wrap
                                         id-sym-name&marks
                                         id-sym-name
                                         id?
                                         nonsymbol-id?
                                         global-extend
                                         macros-only-env
                                         extend-var-env
                                         extend-env
                                         null-env
                                         binding-value
                                         binding-type
                                         make-binding
                                         arg-check
                                         source-annotation
                                         no-source
                                         set-syntax-object-module!
                                         set-syntax-object-wrap!
                                         set-syntax-object-expression!
                                         syntax-object-module
                                         syntax-object-wrap
                                         syntax-object-expression
                                         syntax-object?
                                         make-syntax-object
                                         build-lexical-var
                                         build-letrec
                                         build-named-let
                                         build-let
                                         build-sequence
                                         build-data
                                         build-primref
                                         build-primcall
                                         build-lambda-case
                                         build-case-lambda
                                         build-simple-lambda
                                         build-global-definition
                                         build-global-assignment
                                         build-global-reference
                                         analyze-variable
                                         build-lexical-assignment
                                         build-lexical-reference
                                         build-dynlet
                                         build-conditional
                                         build-call
                                         build-void
                                         maybe-name-value!
                                         decorate-source
                                         get-global-definition-hook
                                         put-global-definition-hook
                                         gensym-hook
                                         local-eval-hook
                                         top-level-eval-hook
                                         fx<
                                         fx=
                                         fx-
                                         fx+
                                         set-lambda-meta!
                                         lambda-meta
                                         lambda?
                                         make-dynlet
                                         make-letrec
                                         make-let
                                         make-lambda-case
                                         make-lambda
                                         make-seq
                                         make-primcall
                                         make-call
                                         make-conditional
                                         make-toplevel-define
                                         make-toplevel-set
                                         make-toplevel-ref
                                         make-module-set
                                         make-module-ref
                                         make-lexical-set
                                         make-lexical-ref
                                         make-primitive-ref
                                         make-const
                                         make-void)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i24298"
                                        "i24296"
                                        "i24294"
                                        "i24292"
                                        "i24290"
                                        "i24288"
                                        "i24286"
                                        "i24284"
                                        "i24282"
                                        "i24280"
                                        "i24278"
                                        "i24276"
                                        "i24274"
                                        "i24272"
                                        "i24270"
                                        "i24268"
                                        "i24266"
                                        "i24264"
                                        "i24262"
                                        "i24260"
                                        "i24258"
                                        "i24256"
                                        "i24254"
                                        "i24252"
                                        "i24250"
                                        "i24248"
                                        "i24246"
                                        "i24244"
                                        "i24242"
                                        "i24240"
                                        "i24238"
                                        "i24236"
                                        "i24234"
                                        "i24232"
                                        "i24230"
                                        "i24228"
                                        "i24227"
                                        "i24225"
                                        "i24222"
                                        "i24221"
                                        "i24220"
                                        "i24218"
                                        "i24217"
                                        "i24215"
                                        "i24213"
                                        "i24211"
                                        "i24209"
                                        "i24207"
                                        "i24205"
                                        "i24203"
                                        "i24201"
                                        "i24198"
                                        "i24196"
                                        "i24195"
                                        "i24193"
                                        "i24191"
                                        "i24189"
                                        "i24187"
                                        "i24186"
                                        "i24185"
                                        "i24184"
                                        "i24182"
                                        "i24181"
                                        "i24178"
                                        "i24176"
                                        "i24174"
                                        "i24172"
                                        "i24170"
                                        "i24168"
                                        "i24167"
                                        "i24166"
                                        "i24164"
                                        "i24162"
                                        "i24161"
                                        "i24158"
                                        "i24157"
                                        "i24155"
                                        "i24153"
                                        "i24151"
                                        "i24149"
                                        "i24147"
                                        "i24145"
                                        "i24143"
                                        "i24141"
                                        "i24139"
                                        "i24136"
                                        "i24134"
                                        "i24132"
                                        "i24130"
                                        "i24128"
                                        "i24126"
                                        "i24124"
                                        "i24122"
                                        "i24120"
                                        "i24118"
                                        "i24116"
                                        "i24114"
                                        "i24112"
                                        "i24110"
                                        "i24108"
                                        "i24106"
                                        "i24104"
                                        "i24102"
                                        "i24100"
                                        "i24098"
                                        "i24096"
                                        "i24094"
                                        "i24092"
                                        "i24090"
                                        "i24089"
                                        "i24086"
                                        "i24084"
                                        "i24083"
                                        "i24082"
                                        "i24081"
                                        "i24080"
                                        "i24078"
                                        "i24076"
                                        "i24074"
                                        "i24071"
                                        "i24069"
                                        "i24067"
                                        "i24065"
                                        "i24063"
                                        "i24061"
                                        "i24059"
                                        "i24057"
                                        "i24055"
                                        "i24053"
                                        "i24051"
                                        "i24049"
                                        "i24047"
                                        "i24045"
                                        "i24043"
                                        "i24041"
                                        "i24039"
                                        "i24037"
                                        "i24035"))
                                     #(ribcage
                                       (define-structure
                                         define-expansion-accessors
                                         define-expansion-constructors)
                                       ((top) (top) (top))
                                       ("i23873" "i23872" "i23871"))
                                     #(ribcage () () ()))
                                    (hygiene guile))
                                 '#(syntax-object
                                    _
                                    ((top)
                                     #(ribcage
                                       #(pat exp)
                                       #((top) (top))
                                       #("i27835" "i27836"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x keys clauses r mod)
                                       #((top) (top) (top) (top) (top))
                                       #("i27825"
                                         "i27826"
                                         "i27827"
                                         "i27828"
                                         "i27829"))
                                     #(ribcage
                                       (gen-syntax-case
                                         gen-clause
                                         build-dispatch-call
                                         convert-pattern)
                                       ((top) (top) (top) (top))
                                       ("i27638" "i27636" "i27634" "i27632"))
                                     #(ribcage
                                       (lambda-var-list
                                         gen-var
                                         strip
                                         expand-lambda-case
                                         lambda*-formals
                                         expand-simple-lambda
                                         lambda-formals
                                         ellipsis?
                                         expand-void
                                         eval-local-transformer
                                         expand-local-syntax
                                         expand-body
                                         expand-macro
                                         expand-call
                                         expand-expr
                                         expand
                                         syntax-type
                                         parse-when-list
                                         expand-install-global
                                         expand-top-sequence
                                         expand-sequence
                                         source-wrap
                                         wrap
                                         bound-id-member?
                                         distinct-bound-ids?
                                         valid-bound-ids?
                                         bound-id=?
                                         free-id=?
                                         resolve-identifier
                                         id-var-name
                                         same-marks?
                                         join-marks
                                         join-wraps
                                         smart-append
                                         make-binding-wrap
                                         extend-ribcage!
                                         make-empty-ribcage
                                         new-mark
                                         anti-mark
                                         the-anti-mark
                                         top-marked?
                                         top-wrap
                                         empty-wrap
                                         set-ribcage-labels!
                                         set-ribcage-marks!
                                         set-ribcage-symnames!
                                         ribcage-labels
                                         ribcage-marks
                                         ribcage-symnames
                                         ribcage?
                                         make-ribcage
                                         gen-labels
                                         gen-label
                                         make-rename
                                         rename-marks
                                         rename-new
                                         rename-old
                                         subst-rename?
                                         wrap-subst
                                         wrap-marks
                                         make-wrap
                                         id-sym-name&marks
                                         id-sym-name
                                         id?
                                         nonsymbol-id?
                                         global-extend
                                         macros-only-env
                                         extend-var-env
                                         extend-env
                                         null-env
                                         binding-value
                                         binding-type
                                         make-binding
                                         arg-check
                                         source-annotation
                                         no-source
                                         set-syntax-object-module!
                                         set-syntax-object-wrap!
                                         set-syntax-object-expression!
                                         syntax-object-module
                                         syntax-object-wrap
                                         syntax-object-expression
                                         syntax-object?
                                         make-syntax-object
                                         build-lexical-var
                                         build-letrec
                                         build-named-let
                                         build-let
                                         build-sequence
                                         build-data
                                         build-primref
                                         build-primcall
                                         build-lambda-case
                                         build-case-lambda
                                         build-simple-lambda
                                         build-global-definition
                                         build-global-assignment
                                         build-global-reference
                                         analyze-variable
                                         build-lexical-assignment
                                         build-lexical-reference
                                         build-dynlet
                                         build-conditional
                                         build-call
                                         build-void
                                         maybe-name-value!
                                         decorate-source
                                         get-global-definition-hook
                                         put-global-definition-hook
                                         gensym-hook
                                         local-eval-hook
                                         top-level-eval-hook
                                         fx<
                                         fx=
                                         fx-
                                         fx+
                                         set-lambda-meta!
                                         lambda-meta
                                         lambda?
                                         make-dynlet
                                         make-letrec
                                         make-let
                                         make-lambda-case
                                         make-lambda
                                         make-seq
                                         make-primcall
                                         make-call
                                         make-conditional
                                         make-toplevel-define
                                         make-toplevel-set
                                         make-toplevel-ref
                                         make-module-set
                                         make-module-ref
                                         make-lexical-set
                                         make-lexical-ref
                                         make-primitive-ref
                                         make-const
                                         make-void)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i24298"
                                        "i24296"
                                        "i24294"
                                        "i24292"
                                        "i24290"
                                        "i24288"
                                        "i24286"
                                        "i24284"
                                        "i24282"
                                        "i24280"
                                        "i24278"
                                        "i24276"
                                        "i24274"
                                        "i24272"
                                        "i24270"
                                        "i24268"
                                        "i24266"
                                        "i24264"
                                        "i24262"
                                        "i24260"
                                        "i24258"
                                        "i24256"
                                        "i24254"
                                        "i24252"
                                        "i24250"
                                        "i24248"
                                        "i24246"
                                        "i24244"
                                        "i24242"
                                        "i24240"
                                        "i24238"
                                        "i24236"
                                        "i24234"
                                        "i24232"
                                        "i24230"
                                        "i24228"
                                        "i24227"
                                        "i24225"
                                        "i24222"
                                        "i24221"
                                        "i24220"
                                        "i24218"
                                        "i24217"
                                        "i24215"
                                        "i24213"
                                        "i24211"
                                        "i24209"
                                        "i24207"
                                        "i24205"
                                        "i24203"
                                        "i24201"
                                        "i24198"
                                        "i24196"
                                        "i24195"
                                        "i24193"
                                        "i24191"
                                        "i24189"
                                        "i24187"
                                        "i24186"
                                        "i24185"
                                        "i24184"
                                        "i24182"
                                        "i24181"
                                        "i24178"
                                        "i24176"
                                        "i24174"
                                        "i24172"
                                        "i24170"
                                        "i24168"
                                        "i24167"
                                        "i24166"
                                        "i24164"
                                        "i24162"
                                        "i24161"
                                        "i24158"
                                        "i24157"
                                        "i24155"
                                        "i24153"
                                        "i24151"
                                        "i24149"
                                        "i24147"
                                        "i24145"
                                        "i24143"
                                        "i24141"
                                        "i24139"
                                        "i24136"
                                        "i24134"
                                        "i24132"
                                        "i24130"
                                        "i24128"
                                        "i24126"
                                        "i24124"
                                        "i24122"
                                        "i24120"
                                        "i24118"
                                        "i24116"
                                        "i24114"
                                        "i24112"
                                        "i24110"
                                        "i24108"
                                        "i24106"
                                        "i24104"
                                        "i24102"
                                        "i24100"
                                        "i24098"
                                        "i24096"
                                        "i24094"
                                        "i24092"
                                        "i24090"
                                        "i24089"
                                        "i24086"
                                        "i24084"
                                        "i24083"
                                        "i24082"
                                        "i24081"
                                        "i24080"
                                        "i24078"
                                        "i24076"
                                        "i24074"
                                        "i24071"
                                        "i24069"
                                        "i24067"
                                        "i24065"
                                        "i24063"
                                        "i24061"
                                        "i24059"
                                        "i24057"
                                        "i24055"
                                        "i24053"
                                        "i24051"
                                        "i24049"
                                        "i24047"
                                        "i24045"
                                        "i24043"
                                        "i24041"
                                        "i24039"
                                        "i24037"
                                        "i24035"))
                                     #(ribcage
                                       (define-structure
                                         define-expansion-accessors
                                         define-expansion-constructors)
                                       ((top) (top) (top))
                                       ("i23873" "i23872" "i23871"))
                                     #(ribcage () () ()))
                                    (hygiene guile)))
                             (#{expand 28271}#
                               #{exp 38166}#
                               #{r 38136}#
                               '(())
                               #{mod 38137}#)
                             (let ((#{labels 38275}#
                                     (list (symbol->string (gensym "i"))))
                                   (#{var 38276}#
                                     (let ((#{id 38314}#
                                             (if (if (vector? #{pat 38165}#)
                                                   (if (= (vector-length
                                                            #{pat 38165}#)
                                                          4)
                                                     (eq? (vector-ref
                                                            #{pat 38165}#
                                                            0)
                                                          'syntax-object)
                                                     #f)
                                                   #f)
                                               (vector-ref #{pat 38165}# 1)
                                               #{pat 38165}#)))
                                       (gensym
                                         (string-append
                                           (symbol->string #{id 38314}#)
                                           " ")))))
                               (#{build-call 28205}#
                                 #f
                                 (#{build-simple-lambda 28214}#
                                   #f
                                   (list (syntax->datum #{pat 38165}#))
                                   #f
                                   (list #{var 38276}#)
                                   '()
                                   (#{expand 28271}#
                                     #{exp 38166}#
                                     (#{extend-env 28233}#
                                       #{labels 38275}#
                                       (list (cons 'syntax
                                                   (cons #{var 38276}# 0)))
                                       #{r 38136}#)
                                     (#{make-binding-wrap 28252}#
                                       (list #{pat 38165}#)
                                       #{labels 38275}#
                                       '(()))
                                     #{mod 38137}#))
                                 (list #{x 38133}#))))
                           (#{gen-clause 37428}#
                             #{x 38133}#
                             #{keys 38134}#
                             (cdr #{clauses 38135}#)
                             #{r 38136}#
                             #{pat 38165}#
                             #t
                             #{exp 38166}#
                             #{mod 38137}#)))
                       #{tmp 38163}#)
                     (let ((#{tmp 38624}#
                             ($sc-dispatch #{tmp 38162}# '(any any any))))
                       (if #{tmp 38624}#
                         (@apply
                           (lambda (#{pat 38626}#
                                    #{fender 38627}#
                                    #{exp 38628}#)
                             (#{gen-clause 37428}#
                               #{x 38133}#
                               #{keys 38134}#
                               (cdr #{clauses 38135}#)
                               #{r 38136}#
                               #{pat 38626}#
                               #{fender 38627}#
                               #{exp 38628}#
                               #{mod 38137}#))
                           #{tmp 38624}#)
                         (syntax-violation
                           'syntax-case
                           "invalid clause"
                           (car #{clauses 38135}#)))))))))))
        (lambda (#{e 37430}#
                 #{r 37431}#
                 #{w 37432}#
                 #{s 37433}#
                 #{mod 37434}#)
          (let ((#{e 37435}#
                  (let ((#{x 38044}#
                          (begin
                            (if (if (pair? #{e 37430}#) #{s 37433}# #f)
                              (set-source-properties! #{e 37430}# #{s 37433}#))
                            #{e 37430}#)))
                    (if (if (null? (car #{w 37432}#))
                          (null? (cdr #{w 37432}#))
                          #f)
                      #{x 38044}#
                      (if (if (vector? #{x 38044}#)
                            (if (= (vector-length #{x 38044}#) 4)
                              (eq? (vector-ref #{x 38044}# 0) 'syntax-object)
                              #f)
                            #f)
                        (let ((#{expression 38076}# (vector-ref #{x 38044}# 1))
                              (#{wrap 38077}#
                                (let ((#{w2 38085}#
                                        (vector-ref #{x 38044}# 2)))
                                  (let ((#{m1 38086}# (car #{w 37432}#))
                                        (#{s1 38087}# (cdr #{w 37432}#)))
                                    (if (null? #{m1 38086}#)
                                      (if (null? #{s1 38087}#)
                                        #{w2 38085}#
                                        (cons (car #{w2 38085}#)
                                              (let ((#{m2 38102}#
                                                      (cdr #{w2 38085}#)))
                                                (if (null? #{m2 38102}#)
                                                  #{s1 38087}#
                                                  (append
                                                    #{s1 38087}#
                                                    #{m2 38102}#)))))
                                      (cons (let ((#{m2 38110}#
                                                    (car #{w2 38085}#)))
                                              (if (null? #{m2 38110}#)
                                                #{m1 38086}#
                                                (append
                                                  #{m1 38086}#
                                                  #{m2 38110}#)))
                                            (let ((#{m2 38118}#
                                                    (cdr #{w2 38085}#)))
                                              (if (null? #{m2 38118}#)
                                                #{s1 38087}#
                                                (append
                                                  #{s1 38087}#
                                                  #{m2 38118}#))))))))
                              (#{module 38078}# (vector-ref #{x 38044}# 3)))
                          (vector
                            'syntax-object
                            #{expression 38076}#
                            #{wrap 38077}#
                            #{module 38078}#))
                        (if (null? #{x 38044}#)
                          #{x 38044}#
                          (vector
                            'syntax-object
                            #{x 38044}#
                            #{w 37432}#
                            #{mod 37434}#)))))))
            (let ((#{tmp 37436}# #{e 37435}#))
              (let ((#{tmp 37437}#
                      ($sc-dispatch
                        #{tmp 37436}#
                        '(_ any each-any . each-any))))
                (if #{tmp 37437}#
                  (@apply
                    (lambda (#{val 37485}# #{key 37486}# #{m 37487}#)
                      (if (and-map
                            (lambda (#{x 37488}#)
                              (if (if (symbol? #{x 37488}#)
                                    #t
                                    (if (if (vector? #{x 37488}#)
                                          (if (= (vector-length #{x 37488}#) 4)
                                            (eq? (vector-ref #{x 37488}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref #{x 37488}# 1))
                                      #f))
                                (not (if (if (if (vector? #{x 37488}#)
                                               (if (= (vector-length
                                                        #{x 37488}#)
                                                      4)
                                                 (eq? (vector-ref
                                                        #{x 37488}#
                                                        0)
                                                      'syntax-object)
                                                 #f)
                                               #f)
                                           (symbol? (vector-ref #{x 37488}# 1))
                                           #f)
                                       (#{free-id=? 28259}#
                                         #{x 37488}#
                                         '#(syntax-object
                                            ...
                                            ((top)
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i26166"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 expand-lambda-case
                                                 lambda*-formals
                                                 expand-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 expand-void
                                                 eval-local-transformer
                                                 expand-local-syntax
                                                 expand-body
                                                 expand-macro
                                                 expand-call
                                                 expand-expr
                                                 expand
                                                 syntax-type
                                                 parse-when-list
                                                 expand-install-global
                                                 expand-top-sequence
                                                 expand-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 resolve-identifier
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-primcall
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-call
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-seq
                                                 make-primcall
                                                 make-call
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i24298"
                                                "i24296"
                                                "i24294"
                                                "i24292"
                                                "i24290"
                                                "i24288"
                                                "i24286"
                                                "i24284"
                                                "i24282"
                                                "i24280"
                                                "i24278"
                                                "i24276"
                                                "i24274"
                                                "i24272"
                                                "i24270"
                                                "i24268"
                                                "i24266"
                                                "i24264"
                                                "i24262"
                                                "i24260"
                                                "i24258"
                                                "i24256"
                                                "i24254"
                                                "i24252"
                                                "i24250"
                                                "i24248"
                                                "i24246"
                                                "i24244"
                                                "i24242"
                                                "i24240"
                                                "i24238"
                                                "i24236"
                                                "i24234"
                                                "i24232"
                                                "i24230"
                                                "i24228"
                                                "i24227"
                                                "i24225"
                                                "i24222"
                                                "i24221"
                                                "i24220"
                                                "i24218"
                                                "i24217"
                                                "i24215"
                                                "i24213"
                                                "i24211"
                                                "i24209"
                                                "i24207"
                                                "i24205"
                                                "i24203"
                                                "i24201"
                                                "i24198"
                                                "i24196"
                                                "i24195"
                                                "i24193"
                                                "i24191"
                                                "i24189"
                                                "i24187"
                                                "i24186"
                                                "i24185"
                                                "i24184"
                                                "i24182"
                                                "i24181"
                                                "i24178"
                                                "i24176"
                                                "i24174"
                                                "i24172"
                                                "i24170"
                                                "i24168"
                                                "i24167"
                                                "i24166"
                                                "i24164"
                                                "i24162"
                                                "i24161"
                                                "i24158"
                                                "i24157"
                                                "i24155"
                                                "i24153"
                                                "i24151"
                                                "i24149"
                                                "i24147"
                                                "i24145"
                                                "i24143"
                                                "i24141"
                                                "i24139"
                                                "i24136"
                                                "i24134"
                                                "i24132"
                                                "i24130"
                                                "i24128"
                                                "i24126"
                                                "i24124"
                                                "i24122"
                                                "i24120"
                                                "i24118"
                                                "i24116"
                                                "i24114"
                                                "i24112"
                                                "i24110"
                                                "i24108"
                                                "i24106"
                                                "i24104"
                                                "i24102"
                                                "i24100"
                                                "i24098"
                                                "i24096"
                                                "i24094"
                                                "i24092"
                                                "i24090"
                                                "i24089"
                                                "i24086"
                                                "i24084"
                                                "i24083"
                                                "i24082"
                                                "i24081"
                                                "i24080"
                                                "i24078"
                                                "i24076"
                                                "i24074"
                                                "i24071"
                                                "i24069"
                                                "i24067"
                                                "i24065"
                                                "i24063"
                                                "i24061"
                                                "i24059"
                                                "i24057"
                                                "i24055"
                                                "i24053"
                                                "i24051"
                                                "i24049"
                                                "i24047"
                                                "i24045"
                                                "i24043"
                                                "i24041"
                                                "i24039"
                                                "i24037"
                                                "i24035"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("i23873" "i23872" "i23871"))
                                             #(ribcage () () ()))
                                            (hygiene guile)))
                                       #f))
                                #f))
                            #{key 37486}#)
                        (let ((#{x 37553}#
                                (gensym
                                  (string-append (symbol->string 'tmp) " "))))
                          (#{build-call 28205}#
                            #{s 37433}#
                            (let ((#{req 37691}# (list 'tmp))
                                  (#{vars 37693}# (list #{x 37553}#))
                                  (#{exp 37695}#
                                    (#{gen-syntax-case 37429}#
                                      (make-struct/no-tail
                                        (vector-ref %expanded-vtables 3)
                                        #f
                                        'tmp
                                        #{x 37553}#)
                                      #{key 37486}#
                                      #{m 37487}#
                                      #{r 37431}#
                                      #{mod 37434}#)))
                              (let ((#{body 37700}#
                                      (make-struct/no-tail
                                        (vector-ref %expanded-vtables 15)
                                        #f
                                        #{req 37691}#
                                        #f
                                        #f
                                        #f
                                        '()
                                        #{vars 37693}#
                                        #{exp 37695}#
                                        #f)))
                                (make-struct/no-tail
                                  (vector-ref %expanded-vtables 14)
                                  #f
                                  '()
                                  #{body 37700}#)))
                            (list (#{expand 28271}#
                                    #{val 37485}#
                                    #{r 37431}#
                                    '(())
                                    #{mod 37434}#))))
                        (syntax-violation
                          'syntax-case
                          "invalid literals list"
                          #{e 37435}#)))
                    #{tmp 37437}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{tmp 37436}#))))))))
    (set! macroexpand
      (lambda*
        (#{x 40406}#
          #:optional
          (#{m 40407}# 'e)
          (#{esew 40408}# '(eval)))
        (#{expand-top-sequence 28267}#
          (list #{x 40406}#)
          '()
          '((top))
          #f
          #{m 40407}#
          #{esew 40408}#
          (cons 'hygiene (module-name (current-module))))))
    (set! identifier?
      (lambda (#{x 40411}#)
        (if (if (vector? #{x 40411}#)
              (if (= (vector-length #{x 40411}#) 4)
                (eq? (vector-ref #{x 40411}# 0) 'syntax-object)
                #f)
              #f)
          (symbol? (vector-ref #{x 40411}# 1))
          #f)))
    (set! datum->syntax
      (lambda (#{id 40436}# #{datum 40437}#)
        (let ((#{wrap 40442}# (vector-ref #{id 40436}# 2))
              (#{module 40443}# (vector-ref #{id 40436}# 3)))
          (vector
            'syntax-object
            #{datum 40437}#
            #{wrap 40442}#
            #{module 40443}#))))
    (set! syntax->datum
      (lambda (#{x 40450}#)
        (#{strip 28284}# #{x 40450}# '(()))))
    (set! syntax-source
      (lambda (#{x 40453}#)
        (#{source-annotation 28232}# #{x 40453}#)))
    (set! generate-temporaries
      (lambda (#{ls 40637}#)
        (begin
          (if (not (list? #{ls 40637}#))
            (syntax-violation
              'generate-temporaries
              "invalid argument"
              #{ls 40637}#))
          (let ((#{mod 40645}#
                  (cons 'hygiene (module-name (current-module)))))
            (map (lambda (#{x 40646}#)
                   (let ((#{x 40650}# (gensym)))
                     (if (if (vector? #{x 40650}#)
                           (if (= (vector-length #{x 40650}#) 4)
                             (eq? (vector-ref #{x 40650}# 0) 'syntax-object)
                             #f)
                           #f)
                       (let ((#{expression 40665}# (vector-ref #{x 40650}# 1))
                             (#{wrap 40666}#
                               (let ((#{w2 40674}# (vector-ref #{x 40650}# 2)))
                                 (cons (let ((#{m2 40681}# (car #{w2 40674}#)))
                                         (if (null? #{m2 40681}#)
                                           '(top)
                                           (append '(top) #{m2 40681}#)))
                                       (let ((#{m2 40688}# (cdr #{w2 40674}#)))
                                         (if (null? #{m2 40688}#)
                                           '()
                                           (append '() #{m2 40688}#))))))
                             (#{module 40667}# (vector-ref #{x 40650}# 3)))
                         (vector
                           'syntax-object
                           #{expression 40665}#
                           #{wrap 40666}#
                           #{module 40667}#))
                       (if (null? #{x 40650}#)
                         #{x 40650}#
                         (vector
                           'syntax-object
                           #{x 40650}#
                           '((top))
                           #{mod 40645}#)))))
                 #{ls 40637}#)))))
    (set! free-identifier=?
      (lambda (#{x 40697}# #{y 40698}#)
        (begin
          (if (not (if (if (vector? #{x 40697}#)
                         (if (= (vector-length #{x 40697}#) 4)
                           (eq? (vector-ref #{x 40697}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{x 40697}# 1))
                     #f))
            (syntax-violation
              'free-identifier=?
              "invalid argument"
              #{x 40697}#))
          (if (not (if (if (vector? #{y 40698}#)
                         (if (= (vector-length #{y 40698}#) 4)
                           (eq? (vector-ref #{y 40698}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{y 40698}# 1))
                     #f))
            (syntax-violation
              'free-identifier=?
              "invalid argument"
              #{y 40698}#))
          (#{free-id=? 28259}# #{x 40697}# #{y 40698}#))))
    (set! bound-identifier=?
      (lambda (#{x 40773}# #{y 40774}#)
        (begin
          (if (not (if (if (vector? #{x 40773}#)
                         (if (= (vector-length #{x 40773}#) 4)
                           (eq? (vector-ref #{x 40773}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{x 40773}# 1))
                     #f))
            (syntax-violation
              'bound-identifier=?
              "invalid argument"
              #{x 40773}#))
          (if (not (if (if (vector? #{y 40774}#)
                         (if (= (vector-length #{y 40774}#) 4)
                           (eq? (vector-ref #{y 40774}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{y 40774}# 1))
                     #f))
            (syntax-violation
              'bound-identifier=?
              "invalid argument"
              #{y 40774}#))
          (#{bound-id=? 28260}# #{x 40773}# #{y 40774}#))))
    (set! syntax-violation
      (lambda*
        (#{who 40940}#
          #{message 40941}#
          #{form 40942}#
          #:optional
          (#{subform 40943}# #f))
        (begin
          (if (not (if (not #{who 40940}#)
                     (not #{who 40940}#)
                     (let ((#{t 40961}# (string? #{who 40940}#)))
                       (if #{t 40961}#
                         #{t 40961}#
                         (symbol? #{who 40940}#)))))
            (syntax-violation
              'syntax-violation
              "invalid argument"
              #{who 40940}#))
          (if (not (string? #{message 40941}#))
            (syntax-violation
              'syntax-violation
              "invalid argument"
              #{message 40941}#))
          (throw 'syntax-error
                 #{who 40940}#
                 #{message 40941}#
                 (#{source-annotation 28232}#
                   (if #{form 40942}#
                     #{form 40942}#
                     #{subform 40943}#))
                 (#{strip 28284}# #{form 40942}# '(()))
                 (if #{subform 40943}#
                   (#{strip 28284}# #{subform 40943}# '(()))
                   #f)))))
    (letrec*
      ((#{match-each 41192}#
         (lambda (#{e 42071}#
                  #{p 42072}#
                  #{w 42073}#
                  #{mod 42074}#)
           (if (pair? #{e 42071}#)
             (let ((#{first 42075}#
                     (#{match 41198}#
                       (car #{e 42071}#)
                       #{p 42072}#
                       #{w 42073}#
                       '()
                       #{mod 42074}#)))
               (if #{first 42075}#
                 (let ((#{rest 42078}#
                         (#{match-each 41192}#
                           (cdr #{e 42071}#)
                           #{p 42072}#
                           #{w 42073}#
                           #{mod 42074}#)))
                   (if #{rest 42078}#
                     (cons #{first 42075}# #{rest 42078}#)
                     #f))
                 #f))
             (if (null? #{e 42071}#)
               '()
               (if (if (vector? #{e 42071}#)
                     (if (= (vector-length #{e 42071}#) 4)
                       (eq? (vector-ref #{e 42071}# 0) 'syntax-object)
                       #f)
                     #f)
                 (#{match-each 41192}#
                   (vector-ref #{e 42071}# 1)
                   #{p 42072}#
                   (let ((#{w2 42100}# (vector-ref #{e 42071}# 2)))
                     (let ((#{m1 42101}# (car #{w 42073}#))
                           (#{s1 42102}# (cdr #{w 42073}#)))
                       (if (null? #{m1 42101}#)
                         (if (null? #{s1 42102}#)
                           #{w2 42100}#
                           (cons (car #{w2 42100}#)
                                 (let ((#{m2 42113}# (cdr #{w2 42100}#)))
                                   (if (null? #{m2 42113}#)
                                     #{s1 42102}#
                                     (append #{s1 42102}# #{m2 42113}#)))))
                         (cons (let ((#{m2 42121}# (car #{w2 42100}#)))
                                 (if (null? #{m2 42121}#)
                                   #{m1 42101}#
                                   (append #{m1 42101}# #{m2 42121}#)))
                               (let ((#{m2 42129}# (cdr #{w2 42100}#)))
                                 (if (null? #{m2 42129}#)
                                   #{s1 42102}#
                                   (append #{s1 42102}# #{m2 42129}#)))))))
                   (vector-ref #{e 42071}# 3))
                 #f)))))
       (#{match-each-any 41194}#
         (lambda (#{e 42138}# #{w 42139}# #{mod 42140}#)
           (if (pair? #{e 42138}#)
             (let ((#{l 42141}#
                     (#{match-each-any 41194}#
                       (cdr #{e 42138}#)
                       #{w 42139}#
                       #{mod 42140}#)))
               (if #{l 42141}#
                 (cons (let ((#{x 42146}# (car #{e 42138}#)))
                         (if (if (null? (car #{w 42139}#))
                               (null? (cdr #{w 42139}#))
                               #f)
                           #{x 42146}#
                           (if (if (vector? #{x 42146}#)
                                 (if (= (vector-length #{x 42146}#) 4)
                                   (eq? (vector-ref #{x 42146}# 0)
                                        'syntax-object)
                                   #f)
                                 #f)
                             (let ((#{expression 42164}#
                                     (vector-ref #{x 42146}# 1))
                                   (#{wrap 42165}#
                                     (let ((#{w2 42173}#
                                             (vector-ref #{x 42146}# 2)))
                                       (let ((#{m1 42174}# (car #{w 42139}#))
                                             (#{s1 42175}# (cdr #{w 42139}#)))
                                         (if (null? #{m1 42174}#)
                                           (if (null? #{s1 42175}#)
                                             #{w2 42173}#
                                             (cons (car #{w2 42173}#)
                                                   (let ((#{m2 42190}#
                                                           (cdr #{w2 42173}#)))
                                                     (if (null? #{m2 42190}#)
                                                       #{s1 42175}#
                                                       (append
                                                         #{s1 42175}#
                                                         #{m2 42190}#)))))
                                           (cons (let ((#{m2 42198}#
                                                         (car #{w2 42173}#)))
                                                   (if (null? #{m2 42198}#)
                                                     #{m1 42174}#
                                                     (append
                                                       #{m1 42174}#
                                                       #{m2 42198}#)))
                                                 (let ((#{m2 42206}#
                                                         (cdr #{w2 42173}#)))
                                                   (if (null? #{m2 42206}#)
                                                     #{s1 42175}#
                                                     (append
                                                       #{s1 42175}#
                                                       #{m2 42206}#))))))))
                                   (#{module 42166}#
                                     (vector-ref #{x 42146}# 3)))
                               (vector
                                 'syntax-object
                                 #{expression 42164}#
                                 #{wrap 42165}#
                                 #{module 42166}#))
                             (if (null? #{x 42146}#)
                               #{x 42146}#
                               (vector
                                 'syntax-object
                                 #{x 42146}#
                                 #{w 42139}#
                                 #{mod 42140}#)))))
                       #{l 42141}#)
                 #f))
             (if (null? #{e 42138}#)
               '()
               (if (if (vector? #{e 42138}#)
                     (if (= (vector-length #{e 42138}#) 4)
                       (eq? (vector-ref #{e 42138}# 0) 'syntax-object)
                       #f)
                     #f)
                 (#{match-each-any 41194}#
                   (vector-ref #{e 42138}# 1)
                   (let ((#{w2 42239}# (vector-ref #{e 42138}# 2)))
                     (let ((#{m1 42240}# (car #{w 42139}#))
                           (#{s1 42241}# (cdr #{w 42139}#)))
                       (if (null? #{m1 42240}#)
                         (if (null? #{s1 42241}#)
                           #{w2 42239}#
                           (cons (car #{w2 42239}#)
                                 (let ((#{m2 42252}# (cdr #{w2 42239}#)))
                                   (if (null? #{m2 42252}#)
                                     #{s1 42241}#
                                     (append #{s1 42241}# #{m2 42252}#)))))
                         (cons (let ((#{m2 42260}# (car #{w2 42239}#)))
                                 (if (null? #{m2 42260}#)
                                   #{m1 42240}#
                                   (append #{m1 42240}# #{m2 42260}#)))
                               (let ((#{m2 42268}# (cdr #{w2 42239}#)))
                                 (if (null? #{m2 42268}#)
                                   #{s1 42241}#
                                   (append #{s1 42241}# #{m2 42268}#)))))))
                   #{mod 42140}#)
                 #f)))))
       (#{match-empty 41195}#
         (lambda (#{p 42273}# #{r 42274}#)
           (if (null? #{p 42273}#)
             #{r 42274}#
             (if (eq? #{p 42273}# '_)
               #{r 42274}#
               (if (eq? #{p 42273}# 'any)
                 (cons '() #{r 42274}#)
                 (if (pair? #{p 42273}#)
                   (#{match-empty 41195}#
                     (car #{p 42273}#)
                     (#{match-empty 41195}#
                       (cdr #{p 42273}#)
                       #{r 42274}#))
                   (if (eq? #{p 42273}# 'each-any)
                     (cons '() #{r 42274}#)
                     (let ((#{atom-key 42275}# (vector-ref #{p 42273}# 0)))
                       (if (eqv? #{atom-key 42275}# 'each)
                         (#{match-empty 41195}#
                           (vector-ref #{p 42273}# 1)
                           #{r 42274}#)
                         (if (eqv? #{atom-key 42275}# 'each+)
                           (#{match-empty 41195}#
                             (vector-ref #{p 42273}# 1)
                             (#{match-empty 41195}#
                               (reverse (vector-ref #{p 42273}# 2))
                               (#{match-empty 41195}#
                                 (vector-ref #{p 42273}# 3)
                                 #{r 42274}#)))
                           (if (if (eqv? #{atom-key 42275}# 'free-id)
                                 #t
                                 (eqv? #{atom-key 42275}# 'atom))
                             #{r 42274}#
                             (if (eqv? #{atom-key 42275}# 'vector)
                               (#{match-empty 41195}#
                                 (vector-ref #{p 42273}# 1)
                                 #{r 42274}#)))))))))))))
       (#{combine 41196}#
         (lambda (#{r* 42294}# #{r 42295}#)
           (if (null? (car #{r* 42294}#))
             #{r 42295}#
             (cons (map car #{r* 42294}#)
                   (#{combine 41196}#
                     (map cdr #{r* 42294}#)
                     #{r 42295}#)))))
       (#{match* 41197}#
         (lambda (#{e 41227}#
                  #{p 41228}#
                  #{w 41229}#
                  #{r 41230}#
                  #{mod 41231}#)
           (if (null? #{p 41228}#)
             (if (null? #{e 41227}#) #{r 41230}# #f)
             (if (pair? #{p 41228}#)
               (if (pair? #{e 41227}#)
                 (#{match 41198}#
                   (car #{e 41227}#)
                   (car #{p 41228}#)
                   #{w 41229}#
                   (#{match 41198}#
                     (cdr #{e 41227}#)
                     (cdr #{p 41228}#)
                     #{w 41229}#
                     #{r 41230}#
                     #{mod 41231}#)
                   #{mod 41231}#)
                 #f)
               (if (eq? #{p 41228}# 'each-any)
                 (let ((#{l 41236}#
                         (#{match-each-any 41194}#
                           #{e 41227}#
                           #{w 41229}#
                           #{mod 41231}#)))
                   (if #{l 41236}#
                     (cons #{l 41236}# #{r 41230}#)
                     #f))
                 (let ((#{atom-key 41241}# (vector-ref #{p 41228}# 0)))
                   (if (eqv? #{atom-key 41241}# 'each)
                     (if (null? #{e 41227}#)
                       (#{match-empty 41195}#
                         (vector-ref #{p 41228}# 1)
                         #{r 41230}#)
                       (let ((#{l 41248}#
                               (#{match-each 41192}#
                                 #{e 41227}#
                                 (vector-ref #{p 41228}# 1)
                                 #{w 41229}#
                                 #{mod 41231}#)))
                         (if #{l 41248}#
                           (letrec*
                             ((#{collect 41251}#
                                (lambda (#{l 41308}#)
                                  (if (null? (car #{l 41308}#))
                                    #{r 41230}#
                                    (cons (map car #{l 41308}#)
                                          (#{collect 41251}#
                                            (map cdr #{l 41308}#)))))))
                             (#{collect 41251}# #{l 41248}#))
                           #f)))
                     (if (eqv? #{atom-key 41241}# 'each+)
                       (call-with-values
                         (lambda ()
                           (let ((#{x-pat 41317}# (vector-ref #{p 41228}# 1))
                                 (#{y-pat 41318}# (vector-ref #{p 41228}# 2))
                                 (#{z-pat 41319}# (vector-ref #{p 41228}# 3)))
                             (letrec*
                               ((#{f 41323}#
                                  (lambda (#{e 41325}# #{w 41326}#)
                                    (if (pair? #{e 41325}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{f 41323}#
                                            (cdr #{e 41325}#)
                                            #{w 41326}#))
                                        (lambda (#{xr* 41327}#
                                                 #{y-pat 41328}#
                                                 #{r 41329}#)
                                          (if #{r 41329}#
                                            (if (null? #{y-pat 41328}#)
                                              (let ((#{xr 41330}#
                                                      (#{match 41198}#
                                                        (car #{e 41325}#)
                                                        #{x-pat 41317}#
                                                        #{w 41326}#
                                                        '()
                                                        #{mod 41231}#)))
                                                (if #{xr 41330}#
                                                  (values
                                                    (cons #{xr 41330}#
                                                          #{xr* 41327}#)
                                                    #{y-pat 41328}#
                                                    #{r 41329}#)
                                                  (values #f #f #f)))
                                              (values
                                                '()
                                                (cdr #{y-pat 41328}#)
                                                (#{match 41198}#
                                                  (car #{e 41325}#)
                                                  (car #{y-pat 41328}#)
                                                  #{w 41326}#
                                                  #{r 41329}#
                                                  #{mod 41231}#)))
                                            (values #f #f #f))))
                                      (if (if (vector? #{e 41325}#)
                                            (if (= (vector-length #{e 41325}#)
                                                   4)
                                              (eq? (vector-ref #{e 41325}# 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (#{f 41323}#
                                          (vector-ref #{e 41325}# 1)
                                          (let ((#{m1 41356}#
                                                  (car #{w 41326}#))
                                                (#{s1 41357}#
                                                  (cdr #{w 41326}#)))
                                            (if (null? #{m1 41356}#)
                                              (if (null? #{s1 41357}#)
                                                #{e 41325}#
                                                (cons (car #{e 41325}#)
                                                      (let ((#{m2 41369}#
                                                              (cdr #{e 41325}#)))
                                                        (if (null? #{m2 41369}#)
                                                          #{s1 41357}#
                                                          (append
                                                            #{s1 41357}#
                                                            #{m2 41369}#)))))
                                              (cons (let ((#{m2 41379}#
                                                            (car #{e 41325}#)))
                                                      (if (null? #{m2 41379}#)
                                                        #{m1 41356}#
                                                        (append
                                                          #{m1 41356}#
                                                          #{m2 41379}#)))
                                                    (let ((#{m2 41389}#
                                                            (cdr #{e 41325}#)))
                                                      (if (null? #{m2 41389}#)
                                                        #{s1 41357}#
                                                        (append
                                                          #{s1 41357}#
                                                          #{m2 41389}#)))))))
                                        (values
                                          '()
                                          #{y-pat 41318}#
                                          (#{match 41198}#
                                            #{e 41325}#
                                            #{z-pat 41319}#
                                            #{w 41326}#
                                            #{r 41230}#
                                            #{mod 41231}#)))))))
                               (#{f 41323}# #{e 41227}# #{w 41229}#))))
                         (lambda (#{xr* 41399}# #{y-pat 41400}# #{r 41401}#)
                           (if #{r 41401}#
                             (if (null? #{y-pat 41400}#)
                               (if (null? #{xr* 41399}#)
                                 (#{match-empty 41195}#
                                   (vector-ref #{p 41228}# 1)
                                   #{r 41401}#)
                                 (#{combine 41196}# #{xr* 41399}# #{r 41401}#))
                               #f)
                             #f)))
                       (if (eqv? #{atom-key 41241}# 'free-id)
                         (if (if (symbol? #{e 41227}#)
                               #t
                               (if (if (vector? #{e 41227}#)
                                     (if (= (vector-length #{e 41227}#) 4)
                                       (eq? (vector-ref #{e 41227}# 0)
                                            'syntax-object)
                                       #f)
                                     #f)
                                 (symbol? (vector-ref #{e 41227}# 1))
                                 #f))
                           (if (#{free-id=? 28259}#
                                 (if (if (null? (car #{w 41229}#))
                                       (null? (cdr #{w 41229}#))
                                       #f)
                                   #{e 41227}#
                                   (if (if (vector? #{e 41227}#)
                                         (if (= (vector-length #{e 41227}#) 4)
                                           (eq? (vector-ref #{e 41227}# 0)
                                                'syntax-object)
                                           #f)
                                         #f)
                                     (let ((#{expression 41829}#
                                             (vector-ref #{e 41227}# 1))
                                           (#{wrap 41830}#
                                             (let ((#{w2 41840}#
                                                     (vector-ref
                                                       #{e 41227}#
                                                       2)))
                                               (let ((#{m1 41841}#
                                                       (car #{w 41229}#))
                                                     (#{s1 41842}#
                                                       (cdr #{w 41229}#)))
                                                 (if (null? #{m1 41841}#)
                                                   (if (null? #{s1 41842}#)
                                                     #{w2 41840}#
                                                     (cons (car #{w2 41840}#)
                                                           (let ((#{m2 41859}#
                                                                   (cdr #{w2 41840}#)))
                                                             (if (null? #{m2 41859}#)
                                                               #{s1 41842}#
                                                               (append
                                                                 #{s1 41842}#
                                                                 #{m2 41859}#)))))
                                                   (cons (let ((#{m2 41867}#
                                                                 (car #{w2 41840}#)))
                                                           (if (null? #{m2 41867}#)
                                                             #{m1 41841}#
                                                             (append
                                                               #{m1 41841}#
                                                               #{m2 41867}#)))
                                                         (let ((#{m2 41875}#
                                                                 (cdr #{w2 41840}#)))
                                                           (if (null? #{m2 41875}#)
                                                             #{s1 41842}#
                                                             (append
                                                               #{s1 41842}#
                                                               #{m2 41875}#))))))))
                                           (#{module 41831}#
                                             (vector-ref #{e 41227}# 3)))
                                       (vector
                                         'syntax-object
                                         #{expression 41829}#
                                         #{wrap 41830}#
                                         #{module 41831}#))
                                     (if (null? #{e 41227}#)
                                       #{e 41227}#
                                       (vector
                                         'syntax-object
                                         #{e 41227}#
                                         #{w 41229}#
                                         #{mod 41231}#))))
                                 (vector-ref #{p 41228}# 1))
                             #{r 41230}#
                             #f)
                           #f)
                         (if (eqv? #{atom-key 41241}# 'atom)
                           (if (equal?
                                 (vector-ref #{p 41228}# 1)
                                 (#{strip 28284}# #{e 41227}# #{w 41229}#))
                             #{r 41230}#
                             #f)
                           (if (eqv? #{atom-key 41241}# 'vector)
                             (if (vector? #{e 41227}#)
                               (#{match 41198}#
                                 (vector->list #{e 41227}#)
                                 (vector-ref #{p 41228}# 1)
                                 #{w 41229}#
                                 #{r 41230}#
                                 #{mod 41231}#)
                               #f))))))))))))
       (#{match 41198}#
         (lambda (#{e 41908}#
                  #{p 41909}#
                  #{w 41910}#
                  #{r 41911}#
                  #{mod 41912}#)
           (if (not #{r 41911}#)
             #f
             (if (eq? #{p 41909}# '_)
               #{r 41911}#
               (if (eq? #{p 41909}# 'any)
                 (cons (if (if (null? (car #{w 41910}#))
                             (null? (cdr #{w 41910}#))
                             #f)
                         #{e 41908}#
                         (if (if (vector? #{e 41908}#)
                               (if (= (vector-length #{e 41908}#) 4)
                                 (eq? (vector-ref #{e 41908}# 0)
                                      'syntax-object)
                                 #f)
                               #f)
                           (let ((#{expression 41942}#
                                   (vector-ref #{e 41908}# 1))
                                 (#{wrap 41943}#
                                   (let ((#{w2 41953}#
                                           (vector-ref #{e 41908}# 2)))
                                     (let ((#{m1 41954}# (car #{w 41910}#))
                                           (#{s1 41955}# (cdr #{w 41910}#)))
                                       (if (null? #{m1 41954}#)
                                         (if (null? #{s1 41955}#)
                                           #{w2 41953}#
                                           (cons (car #{w2 41953}#)
                                                 (let ((#{m2 41972}#
                                                         (cdr #{w2 41953}#)))
                                                   (if (null? #{m2 41972}#)
                                                     #{s1 41955}#
                                                     (append
                                                       #{s1 41955}#
                                                       #{m2 41972}#)))))
                                         (cons (let ((#{m2 41980}#
                                                       (car #{w2 41953}#)))
                                                 (if (null? #{m2 41980}#)
                                                   #{m1 41954}#
                                                   (append
                                                     #{m1 41954}#
                                                     #{m2 41980}#)))
                                               (let ((#{m2 41988}#
                                                       (cdr #{w2 41953}#)))
                                                 (if (null? #{m2 41988}#)
                                                   #{s1 41955}#
                                                   (append
                                                     #{s1 41955}#
                                                     #{m2 41988}#))))))))
                                 (#{module 41944}# (vector-ref #{e 41908}# 3)))
                             (vector
                               'syntax-object
                               #{expression 41942}#
                               #{wrap 41943}#
                               #{module 41944}#))
                           (if (null? #{e 41908}#)
                             #{e 41908}#
                             (vector
                               'syntax-object
                               #{e 41908}#
                               #{w 41910}#
                               #{mod 41912}#))))
                       #{r 41911}#)
                 (if (if (vector? #{e 41908}#)
                       (if (= (vector-length #{e 41908}#) 4)
                         (eq? (vector-ref #{e 41908}# 0) 'syntax-object)
                         #f)
                       #f)
                   (#{match* 41197}#
                     (vector-ref #{e 41908}# 1)
                     #{p 41909}#
                     (let ((#{w2 42031}# (vector-ref #{e 41908}# 2)))
                       (let ((#{m1 42032}# (car #{w 41910}#))
                             (#{s1 42033}# (cdr #{w 41910}#)))
                         (if (null? #{m1 42032}#)
                           (if (null? #{s1 42033}#)
                             #{w2 42031}#
                             (cons (car #{w2 42031}#)
                                   (let ((#{m2 42044}# (cdr #{w2 42031}#)))
                                     (if (null? #{m2 42044}#)
                                       #{s1 42033}#
                                       (append #{s1 42033}# #{m2 42044}#)))))
                           (cons (let ((#{m2 42052}# (car #{w2 42031}#)))
                                   (if (null? #{m2 42052}#)
                                     #{m1 42032}#
                                     (append #{m1 42032}# #{m2 42052}#)))
                                 (let ((#{m2 42060}# (cdr #{w2 42031}#)))
                                   (if (null? #{m2 42060}#)
                                     #{s1 42033}#
                                     (append #{s1 42033}# #{m2 42060}#)))))))
                     #{r 41911}#
                     (vector-ref #{e 41908}# 3))
                   (#{match* 41197}#
                     #{e 41908}#
                     #{p 41909}#
                     #{w 41910}#
                     #{r 41911}#
                     #{mod 41912}#))))))))
      (set! $sc-dispatch
        (lambda (#{e 41199}# #{p 41200}#)
          (if (eq? #{p 41200}# 'any)
            (list #{e 41199}#)
            (if (eq? #{p 41200}# '_)
              '()
              (if (if (vector? #{e 41199}#)
                    (if (= (vector-length #{e 41199}#) 4)
                      (eq? (vector-ref #{e 41199}# 0) 'syntax-object)
                      #f)
                    #f)
                (#{match* 41197}#
                  (vector-ref #{e 41199}# 1)
                  #{p 41200}#
                  (vector-ref #{e 41199}# 2)
                  '()
                  (vector-ref #{e 41199}# 3))
                (#{match* 41197}#
                  #{e 41199}#
                  #{p 41200}#
                  '(())
                  '()
                  #f)))))))))

(define with-syntax
  (make-syntax-transformer
    'with-syntax
    'macro
    (lambda (#{x 59996}#)
      (let ((#{tmp 59998}#
              ($sc-dispatch #{x 59996}# '(_ () any . each-any))))
        (if #{tmp 59998}#
          (@apply
            (lambda (#{e1 60002}# #{e2 60003}#)
              (cons '#(syntax-object
                       let
                       ((top)
                        #(ribcage
                          #(e1 e2)
                          #((top) (top))
                          #("i59969" "i59970"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i59966"))
                        #(ribcage
                          (with-syntax)
                          ((top))
                          (((hygiene guile)
                            .
                            #(syntax-object
                              with-syntax
                              ((top))
                              (hygiene guile))))))
                       (hygiene guile))
                    (cons '() (cons #{e1 60002}# #{e2 60003}#))))
            #{tmp 59998}#)
          (let ((#{tmp 60004}#
                  ($sc-dispatch
                    #{x 59996}#
                    '(_ ((any any)) any . each-any))))
            (if #{tmp 60004}#
              (@apply
                (lambda (#{out 60008}#
                         #{in 60009}#
                         #{e1 60010}#
                         #{e2 60011}#)
                  (list '#(syntax-object
                           syntax-case
                           ((top)
                            #(ribcage
                              #(out in e1 e2)
                              #((top) (top) (top) (top))
                              #("i59975" "i59976" "i59977" "i59978"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i59966"))
                            #(ribcage
                              (with-syntax)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  with-syntax
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))
                        #{in 60009}#
                        '()
                        (list #{out 60008}#
                              (cons '#(syntax-object
                                       let
                                       ((top)
                                        #(ribcage
                                          #(out in e1 e2)
                                          #((top) (top) (top) (top))
                                          #("i59975"
                                            "i59976"
                                            "i59977"
                                            "i59978"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i59966"))
                                        #(ribcage
                                          (with-syntax)
                                          ((top))
                                          (((hygiene guile)
                                            .
                                            #(syntax-object
                                              with-syntax
                                              ((top))
                                              (hygiene guile))))))
                                       (hygiene guile))
                                    (cons '()
                                          (cons #{e1 60010}# #{e2 60011}#))))))
                #{tmp 60004}#)
              (let ((#{tmp 60012}#
                      ($sc-dispatch
                        #{x 59996}#
                        '(_ #(each (any any)) any . each-any))))
                (if #{tmp 60012}#
                  (@apply
                    (lambda (#{out 60016}#
                             #{in 60017}#
                             #{e1 60018}#
                             #{e2 60019}#)
                      (list '#(syntax-object
                               syntax-case
                               ((top)
                                #(ribcage
                                  #(out in e1 e2)
                                  #((top) (top) (top) (top))
                                  #("i59985" "i59986" "i59987" "i59988"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i59966"))
                                #(ribcage
                                  (with-syntax)
                                  ((top))
                                  (((hygiene guile)
                                    .
                                    #(syntax-object
                                      with-syntax
                                      ((top))
                                      (hygiene guile))))))
                               (hygiene guile))
                            (cons '#(syntax-object
                                     list
                                     ((top)
                                      #(ribcage
                                        #(out in e1 e2)
                                        #((top) (top) (top) (top))
                                        #("i59985" "i59986" "i59987" "i59988"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i59966"))
                                      #(ribcage
                                        (with-syntax)
                                        ((top))
                                        (((hygiene guile)
                                          .
                                          #(syntax-object
                                            with-syntax
                                            ((top))
                                            (hygiene guile))))))
                                     (hygiene guile))
                                  #{in 60017}#)
                            '()
                            (list #{out 60016}#
                                  (cons '#(syntax-object
                                           let
                                           ((top)
                                            #(ribcage
                                              #(out in e1 e2)
                                              #((top) (top) (top) (top))
                                              #("i59985"
                                                "i59986"
                                                "i59987"
                                                "i59988"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i59966"))
                                            #(ribcage
                                              (with-syntax)
                                              ((top))
                                              (((hygiene guile)
                                                .
                                                #(syntax-object
                                                  with-syntax
                                                  ((top))
                                                  (hygiene guile))))))
                                           (hygiene guile))
                                        (cons '()
                                              (cons #{e1 60018}#
                                                    #{e2 60019}#))))))
                    #{tmp 60012}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{x 59996}#))))))))))

(define syntax-rules
  (make-syntax-transformer
    'syntax-rules
    'macro
    (lambda (#{x 60074}#)
      (let ((#{tmp 60076}#
              ($sc-dispatch
                #{x 60074}#
                '(_ each-any . #(each ((any . any) any))))))
        (if #{tmp 60076}#
          (@apply
            (lambda (#{k 60080}#
                     #{keyword 60081}#
                     #{pattern 60082}#
                     #{template 60083}#)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage
                          #(k keyword pattern template)
                          #((top) (top) (top) (top))
                          #("i60037" "i60038" "i60039" "i60040"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i60034"))
                        #(ribcage
                          (syntax-rules)
                          ((top))
                          (((hygiene guile)
                            .
                            #(syntax-object
                              syntax-rules
                              ((top))
                              (hygiene guile))))))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage
                           #(k keyword pattern template)
                           #((top) (top) (top) (top))
                           #("i60037" "i60038" "i60039" "i60040"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("i60034"))
                         #(ribcage
                           (syntax-rules)
                           ((top))
                           (((hygiene guile)
                             .
                             #(syntax-object
                               syntax-rules
                               ((top))
                               (hygiene guile))))))
                        (hygiene guile)))
                    (vector
                      '(#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("i60037" "i60038" "i60039" "i60040"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i60034"))
                           #(ribcage
                             (syntax-rules)
                             ((top))
                             (((hygiene guile)
                               .
                               #(syntax-object
                                 syntax-rules
                                 ((top))
                                 (hygiene guile))))))
                          (hygiene guile))
                        .
                        #(syntax-object
                          syntax-rules
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("i60037" "i60038" "i60039" "i60040"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i60034"))
                           #(ribcage
                             (syntax-rules)
                             ((top))
                             (((hygiene guile)
                               .
                               #(syntax-object
                                 syntax-rules
                                 ((top))
                                 (hygiene guile))))))
                          (hygiene guile)))
                      (cons '#(syntax-object
                               patterns
                               ((top)
                                #(ribcage
                                  #(k keyword pattern template)
                                  #((top) (top) (top) (top))
                                  #("i60037" "i60038" "i60039" "i60040"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i60034"))
                                #(ribcage
                                  (syntax-rules)
                                  ((top))
                                  (((hygiene guile)
                                    .
                                    #(syntax-object
                                      syntax-rules
                                      ((top))
                                      (hygiene guile))))))
                               (hygiene guile))
                            #{pattern 60082}#))
                    (cons '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage
                                #(k keyword pattern template)
                                #((top) (top) (top) (top))
                                #("i60037" "i60038" "i60039" "i60040"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i60034"))
                              #(ribcage
                                (syntax-rules)
                                ((top))
                                (((hygiene guile)
                                  .
                                  #(syntax-object
                                    syntax-rules
                                    ((top))
                                    (hygiene guile))))))
                             (hygiene guile))
                          (cons '#(syntax-object
                                   x
                                   ((top)
                                    #(ribcage
                                      #(k keyword pattern template)
                                      #((top) (top) (top) (top))
                                      #("i60037" "i60038" "i60039" "i60040"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i60034"))
                                    #(ribcage
                                      (syntax-rules)
                                      ((top))
                                      (((hygiene guile)
                                        .
                                        #(syntax-object
                                          syntax-rules
                                          ((top))
                                          (hygiene guile))))))
                                   (hygiene guile))
                                (cons #{k 60080}#
                                      (map (lambda (#{tmp 60048 60084}#
                                                    #{tmp 60047 60085}#)
                                             (list (cons '#(syntax-object
                                                            _
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i60037"
                                                                 "i60038"
                                                                 "i60039"
                                                                 "i60040"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i60034"))
                                                             #(ribcage
                                                               (syntax-rules)
                                                               ((top))
                                                               (((hygiene
                                                                   guile)
                                                                 .
                                                                 #(syntax-object
                                                                   syntax-rules
                                                                   ((top))
                                                                   (hygiene
                                                                     guile))))))
                                                            (hygiene guile))
                                                         #{tmp 60047 60085}#)
                                                   (list '#(syntax-object
                                                            syntax
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i60037"
                                                                 "i60038"
                                                                 "i60039"
                                                                 "i60040"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i60034"))
                                                             #(ribcage
                                                               (syntax-rules)
                                                               ((top))
                                                               (((hygiene
                                                                   guile)
                                                                 .
                                                                 #(syntax-object
                                                                   syntax-rules
                                                                   ((top))
                                                                   (hygiene
                                                                     guile))))))
                                                            (hygiene guile))
                                                         #{tmp 60048 60084}#)))
                                           #{template 60083}#
                                           #{pattern 60082}#))))))
            #{tmp 60076}#)
          (let ((#{tmp 60086}#
                  ($sc-dispatch
                    #{x 60074}#
                    '(_ each-any any . #(each ((any . any) any))))))
            (if (if #{tmp 60086}#
                  (@apply
                    (lambda (#{k 60090}#
                             #{docstring 60091}#
                             #{keyword 60092}#
                             #{pattern 60093}#
                             #{template 60094}#)
                      (string? (syntax->datum #{docstring 60091}#)))
                    #{tmp 60086}#)
                  #f)
              (@apply
                (lambda (#{k 60095}#
                         #{docstring 60096}#
                         #{keyword 60097}#
                         #{pattern 60098}#
                         #{template 60099}#)
                  (list '#(syntax-object
                           lambda
                           ((top)
                            #(ribcage
                              #(k docstring keyword pattern template)
                              #((top) (top) (top) (top) (top))
                              #("i60060" "i60061" "i60062" "i60063" "i60064"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i60034"))
                            #(ribcage
                              (syntax-rules)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  syntax-rules
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))
                        '(#(syntax-object
                            x
                            ((top)
                             #(ribcage
                               #(k docstring keyword pattern template)
                               #((top) (top) (top) (top) (top))
                               #("i60060" "i60061" "i60062" "i60063" "i60064"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i60034"))
                             #(ribcage
                               (syntax-rules)
                               ((top))
                               (((hygiene guile)
                                 .
                                 #(syntax-object
                                   syntax-rules
                                   ((top))
                                   (hygiene guile))))))
                            (hygiene guile)))
                        #{docstring 60096}#
                        (vector
                          '(#(syntax-object
                              macro-type
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("i60060"
                                   "i60061"
                                   "i60062"
                                   "i60063"
                                   "i60064"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i60034"))
                               #(ribcage
                                 (syntax-rules)
                                 ((top))
                                 (((hygiene guile)
                                   .
                                   #(syntax-object
                                     syntax-rules
                                     ((top))
                                     (hygiene guile))))))
                              (hygiene guile))
                            .
                            #(syntax-object
                              syntax-rules
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("i60060"
                                   "i60061"
                                   "i60062"
                                   "i60063"
                                   "i60064"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i60034"))
                               #(ribcage
                                 (syntax-rules)
                                 ((top))
                                 (((hygiene guile)
                                   .
                                   #(syntax-object
                                     syntax-rules
                                     ((top))
                                     (hygiene guile))))))
                              (hygiene guile)))
                          (cons '#(syntax-object
                                   patterns
                                   ((top)
                                    #(ribcage
                                      #(k docstring keyword pattern template)
                                      #((top) (top) (top) (top) (top))
                                      #("i60060"
                                        "i60061"
                                        "i60062"
                                        "i60063"
                                        "i60064"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i60034"))
                                    #(ribcage
                                      (syntax-rules)
                                      ((top))
                                      (((hygiene guile)
                                        .
                                        #(syntax-object
                                          syntax-rules
                                          ((top))
                                          (hygiene guile))))))
                                   (hygiene guile))
                                #{pattern 60098}#))
                        (cons '#(syntax-object
                                 syntax-case
                                 ((top)
                                  #(ribcage
                                    #(k docstring keyword pattern template)
                                    #((top) (top) (top) (top) (top))
                                    #("i60060"
                                      "i60061"
                                      "i60062"
                                      "i60063"
                                      "i60064"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i60034"))
                                  #(ribcage
                                    (syntax-rules)
                                    ((top))
                                    (((hygiene guile)
                                      .
                                      #(syntax-object
                                        syntax-rules
                                        ((top))
                                        (hygiene guile))))))
                                 (hygiene guile))
                              (cons '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(k
                                            docstring
                                            keyword
                                            pattern
                                            template)
                                          #((top) (top) (top) (top) (top))
                                          #("i60060"
                                            "i60061"
                                            "i60062"
                                            "i60063"
                                            "i60064"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i60034"))
                                        #(ribcage
                                          (syntax-rules)
                                          ((top))
                                          (((hygiene guile)
                                            .
                                            #(syntax-object
                                              syntax-rules
                                              ((top))
                                              (hygiene guile))))))
                                       (hygiene guile))
                                    (cons #{k 60095}#
                                          (map (lambda (#{tmp 60073 60100}#
                                                        #{tmp 60072 60101}#)
                                                 (list (cons '#(syntax-object
                                                                _
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("i60060"
                                                                     "i60061"
                                                                     "i60062"
                                                                     "i60063"
                                                                     "i60064"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i60034"))
                                                                 #(ribcage
                                                                   (syntax-rules)
                                                                   ((top))
                                                                   (((hygiene
                                                                       guile)
                                                                     .
                                                                     #(syntax-object
                                                                       syntax-rules
                                                                       ((top))
                                                                       (hygiene
                                                                         guile))))))
                                                                (hygiene
                                                                  guile))
                                                             #{tmp 60072 60101}#)
                                                       (list '#(syntax-object
                                                                syntax
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("i60060"
                                                                     "i60061"
                                                                     "i60062"
                                                                     "i60063"
                                                                     "i60064"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i60034"))
                                                                 #(ribcage
                                                                   (syntax-rules)
                                                                   ((top))
                                                                   (((hygiene
                                                                       guile)
                                                                     .
                                                                     #(syntax-object
                                                                       syntax-rules
                                                                       ((top))
                                                                       (hygiene
                                                                         guile))))))
                                                                (hygiene
                                                                  guile))
                                                             #{tmp 60073 60100}#)))
                                               #{template 60099}#
                                               #{pattern 60098}#))))))
                #{tmp 60086}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 60074}#))))))))

(define define-syntax-rule
  (make-syntax-transformer
    'define-syntax-rule
    'macro
    (lambda (#{x 60139}#)
      (let ((#{tmp 60141}#
              ($sc-dispatch #{x 60139}# '(_ (any . any) any))))
        (if #{tmp 60141}#
          (@apply
            (lambda (#{name 60145}#
                     #{pattern 60146}#
                     #{template 60147}#)
              (list '#(syntax-object
                       define-syntax
                       ((top)
                        #(ribcage
                          #(name pattern template)
                          #((top) (top) (top))
                          #("i60116" "i60117" "i60118"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i60113"))
                        #(ribcage
                          (define-syntax-rule)
                          ((top))
                          (((hygiene guile)
                            .
                            #(syntax-object
                              define-syntax-rule
                              ((top))
                              (hygiene guile))))))
                       (hygiene guile))
                    #{name 60145}#
                    (list '#(syntax-object
                             syntax-rules
                             ((top)
                              #(ribcage
                                #(name pattern template)
                                #((top) (top) (top))
                                #("i60116" "i60117" "i60118"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i60113"))
                              #(ribcage
                                (define-syntax-rule)
                                ((top))
                                (((hygiene guile)
                                  .
                                  #(syntax-object
                                    define-syntax-rule
                                    ((top))
                                    (hygiene guile))))))
                             (hygiene guile))
                          '()
                          (list (cons '#(syntax-object
                                         _
                                         ((top)
                                          #(ribcage
                                            #(name pattern template)
                                            #((top) (top) (top))
                                            #("i60116" "i60117" "i60118"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i60113"))
                                          #(ribcage
                                            (define-syntax-rule)
                                            ((top))
                                            (((hygiene guile)
                                              .
                                              #(syntax-object
                                                define-syntax-rule
                                                ((top))
                                                (hygiene guile))))))
                                         (hygiene guile))
                                      #{pattern 60146}#)
                                #{template 60147}#))))
            #{tmp 60141}#)
          (let ((#{tmp 60148}#
                  ($sc-dispatch
                    #{x 60139}#
                    '(_ (any . any) any any))))
            (if (if #{tmp 60148}#
                  (@apply
                    (lambda (#{name 60152}#
                             #{pattern 60153}#
                             #{docstring 60154}#
                             #{template 60155}#)
                      (string? (syntax->datum #{docstring 60154}#)))
                    #{tmp 60148}#)
                  #f)
              (@apply
                (lambda (#{name 60156}#
                         #{pattern 60157}#
                         #{docstring 60158}#
                         #{template 60159}#)
                  (list '#(syntax-object
                           define-syntax
                           ((top)
                            #(ribcage
                              #(name pattern docstring template)
                              #((top) (top) (top) (top))
                              #("i60131" "i60132" "i60133" "i60134"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i60113"))
                            #(ribcage
                              (define-syntax-rule)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  define-syntax-rule
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))
                        #{name 60156}#
                        (list '#(syntax-object
                                 syntax-rules
                                 ((top)
                                  #(ribcage
                                    #(name pattern docstring template)
                                    #((top) (top) (top) (top))
                                    #("i60131" "i60132" "i60133" "i60134"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i60113"))
                                  #(ribcage
                                    (define-syntax-rule)
                                    ((top))
                                    (((hygiene guile)
                                      .
                                      #(syntax-object
                                        define-syntax-rule
                                        ((top))
                                        (hygiene guile))))))
                                 (hygiene guile))
                              '()
                              #{docstring 60158}#
                              (list (cons '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(name
                                                  pattern
                                                  docstring
                                                  template)
                                                #((top) (top) (top) (top))
                                                #("i60131"
                                                  "i60132"
                                                  "i60133"
                                                  "i60134"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("i60113"))
                                              #(ribcage
                                                (define-syntax-rule)
                                                ((top))
                                                (((hygiene guile)
                                                  .
                                                  #(syntax-object
                                                    define-syntax-rule
                                                    ((top))
                                                    (hygiene guile))))))
                                             (hygiene guile))
                                          #{pattern 60157}#)
                                    #{template 60159}#))))
                #{tmp 60148}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 60139}#))))))))

(define let*
  (make-syntax-transformer
    'let*
    'macro
    (lambda (#{x 60209}#)
      (let ((#{tmp 60211}#
              ($sc-dispatch
                #{x 60209}#
                '(any #(each (any any)) any . each-any))))
        (if (if #{tmp 60211}#
              (@apply
                (lambda (#{let* 60215}#
                         #{x 60216}#
                         #{v 60217}#
                         #{e1 60218}#
                         #{e2 60219}#)
                  (and-map identifier? #{x 60216}#))
                #{tmp 60211}#)
              #f)
          (@apply
            (lambda (#{let* 60220}#
                     #{x 60221}#
                     #{v 60222}#
                     #{e1 60223}#
                     #{e2 60224}#)
              (letrec*
                ((#{f 60225}#
                   (lambda (#{bindings 60228}#)
                     (if (null? #{bindings 60228}#)
                       (cons '#(syntax-object
                                let
                                ((top)
                                 #(ribcage () () ())
                                 #(ribcage
                                   #(f bindings)
                                   #((top) (top))
                                   #("i60195" "i60196"))
                                 #(ribcage
                                   #(let* x v e1 e2)
                                   #((top) (top) (top) (top) (top))
                                   #("i60185"
                                     "i60186"
                                     "i60187"
                                     "i60188"
                                     "i60189"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("i60171"))
                                 #(ribcage
                                   (let*)
                                   ((top))
                                   (((hygiene guile)
                                     .
                                     #(syntax-object
                                       let*
                                       ((top))
                                       (hygiene guile))))))
                                (hygiene guile))
                             (cons '() (cons #{e1 60223}# #{e2 60224}#)))
                       (let ((#{tmp 60229}#
                               (list (#{f 60225}# (cdr #{bindings 60228}#))
                                     (car #{bindings 60228}#))))
                         (let ((#{tmp 60230}#
                                 ($sc-dispatch #{tmp 60229}# '(any any))))
                           (if #{tmp 60230}#
                             (@apply
                               (lambda (#{body 60232}# #{binding 60233}#)
                                 (list '#(syntax-object
                                          let
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(body binding)
                                             #((top) (top))
                                             #("i60205" "i60206"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(f bindings)
                                             #((top) (top))
                                             #("i60195" "i60196"))
                                           #(ribcage
                                             #(let* x v e1 e2)
                                             #((top) (top) (top) (top) (top))
                                             #("i60185"
                                               "i60186"
                                               "i60187"
                                               "i60188"
                                               "i60189"))
                                           #(ribcage () () ())
                                           #(ribcage #(x) #((top)) #("i60171"))
                                           #(ribcage
                                             (let*)
                                             ((top))
                                             (((hygiene guile)
                                               .
                                               #(syntax-object
                                                 let*
                                                 ((top))
                                                 (hygiene guile))))))
                                          (hygiene guile))
                                       (list #{binding 60233}#)
                                       #{body 60232}#))
                               #{tmp 60230}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp 60229}#))))))))
                (#{f 60225}# (map list #{x 60221}# #{v 60222}#))))
            #{tmp 60211}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 60209}#))))))

(define do
  (make-syntax-transformer
    'do
    'macro
    (lambda (#{orig-x 60292}#)
      (let ((#{tmp 60294}#
              ($sc-dispatch
                #{orig-x 60292}#
                '(_ #(each (any any . any))
                    (any . each-any)
                    .
                    each-any))))
        (if #{tmp 60294}#
          (@apply
            (lambda (#{var 60298}#
                     #{init 60299}#
                     #{step 60300}#
                     #{e0 60301}#
                     #{e1 60302}#
                     #{c 60303}#)
              (let ((#{tmp 60304}#
                      (map (lambda (#{v 60307}# #{s 60308}#)
                             (let ((#{tmp 60310}#
                                     ($sc-dispatch #{s 60308}# '())))
                               (if #{tmp 60310}#
                                 (@apply (lambda () #{v 60307}#) #{tmp 60310}#)
                                 (let ((#{tmp 60313}#
                                         ($sc-dispatch #{s 60308}# '(any))))
                                   (if #{tmp 60313}#
                                     (@apply
                                       (lambda (#{e 60316}#) #{e 60316}#)
                                       #{tmp 60313}#)
                                     (syntax-violation
                                       'do
                                       "bad step expression"
                                       #{orig-x 60292}#
                                       #{s 60308}#))))))
                           #{var 60298}#
                           #{step 60300}#)))
                (let ((#{tmp 60305}#
                        ($sc-dispatch #{tmp 60304}# 'each-any)))
                  (if #{tmp 60305}#
                    (@apply
                      (lambda (#{step 60322}#)
                        (let ((#{tmp 60324}# ($sc-dispatch #{e1 60302}# '())))
                          (if #{tmp 60324}#
                            (@apply
                              (lambda ()
                                (list '#(syntax-object
                                         let
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("i60260"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("i60245"
                                              "i60246"
                                              "i60247"
                                              "i60248"
                                              "i60249"
                                              "i60250"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("i60242"))
                                          #(ribcage
                                            (do)
                                            ((top))
                                            (((hygiene guile)
                                              .
                                              #(syntax-object
                                                do
                                                ((top))
                                                (hygiene guile))))))
                                         (hygiene guile))
                                      '#(syntax-object
                                         doloop
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("i60260"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("i60245"
                                              "i60246"
                                              "i60247"
                                              "i60248"
                                              "i60249"
                                              "i60250"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("i60242"))
                                          #(ribcage
                                            (do)
                                            ((top))
                                            (((hygiene guile)
                                              .
                                              #(syntax-object
                                                do
                                                ((top))
                                                (hygiene guile))))))
                                         (hygiene guile))
                                      (map list #{var 60298}# #{init 60299}#)
                                      (list '#(syntax-object
                                               if
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(step)
                                                  #((top))
                                                  #("i60260"))
                                                #(ribcage
                                                  #(var init step e0 e1 c)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("i60245"
                                                    "i60246"
                                                    "i60247"
                                                    "i60248"
                                                    "i60249"
                                                    "i60250"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(orig-x)
                                                  #((top))
                                                  #("i60242"))
                                                #(ribcage
                                                  (do)
                                                  ((top))
                                                  (((hygiene guile)
                                                    .
                                                    #(syntax-object
                                                      do
                                                      ((top))
                                                      (hygiene guile))))))
                                               (hygiene guile))
                                            (list '#(syntax-object
                                                     not
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("i60260"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i60245"
                                                          "i60246"
                                                          "i60247"
                                                          "i60248"
                                                          "i60249"
                                                          "i60250"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("i60242"))
                                                      #(ribcage
                                                        (do)
                                                        ((top))
                                                        (((hygiene guile)
                                                          .
                                                          #(syntax-object
                                                            do
                                                            ((top))
                                                            (hygiene
                                                              guile))))))
                                                     (hygiene guile))
                                                  #{e0 60301}#)
                                            (cons '#(syntax-object
                                                     begin
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("i60260"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i60245"
                                                          "i60246"
                                                          "i60247"
                                                          "i60248"
                                                          "i60249"
                                                          "i60250"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("i60242"))
                                                      #(ribcage
                                                        (do)
                                                        ((top))
                                                        (((hygiene guile)
                                                          .
                                                          #(syntax-object
                                                            do
                                                            ((top))
                                                            (hygiene
                                                              guile))))))
                                                     (hygiene guile))
                                                  (append
                                                    #{c 60303}#
                                                    (list (cons '#(syntax-object
                                                                   doloop
                                                                   ((top)
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(step)
                                                                      #((top))
                                                                      #("i60260"))
                                                                    #(ribcage
                                                                      #(var
                                                                        init
                                                                        step
                                                                        e0
                                                                        e1
                                                                        c)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("i60245"
                                                                        "i60246"
                                                                        "i60247"
                                                                        "i60248"
                                                                        "i60249"
                                                                        "i60250"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(orig-x)
                                                                      #((top))
                                                                      #("i60242"))
                                                                    #(ribcage
                                                                      (do)
                                                                      ((top))
                                                                      (((hygiene
                                                                          guile)
                                                                        .
                                                                        #(syntax-object
                                                                          do
                                                                          ((top))
                                                                          (hygiene
                                                                            guile))))))
                                                                   (hygiene
                                                                     guile))
                                                                #{step 60322}#)))))))
                              #{tmp 60324}#)
                            (let ((#{tmp 60328}#
                                    ($sc-dispatch
                                      #{e1 60302}#
                                      '(any . each-any))))
                              (if #{tmp 60328}#
                                (@apply
                                  (lambda (#{e1 60332}# #{e2 60333}#)
                                    (list '#(syntax-object
                                             let
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("i60269" "i60270"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("i60260"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i60245"
                                                  "i60246"
                                                  "i60247"
                                                  "i60248"
                                                  "i60249"
                                                  "i60250"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("i60242"))
                                              #(ribcage
                                                (do)
                                                ((top))
                                                (((hygiene guile)
                                                  .
                                                  #(syntax-object
                                                    do
                                                    ((top))
                                                    (hygiene guile))))))
                                             (hygiene guile))
                                          '#(syntax-object
                                             doloop
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("i60269" "i60270"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("i60260"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i60245"
                                                  "i60246"
                                                  "i60247"
                                                  "i60248"
                                                  "i60249"
                                                  "i60250"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("i60242"))
                                              #(ribcage
                                                (do)
                                                ((top))
                                                (((hygiene guile)
                                                  .
                                                  #(syntax-object
                                                    do
                                                    ((top))
                                                    (hygiene guile))))))
                                             (hygiene guile))
                                          (map list
                                               #{var 60298}#
                                               #{init 60299}#)
                                          (list '#(syntax-object
                                                   if
                                                   ((top)
                                                    #(ribcage
                                                      #(e1 e2)
                                                      #((top) (top))
                                                      #("i60269" "i60270"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(step)
                                                      #((top))
                                                      #("i60260"))
                                                    #(ribcage
                                                      #(var init step e0 e1 c)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i60245"
                                                        "i60246"
                                                        "i60247"
                                                        "i60248"
                                                        "i60249"
                                                        "i60250"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(orig-x)
                                                      #((top))
                                                      #("i60242"))
                                                    #(ribcage
                                                      (do)
                                                      ((top))
                                                      (((hygiene guile)
                                                        .
                                                        #(syntax-object
                                                          do
                                                          ((top))
                                                          (hygiene guile))))))
                                                   (hygiene guile))
                                                #{e0 60301}#
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("i60269"
                                                              "i60270"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("i60260"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i60245"
                                                              "i60246"
                                                              "i60247"
                                                              "i60248"
                                                              "i60249"
                                                              "i60250"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("i60242"))
                                                          #(ribcage
                                                            (do)
                                                            ((top))
                                                            (((hygiene guile)
                                                              .
                                                              #(syntax-object
                                                                do
                                                                ((top))
                                                                (hygiene
                                                                  guile))))))
                                                         (hygiene guile))
                                                      (cons #{e1 60332}#
                                                            #{e2 60333}#))
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("i60269"
                                                              "i60270"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("i60260"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i60245"
                                                              "i60246"
                                                              "i60247"
                                                              "i60248"
                                                              "i60249"
                                                              "i60250"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("i60242"))
                                                          #(ribcage
                                                            (do)
                                                            ((top))
                                                            (((hygiene guile)
                                                              .
                                                              #(syntax-object
                                                                do
                                                                ((top))
                                                                (hygiene
                                                                  guile))))))
                                                         (hygiene guile))
                                                      (append
                                                        #{c 60303}#
                                                        (list (cons '#(syntax-object
                                                                       doloop
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(e1
                                                                            e2)
                                                                          #((top)
                                                                            (top))
                                                                          #("i60269"
                                                                            "i60270"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(step)
                                                                          #((top))
                                                                          #("i60260"))
                                                                        #(ribcage
                                                                          #(var
                                                                            init
                                                                            step
                                                                            e0
                                                                            e1
                                                                            c)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i60245"
                                                                            "i60246"
                                                                            "i60247"
                                                                            "i60248"
                                                                            "i60249"
                                                                            "i60250"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(orig-x)
                                                                          #((top))
                                                                          #("i60242"))
                                                                        #(ribcage
                                                                          (do)
                                                                          ((top))
                                                                          (((hygiene
                                                                              guile)
                                                                            .
                                                                            #(syntax-object
                                                                              do
                                                                              ((top))
                                                                              (hygiene
                                                                                guile))))))
                                                                       (hygiene
                                                                         guile))
                                                                    #{step 60322}#)))))))
                                  #{tmp 60328}#)
                                (syntax-violation
                                  #f
                                  "source expression failed to match any pattern"
                                  #{e1 60302}#))))))
                      #{tmp 60305}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp 60304}#)))))
            #{tmp 60294}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{orig-x 60292}#))))))

(define quasiquote
  (make-syntax-transformer
    'quasiquote
    'macro
    (letrec*
      ((#{quasi 60620}#
         (lambda (#{p 60644}# #{lev 60645}#)
           (let ((#{tmp 60647}#
                   ($sc-dispatch
                     #{p 60644}#
                     '(#(free-id
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i60366" "i60367"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i60362"
                               "i60360"
                               "i60358"
                               "i60356"
                               "i60354"
                               "i60352"
                               "i60350"))
                            #(ribcage
                              (quasiquote)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  quasiquote
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile)))
                       any))))
             (if #{tmp 60647}#
               (@apply
                 (lambda (#{p 60651}#)
                   (if (= #{lev 60645}# 0)
                     (list '#(syntax-object
                              "value"
                              ((top)
                               #(ribcage #(p) #((top)) #("i60370"))
                               #(ribcage () () ())
                               #(ribcage
                                 #(p lev)
                                 #((top) (top))
                                 #("i60366" "i60367"))
                               #(ribcage
                                 (emit quasivector
                                       quasilist*
                                       quasiappend
                                       quasicons
                                       vquasi
                                       quasi)
                                 ((top) (top) (top) (top) (top) (top) (top))
                                 ("i60362"
                                  "i60360"
                                  "i60358"
                                  "i60356"
                                  "i60354"
                                  "i60352"
                                  "i60350"))
                               #(ribcage
                                 (quasiquote)
                                 ((top))
                                 (((hygiene guile)
                                   .
                                   #(syntax-object
                                     quasiquote
                                     ((top))
                                     (hygiene guile))))))
                              (hygiene guile))
                           #{p 60651}#)
                     (#{quasicons 60622}#
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage #(p) #((top)) #("i60370"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i60366" "i60367"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i60362"
                               "i60360"
                               "i60358"
                               "i60356"
                               "i60354"
                               "i60352"
                               "i60350"))
                            #(ribcage
                              (quasiquote)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  quasiquote
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage #(p) #((top)) #("i60370"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i60366" "i60367"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i60362"
                               "i60360"
                               "i60358"
                               "i60356"
                               "i60354"
                               "i60352"
                               "i60350"))
                            #(ribcage
                              (quasiquote)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  quasiquote
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile)))
                       (#{quasi 60620}#
                         (list #{p 60651}#)
                         (#{1-}# #{lev 60645}#)))))
                 #{tmp 60647}#)
               (let ((#{tmp 60654}#
                       ($sc-dispatch
                         #{p 60644}#
                         '(#(free-id
                             #(syntax-object
                               quasiquote
                               ((top)
                                #(ribcage () () ())
                                #(ribcage
                                  #(p lev)
                                  #((top) (top))
                                  #("i60366" "i60367"))
                                #(ribcage
                                  (emit quasivector
                                        quasilist*
                                        quasiappend
                                        quasicons
                                        vquasi
                                        quasi)
                                  ((top) (top) (top) (top) (top) (top) (top))
                                  ("i60362"
                                   "i60360"
                                   "i60358"
                                   "i60356"
                                   "i60354"
                                   "i60352"
                                   "i60350"))
                                #(ribcage
                                  (quasiquote)
                                  ((top))
                                  (((hygiene guile)
                                    .
                                    #(syntax-object
                                      quasiquote
                                      ((top))
                                      (hygiene guile))))))
                               (hygiene guile)))
                           any))))
                 (if #{tmp 60654}#
                   (@apply
                     (lambda (#{p 60658}#)
                       (#{quasicons 60622}#
                         '(#(syntax-object
                             "quote"
                             ((top)
                              #(ribcage #(p) #((top)) #("i60373"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i60366" "i60367"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("i60362"
                                 "i60360"
                                 "i60358"
                                 "i60356"
                                 "i60354"
                                 "i60352"
                                 "i60350"))
                              #(ribcage
                                (quasiquote)
                                ((top))
                                (((hygiene guile)
                                  .
                                  #(syntax-object
                                    quasiquote
                                    ((top))
                                    (hygiene guile))))))
                             (hygiene guile))
                           #(syntax-object
                             quasiquote
                             ((top)
                              #(ribcage #(p) #((top)) #("i60373"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i60366" "i60367"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("i60362"
                                 "i60360"
                                 "i60358"
                                 "i60356"
                                 "i60354"
                                 "i60352"
                                 "i60350"))
                              #(ribcage
                                (quasiquote)
                                ((top))
                                (((hygiene guile)
                                  .
                                  #(syntax-object
                                    quasiquote
                                    ((top))
                                    (hygiene guile))))))
                             (hygiene guile)))
                         (#{quasi 60620}#
                           (list #{p 60658}#)
                           (#{1+}# #{lev 60645}#))))
                     #{tmp 60654}#)
                   (let ((#{tmp 60661}#
                           ($sc-dispatch #{p 60644}# '(any . any))))
                     (if #{tmp 60661}#
                       (@apply
                         (lambda (#{p 60665}# #{q 60666}#)
                           (let ((#{tmp 60668}#
                                   ($sc-dispatch
                                     #{p 60665}#
                                     '(#(free-id
                                         #(syntax-object
                                           unquote
                                           ((top)
                                            #(ribcage
                                              #(p q)
                                              #((top) (top))
                                              #("i60376" "i60377"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(p lev)
                                              #((top) (top))
                                              #("i60366" "i60367"))
                                            #(ribcage
                                              (emit quasivector
                                                    quasilist*
                                                    quasiappend
                                                    quasicons
                                                    vquasi
                                                    quasi)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("i60362"
                                               "i60360"
                                               "i60358"
                                               "i60356"
                                               "i60354"
                                               "i60352"
                                               "i60350"))
                                            #(ribcage
                                              (quasiquote)
                                              ((top))
                                              (((hygiene guile)
                                                .
                                                #(syntax-object
                                                  quasiquote
                                                  ((top))
                                                  (hygiene guile))))))
                                           (hygiene guile)))
                                       .
                                       each-any))))
                             (if #{tmp 60668}#
                               (@apply
                                 (lambda (#{p 60672}#)
                                   (if (= #{lev 60645}# 0)
                                     (#{quasilist* 60624}#
                                       (map (lambda (#{tmp 60384 60711}#)
                                              (list '#(syntax-object
                                                       "value"
                                                       ((top)
                                                        #(ribcage
                                                          #(p)
                                                          #((top))
                                                          #("i60382"))
                                                        #(ribcage
                                                          #(p q)
                                                          #((top) (top))
                                                          #("i60376" "i60377"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p lev)
                                                          #((top) (top))
                                                          #("i60366" "i60367"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i60362"
                                                           "i60360"
                                                           "i60358"
                                                           "i60356"
                                                           "i60354"
                                                           "i60352"
                                                           "i60350"))
                                                        #(ribcage
                                                          (quasiquote)
                                                          ((top))
                                                          (((hygiene guile)
                                                            .
                                                            #(syntax-object
                                                              quasiquote
                                                              ((top))
                                                              (hygiene
                                                                guile))))))
                                                       (hygiene guile))
                                                    #{tmp 60384 60711}#))
                                            #{p 60672}#)
                                       (#{quasi 60620}#
                                         #{q 60666}#
                                         #{lev 60645}#))
                                     (#{quasicons 60622}#
                                       (#{quasicons 60622}#
                                         '(#(syntax-object
                                             "quote"
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("i60382"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("i60376" "i60377"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i60366" "i60367"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i60362"
                                                 "i60360"
                                                 "i60358"
                                                 "i60356"
                                                 "i60354"
                                                 "i60352"
                                                 "i60350"))
                                              #(ribcage
                                                (quasiquote)
                                                ((top))
                                                (((hygiene guile)
                                                  .
                                                  #(syntax-object
                                                    quasiquote
                                                    ((top))
                                                    (hygiene guile))))))
                                             (hygiene guile))
                                           #(syntax-object
                                             unquote
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("i60382"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("i60376" "i60377"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i60366" "i60367"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i60362"
                                                 "i60360"
                                                 "i60358"
                                                 "i60356"
                                                 "i60354"
                                                 "i60352"
                                                 "i60350"))
                                              #(ribcage
                                                (quasiquote)
                                                ((top))
                                                (((hygiene guile)
                                                  .
                                                  #(syntax-object
                                                    quasiquote
                                                    ((top))
                                                    (hygiene guile))))))
                                             (hygiene guile)))
                                         (#{quasi 60620}#
                                           #{p 60672}#
                                           (#{1-}# #{lev 60645}#)))
                                       (#{quasi 60620}#
                                         #{q 60666}#
                                         #{lev 60645}#))))
                                 #{tmp 60668}#)
                               (let ((#{tmp 60716}#
                                       ($sc-dispatch
                                         #{p 60665}#
                                         '(#(free-id
                                             #(syntax-object
                                               unquote-splicing
                                               ((top)
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("i60376" "i60377"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("i60366" "i60367"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i60362"
                                                   "i60360"
                                                   "i60358"
                                                   "i60356"
                                                   "i60354"
                                                   "i60352"
                                                   "i60350"))
                                                #(ribcage
                                                  (quasiquote)
                                                  ((top))
                                                  (((hygiene guile)
                                                    .
                                                    #(syntax-object
                                                      quasiquote
                                                      ((top))
                                                      (hygiene guile))))))
                                               (hygiene guile)))
                                           .
                                           each-any))))
                                 (if #{tmp 60716}#
                                   (@apply
                                     (lambda (#{p 60720}#)
                                       (if (= #{lev 60645}# 0)
                                         (#{quasiappend 60623}#
                                           (map (lambda (#{tmp 60389 60723}#)
                                                  (list '#(syntax-object
                                                           "value"
                                                           ((top)
                                                            #(ribcage
                                                              #(p)
                                                              #((top))
                                                              #("i60387"))
                                                            #(ribcage
                                                              #(p q)
                                                              #((top) (top))
                                                              #("i60376"
                                                                "i60377"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(p lev)
                                                              #((top) (top))
                                                              #("i60366"
                                                                "i60367"))
                                                            #(ribcage
                                                              (emit quasivector
                                                                    quasilist*
                                                                    quasiappend
                                                                    quasicons
                                                                    vquasi
                                                                    quasi)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("i60362"
                                                               "i60360"
                                                               "i60358"
                                                               "i60356"
                                                               "i60354"
                                                               "i60352"
                                                               "i60350"))
                                                            #(ribcage
                                                              (quasiquote)
                                                              ((top))
                                                              (((hygiene guile)
                                                                .
                                                                #(syntax-object
                                                                  quasiquote
                                                                  ((top))
                                                                  (hygiene
                                                                    guile))))))
                                                           (hygiene guile))
                                                        #{tmp 60389 60723}#))
                                                #{p 60720}#)
                                           (#{quasi 60620}#
                                             #{q 60666}#
                                             #{lev 60645}#))
                                         (#{quasicons 60622}#
                                           (#{quasicons 60622}#
                                             '(#(syntax-object
                                                 "quote"
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("i60387"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("i60376" "i60377"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("i60366" "i60367"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i60362"
                                                     "i60360"
                                                     "i60358"
                                                     "i60356"
                                                     "i60354"
                                                     "i60352"
                                                     "i60350"))
                                                  #(ribcage
                                                    (quasiquote)
                                                    ((top))
                                                    (((hygiene guile)
                                                      .
                                                      #(syntax-object
                                                        quasiquote
                                                        ((top))
                                                        (hygiene guile))))))
                                                 (hygiene guile))
                                               #(syntax-object
                                                 unquote-splicing
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("i60387"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("i60376" "i60377"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("i60366" "i60367"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i60362"
                                                     "i60360"
                                                     "i60358"
                                                     "i60356"
                                                     "i60354"
                                                     "i60352"
                                                     "i60350"))
                                                  #(ribcage
                                                    (quasiquote)
                                                    ((top))
                                                    (((hygiene guile)
                                                      .
                                                      #(syntax-object
                                                        quasiquote
                                                        ((top))
                                                        (hygiene guile))))))
                                                 (hygiene guile)))
                                             (#{quasi 60620}#
                                               #{p 60720}#
                                               (#{1-}# #{lev 60645}#)))
                                           (#{quasi 60620}#
                                             #{q 60666}#
                                             #{lev 60645}#))))
                                     #{tmp 60716}#)
                                   (#{quasicons 60622}#
                                     (#{quasi 60620}#
                                       #{p 60665}#
                                       #{lev 60645}#)
                                     (#{quasi 60620}#
                                       #{q 60666}#
                                       #{lev 60645}#)))))))
                         #{tmp 60661}#)
                       (let ((#{tmp 60737}#
                               ($sc-dispatch #{p 60644}# '#(vector each-any))))
                         (if #{tmp 60737}#
                           (@apply
                             (lambda (#{x 60741}#)
                               (let ((#{x 60744}#
                                       (#{vquasi 60621}#
                                         #{x 60741}#
                                         #{lev 60645}#)))
                                 (let ((#{tmp 60746}#
                                         ($sc-dispatch
                                           #{x 60744}#
                                           '(#(atom "quote") each-any))))
                                   (if #{tmp 60746}#
                                     (@apply
                                       (lambda (#{x 60750}#)
                                         (list '#(syntax-object
                                                  "quote"
                                                  ((top)
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i60494"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i60491"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i60362"
                                                      "i60360"
                                                      "i60358"
                                                      "i60356"
                                                      "i60354"
                                                      "i60352"
                                                      "i60350"))
                                                   #(ribcage
                                                     (quasiquote)
                                                     ((top))
                                                     (((hygiene guile)
                                                       .
                                                       #(syntax-object
                                                         quasiquote
                                                         ((top))
                                                         (hygiene guile))))))
                                                  (hygiene guile))
                                               (list->vector #{x 60750}#)))
                                       #{tmp 60746}#)
                                     (letrec*
                                       ((#{f 60752}#
                                          (lambda (#{y 60764}# #{k 60765}#)
                                            (let ((#{tmp 60767}#
                                                    ($sc-dispatch
                                                      #{y 60764}#
                                                      '(#(atom "quote")
                                                        each-any))))
                                              (if #{tmp 60767}#
                                                (@apply
                                                  (lambda (#{y 60770}#)
                                                    (#{k 60765}#
                                                      (map (lambda (#{tmp 60519 60771}#)
                                                             (list '#(syntax-object
                                                                      "quote"
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(y)
                                                                         #((top))
                                                                         #("i60517"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(f
                                                                           y
                                                                           k)
                                                                         #((top)
                                                                           (top)
                                                                           (top))
                                                                         #("i60499"
                                                                           "i60500"
                                                                           "i60501"))
                                                                       #(ribcage
                                                                         #(_)
                                                                         #((top))
                                                                         #("i60497"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(x)
                                                                         #((top))
                                                                         #("i60491"))
                                                                       #(ribcage
                                                                         (emit quasivector
                                                                               quasilist*
                                                                               quasiappend
                                                                               quasicons
                                                                               vquasi
                                                                               quasi)
                                                                         ((top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                         ("i60362"
                                                                          "i60360"
                                                                          "i60358"
                                                                          "i60356"
                                                                          "i60354"
                                                                          "i60352"
                                                                          "i60350"))
                                                                       #(ribcage
                                                                         (quasiquote)
                                                                         ((top))
                                                                         (((hygiene
                                                                             guile)
                                                                           .
                                                                           #(syntax-object
                                                                             quasiquote
                                                                             ((top))
                                                                             (hygiene
                                                                               guile))))))
                                                                      (hygiene
                                                                        guile))
                                                                   #{tmp 60519 60771}#))
                                                           #{y 60770}#)))
                                                  #{tmp 60767}#)
                                                (let ((#{tmp 60772}#
                                                        ($sc-dispatch
                                                          #{y 60764}#
                                                          '(#(atom "list")
                                                            .
                                                            each-any))))
                                                  (if #{tmp 60772}#
                                                    (@apply
                                                      (lambda (#{y 60775}#)
                                                        (#{k 60765}#
                                                          #{y 60775}#))
                                                      #{tmp 60772}#)
                                                    (let ((#{tmp 60776}#
                                                            ($sc-dispatch
                                                              #{y 60764}#
                                                              '(#(atom "list*")
                                                                .
                                                                #(each+
                                                                  any
                                                                  (any)
                                                                  ())))))
                                                      (if #{tmp 60776}#
                                                        (@apply
                                                          (lambda (#{y 60779}#
                                                                   #{z 60780}#)
                                                            (#{f 60752}#
                                                              #{z 60780}#
                                                              (lambda (#{ls 60781}#)
                                                                (#{k 60765}#
                                                                  (append
                                                                    #{y 60779}#
                                                                    #{ls 60781}#)))))
                                                          #{tmp 60776}#)
                                                        (list '#(syntax-object
                                                                 "list->vector"
                                                                 ((top)
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(#{ g60534}#)
                                                                    #((m60535
                                                                        top))
                                                                    #("i60538"))
                                                                  #(ribcage
                                                                    #(else)
                                                                    #((top))
                                                                    #("i60532"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(f y k)
                                                                    #((top)
                                                                      (top)
                                                                      (top))
                                                                    #("i60499"
                                                                      "i60500"
                                                                      "i60501"))
                                                                  #(ribcage
                                                                    #(_)
                                                                    #((top))
                                                                    #("i60497"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x)
                                                                    #((top))
                                                                    #("i60491"))
                                                                  #(ribcage
                                                                    (emit quasivector
                                                                          quasilist*
                                                                          quasiappend
                                                                          quasicons
                                                                          vquasi
                                                                          quasi)
                                                                    ((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                    ("i60362"
                                                                     "i60360"
                                                                     "i60358"
                                                                     "i60356"
                                                                     "i60354"
                                                                     "i60352"
                                                                     "i60350"))
                                                                  #(ribcage
                                                                    (quasiquote)
                                                                    ((top))
                                                                    (((hygiene
                                                                        guile)
                                                                      .
                                                                      #(syntax-object
                                                                        quasiquote
                                                                        ((top))
                                                                        (hygiene
                                                                          guile))))))
                                                                 (hygiene
                                                                   guile))
                                                              #{x 60744}#))))))))))
                                       (#{f 60752}#
                                         #{x 60744}#
                                         (lambda (#{ls 60754}#)
                                           (let ((#{tmp 60756}#
                                                   ($sc-dispatch
                                                     #{ls 60754}#
                                                     'each-any)))
                                             (if #{tmp 60756}#
                                               (@apply
                                                 (lambda (#{ g60507 60759}#)
                                                   (cons '#(syntax-object
                                                            "vector"
                                                            ((top)
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(#{ g60507}#)
                                                               #((m60508 top))
                                                               #("i60512"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(ls)
                                                               #((top))
                                                               #("i60506"))
                                                             #(ribcage
                                                               #(_)
                                                               #((top))
                                                               #("i60497"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i60491"))
                                                             #(ribcage
                                                               (emit quasivector
                                                                     quasilist*
                                                                     quasiappend
                                                                     quasicons
                                                                     vquasi
                                                                     quasi)
                                                               ((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                               ("i60362"
                                                                "i60360"
                                                                "i60358"
                                                                "i60356"
                                                                "i60354"
                                                                "i60352"
                                                                "i60350"))
                                                             #(ribcage
                                                               (quasiquote)
                                                               ((top))
                                                               (((hygiene
                                                                   guile)
                                                                 .
                                                                 #(syntax-object
                                                                   quasiquote
                                                                   ((top))
                                                                   (hygiene
                                                                     guile))))))
                                                            (hygiene guile))
                                                         #{ g60507 60759}#))
                                                 #{tmp 60756}#)
                                               (syntax-violation
                                                 #f
                                                 "source expression failed to match any pattern"
                                                 #{ls 60754}#))))))))))
                             #{tmp 60737}#)
                           (list '#(syntax-object
                                    "quote"
                                    ((top)
                                     #(ribcage #(p) #((top)) #("i60397"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p lev)
                                       #((top) (top))
                                       #("i60366" "i60367"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i60362"
                                        "i60360"
                                        "i60358"
                                        "i60356"
                                        "i60354"
                                        "i60352"
                                        "i60350"))
                                     #(ribcage
                                       (quasiquote)
                                       ((top))
                                       (((hygiene guile)
                                         .
                                         #(syntax-object
                                           quasiquote
                                           ((top))
                                           (hygiene guile))))))
                                    (hygiene guile))
                                 #{p 60644}#)))))))))))
       (#{vquasi 60621}#
         (lambda (#{p 60809}# #{lev 60810}#)
           (let ((#{tmp 60812}#
                   ($sc-dispatch #{p 60809}# '(any . any))))
             (if #{tmp 60812}#
               (@apply
                 (lambda (#{p 60816}# #{q 60817}#)
                   (let ((#{tmp 60819}#
                           ($sc-dispatch
                             #{p 60816}#
                             '(#(free-id
                                 #(syntax-object
                                   unquote
                                   ((top)
                                    #(ribcage
                                      #(p q)
                                      #((top) (top))
                                      #("i60405" "i60406"))
                                    #(ribcage () () ())
                                    #(ribcage
                                      #(p lev)
                                      #((top) (top))
                                      #("i60401" "i60402"))
                                    #(ribcage
                                      (emit quasivector
                                            quasilist*
                                            quasiappend
                                            quasicons
                                            vquasi
                                            quasi)
                                      ((top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top))
                                      ("i60362"
                                       "i60360"
                                       "i60358"
                                       "i60356"
                                       "i60354"
                                       "i60352"
                                       "i60350"))
                                    #(ribcage
                                      (quasiquote)
                                      ((top))
                                      (((hygiene guile)
                                        .
                                        #(syntax-object
                                          quasiquote
                                          ((top))
                                          (hygiene guile))))))
                                   (hygiene guile)))
                               .
                               each-any))))
                     (if #{tmp 60819}#
                       (@apply
                         (lambda (#{p 60823}#)
                           (if (= #{lev 60810}# 0)
                             (#{quasilist* 60624}#
                               (map (lambda (#{tmp 60413 60862}#)
                                      (list '#(syntax-object
                                               "value"
                                               ((top)
                                                #(ribcage
                                                  #(p)
                                                  #((top))
                                                  #("i60411"))
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("i60405" "i60406"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("i60401" "i60402"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i60362"
                                                   "i60360"
                                                   "i60358"
                                                   "i60356"
                                                   "i60354"
                                                   "i60352"
                                                   "i60350"))
                                                #(ribcage
                                                  (quasiquote)
                                                  ((top))
                                                  (((hygiene guile)
                                                    .
                                                    #(syntax-object
                                                      quasiquote
                                                      ((top))
                                                      (hygiene guile))))))
                                               (hygiene guile))
                                            #{tmp 60413 60862}#))
                                    #{p 60823}#)
                               (#{vquasi 60621}# #{q 60817}# #{lev 60810}#))
                             (#{quasicons 60622}#
                               (#{quasicons 60622}#
                                 '(#(syntax-object
                                     "quote"
                                     ((top)
                                      #(ribcage #(p) #((top)) #("i60411"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("i60405" "i60406"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("i60401" "i60402"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i60362"
                                         "i60360"
                                         "i60358"
                                         "i60356"
                                         "i60354"
                                         "i60352"
                                         "i60350"))
                                      #(ribcage
                                        (quasiquote)
                                        ((top))
                                        (((hygiene guile)
                                          .
                                          #(syntax-object
                                            quasiquote
                                            ((top))
                                            (hygiene guile))))))
                                     (hygiene guile))
                                   #(syntax-object
                                     unquote
                                     ((top)
                                      #(ribcage #(p) #((top)) #("i60411"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("i60405" "i60406"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("i60401" "i60402"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i60362"
                                         "i60360"
                                         "i60358"
                                         "i60356"
                                         "i60354"
                                         "i60352"
                                         "i60350"))
                                      #(ribcage
                                        (quasiquote)
                                        ((top))
                                        (((hygiene guile)
                                          .
                                          #(syntax-object
                                            quasiquote
                                            ((top))
                                            (hygiene guile))))))
                                     (hygiene guile)))
                                 (#{quasi 60620}#
                                   #{p 60823}#
                                   (#{1-}# #{lev 60810}#)))
                               (#{vquasi 60621}# #{q 60817}# #{lev 60810}#))))
                         #{tmp 60819}#)
                       (let ((#{tmp 60869}#
                               ($sc-dispatch
                                 #{p 60816}#
                                 '(#(free-id
                                     #(syntax-object
                                       unquote-splicing
                                       ((top)
                                        #(ribcage
                                          #(p q)
                                          #((top) (top))
                                          #("i60405" "i60406"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(p lev)
                                          #((top) (top))
                                          #("i60401" "i60402"))
                                        #(ribcage
                                          (emit quasivector
                                                quasilist*
                                                quasiappend
                                                quasicons
                                                vquasi
                                                quasi)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("i60362"
                                           "i60360"
                                           "i60358"
                                           "i60356"
                                           "i60354"
                                           "i60352"
                                           "i60350"))
                                        #(ribcage
                                          (quasiquote)
                                          ((top))
                                          (((hygiene guile)
                                            .
                                            #(syntax-object
                                              quasiquote
                                              ((top))
                                              (hygiene guile))))))
                                       (hygiene guile)))
                                   .
                                   each-any))))
                         (if #{tmp 60869}#
                           (@apply
                             (lambda (#{p 60873}#)
                               (if (= #{lev 60810}# 0)
                                 (#{quasiappend 60623}#
                                   (map (lambda (#{tmp 60418 60876}#)
                                          (list '#(syntax-object
                                                   "value"
                                                   ((top)
                                                    #(ribcage
                                                      #(p)
                                                      #((top))
                                                      #("i60416"))
                                                    #(ribcage
                                                      #(p q)
                                                      #((top) (top))
                                                      #("i60405" "i60406"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(p lev)
                                                      #((top) (top))
                                                      #("i60401" "i60402"))
                                                    #(ribcage
                                                      (emit quasivector
                                                            quasilist*
                                                            quasiappend
                                                            quasicons
                                                            vquasi
                                                            quasi)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i60362"
                                                       "i60360"
                                                       "i60358"
                                                       "i60356"
                                                       "i60354"
                                                       "i60352"
                                                       "i60350"))
                                                    #(ribcage
                                                      (quasiquote)
                                                      ((top))
                                                      (((hygiene guile)
                                                        .
                                                        #(syntax-object
                                                          quasiquote
                                                          ((top))
                                                          (hygiene guile))))))
                                                   (hygiene guile))
                                                #{tmp 60418 60876}#))
                                        #{p 60873}#)
                                   (#{vquasi 60621}#
                                     #{q 60817}#
                                     #{lev 60810}#))
                                 (#{quasicons 60622}#
                                   (#{quasicons 60622}#
                                     '(#(syntax-object
                                         "quote"
                                         ((top)
                                          #(ribcage #(p) #((top)) #("i60416"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("i60405" "i60406"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("i60401" "i60402"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i60362"
                                             "i60360"
                                             "i60358"
                                             "i60356"
                                             "i60354"
                                             "i60352"
                                             "i60350"))
                                          #(ribcage
                                            (quasiquote)
                                            ((top))
                                            (((hygiene guile)
                                              .
                                              #(syntax-object
                                                quasiquote
                                                ((top))
                                                (hygiene guile))))))
                                         (hygiene guile))
                                       #(syntax-object
                                         unquote-splicing
                                         ((top)
                                          #(ribcage #(p) #((top)) #("i60416"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("i60405" "i60406"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("i60401" "i60402"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i60362"
                                             "i60360"
                                             "i60358"
                                             "i60356"
                                             "i60354"
                                             "i60352"
                                             "i60350"))
                                          #(ribcage
                                            (quasiquote)
                                            ((top))
                                            (((hygiene guile)
                                              .
                                              #(syntax-object
                                                quasiquote
                                                ((top))
                                                (hygiene guile))))))
                                         (hygiene guile)))
                                     (#{quasi 60620}#
                                       #{p 60873}#
                                       (#{1-}# #{lev 60810}#)))
                                   (#{vquasi 60621}#
                                     #{q 60817}#
                                     #{lev 60810}#))))
                             #{tmp 60869}#)
                           (#{quasicons 60622}#
                             (#{quasi 60620}# #{p 60816}# #{lev 60810}#)
                             (#{vquasi 60621}# #{q 60817}# #{lev 60810}#)))))))
                 #{tmp 60812}#)
               (let ((#{tmp 60894}# ($sc-dispatch #{p 60809}# '())))
                 (if #{tmp 60894}#
                   (@apply
                     (lambda ()
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i60401" "i60402"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i60362"
                               "i60360"
                               "i60358"
                               "i60356"
                               "i60354"
                               "i60352"
                               "i60350"))
                            #(ribcage
                              (quasiquote)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  quasiquote
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))
                         ()))
                     #{tmp 60894}#)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     #{p 60809}#)))))))
       (#{quasicons 60622}#
         (lambda (#{x 60907}# #{y 60908}#)
           (let ((#{tmp 60909}# (list #{x 60907}# #{y 60908}#)))
             (let ((#{tmp 60910}#
                     ($sc-dispatch #{tmp 60909}# '(any any))))
               (if #{tmp 60910}#
                 (@apply
                   (lambda (#{x 60912}# #{y 60913}#)
                     (let ((#{tmp 60915}#
                             ($sc-dispatch
                               #{y 60913}#
                               '(#(atom "quote") any))))
                       (if #{tmp 60915}#
                         (@apply
                           (lambda (#{dy 60919}#)
                             (let ((#{tmp 60921}#
                                     ($sc-dispatch
                                       #{x 60912}#
                                       '(#(atom "quote") any))))
                               (if #{tmp 60921}#
                                 (@apply
                                   (lambda (#{dx 60925}#)
                                     (list '#(syntax-object
                                              "quote"
                                              ((top)
                                               #(ribcage
                                                 #(dx)
                                                 #((top))
                                                 #("i60440"))
                                               #(ribcage
                                                 #(dy)
                                                 #((top))
                                                 #("i60436"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i60430" "i60431"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i60425" "i60426"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i60362"
                                                  "i60360"
                                                  "i60358"
                                                  "i60356"
                                                  "i60354"
                                                  "i60352"
                                                  "i60350"))
                                               #(ribcage
                                                 (quasiquote)
                                                 ((top))
                                                 (((hygiene guile)
                                                   .
                                                   #(syntax-object
                                                     quasiquote
                                                     ((top))
                                                     (hygiene guile))))))
                                              (hygiene guile))
                                           (cons #{dx 60925}# #{dy 60919}#)))
                                   #{tmp 60921}#)
                                 (if (null? #{dy 60919}#)
                                   (list '#(syntax-object
                                            "list"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("i60442"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("i60436"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i60430" "i60431"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i60425" "i60426"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i60362"
                                                "i60360"
                                                "i60358"
                                                "i60356"
                                                "i60354"
                                                "i60352"
                                                "i60350"))
                                             #(ribcage
                                               (quasiquote)
                                               ((top))
                                               (((hygiene guile)
                                                 .
                                                 #(syntax-object
                                                   quasiquote
                                                   ((top))
                                                   (hygiene guile))))))
                                            (hygiene guile))
                                         #{x 60912}#)
                                   (list '#(syntax-object
                                            "list*"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("i60442"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("i60436"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i60430" "i60431"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i60425" "i60426"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i60362"
                                                "i60360"
                                                "i60358"
                                                "i60356"
                                                "i60354"
                                                "i60352"
                                                "i60350"))
                                             #(ribcage
                                               (quasiquote)
                                               ((top))
                                               (((hygiene guile)
                                                 .
                                                 #(syntax-object
                                                   quasiquote
                                                   ((top))
                                                   (hygiene guile))))))
                                            (hygiene guile))
                                         #{x 60912}#
                                         #{y 60913}#)))))
                           #{tmp 60915}#)
                         (let ((#{tmp 60930}#
                                 ($sc-dispatch
                                   #{y 60913}#
                                   '(#(atom "list") . any))))
                           (if #{tmp 60930}#
                             (@apply
                               (lambda (#{stuff 60934}#)
                                 (cons '#(syntax-object
                                          "list"
                                          ((top)
                                           #(ribcage
                                             #(stuff)
                                             #((top))
                                             #("i60445"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i60430" "i60431"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i60425" "i60426"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i60362"
                                              "i60360"
                                              "i60358"
                                              "i60356"
                                              "i60354"
                                              "i60352"
                                              "i60350"))
                                           #(ribcage
                                             (quasiquote)
                                             ((top))
                                             (((hygiene guile)
                                               .
                                               #(syntax-object
                                                 quasiquote
                                                 ((top))
                                                 (hygiene guile))))))
                                          (hygiene guile))
                                       (cons #{x 60912}# #{stuff 60934}#)))
                               #{tmp 60930}#)
                             (let ((#{tmp 60935}#
                                     ($sc-dispatch
                                       #{y 60913}#
                                       '(#(atom "list*") . any))))
                               (if #{tmp 60935}#
                                 (@apply
                                   (lambda (#{stuff 60939}#)
                                     (cons '#(syntax-object
                                              "list*"
                                              ((top)
                                               #(ribcage
                                                 #(stuff)
                                                 #((top))
                                                 #("i60448"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i60430" "i60431"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i60425" "i60426"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i60362"
                                                  "i60360"
                                                  "i60358"
                                                  "i60356"
                                                  "i60354"
                                                  "i60352"
                                                  "i60350"))
                                               #(ribcage
                                                 (quasiquote)
                                                 ((top))
                                                 (((hygiene guile)
                                                   .
                                                   #(syntax-object
                                                     quasiquote
                                                     ((top))
                                                     (hygiene guile))))))
                                              (hygiene guile))
                                           (cons #{x 60912}# #{stuff 60939}#)))
                                   #{tmp 60935}#)
                                 (list '#(syntax-object
                                          "list*"
                                          ((top)
                                           #(ribcage #(_) #((top)) #("i60450"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i60430" "i60431"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i60425" "i60426"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i60362"
                                              "i60360"
                                              "i60358"
                                              "i60356"
                                              "i60354"
                                              "i60352"
                                              "i60350"))
                                           #(ribcage
                                             (quasiquote)
                                             ((top))
                                             (((hygiene guile)
                                               .
                                               #(syntax-object
                                                 quasiquote
                                                 ((top))
                                                 (hygiene guile))))))
                                          (hygiene guile))
                                       #{x 60912}#
                                       #{y 60913}#))))))))
                   #{tmp 60910}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{tmp 60909}#))))))
       (#{quasiappend 60623}#
         (lambda (#{x 60950}# #{y 60951}#)
           (let ((#{tmp 60953}#
                   ($sc-dispatch #{y 60951}# '(#(atom "quote") ()))))
             (if #{tmp 60953}#
               (@apply
                 (lambda ()
                   (if (null? #{x 60950}#)
                     '(#(syntax-object
                         "quote"
                         ((top)
                          #(ribcage () () ())
                          #(ribcage
                            #(x y)
                            #((top) (top))
                            #("i60454" "i60455"))
                          #(ribcage
                            (emit quasivector
                                  quasilist*
                                  quasiappend
                                  quasicons
                                  vquasi
                                  quasi)
                            ((top) (top) (top) (top) (top) (top) (top))
                            ("i60362"
                             "i60360"
                             "i60358"
                             "i60356"
                             "i60354"
                             "i60352"
                             "i60350"))
                          #(ribcage
                            (quasiquote)
                            ((top))
                            (((hygiene guile)
                              .
                              #(syntax-object
                                quasiquote
                                ((top))
                                (hygiene guile))))))
                         (hygiene guile))
                       ())
                     (if (null? (cdr #{x 60950}#))
                       (car #{x 60950}#)
                       (let ((#{tmp 60958}#
                               ($sc-dispatch #{x 60950}# 'each-any)))
                         (if #{tmp 60958}#
                           (@apply
                             (lambda (#{p 60962}#)
                               (cons '#(syntax-object
                                        "append"
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage #(p) #((top)) #("i60466"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(x y)
                                           #((top) (top))
                                           #("i60454" "i60455"))
                                         #(ribcage
                                           (emit quasivector
                                                 quasilist*
                                                 quasiappend
                                                 quasicons
                                                 vquasi
                                                 quasi)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("i60362"
                                            "i60360"
                                            "i60358"
                                            "i60356"
                                            "i60354"
                                            "i60352"
                                            "i60350"))
                                         #(ribcage
                                           (quasiquote)
                                           ((top))
                                           (((hygiene guile)
                                             .
                                             #(syntax-object
                                               quasiquote
                                               ((top))
                                               (hygiene guile))))))
                                        (hygiene guile))
                                     #{p 60962}#))
                             #{tmp 60958}#)
                           (syntax-violation
                             #f
                             "source expression failed to match any pattern"
                             #{x 60950}#))))))
                 #{tmp 60953}#)
               (if (null? #{x 60950}#)
                 #{y 60951}#
                 (let ((#{tmp 60970}# (list #{x 60950}# #{y 60951}#)))
                   (let ((#{tmp 60971}#
                           ($sc-dispatch #{tmp 60970}# '(each-any any))))
                     (if #{tmp 60971}#
                       (@apply
                         (lambda (#{p 60973}# #{y 60974}#)
                           (cons '#(syntax-object
                                    "append"
                                    ((top)
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p y)
                                       #((top) (top))
                                       #("i60477" "i60478"))
                                     #(ribcage #(_) #((top)) #("i60469"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x y)
                                       #((top) (top))
                                       #("i60454" "i60455"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i60362"
                                        "i60360"
                                        "i60358"
                                        "i60356"
                                        "i60354"
                                        "i60352"
                                        "i60350"))
                                     #(ribcage
                                       (quasiquote)
                                       ((top))
                                       (((hygiene guile)
                                         .
                                         #(syntax-object
                                           quasiquote
                                           ((top))
                                           (hygiene guile))))))
                                    (hygiene guile))
                                 (append #{p 60973}# (list #{y 60974}#))))
                         #{tmp 60971}#)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         #{tmp 60970}#)))))))))
       (#{quasilist* 60624}#
         (lambda (#{x 60978}# #{y 60979}#)
           (letrec*
             ((#{f 60980}#
                (lambda (#{x 61084}#)
                  (if (null? #{x 61084}#)
                    #{y 60979}#
                    (#{quasicons 60622}#
                      (car #{x 61084}#)
                      (#{f 60980}# (cdr #{x 61084}#)))))))
             (#{f 60980}# #{x 60978}#))))
       (#{emit 60626}#
         (lambda (#{x 61087}#)
           (let ((#{tmp 61089}#
                   ($sc-dispatch #{x 61087}# '(#(atom "quote") any))))
             (if #{tmp 61089}#
               (@apply
                 (lambda (#{x 61093}#)
                   (list '#(syntax-object
                            quote
                            ((top)
                             #(ribcage #(x) #((top)) #("i60544"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i60541"))
                             #(ribcage
                               (emit quasivector
                                     quasilist*
                                     quasiappend
                                     quasicons
                                     vquasi
                                     quasi)
                               ((top) (top) (top) (top) (top) (top) (top))
                               ("i60362"
                                "i60360"
                                "i60358"
                                "i60356"
                                "i60354"
                                "i60352"
                                "i60350"))
                             #(ribcage
                               (quasiquote)
                               ((top))
                               (((hygiene guile)
                                 .
                                 #(syntax-object
                                   quasiquote
                                   ((top))
                                   (hygiene guile))))))
                            (hygiene guile))
                         #{x 61093}#))
                 #{tmp 61089}#)
               (let ((#{tmp 61094}#
                       ($sc-dispatch
                         #{x 61087}#
                         '(#(atom "list") . each-any))))
                 (if #{tmp 61094}#
                   (@apply
                     (lambda (#{x 61098}#)
                       (let ((#{tmp 61099}# (map #{emit 60626}# #{x 61098}#)))
                         (let ((#{tmp 61100}#
                                 ($sc-dispatch #{tmp 61099}# 'each-any)))
                           (if #{tmp 61100}#
                             (@apply
                               (lambda (#{ g60549 61102}#)
                                 (cons '#(syntax-object
                                          list
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(#{ g60549}#)
                                             #((m60550 top))
                                             #("i60554"))
                                           #(ribcage #(x) #((top)) #("i60547"))
                                           #(ribcage () () ())
                                           #(ribcage #(x) #((top)) #("i60541"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i60362"
                                              "i60360"
                                              "i60358"
                                              "i60356"
                                              "i60354"
                                              "i60352"
                                              "i60350"))
                                           #(ribcage
                                             (quasiquote)
                                             ((top))
                                             (((hygiene guile)
                                               .
                                               #(syntax-object
                                                 quasiquote
                                                 ((top))
                                                 (hygiene guile))))))
                                          (hygiene guile))
                                       #{ g60549 61102}#))
                               #{tmp 61100}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp 61099}#)))))
                     #{tmp 61094}#)
                   (let ((#{tmp 61103}#
                           ($sc-dispatch
                             #{x 61087}#
                             '(#(atom "list*") . #(each+ any (any) ())))))
                     (if #{tmp 61103}#
                       (@apply
                         (lambda (#{x 61107}# #{y 61108}#)
                           (letrec*
                             ((#{f 61109}#
                                (lambda (#{x* 61112}#)
                                  (if (null? #{x* 61112}#)
                                    (#{emit 60626}# #{y 61108}#)
                                    (let ((#{tmp 61113}#
                                            (list (#{emit 60626}#
                                                    (car #{x* 61112}#))
                                                  (#{f 61109}#
                                                    (cdr #{x* 61112}#)))))
                                      (let ((#{tmp 61114}#
                                              ($sc-dispatch
                                                #{tmp 61113}#
                                                '(any any))))
                                        (if #{tmp 61114}#
                                          (@apply
                                            (lambda (#{ g60569 61116}#
                                                     #{ g60568 61117}#)
                                              (list '#(syntax-object
                                                       cons
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(#{ g60569}#
                                                            #{ g60568}#)
                                                          #((m60570 top)
                                                            (m60570 top))
                                                          #("i60574" "i60575"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(f x*)
                                                          #((top) (top))
                                                          #("i60563" "i60564"))
                                                        #(ribcage
                                                          #(x y)
                                                          #((top) (top))
                                                          #("i60559" "i60560"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i60541"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i60362"
                                                           "i60360"
                                                           "i60358"
                                                           "i60356"
                                                           "i60354"
                                                           "i60352"
                                                           "i60350"))
                                                        #(ribcage
                                                          (quasiquote)
                                                          ((top))
                                                          (((hygiene guile)
                                                            .
                                                            #(syntax-object
                                                              quasiquote
                                                              ((top))
                                                              (hygiene
                                                                guile))))))
                                                       (hygiene guile))
                                                    #{ g60569 61116}#
                                                    #{ g60568 61117}#))
                                            #{tmp 61114}#)
                                          (syntax-violation
                                            #f
                                            "source expression failed to match any pattern"
                                            #{tmp 61113}#))))))))
                             (#{f 61109}# #{x 61107}#)))
                         #{tmp 61103}#)
                       (let ((#{tmp 61118}#
                               ($sc-dispatch
                                 #{x 61087}#
                                 '(#(atom "append") . each-any))))
                         (if #{tmp 61118}#
                           (@apply
                             (lambda (#{x 61122}#)
                               (let ((#{tmp 61123}#
                                       (map #{emit 60626}# #{x 61122}#)))
                                 (let ((#{tmp 61124}#
                                         ($sc-dispatch
                                           #{tmp 61123}#
                                           'each-any)))
                                   (if #{tmp 61124}#
                                     (@apply
                                       (lambda (#{ g60581 61126}#)
                                         (cons '#(syntax-object
                                                  append
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(#{ g60581}#)
                                                     #((m60582 top))
                                                     #("i60586"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i60579"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i60541"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i60362"
                                                      "i60360"
                                                      "i60358"
                                                      "i60356"
                                                      "i60354"
                                                      "i60352"
                                                      "i60350"))
                                                   #(ribcage
                                                     (quasiquote)
                                                     ((top))
                                                     (((hygiene guile)
                                                       .
                                                       #(syntax-object
                                                         quasiquote
                                                         ((top))
                                                         (hygiene guile))))))
                                                  (hygiene guile))
                                               #{ g60581 61126}#))
                                       #{tmp 61124}#)
                                     (syntax-violation
                                       #f
                                       "source expression failed to match any pattern"
                                       #{tmp 61123}#)))))
                             #{tmp 61118}#)
                           (let ((#{tmp 61127}#
                                   ($sc-dispatch
                                     #{x 61087}#
                                     '(#(atom "vector") . each-any))))
                             (if #{tmp 61127}#
                               (@apply
                                 (lambda (#{x 61131}#)
                                   (let ((#{tmp 61132}#
                                           (map #{emit 60626}# #{x 61131}#)))
                                     (let ((#{tmp 61133}#
                                             ($sc-dispatch
                                               #{tmp 61132}#
                                               'each-any)))
                                       (if #{tmp 61133}#
                                         (@apply
                                           (lambda (#{ g60593 61135}#)
                                             (cons '#(syntax-object
                                                      vector
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(#{ g60593}#)
                                                         #((m60594 top))
                                                         #("i60598"))
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i60591"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i60541"))
                                                       #(ribcage
                                                         (emit quasivector
                                                               quasilist*
                                                               quasiappend
                                                               quasicons
                                                               vquasi
                                                               quasi)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("i60362"
                                                          "i60360"
                                                          "i60358"
                                                          "i60356"
                                                          "i60354"
                                                          "i60352"
                                                          "i60350"))
                                                       #(ribcage
                                                         (quasiquote)
                                                         ((top))
                                                         (((hygiene guile)
                                                           .
                                                           #(syntax-object
                                                             quasiquote
                                                             ((top))
                                                             (hygiene
                                                               guile))))))
                                                      (hygiene guile))
                                                   #{ g60593 61135}#))
                                           #{tmp 61133}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp 61132}#)))))
                                 #{tmp 61127}#)
                               (let ((#{tmp 61136}#
                                       ($sc-dispatch
                                         #{x 61087}#
                                         '(#(atom "list->vector") any))))
                                 (if #{tmp 61136}#
                                   (@apply
                                     (lambda (#{x 61140}#)
                                       (let ((#{tmp 61141}#
                                               (#{emit 60626}# #{x 61140}#)))
                                         (list '#(syntax-object
                                                  list->vector
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(#{ g60605}#)
                                                     #((m60606 top))
                                                     #("i60609"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i60603"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i60541"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i60362"
                                                      "i60360"
                                                      "i60358"
                                                      "i60356"
                                                      "i60354"
                                                      "i60352"
                                                      "i60350"))
                                                   #(ribcage
                                                     (quasiquote)
                                                     ((top))
                                                     (((hygiene guile)
                                                       .
                                                       #(syntax-object
                                                         quasiquote
                                                         ((top))
                                                         (hygiene guile))))))
                                                  (hygiene guile))
                                               #{tmp 61141}#)))
                                     #{tmp 61136}#)
                                   (let ((#{tmp 61144}#
                                           ($sc-dispatch
                                             #{x 61087}#
                                             '(#(atom "value") any))))
                                     (if #{tmp 61144}#
                                       (@apply
                                         (lambda (#{x 61148}#) #{x 61148}#)
                                         #{tmp 61144}#)
                                       (syntax-violation
                                         #f
                                         "source expression failed to match any pattern"
                                         #{x 61087}#))))))))))))))))))
      (lambda (#{x 60627}#)
        (let ((#{tmp 60629}#
                ($sc-dispatch #{x 60627}# '(_ any))))
          (if #{tmp 60629}#
            (@apply
              (lambda (#{e 60633}#)
                (#{emit 60626}# (#{quasi 60620}# #{e 60633}# 0)))
              #{tmp 60629}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{x 60627}#)))))))

(define include
  (make-syntax-transformer
    'include
    'macro
    (lambda (#{x 61204}#)
      (letrec*
        ((#{read-file 61205}#
           (lambda (#{fn 61314}# #{k 61315}#)
             (let ((#{p 61316}# (open-input-file #{fn 61314}#)))
               (letrec*
                 ((#{f 61317}#
                    (lambda (#{x 61371}# #{result 61372}#)
                      (if (eof-object? #{x 61371}#)
                        (begin
                          (close-input-port #{p 61316}#)
                          (reverse #{result 61372}#))
                        (#{f 61317}#
                          (read #{p 61316}#)
                          (cons (datum->syntax #{k 61315}# #{x 61371}#)
                                #{result 61372}#))))))
                 (#{f 61317}# (read #{p 61316}#) '()))))))
        (let ((#{tmp 61207}#
                ($sc-dispatch #{x 61204}# '(any any))))
          (if #{tmp 61207}#
            (@apply
              (lambda (#{k 61211}# #{filename 61212}#)
                (let ((#{fn 61213}# (syntax->datum #{filename 61212}#)))
                  (let ((#{tmp 61214}#
                          (#{read-file 61205}#
                            #{fn 61213}#
                            #{filename 61212}#)))
                    (let ((#{tmp 61215}#
                            ($sc-dispatch #{tmp 61214}# 'each-any)))
                      (if #{tmp 61215}#
                        (@apply
                          (lambda (#{exp 61233}#)
                            (cons '#(syntax-object
                                     begin
                                     ((top)
                                      #(ribcage () () ())
                                      #(ribcage #(exp) #((top)) #("i61201"))
                                      #(ribcage () () ())
                                      #(ribcage () () ())
                                      #(ribcage #(fn) #((top)) #("i61196"))
                                      #(ribcage
                                        #(k filename)
                                        #((top) (top))
                                        #("i61192" "i61193"))
                                      #(ribcage (read-file) ((top)) ("i61176"))
                                      #(ribcage #(x) #((top)) #("i61175"))
                                      #(ribcage
                                        (include)
                                        ((top))
                                        (((hygiene guile)
                                          .
                                          #(syntax-object
                                            include
                                            ((top))
                                            (hygiene guile))))))
                                     (hygiene guile))
                                  #{exp 61233}#))
                          #{tmp 61215}#)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          #{tmp 61214}#))))))
              #{tmp 61207}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{x 61204}#)))))))

(define include-from-path
  (make-syntax-transformer
    'include-from-path
    'macro
    (lambda (#{x 61392}#)
      (let ((#{tmp 61394}#
              ($sc-dispatch #{x 61392}# '(any any))))
        (if #{tmp 61394}#
          (@apply
            (lambda (#{k 61398}# #{filename 61399}#)
              (let ((#{fn 61400}# (syntax->datum #{filename 61399}#)))
                (let ((#{tmp 61401}#
                        (datum->syntax
                          #{filename 61399}#
                          (let ((#{t 61404}# (%search-load-path #{fn 61400}#)))
                            (if #{t 61404}#
                              #{t 61404}#
                              (syntax-violation
                                'include-from-path
                                "file not found in path"
                                #{x 61392}#
                                #{filename 61399}#))))))
                  (list '#(syntax-object
                           include
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("i61386"))
                            #(ribcage () () ())
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("i61382"))
                            #(ribcage
                              #(k filename)
                              #((top) (top))
                              #("i61378" "i61379"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i61375"))
                            #(ribcage
                              (include-from-path)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  include-from-path
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))
                        #{tmp 61401}#))))
            #{tmp 61394}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 61392}#))))))

(define unquote
  (make-syntax-transformer
    'unquote
    'macro
    (lambda (#{x 61414}#)
      (syntax-violation
        'unquote
        "expression not valid outside of quasiquote"
        #{x 61414}#))))

(define unquote-splicing
  (make-syntax-transformer
    'unquote-splicing
    'macro
    (lambda (#{x 61418}#)
      (syntax-violation
        'unquote-splicing
        "expression not valid outside of quasiquote"
        #{x 61418}#))))

(define case
  (make-syntax-transformer
    'case
    'macro
    (lambda (#{x 61475}#)
      (let ((#{tmp 61477}#
              ($sc-dispatch
                #{x 61475}#
                '(_ any any . each-any))))
        (if #{tmp 61477}#
          (@apply
            (lambda (#{e 61481}# #{m1 61482}# #{m2 61483}#)
              (let ((#{tmp 61484}#
                      (letrec*
                        ((#{f 61538}#
                           (lambda (#{clause 61541}# #{clauses 61542}#)
                             (if (null? #{clauses 61542}#)
                               (let ((#{tmp 61544}#
                                       ($sc-dispatch
                                         #{clause 61541}#
                                         '(#(free-id
                                             #(syntax-object
                                               else
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(f clause clauses)
                                                  #((top) (top) (top))
                                                  #("i61434"
                                                    "i61435"
                                                    "i61436"))
                                                #(ribcage
                                                  #(e m1 m2)
                                                  #((top) (top) (top))
                                                  #("i61424"
                                                    "i61425"
                                                    "i61426"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x)
                                                  #((top))
                                                  #("i61421"))
                                                #(ribcage
                                                  (case)
                                                  ((top))
                                                  (((hygiene guile)
                                                    .
                                                    #(syntax-object
                                                      case
                                                      ((top))
                                                      (hygiene guile))))))
                                               (hygiene guile)))
                                           any
                                           .
                                           each-any))))
                                 (if #{tmp 61544}#
                                   (@apply
                                     (lambda (#{e1 61548}# #{e2 61549}#)
                                       (cons '#(syntax-object
                                                begin
                                                ((top)
                                                 #(ribcage
                                                   #(e1 e2)
                                                   #((top) (top))
                                                   #("i61443" "i61444"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(f clause clauses)
                                                   #((top) (top) (top))
                                                   #("i61434"
                                                     "i61435"
                                                     "i61436"))
                                                 #(ribcage
                                                   #(e m1 m2)
                                                   #((top) (top) (top))
                                                   #("i61424"
                                                     "i61425"
                                                     "i61426"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i61421"))
                                                 #(ribcage
                                                   (case)
                                                   ((top))
                                                   (((hygiene guile)
                                                     .
                                                     #(syntax-object
                                                       case
                                                       ((top))
                                                       (hygiene guile))))))
                                                (hygiene guile))
                                             (cons #{e1 61548}# #{e2 61549}#)))
                                     #{tmp 61544}#)
                                   (let ((#{tmp 61550}#
                                           ($sc-dispatch
                                             #{clause 61541}#
                                             '(each-any any . each-any))))
                                     (if #{tmp 61550}#
                                       (@apply
                                         (lambda (#{k 61554}#
                                                  #{e1 61555}#
                                                  #{e2 61556}#)
                                           (list '#(syntax-object
                                                    if
                                                    ((top)
                                                     #(ribcage
                                                       #(k e1 e2)
                                                       #((top) (top) (top))
                                                       #("i61449"
                                                         "i61450"
                                                         "i61451"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(f clause clauses)
                                                       #((top) (top) (top))
                                                       #("i61434"
                                                         "i61435"
                                                         "i61436"))
                                                     #(ribcage
                                                       #(e m1 m2)
                                                       #((top) (top) (top))
                                                       #("i61424"
                                                         "i61425"
                                                         "i61426"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i61421"))
                                                     #(ribcage
                                                       (case)
                                                       ((top))
                                                       (((hygiene guile)
                                                         .
                                                         #(syntax-object
                                                           case
                                                           ((top))
                                                           (hygiene guile))))))
                                                    (hygiene guile))
                                                 (list '#(syntax-object
                                                          memv
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i61449"
                                                               "i61450"
                                                               "i61451"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i61434"
                                                               "i61435"
                                                               "i61436"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i61424"
                                                               "i61425"
                                                               "i61426"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i61421"))
                                                           #(ribcage
                                                             (case)
                                                             ((top))
                                                             (((hygiene guile)
                                                               .
                                                               #(syntax-object
                                                                 case
                                                                 ((top))
                                                                 (hygiene
                                                                   guile))))))
                                                          (hygiene guile))
                                                       '#(syntax-object
                                                          t
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i61449"
                                                               "i61450"
                                                               "i61451"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i61434"
                                                               "i61435"
                                                               "i61436"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i61424"
                                                               "i61425"
                                                               "i61426"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i61421"))
                                                           #(ribcage
                                                             (case)
                                                             ((top))
                                                             (((hygiene guile)
                                                               .
                                                               #(syntax-object
                                                                 case
                                                                 ((top))
                                                                 (hygiene
                                                                   guile))))))
                                                          (hygiene guile))
                                                       (list '#(syntax-object
                                                                quote
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k e1 e2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i61449"
                                                                     "i61450"
                                                                     "i61451"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(f
                                                                     clause
                                                                     clauses)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i61434"
                                                                     "i61435"
                                                                     "i61436"))
                                                                 #(ribcage
                                                                   #(e m1 m2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i61424"
                                                                     "i61425"
                                                                     "i61426"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i61421"))
                                                                 #(ribcage
                                                                   (case)
                                                                   ((top))
                                                                   (((hygiene
                                                                       guile)
                                                                     .
                                                                     #(syntax-object
                                                                       case
                                                                       ((top))
                                                                       (hygiene
                                                                         guile))))))
                                                                (hygiene
                                                                  guile))
                                                             #{k 61554}#))
                                                 (cons '#(syntax-object
                                                          begin
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i61449"
                                                               "i61450"
                                                               "i61451"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i61434"
                                                               "i61435"
                                                               "i61436"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i61424"
                                                               "i61425"
                                                               "i61426"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i61421"))
                                                           #(ribcage
                                                             (case)
                                                             ((top))
                                                             (((hygiene guile)
                                                               .
                                                               #(syntax-object
                                                                 case
                                                                 ((top))
                                                                 (hygiene
                                                                   guile))))))
                                                          (hygiene guile))
                                                       (cons #{e1 61555}#
                                                             #{e2 61556}#))))
                                         #{tmp 61550}#)
                                       (syntax-violation
                                         'case
                                         "bad clause"
                                         #{x 61475}#
                                         #{clause 61541}#)))))
                               (let ((#{tmp 61564}#
                                       (#{f 61538}#
                                         (car #{clauses 61542}#)
                                         (cdr #{clauses 61542}#))))
                                 (let ((#{tmp 61567}#
                                         ($sc-dispatch
                                           #{clause 61541}#
                                           '(each-any any . each-any))))
                                   (if #{tmp 61567}#
                                     (@apply
                                       (lambda (#{k 61571}#
                                                #{e1 61572}#
                                                #{e2 61573}#)
                                         (list '#(syntax-object
                                                  if
                                                  ((top)
                                                   #(ribcage
                                                     #(k e1 e2)
                                                     #((top) (top) (top))
                                                     #("i61465"
                                                       "i61466"
                                                       "i61467"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(rest)
                                                     #((top))
                                                     #("i61461"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(f clause clauses)
                                                     #((top) (top) (top))
                                                     #("i61434"
                                                       "i61435"
                                                       "i61436"))
                                                   #(ribcage
                                                     #(e m1 m2)
                                                     #((top) (top) (top))
                                                     #("i61424"
                                                       "i61425"
                                                       "i61426"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i61421"))
                                                   #(ribcage
                                                     (case)
                                                     ((top))
                                                     (((hygiene guile)
                                                       .
                                                       #(syntax-object
                                                         case
                                                         ((top))
                                                         (hygiene guile))))))
                                                  (hygiene guile))
                                               (list '#(syntax-object
                                                        memv
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i61465"
                                                             "i61466"
                                                             "i61467"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i61461"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i61434"
                                                             "i61435"
                                                             "i61436"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i61424"
                                                             "i61425"
                                                             "i61426"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i61421"))
                                                         #(ribcage
                                                           (case)
                                                           ((top))
                                                           (((hygiene guile)
                                                             .
                                                             #(syntax-object
                                                               case
                                                               ((top))
                                                               (hygiene
                                                                 guile))))))
                                                        (hygiene guile))
                                                     '#(syntax-object
                                                        t
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i61465"
                                                             "i61466"
                                                             "i61467"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i61461"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i61434"
                                                             "i61435"
                                                             "i61436"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i61424"
                                                             "i61425"
                                                             "i61426"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i61421"))
                                                         #(ribcage
                                                           (case)
                                                           ((top))
                                                           (((hygiene guile)
                                                             .
                                                             #(syntax-object
                                                               case
                                                               ((top))
                                                               (hygiene
                                                                 guile))))))
                                                        (hygiene guile))
                                                     (list '#(syntax-object
                                                              quote
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i61465"
                                                                   "i61466"
                                                                   "i61467"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(rest)
                                                                 #((top))
                                                                 #("i61461"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i61434"
                                                                   "i61435"
                                                                   "i61436"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i61424"
                                                                   "i61425"
                                                                   "i61426"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i61421"))
                                                               #(ribcage
                                                                 (case)
                                                                 ((top))
                                                                 (((hygiene
                                                                     guile)
                                                                   .
                                                                   #(syntax-object
                                                                     case
                                                                     ((top))
                                                                     (hygiene
                                                                       guile))))))
                                                              (hygiene guile))
                                                           #{k 61571}#))
                                               (cons '#(syntax-object
                                                        begin
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i61465"
                                                             "i61466"
                                                             "i61467"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i61461"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i61434"
                                                             "i61435"
                                                             "i61436"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i61424"
                                                             "i61425"
                                                             "i61426"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i61421"))
                                                         #(ribcage
                                                           (case)
                                                           ((top))
                                                           (((hygiene guile)
                                                             .
                                                             #(syntax-object
                                                               case
                                                               ((top))
                                                               (hygiene
                                                                 guile))))))
                                                        (hygiene guile))
                                                     (cons #{e1 61572}#
                                                           #{e2 61573}#))
                                               #{tmp 61564}#))
                                       #{tmp 61567}#)
                                     (syntax-violation
                                       'case
                                       "bad clause"
                                       #{x 61475}#
                                       #{clause 61541}#))))))))
                        (#{f 61538}# #{m1 61482}# #{m2 61483}#))))
                (let ((#{body 61485}# #{tmp 61484}#))
                  (list '#(syntax-object
                           let
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(body) #((top)) #("i61432"))
                            #(ribcage
                              #(e m1 m2)
                              #((top) (top) (top))
                              #("i61424" "i61425" "i61426"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i61421"))
                            #(ribcage
                              (case)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  case
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))
                        (list (list '#(syntax-object
                                       t
                                       ((top)
                                        #(ribcage () () ())
                                        #(ribcage #(body) #((top)) #("i61432"))
                                        #(ribcage
                                          #(e m1 m2)
                                          #((top) (top) (top))
                                          #("i61424" "i61425" "i61426"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i61421"))
                                        #(ribcage
                                          (case)
                                          ((top))
                                          (((hygiene guile)
                                            .
                                            #(syntax-object
                                              case
                                              ((top))
                                              (hygiene guile))))))
                                       (hygiene guile))
                                    #{e 61481}#))
                        #{body 61485}#))))
            #{tmp 61477}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 61475}#))))))

(define make-variable-transformer
  (lambda (#{proc 61592}#)
    (if (procedure? #{proc 61592}#)
      (letrec*
        ((#{trans 61593}#
           (lambda (#{x 61595}#)
             (#{proc 61592}# #{x 61595}#))))
        (begin
          (set-procedure-property!
            #{trans 61593}#
            'variable-transformer
            #t)
          #{trans 61593}#))
      (error "variable transformer not a procedure"
             #{proc 61592}#))))

(define identifier-syntax
  (make-syntax-transformer
    'identifier-syntax
    'macro
    (lambda (#{x 61632}#)
      (let ((#{tmp 61634}#
              ($sc-dispatch #{x 61632}# '(_ any))))
        (if #{tmp 61634}#
          (@apply
            (lambda (#{e 61638}#)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage #(e) #((top)) #("i61607"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i61604"))
                        #(ribcage
                          (identifier-syntax)
                          ((top))
                          (((hygiene guile)
                            .
                            #(syntax-object
                              identifier-syntax
                              ((top))
                              (hygiene guile))))))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage #(e) #((top)) #("i61607"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("i61604"))
                         #(ribcage
                           (identifier-syntax)
                           ((top))
                           (((hygiene guile)
                             .
                             #(syntax-object
                               identifier-syntax
                               ((top))
                               (hygiene guile))))))
                        (hygiene guile)))
                    '#((#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage #(e) #((top)) #("i61607"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i61604"))
                           #(ribcage
                             (identifier-syntax)
                             ((top))
                             (((hygiene guile)
                               .
                               #(syntax-object
                                 identifier-syntax
                                 ((top))
                                 (hygiene guile))))))
                          (hygiene guile))
                        .
                        #(syntax-object
                          identifier-syntax
                          ((top)
                           #(ribcage #(e) #((top)) #("i61607"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i61604"))
                           #(ribcage
                             (identifier-syntax)
                             ((top))
                             (((hygiene guile)
                               .
                               #(syntax-object
                                 identifier-syntax
                                 ((top))
                                 (hygiene guile))))))
                          (hygiene guile))))
                    (list '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage #(e) #((top)) #("i61607"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i61604"))
                              #(ribcage
                                (identifier-syntax)
                                ((top))
                                (((hygiene guile)
                                  .
                                  #(syntax-object
                                    identifier-syntax
                                    ((top))
                                    (hygiene guile))))))
                             (hygiene guile))
                          '#(syntax-object
                             x
                             ((top)
                              #(ribcage #(e) #((top)) #("i61607"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i61604"))
                              #(ribcage
                                (identifier-syntax)
                                ((top))
                                (((hygiene guile)
                                  .
                                  #(syntax-object
                                    identifier-syntax
                                    ((top))
                                    (hygiene guile))))))
                             (hygiene guile))
                          '()
                          (list '#(syntax-object
                                   id
                                   ((top)
                                    #(ribcage #(e) #((top)) #("i61607"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i61604"))
                                    #(ribcage
                                      (identifier-syntax)
                                      ((top))
                                      (((hygiene guile)
                                        .
                                        #(syntax-object
                                          identifier-syntax
                                          ((top))
                                          (hygiene guile))))))
                                   (hygiene guile))
                                '(#(syntax-object
                                    identifier?
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i61607"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i61604"))
                                     #(ribcage
                                       (identifier-syntax)
                                       ((top))
                                       (((hygiene guile)
                                         .
                                         #(syntax-object
                                           identifier-syntax
                                           ((top))
                                           (hygiene guile))))))
                                    (hygiene guile))
                                  (#(syntax-object
                                     syntax
                                     ((top)
                                      #(ribcage #(e) #((top)) #("i61607"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i61604"))
                                      #(ribcage
                                        (identifier-syntax)
                                        ((top))
                                        (((hygiene guile)
                                          .
                                          #(syntax-object
                                            identifier-syntax
                                            ((top))
                                            (hygiene guile))))))
                                     (hygiene guile))
                                   #(syntax-object
                                     id
                                     ((top)
                                      #(ribcage #(e) #((top)) #("i61607"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i61604"))
                                      #(ribcage
                                        (identifier-syntax)
                                        ((top))
                                        (((hygiene guile)
                                          .
                                          #(syntax-object
                                            identifier-syntax
                                            ((top))
                                            (hygiene guile))))))
                                     (hygiene guile))))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage #(e) #((top)) #("i61607"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i61604"))
                                          #(ribcage
                                            (identifier-syntax)
                                            ((top))
                                            (((hygiene guile)
                                              .
                                              #(syntax-object
                                                identifier-syntax
                                                ((top))
                                                (hygiene guile))))))
                                         (hygiene guile))
                                      #{e 61638}#))
                          (list '(#(syntax-object
                                    _
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i61607"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i61604"))
                                     #(ribcage
                                       (identifier-syntax)
                                       ((top))
                                       (((hygiene guile)
                                         .
                                         #(syntax-object
                                           identifier-syntax
                                           ((top))
                                           (hygiene guile))))))
                                    (hygiene guile))
                                  #(syntax-object
                                    x
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i61607"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i61604"))
                                     #(ribcage
                                       (identifier-syntax)
                                       ((top))
                                       (((hygiene guile)
                                         .
                                         #(syntax-object
                                           identifier-syntax
                                           ((top))
                                           (hygiene guile))))))
                                    (hygiene guile))
                                  #(syntax-object
                                    ...
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i61607"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i61604"))
                                     #(ribcage
                                       (identifier-syntax)
                                       ((top))
                                       (((hygiene guile)
                                         .
                                         #(syntax-object
                                           identifier-syntax
                                           ((top))
                                           (hygiene guile))))))
                                    (hygiene guile)))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage #(e) #((top)) #("i61607"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i61604"))
                                          #(ribcage
                                            (identifier-syntax)
                                            ((top))
                                            (((hygiene guile)
                                              .
                                              #(syntax-object
                                                identifier-syntax
                                                ((top))
                                                (hygiene guile))))))
                                         (hygiene guile))
                                      (cons #{e 61638}#
                                            '(#(syntax-object
                                                x
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("i61607"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i61604"))
                                                 #(ribcage
                                                   (identifier-syntax)
                                                   ((top))
                                                   (((hygiene guile)
                                                     .
                                                     #(syntax-object
                                                       identifier-syntax
                                                       ((top))
                                                       (hygiene guile))))))
                                                (hygiene guile))
                                              #(syntax-object
                                                ...
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("i61607"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i61604"))
                                                 #(ribcage
                                                   (identifier-syntax)
                                                   ((top))
                                                   (((hygiene guile)
                                                     .
                                                     #(syntax-object
                                                       identifier-syntax
                                                       ((top))
                                                       (hygiene guile))))))
                                                (hygiene guile)))))))))
            #{tmp 61634}#)
          (let ((#{tmp 61639}#
                  ($sc-dispatch
                    #{x 61632}#
                    '(_ (any any)
                        ((#(free-id
                            #(syntax-object
                              set!
                              ((top)
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i61604"))
                               #(ribcage
                                 (identifier-syntax)
                                 ((top))
                                 (((hygiene guile)
                                   .
                                   #(syntax-object
                                     identifier-syntax
                                     ((top))
                                     (hygiene guile))))))
                              (hygiene guile)))
                          any
                          any)
                         any)))))
            (if (if #{tmp 61639}#
                  (@apply
                    (lambda (#{id 61643}#
                             #{exp1 61644}#
                             #{var 61645}#
                             #{val 61646}#
                             #{exp2 61647}#)
                      (if (identifier? #{id 61643}#)
                        (identifier? #{var 61645}#)
                        #f))
                    #{tmp 61639}#)
                  #f)
              (@apply
                (lambda (#{id 61648}#
                         #{exp1 61649}#
                         #{var 61650}#
                         #{val 61651}#
                         #{exp2 61652}#)
                  (list '#(syntax-object
                           make-variable-transformer
                           ((top)
                            #(ribcage
                              #(id exp1 var val exp2)
                              #((top) (top) (top) (top) (top))
                              #("i61622" "i61623" "i61624" "i61625" "i61626"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i61604"))
                            #(ribcage
                              (identifier-syntax)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  identifier-syntax
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))
                        (list '#(syntax-object
                                 lambda
                                 ((top)
                                  #(ribcage
                                    #(id exp1 var val exp2)
                                    #((top) (top) (top) (top) (top))
                                    #("i61622"
                                      "i61623"
                                      "i61624"
                                      "i61625"
                                      "i61626"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i61604"))
                                  #(ribcage
                                    (identifier-syntax)
                                    ((top))
                                    (((hygiene guile)
                                      .
                                      #(syntax-object
                                        identifier-syntax
                                        ((top))
                                        (hygiene guile))))))
                                 (hygiene guile))
                              '(#(syntax-object
                                  x
                                  ((top)
                                   #(ribcage
                                     #(id exp1 var val exp2)
                                     #((top) (top) (top) (top) (top))
                                     #("i61622"
                                       "i61623"
                                       "i61624"
                                       "i61625"
                                       "i61626"))
                                   #(ribcage () () ())
                                   #(ribcage #(x) #((top)) #("i61604"))
                                   #(ribcage
                                     (identifier-syntax)
                                     ((top))
                                     (((hygiene guile)
                                       .
                                       #(syntax-object
                                         identifier-syntax
                                         ((top))
                                         (hygiene guile))))))
                                  (hygiene guile)))
                              '#((#(syntax-object
                                    macro-type
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("i61622"
                                         "i61623"
                                         "i61624"
                                         "i61625"
                                         "i61626"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i61604"))
                                     #(ribcage
                                       (identifier-syntax)
                                       ((top))
                                       (((hygiene guile)
                                         .
                                         #(syntax-object
                                           identifier-syntax
                                           ((top))
                                           (hygiene guile))))))
                                    (hygiene guile))
                                  .
                                  #(syntax-object
                                    variable-transformer
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("i61622"
                                         "i61623"
                                         "i61624"
                                         "i61625"
                                         "i61626"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i61604"))
                                     #(ribcage
                                       (identifier-syntax)
                                       ((top))
                                       (((hygiene guile)
                                         .
                                         #(syntax-object
                                           identifier-syntax
                                           ((top))
                                           (hygiene guile))))))
                                    (hygiene guile))))
                              (list '#(syntax-object
                                       syntax-case
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("i61622"
                                            "i61623"
                                            "i61624"
                                            "i61625"
                                            "i61626"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i61604"))
                                        #(ribcage
                                          (identifier-syntax)
                                          ((top))
                                          (((hygiene guile)
                                            .
                                            #(syntax-object
                                              identifier-syntax
                                              ((top))
                                              (hygiene guile))))))
                                       (hygiene guile))
                                    '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("i61622"
                                            "i61623"
                                            "i61624"
                                            "i61625"
                                            "i61626"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i61604"))
                                        #(ribcage
                                          (identifier-syntax)
                                          ((top))
                                          (((hygiene guile)
                                            .
                                            #(syntax-object
                                              identifier-syntax
                                              ((top))
                                              (hygiene guile))))))
                                       (hygiene guile))
                                    '(#(syntax-object
                                        set!
                                        ((top)
                                         #(ribcage
                                           #(id exp1 var val exp2)
                                           #((top) (top) (top) (top) (top))
                                           #("i61622"
                                             "i61623"
                                             "i61624"
                                             "i61625"
                                             "i61626"))
                                         #(ribcage () () ())
                                         #(ribcage #(x) #((top)) #("i61604"))
                                         #(ribcage
                                           (identifier-syntax)
                                           ((top))
                                           (((hygiene guile)
                                             .
                                             #(syntax-object
                                               identifier-syntax
                                               ((top))
                                               (hygiene guile))))))
                                        (hygiene guile)))
                                    (list (list '#(syntax-object
                                                   set!
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i61622"
                                                        "i61623"
                                                        "i61624"
                                                        "i61625"
                                                        "i61626"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i61604"))
                                                    #(ribcage
                                                      (identifier-syntax)
                                                      ((top))
                                                      (((hygiene guile)
                                                        .
                                                        #(syntax-object
                                                          identifier-syntax
                                                          ((top))
                                                          (hygiene guile))))))
                                                   (hygiene guile))
                                                #{var 61650}#
                                                #{val 61651}#)
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i61622"
                                                        "i61623"
                                                        "i61624"
                                                        "i61625"
                                                        "i61626"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i61604"))
                                                    #(ribcage
                                                      (identifier-syntax)
                                                      ((top))
                                                      (((hygiene guile)
                                                        .
                                                        #(syntax-object
                                                          identifier-syntax
                                                          ((top))
                                                          (hygiene guile))))))
                                                   (hygiene guile))
                                                #{exp2 61652}#))
                                    (list (cons #{id 61648}#
                                                '(#(syntax-object
                                                    x
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i61622"
                                                         "i61623"
                                                         "i61624"
                                                         "i61625"
                                                         "i61626"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i61604"))
                                                     #(ribcage
                                                       (identifier-syntax)
                                                       ((top))
                                                       (((hygiene guile)
                                                         .
                                                         #(syntax-object
                                                           identifier-syntax
                                                           ((top))
                                                           (hygiene guile))))))
                                                    (hygiene guile))
                                                  #(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i61622"
                                                         "i61623"
                                                         "i61624"
                                                         "i61625"
                                                         "i61626"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i61604"))
                                                     #(ribcage
                                                       (identifier-syntax)
                                                       ((top))
                                                       (((hygiene guile)
                                                         .
                                                         #(syntax-object
                                                           identifier-syntax
                                                           ((top))
                                                           (hygiene guile))))))
                                                    (hygiene guile))))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i61622"
                                                        "i61623"
                                                        "i61624"
                                                        "i61625"
                                                        "i61626"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i61604"))
                                                    #(ribcage
                                                      (identifier-syntax)
                                                      ((top))
                                                      (((hygiene guile)
                                                        .
                                                        #(syntax-object
                                                          identifier-syntax
                                                          ((top))
                                                          (hygiene guile))))))
                                                   (hygiene guile))
                                                (cons #{exp1 61649}#
                                                      '(#(syntax-object
                                                          x
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("i61622"
                                                               "i61623"
                                                               "i61624"
                                                               "i61625"
                                                               "i61626"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i61604"))
                                                           #(ribcage
                                                             (identifier-syntax)
                                                             ((top))
                                                             (((hygiene guile)
                                                               .
                                                               #(syntax-object
                                                                 identifier-syntax
                                                                 ((top))
                                                                 (hygiene
                                                                   guile))))))
                                                          (hygiene guile))
                                                        #(syntax-object
                                                          ...
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("i61622"
                                                               "i61623"
                                                               "i61624"
                                                               "i61625"
                                                               "i61626"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i61604"))
                                                           #(ribcage
                                                             (identifier-syntax)
                                                             ((top))
                                                             (((hygiene guile)
                                                               .
                                                               #(syntax-object
                                                                 identifier-syntax
                                                                 ((top))
                                                                 (hygiene
                                                                   guile))))))
                                                          (hygiene guile))))))
                                    (list #{id 61648}#
                                          (list '#(syntax-object
                                                   identifier?
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i61622"
                                                        "i61623"
                                                        "i61624"
                                                        "i61625"
                                                        "i61626"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i61604"))
                                                    #(ribcage
                                                      (identifier-syntax)
                                                      ((top))
                                                      (((hygiene guile)
                                                        .
                                                        #(syntax-object
                                                          identifier-syntax
                                                          ((top))
                                                          (hygiene guile))))))
                                                   (hygiene guile))
                                                (list '#(syntax-object
                                                         syntax
                                                         ((top)
                                                          #(ribcage
                                                            #(id
                                                              exp1
                                                              var
                                                              val
                                                              exp2)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i61622"
                                                              "i61623"
                                                              "i61624"
                                                              "i61625"
                                                              "i61626"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i61604"))
                                                          #(ribcage
                                                            (identifier-syntax)
                                                            ((top))
                                                            (((hygiene guile)
                                                              .
                                                              #(syntax-object
                                                                identifier-syntax
                                                                ((top))
                                                                (hygiene
                                                                  guile))))))
                                                         (hygiene guile))
                                                      #{id 61648}#))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i61622"
                                                        "i61623"
                                                        "i61624"
                                                        "i61625"
                                                        "i61626"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i61604"))
                                                    #(ribcage
                                                      (identifier-syntax)
                                                      ((top))
                                                      (((hygiene guile)
                                                        .
                                                        #(syntax-object
                                                          identifier-syntax
                                                          ((top))
                                                          (hygiene guile))))))
                                                   (hygiene guile))
                                                #{exp1 61649}#))))))
                #{tmp 61639}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 61632}#))))))))

(define define*
  (make-syntax-transformer
    'define*
    'macro
    (lambda (#{x 61685}#)
      (let ((#{tmp 61687}#
              ($sc-dispatch
                #{x 61685}#
                '(_ (any . any) any . each-any))))
        (if #{tmp 61687}#
          (@apply
            (lambda (#{id 61691}#
                     #{args 61692}#
                     #{b0 61693}#
                     #{b1 61694}#)
              (list '#(syntax-object
                       define
                       ((top)
                        #(ribcage
                          #(id args b0 b1)
                          #((top) (top) (top) (top))
                          #("i61667" "i61668" "i61669" "i61670"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i61664"))
                        #(ribcage
                          (define*)
                          ((top))
                          (((hygiene guile)
                            .
                            #(syntax-object
                              define*
                              ((top))
                              (hygiene guile))))))
                       (hygiene guile))
                    #{id 61691}#
                    (cons '#(syntax-object
                             lambda*
                             ((top)
                              #(ribcage
                                #(id args b0 b1)
                                #((top) (top) (top) (top))
                                #("i61667" "i61668" "i61669" "i61670"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i61664"))
                              #(ribcage
                                (define*)
                                ((top))
                                (((hygiene guile)
                                  .
                                  #(syntax-object
                                    define*
                                    ((top))
                                    (hygiene guile))))))
                             (hygiene guile))
                          (cons #{args 61692}#
                                (cons #{b0 61693}# #{b1 61694}#)))))
            #{tmp 61687}#)
          (let ((#{tmp 61695}#
                  ($sc-dispatch #{x 61685}# '(_ any any))))
            (if (if #{tmp 61695}#
                  (@apply
                    (lambda (#{id 61699}# #{val 61700}#)
                      (identifier?
                        '#(syntax-object
                           x
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("i61677" "i61678"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i61664"))
                            #(ribcage
                              (define*)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  define*
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))))
                    #{tmp 61695}#)
                  #f)
              (@apply
                (lambda (#{id 61701}# #{val 61702}#)
                  (list '#(syntax-object
                           define
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("i61681" "i61682"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i61664"))
                            #(ribcage
                              (define*)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  define*
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))
                        #{id 61701}#
                        #{val 61702}#))
                #{tmp 61695}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 61685}#))))))))

