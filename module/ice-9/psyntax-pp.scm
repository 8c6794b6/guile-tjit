(eval-when (compile) (set-current-module (resolve-module (quote (guile)))))
(if #f #f)

(letrec ((#{and-map*\ 466}#
           (lambda (#{f\ 528}# #{first\ 529}# . #{rest\ 530}#)
             (let ((#{t\ 536}# (null? #{first\ 529}#)))
               (if #{t\ 536}#
                 #{t\ 536}#
                 (if (null? #{rest\ 530}#)
                   (letrec ((#{andmap\ 540}#
                              (lambda (#{first\ 541}#)
                                (let ((#{x\ 544}# (car #{first\ 541}#))
                                      (#{first\ 545}# (cdr #{first\ 541}#)))
                                  (if (null? #{first\ 545}#)
                                    (#{f\ 528}# #{x\ 544}#)
                                    (if (#{f\ 528}# #{x\ 544}#)
                                      (#{andmap\ 540}# #{first\ 545}#)
                                      #f))))))
                     (#{andmap\ 540}# #{first\ 529}#))
                   (letrec ((#{andmap\ 551}#
                              (lambda (#{first\ 552}# #{rest\ 553}#)
                                (let ((#{x\ 558}# (car #{first\ 552}#))
                                      (#{xr\ 559}# (map car #{rest\ 553}#))
                                      (#{first\ 560}# (cdr #{first\ 552}#))
                                      (#{rest\ 561}# (map cdr #{rest\ 553}#)))
                                  (if (null? #{first\ 560}#)
                                    (apply #{f\ 528}#
                                           (cons #{x\ 558}# #{xr\ 559}#))
                                    (if (apply #{f\ 528}#
                                               (cons #{x\ 558}# #{xr\ 559}#))
                                      (#{andmap\ 551}#
                                        #{first\ 560}#
                                        #{rest\ 561}#)
                                      #f))))))
                     (#{andmap\ 551}# #{first\ 529}# #{rest\ 530}#))))))))
  (letrec ((#{lambda-var-list\ 781}#
             (lambda (#{vars\ 996}#)
               (letrec ((#{lvl\ 1002}#
                          (lambda (#{vars\ 1003}# #{ls\ 1004}# #{w\ 1005}#)
                            (if (pair? #{vars\ 1003}#)
                              (#{lvl\ 1002}#
                                (cdr #{vars\ 1003}#)
                                (cons (#{wrap\ 735}#
                                        (car #{vars\ 1003}#)
                                        #{w\ 1005}#
                                        #f)
                                      #{ls\ 1004}#)
                                #{w\ 1005}#)
                              (if (#{id?\ 666}# #{vars\ 1003}#)
                                (cons (#{wrap\ 735}#
                                        #{vars\ 1003}#
                                        #{w\ 1005}#
                                        #f)
                                      #{ls\ 1004}#)
                                (if (null? #{vars\ 1003}#)
                                  #{ls\ 1004}#
                                  (if (#{syntax-object?\ 630}# #{vars\ 1003}#)
                                    (#{lvl\ 1002}#
                                      (#{syntax-object-expression\ 632}#
                                        #{vars\ 1003}#)
                                      #{ls\ 1004}#
                                      (#{join-wraps\ 717}#
                                        #{w\ 1005}#
                                        (#{syntax-object-wrap\ 634}#
                                          #{vars\ 1003}#)))
                                    (cons #{vars\ 1003}# #{ls\ 1004}#))))))))
                 (#{lvl\ 1002}#
                   #{vars\ 996}#
                   '()
                   '(())))))
           (#{gen-var\ 779}#
             (lambda (#{id\ 1016}#)
               (let ((#{id\ 1019}#
                       (if (#{syntax-object?\ 630}# #{id\ 1016}#)
                         (#{syntax-object-expression\ 632}# #{id\ 1016}#)
                         #{id\ 1016}#)))
                 (gensym
                   (string-append (symbol->string #{id\ 1019}#) " ")))))
           (#{strip\ 777}#
             (lambda (#{x\ 1021}# #{w\ 1022}#)
               (if (memq 'top
                         (#{wrap-marks\ 673}# #{w\ 1022}#))
                 #{x\ 1021}#
                 (letrec ((#{f\ 1028}#
                            (lambda (#{x\ 1029}#)
                              (if (#{syntax-object?\ 630}# #{x\ 1029}#)
                                (#{strip\ 777}#
                                  (#{syntax-object-expression\ 632}#
                                    #{x\ 1029}#)
                                  (#{syntax-object-wrap\ 634}# #{x\ 1029}#))
                                (if (pair? #{x\ 1029}#)
                                  (let ((#{a\ 1036}#
                                          (#{f\ 1028}# (car #{x\ 1029}#)))
                                        (#{d\ 1037}#
                                          (#{f\ 1028}# (cdr #{x\ 1029}#))))
                                    (if (if (eq? #{a\ 1036}# (car #{x\ 1029}#))
                                          (eq? #{d\ 1037}# (cdr #{x\ 1029}#))
                                          #f)
                                      #{x\ 1029}#
                                      (cons #{a\ 1036}# #{d\ 1037}#)))
                                  (if (vector? #{x\ 1029}#)
                                    (let ((#{old\ 1043}#
                                            (vector->list #{x\ 1029}#)))
                                      (let ((#{new\ 1045}#
                                              (map #{f\ 1028}# #{old\ 1043}#)))
                                        (if (#{and-map*\ 466}#
                                              eq?
                                              #{old\ 1043}#
                                              #{new\ 1045}#)
                                          #{x\ 1029}#
                                          (list->vector #{new\ 1045}#))))
                                    #{x\ 1029}#))))))
                   (#{f\ 1028}# #{x\ 1021}#)))))
           (#{chi-lambda-case\ 775}#
             (lambda (#{e\ 1047}#
                      #{r\ 1048}#
                      #{w\ 1049}#
                      #{s\ 1050}#
                      #{mod\ 1051}#
                      #{get-formals\ 1052}#
                      #{clauses\ 1053}#)
               (letrec ((#{expand-body\ 1068}#
                          (lambda (#{req\ 1069}#
                                   #{opt\ 1070}#
                                   #{rest\ 1071}#
                                   #{kw\ 1072}#
                                   #{body\ 1073}#
                                   #{vars\ 1074}#
                                   #{r*\ 1075}#
                                   #{w*\ 1076}#
                                   #{inits\ 1077}#
                                   #{meta\ 1078}#)
                            ((lambda (#{tmp\ 1089}#)
                               ((lambda (#{tmp\ 1090}#)
                                  (if (if #{tmp\ 1090}#
                                        (apply (lambda (#{docstring\ 1094}#
                                                        #{e1\ 1095}#
                                                        #{e2\ 1096}#)
                                                 (string?
                                                   (syntax->datum
                                                     #{docstring\ 1094}#)))
                                               #{tmp\ 1090}#)
                                        #f)
                                    (apply (lambda (#{docstring\ 1100}#
                                                    #{e1\ 1101}#
                                                    #{e2\ 1102}#)
                                             (#{expand-body\ 1068}#
                                               #{req\ 1069}#
                                               #{opt\ 1070}#
                                               #{rest\ 1071}#
                                               #{kw\ 1072}#
                                               (cons #{e1\ 1101}# #{e2\ 1102}#)
                                               #{vars\ 1074}#
                                               #{r*\ 1075}#
                                               #{w*\ 1076}#
                                               #{inits\ 1077}#
                                               (append
                                                 #{meta\ 1078}#
                                                 (list (cons 'documentation
                                                             (syntax->datum
                                                               #{docstring\ 1100}#))))))
                                           #{tmp\ 1090}#)
                                    ((lambda (#{tmp\ 1105}#)
                                       (if #{tmp\ 1105}#
                                         (apply (lambda (#{k\ 1110}#
                                                         #{v\ 1111}#
                                                         #{e1\ 1112}#
                                                         #{e2\ 1113}#)
                                                  (#{expand-body\ 1068}#
                                                    #{req\ 1069}#
                                                    #{opt\ 1070}#
                                                    #{rest\ 1071}#
                                                    #{kw\ 1072}#
                                                    (cons #{e1\ 1112}#
                                                          #{e2\ 1113}#)
                                                    #{vars\ 1074}#
                                                    #{r*\ 1075}#
                                                    #{w*\ 1076}#
                                                    #{inits\ 1077}#
                                                    (append
                                                      #{meta\ 1078}#
                                                      (syntax->datum
                                                        (map cons
                                                             #{k\ 1110}#
                                                             #{v\ 1111}#)))))
                                                #{tmp\ 1105}#)
                                         ((lambda (#{tmp\ 1117}#)
                                            (if #{tmp\ 1117}#
                                              (apply (lambda (#{e1\ 1120}#
                                                              #{e2\ 1121}#)
                                                       (values
                                                         #{meta\ 1078}#
                                                         #{req\ 1069}#
                                                         #{opt\ 1070}#
                                                         #{rest\ 1071}#
                                                         #{kw\ 1072}#
                                                         #{inits\ 1077}#
                                                         #{vars\ 1074}#
                                                         (#{chi-body\ 759}#
                                                           (cons #{e1\ 1120}#
                                                                 #{e2\ 1121}#)
                                                           (#{source-wrap\ 737}#
                                                             #{e\ 1047}#
                                                             #{w\ 1049}#
                                                             #{s\ 1050}#
                                                             #{mod\ 1051}#)
                                                           #{r*\ 1075}#
                                                           #{w*\ 1076}#
                                                           #{mod\ 1051}#)))
                                                     #{tmp\ 1117}#)
                                              (syntax-violation
                                                #f
                                                "source expression failed to match any pattern"
                                                #{tmp\ 1089}#)))
                                          ($sc-dispatch
                                            #{tmp\ 1089}#
                                            '(any . each-any)))))
                                     ($sc-dispatch
                                       #{tmp\ 1089}#
                                       '(#(vector #(each (any . any)))
                                         any
                                         .
                                         each-any)))))
                                ($sc-dispatch
                                  #{tmp\ 1089}#
                                  '(any any . each-any))))
                             #{body\ 1073}#)))
                        (#{expand-kw\ 1066}#
                          (lambda (#{req\ 1123}#
                                   #{opt\ 1124}#
                                   #{rest\ 1125}#
                                   #{kw\ 1126}#
                                   #{body\ 1127}#
                                   #{vars\ 1128}#
                                   #{r*\ 1129}#
                                   #{w*\ 1130}#
                                   #{aok\ 1131}#
                                   #{out\ 1132}#
                                   #{inits\ 1133}#)
                            (if (pair? #{kw\ 1126}#)
                              ((lambda (#{tmp\ 1147}#)
                                 ((lambda (#{tmp\ 1148}#)
                                    (if #{tmp\ 1148}#
                                      (apply (lambda (#{k\ 1152}#
                                                      #{id\ 1153}#
                                                      #{i\ 1154}#)
                                               (let ((#{v\ 1157}#
                                                       (#{gen-var\ 779}#
                                                         #{id\ 1153}#)))
                                                 (let ((#{l\ 1159}#
                                                         (#{gen-labels\ 684}#
                                                           (list #{v\ 1157}#))))
                                                   (let ((#{r**\ 1161}#
                                                           (#{extend-var-env\ 656}#
                                                             #{l\ 1159}#
                                                             (list #{v\ 1157}#)
                                                             #{r*\ 1129}#)))
                                                     (let ((#{w**\ 1163}#
                                                             (#{make-binding-wrap\ 713}#
                                                               (list #{id\ 1153}#)
                                                               #{l\ 1159}#
                                                               #{w*\ 1130}#)))
                                                       (#{expand-kw\ 1066}#
                                                         #{req\ 1123}#
                                                         #{opt\ 1124}#
                                                         #{rest\ 1125}#
                                                         (cdr #{kw\ 1126}#)
                                                         #{body\ 1127}#
                                                         (cons #{v\ 1157}#
                                                               #{vars\ 1128}#)
                                                         #{r**\ 1161}#
                                                         #{w**\ 1163}#
                                                         #{aok\ 1131}#
                                                         (cons (list (syntax->datum
                                                                       #{k\ 1152}#)
                                                                     (syntax->datum
                                                                       #{id\ 1153}#)
                                                                     #{v\ 1157}#)
                                                               #{out\ 1132}#)
                                                         (cons (#{chi\ 751}#
                                                                 #{i\ 1154}#
                                                                 #{r*\ 1129}#
                                                                 #{w*\ 1130}#
                                                                 #{mod\ 1051}#)
                                                               #{inits\ 1133}#)))))))
                                             #{tmp\ 1148}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{tmp\ 1147}#)))
                                  ($sc-dispatch
                                    #{tmp\ 1147}#
                                    '(any any any))))
                               (car #{kw\ 1126}#))
                              (#{expand-body\ 1068}#
                                #{req\ 1123}#
                                #{opt\ 1124}#
                                #{rest\ 1125}#
                                (if (let ((#{t\ 1167}# #{aok\ 1131}#))
                                      (if #{t\ 1167}#
                                        #{t\ 1167}#
                                        (pair? #{out\ 1132}#)))
                                  (cons #{aok\ 1131}# (reverse #{out\ 1132}#))
                                  #f)
                                #{body\ 1127}#
                                (reverse #{vars\ 1128}#)
                                #{r*\ 1129}#
                                #{w*\ 1130}#
                                (reverse #{inits\ 1133}#)
                                '()))))
                        (#{expand-opt\ 1064}#
                          (lambda (#{req\ 1169}#
                                   #{opt\ 1170}#
                                   #{rest\ 1171}#
                                   #{kw\ 1172}#
                                   #{body\ 1173}#
                                   #{vars\ 1174}#
                                   #{r*\ 1175}#
                                   #{w*\ 1176}#
                                   #{out\ 1177}#
                                   #{inits\ 1178}#)
                            (if (pair? #{opt\ 1170}#)
                              ((lambda (#{tmp\ 1191}#)
                                 ((lambda (#{tmp\ 1192}#)
                                    (if #{tmp\ 1192}#
                                      (apply (lambda (#{id\ 1195}# #{i\ 1196}#)
                                               (let ((#{v\ 1199}#
                                                       (#{gen-var\ 779}#
                                                         #{id\ 1195}#)))
                                                 (let ((#{l\ 1201}#
                                                         (#{gen-labels\ 684}#
                                                           (list #{v\ 1199}#))))
                                                   (let ((#{r**\ 1203}#
                                                           (#{extend-var-env\ 656}#
                                                             #{l\ 1201}#
                                                             (list #{v\ 1199}#)
                                                             #{r*\ 1175}#)))
                                                     (let ((#{w**\ 1205}#
                                                             (#{make-binding-wrap\ 713}#
                                                               (list #{id\ 1195}#)
                                                               #{l\ 1201}#
                                                               #{w*\ 1176}#)))
                                                       (#{expand-opt\ 1064}#
                                                         #{req\ 1169}#
                                                         (cdr #{opt\ 1170}#)
                                                         #{rest\ 1171}#
                                                         #{kw\ 1172}#
                                                         #{body\ 1173}#
                                                         (cons #{v\ 1199}#
                                                               #{vars\ 1174}#)
                                                         #{r**\ 1203}#
                                                         #{w**\ 1205}#
                                                         (cons (syntax->datum
                                                                 #{id\ 1195}#)
                                                               #{out\ 1177}#)
                                                         (cons (#{chi\ 751}#
                                                                 #{i\ 1196}#
                                                                 #{r*\ 1175}#
                                                                 #{w*\ 1176}#
                                                                 #{mod\ 1051}#)
                                                               #{inits\ 1178}#)))))))
                                             #{tmp\ 1192}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{tmp\ 1191}#)))
                                  ($sc-dispatch
                                    #{tmp\ 1191}#
                                    '(any any))))
                               (car #{opt\ 1170}#))
                              (if #{rest\ 1171}#
                                (let ((#{v\ 1210}#
                                        (#{gen-var\ 779}# #{rest\ 1171}#)))
                                  (let ((#{l\ 1212}#
                                          (#{gen-labels\ 684}#
                                            (list #{v\ 1210}#))))
                                    (let ((#{r*\ 1214}#
                                            (#{extend-var-env\ 656}#
                                              #{l\ 1212}#
                                              (list #{v\ 1210}#)
                                              #{r*\ 1175}#)))
                                      (let ((#{w*\ 1216}#
                                              (#{make-binding-wrap\ 713}#
                                                (list #{rest\ 1171}#)
                                                #{l\ 1212}#
                                                #{w*\ 1176}#)))
                                        (#{expand-kw\ 1066}#
                                          #{req\ 1169}#
                                          (if (pair? #{out\ 1177}#)
                                            (reverse #{out\ 1177}#)
                                            #f)
                                          (syntax->datum #{rest\ 1171}#)
                                          (if (pair? #{kw\ 1172}#)
                                            (cdr #{kw\ 1172}#)
                                            #{kw\ 1172}#)
                                          #{body\ 1173}#
                                          (cons #{v\ 1210}# #{vars\ 1174}#)
                                          #{r*\ 1214}#
                                          #{w*\ 1216}#
                                          (if (pair? #{kw\ 1172}#)
                                            (car #{kw\ 1172}#)
                                            #f)
                                          '()
                                          #{inits\ 1178}#)))))
                                (#{expand-kw\ 1066}#
                                  #{req\ 1169}#
                                  (if (pair? #{out\ 1177}#)
                                    (reverse #{out\ 1177}#)
                                    #f)
                                  #f
                                  (if (pair? #{kw\ 1172}#)
                                    (cdr #{kw\ 1172}#)
                                    #{kw\ 1172}#)
                                  #{body\ 1173}#
                                  #{vars\ 1174}#
                                  #{r*\ 1175}#
                                  #{w*\ 1176}#
                                  (if (pair? #{kw\ 1172}#)
                                    (car #{kw\ 1172}#)
                                    #f)
                                  '()
                                  #{inits\ 1178}#)))))
                        (#{expand-req\ 1062}#
                          (lambda (#{req\ 1218}#
                                   #{opt\ 1219}#
                                   #{rest\ 1220}#
                                   #{kw\ 1221}#
                                   #{body\ 1222}#)
                            (let ((#{vars\ 1230}#
                                    (map #{gen-var\ 779}# #{req\ 1218}#))
                                  (#{labels\ 1231}#
                                    (#{gen-labels\ 684}# #{req\ 1218}#)))
                              (let ((#{r*\ 1234}#
                                      (#{extend-var-env\ 656}#
                                        #{labels\ 1231}#
                                        #{vars\ 1230}#
                                        #{r\ 1048}#))
                                    (#{w*\ 1235}#
                                      (#{make-binding-wrap\ 713}#
                                        #{req\ 1218}#
                                        #{labels\ 1231}#
                                        #{w\ 1049}#)))
                                (#{expand-opt\ 1064}#
                                  (map syntax->datum #{req\ 1218}#)
                                  #{opt\ 1219}#
                                  #{rest\ 1220}#
                                  #{kw\ 1221}#
                                  #{body\ 1222}#
                                  (reverse #{vars\ 1230}#)
                                  #{r*\ 1234}#
                                  #{w*\ 1235}#
                                  '()
                                  '()))))))
                 ((lambda (#{tmp\ 1236}#)
                    ((lambda (#{tmp\ 1237}#)
                       (if #{tmp\ 1237}#
                         (apply (lambda () (values (quote ()) #f))
                                #{tmp\ 1237}#)
                         ((lambda (#{tmp\ 1238}#)
                            (if #{tmp\ 1238}#
                              (apply (lambda (#{args\ 1245}#
                                              #{e1\ 1246}#
                                              #{e2\ 1247}#
                                              #{args*\ 1248}#
                                              #{e1*\ 1249}#
                                              #{e2*\ 1250}#)
                                       (call-with-values
                                         (lambda ()
                                           (#{get-formals\ 1052}#
                                             #{args\ 1245}#))
                                         (lambda (#{req\ 1251}#
                                                  #{opt\ 1252}#
                                                  #{rest\ 1253}#
                                                  #{kw\ 1254}#)
                                           (call-with-values
                                             (lambda ()
                                               (#{expand-req\ 1062}#
                                                 #{req\ 1251}#
                                                 #{opt\ 1252}#
                                                 #{rest\ 1253}#
                                                 #{kw\ 1254}#
                                                 (cons #{e1\ 1246}#
                                                       #{e2\ 1247}#)))
                                             (lambda (#{meta\ 1260}#
                                                      #{req\ 1261}#
                                                      #{opt\ 1262}#
                                                      #{rest\ 1263}#
                                                      #{kw\ 1264}#
                                                      #{inits\ 1265}#
                                                      #{vars\ 1266}#
                                                      #{body\ 1267}#)
                                               (call-with-values
                                                 (lambda ()
                                                   (#{chi-lambda-case\ 775}#
                                                     #{e\ 1047}#
                                                     #{r\ 1048}#
                                                     #{w\ 1049}#
                                                     #{s\ 1050}#
                                                     #{mod\ 1051}#
                                                     #{get-formals\ 1052}#
                                                     (map (lambda (#{tmp\ 1278}#
                                                                   #{tmp\ 1277}#
                                                                   #{tmp\ 1276}#)
                                                            (cons #{tmp\ 1276}#
                                                                  (cons #{tmp\ 1277}#
                                                                        #{tmp\ 1278}#)))
                                                          #{e2*\ 1250}#
                                                          #{e1*\ 1249}#
                                                          #{args*\ 1248}#)))
                                                 (lambda (#{meta*\ 1280}#
                                                          #{else*\ 1281}#)
                                                   (values
                                                     (append
                                                       #{meta\ 1260}#
                                                       #{meta*\ 1280}#)
                                                     (#{build-lambda-case\ 612}#
                                                       #{s\ 1050}#
                                                       #{req\ 1261}#
                                                       #{opt\ 1262}#
                                                       #{rest\ 1263}#
                                                       #{kw\ 1264}#
                                                       #{inits\ 1265}#
                                                       #{vars\ 1266}#
                                                       #{body\ 1267}#
                                                       #{else*\ 1281}#)))))))))
                                     #{tmp\ 1238}#)
                              (syntax-violation
                                #f
                                "source expression failed to match any pattern"
                                #{tmp\ 1236}#)))
                          ($sc-dispatch
                            #{tmp\ 1236}#
                            '((any any . each-any)
                              .
                              #(each (any any . each-any)))))))
                     ($sc-dispatch #{tmp\ 1236}# (quote ()))))
                  #{clauses\ 1053}#))))
           (#{lambda*-formals\ 773}#
             (lambda (#{orig-args\ 1284}#)
               (letrec ((#{check\ 1295}#
                          (lambda (#{req\ 1296}#
                                   #{opt\ 1297}#
                                   #{rest\ 1298}#
                                   #{kw\ 1299}#)
                            (if (#{distinct-bound-ids?\ 731}#
                                  (append
                                    #{req\ 1296}#
                                    (map car #{opt\ 1297}#)
                                    (if #{rest\ 1298}#
                                      (list #{rest\ 1298}#)
                                      '())
                                    (if (pair? #{kw\ 1299}#)
                                      (map cadr (cdr #{kw\ 1299}#))
                                      '())))
                              (values
                                #{req\ 1296}#
                                #{opt\ 1297}#
                                #{rest\ 1298}#
                                #{kw\ 1299}#)
                              (syntax-violation
                                'lambda*
                                "duplicate identifier in argument list"
                                #{orig-args\ 1284}#))))
                        (#{rest\ 1293}#
                          (lambda (#{args\ 1307}#
                                   #{req\ 1308}#
                                   #{opt\ 1309}#
                                   #{kw\ 1310}#)
                            ((lambda (#{tmp\ 1315}#)
                               ((lambda (#{tmp\ 1316}#)
                                  (if (if #{tmp\ 1316}#
                                        (apply (lambda (#{r\ 1318}#)
                                                 (#{id?\ 666}# #{r\ 1318}#))
                                               #{tmp\ 1316}#)
                                        #f)
                                    (apply (lambda (#{r\ 1320}#)
                                             (#{check\ 1295}#
                                               #{req\ 1308}#
                                               #{opt\ 1309}#
                                               #{r\ 1320}#
                                               #{kw\ 1310}#))
                                           #{tmp\ 1316}#)
                                    ((lambda (#{else\ 1322}#)
                                       (syntax-violation
                                         'lambda*
                                         "invalid rest argument"
                                         #{orig-args\ 1284}#
                                         #{args\ 1307}#))
                                     #{tmp\ 1315}#)))
                                (list #{tmp\ 1315}#)))
                             #{args\ 1307}#)))
                        (#{key\ 1291}#
                          (lambda (#{args\ 1323}#
                                   #{req\ 1324}#
                                   #{opt\ 1325}#
                                   #{rkey\ 1326}#)
                            ((lambda (#{tmp\ 1331}#)
                               ((lambda (#{tmp\ 1332}#)
                                  (if #{tmp\ 1332}#
                                    (apply (lambda ()
                                             (#{check\ 1295}#
                                               #{req\ 1324}#
                                               #{opt\ 1325}#
                                               #f
                                               (cons #f
                                                     (reverse
                                                       #{rkey\ 1326}#))))
                                           #{tmp\ 1332}#)
                                    ((lambda (#{tmp\ 1333}#)
                                       (if (if #{tmp\ 1333}#
                                             (apply (lambda (#{a\ 1336}#
                                                             #{b\ 1337}#)
                                                      (#{id?\ 666}#
                                                        #{a\ 1336}#))
                                                    #{tmp\ 1333}#)
                                             #f)
                                         (apply (lambda (#{a\ 1340}#
                                                         #{b\ 1341}#)
                                                  ((lambda (#{tmp\ 1343}#)
                                                     ((lambda (#{k\ 1345}#)
                                                        (#{key\ 1291}#
                                                          #{b\ 1341}#
                                                          #{req\ 1324}#
                                                          #{opt\ 1325}#
                                                          (cons (cons #{k\ 1345}#
                                                                      (cons #{a\ 1340}#
                                                                            '(#(syntax-object
                                                                                #f
                                                                                ((top)
                                                                                 #(ribcage
                                                                                   #(k)
                                                                                   #((top))
                                                                                   #("i1344"))
                                                                                 #(ribcage
                                                                                   #(a
                                                                                     b)
                                                                                   #((top)
                                                                                     (top))
                                                                                   #("i1338"
                                                                                     "i1339"))
                                                                                 #(ribcage
                                                                                   ()
                                                                                   ()
                                                                                   ())
                                                                                 #(ribcage
                                                                                   #(args
                                                                                     req
                                                                                     opt
                                                                                     rkey)
                                                                                   #((top)
                                                                                     (top)
                                                                                     (top)
                                                                                     (top))
                                                                                   #("i1327"
                                                                                     "i1328"
                                                                                     "i1329"
                                                                                     "i1330"))
                                                                                 #(ribcage
                                                                                   (check rest
                                                                                          key
                                                                                          opt
                                                                                          req)
                                                                                   ((top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top))
                                                                                   ("i1294"
                                                                                    "i1292"
                                                                                    "i1290"
                                                                                    "i1288"
                                                                                    "i1286"))
                                                                                 #(ribcage
                                                                                   #(orig-args)
                                                                                   #((top))
                                                                                   #("i1285"))
                                                                                 #(ribcage
                                                                                   (lambda-var-list
                                                                                     gen-var
                                                                                     strip
                                                                                     chi-lambda-case
                                                                                     lambda*-formals
                                                                                     chi-simple-lambda
                                                                                     lambda-formals
                                                                                     ellipsis?
                                                                                     chi-void
                                                                                     eval-local-transformer
                                                                                     chi-local-syntax
                                                                                     chi-body
                                                                                     chi-macro
                                                                                     chi-application
                                                                                     chi-expr
                                                                                     chi
                                                                                     chi-top
                                                                                     syntax-type
                                                                                     chi-when-list
                                                                                     chi-install-global
                                                                                     chi-top-sequence
                                                                                     chi-sequence
                                                                                     source-wrap
                                                                                     wrap
                                                                                     bound-id-member?
                                                                                     distinct-bound-ids?
                                                                                     valid-bound-ids?
                                                                                     bound-id=?
                                                                                     free-id=?
                                                                                     id-var-name
                                                                                     same-marks?
                                                                                     join-marks
                                                                                     join-wraps
                                                                                     smart-append
                                                                                     make-binding-wrap
                                                                                     extend-ribcage!
                                                                                     make-empty-ribcage
                                                                                     new-mark
                                                                                     anti-mark
                                                                                     the-anti-mark
                                                                                     top-marked?
                                                                                     top-wrap
                                                                                     empty-wrap
                                                                                     set-ribcage-labels!
                                                                                     set-ribcage-marks!
                                                                                     set-ribcage-symnames!
                                                                                     ribcage-labels
                                                                                     ribcage-marks
                                                                                     ribcage-symnames
                                                                                     ribcage?
                                                                                     make-ribcage
                                                                                     gen-labels
                                                                                     gen-label
                                                                                     make-rename
                                                                                     rename-marks
                                                                                     rename-new
                                                                                     rename-old
                                                                                     subst-rename?
                                                                                     wrap-subst
                                                                                     wrap-marks
                                                                                     make-wrap
                                                                                     id-sym-name&marks
                                                                                     id-sym-name
                                                                                     id?
                                                                                     nonsymbol-id?
                                                                                     global-extend
                                                                                     lookup
                                                                                     macros-only-env
                                                                                     extend-var-env
                                                                                     extend-env
                                                                                     null-env
                                                                                     binding-value
                                                                                     binding-type
                                                                                     make-binding
                                                                                     arg-check
                                                                                     source-annotation
                                                                                     no-source
                                                                                     set-syntax-object-module!
                                                                                     set-syntax-object-wrap!
                                                                                     set-syntax-object-expression!
                                                                                     syntax-object-module
                                                                                     syntax-object-wrap
                                                                                     syntax-object-expression
                                                                                     syntax-object?
                                                                                     make-syntax-object
                                                                                     build-lexical-var
                                                                                     build-letrec
                                                                                     build-named-let
                                                                                     build-let
                                                                                     build-sequence
                                                                                     build-data
                                                                                     build-primref
                                                                                     build-lambda-case
                                                                                     build-case-lambda
                                                                                     build-simple-lambda
                                                                                     build-global-definition
                                                                                     maybe-name-value!
                                                                                     build-global-assignment
                                                                                     build-global-reference
                                                                                     analyze-variable
                                                                                     build-lexical-assignment
                                                                                     build-lexical-reference
                                                                                     build-dynlet
                                                                                     build-conditional
                                                                                     build-application
                                                                                     build-void
                                                                                     decorate-source
                                                                                     get-global-definition-hook
                                                                                     put-global-definition-hook
                                                                                     gensym-hook
                                                                                     local-eval-hook
                                                                                     top-level-eval-hook
                                                                                     fx<
                                                                                     fx=
                                                                                     fx-
                                                                                     fx+
                                                                                     *mode*)
                                                                                   ((top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top))
                                                                                   ("i780"
                                                                                    "i778"
                                                                                    "i776"
                                                                                    "i774"
                                                                                    "i772"
                                                                                    "i770"
                                                                                    "i768"
                                                                                    "i766"
                                                                                    "i764"
                                                                                    "i762"
                                                                                    "i760"
                                                                                    "i758"
                                                                                    "i756"
                                                                                    "i754"
                                                                                    "i752"
                                                                                    "i750"
                                                                                    "i748"
                                                                                    "i746"
                                                                                    "i744"
                                                                                    "i742"
                                                                                    "i740"
                                                                                    "i738"
                                                                                    "i736"
                                                                                    "i734"
                                                                                    "i732"
                                                                                    "i730"
                                                                                    "i728"
                                                                                    "i726"
                                                                                    "i724"
                                                                                    "i722"
                                                                                    "i720"
                                                                                    "i718"
                                                                                    "i716"
                                                                                    "i714"
                                                                                    "i712"
                                                                                    "i710"
                                                                                    "i709"
                                                                                    "i708"
                                                                                    "i706"
                                                                                    "i705"
                                                                                    "i704"
                                                                                    "i703"
                                                                                    "i702"
                                                                                    "i700"
                                                                                    "i698"
                                                                                    "i696"
                                                                                    "i694"
                                                                                    "i692"
                                                                                    "i690"
                                                                                    "i688"
                                                                                    "i686"
                                                                                    "i683"
                                                                                    "i681"
                                                                                    "i680"
                                                                                    "i679"
                                                                                    "i678"
                                                                                    "i677"
                                                                                    "i676"
                                                                                    "i674"
                                                                                    "i672"
                                                                                    "i670"
                                                                                    "i668"
                                                                                    "i667"
                                                                                    "i665"
                                                                                    "i663"
                                                                                    "i661"
                                                                                    "i659"
                                                                                    "i657"
                                                                                    "i655"
                                                                                    "i653"
                                                                                    "i652"
                                                                                    "i650"
                                                                                    "i648"
                                                                                    "i647"
                                                                                    "i646"
                                                                                    "i644"
                                                                                    "i643"
                                                                                    "i641"
                                                                                    "i639"
                                                                                    "i637"
                                                                                    "i635"
                                                                                    "i633"
                                                                                    "i631"
                                                                                    "i629"
                                                                                    "i627"
                                                                                    "i625"
                                                                                    "i623"
                                                                                    "i621"
                                                                                    "i619"
                                                                                    "i617"
                                                                                    "i615"
                                                                                    "i613"
                                                                                    "i611"
                                                                                    "i609"
                                                                                    "i607"
                                                                                    "i605"
                                                                                    "i603"
                                                                                    "i601"
                                                                                    "i599"
                                                                                    "i597"
                                                                                    "i595"
                                                                                    "i593"
                                                                                    "i591"
                                                                                    "i589"
                                                                                    "i587"
                                                                                    "i585"
                                                                                    "i583"
                                                                                    "i581"
                                                                                    "i579"
                                                                                    "i578"
                                                                                    "i576"
                                                                                    "i574"
                                                                                    "i572"
                                                                                    "i570"
                                                                                    "i568"
                                                                                    "i566"
                                                                                    "i564"))
                                                                                 #(ribcage
                                                                                   (define-structure
                                                                                     and-map*)
                                                                                   ((top)
                                                                                    (top))
                                                                                   ("i467"
                                                                                    "i465")))
                                                                                (hygiene
                                                                                  guile)))))
                                                                #{rkey\ 1326}#)))
                                                      #{tmp\ 1343}#))
                                                   (symbol->keyword
                                                     (syntax->datum
                                                       #{a\ 1340}#))))
                                                #{tmp\ 1333}#)
                                         ((lambda (#{tmp\ 1346}#)
                                            (if (if #{tmp\ 1346}#
                                                  (apply (lambda (#{a\ 1350}#
                                                                  #{init\ 1351}#
                                                                  #{b\ 1352}#)
                                                           (#{id?\ 666}#
                                                             #{a\ 1350}#))
                                                         #{tmp\ 1346}#)
                                                  #f)
                                              (apply (lambda (#{a\ 1356}#
                                                              #{init\ 1357}#
                                                              #{b\ 1358}#)
                                                       ((lambda (#{tmp\ 1360}#)
                                                          ((lambda (#{k\ 1362}#)
                                                             (#{key\ 1291}#
                                                               #{b\ 1358}#
                                                               #{req\ 1324}#
                                                               #{opt\ 1325}#
                                                               (cons (list #{k\ 1362}#
                                                                           #{a\ 1356}#
                                                                           #{init\ 1357}#)
                                                                     #{rkey\ 1326}#)))
                                                           #{tmp\ 1360}#))
                                                        (symbol->keyword
                                                          (syntax->datum
                                                            #{a\ 1356}#))))
                                                     #{tmp\ 1346}#)
                                              ((lambda (#{tmp\ 1363}#)
                                                 (if (if #{tmp\ 1363}#
                                                       (apply (lambda (#{a\ 1368}#
                                                                       #{init\ 1369}#
                                                                       #{k\ 1370}#
                                                                       #{b\ 1371}#)
                                                                (if (#{id?\ 666}#
                                                                      #{a\ 1368}#)
                                                                  (keyword?
                                                                    (syntax->datum
                                                                      #{k\ 1370}#))
                                                                  #f))
                                                              #{tmp\ 1363}#)
                                                       #f)
                                                   (apply (lambda (#{a\ 1378}#
                                                                   #{init\ 1379}#
                                                                   #{k\ 1380}#
                                                                   #{b\ 1381}#)
                                                            (#{key\ 1291}#
                                                              #{b\ 1381}#
                                                              #{req\ 1324}#
                                                              #{opt\ 1325}#
                                                              (cons (list #{k\ 1380}#
                                                                          #{a\ 1378}#
                                                                          #{init\ 1379}#)
                                                                    #{rkey\ 1326}#)))
                                                          #{tmp\ 1363}#)
                                                   ((lambda (#{tmp\ 1382}#)
                                                      (if (if #{tmp\ 1382}#
                                                            (apply (lambda (#{aok\ 1384}#)
                                                                     (eq? (syntax->datum
                                                                            #{aok\ 1384}#)
                                                                          #:allow-other-keys))
                                                                   #{tmp\ 1382}#)
                                                            #f)
                                                        (apply (lambda (#{aok\ 1386}#)
                                                                 (#{check\ 1295}#
                                                                   #{req\ 1324}#
                                                                   #{opt\ 1325}#
                                                                   #f
                                                                   (cons #t
                                                                         (reverse
                                                                           #{rkey\ 1326}#))))
                                                               #{tmp\ 1382}#)
                                                        ((lambda (#{tmp\ 1387}#)
                                                           (if (if #{tmp\ 1387}#
                                                                 (apply (lambda (#{aok\ 1391}#
                                                                                 #{a\ 1392}#
                                                                                 #{b\ 1393}#)
                                                                          (if (eq? (syntax->datum
                                                                                     #{aok\ 1391}#)
                                                                                   #:allow-other-keys)
                                                                            (eq? (syntax->datum
                                                                                   #{a\ 1392}#)
                                                                                 #:rest)
                                                                            #f))
                                                                        #{tmp\ 1387}#)
                                                                 #f)
                                                             (apply (lambda (#{aok\ 1399}#
                                                                             #{a\ 1400}#
                                                                             #{b\ 1401}#)
                                                                      (#{rest\ 1293}#
                                                                        #{b\ 1401}#
                                                                        #{req\ 1324}#
                                                                        #{opt\ 1325}#
                                                                        (cons #t
                                                                              (reverse
                                                                                #{rkey\ 1326}#))))
                                                                    #{tmp\ 1387}#)
                                                             ((lambda (#{tmp\ 1402}#)
                                                                (if (if #{tmp\ 1402}#
                                                                      (apply (lambda (#{aok\ 1405}#
                                                                                      #{r\ 1406}#)
                                                                               (if (eq? (syntax->datum
                                                                                          #{aok\ 1405}#)
                                                                                        #:allow-other-keys)
                                                                                 (#{id?\ 666}#
                                                                                   #{r\ 1406}#)
                                                                                 #f))
                                                                             #{tmp\ 1402}#)
                                                                      #f)
                                                                  (apply (lambda (#{aok\ 1411}#
                                                                                  #{r\ 1412}#)
                                                                           (#{rest\ 1293}#
                                                                             #{r\ 1412}#
                                                                             #{req\ 1324}#
                                                                             #{opt\ 1325}#
                                                                             (cons #t
                                                                                   (reverse
                                                                                     #{rkey\ 1326}#))))
                                                                         #{tmp\ 1402}#)
                                                                  ((lambda (#{tmp\ 1413}#)
                                                                     (if (if #{tmp\ 1413}#
                                                                           (apply (lambda (#{a\ 1416}#
                                                                                           #{b\ 1417}#)
                                                                                    (eq? (syntax->datum
                                                                                           #{a\ 1416}#)
                                                                                         #:rest))
                                                                                  #{tmp\ 1413}#)
                                                                           #f)
                                                                       (apply (lambda (#{a\ 1420}#
                                                                                       #{b\ 1421}#)
                                                                                (#{rest\ 1293}#
                                                                                  #{b\ 1421}#
                                                                                  #{req\ 1324}#
                                                                                  #{opt\ 1325}#
                                                                                  (cons #f
                                                                                        (reverse
                                                                                          #{rkey\ 1326}#))))
                                                                              #{tmp\ 1413}#)
                                                                       ((lambda (#{tmp\ 1422}#)
                                                                          (if (if #{tmp\ 1422}#
                                                                                (apply (lambda (#{r\ 1424}#)
                                                                                         (#{id?\ 666}#
                                                                                           #{r\ 1424}#))
                                                                                       #{tmp\ 1422}#)
                                                                                #f)
                                                                            (apply (lambda (#{r\ 1426}#)
                                                                                     (#{rest\ 1293}#
                                                                                       #{r\ 1426}#
                                                                                       #{req\ 1324}#
                                                                                       #{opt\ 1325}#
                                                                                       (cons #f
                                                                                             (reverse
                                                                                               #{rkey\ 1326}#))))
                                                                                   #{tmp\ 1422}#)
                                                                            ((lambda (#{else\ 1428}#)
                                                                               (syntax-violation
                                                                                 'lambda*
                                                                                 "invalid keyword argument list"
                                                                                 #{orig-args\ 1284}#
                                                                                 #{args\ 1323}#))
                                                                             #{tmp\ 1331}#)))
                                                                        (list #{tmp\ 1331}#))))
                                                                   ($sc-dispatch
                                                                     #{tmp\ 1331}#
                                                                     '(any any)))))
                                                              ($sc-dispatch
                                                                #{tmp\ 1331}#
                                                                '(any .
                                                                      any)))))
                                                         ($sc-dispatch
                                                           #{tmp\ 1331}#
                                                           '(any any any)))))
                                                    ($sc-dispatch
                                                      #{tmp\ 1331}#
                                                      '(any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 1331}#
                                                 '((any any any) . any)))))
                                          ($sc-dispatch
                                            #{tmp\ 1331}#
                                            '((any any) . any)))))
                                     ($sc-dispatch
                                       #{tmp\ 1331}#
                                       '(any . any)))))
                                ($sc-dispatch #{tmp\ 1331}# (quote ()))))
                             #{args\ 1323}#)))
                        (#{opt\ 1289}#
                          (lambda (#{args\ 1429}# #{req\ 1430}# #{ropt\ 1431}#)
                            ((lambda (#{tmp\ 1435}#)
                               ((lambda (#{tmp\ 1436}#)
                                  (if #{tmp\ 1436}#
                                    (apply (lambda ()
                                             (#{check\ 1295}#
                                               #{req\ 1430}#
                                               (reverse #{ropt\ 1431}#)
                                               #f
                                               '()))
                                           #{tmp\ 1436}#)
                                    ((lambda (#{tmp\ 1437}#)
                                       (if (if #{tmp\ 1437}#
                                             (apply (lambda (#{a\ 1440}#
                                                             #{b\ 1441}#)
                                                      (#{id?\ 666}#
                                                        #{a\ 1440}#))
                                                    #{tmp\ 1437}#)
                                             #f)
                                         (apply (lambda (#{a\ 1444}#
                                                         #{b\ 1445}#)
                                                  (#{opt\ 1289}#
                                                    #{b\ 1445}#
                                                    #{req\ 1430}#
                                                    (cons (cons #{a\ 1444}#
                                                                '(#(syntax-object
                                                                    #f
                                                                    ((top)
                                                                     #(ribcage
                                                                       #(a b)
                                                                       #((top)
                                                                         (top))
                                                                       #("i1442"
                                                                         "i1443"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(args
                                                                         req
                                                                         ropt)
                                                                       #((top)
                                                                         (top)
                                                                         (top))
                                                                       #("i1432"
                                                                         "i1433"
                                                                         "i1434"))
                                                                     #(ribcage
                                                                       (check rest
                                                                              key
                                                                              opt
                                                                              req)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("i1294"
                                                                        "i1292"
                                                                        "i1290"
                                                                        "i1288"
                                                                        "i1286"))
                                                                     #(ribcage
                                                                       #(orig-args)
                                                                       #((top))
                                                                       #("i1285"))
                                                                     #(ribcage
                                                                       (lambda-var-list
                                                                         gen-var
                                                                         strip
                                                                         chi-lambda-case
                                                                         lambda*-formals
                                                                         chi-simple-lambda
                                                                         lambda-formals
                                                                         ellipsis?
                                                                         chi-void
                                                                         eval-local-transformer
                                                                         chi-local-syntax
                                                                         chi-body
                                                                         chi-macro
                                                                         chi-application
                                                                         chi-expr
                                                                         chi
                                                                         chi-top
                                                                         syntax-type
                                                                         chi-when-list
                                                                         chi-install-global
                                                                         chi-top-sequence
                                                                         chi-sequence
                                                                         source-wrap
                                                                         wrap
                                                                         bound-id-member?
                                                                         distinct-bound-ids?
                                                                         valid-bound-ids?
                                                                         bound-id=?
                                                                         free-id=?
                                                                         id-var-name
                                                                         same-marks?
                                                                         join-marks
                                                                         join-wraps
                                                                         smart-append
                                                                         make-binding-wrap
                                                                         extend-ribcage!
                                                                         make-empty-ribcage
                                                                         new-mark
                                                                         anti-mark
                                                                         the-anti-mark
                                                                         top-marked?
                                                                         top-wrap
                                                                         empty-wrap
                                                                         set-ribcage-labels!
                                                                         set-ribcage-marks!
                                                                         set-ribcage-symnames!
                                                                         ribcage-labels
                                                                         ribcage-marks
                                                                         ribcage-symnames
                                                                         ribcage?
                                                                         make-ribcage
                                                                         gen-labels
                                                                         gen-label
                                                                         make-rename
                                                                         rename-marks
                                                                         rename-new
                                                                         rename-old
                                                                         subst-rename?
                                                                         wrap-subst
                                                                         wrap-marks
                                                                         make-wrap
                                                                         id-sym-name&marks
                                                                         id-sym-name
                                                                         id?
                                                                         nonsymbol-id?
                                                                         global-extend
                                                                         lookup
                                                                         macros-only-env
                                                                         extend-var-env
                                                                         extend-env
                                                                         null-env
                                                                         binding-value
                                                                         binding-type
                                                                         make-binding
                                                                         arg-check
                                                                         source-annotation
                                                                         no-source
                                                                         set-syntax-object-module!
                                                                         set-syntax-object-wrap!
                                                                         set-syntax-object-expression!
                                                                         syntax-object-module
                                                                         syntax-object-wrap
                                                                         syntax-object-expression
                                                                         syntax-object?
                                                                         make-syntax-object
                                                                         build-lexical-var
                                                                         build-letrec
                                                                         build-named-let
                                                                         build-let
                                                                         build-sequence
                                                                         build-data
                                                                         build-primref
                                                                         build-lambda-case
                                                                         build-case-lambda
                                                                         build-simple-lambda
                                                                         build-global-definition
                                                                         maybe-name-value!
                                                                         build-global-assignment
                                                                         build-global-reference
                                                                         analyze-variable
                                                                         build-lexical-assignment
                                                                         build-lexical-reference
                                                                         build-dynlet
                                                                         build-conditional
                                                                         build-application
                                                                         build-void
                                                                         decorate-source
                                                                         get-global-definition-hook
                                                                         put-global-definition-hook
                                                                         gensym-hook
                                                                         local-eval-hook
                                                                         top-level-eval-hook
                                                                         fx<
                                                                         fx=
                                                                         fx-
                                                                         fx+
                                                                         *mode*)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("i780"
                                                                        "i778"
                                                                        "i776"
                                                                        "i774"
                                                                        "i772"
                                                                        "i770"
                                                                        "i768"
                                                                        "i766"
                                                                        "i764"
                                                                        "i762"
                                                                        "i760"
                                                                        "i758"
                                                                        "i756"
                                                                        "i754"
                                                                        "i752"
                                                                        "i750"
                                                                        "i748"
                                                                        "i746"
                                                                        "i744"
                                                                        "i742"
                                                                        "i740"
                                                                        "i738"
                                                                        "i736"
                                                                        "i734"
                                                                        "i732"
                                                                        "i730"
                                                                        "i728"
                                                                        "i726"
                                                                        "i724"
                                                                        "i722"
                                                                        "i720"
                                                                        "i718"
                                                                        "i716"
                                                                        "i714"
                                                                        "i712"
                                                                        "i710"
                                                                        "i709"
                                                                        "i708"
                                                                        "i706"
                                                                        "i705"
                                                                        "i704"
                                                                        "i703"
                                                                        "i702"
                                                                        "i700"
                                                                        "i698"
                                                                        "i696"
                                                                        "i694"
                                                                        "i692"
                                                                        "i690"
                                                                        "i688"
                                                                        "i686"
                                                                        "i683"
                                                                        "i681"
                                                                        "i680"
                                                                        "i679"
                                                                        "i678"
                                                                        "i677"
                                                                        "i676"
                                                                        "i674"
                                                                        "i672"
                                                                        "i670"
                                                                        "i668"
                                                                        "i667"
                                                                        "i665"
                                                                        "i663"
                                                                        "i661"
                                                                        "i659"
                                                                        "i657"
                                                                        "i655"
                                                                        "i653"
                                                                        "i652"
                                                                        "i650"
                                                                        "i648"
                                                                        "i647"
                                                                        "i646"
                                                                        "i644"
                                                                        "i643"
                                                                        "i641"
                                                                        "i639"
                                                                        "i637"
                                                                        "i635"
                                                                        "i633"
                                                                        "i631"
                                                                        "i629"
                                                                        "i627"
                                                                        "i625"
                                                                        "i623"
                                                                        "i621"
                                                                        "i619"
                                                                        "i617"
                                                                        "i615"
                                                                        "i613"
                                                                        "i611"
                                                                        "i609"
                                                                        "i607"
                                                                        "i605"
                                                                        "i603"
                                                                        "i601"
                                                                        "i599"
                                                                        "i597"
                                                                        "i595"
                                                                        "i593"
                                                                        "i591"
                                                                        "i589"
                                                                        "i587"
                                                                        "i585"
                                                                        "i583"
                                                                        "i581"
                                                                        "i579"
                                                                        "i578"
                                                                        "i576"
                                                                        "i574"
                                                                        "i572"
                                                                        "i570"
                                                                        "i568"
                                                                        "i566"
                                                                        "i564"))
                                                                     #(ribcage
                                                                       (define-structure
                                                                         and-map*)
                                                                       ((top)
                                                                        (top))
                                                                       ("i467"
                                                                        "i465")))
                                                                    (hygiene
                                                                      guile))))
                                                          #{ropt\ 1431}#)))
                                                #{tmp\ 1437}#)
                                         ((lambda (#{tmp\ 1446}#)
                                            (if (if #{tmp\ 1446}#
                                                  (apply (lambda (#{a\ 1450}#
                                                                  #{init\ 1451}#
                                                                  #{b\ 1452}#)
                                                           (#{id?\ 666}#
                                                             #{a\ 1450}#))
                                                         #{tmp\ 1446}#)
                                                  #f)
                                              (apply (lambda (#{a\ 1456}#
                                                              #{init\ 1457}#
                                                              #{b\ 1458}#)
                                                       (#{opt\ 1289}#
                                                         #{b\ 1458}#
                                                         #{req\ 1430}#
                                                         (cons (list #{a\ 1456}#
                                                                     #{init\ 1457}#)
                                                               #{ropt\ 1431}#)))
                                                     #{tmp\ 1446}#)
                                              ((lambda (#{tmp\ 1459}#)
                                                 (if (if #{tmp\ 1459}#
                                                       (apply (lambda (#{a\ 1462}#
                                                                       #{b\ 1463}#)
                                                                (eq? (syntax->datum
                                                                       #{a\ 1462}#)
                                                                     #:key))
                                                              #{tmp\ 1459}#)
                                                       #f)
                                                   (apply (lambda (#{a\ 1466}#
                                                                   #{b\ 1467}#)
                                                            (#{key\ 1291}#
                                                              #{b\ 1467}#
                                                              #{req\ 1430}#
                                                              (reverse
                                                                #{ropt\ 1431}#)
                                                              '()))
                                                          #{tmp\ 1459}#)
                                                   ((lambda (#{tmp\ 1468}#)
                                                      (if (if #{tmp\ 1468}#
                                                            (apply (lambda (#{a\ 1471}#
                                                                            #{b\ 1472}#)
                                                                     (eq? (syntax->datum
                                                                            #{a\ 1471}#)
                                                                          #:rest))
                                                                   #{tmp\ 1468}#)
                                                            #f)
                                                        (apply (lambda (#{a\ 1475}#
                                                                        #{b\ 1476}#)
                                                                 (#{rest\ 1293}#
                                                                   #{b\ 1476}#
                                                                   #{req\ 1430}#
                                                                   (reverse
                                                                     #{ropt\ 1431}#)
                                                                   '()))
                                                               #{tmp\ 1468}#)
                                                        ((lambda (#{tmp\ 1477}#)
                                                           (if (if #{tmp\ 1477}#
                                                                 (apply (lambda (#{r\ 1479}#)
                                                                          (#{id?\ 666}#
                                                                            #{r\ 1479}#))
                                                                        #{tmp\ 1477}#)
                                                                 #f)
                                                             (apply (lambda (#{r\ 1481}#)
                                                                      (#{rest\ 1293}#
                                                                        #{r\ 1481}#
                                                                        #{req\ 1430}#
                                                                        (reverse
                                                                          #{ropt\ 1431}#)
                                                                        '()))
                                                                    #{tmp\ 1477}#)
                                                             ((lambda (#{else\ 1483}#)
                                                                (syntax-violation
                                                                  'lambda*
                                                                  "invalid optional argument list"
                                                                  #{orig-args\ 1284}#
                                                                  #{args\ 1429}#))
                                                              #{tmp\ 1435}#)))
                                                         (list #{tmp\ 1435}#))))
                                                    ($sc-dispatch
                                                      #{tmp\ 1435}#
                                                      '(any any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 1435}#
                                                 '(any . any)))))
                                          ($sc-dispatch
                                            #{tmp\ 1435}#
                                            '((any any) . any)))))
                                     ($sc-dispatch
                                       #{tmp\ 1435}#
                                       '(any . any)))))
                                ($sc-dispatch #{tmp\ 1435}# (quote ()))))
                             #{args\ 1429}#)))
                        (#{req\ 1287}#
                          (lambda (#{args\ 1484}# #{rreq\ 1485}#)
                            ((lambda (#{tmp\ 1488}#)
                               ((lambda (#{tmp\ 1489}#)
                                  (if #{tmp\ 1489}#
                                    (apply (lambda ()
                                             (#{check\ 1295}#
                                               (reverse #{rreq\ 1485}#)
                                               '()
                                               #f
                                               '()))
                                           #{tmp\ 1489}#)
                                    ((lambda (#{tmp\ 1490}#)
                                       (if (if #{tmp\ 1490}#
                                             (apply (lambda (#{a\ 1493}#
                                                             #{b\ 1494}#)
                                                      (#{id?\ 666}#
                                                        #{a\ 1493}#))
                                                    #{tmp\ 1490}#)
                                             #f)
                                         (apply (lambda (#{a\ 1497}#
                                                         #{b\ 1498}#)
                                                  (#{req\ 1287}#
                                                    #{b\ 1498}#
                                                    (cons #{a\ 1497}#
                                                          #{rreq\ 1485}#)))
                                                #{tmp\ 1490}#)
                                         ((lambda (#{tmp\ 1499}#)
                                            (if (if #{tmp\ 1499}#
                                                  (apply (lambda (#{a\ 1502}#
                                                                  #{b\ 1503}#)
                                                           (eq? (syntax->datum
                                                                  #{a\ 1502}#)
                                                                #:optional))
                                                         #{tmp\ 1499}#)
                                                  #f)
                                              (apply (lambda (#{a\ 1506}#
                                                              #{b\ 1507}#)
                                                       (#{opt\ 1289}#
                                                         #{b\ 1507}#
                                                         (reverse
                                                           #{rreq\ 1485}#)
                                                         '()))
                                                     #{tmp\ 1499}#)
                                              ((lambda (#{tmp\ 1508}#)
                                                 (if (if #{tmp\ 1508}#
                                                       (apply (lambda (#{a\ 1511}#
                                                                       #{b\ 1512}#)
                                                                (eq? (syntax->datum
                                                                       #{a\ 1511}#)
                                                                     #:key))
                                                              #{tmp\ 1508}#)
                                                       #f)
                                                   (apply (lambda (#{a\ 1515}#
                                                                   #{b\ 1516}#)
                                                            (#{key\ 1291}#
                                                              #{b\ 1516}#
                                                              (reverse
                                                                #{rreq\ 1485}#)
                                                              '()
                                                              '()))
                                                          #{tmp\ 1508}#)
                                                   ((lambda (#{tmp\ 1517}#)
                                                      (if (if #{tmp\ 1517}#
                                                            (apply (lambda (#{a\ 1520}#
                                                                            #{b\ 1521}#)
                                                                     (eq? (syntax->datum
                                                                            #{a\ 1520}#)
                                                                          #:rest))
                                                                   #{tmp\ 1517}#)
                                                            #f)
                                                        (apply (lambda (#{a\ 1524}#
                                                                        #{b\ 1525}#)
                                                                 (#{rest\ 1293}#
                                                                   #{b\ 1525}#
                                                                   (reverse
                                                                     #{rreq\ 1485}#)
                                                                   '()
                                                                   '()))
                                                               #{tmp\ 1517}#)
                                                        ((lambda (#{tmp\ 1526}#)
                                                           (if (if #{tmp\ 1526}#
                                                                 (apply (lambda (#{r\ 1528}#)
                                                                          (#{id?\ 666}#
                                                                            #{r\ 1528}#))
                                                                        #{tmp\ 1526}#)
                                                                 #f)
                                                             (apply (lambda (#{r\ 1530}#)
                                                                      (#{rest\ 1293}#
                                                                        #{r\ 1530}#
                                                                        (reverse
                                                                          #{rreq\ 1485}#)
                                                                        '()
                                                                        '()))
                                                                    #{tmp\ 1526}#)
                                                             ((lambda (#{else\ 1532}#)
                                                                (syntax-violation
                                                                  'lambda*
                                                                  "invalid argument list"
                                                                  #{orig-args\ 1284}#
                                                                  #{args\ 1484}#))
                                                              #{tmp\ 1488}#)))
                                                         (list #{tmp\ 1488}#))))
                                                    ($sc-dispatch
                                                      #{tmp\ 1488}#
                                                      '(any any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 1488}#
                                                 '(any . any)))))
                                          ($sc-dispatch
                                            #{tmp\ 1488}#
                                            '(any . any)))))
                                     ($sc-dispatch
                                       #{tmp\ 1488}#
                                       '(any . any)))))
                                ($sc-dispatch #{tmp\ 1488}# (quote ()))))
                             #{args\ 1484}#))))
                 (#{req\ 1287}# #{orig-args\ 1284}# (quote ())))))
           (#{chi-simple-lambda\ 771}#
             (lambda (#{e\ 1533}#
                      #{r\ 1534}#
                      #{w\ 1535}#
                      #{s\ 1536}#
                      #{mod\ 1537}#
                      #{req\ 1538}#
                      #{rest\ 1539}#
                      #{meta\ 1540}#
                      #{body\ 1541}#)
               (let ((#{ids\ 1553}#
                       (if #{rest\ 1539}#
                         (append #{req\ 1538}# (list #{rest\ 1539}#))
                         #{req\ 1538}#)))
                 (let ((#{vars\ 1555}#
                         (map #{gen-var\ 779}# #{ids\ 1553}#)))
                   (let ((#{labels\ 1557}#
                           (#{gen-labels\ 684}# #{ids\ 1553}#)))
                     (#{build-simple-lambda\ 608}#
                       #{s\ 1536}#
                       (map syntax->datum #{req\ 1538}#)
                       (if #{rest\ 1539}#
                         (syntax->datum #{rest\ 1539}#)
                         #f)
                       #{vars\ 1555}#
                       #{meta\ 1540}#
                       (#{chi-body\ 759}#
                         #{body\ 1541}#
                         (#{source-wrap\ 737}#
                           #{e\ 1533}#
                           #{w\ 1535}#
                           #{s\ 1536}#
                           #{mod\ 1537}#)
                         (#{extend-var-env\ 656}#
                           #{labels\ 1557}#
                           #{vars\ 1555}#
                           #{r\ 1534}#)
                         (#{make-binding-wrap\ 713}#
                           #{ids\ 1553}#
                           #{labels\ 1557}#
                           #{w\ 1535}#)
                         #{mod\ 1537}#)))))))
           (#{lambda-formals\ 769}#
             (lambda (#{orig-args\ 1560}#)
               (letrec ((#{check\ 1565}#
                          (lambda (#{req\ 1566}# #{rest\ 1567}#)
                            (if (#{distinct-bound-ids?\ 731}#
                                  (if #{rest\ 1567}#
                                    (cons #{rest\ 1567}# #{req\ 1566}#)
                                    #{req\ 1566}#))
                              (values #{req\ 1566}# #f #{rest\ 1567}# #f)
                              (syntax-violation
                                'lambda
                                "duplicate identifier in argument list"
                                #{orig-args\ 1560}#))))
                        (#{req\ 1563}#
                          (lambda (#{args\ 1573}# #{rreq\ 1574}#)
                            ((lambda (#{tmp\ 1577}#)
                               ((lambda (#{tmp\ 1578}#)
                                  (if #{tmp\ 1578}#
                                    (apply (lambda ()
                                             (#{check\ 1565}#
                                               (reverse #{rreq\ 1574}#)
                                               #f))
                                           #{tmp\ 1578}#)
                                    ((lambda (#{tmp\ 1579}#)
                                       (if (if #{tmp\ 1579}#
                                             (apply (lambda (#{a\ 1582}#
                                                             #{b\ 1583}#)
                                                      (#{id?\ 666}#
                                                        #{a\ 1582}#))
                                                    #{tmp\ 1579}#)
                                             #f)
                                         (apply (lambda (#{a\ 1586}#
                                                         #{b\ 1587}#)
                                                  (#{req\ 1563}#
                                                    #{b\ 1587}#
                                                    (cons #{a\ 1586}#
                                                          #{rreq\ 1574}#)))
                                                #{tmp\ 1579}#)
                                         ((lambda (#{tmp\ 1588}#)
                                            (if (if #{tmp\ 1588}#
                                                  (apply (lambda (#{r\ 1590}#)
                                                           (#{id?\ 666}#
                                                             #{r\ 1590}#))
                                                         #{tmp\ 1588}#)
                                                  #f)
                                              (apply (lambda (#{r\ 1592}#)
                                                       (#{check\ 1565}#
                                                         (reverse
                                                           #{rreq\ 1574}#)
                                                         #{r\ 1592}#))
                                                     #{tmp\ 1588}#)
                                              ((lambda (#{else\ 1594}#)
                                                 (syntax-violation
                                                   'lambda
                                                   "invalid argument list"
                                                   #{orig-args\ 1560}#
                                                   #{args\ 1573}#))
                                               #{tmp\ 1577}#)))
                                          (list #{tmp\ 1577}#))))
                                     ($sc-dispatch
                                       #{tmp\ 1577}#
                                       '(any . any)))))
                                ($sc-dispatch #{tmp\ 1577}# (quote ()))))
                             #{args\ 1573}#))))
                 (#{req\ 1563}# #{orig-args\ 1560}# (quote ())))))
           (#{ellipsis?\ 767}#
             (lambda (#{x\ 1595}#)
               (if (#{nonsymbol-id?\ 664}# #{x\ 1595}#)
                 (#{free-id=?\ 725}#
                   #{x\ 1595}#
                   '#(syntax-object
                      ...
                      ((top)
                       #(ribcage () () ())
                       #(ribcage () () ())
                       #(ribcage #(x) #((top)) #("i1596"))
                       #(ribcage
                         (lambda-var-list
                           gen-var
                           strip
                           chi-lambda-case
                           lambda*-formals
                           chi-simple-lambda
                           lambda-formals
                           ellipsis?
                           chi-void
                           eval-local-transformer
                           chi-local-syntax
                           chi-body
                           chi-macro
                           chi-application
                           chi-expr
                           chi
                           chi-top
                           syntax-type
                           chi-when-list
                           chi-install-global
                           chi-top-sequence
                           chi-sequence
                           source-wrap
                           wrap
                           bound-id-member?
                           distinct-bound-ids?
                           valid-bound-ids?
                           bound-id=?
                           free-id=?
                           id-var-name
                           same-marks?
                           join-marks
                           join-wraps
                           smart-append
                           make-binding-wrap
                           extend-ribcage!
                           make-empty-ribcage
                           new-mark
                           anti-mark
                           the-anti-mark
                           top-marked?
                           top-wrap
                           empty-wrap
                           set-ribcage-labels!
                           set-ribcage-marks!
                           set-ribcage-symnames!
                           ribcage-labels
                           ribcage-marks
                           ribcage-symnames
                           ribcage?
                           make-ribcage
                           gen-labels
                           gen-label
                           make-rename
                           rename-marks
                           rename-new
                           rename-old
                           subst-rename?
                           wrap-subst
                           wrap-marks
                           make-wrap
                           id-sym-name&marks
                           id-sym-name
                           id?
                           nonsymbol-id?
                           global-extend
                           lookup
                           macros-only-env
                           extend-var-env
                           extend-env
                           null-env
                           binding-value
                           binding-type
                           make-binding
                           arg-check
                           source-annotation
                           no-source
                           set-syntax-object-module!
                           set-syntax-object-wrap!
                           set-syntax-object-expression!
                           syntax-object-module
                           syntax-object-wrap
                           syntax-object-expression
                           syntax-object?
                           make-syntax-object
                           build-lexical-var
                           build-letrec
                           build-named-let
                           build-let
                           build-sequence
                           build-data
                           build-primref
                           build-lambda-case
                           build-case-lambda
                           build-simple-lambda
                           build-global-definition
                           maybe-name-value!
                           build-global-assignment
                           build-global-reference
                           analyze-variable
                           build-lexical-assignment
                           build-lexical-reference
                           build-dynlet
                           build-conditional
                           build-application
                           build-void
                           decorate-source
                           get-global-definition-hook
                           put-global-definition-hook
                           gensym-hook
                           local-eval-hook
                           top-level-eval-hook
                           fx<
                           fx=
                           fx-
                           fx+
                           *mode*)
                         ((top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top))
                         ("i780"
                          "i778"
                          "i776"
                          "i774"
                          "i772"
                          "i770"
                          "i768"
                          "i766"
                          "i764"
                          "i762"
                          "i760"
                          "i758"
                          "i756"
                          "i754"
                          "i752"
                          "i750"
                          "i748"
                          "i746"
                          "i744"
                          "i742"
                          "i740"
                          "i738"
                          "i736"
                          "i734"
                          "i732"
                          "i730"
                          "i728"
                          "i726"
                          "i724"
                          "i722"
                          "i720"
                          "i718"
                          "i716"
                          "i714"
                          "i712"
                          "i710"
                          "i709"
                          "i708"
                          "i706"
                          "i705"
                          "i704"
                          "i703"
                          "i702"
                          "i700"
                          "i698"
                          "i696"
                          "i694"
                          "i692"
                          "i690"
                          "i688"
                          "i686"
                          "i683"
                          "i681"
                          "i680"
                          "i679"
                          "i678"
                          "i677"
                          "i676"
                          "i674"
                          "i672"
                          "i670"
                          "i668"
                          "i667"
                          "i665"
                          "i663"
                          "i661"
                          "i659"
                          "i657"
                          "i655"
                          "i653"
                          "i652"
                          "i650"
                          "i648"
                          "i647"
                          "i646"
                          "i644"
                          "i643"
                          "i641"
                          "i639"
                          "i637"
                          "i635"
                          "i633"
                          "i631"
                          "i629"
                          "i627"
                          "i625"
                          "i623"
                          "i621"
                          "i619"
                          "i617"
                          "i615"
                          "i613"
                          "i611"
                          "i609"
                          "i607"
                          "i605"
                          "i603"
                          "i601"
                          "i599"
                          "i597"
                          "i595"
                          "i593"
                          "i591"
                          "i589"
                          "i587"
                          "i585"
                          "i583"
                          "i581"
                          "i579"
                          "i578"
                          "i576"
                          "i574"
                          "i572"
                          "i570"
                          "i568"
                          "i566"
                          "i564"))
                       #(ribcage
                         (define-structure and-map*)
                         ((top) (top))
                         ("i467" "i465")))
                      (hygiene guile)))
                 #f)))
           (#{chi-void\ 765}#
             (lambda () (#{build-void\ 586}# #f)))
           (#{eval-local-transformer\ 763}#
             (lambda (#{expanded\ 1600}# #{mod\ 1601}#)
               (let ((#{p\ 1605}#
                       (#{local-eval-hook\ 577}#
                         #{expanded\ 1600}#
                         #{mod\ 1601}#)))
                 (if (procedure? #{p\ 1605}#)
                   (cons #{p\ 1605}# (module-name (current-module)))
                   (syntax-violation
                     #f
                     "nonprocedure transformer"
                     #{p\ 1605}#)))))
           (#{chi-local-syntax\ 761}#
             (lambda (#{rec?\ 1606}#
                      #{e\ 1607}#
                      #{r\ 1608}#
                      #{w\ 1609}#
                      #{s\ 1610}#
                      #{mod\ 1611}#
                      #{k\ 1612}#)
               ((lambda (#{tmp\ 1620}#)
                  ((lambda (#{tmp\ 1621}#)
                     (if #{tmp\ 1621}#
                       (apply (lambda (#{_\ 1627}#
                                       #{id\ 1628}#
                                       #{val\ 1629}#
                                       #{e1\ 1630}#
                                       #{e2\ 1631}#)
                                (let ((#{ids\ 1633}# #{id\ 1628}#))
                                  (if (not (#{valid-bound-ids?\ 729}#
                                             #{ids\ 1633}#))
                                    (syntax-violation
                                      #f
                                      "duplicate bound keyword"
                                      #{e\ 1607}#)
                                    (let ((#{labels\ 1636}#
                                            (#{gen-labels\ 684}#
                                              #{ids\ 1633}#)))
                                      (let ((#{new-w\ 1638}#
                                              (#{make-binding-wrap\ 713}#
                                                #{ids\ 1633}#
                                                #{labels\ 1636}#
                                                #{w\ 1609}#)))
                                        (#{k\ 1612}#
                                          (cons #{e1\ 1630}# #{e2\ 1631}#)
                                          (#{extend-env\ 654}#
                                            #{labels\ 1636}#
                                            (let ((#{w\ 1642}#
                                                    (if #{rec?\ 1606}#
                                                      #{new-w\ 1638}#
                                                      #{w\ 1609}#))
                                                  (#{trans-r\ 1643}#
                                                    (#{macros-only-env\ 658}#
                                                      #{r\ 1608}#)))
                                              (map (lambda (#{x\ 1644}#)
                                                     (cons 'macro
                                                           (#{eval-local-transformer\ 763}#
                                                             (#{chi\ 751}#
                                                               #{x\ 1644}#
                                                               #{trans-r\ 1643}#
                                                               #{w\ 1642}#
                                                               #{mod\ 1611}#)
                                                             #{mod\ 1611}#)))
                                                   #{val\ 1629}#))
                                            #{r\ 1608}#)
                                          #{new-w\ 1638}#
                                          #{s\ 1610}#
                                          #{mod\ 1611}#))))))
                              #{tmp\ 1621}#)
                       ((lambda (#{_\ 1649}#)
                          (syntax-violation
                            #f
                            "bad local syntax definition"
                            (#{source-wrap\ 737}#
                              #{e\ 1607}#
                              #{w\ 1609}#
                              #{s\ 1610}#
                              #{mod\ 1611}#)))
                        #{tmp\ 1620}#)))
                   ($sc-dispatch
                     #{tmp\ 1620}#
                     '(any #(each (any any)) any . each-any))))
                #{e\ 1607}#)))
           (#{chi-body\ 759}#
             (lambda (#{body\ 1650}#
                      #{outer-form\ 1651}#
                      #{r\ 1652}#
                      #{w\ 1653}#
                      #{mod\ 1654}#)
               (let ((#{r\ 1662}#
                       (cons '("placeholder" placeholder)
                             #{r\ 1652}#)))
                 (let ((#{ribcage\ 1664}#
                         (#{make-ribcage\ 687}#
                           '()
                           '()
                           '())))
                   (let ((#{w\ 1667}#
                           (#{make-wrap\ 671}#
                             (#{wrap-marks\ 673}# #{w\ 1653}#)
                             (cons #{ribcage\ 1664}#
                                   (#{wrap-subst\ 675}# #{w\ 1653}#)))))
                     (letrec ((#{parse\ 1676}#
                                (lambda (#{body\ 1677}#
                                         #{ids\ 1678}#
                                         #{labels\ 1679}#
                                         #{var-ids\ 1680}#
                                         #{vars\ 1681}#
                                         #{vals\ 1682}#
                                         #{bindings\ 1683}#)
                                  (if (null? #{body\ 1677}#)
                                    (syntax-violation
                                      #f
                                      "no expressions in body"
                                      #{outer-form\ 1651}#)
                                    (let ((#{e\ 1688}# (cdar #{body\ 1677}#))
                                          (#{er\ 1689}# (caar #{body\ 1677}#)))
                                      (call-with-values
                                        (lambda ()
                                          (#{syntax-type\ 747}#
                                            #{e\ 1688}#
                                            #{er\ 1689}#
                                            '(())
                                            (#{source-annotation\ 645}#
                                              #{er\ 1689}#)
                                            #{ribcage\ 1664}#
                                            #{mod\ 1654}#
                                            #f))
                                        (lambda (#{type\ 1691}#
                                                 #{value\ 1692}#
                                                 #{e\ 1693}#
                                                 #{w\ 1694}#
                                                 #{s\ 1695}#
                                                 #{mod\ 1696}#)
                                          (if (memv #{type\ 1691}#
                                                    '(define-form))
                                            (let ((#{id\ 1706}#
                                                    (#{wrap\ 735}#
                                                      #{value\ 1692}#
                                                      #{w\ 1694}#
                                                      #{mod\ 1696}#))
                                                  (#{label\ 1707}#
                                                    (#{gen-label\ 682}#)))
                                              (let ((#{var\ 1709}#
                                                      (#{gen-var\ 779}#
                                                        #{id\ 1706}#)))
                                                (begin
                                                  (#{extend-ribcage!\ 711}#
                                                    #{ribcage\ 1664}#
                                                    #{id\ 1706}#
                                                    #{label\ 1707}#)
                                                  (#{parse\ 1676}#
                                                    (cdr #{body\ 1677}#)
                                                    (cons #{id\ 1706}#
                                                          #{ids\ 1678}#)
                                                    (cons #{label\ 1707}#
                                                          #{labels\ 1679}#)
                                                    (cons #{id\ 1706}#
                                                          #{var-ids\ 1680}#)
                                                    (cons #{var\ 1709}#
                                                          #{vars\ 1681}#)
                                                    (cons (cons #{er\ 1689}#
                                                                (#{wrap\ 735}#
                                                                  #{e\ 1693}#
                                                                  #{w\ 1694}#
                                                                  #{mod\ 1696}#))
                                                          #{vals\ 1682}#)
                                                    (cons (cons 'lexical
                                                                #{var\ 1709}#)
                                                          #{bindings\ 1683}#)))))
                                            (if (memv #{type\ 1691}#
                                                      '(define-syntax-form))
                                              (let ((#{id\ 1714}#
                                                      (#{wrap\ 735}#
                                                        #{value\ 1692}#
                                                        #{w\ 1694}#
                                                        #{mod\ 1696}#))
                                                    (#{label\ 1715}#
                                                      (#{gen-label\ 682}#)))
                                                (begin
                                                  (#{extend-ribcage!\ 711}#
                                                    #{ribcage\ 1664}#
                                                    #{id\ 1714}#
                                                    #{label\ 1715}#)
                                                  (#{parse\ 1676}#
                                                    (cdr #{body\ 1677}#)
                                                    (cons #{id\ 1714}#
                                                          #{ids\ 1678}#)
                                                    (cons #{label\ 1715}#
                                                          #{labels\ 1679}#)
                                                    #{var-ids\ 1680}#
                                                    #{vars\ 1681}#
                                                    #{vals\ 1682}#
                                                    (cons (cons 'macro
                                                                (cons #{er\ 1689}#
                                                                      (#{wrap\ 735}#
                                                                        #{e\ 1693}#
                                                                        #{w\ 1694}#
                                                                        #{mod\ 1696}#)))
                                                          #{bindings\ 1683}#))))
                                              (if (memv #{type\ 1691}#
                                                        '(begin-form))
                                                ((lambda (#{tmp\ 1718}#)
                                                   ((lambda (#{tmp\ 1719}#)
                                                      (if #{tmp\ 1719}#
                                                        (apply (lambda (#{_\ 1722}#
                                                                        #{e1\ 1723}#)
                                                                 (#{parse\ 1676}#
                                                                   (letrec ((#{f\ 1726}#
                                                                              (lambda (#{forms\ 1727}#)
                                                                                (if (null? #{forms\ 1727}#)
                                                                                  (cdr #{body\ 1677}#)
                                                                                  (cons (cons #{er\ 1689}#
                                                                                              (#{wrap\ 735}#
                                                                                                (car #{forms\ 1727}#)
                                                                                                #{w\ 1694}#
                                                                                                #{mod\ 1696}#))
                                                                                        (#{f\ 1726}#
                                                                                          (cdr #{forms\ 1727}#)))))))
                                                                     (#{f\ 1726}#
                                                                       #{e1\ 1723}#))
                                                                   #{ids\ 1678}#
                                                                   #{labels\ 1679}#
                                                                   #{var-ids\ 1680}#
                                                                   #{vars\ 1681}#
                                                                   #{vals\ 1682}#
                                                                   #{bindings\ 1683}#))
                                                               #{tmp\ 1719}#)
                                                        (syntax-violation
                                                          #f
                                                          "source expression failed to match any pattern"
                                                          #{tmp\ 1718}#)))
                                                    ($sc-dispatch
                                                      #{tmp\ 1718}#
                                                      '(any . each-any))))
                                                 #{e\ 1693}#)
                                                (if (memv #{type\ 1691}#
                                                          '(local-syntax-form))
                                                  (#{chi-local-syntax\ 761}#
                                                    #{value\ 1692}#
                                                    #{e\ 1693}#
                                                    #{er\ 1689}#
                                                    #{w\ 1694}#
                                                    #{s\ 1695}#
                                                    #{mod\ 1696}#
                                                    (lambda (#{forms\ 1730}#
                                                             #{er\ 1731}#
                                                             #{w\ 1732}#
                                                             #{s\ 1733}#
                                                             #{mod\ 1734}#)
                                                      (#{parse\ 1676}#
                                                        (letrec ((#{f\ 1742}#
                                                                   (lambda (#{forms\ 1743}#)
                                                                     (if (null? #{forms\ 1743}#)
                                                                       (cdr #{body\ 1677}#)
                                                                       (cons (cons #{er\ 1731}#
                                                                                   (#{wrap\ 735}#
                                                                                     (car #{forms\ 1743}#)
                                                                                     #{w\ 1732}#
                                                                                     #{mod\ 1734}#))
                                                                             (#{f\ 1742}#
                                                                               (cdr #{forms\ 1743}#)))))))
                                                          (#{f\ 1742}#
                                                            #{forms\ 1730}#))
                                                        #{ids\ 1678}#
                                                        #{labels\ 1679}#
                                                        #{var-ids\ 1680}#
                                                        #{vars\ 1681}#
                                                        #{vals\ 1682}#
                                                        #{bindings\ 1683}#)))
                                                  (if (null? #{ids\ 1678}#)
                                                    (#{build-sequence\ 618}#
                                                      #f
                                                      (map (lambda (#{x\ 1746}#)
                                                             (#{chi\ 751}#
                                                               (cdr #{x\ 1746}#)
                                                               (car #{x\ 1746}#)
                                                               '(())
                                                               #{mod\ 1696}#))
                                                           (cons (cons #{er\ 1689}#
                                                                       (#{source-wrap\ 737}#
                                                                         #{e\ 1693}#
                                                                         #{w\ 1694}#
                                                                         #{s\ 1695}#
                                                                         #{mod\ 1696}#))
                                                                 (cdr #{body\ 1677}#))))
                                                    (begin
                                                      (if (not (#{valid-bound-ids?\ 729}#
                                                                 #{ids\ 1678}#))
                                                        (syntax-violation
                                                          #f
                                                          "invalid or duplicate identifier in definition"
                                                          #{outer-form\ 1651}#))
                                                      (letrec ((#{loop\ 1753}#
                                                                 (lambda (#{bs\ 1754}#
                                                                          #{er-cache\ 1755}#
                                                                          #{r-cache\ 1756}#)
                                                                   (if (not (null? #{bs\ 1754}#))
                                                                     (let ((#{b\ 1759}#
                                                                             (car #{bs\ 1754}#)))
                                                                       (if (eq? (car #{b\ 1759}#)
                                                                                'macro)
                                                                         (let ((#{er\ 1762}#
                                                                                 (cadr #{b\ 1759}#)))
                                                                           (let ((#{r-cache\ 1764}#
                                                                                   (if (eq? #{er\ 1762}#
                                                                                            #{er-cache\ 1755}#)
                                                                                     #{r-cache\ 1756}#
                                                                                     (#{macros-only-env\ 658}#
                                                                                       #{er\ 1762}#))))
                                                                             (begin
                                                                               (set-cdr!
                                                                                 #{b\ 1759}#
                                                                                 (#{eval-local-transformer\ 763}#
                                                                                   (#{chi\ 751}#
                                                                                     (cddr #{b\ 1759}#)
                                                                                     #{r-cache\ 1764}#
                                                                                     '(())
                                                                                     #{mod\ 1696}#)
                                                                                   #{mod\ 1696}#))
                                                                               (#{loop\ 1753}#
                                                                                 (cdr #{bs\ 1754}#)
                                                                                 #{er\ 1762}#
                                                                                 #{r-cache\ 1764}#))))
                                                                         (#{loop\ 1753}#
                                                                           (cdr #{bs\ 1754}#)
                                                                           #{er-cache\ 1755}#
                                                                           #{r-cache\ 1756}#)))))))
                                                        (#{loop\ 1753}#
                                                          #{bindings\ 1683}#
                                                          #f
                                                          #f))
                                                      (set-cdr!
                                                        #{r\ 1662}#
                                                        (#{extend-env\ 654}#
                                                          #{labels\ 1679}#
                                                          #{bindings\ 1683}#
                                                          (cdr #{r\ 1662}#)))
                                                      (#{build-letrec\ 624}#
                                                        #f
                                                        (map syntax->datum
                                                             #{var-ids\ 1680}#)
                                                        #{vars\ 1681}#
                                                        (map (lambda (#{x\ 1767}#)
                                                               (#{chi\ 751}#
                                                                 (cdr #{x\ 1767}#)
                                                                 (car #{x\ 1767}#)
                                                                 '(())
                                                                 #{mod\ 1696}#))
                                                             #{vals\ 1682}#)
                                                        (#{build-sequence\ 618}#
                                                          #f
                                                          (map (lambda (#{x\ 1771}#)
                                                                 (#{chi\ 751}#
                                                                   (cdr #{x\ 1771}#)
                                                                   (car #{x\ 1771}#)
                                                                   '(())
                                                                   #{mod\ 1696}#))
                                                               (cons (cons #{er\ 1689}#
                                                                           (#{source-wrap\ 737}#
                                                                             #{e\ 1693}#
                                                                             #{w\ 1694}#
                                                                             #{s\ 1695}#
                                                                             #{mod\ 1696}#))
                                                                     (cdr #{body\ 1677}#))))))))))))))))))
                       (#{parse\ 1676}#
                         (map (lambda (#{x\ 1684}#)
                                (cons #{r\ 1662}#
                                      (#{wrap\ 735}#
                                        #{x\ 1684}#
                                        #{w\ 1667}#
                                        #{mod\ 1654}#)))
                              #{body\ 1650}#)
                         '()
                         '()
                         '()
                         '()
                         '()
                         '())))))))
           (#{chi-macro\ 757}#
             (lambda (#{p\ 1774}#
                      #{e\ 1775}#
                      #{r\ 1776}#
                      #{w\ 1777}#
                      #{rib\ 1778}#
                      #{mod\ 1779}#)
               (letrec ((#{rebuild-macro-output\ 1787}#
                          (lambda (#{x\ 1788}# #{m\ 1789}#)
                            (if (pair? #{x\ 1788}#)
                              (cons (#{rebuild-macro-output\ 1787}#
                                      (car #{x\ 1788}#)
                                      #{m\ 1789}#)
                                    (#{rebuild-macro-output\ 1787}#
                                      (cdr #{x\ 1788}#)
                                      #{m\ 1789}#))
                              (if (#{syntax-object?\ 630}# #{x\ 1788}#)
                                (let ((#{w\ 1797}#
                                        (#{syntax-object-wrap\ 634}#
                                          #{x\ 1788}#)))
                                  (let ((#{ms\ 1800}#
                                          (#{wrap-marks\ 673}# #{w\ 1797}#))
                                        (#{s\ 1801}#
                                          (#{wrap-subst\ 675}# #{w\ 1797}#)))
                                    (if (if (pair? #{ms\ 1800}#)
                                          (eq? (car #{ms\ 1800}#) #f)
                                          #f)
                                      (#{make-syntax-object\ 628}#
                                        (#{syntax-object-expression\ 632}#
                                          #{x\ 1788}#)
                                        (#{make-wrap\ 671}#
                                          (cdr #{ms\ 1800}#)
                                          (if #{rib\ 1778}#
                                            (cons #{rib\ 1778}#
                                                  (cdr #{s\ 1801}#))
                                            (cdr #{s\ 1801}#)))
                                        (#{syntax-object-module\ 636}#
                                          #{x\ 1788}#))
                                      (#{make-syntax-object\ 628}#
                                        (#{syntax-object-expression\ 632}#
                                          #{x\ 1788}#)
                                        (#{make-wrap\ 671}#
                                          (cons #{m\ 1789}# #{ms\ 1800}#)
                                          (if #{rib\ 1778}#
                                            (cons #{rib\ 1778}#
                                                  (cons 'shift
                                                        #{s\ 1801}#))
                                            (cons (quote shift) #{s\ 1801}#)))
                                        (cons 'hygiene
                                              (cdr #{p\ 1774}#))))))
                                (if (vector? #{x\ 1788}#)
                                  (let ((#{n\ 1809}#
                                          (vector-length #{x\ 1788}#)))
                                    (let ((#{v\ 1811}#
                                            (make-vector #{n\ 1809}#)))
                                      (letrec ((#{loop\ 1814}#
                                                 (lambda (#{i\ 1815}#)
                                                   (if (#{fx=\ 571}#
                                                         #{i\ 1815}#
                                                         #{n\ 1809}#)
                                                     (begin
                                                       (if #f #f)
                                                       #{v\ 1811}#)
                                                     (begin
                                                       (vector-set!
                                                         #{v\ 1811}#
                                                         #{i\ 1815}#
                                                         (#{rebuild-macro-output\ 1787}#
                                                           (vector-ref
                                                             #{x\ 1788}#
                                                             #{i\ 1815}#)
                                                           #{m\ 1789}#))
                                                       (#{loop\ 1814}#
                                                         (#{fx+\ 567}#
                                                           #{i\ 1815}#
                                                           1)))))))
                                        (#{loop\ 1814}# 0))))
                                  (if (symbol? #{x\ 1788}#)
                                    (syntax-violation
                                      #f
                                      "encountered raw symbol in macro output"
                                      (#{source-wrap\ 737}#
                                        #{e\ 1775}#
                                        #{w\ 1777}#
                                        (#{wrap-subst\ 675}# #{w\ 1777}#)
                                        #{mod\ 1779}#)
                                      #{x\ 1788}#)
                                    #{x\ 1788}#)))))))
                 (#{rebuild-macro-output\ 1787}#
                   ((car #{p\ 1774}#)
                    (#{wrap\ 735}#
                      #{e\ 1775}#
                      (#{anti-mark\ 707}# #{w\ 1777}#)
                      #{mod\ 1779}#))
                   (gensym "m")))))
           (#{chi-application\ 755}#
             (lambda (#{x\ 1822}#
                      #{e\ 1823}#
                      #{r\ 1824}#
                      #{w\ 1825}#
                      #{s\ 1826}#
                      #{mod\ 1827}#)
               ((lambda (#{tmp\ 1834}#)
                  ((lambda (#{tmp\ 1835}#)
                     (if #{tmp\ 1835}#
                       (apply (lambda (#{e0\ 1838}# #{e1\ 1839}#)
                                (#{build-application\ 588}#
                                  #{s\ 1826}#
                                  #{x\ 1822}#
                                  (map (lambda (#{e\ 1840}#)
                                         (#{chi\ 751}#
                                           #{e\ 1840}#
                                           #{r\ 1824}#
                                           #{w\ 1825}#
                                           #{mod\ 1827}#))
                                       #{e1\ 1839}#)))
                              #{tmp\ 1835}#)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         #{tmp\ 1834}#)))
                   ($sc-dispatch
                     #{tmp\ 1834}#
                     '(any . each-any))))
                #{e\ 1823}#)))
           (#{chi-expr\ 753}#
             (lambda (#{type\ 1843}#
                      #{value\ 1844}#
                      #{e\ 1845}#
                      #{r\ 1846}#
                      #{w\ 1847}#
                      #{s\ 1848}#
                      #{mod\ 1849}#)
               (if (memv #{type\ 1843}# (quote (lexical)))
                 (#{build-lexical-reference\ 594}#
                   'value
                   #{s\ 1848}#
                   #{e\ 1845}#
                   #{value\ 1844}#)
                 (if (memv #{type\ 1843}# (quote (core core-form)))
                   (#{value\ 1844}#
                     #{e\ 1845}#
                     #{r\ 1846}#
                     #{w\ 1847}#
                     #{s\ 1848}#
                     #{mod\ 1849}#)
                   (if (memv #{type\ 1843}# (quote (module-ref)))
                     (call-with-values
                       (lambda ()
                         (#{value\ 1844}#
                           #{e\ 1845}#
                           #{r\ 1846}#
                           #{w\ 1847}#))
                       (lambda (#{e\ 1860}#
                                #{r\ 1861}#
                                #{w\ 1862}#
                                #{s\ 1863}#
                                #{mod\ 1864}#)
                         (#{chi\ 751}#
                           #{e\ 1860}#
                           #{r\ 1861}#
                           #{w\ 1862}#
                           #{mod\ 1864}#)))
                     (if (memv #{type\ 1843}# (quote (lexical-call)))
                       (#{chi-application\ 755}#
                         (#{build-lexical-reference\ 594}#
                           'fun
                           (#{source-annotation\ 645}# (car #{e\ 1845}#))
                           (car #{e\ 1845}#)
                           #{value\ 1844}#)
                         #{e\ 1845}#
                         #{r\ 1846}#
                         #{w\ 1847}#
                         #{s\ 1848}#
                         #{mod\ 1849}#)
                       (if (memv #{type\ 1843}# (quote (global-call)))
                         (#{chi-application\ 755}#
                           (#{build-global-reference\ 600}#
                             (#{source-annotation\ 645}# (car #{e\ 1845}#))
                             (if (#{syntax-object?\ 630}# #{value\ 1844}#)
                               (#{syntax-object-expression\ 632}#
                                 #{value\ 1844}#)
                               #{value\ 1844}#)
                             (if (#{syntax-object?\ 630}# #{value\ 1844}#)
                               (#{syntax-object-module\ 636}# #{value\ 1844}#)
                               #{mod\ 1849}#))
                           #{e\ 1845}#
                           #{r\ 1846}#
                           #{w\ 1847}#
                           #{s\ 1848}#
                           #{mod\ 1849}#)
                         (if (memv #{type\ 1843}# (quote (constant)))
                           (#{build-data\ 616}#
                             #{s\ 1848}#
                             (#{strip\ 777}#
                               (#{source-wrap\ 737}#
                                 #{e\ 1845}#
                                 #{w\ 1847}#
                                 #{s\ 1848}#
                                 #{mod\ 1849}#)
                               '(())))
                           (if (memv #{type\ 1843}# (quote (global)))
                             (#{build-global-reference\ 600}#
                               #{s\ 1848}#
                               #{value\ 1844}#
                               #{mod\ 1849}#)
                             (if (memv #{type\ 1843}# (quote (call)))
                               (#{chi-application\ 755}#
                                 (#{chi\ 751}#
                                   (car #{e\ 1845}#)
                                   #{r\ 1846}#
                                   #{w\ 1847}#
                                   #{mod\ 1849}#)
                                 #{e\ 1845}#
                                 #{r\ 1846}#
                                 #{w\ 1847}#
                                 #{s\ 1848}#
                                 #{mod\ 1849}#)
                               (if (memv #{type\ 1843}# (quote (begin-form)))
                                 ((lambda (#{tmp\ 1877}#)
                                    ((lambda (#{tmp\ 1878}#)
                                       (if #{tmp\ 1878}#
                                         (apply (lambda (#{_\ 1882}#
                                                         #{e1\ 1883}#
                                                         #{e2\ 1884}#)
                                                  (#{chi-sequence\ 739}#
                                                    (cons #{e1\ 1883}#
                                                          #{e2\ 1884}#)
                                                    #{r\ 1846}#
                                                    #{w\ 1847}#
                                                    #{s\ 1848}#
                                                    #{mod\ 1849}#))
                                                #{tmp\ 1878}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp\ 1877}#)))
                                     ($sc-dispatch
                                       #{tmp\ 1877}#
                                       '(any any . each-any))))
                                  #{e\ 1845}#)
                                 (if (memv #{type\ 1843}#
                                           '(local-syntax-form))
                                   (#{chi-local-syntax\ 761}#
                                     #{value\ 1844}#
                                     #{e\ 1845}#
                                     #{r\ 1846}#
                                     #{w\ 1847}#
                                     #{s\ 1848}#
                                     #{mod\ 1849}#
                                     #{chi-sequence\ 739}#)
                                   (if (memv #{type\ 1843}#
                                             '(eval-when-form))
                                     ((lambda (#{tmp\ 1888}#)
                                        ((lambda (#{tmp\ 1889}#)
                                           (if #{tmp\ 1889}#
                                             (apply (lambda (#{_\ 1894}#
                                                             #{x\ 1895}#
                                                             #{e1\ 1896}#
                                                             #{e2\ 1897}#)
                                                      (let ((#{when-list\ 1899}#
                                                              (#{chi-when-list\ 745}#
                                                                #{e\ 1845}#
                                                                #{x\ 1895}#
                                                                #{w\ 1847}#)))
                                                        (if (memq 'eval
                                                                  #{when-list\ 1899}#)
                                                          (#{chi-sequence\ 739}#
                                                            (cons #{e1\ 1896}#
                                                                  #{e2\ 1897}#)
                                                            #{r\ 1846}#
                                                            #{w\ 1847}#
                                                            #{s\ 1848}#
                                                            #{mod\ 1849}#)
                                                          (#{chi-void\ 765}#))))
                                                    #{tmp\ 1889}#)
                                             (syntax-violation
                                               #f
                                               "source expression failed to match any pattern"
                                               #{tmp\ 1888}#)))
                                         ($sc-dispatch
                                           #{tmp\ 1888}#
                                           '(any each-any any . each-any))))
                                      #{e\ 1845}#)
                                     (if (memv #{type\ 1843}#
                                               '(define-form
                                                  define-syntax-form))
                                       (syntax-violation
                                         #f
                                         "definition in expression context"
                                         #{e\ 1845}#
                                         (#{wrap\ 735}#
                                           #{value\ 1844}#
                                           #{w\ 1847}#
                                           #{mod\ 1849}#))
                                       (if (memv #{type\ 1843}#
                                                 '(syntax))
                                         (syntax-violation
                                           #f
                                           "reference to pattern variable outside syntax form"
                                           (#{source-wrap\ 737}#
                                             #{e\ 1845}#
                                             #{w\ 1847}#
                                             #{s\ 1848}#
                                             #{mod\ 1849}#))
                                         (if (memv #{type\ 1843}#
                                                   '(displaced-lexical))
                                           (syntax-violation
                                             #f
                                             "reference to identifier outside its scope"
                                             (#{source-wrap\ 737}#
                                               #{e\ 1845}#
                                               #{w\ 1847}#
                                               #{s\ 1848}#
                                               #{mod\ 1849}#))
                                           (syntax-violation
                                             #f
                                             "unexpected syntax"
                                             (#{source-wrap\ 737}#
                                               #{e\ 1845}#
                                               #{w\ 1847}#
                                               #{s\ 1848}#
                                               #{mod\ 1849}#))))))))))))))))))
           (#{chi\ 751}#
             (lambda (#{e\ 1906}#
                      #{r\ 1907}#
                      #{w\ 1908}#
                      #{mod\ 1909}#)
               (call-with-values
                 (lambda ()
                   (#{syntax-type\ 747}#
                     #{e\ 1906}#
                     #{r\ 1907}#
                     #{w\ 1908}#
                     (#{source-annotation\ 645}# #{e\ 1906}#)
                     #f
                     #{mod\ 1909}#
                     #f))
                 (lambda (#{type\ 1914}#
                          #{value\ 1915}#
                          #{e\ 1916}#
                          #{w\ 1917}#
                          #{s\ 1918}#
                          #{mod\ 1919}#)
                   (#{chi-expr\ 753}#
                     #{type\ 1914}#
                     #{value\ 1915}#
                     #{e\ 1916}#
                     #{r\ 1907}#
                     #{w\ 1917}#
                     #{s\ 1918}#
                     #{mod\ 1919}#)))))
           (#{chi-top\ 749}#
             (lambda (#{e\ 1926}#
                      #{r\ 1927}#
                      #{w\ 1928}#
                      #{m\ 1929}#
                      #{esew\ 1930}#
                      #{mod\ 1931}#)
               (call-with-values
                 (lambda ()
                   (#{syntax-type\ 747}#
                     #{e\ 1926}#
                     #{r\ 1927}#
                     #{w\ 1928}#
                     (#{source-annotation\ 645}# #{e\ 1926}#)
                     #f
                     #{mod\ 1931}#
                     #f))
                 (lambda (#{type\ 1952}#
                          #{value\ 1953}#
                          #{e\ 1954}#
                          #{w\ 1955}#
                          #{s\ 1956}#
                          #{mod\ 1957}#)
                   (if (memv #{type\ 1952}# (quote (begin-form)))
                     ((lambda (#{tmp\ 1965}#)
                        ((lambda (#{tmp\ 1966}#)
                           (if #{tmp\ 1966}#
                             (apply (lambda (#{_\ 1968}#) (#{chi-void\ 765}#))
                                    #{tmp\ 1966}#)
                             ((lambda (#{tmp\ 1969}#)
                                (if #{tmp\ 1969}#
                                  (apply (lambda (#{_\ 1973}#
                                                  #{e1\ 1974}#
                                                  #{e2\ 1975}#)
                                           (#{chi-top-sequence\ 741}#
                                             (cons #{e1\ 1974}# #{e2\ 1975}#)
                                             #{r\ 1927}#
                                             #{w\ 1955}#
                                             #{s\ 1956}#
                                             #{m\ 1929}#
                                             #{esew\ 1930}#
                                             #{mod\ 1957}#))
                                         #{tmp\ 1969}#)
                                  (syntax-violation
                                    #f
                                    "source expression failed to match any pattern"
                                    #{tmp\ 1965}#)))
                              ($sc-dispatch
                                #{tmp\ 1965}#
                                '(any any . each-any)))))
                         ($sc-dispatch #{tmp\ 1965}# (quote (any)))))
                      #{e\ 1954}#)
                     (if (memv #{type\ 1952}# (quote (local-syntax-form)))
                       (#{chi-local-syntax\ 761}#
                         #{value\ 1953}#
                         #{e\ 1954}#
                         #{r\ 1927}#
                         #{w\ 1955}#
                         #{s\ 1956}#
                         #{mod\ 1957}#
                         (lambda (#{body\ 1978}#
                                  #{r\ 1979}#
                                  #{w\ 1980}#
                                  #{s\ 1981}#
                                  #{mod\ 1982}#)
                           (#{chi-top-sequence\ 741}#
                             #{body\ 1978}#
                             #{r\ 1979}#
                             #{w\ 1980}#
                             #{s\ 1981}#
                             #{m\ 1929}#
                             #{esew\ 1930}#
                             #{mod\ 1982}#)))
                       (if (memv #{type\ 1952}# (quote (eval-when-form)))
                         ((lambda (#{tmp\ 1989}#)
                            ((lambda (#{tmp\ 1990}#)
                               (if #{tmp\ 1990}#
                                 (apply (lambda (#{_\ 1995}#
                                                 #{x\ 1996}#
                                                 #{e1\ 1997}#
                                                 #{e2\ 1998}#)
                                          (let ((#{when-list\ 2001}#
                                                  (#{chi-when-list\ 745}#
                                                    #{e\ 1954}#
                                                    #{x\ 1996}#
                                                    #{w\ 1955}#))
                                                (#{body\ 2002}#
                                                  (cons #{e1\ 1997}#
                                                        #{e2\ 1998}#)))
                                            (if (eq? #{m\ 1929}# (quote e))
                                              (if (memq 'eval
                                                        #{when-list\ 2001}#)
                                                (#{chi-top-sequence\ 741}#
                                                  #{body\ 2002}#
                                                  #{r\ 1927}#
                                                  #{w\ 1955}#
                                                  #{s\ 1956}#
                                                  (if (memq 'expand
                                                            #{when-list\ 2001}#)
                                                    'c&e
                                                    'e)
                                                  '(eval)
                                                  #{mod\ 1957}#)
                                                (begin
                                                  (if (memq 'expand
                                                            #{when-list\ 2001}#)
                                                    (#{top-level-eval-hook\ 575}#
                                                      (#{chi-top-sequence\ 741}#
                                                        #{body\ 2002}#
                                                        #{r\ 1927}#
                                                        #{w\ 1955}#
                                                        #{s\ 1956}#
                                                        'e
                                                        '(eval)
                                                        #{mod\ 1957}#)
                                                      #{mod\ 1957}#))
                                                  (#{chi-void\ 765}#)))
                                              (if (memq 'load
                                                        #{when-list\ 2001}#)
                                                (if (let ((#{t\ 2011}#
                                                            (memq 'compile
                                                                  #{when-list\ 2001}#)))
                                                      (if #{t\ 2011}#
                                                        #{t\ 2011}#
                                                        (let ((#{t\ 2014}#
                                                                (memq 'expand
                                                                      #{when-list\ 2001}#)))
                                                          (if #{t\ 2014}#
                                                            #{t\ 2014}#
                                                            (if (eq? #{m\ 1929}#
                                                                     'c&e)
                                                              (memq 'eval
                                                                    #{when-list\ 2001}#)
                                                              #f)))))
                                                  (#{chi-top-sequence\ 741}#
                                                    #{body\ 2002}#
                                                    #{r\ 1927}#
                                                    #{w\ 1955}#
                                                    #{s\ 1956}#
                                                    'c&e
                                                    '(compile load)
                                                    #{mod\ 1957}#)
                                                  (if (memq #{m\ 1929}#
                                                            '(c c&e))
                                                    (#{chi-top-sequence\ 741}#
                                                      #{body\ 2002}#
                                                      #{r\ 1927}#
                                                      #{w\ 1955}#
                                                      #{s\ 1956}#
                                                      'c
                                                      '(load)
                                                      #{mod\ 1957}#)
                                                    (#{chi-void\ 765}#)))
                                                (if (let ((#{t\ 2022}#
                                                            (memq 'compile
                                                                  #{when-list\ 2001}#)))
                                                      (if #{t\ 2022}#
                                                        #{t\ 2022}#
                                                        (let ((#{t\ 2025}#
                                                                (memq 'expand
                                                                      #{when-list\ 2001}#)))
                                                          (if #{t\ 2025}#
                                                            #{t\ 2025}#
                                                            (if (eq? #{m\ 1929}#
                                                                     'c&e)
                                                              (memq 'eval
                                                                    #{when-list\ 2001}#)
                                                              #f)))))
                                                  (begin
                                                    (#{top-level-eval-hook\ 575}#
                                                      (#{chi-top-sequence\ 741}#
                                                        #{body\ 2002}#
                                                        #{r\ 1927}#
                                                        #{w\ 1955}#
                                                        #{s\ 1956}#
                                                        'e
                                                        '(eval)
                                                        #{mod\ 1957}#)
                                                      #{mod\ 1957}#)
                                                    (#{chi-void\ 765}#))
                                                  (#{chi-void\ 765}#))))))
                                        #{tmp\ 1990}#)
                                 (syntax-violation
                                   #f
                                   "source expression failed to match any pattern"
                                   #{tmp\ 1989}#)))
                             ($sc-dispatch
                               #{tmp\ 1989}#
                               '(any each-any any . each-any))))
                          #{e\ 1954}#)
                         (if (memv #{type\ 1952}#
                                   '(define-syntax-form))
                           (let ((#{n\ 2033}#
                                   (#{id-var-name\ 723}#
                                     #{value\ 1953}#
                                     #{w\ 1955}#))
                                 (#{r\ 2034}#
                                   (#{macros-only-env\ 658}# #{r\ 1927}#)))
                             (if (memv #{m\ 1929}# (quote (c)))
                               (if (memq (quote compile) #{esew\ 1930}#)
                                 (let ((#{e\ 2037}#
                                         (#{chi-install-global\ 743}#
                                           #{n\ 2033}#
                                           (#{chi\ 751}#
                                             #{e\ 1954}#
                                             #{r\ 2034}#
                                             #{w\ 1955}#
                                             #{mod\ 1957}#))))
                                   (begin
                                     (#{top-level-eval-hook\ 575}#
                                       #{e\ 2037}#
                                       #{mod\ 1957}#)
                                     (if (memq (quote load) #{esew\ 1930}#)
                                       #{e\ 2037}#
                                       (#{chi-void\ 765}#))))
                                 (if (memq (quote load) #{esew\ 1930}#)
                                   (#{chi-install-global\ 743}#
                                     #{n\ 2033}#
                                     (#{chi\ 751}#
                                       #{e\ 1954}#
                                       #{r\ 2034}#
                                       #{w\ 1955}#
                                       #{mod\ 1957}#))
                                   (#{chi-void\ 765}#)))
                               (if (memv #{m\ 1929}# (quote (c&e)))
                                 (let ((#{e\ 2040}#
                                         (#{chi-install-global\ 743}#
                                           #{n\ 2033}#
                                           (#{chi\ 751}#
                                             #{e\ 1954}#
                                             #{r\ 2034}#
                                             #{w\ 1955}#
                                             #{mod\ 1957}#))))
                                   (begin
                                     (#{top-level-eval-hook\ 575}#
                                       #{e\ 2040}#
                                       #{mod\ 1957}#)
                                     #{e\ 2040}#))
                                 (begin
                                   (if (memq (quote eval) #{esew\ 1930}#)
                                     (#{top-level-eval-hook\ 575}#
                                       (#{chi-install-global\ 743}#
                                         #{n\ 2033}#
                                         (#{chi\ 751}#
                                           #{e\ 1954}#
                                           #{r\ 2034}#
                                           #{w\ 1955}#
                                           #{mod\ 1957}#))
                                       #{mod\ 1957}#))
                                   (#{chi-void\ 765}#)))))
                           (if (memv #{type\ 1952}# (quote (define-form)))
                             (let ((#{n\ 2045}#
                                     (#{id-var-name\ 723}#
                                       #{value\ 1953}#
                                       #{w\ 1955}#)))
                               (let ((#{type\ 2047}#
                                       (#{binding-type\ 649}#
                                         (#{lookup\ 660}#
                                           #{n\ 2045}#
                                           #{r\ 1927}#
                                           #{mod\ 1957}#))))
                                 (if (memv #{type\ 2047}#
                                           '(global core macro module-ref))
                                   (begin
                                     (if (if (memq #{m\ 1929}# (quote (c c&e)))
                                           (if (not (module-local-variable
                                                      (current-module)
                                                      #{n\ 2045}#))
                                             (current-module)
                                             #f)
                                           #f)
                                       (let ((#{old\ 2053}#
                                               (module-variable
                                                 (current-module)
                                                 #{n\ 2045}#)))
                                         (module-define!
                                           (current-module)
                                           #{n\ 2045}#
                                           (if (variable? #{old\ 2053}#)
                                             (variable-ref #{old\ 2053}#)
                                             #f))))
                                     (let ((#{x\ 2056}#
                                             (#{build-global-definition\ 606}#
                                               #{s\ 1956}#
                                               #{n\ 2045}#
                                               (#{chi\ 751}#
                                                 #{e\ 1954}#
                                                 #{r\ 1927}#
                                                 #{w\ 1955}#
                                                 #{mod\ 1957}#))))
                                       (begin
                                         (if (eq? #{m\ 1929}# (quote c&e))
                                           (#{top-level-eval-hook\ 575}#
                                             #{x\ 2056}#
                                             #{mod\ 1957}#))
                                         #{x\ 2056}#)))
                                   (if (memv #{type\ 2047}#
                                             '(displaced-lexical))
                                     (syntax-violation
                                       #f
                                       "identifier out of context"
                                       #{e\ 1954}#
                                       (#{wrap\ 735}#
                                         #{value\ 1953}#
                                         #{w\ 1955}#
                                         #{mod\ 1957}#))
                                     (syntax-violation
                                       #f
                                       "cannot define keyword at top level"
                                       #{e\ 1954}#
                                       (#{wrap\ 735}#
                                         #{value\ 1953}#
                                         #{w\ 1955}#
                                         #{mod\ 1957}#))))))
                             (let ((#{x\ 2062}#
                                     (#{chi-expr\ 753}#
                                       #{type\ 1952}#
                                       #{value\ 1953}#
                                       #{e\ 1954}#
                                       #{r\ 1927}#
                                       #{w\ 1955}#
                                       #{s\ 1956}#
                                       #{mod\ 1957}#)))
                               (begin
                                 (if (eq? #{m\ 1929}# (quote c&e))
                                   (#{top-level-eval-hook\ 575}#
                                     #{x\ 2062}#
                                     #{mod\ 1957}#))
                                 #{x\ 2062}#)))))))))))
           (#{syntax-type\ 747}#
             (lambda (#{e\ 2063}#
                      #{r\ 2064}#
                      #{w\ 2065}#
                      #{s\ 2066}#
                      #{rib\ 2067}#
                      #{mod\ 2068}#
                      #{for-car?\ 2069}#)
               (if (symbol? #{e\ 2063}#)
                 (let ((#{n\ 2081}#
                         (#{id-var-name\ 723}# #{e\ 2063}# #{w\ 2065}#)))
                   (let ((#{b\ 2083}#
                           (#{lookup\ 660}#
                             #{n\ 2081}#
                             #{r\ 2064}#
                             #{mod\ 2068}#)))
                     (let ((#{type\ 2085}#
                             (#{binding-type\ 649}# #{b\ 2083}#)))
                       (if (memv #{type\ 2085}# (quote (lexical)))
                         (values
                           #{type\ 2085}#
                           (#{binding-value\ 651}# #{b\ 2083}#)
                           #{e\ 2063}#
                           #{w\ 2065}#
                           #{s\ 2066}#
                           #{mod\ 2068}#)
                         (if (memv #{type\ 2085}# (quote (global)))
                           (values
                             #{type\ 2085}#
                             #{n\ 2081}#
                             #{e\ 2063}#
                             #{w\ 2065}#
                             #{s\ 2066}#
                             #{mod\ 2068}#)
                           (if (memv #{type\ 2085}# (quote (macro)))
                             (if #{for-car?\ 2069}#
                               (values
                                 #{type\ 2085}#
                                 (#{binding-value\ 651}# #{b\ 2083}#)
                                 #{e\ 2063}#
                                 #{w\ 2065}#
                                 #{s\ 2066}#
                                 #{mod\ 2068}#)
                               (#{syntax-type\ 747}#
                                 (#{chi-macro\ 757}#
                                   (#{binding-value\ 651}# #{b\ 2083}#)
                                   #{e\ 2063}#
                                   #{r\ 2064}#
                                   #{w\ 2065}#
                                   #{rib\ 2067}#
                                   #{mod\ 2068}#)
                                 #{r\ 2064}#
                                 '(())
                                 #{s\ 2066}#
                                 #{rib\ 2067}#
                                 #{mod\ 2068}#
                                 #f))
                             (values
                               #{type\ 2085}#
                               (#{binding-value\ 651}# #{b\ 2083}#)
                               #{e\ 2063}#
                               #{w\ 2065}#
                               #{s\ 2066}#
                               #{mod\ 2068}#)))))))
                 (if (pair? #{e\ 2063}#)
                   (let ((#{first\ 2094}# (car #{e\ 2063}#)))
                     (call-with-values
                       (lambda ()
                         (#{syntax-type\ 747}#
                           #{first\ 2094}#
                           #{r\ 2064}#
                           #{w\ 2065}#
                           #{s\ 2066}#
                           #{rib\ 2067}#
                           #{mod\ 2068}#
                           #t))
                       (lambda (#{ftype\ 2095}#
                                #{fval\ 2096}#
                                #{fe\ 2097}#
                                #{fw\ 2098}#
                                #{fs\ 2099}#
                                #{fmod\ 2100}#)
                         (if (memv #{ftype\ 2095}# (quote (lexical)))
                           (values
                             'lexical-call
                             #{fval\ 2096}#
                             #{e\ 2063}#
                             #{w\ 2065}#
                             #{s\ 2066}#
                             #{mod\ 2068}#)
                           (if (memv #{ftype\ 2095}# (quote (global)))
                             (values
                               'global-call
                               (#{make-syntax-object\ 628}#
                                 #{fval\ 2096}#
                                 #{w\ 2065}#
                                 #{fmod\ 2100}#)
                               #{e\ 2063}#
                               #{w\ 2065}#
                               #{s\ 2066}#
                               #{mod\ 2068}#)
                             (if (memv #{ftype\ 2095}# (quote (macro)))
                               (#{syntax-type\ 747}#
                                 (#{chi-macro\ 757}#
                                   #{fval\ 2096}#
                                   #{e\ 2063}#
                                   #{r\ 2064}#
                                   #{w\ 2065}#
                                   #{rib\ 2067}#
                                   #{mod\ 2068}#)
                                 #{r\ 2064}#
                                 '(())
                                 #{s\ 2066}#
                                 #{rib\ 2067}#
                                 #{mod\ 2068}#
                                 #{for-car?\ 2069}#)
                               (if (memv #{ftype\ 2095}# (quote (module-ref)))
                                 (call-with-values
                                   (lambda ()
                                     (#{fval\ 2096}#
                                       #{e\ 2063}#
                                       #{r\ 2064}#
                                       #{w\ 2065}#))
                                   (lambda (#{e\ 2112}#
                                            #{r\ 2113}#
                                            #{w\ 2114}#
                                            #{s\ 2115}#
                                            #{mod\ 2116}#)
                                     (#{syntax-type\ 747}#
                                       #{e\ 2112}#
                                       #{r\ 2113}#
                                       #{w\ 2114}#
                                       #{s\ 2115}#
                                       #{rib\ 2067}#
                                       #{mod\ 2116}#
                                       #{for-car?\ 2069}#)))
                                 (if (memv #{ftype\ 2095}# (quote (core)))
                                   (values
                                     'core-form
                                     #{fval\ 2096}#
                                     #{e\ 2063}#
                                     #{w\ 2065}#
                                     #{s\ 2066}#
                                     #{mod\ 2068}#)
                                   (if (memv #{ftype\ 2095}#
                                             '(local-syntax))
                                     (values
                                       'local-syntax-form
                                       #{fval\ 2096}#
                                       #{e\ 2063}#
                                       #{w\ 2065}#
                                       #{s\ 2066}#
                                       #{mod\ 2068}#)
                                     (if (memv #{ftype\ 2095}# (quote (begin)))
                                       (values
                                         'begin-form
                                         #f
                                         #{e\ 2063}#
                                         #{w\ 2065}#
                                         #{s\ 2066}#
                                         #{mod\ 2068}#)
                                       (if (memv #{ftype\ 2095}#
                                                 '(eval-when))
                                         (values
                                           'eval-when-form
                                           #f
                                           #{e\ 2063}#
                                           #{w\ 2065}#
                                           #{s\ 2066}#
                                           #{mod\ 2068}#)
                                         (if (memv #{ftype\ 2095}#
                                                   '(define))
                                           ((lambda (#{tmp\ 2127}#)
                                              ((lambda (#{tmp\ 2128}#)
                                                 (if (if #{tmp\ 2128}#
                                                       (apply (lambda (#{_\ 2132}#
                                                                       #{name\ 2133}#
                                                                       #{val\ 2134}#)
                                                                (#{id?\ 666}#
                                                                  #{name\ 2133}#))
                                                              #{tmp\ 2128}#)
                                                       #f)
                                                   (apply (lambda (#{_\ 2138}#
                                                                   #{name\ 2139}#
                                                                   #{val\ 2140}#)
                                                            (values
                                                              'define-form
                                                              #{name\ 2139}#
                                                              #{val\ 2140}#
                                                              #{w\ 2065}#
                                                              #{s\ 2066}#
                                                              #{mod\ 2068}#))
                                                          #{tmp\ 2128}#)
                                                   ((lambda (#{tmp\ 2141}#)
                                                      (if (if #{tmp\ 2141}#
                                                            (apply (lambda (#{_\ 2147}#
                                                                            #{name\ 2148}#
                                                                            #{args\ 2149}#
                                                                            #{e1\ 2150}#
                                                                            #{e2\ 2151}#)
                                                                     (if (#{id?\ 666}#
                                                                           #{name\ 2148}#)
                                                                       (#{valid-bound-ids?\ 729}#
                                                                         (#{lambda-var-list\ 781}#
                                                                           #{args\ 2149}#))
                                                                       #f))
                                                                   #{tmp\ 2141}#)
                                                            #f)
                                                        (apply (lambda (#{_\ 2159}#
                                                                        #{name\ 2160}#
                                                                        #{args\ 2161}#
                                                                        #{e1\ 2162}#
                                                                        #{e2\ 2163}#)
                                                                 (values
                                                                   'define-form
                                                                   (#{wrap\ 735}#
                                                                     #{name\ 2160}#
                                                                     #{w\ 2065}#
                                                                     #{mod\ 2068}#)
                                                                   (#{decorate-source\ 584}#
                                                                     (cons '#(syntax-object
                                                                              lambda
                                                                              ((top)
                                                                               #(ribcage
                                                                                 #(_
                                                                                   name
                                                                                   args
                                                                                   e1
                                                                                   e2)
                                                                                 #((top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top))
                                                                                 #("i2154"
                                                                                   "i2155"
                                                                                   "i2156"
                                                                                   "i2157"
                                                                                   "i2158"))
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 #(ftype
                                                                                   fval
                                                                                   fe
                                                                                   fw
                                                                                   fs
                                                                                   fmod)
                                                                                 #((top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top))
                                                                                 #("i2101"
                                                                                   "i2102"
                                                                                   "i2103"
                                                                                   "i2104"
                                                                                   "i2105"
                                                                                   "i2106"))
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 #(first)
                                                                                 #((top))
                                                                                 #("i2093"))
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 #(e
                                                                                   r
                                                                                   w
                                                                                   s
                                                                                   rib
                                                                                   mod
                                                                                   for-car?)
                                                                                 #((top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top))
                                                                                 #("i2070"
                                                                                   "i2071"
                                                                                   "i2072"
                                                                                   "i2073"
                                                                                   "i2074"
                                                                                   "i2075"
                                                                                   "i2076"))
                                                                               #(ribcage
                                                                                 (lambda-var-list
                                                                                   gen-var
                                                                                   strip
                                                                                   chi-lambda-case
                                                                                   lambda*-formals
                                                                                   chi-simple-lambda
                                                                                   lambda-formals
                                                                                   ellipsis?
                                                                                   chi-void
                                                                                   eval-local-transformer
                                                                                   chi-local-syntax
                                                                                   chi-body
                                                                                   chi-macro
                                                                                   chi-application
                                                                                   chi-expr
                                                                                   chi
                                                                                   chi-top
                                                                                   syntax-type
                                                                                   chi-when-list
                                                                                   chi-install-global
                                                                                   chi-top-sequence
                                                                                   chi-sequence
                                                                                   source-wrap
                                                                                   wrap
                                                                                   bound-id-member?
                                                                                   distinct-bound-ids?
                                                                                   valid-bound-ids?
                                                                                   bound-id=?
                                                                                   free-id=?
                                                                                   id-var-name
                                                                                   same-marks?
                                                                                   join-marks
                                                                                   join-wraps
                                                                                   smart-append
                                                                                   make-binding-wrap
                                                                                   extend-ribcage!
                                                                                   make-empty-ribcage
                                                                                   new-mark
                                                                                   anti-mark
                                                                                   the-anti-mark
                                                                                   top-marked?
                                                                                   top-wrap
                                                                                   empty-wrap
                                                                                   set-ribcage-labels!
                                                                                   set-ribcage-marks!
                                                                                   set-ribcage-symnames!
                                                                                   ribcage-labels
                                                                                   ribcage-marks
                                                                                   ribcage-symnames
                                                                                   ribcage?
                                                                                   make-ribcage
                                                                                   gen-labels
                                                                                   gen-label
                                                                                   make-rename
                                                                                   rename-marks
                                                                                   rename-new
                                                                                   rename-old
                                                                                   subst-rename?
                                                                                   wrap-subst
                                                                                   wrap-marks
                                                                                   make-wrap
                                                                                   id-sym-name&marks
                                                                                   id-sym-name
                                                                                   id?
                                                                                   nonsymbol-id?
                                                                                   global-extend
                                                                                   lookup
                                                                                   macros-only-env
                                                                                   extend-var-env
                                                                                   extend-env
                                                                                   null-env
                                                                                   binding-value
                                                                                   binding-type
                                                                                   make-binding
                                                                                   arg-check
                                                                                   source-annotation
                                                                                   no-source
                                                                                   set-syntax-object-module!
                                                                                   set-syntax-object-wrap!
                                                                                   set-syntax-object-expression!
                                                                                   syntax-object-module
                                                                                   syntax-object-wrap
                                                                                   syntax-object-expression
                                                                                   syntax-object?
                                                                                   make-syntax-object
                                                                                   build-lexical-var
                                                                                   build-letrec
                                                                                   build-named-let
                                                                                   build-let
                                                                                   build-sequence
                                                                                   build-data
                                                                                   build-primref
                                                                                   build-lambda-case
                                                                                   build-case-lambda
                                                                                   build-simple-lambda
                                                                                   build-global-definition
                                                                                   maybe-name-value!
                                                                                   build-global-assignment
                                                                                   build-global-reference
                                                                                   analyze-variable
                                                                                   build-lexical-assignment
                                                                                   build-lexical-reference
                                                                                   build-dynlet
                                                                                   build-conditional
                                                                                   build-application
                                                                                   build-void
                                                                                   decorate-source
                                                                                   get-global-definition-hook
                                                                                   put-global-definition-hook
                                                                                   gensym-hook
                                                                                   local-eval-hook
                                                                                   top-level-eval-hook
                                                                                   fx<
                                                                                   fx=
                                                                                   fx-
                                                                                   fx+
                                                                                   *mode*)
                                                                                 ((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                 ("i780"
                                                                                  "i778"
                                                                                  "i776"
                                                                                  "i774"
                                                                                  "i772"
                                                                                  "i770"
                                                                                  "i768"
                                                                                  "i766"
                                                                                  "i764"
                                                                                  "i762"
                                                                                  "i760"
                                                                                  "i758"
                                                                                  "i756"
                                                                                  "i754"
                                                                                  "i752"
                                                                                  "i750"
                                                                                  "i748"
                                                                                  "i746"
                                                                                  "i744"
                                                                                  "i742"
                                                                                  "i740"
                                                                                  "i738"
                                                                                  "i736"
                                                                                  "i734"
                                                                                  "i732"
                                                                                  "i730"
                                                                                  "i728"
                                                                                  "i726"
                                                                                  "i724"
                                                                                  "i722"
                                                                                  "i720"
                                                                                  "i718"
                                                                                  "i716"
                                                                                  "i714"
                                                                                  "i712"
                                                                                  "i710"
                                                                                  "i709"
                                                                                  "i708"
                                                                                  "i706"
                                                                                  "i705"
                                                                                  "i704"
                                                                                  "i703"
                                                                                  "i702"
                                                                                  "i700"
                                                                                  "i698"
                                                                                  "i696"
                                                                                  "i694"
                                                                                  "i692"
                                                                                  "i690"
                                                                                  "i688"
                                                                                  "i686"
                                                                                  "i683"
                                                                                  "i681"
                                                                                  "i680"
                                                                                  "i679"
                                                                                  "i678"
                                                                                  "i677"
                                                                                  "i676"
                                                                                  "i674"
                                                                                  "i672"
                                                                                  "i670"
                                                                                  "i668"
                                                                                  "i667"
                                                                                  "i665"
                                                                                  "i663"
                                                                                  "i661"
                                                                                  "i659"
                                                                                  "i657"
                                                                                  "i655"
                                                                                  "i653"
                                                                                  "i652"
                                                                                  "i650"
                                                                                  "i648"
                                                                                  "i647"
                                                                                  "i646"
                                                                                  "i644"
                                                                                  "i643"
                                                                                  "i641"
                                                                                  "i639"
                                                                                  "i637"
                                                                                  "i635"
                                                                                  "i633"
                                                                                  "i631"
                                                                                  "i629"
                                                                                  "i627"
                                                                                  "i625"
                                                                                  "i623"
                                                                                  "i621"
                                                                                  "i619"
                                                                                  "i617"
                                                                                  "i615"
                                                                                  "i613"
                                                                                  "i611"
                                                                                  "i609"
                                                                                  "i607"
                                                                                  "i605"
                                                                                  "i603"
                                                                                  "i601"
                                                                                  "i599"
                                                                                  "i597"
                                                                                  "i595"
                                                                                  "i593"
                                                                                  "i591"
                                                                                  "i589"
                                                                                  "i587"
                                                                                  "i585"
                                                                                  "i583"
                                                                                  "i581"
                                                                                  "i579"
                                                                                  "i578"
                                                                                  "i576"
                                                                                  "i574"
                                                                                  "i572"
                                                                                  "i570"
                                                                                  "i568"
                                                                                  "i566"
                                                                                  "i564"))
                                                                               #(ribcage
                                                                                 (define-structure
                                                                                   and-map*)
                                                                                 ((top)
                                                                                  (top))
                                                                                 ("i467"
                                                                                  "i465")))
                                                                              (hygiene
                                                                                guile))
                                                                           (#{wrap\ 735}#
                                                                             (cons #{args\ 2161}#
                                                                                   (cons #{e1\ 2162}#
                                                                                         #{e2\ 2163}#))
                                                                             #{w\ 2065}#
                                                                             #{mod\ 2068}#))
                                                                     #{s\ 2066}#)
                                                                   '(())
                                                                   #{s\ 2066}#
                                                                   #{mod\ 2068}#))
                                                               #{tmp\ 2141}#)
                                                        ((lambda (#{tmp\ 2166}#)
                                                           (if (if #{tmp\ 2166}#
                                                                 (apply (lambda (#{_\ 2169}#
                                                                                 #{name\ 2170}#)
                                                                          (#{id?\ 666}#
                                                                            #{name\ 2170}#))
                                                                        #{tmp\ 2166}#)
                                                                 #f)
                                                             (apply (lambda (#{_\ 2173}#
                                                                             #{name\ 2174}#)
                                                                      (values
                                                                        'define-form
                                                                        (#{wrap\ 735}#
                                                                          #{name\ 2174}#
                                                                          #{w\ 2065}#
                                                                          #{mod\ 2068}#)
                                                                        '(#(syntax-object
                                                                            if
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(_
                                                                                 name)
                                                                               #((top)
                                                                                 (top))
                                                                               #("i2171"
                                                                                 "i2172"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(ftype
                                                                                 fval
                                                                                 fe
                                                                                 fw
                                                                                 fs
                                                                                 fmod)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i2101"
                                                                                 "i2102"
                                                                                 "i2103"
                                                                                 "i2104"
                                                                                 "i2105"
                                                                                 "i2106"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(first)
                                                                               #((top))
                                                                               #("i2093"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(e
                                                                                 r
                                                                                 w
                                                                                 s
                                                                                 rib
                                                                                 mod
                                                                                 for-car?)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i2070"
                                                                                 "i2071"
                                                                                 "i2072"
                                                                                 "i2073"
                                                                                 "i2074"
                                                                                 "i2075"
                                                                                 "i2076"))
                                                                             #(ribcage
                                                                               (lambda-var-list
                                                                                 gen-var
                                                                                 strip
                                                                                 chi-lambda-case
                                                                                 lambda*-formals
                                                                                 chi-simple-lambda
                                                                                 lambda-formals
                                                                                 ellipsis?
                                                                                 chi-void
                                                                                 eval-local-transformer
                                                                                 chi-local-syntax
                                                                                 chi-body
                                                                                 chi-macro
                                                                                 chi-application
                                                                                 chi-expr
                                                                                 chi
                                                                                 chi-top
                                                                                 syntax-type
                                                                                 chi-when-list
                                                                                 chi-install-global
                                                                                 chi-top-sequence
                                                                                 chi-sequence
                                                                                 source-wrap
                                                                                 wrap
                                                                                 bound-id-member?
                                                                                 distinct-bound-ids?
                                                                                 valid-bound-ids?
                                                                                 bound-id=?
                                                                                 free-id=?
                                                                                 id-var-name
                                                                                 same-marks?
                                                                                 join-marks
                                                                                 join-wraps
                                                                                 smart-append
                                                                                 make-binding-wrap
                                                                                 extend-ribcage!
                                                                                 make-empty-ribcage
                                                                                 new-mark
                                                                                 anti-mark
                                                                                 the-anti-mark
                                                                                 top-marked?
                                                                                 top-wrap
                                                                                 empty-wrap
                                                                                 set-ribcage-labels!
                                                                                 set-ribcage-marks!
                                                                                 set-ribcage-symnames!
                                                                                 ribcage-labels
                                                                                 ribcage-marks
                                                                                 ribcage-symnames
                                                                                 ribcage?
                                                                                 make-ribcage
                                                                                 gen-labels
                                                                                 gen-label
                                                                                 make-rename
                                                                                 rename-marks
                                                                                 rename-new
                                                                                 rename-old
                                                                                 subst-rename?
                                                                                 wrap-subst
                                                                                 wrap-marks
                                                                                 make-wrap
                                                                                 id-sym-name&marks
                                                                                 id-sym-name
                                                                                 id?
                                                                                 nonsymbol-id?
                                                                                 global-extend
                                                                                 lookup
                                                                                 macros-only-env
                                                                                 extend-var-env
                                                                                 extend-env
                                                                                 null-env
                                                                                 binding-value
                                                                                 binding-type
                                                                                 make-binding
                                                                                 arg-check
                                                                                 source-annotation
                                                                                 no-source
                                                                                 set-syntax-object-module!
                                                                                 set-syntax-object-wrap!
                                                                                 set-syntax-object-expression!
                                                                                 syntax-object-module
                                                                                 syntax-object-wrap
                                                                                 syntax-object-expression
                                                                                 syntax-object?
                                                                                 make-syntax-object
                                                                                 build-lexical-var
                                                                                 build-letrec
                                                                                 build-named-let
                                                                                 build-let
                                                                                 build-sequence
                                                                                 build-data
                                                                                 build-primref
                                                                                 build-lambda-case
                                                                                 build-case-lambda
                                                                                 build-simple-lambda
                                                                                 build-global-definition
                                                                                 maybe-name-value!
                                                                                 build-global-assignment
                                                                                 build-global-reference
                                                                                 analyze-variable
                                                                                 build-lexical-assignment
                                                                                 build-lexical-reference
                                                                                 build-dynlet
                                                                                 build-conditional
                                                                                 build-application
                                                                                 build-void
                                                                                 decorate-source
                                                                                 get-global-definition-hook
                                                                                 put-global-definition-hook
                                                                                 gensym-hook
                                                                                 local-eval-hook
                                                                                 top-level-eval-hook
                                                                                 fx<
                                                                                 fx=
                                                                                 fx-
                                                                                 fx+
                                                                                 *mode*)
                                                                               ((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                               ("i780"
                                                                                "i778"
                                                                                "i776"
                                                                                "i774"
                                                                                "i772"
                                                                                "i770"
                                                                                "i768"
                                                                                "i766"
                                                                                "i764"
                                                                                "i762"
                                                                                "i760"
                                                                                "i758"
                                                                                "i756"
                                                                                "i754"
                                                                                "i752"
                                                                                "i750"
                                                                                "i748"
                                                                                "i746"
                                                                                "i744"
                                                                                "i742"
                                                                                "i740"
                                                                                "i738"
                                                                                "i736"
                                                                                "i734"
                                                                                "i732"
                                                                                "i730"
                                                                                "i728"
                                                                                "i726"
                                                                                "i724"
                                                                                "i722"
                                                                                "i720"
                                                                                "i718"
                                                                                "i716"
                                                                                "i714"
                                                                                "i712"
                                                                                "i710"
                                                                                "i709"
                                                                                "i708"
                                                                                "i706"
                                                                                "i705"
                                                                                "i704"
                                                                                "i703"
                                                                                "i702"
                                                                                "i700"
                                                                                "i698"
                                                                                "i696"
                                                                                "i694"
                                                                                "i692"
                                                                                "i690"
                                                                                "i688"
                                                                                "i686"
                                                                                "i683"
                                                                                "i681"
                                                                                "i680"
                                                                                "i679"
                                                                                "i678"
                                                                                "i677"
                                                                                "i676"
                                                                                "i674"
                                                                                "i672"
                                                                                "i670"
                                                                                "i668"
                                                                                "i667"
                                                                                "i665"
                                                                                "i663"
                                                                                "i661"
                                                                                "i659"
                                                                                "i657"
                                                                                "i655"
                                                                                "i653"
                                                                                "i652"
                                                                                "i650"
                                                                                "i648"
                                                                                "i647"
                                                                                "i646"
                                                                                "i644"
                                                                                "i643"
                                                                                "i641"
                                                                                "i639"
                                                                                "i637"
                                                                                "i635"
                                                                                "i633"
                                                                                "i631"
                                                                                "i629"
                                                                                "i627"
                                                                                "i625"
                                                                                "i623"
                                                                                "i621"
                                                                                "i619"
                                                                                "i617"
                                                                                "i615"
                                                                                "i613"
                                                                                "i611"
                                                                                "i609"
                                                                                "i607"
                                                                                "i605"
                                                                                "i603"
                                                                                "i601"
                                                                                "i599"
                                                                                "i597"
                                                                                "i595"
                                                                                "i593"
                                                                                "i591"
                                                                                "i589"
                                                                                "i587"
                                                                                "i585"
                                                                                "i583"
                                                                                "i581"
                                                                                "i579"
                                                                                "i578"
                                                                                "i576"
                                                                                "i574"
                                                                                "i572"
                                                                                "i570"
                                                                                "i568"
                                                                                "i566"
                                                                                "i564"))
                                                                             #(ribcage
                                                                               (define-structure
                                                                                 and-map*)
                                                                               ((top)
                                                                                (top))
                                                                               ("i467"
                                                                                "i465")))
                                                                            (hygiene
                                                                              guile))
                                                                          #(syntax-object
                                                                            #f
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(_
                                                                                 name)
                                                                               #((top)
                                                                                 (top))
                                                                               #("i2171"
                                                                                 "i2172"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(ftype
                                                                                 fval
                                                                                 fe
                                                                                 fw
                                                                                 fs
                                                                                 fmod)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i2101"
                                                                                 "i2102"
                                                                                 "i2103"
                                                                                 "i2104"
                                                                                 "i2105"
                                                                                 "i2106"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(first)
                                                                               #((top))
                                                                               #("i2093"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(e
                                                                                 r
                                                                                 w
                                                                                 s
                                                                                 rib
                                                                                 mod
                                                                                 for-car?)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i2070"
                                                                                 "i2071"
                                                                                 "i2072"
                                                                                 "i2073"
                                                                                 "i2074"
                                                                                 "i2075"
                                                                                 "i2076"))
                                                                             #(ribcage
                                                                               (lambda-var-list
                                                                                 gen-var
                                                                                 strip
                                                                                 chi-lambda-case
                                                                                 lambda*-formals
                                                                                 chi-simple-lambda
                                                                                 lambda-formals
                                                                                 ellipsis?
                                                                                 chi-void
                                                                                 eval-local-transformer
                                                                                 chi-local-syntax
                                                                                 chi-body
                                                                                 chi-macro
                                                                                 chi-application
                                                                                 chi-expr
                                                                                 chi
                                                                                 chi-top
                                                                                 syntax-type
                                                                                 chi-when-list
                                                                                 chi-install-global
                                                                                 chi-top-sequence
                                                                                 chi-sequence
                                                                                 source-wrap
                                                                                 wrap
                                                                                 bound-id-member?
                                                                                 distinct-bound-ids?
                                                                                 valid-bound-ids?
                                                                                 bound-id=?
                                                                                 free-id=?
                                                                                 id-var-name
                                                                                 same-marks?
                                                                                 join-marks
                                                                                 join-wraps
                                                                                 smart-append
                                                                                 make-binding-wrap
                                                                                 extend-ribcage!
                                                                                 make-empty-ribcage
                                                                                 new-mark
                                                                                 anti-mark
                                                                                 the-anti-mark
                                                                                 top-marked?
                                                                                 top-wrap
                                                                                 empty-wrap
                                                                                 set-ribcage-labels!
                                                                                 set-ribcage-marks!
                                                                                 set-ribcage-symnames!
                                                                                 ribcage-labels
                                                                                 ribcage-marks
                                                                                 ribcage-symnames
                                                                                 ribcage?
                                                                                 make-ribcage
                                                                                 gen-labels
                                                                                 gen-label
                                                                                 make-rename
                                                                                 rename-marks
                                                                                 rename-new
                                                                                 rename-old
                                                                                 subst-rename?
                                                                                 wrap-subst
                                                                                 wrap-marks
                                                                                 make-wrap
                                                                                 id-sym-name&marks
                                                                                 id-sym-name
                                                                                 id?
                                                                                 nonsymbol-id?
                                                                                 global-extend
                                                                                 lookup
                                                                                 macros-only-env
                                                                                 extend-var-env
                                                                                 extend-env
                                                                                 null-env
                                                                                 binding-value
                                                                                 binding-type
                                                                                 make-binding
                                                                                 arg-check
                                                                                 source-annotation
                                                                                 no-source
                                                                                 set-syntax-object-module!
                                                                                 set-syntax-object-wrap!
                                                                                 set-syntax-object-expression!
                                                                                 syntax-object-module
                                                                                 syntax-object-wrap
                                                                                 syntax-object-expression
                                                                                 syntax-object?
                                                                                 make-syntax-object
                                                                                 build-lexical-var
                                                                                 build-letrec
                                                                                 build-named-let
                                                                                 build-let
                                                                                 build-sequence
                                                                                 build-data
                                                                                 build-primref
                                                                                 build-lambda-case
                                                                                 build-case-lambda
                                                                                 build-simple-lambda
                                                                                 build-global-definition
                                                                                 maybe-name-value!
                                                                                 build-global-assignment
                                                                                 build-global-reference
                                                                                 analyze-variable
                                                                                 build-lexical-assignment
                                                                                 build-lexical-reference
                                                                                 build-dynlet
                                                                                 build-conditional
                                                                                 build-application
                                                                                 build-void
                                                                                 decorate-source
                                                                                 get-global-definition-hook
                                                                                 put-global-definition-hook
                                                                                 gensym-hook
                                                                                 local-eval-hook
                                                                                 top-level-eval-hook
                                                                                 fx<
                                                                                 fx=
                                                                                 fx-
                                                                                 fx+
                                                                                 *mode*)
                                                                               ((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                               ("i780"
                                                                                "i778"
                                                                                "i776"
                                                                                "i774"
                                                                                "i772"
                                                                                "i770"
                                                                                "i768"
                                                                                "i766"
                                                                                "i764"
                                                                                "i762"
                                                                                "i760"
                                                                                "i758"
                                                                                "i756"
                                                                                "i754"
                                                                                "i752"
                                                                                "i750"
                                                                                "i748"
                                                                                "i746"
                                                                                "i744"
                                                                                "i742"
                                                                                "i740"
                                                                                "i738"
                                                                                "i736"
                                                                                "i734"
                                                                                "i732"
                                                                                "i730"
                                                                                "i728"
                                                                                "i726"
                                                                                "i724"
                                                                                "i722"
                                                                                "i720"
                                                                                "i718"
                                                                                "i716"
                                                                                "i714"
                                                                                "i712"
                                                                                "i710"
                                                                                "i709"
                                                                                "i708"
                                                                                "i706"
                                                                                "i705"
                                                                                "i704"
                                                                                "i703"
                                                                                "i702"
                                                                                "i700"
                                                                                "i698"
                                                                                "i696"
                                                                                "i694"
                                                                                "i692"
                                                                                "i690"
                                                                                "i688"
                                                                                "i686"
                                                                                "i683"
                                                                                "i681"
                                                                                "i680"
                                                                                "i679"
                                                                                "i678"
                                                                                "i677"
                                                                                "i676"
                                                                                "i674"
                                                                                "i672"
                                                                                "i670"
                                                                                "i668"
                                                                                "i667"
                                                                                "i665"
                                                                                "i663"
                                                                                "i661"
                                                                                "i659"
                                                                                "i657"
                                                                                "i655"
                                                                                "i653"
                                                                                "i652"
                                                                                "i650"
                                                                                "i648"
                                                                                "i647"
                                                                                "i646"
                                                                                "i644"
                                                                                "i643"
                                                                                "i641"
                                                                                "i639"
                                                                                "i637"
                                                                                "i635"
                                                                                "i633"
                                                                                "i631"
                                                                                "i629"
                                                                                "i627"
                                                                                "i625"
                                                                                "i623"
                                                                                "i621"
                                                                                "i619"
                                                                                "i617"
                                                                                "i615"
                                                                                "i613"
                                                                                "i611"
                                                                                "i609"
                                                                                "i607"
                                                                                "i605"
                                                                                "i603"
                                                                                "i601"
                                                                                "i599"
                                                                                "i597"
                                                                                "i595"
                                                                                "i593"
                                                                                "i591"
                                                                                "i589"
                                                                                "i587"
                                                                                "i585"
                                                                                "i583"
                                                                                "i581"
                                                                                "i579"
                                                                                "i578"
                                                                                "i576"
                                                                                "i574"
                                                                                "i572"
                                                                                "i570"
                                                                                "i568"
                                                                                "i566"
                                                                                "i564"))
                                                                             #(ribcage
                                                                               (define-structure
                                                                                 and-map*)
                                                                               ((top)
                                                                                (top))
                                                                               ("i467"
                                                                                "i465")))
                                                                            (hygiene
                                                                              guile))
                                                                          #(syntax-object
                                                                            #f
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(_
                                                                                 name)
                                                                               #((top)
                                                                                 (top))
                                                                               #("i2171"
                                                                                 "i2172"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(ftype
                                                                                 fval
                                                                                 fe
                                                                                 fw
                                                                                 fs
                                                                                 fmod)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i2101"
                                                                                 "i2102"
                                                                                 "i2103"
                                                                                 "i2104"
                                                                                 "i2105"
                                                                                 "i2106"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(first)
                                                                               #((top))
                                                                               #("i2093"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(e
                                                                                 r
                                                                                 w
                                                                                 s
                                                                                 rib
                                                                                 mod
                                                                                 for-car?)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i2070"
                                                                                 "i2071"
                                                                                 "i2072"
                                                                                 "i2073"
                                                                                 "i2074"
                                                                                 "i2075"
                                                                                 "i2076"))
                                                                             #(ribcage
                                                                               (lambda-var-list
                                                                                 gen-var
                                                                                 strip
                                                                                 chi-lambda-case
                                                                                 lambda*-formals
                                                                                 chi-simple-lambda
                                                                                 lambda-formals
                                                                                 ellipsis?
                                                                                 chi-void
                                                                                 eval-local-transformer
                                                                                 chi-local-syntax
                                                                                 chi-body
                                                                                 chi-macro
                                                                                 chi-application
                                                                                 chi-expr
                                                                                 chi
                                                                                 chi-top
                                                                                 syntax-type
                                                                                 chi-when-list
                                                                                 chi-install-global
                                                                                 chi-top-sequence
                                                                                 chi-sequence
                                                                                 source-wrap
                                                                                 wrap
                                                                                 bound-id-member?
                                                                                 distinct-bound-ids?
                                                                                 valid-bound-ids?
                                                                                 bound-id=?
                                                                                 free-id=?
                                                                                 id-var-name
                                                                                 same-marks?
                                                                                 join-marks
                                                                                 join-wraps
                                                                                 smart-append
                                                                                 make-binding-wrap
                                                                                 extend-ribcage!
                                                                                 make-empty-ribcage
                                                                                 new-mark
                                                                                 anti-mark
                                                                                 the-anti-mark
                                                                                 top-marked?
                                                                                 top-wrap
                                                                                 empty-wrap
                                                                                 set-ribcage-labels!
                                                                                 set-ribcage-marks!
                                                                                 set-ribcage-symnames!
                                                                                 ribcage-labels
                                                                                 ribcage-marks
                                                                                 ribcage-symnames
                                                                                 ribcage?
                                                                                 make-ribcage
                                                                                 gen-labels
                                                                                 gen-label
                                                                                 make-rename
                                                                                 rename-marks
                                                                                 rename-new
                                                                                 rename-old
                                                                                 subst-rename?
                                                                                 wrap-subst
                                                                                 wrap-marks
                                                                                 make-wrap
                                                                                 id-sym-name&marks
                                                                                 id-sym-name
                                                                                 id?
                                                                                 nonsymbol-id?
                                                                                 global-extend
                                                                                 lookup
                                                                                 macros-only-env
                                                                                 extend-var-env
                                                                                 extend-env
                                                                                 null-env
                                                                                 binding-value
                                                                                 binding-type
                                                                                 make-binding
                                                                                 arg-check
                                                                                 source-annotation
                                                                                 no-source
                                                                                 set-syntax-object-module!
                                                                                 set-syntax-object-wrap!
                                                                                 set-syntax-object-expression!
                                                                                 syntax-object-module
                                                                                 syntax-object-wrap
                                                                                 syntax-object-expression
                                                                                 syntax-object?
                                                                                 make-syntax-object
                                                                                 build-lexical-var
                                                                                 build-letrec
                                                                                 build-named-let
                                                                                 build-let
                                                                                 build-sequence
                                                                                 build-data
                                                                                 build-primref
                                                                                 build-lambda-case
                                                                                 build-case-lambda
                                                                                 build-simple-lambda
                                                                                 build-global-definition
                                                                                 maybe-name-value!
                                                                                 build-global-assignment
                                                                                 build-global-reference
                                                                                 analyze-variable
                                                                                 build-lexical-assignment
                                                                                 build-lexical-reference
                                                                                 build-dynlet
                                                                                 build-conditional
                                                                                 build-application
                                                                                 build-void
                                                                                 decorate-source
                                                                                 get-global-definition-hook
                                                                                 put-global-definition-hook
                                                                                 gensym-hook
                                                                                 local-eval-hook
                                                                                 top-level-eval-hook
                                                                                 fx<
                                                                                 fx=
                                                                                 fx-
                                                                                 fx+
                                                                                 *mode*)
                                                                               ((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                               ("i780"
                                                                                "i778"
                                                                                "i776"
                                                                                "i774"
                                                                                "i772"
                                                                                "i770"
                                                                                "i768"
                                                                                "i766"
                                                                                "i764"
                                                                                "i762"
                                                                                "i760"
                                                                                "i758"
                                                                                "i756"
                                                                                "i754"
                                                                                "i752"
                                                                                "i750"
                                                                                "i748"
                                                                                "i746"
                                                                                "i744"
                                                                                "i742"
                                                                                "i740"
                                                                                "i738"
                                                                                "i736"
                                                                                "i734"
                                                                                "i732"
                                                                                "i730"
                                                                                "i728"
                                                                                "i726"
                                                                                "i724"
                                                                                "i722"
                                                                                "i720"
                                                                                "i718"
                                                                                "i716"
                                                                                "i714"
                                                                                "i712"
                                                                                "i710"
                                                                                "i709"
                                                                                "i708"
                                                                                "i706"
                                                                                "i705"
                                                                                "i704"
                                                                                "i703"
                                                                                "i702"
                                                                                "i700"
                                                                                "i698"
                                                                                "i696"
                                                                                "i694"
                                                                                "i692"
                                                                                "i690"
                                                                                "i688"
                                                                                "i686"
                                                                                "i683"
                                                                                "i681"
                                                                                "i680"
                                                                                "i679"
                                                                                "i678"
                                                                                "i677"
                                                                                "i676"
                                                                                "i674"
                                                                                "i672"
                                                                                "i670"
                                                                                "i668"
                                                                                "i667"
                                                                                "i665"
                                                                                "i663"
                                                                                "i661"
                                                                                "i659"
                                                                                "i657"
                                                                                "i655"
                                                                                "i653"
                                                                                "i652"
                                                                                "i650"
                                                                                "i648"
                                                                                "i647"
                                                                                "i646"
                                                                                "i644"
                                                                                "i643"
                                                                                "i641"
                                                                                "i639"
                                                                                "i637"
                                                                                "i635"
                                                                                "i633"
                                                                                "i631"
                                                                                "i629"
                                                                                "i627"
                                                                                "i625"
                                                                                "i623"
                                                                                "i621"
                                                                                "i619"
                                                                                "i617"
                                                                                "i615"
                                                                                "i613"
                                                                                "i611"
                                                                                "i609"
                                                                                "i607"
                                                                                "i605"
                                                                                "i603"
                                                                                "i601"
                                                                                "i599"
                                                                                "i597"
                                                                                "i595"
                                                                                "i593"
                                                                                "i591"
                                                                                "i589"
                                                                                "i587"
                                                                                "i585"
                                                                                "i583"
                                                                                "i581"
                                                                                "i579"
                                                                                "i578"
                                                                                "i576"
                                                                                "i574"
                                                                                "i572"
                                                                                "i570"
                                                                                "i568"
                                                                                "i566"
                                                                                "i564"))
                                                                             #(ribcage
                                                                               (define-structure
                                                                                 and-map*)
                                                                               ((top)
                                                                                (top))
                                                                               ("i467"
                                                                                "i465")))
                                                                            (hygiene
                                                                              guile)))
                                                                        '(())
                                                                        #{s\ 2066}#
                                                                        #{mod\ 2068}#))
                                                                    #{tmp\ 2166}#)
                                                             (syntax-violation
                                                               #f
                                                               "source expression failed to match any pattern"
                                                               #{tmp\ 2127}#)))
                                                         ($sc-dispatch
                                                           #{tmp\ 2127}#
                                                           '(any any)))))
                                                    ($sc-dispatch
                                                      #{tmp\ 2127}#
                                                      '(any (any . any)
                                                            any
                                                            .
                                                            each-any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 2127}#
                                                 '(any any any))))
                                            #{e\ 2063}#)
                                           (if (memv #{ftype\ 2095}#
                                                     '(define-syntax))
                                             ((lambda (#{tmp\ 2177}#)
                                                ((lambda (#{tmp\ 2178}#)
                                                   (if (if #{tmp\ 2178}#
                                                         (apply (lambda (#{_\ 2182}#
                                                                         #{name\ 2183}#
                                                                         #{val\ 2184}#)
                                                                  (#{id?\ 666}#
                                                                    #{name\ 2183}#))
                                                                #{tmp\ 2178}#)
                                                         #f)
                                                     (apply (lambda (#{_\ 2188}#
                                                                     #{name\ 2189}#
                                                                     #{val\ 2190}#)
                                                              (values
                                                                'define-syntax-form
                                                                #{name\ 2189}#
                                                                #{val\ 2190}#
                                                                #{w\ 2065}#
                                                                #{s\ 2066}#
                                                                #{mod\ 2068}#))
                                                            #{tmp\ 2178}#)
                                                     (syntax-violation
                                                       #f
                                                       "source expression failed to match any pattern"
                                                       #{tmp\ 2177}#)))
                                                 ($sc-dispatch
                                                   #{tmp\ 2177}#
                                                   '(any any any))))
                                              #{e\ 2063}#)
                                             (values
                                               'call
                                               #f
                                               #{e\ 2063}#
                                               #{w\ 2065}#
                                               #{s\ 2066}#
                                               #{mod\ 2068}#))))))))))))))
                   (if (#{syntax-object?\ 630}# #{e\ 2063}#)
                     (#{syntax-type\ 747}#
                       (#{syntax-object-expression\ 632}# #{e\ 2063}#)
                       #{r\ 2064}#
                       (#{join-wraps\ 717}#
                         #{w\ 2065}#
                         (#{syntax-object-wrap\ 634}# #{e\ 2063}#))
                       #{s\ 2066}#
                       #{rib\ 2067}#
                       (let ((#{t\ 2196}#
                               (#{syntax-object-module\ 636}# #{e\ 2063}#)))
                         (if #{t\ 2196}# #{t\ 2196}# #{mod\ 2068}#))
                       #{for-car?\ 2069}#)
                     (if (self-evaluating? #{e\ 2063}#)
                       (values
                         'constant
                         #f
                         #{e\ 2063}#
                         #{w\ 2065}#
                         #{s\ 2066}#
                         #{mod\ 2068}#)
                       (values
                         'other
                         #f
                         #{e\ 2063}#
                         #{w\ 2065}#
                         #{s\ 2066}#
                         #{mod\ 2068}#)))))))
           (#{chi-when-list\ 745}#
             (lambda (#{e\ 2201}# #{when-list\ 2202}# #{w\ 2203}#)
               (letrec ((#{f\ 2210}#
                          (lambda (#{when-list\ 2211}# #{situations\ 2212}#)
                            (if (null? #{when-list\ 2211}#)
                              #{situations\ 2212}#
                              (#{f\ 2210}#
                                (cdr #{when-list\ 2211}#)
                                (cons (let ((#{x\ 2214}#
                                              (car #{when-list\ 2211}#)))
                                        (if (#{free-id=?\ 725}#
                                              #{x\ 2214}#
                                              '#(syntax-object
                                                 compile
                                                 ((top)
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(x)
                                                    #((top))
                                                    #("i2213"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(f when-list situations)
                                                    #((top) (top) (top))
                                                    #("i2207" "i2208" "i2209"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(e when-list w)
                                                    #((top) (top) (top))
                                                    #("i2204" "i2205" "i2206"))
                                                  #(ribcage
                                                    (lambda-var-list
                                                      gen-var
                                                      strip
                                                      chi-lambda-case
                                                      lambda*-formals
                                                      chi-simple-lambda
                                                      lambda-formals
                                                      ellipsis?
                                                      chi-void
                                                      eval-local-transformer
                                                      chi-local-syntax
                                                      chi-body
                                                      chi-macro
                                                      chi-application
                                                      chi-expr
                                                      chi
                                                      chi-top
                                                      syntax-type
                                                      chi-when-list
                                                      chi-install-global
                                                      chi-top-sequence
                                                      chi-sequence
                                                      source-wrap
                                                      wrap
                                                      bound-id-member?
                                                      distinct-bound-ids?
                                                      valid-bound-ids?
                                                      bound-id=?
                                                      free-id=?
                                                      id-var-name
                                                      same-marks?
                                                      join-marks
                                                      join-wraps
                                                      smart-append
                                                      make-binding-wrap
                                                      extend-ribcage!
                                                      make-empty-ribcage
                                                      new-mark
                                                      anti-mark
                                                      the-anti-mark
                                                      top-marked?
                                                      top-wrap
                                                      empty-wrap
                                                      set-ribcage-labels!
                                                      set-ribcage-marks!
                                                      set-ribcage-symnames!
                                                      ribcage-labels
                                                      ribcage-marks
                                                      ribcage-symnames
                                                      ribcage?
                                                      make-ribcage
                                                      gen-labels
                                                      gen-label
                                                      make-rename
                                                      rename-marks
                                                      rename-new
                                                      rename-old
                                                      subst-rename?
                                                      wrap-subst
                                                      wrap-marks
                                                      make-wrap
                                                      id-sym-name&marks
                                                      id-sym-name
                                                      id?
                                                      nonsymbol-id?
                                                      global-extend
                                                      lookup
                                                      macros-only-env
                                                      extend-var-env
                                                      extend-env
                                                      null-env
                                                      binding-value
                                                      binding-type
                                                      make-binding
                                                      arg-check
                                                      source-annotation
                                                      no-source
                                                      set-syntax-object-module!
                                                      set-syntax-object-wrap!
                                                      set-syntax-object-expression!
                                                      syntax-object-module
                                                      syntax-object-wrap
                                                      syntax-object-expression
                                                      syntax-object?
                                                      make-syntax-object
                                                      build-lexical-var
                                                      build-letrec
                                                      build-named-let
                                                      build-let
                                                      build-sequence
                                                      build-data
                                                      build-primref
                                                      build-lambda-case
                                                      build-case-lambda
                                                      build-simple-lambda
                                                      build-global-definition
                                                      maybe-name-value!
                                                      build-global-assignment
                                                      build-global-reference
                                                      analyze-variable
                                                      build-lexical-assignment
                                                      build-lexical-reference
                                                      build-dynlet
                                                      build-conditional
                                                      build-application
                                                      build-void
                                                      decorate-source
                                                      get-global-definition-hook
                                                      put-global-definition-hook
                                                      gensym-hook
                                                      local-eval-hook
                                                      top-level-eval-hook
                                                      fx<
                                                      fx=
                                                      fx-
                                                      fx+
                                                      *mode*)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i780"
                                                     "i778"
                                                     "i776"
                                                     "i774"
                                                     "i772"
                                                     "i770"
                                                     "i768"
                                                     "i766"
                                                     "i764"
                                                     "i762"
                                                     "i760"
                                                     "i758"
                                                     "i756"
                                                     "i754"
                                                     "i752"
                                                     "i750"
                                                     "i748"
                                                     "i746"
                                                     "i744"
                                                     "i742"
                                                     "i740"
                                                     "i738"
                                                     "i736"
                                                     "i734"
                                                     "i732"
                                                     "i730"
                                                     "i728"
                                                     "i726"
                                                     "i724"
                                                     "i722"
                                                     "i720"
                                                     "i718"
                                                     "i716"
                                                     "i714"
                                                     "i712"
                                                     "i710"
                                                     "i709"
                                                     "i708"
                                                     "i706"
                                                     "i705"
                                                     "i704"
                                                     "i703"
                                                     "i702"
                                                     "i700"
                                                     "i698"
                                                     "i696"
                                                     "i694"
                                                     "i692"
                                                     "i690"
                                                     "i688"
                                                     "i686"
                                                     "i683"
                                                     "i681"
                                                     "i680"
                                                     "i679"
                                                     "i678"
                                                     "i677"
                                                     "i676"
                                                     "i674"
                                                     "i672"
                                                     "i670"
                                                     "i668"
                                                     "i667"
                                                     "i665"
                                                     "i663"
                                                     "i661"
                                                     "i659"
                                                     "i657"
                                                     "i655"
                                                     "i653"
                                                     "i652"
                                                     "i650"
                                                     "i648"
                                                     "i647"
                                                     "i646"
                                                     "i644"
                                                     "i643"
                                                     "i641"
                                                     "i639"
                                                     "i637"
                                                     "i635"
                                                     "i633"
                                                     "i631"
                                                     "i629"
                                                     "i627"
                                                     "i625"
                                                     "i623"
                                                     "i621"
                                                     "i619"
                                                     "i617"
                                                     "i615"
                                                     "i613"
                                                     "i611"
                                                     "i609"
                                                     "i607"
                                                     "i605"
                                                     "i603"
                                                     "i601"
                                                     "i599"
                                                     "i597"
                                                     "i595"
                                                     "i593"
                                                     "i591"
                                                     "i589"
                                                     "i587"
                                                     "i585"
                                                     "i583"
                                                     "i581"
                                                     "i579"
                                                     "i578"
                                                     "i576"
                                                     "i574"
                                                     "i572"
                                                     "i570"
                                                     "i568"
                                                     "i566"
                                                     "i564"))
                                                  #(ribcage
                                                    (define-structure and-map*)
                                                    ((top) (top))
                                                    ("i467" "i465")))
                                                 (hygiene guile)))
                                          'compile
                                          (if (#{free-id=?\ 725}#
                                                #{x\ 2214}#
                                                '#(syntax-object
                                                   load
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i2213"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(f when-list situations)
                                                      #((top) (top) (top))
                                                      #("i2207"
                                                        "i2208"
                                                        "i2209"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(e when-list w)
                                                      #((top) (top) (top))
                                                      #("i2204"
                                                        "i2205"
                                                        "i2206"))
                                                    #(ribcage
                                                      (lambda-var-list
                                                        gen-var
                                                        strip
                                                        chi-lambda-case
                                                        lambda*-formals
                                                        chi-simple-lambda
                                                        lambda-formals
                                                        ellipsis?
                                                        chi-void
                                                        eval-local-transformer
                                                        chi-local-syntax
                                                        chi-body
                                                        chi-macro
                                                        chi-application
                                                        chi-expr
                                                        chi
                                                        chi-top
                                                        syntax-type
                                                        chi-when-list
                                                        chi-install-global
                                                        chi-top-sequence
                                                        chi-sequence
                                                        source-wrap
                                                        wrap
                                                        bound-id-member?
                                                        distinct-bound-ids?
                                                        valid-bound-ids?
                                                        bound-id=?
                                                        free-id=?
                                                        id-var-name
                                                        same-marks?
                                                        join-marks
                                                        join-wraps
                                                        smart-append
                                                        make-binding-wrap
                                                        extend-ribcage!
                                                        make-empty-ribcage
                                                        new-mark
                                                        anti-mark
                                                        the-anti-mark
                                                        top-marked?
                                                        top-wrap
                                                        empty-wrap
                                                        set-ribcage-labels!
                                                        set-ribcage-marks!
                                                        set-ribcage-symnames!
                                                        ribcage-labels
                                                        ribcage-marks
                                                        ribcage-symnames
                                                        ribcage?
                                                        make-ribcage
                                                        gen-labels
                                                        gen-label
                                                        make-rename
                                                        rename-marks
                                                        rename-new
                                                        rename-old
                                                        subst-rename?
                                                        wrap-subst
                                                        wrap-marks
                                                        make-wrap
                                                        id-sym-name&marks
                                                        id-sym-name
                                                        id?
                                                        nonsymbol-id?
                                                        global-extend
                                                        lookup
                                                        macros-only-env
                                                        extend-var-env
                                                        extend-env
                                                        null-env
                                                        binding-value
                                                        binding-type
                                                        make-binding
                                                        arg-check
                                                        source-annotation
                                                        no-source
                                                        set-syntax-object-module!
                                                        set-syntax-object-wrap!
                                                        set-syntax-object-expression!
                                                        syntax-object-module
                                                        syntax-object-wrap
                                                        syntax-object-expression
                                                        syntax-object?
                                                        make-syntax-object
                                                        build-lexical-var
                                                        build-letrec
                                                        build-named-let
                                                        build-let
                                                        build-sequence
                                                        build-data
                                                        build-primref
                                                        build-lambda-case
                                                        build-case-lambda
                                                        build-simple-lambda
                                                        build-global-definition
                                                        maybe-name-value!
                                                        build-global-assignment
                                                        build-global-reference
                                                        analyze-variable
                                                        build-lexical-assignment
                                                        build-lexical-reference
                                                        build-dynlet
                                                        build-conditional
                                                        build-application
                                                        build-void
                                                        decorate-source
                                                        get-global-definition-hook
                                                        put-global-definition-hook
                                                        gensym-hook
                                                        local-eval-hook
                                                        top-level-eval-hook
                                                        fx<
                                                        fx=
                                                        fx-
                                                        fx+
                                                        *mode*)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i780"
                                                       "i778"
                                                       "i776"
                                                       "i774"
                                                       "i772"
                                                       "i770"
                                                       "i768"
                                                       "i766"
                                                       "i764"
                                                       "i762"
                                                       "i760"
                                                       "i758"
                                                       "i756"
                                                       "i754"
                                                       "i752"
                                                       "i750"
                                                       "i748"
                                                       "i746"
                                                       "i744"
                                                       "i742"
                                                       "i740"
                                                       "i738"
                                                       "i736"
                                                       "i734"
                                                       "i732"
                                                       "i730"
                                                       "i728"
                                                       "i726"
                                                       "i724"
                                                       "i722"
                                                       "i720"
                                                       "i718"
                                                       "i716"
                                                       "i714"
                                                       "i712"
                                                       "i710"
                                                       "i709"
                                                       "i708"
                                                       "i706"
                                                       "i705"
                                                       "i704"
                                                       "i703"
                                                       "i702"
                                                       "i700"
                                                       "i698"
                                                       "i696"
                                                       "i694"
                                                       "i692"
                                                       "i690"
                                                       "i688"
                                                       "i686"
                                                       "i683"
                                                       "i681"
                                                       "i680"
                                                       "i679"
                                                       "i678"
                                                       "i677"
                                                       "i676"
                                                       "i674"
                                                       "i672"
                                                       "i670"
                                                       "i668"
                                                       "i667"
                                                       "i665"
                                                       "i663"
                                                       "i661"
                                                       "i659"
                                                       "i657"
                                                       "i655"
                                                       "i653"
                                                       "i652"
                                                       "i650"
                                                       "i648"
                                                       "i647"
                                                       "i646"
                                                       "i644"
                                                       "i643"
                                                       "i641"
                                                       "i639"
                                                       "i637"
                                                       "i635"
                                                       "i633"
                                                       "i631"
                                                       "i629"
                                                       "i627"
                                                       "i625"
                                                       "i623"
                                                       "i621"
                                                       "i619"
                                                       "i617"
                                                       "i615"
                                                       "i613"
                                                       "i611"
                                                       "i609"
                                                       "i607"
                                                       "i605"
                                                       "i603"
                                                       "i601"
                                                       "i599"
                                                       "i597"
                                                       "i595"
                                                       "i593"
                                                       "i591"
                                                       "i589"
                                                       "i587"
                                                       "i585"
                                                       "i583"
                                                       "i581"
                                                       "i579"
                                                       "i578"
                                                       "i576"
                                                       "i574"
                                                       "i572"
                                                       "i570"
                                                       "i568"
                                                       "i566"
                                                       "i564"))
                                                    #(ribcage
                                                      (define-structure
                                                        and-map*)
                                                      ((top) (top))
                                                      ("i467" "i465")))
                                                   (hygiene guile)))
                                            'load
                                            (if (#{free-id=?\ 725}#
                                                  #{x\ 2214}#
                                                  '#(syntax-object
                                                     eval
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage () () ())
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i2213"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(f
                                                          when-list
                                                          situations)
                                                        #((top) (top) (top))
                                                        #("i2207"
                                                          "i2208"
                                                          "i2209"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(e when-list w)
                                                        #((top) (top) (top))
                                                        #("i2204"
                                                          "i2205"
                                                          "i2206"))
                                                      #(ribcage
                                                        (lambda-var-list
                                                          gen-var
                                                          strip
                                                          chi-lambda-case
                                                          lambda*-formals
                                                          chi-simple-lambda
                                                          lambda-formals
                                                          ellipsis?
                                                          chi-void
                                                          eval-local-transformer
                                                          chi-local-syntax
                                                          chi-body
                                                          chi-macro
                                                          chi-application
                                                          chi-expr
                                                          chi
                                                          chi-top
                                                          syntax-type
                                                          chi-when-list
                                                          chi-install-global
                                                          chi-top-sequence
                                                          chi-sequence
                                                          source-wrap
                                                          wrap
                                                          bound-id-member?
                                                          distinct-bound-ids?
                                                          valid-bound-ids?
                                                          bound-id=?
                                                          free-id=?
                                                          id-var-name
                                                          same-marks?
                                                          join-marks
                                                          join-wraps
                                                          smart-append
                                                          make-binding-wrap
                                                          extend-ribcage!
                                                          make-empty-ribcage
                                                          new-mark
                                                          anti-mark
                                                          the-anti-mark
                                                          top-marked?
                                                          top-wrap
                                                          empty-wrap
                                                          set-ribcage-labels!
                                                          set-ribcage-marks!
                                                          set-ribcage-symnames!
                                                          ribcage-labels
                                                          ribcage-marks
                                                          ribcage-symnames
                                                          ribcage?
                                                          make-ribcage
                                                          gen-labels
                                                          gen-label
                                                          make-rename
                                                          rename-marks
                                                          rename-new
                                                          rename-old
                                                          subst-rename?
                                                          wrap-subst
                                                          wrap-marks
                                                          make-wrap
                                                          id-sym-name&marks
                                                          id-sym-name
                                                          id?
                                                          nonsymbol-id?
                                                          global-extend
                                                          lookup
                                                          macros-only-env
                                                          extend-var-env
                                                          extend-env
                                                          null-env
                                                          binding-value
                                                          binding-type
                                                          make-binding
                                                          arg-check
                                                          source-annotation
                                                          no-source
                                                          set-syntax-object-module!
                                                          set-syntax-object-wrap!
                                                          set-syntax-object-expression!
                                                          syntax-object-module
                                                          syntax-object-wrap
                                                          syntax-object-expression
                                                          syntax-object?
                                                          make-syntax-object
                                                          build-lexical-var
                                                          build-letrec
                                                          build-named-let
                                                          build-let
                                                          build-sequence
                                                          build-data
                                                          build-primref
                                                          build-lambda-case
                                                          build-case-lambda
                                                          build-simple-lambda
                                                          build-global-definition
                                                          maybe-name-value!
                                                          build-global-assignment
                                                          build-global-reference
                                                          analyze-variable
                                                          build-lexical-assignment
                                                          build-lexical-reference
                                                          build-dynlet
                                                          build-conditional
                                                          build-application
                                                          build-void
                                                          decorate-source
                                                          get-global-definition-hook
                                                          put-global-definition-hook
                                                          gensym-hook
                                                          local-eval-hook
                                                          top-level-eval-hook
                                                          fx<
                                                          fx=
                                                          fx-
                                                          fx+
                                                          *mode*)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("i780"
                                                         "i778"
                                                         "i776"
                                                         "i774"
                                                         "i772"
                                                         "i770"
                                                         "i768"
                                                         "i766"
                                                         "i764"
                                                         "i762"
                                                         "i760"
                                                         "i758"
                                                         "i756"
                                                         "i754"
                                                         "i752"
                                                         "i750"
                                                         "i748"
                                                         "i746"
                                                         "i744"
                                                         "i742"
                                                         "i740"
                                                         "i738"
                                                         "i736"
                                                         "i734"
                                                         "i732"
                                                         "i730"
                                                         "i728"
                                                         "i726"
                                                         "i724"
                                                         "i722"
                                                         "i720"
                                                         "i718"
                                                         "i716"
                                                         "i714"
                                                         "i712"
                                                         "i710"
                                                         "i709"
                                                         "i708"
                                                         "i706"
                                                         "i705"
                                                         "i704"
                                                         "i703"
                                                         "i702"
                                                         "i700"
                                                         "i698"
                                                         "i696"
                                                         "i694"
                                                         "i692"
                                                         "i690"
                                                         "i688"
                                                         "i686"
                                                         "i683"
                                                         "i681"
                                                         "i680"
                                                         "i679"
                                                         "i678"
                                                         "i677"
                                                         "i676"
                                                         "i674"
                                                         "i672"
                                                         "i670"
                                                         "i668"
                                                         "i667"
                                                         "i665"
                                                         "i663"
                                                         "i661"
                                                         "i659"
                                                         "i657"
                                                         "i655"
                                                         "i653"
                                                         "i652"
                                                         "i650"
                                                         "i648"
                                                         "i647"
                                                         "i646"
                                                         "i644"
                                                         "i643"
                                                         "i641"
                                                         "i639"
                                                         "i637"
                                                         "i635"
                                                         "i633"
                                                         "i631"
                                                         "i629"
                                                         "i627"
                                                         "i625"
                                                         "i623"
                                                         "i621"
                                                         "i619"
                                                         "i617"
                                                         "i615"
                                                         "i613"
                                                         "i611"
                                                         "i609"
                                                         "i607"
                                                         "i605"
                                                         "i603"
                                                         "i601"
                                                         "i599"
                                                         "i597"
                                                         "i595"
                                                         "i593"
                                                         "i591"
                                                         "i589"
                                                         "i587"
                                                         "i585"
                                                         "i583"
                                                         "i581"
                                                         "i579"
                                                         "i578"
                                                         "i576"
                                                         "i574"
                                                         "i572"
                                                         "i570"
                                                         "i568"
                                                         "i566"
                                                         "i564"))
                                                      #(ribcage
                                                        (define-structure
                                                          and-map*)
                                                        ((top) (top))
                                                        ("i467" "i465")))
                                                     (hygiene guile)))
                                              'eval
                                              (if (#{free-id=?\ 725}#
                                                    #{x\ 2214}#
                                                    '#(syntax-object
                                                       expand
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i2213"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(f
                                                            when-list
                                                            situations)
                                                          #((top) (top) (top))
                                                          #("i2207"
                                                            "i2208"
                                                            "i2209"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(e when-list w)
                                                          #((top) (top) (top))
                                                          #("i2204"
                                                            "i2205"
                                                            "i2206"))
                                                        #(ribcage
                                                          (lambda-var-list
                                                            gen-var
                                                            strip
                                                            chi-lambda-case
                                                            lambda*-formals
                                                            chi-simple-lambda
                                                            lambda-formals
                                                            ellipsis?
                                                            chi-void
                                                            eval-local-transformer
                                                            chi-local-syntax
                                                            chi-body
                                                            chi-macro
                                                            chi-application
                                                            chi-expr
                                                            chi
                                                            chi-top
                                                            syntax-type
                                                            chi-when-list
                                                            chi-install-global
                                                            chi-top-sequence
                                                            chi-sequence
                                                            source-wrap
                                                            wrap
                                                            bound-id-member?
                                                            distinct-bound-ids?
                                                            valid-bound-ids?
                                                            bound-id=?
                                                            free-id=?
                                                            id-var-name
                                                            same-marks?
                                                            join-marks
                                                            join-wraps
                                                            smart-append
                                                            make-binding-wrap
                                                            extend-ribcage!
                                                            make-empty-ribcage
                                                            new-mark
                                                            anti-mark
                                                            the-anti-mark
                                                            top-marked?
                                                            top-wrap
                                                            empty-wrap
                                                            set-ribcage-labels!
                                                            set-ribcage-marks!
                                                            set-ribcage-symnames!
                                                            ribcage-labels
                                                            ribcage-marks
                                                            ribcage-symnames
                                                            ribcage?
                                                            make-ribcage
                                                            gen-labels
                                                            gen-label
                                                            make-rename
                                                            rename-marks
                                                            rename-new
                                                            rename-old
                                                            subst-rename?
                                                            wrap-subst
                                                            wrap-marks
                                                            make-wrap
                                                            id-sym-name&marks
                                                            id-sym-name
                                                            id?
                                                            nonsymbol-id?
                                                            global-extend
                                                            lookup
                                                            macros-only-env
                                                            extend-var-env
                                                            extend-env
                                                            null-env
                                                            binding-value
                                                            binding-type
                                                            make-binding
                                                            arg-check
                                                            source-annotation
                                                            no-source
                                                            set-syntax-object-module!
                                                            set-syntax-object-wrap!
                                                            set-syntax-object-expression!
                                                            syntax-object-module
                                                            syntax-object-wrap
                                                            syntax-object-expression
                                                            syntax-object?
                                                            make-syntax-object
                                                            build-lexical-var
                                                            build-letrec
                                                            build-named-let
                                                            build-let
                                                            build-sequence
                                                            build-data
                                                            build-primref
                                                            build-lambda-case
                                                            build-case-lambda
                                                            build-simple-lambda
                                                            build-global-definition
                                                            maybe-name-value!
                                                            build-global-assignment
                                                            build-global-reference
                                                            analyze-variable
                                                            build-lexical-assignment
                                                            build-lexical-reference
                                                            build-dynlet
                                                            build-conditional
                                                            build-application
                                                            build-void
                                                            decorate-source
                                                            get-global-definition-hook
                                                            put-global-definition-hook
                                                            gensym-hook
                                                            local-eval-hook
                                                            top-level-eval-hook
                                                            fx<
                                                            fx=
                                                            fx-
                                                            fx+
                                                            *mode*)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i780"
                                                           "i778"
                                                           "i776"
                                                           "i774"
                                                           "i772"
                                                           "i770"
                                                           "i768"
                                                           "i766"
                                                           "i764"
                                                           "i762"
                                                           "i760"
                                                           "i758"
                                                           "i756"
                                                           "i754"
                                                           "i752"
                                                           "i750"
                                                           "i748"
                                                           "i746"
                                                           "i744"
                                                           "i742"
                                                           "i740"
                                                           "i738"
                                                           "i736"
                                                           "i734"
                                                           "i732"
                                                           "i730"
                                                           "i728"
                                                           "i726"
                                                           "i724"
                                                           "i722"
                                                           "i720"
                                                           "i718"
                                                           "i716"
                                                           "i714"
                                                           "i712"
                                                           "i710"
                                                           "i709"
                                                           "i708"
                                                           "i706"
                                                           "i705"
                                                           "i704"
                                                           "i703"
                                                           "i702"
                                                           "i700"
                                                           "i698"
                                                           "i696"
                                                           "i694"
                                                           "i692"
                                                           "i690"
                                                           "i688"
                                                           "i686"
                                                           "i683"
                                                           "i681"
                                                           "i680"
                                                           "i679"
                                                           "i678"
                                                           "i677"
                                                           "i676"
                                                           "i674"
                                                           "i672"
                                                           "i670"
                                                           "i668"
                                                           "i667"
                                                           "i665"
                                                           "i663"
                                                           "i661"
                                                           "i659"
                                                           "i657"
                                                           "i655"
                                                           "i653"
                                                           "i652"
                                                           "i650"
                                                           "i648"
                                                           "i647"
                                                           "i646"
                                                           "i644"
                                                           "i643"
                                                           "i641"
                                                           "i639"
                                                           "i637"
                                                           "i635"
                                                           "i633"
                                                           "i631"
                                                           "i629"
                                                           "i627"
                                                           "i625"
                                                           "i623"
                                                           "i621"
                                                           "i619"
                                                           "i617"
                                                           "i615"
                                                           "i613"
                                                           "i611"
                                                           "i609"
                                                           "i607"
                                                           "i605"
                                                           "i603"
                                                           "i601"
                                                           "i599"
                                                           "i597"
                                                           "i595"
                                                           "i593"
                                                           "i591"
                                                           "i589"
                                                           "i587"
                                                           "i585"
                                                           "i583"
                                                           "i581"
                                                           "i579"
                                                           "i578"
                                                           "i576"
                                                           "i574"
                                                           "i572"
                                                           "i570"
                                                           "i568"
                                                           "i566"
                                                           "i564"))
                                                        #(ribcage
                                                          (define-structure
                                                            and-map*)
                                                          ((top) (top))
                                                          ("i467" "i465")))
                                                       (hygiene guile)))
                                                'expand
                                                (syntax-violation
                                                  'eval-when
                                                  "invalid situation"
                                                  #{e\ 2201}#
                                                  (#{wrap\ 735}#
                                                    #{x\ 2214}#
                                                    #{w\ 2203}#
                                                    #f)))))))
                                      #{situations\ 2212}#))))))
                 (#{f\ 2210}# #{when-list\ 2202}# (quote ())))))
           (#{chi-install-global\ 743}#
             (lambda (#{name\ 2224}# #{e\ 2225}#)
               (#{build-global-definition\ 606}#
                 #f
                 #{name\ 2224}#
                 (#{build-application\ 588}#
                   #f
                   (#{build-primref\ 614}#
                     #f
                     'make-syntax-transformer)
                   (list (#{build-data\ 616}# #f #{name\ 2224}#)
                         (#{build-data\ 616}# #f (quote macro))
                         (#{build-application\ 588}#
                           #f
                           (#{build-primref\ 614}# #f (quote cons))
                           (list #{e\ 2225}#
                                 (#{build-application\ 588}#
                                   #f
                                   (#{build-primref\ 614}#
                                     #f
                                     'module-name)
                                   (list (#{build-application\ 588}#
                                           #f
                                           (#{build-primref\ 614}#
                                             #f
                                             'current-module)
                                           '()))))))))))
           (#{chi-top-sequence\ 741}#
             (lambda (#{body\ 2239}#
                      #{r\ 2240}#
                      #{w\ 2241}#
                      #{s\ 2242}#
                      #{m\ 2243}#
                      #{esew\ 2244}#
                      #{mod\ 2245}#)
               (#{build-sequence\ 618}#
                 #{s\ 2242}#
                 (letrec ((#{dobody\ 2261}#
                            (lambda (#{body\ 2262}#
                                     #{r\ 2263}#
                                     #{w\ 2264}#
                                     #{m\ 2265}#
                                     #{esew\ 2266}#
                                     #{mod\ 2267}#
                                     #{out\ 2268}#)
                              (if (null? #{body\ 2262}#)
                                (reverse #{out\ 2268}#)
                                (#{dobody\ 2261}#
                                  (cdr #{body\ 2262}#)
                                  #{r\ 2263}#
                                  #{w\ 2264}#
                                  #{m\ 2265}#
                                  #{esew\ 2266}#
                                  #{mod\ 2267}#
                                  (cons (#{chi-top\ 749}#
                                          (car #{body\ 2262}#)
                                          #{r\ 2263}#
                                          #{w\ 2264}#
                                          #{m\ 2265}#
                                          #{esew\ 2266}#
                                          #{mod\ 2267}#)
                                        #{out\ 2268}#))))))
                   (#{dobody\ 2261}#
                     #{body\ 2239}#
                     #{r\ 2240}#
                     #{w\ 2241}#
                     #{m\ 2243}#
                     #{esew\ 2244}#
                     #{mod\ 2245}#
                     '())))))
           (#{chi-sequence\ 739}#
             (lambda (#{body\ 2269}#
                      #{r\ 2270}#
                      #{w\ 2271}#
                      #{s\ 2272}#
                      #{mod\ 2273}#)
               (#{build-sequence\ 618}#
                 #{s\ 2272}#
                 (letrec ((#{dobody\ 2284}#
                            (lambda (#{body\ 2285}#
                                     #{r\ 2286}#
                                     #{w\ 2287}#
                                     #{mod\ 2288}#)
                              (if (null? #{body\ 2285}#)
                                '()
                                (let ((#{first\ 2290}#
                                        (#{chi\ 751}#
                                          (car #{body\ 2285}#)
                                          #{r\ 2286}#
                                          #{w\ 2287}#
                                          #{mod\ 2288}#)))
                                  (cons #{first\ 2290}#
                                        (#{dobody\ 2284}#
                                          (cdr #{body\ 2285}#)
                                          #{r\ 2286}#
                                          #{w\ 2287}#
                                          #{mod\ 2288}#)))))))
                   (#{dobody\ 2284}#
                     #{body\ 2269}#
                     #{r\ 2270}#
                     #{w\ 2271}#
                     #{mod\ 2273}#)))))
           (#{source-wrap\ 737}#
             (lambda (#{x\ 2291}#
                      #{w\ 2292}#
                      #{s\ 2293}#
                      #{defmod\ 2294}#)
               (#{wrap\ 735}#
                 (#{decorate-source\ 584}#
                   #{x\ 2291}#
                   #{s\ 2293}#)
                 #{w\ 2292}#
                 #{defmod\ 2294}#)))
           (#{wrap\ 735}#
             (lambda (#{x\ 2299}# #{w\ 2300}# #{defmod\ 2301}#)
               (if (if (null? (#{wrap-marks\ 673}# #{w\ 2300}#))
                     (null? (#{wrap-subst\ 675}# #{w\ 2300}#))
                     #f)
                 #{x\ 2299}#
                 (if (#{syntax-object?\ 630}# #{x\ 2299}#)
                   (#{make-syntax-object\ 628}#
                     (#{syntax-object-expression\ 632}# #{x\ 2299}#)
                     (#{join-wraps\ 717}#
                       #{w\ 2300}#
                       (#{syntax-object-wrap\ 634}# #{x\ 2299}#))
                     (#{syntax-object-module\ 636}# #{x\ 2299}#))
                   (if (null? #{x\ 2299}#)
                     #{x\ 2299}#
                     (#{make-syntax-object\ 628}#
                       #{x\ 2299}#
                       #{w\ 2300}#
                       #{defmod\ 2301}#))))))
           (#{bound-id-member?\ 733}#
             (lambda (#{x\ 2314}# #{list\ 2315}#)
               (if (not (null? #{list\ 2315}#))
                 (let ((#{t\ 2322}#
                         (#{bound-id=?\ 727}#
                           #{x\ 2314}#
                           (car #{list\ 2315}#))))
                   (if #{t\ 2322}#
                     #{t\ 2322}#
                     (#{bound-id-member?\ 733}#
                       #{x\ 2314}#
                       (cdr #{list\ 2315}#))))
                 #f)))
           (#{distinct-bound-ids?\ 731}#
             (lambda (#{ids\ 2324}#)
               (letrec ((#{distinct?\ 2328}#
                          (lambda (#{ids\ 2329}#)
                            (let ((#{t\ 2332}# (null? #{ids\ 2329}#)))
                              (if #{t\ 2332}#
                                #{t\ 2332}#
                                (if (not (#{bound-id-member?\ 733}#
                                           (car #{ids\ 2329}#)
                                           (cdr #{ids\ 2329}#)))
                                  (#{distinct?\ 2328}# (cdr #{ids\ 2329}#))
                                  #f))))))
                 (#{distinct?\ 2328}# #{ids\ 2324}#))))
           (#{valid-bound-ids?\ 729}#
             (lambda (#{ids\ 2336}#)
               (if (letrec ((#{all-ids?\ 2341}#
                              (lambda (#{ids\ 2342}#)
                                (let ((#{t\ 2345}# (null? #{ids\ 2342}#)))
                                  (if #{t\ 2345}#
                                    #{t\ 2345}#
                                    (if (#{id?\ 666}# (car #{ids\ 2342}#))
                                      (#{all-ids?\ 2341}# (cdr #{ids\ 2342}#))
                                      #f))))))
                     (#{all-ids?\ 2341}# #{ids\ 2336}#))
                 (#{distinct-bound-ids?\ 731}# #{ids\ 2336}#)
                 #f)))
           (#{bound-id=?\ 727}#
             (lambda (#{i\ 2350}# #{j\ 2351}#)
               (if (if (#{syntax-object?\ 630}# #{i\ 2350}#)
                     (#{syntax-object?\ 630}# #{j\ 2351}#)
                     #f)
                 (if (eq? (#{syntax-object-expression\ 632}# #{i\ 2350}#)
                          (#{syntax-object-expression\ 632}# #{j\ 2351}#))
                   (#{same-marks?\ 721}#
                     (#{wrap-marks\ 673}#
                       (#{syntax-object-wrap\ 634}# #{i\ 2350}#))
                     (#{wrap-marks\ 673}#
                       (#{syntax-object-wrap\ 634}# #{j\ 2351}#)))
                   #f)
                 (eq? #{i\ 2350}# #{j\ 2351}#))))
           (#{free-id=?\ 725}#
             (lambda (#{i\ 2358}# #{j\ 2359}#)
               (if (eq? (let ((#{x\ 2365}# #{i\ 2358}#))
                          (if (#{syntax-object?\ 630}# #{x\ 2365}#)
                            (#{syntax-object-expression\ 632}# #{x\ 2365}#)
                            #{x\ 2365}#))
                        (let ((#{x\ 2368}# #{j\ 2359}#))
                          (if (#{syntax-object?\ 630}# #{x\ 2368}#)
                            (#{syntax-object-expression\ 632}# #{x\ 2368}#)
                            #{x\ 2368}#)))
                 (eq? (#{id-var-name\ 723}# #{i\ 2358}# (quote (())))
                      (#{id-var-name\ 723}# #{j\ 2359}# (quote (()))))
                 #f)))
           (#{id-var-name\ 723}#
             (lambda (#{id\ 2372}# #{w\ 2373}#)
               (letrec ((#{search-vector-rib\ 2382}#
                          (lambda (#{sym\ 2394}#
                                   #{subst\ 2395}#
                                   #{marks\ 2396}#
                                   #{symnames\ 2397}#
                                   #{ribcage\ 2398}#)
                            (let ((#{n\ 2405}#
                                    (vector-length #{symnames\ 2397}#)))
                              (letrec ((#{f\ 2408}#
                                         (lambda (#{i\ 2409}#)
                                           (if (#{fx=\ 571}#
                                                 #{i\ 2409}#
                                                 #{n\ 2405}#)
                                             (#{search\ 2378}#
                                               #{sym\ 2394}#
                                               (cdr #{subst\ 2395}#)
                                               #{marks\ 2396}#)
                                             (if (if (eq? (vector-ref
                                                            #{symnames\ 2397}#
                                                            #{i\ 2409}#)
                                                          #{sym\ 2394}#)
                                                   (#{same-marks?\ 721}#
                                                     #{marks\ 2396}#
                                                     (vector-ref
                                                       (#{ribcage-marks\ 693}#
                                                         #{ribcage\ 2398}#)
                                                       #{i\ 2409}#))
                                                   #f)
                                               (values
                                                 (vector-ref
                                                   (#{ribcage-labels\ 695}#
                                                     #{ribcage\ 2398}#)
                                                   #{i\ 2409}#)
                                                 #{marks\ 2396}#)
                                               (#{f\ 2408}#
                                                 (#{fx+\ 567}#
                                                   #{i\ 2409}#
                                                   1)))))))
                                (#{f\ 2408}# 0)))))
                        (#{search-list-rib\ 2380}#
                          (lambda (#{sym\ 2417}#
                                   #{subst\ 2418}#
                                   #{marks\ 2419}#
                                   #{symnames\ 2420}#
                                   #{ribcage\ 2421}#)
                            (letrec ((#{f\ 2430}#
                                       (lambda (#{symnames\ 2431}# #{i\ 2432}#)
                                         (if (null? #{symnames\ 2431}#)
                                           (#{search\ 2378}#
                                             #{sym\ 2417}#
                                             (cdr #{subst\ 2418}#)
                                             #{marks\ 2419}#)
                                           (if (if (eq? (car #{symnames\ 2431}#)
                                                        #{sym\ 2417}#)
                                                 (#{same-marks?\ 721}#
                                                   #{marks\ 2419}#
                                                   (list-ref
                                                     (#{ribcage-marks\ 693}#
                                                       #{ribcage\ 2421}#)
                                                     #{i\ 2432}#))
                                                 #f)
                                             (values
                                               (list-ref
                                                 (#{ribcage-labels\ 695}#
                                                   #{ribcage\ 2421}#)
                                                 #{i\ 2432}#)
                                               #{marks\ 2419}#)
                                             (#{f\ 2430}#
                                               (cdr #{symnames\ 2431}#)
                                               (#{fx+\ 567}#
                                                 #{i\ 2432}#
                                                 1)))))))
                              (#{f\ 2430}# #{symnames\ 2420}# 0))))
                        (#{search\ 2378}#
                          (lambda (#{sym\ 2440}#
                                   #{subst\ 2441}#
                                   #{marks\ 2442}#)
                            (if (null? #{subst\ 2441}#)
                              (values #f #{marks\ 2442}#)
                              (let ((#{fst\ 2447}# (car #{subst\ 2441}#)))
                                (if (eq? #{fst\ 2447}# (quote shift))
                                  (#{search\ 2378}#
                                    #{sym\ 2440}#
                                    (cdr #{subst\ 2441}#)
                                    (cdr #{marks\ 2442}#))
                                  (let ((#{symnames\ 2449}#
                                          (#{ribcage-symnames\ 691}#
                                            #{fst\ 2447}#)))
                                    (if (vector? #{symnames\ 2449}#)
                                      (#{search-vector-rib\ 2382}#
                                        #{sym\ 2440}#
                                        #{subst\ 2441}#
                                        #{marks\ 2442}#
                                        #{symnames\ 2449}#
                                        #{fst\ 2447}#)
                                      (#{search-list-rib\ 2380}#
                                        #{sym\ 2440}#
                                        #{subst\ 2441}#
                                        #{marks\ 2442}#
                                        #{symnames\ 2449}#
                                        #{fst\ 2447}#)))))))))
                 (if (symbol? #{id\ 2372}#)
                   (let ((#{t\ 2452}#
                           (call-with-values
                             (lambda ()
                               (#{search\ 2378}#
                                 #{id\ 2372}#
                                 (#{wrap-subst\ 675}# #{w\ 2373}#)
                                 (#{wrap-marks\ 673}# #{w\ 2373}#)))
                             (lambda (#{x\ 2454}# . #{ignore\ 2455}#)
                               #{x\ 2454}#))))
                     (if #{t\ 2452}# #{t\ 2452}# #{id\ 2372}#))
                   (if (#{syntax-object?\ 630}# #{id\ 2372}#)
                     (let ((#{id\ 2463}#
                             (#{syntax-object-expression\ 632}# #{id\ 2372}#))
                           (#{w1\ 2464}#
                             (#{syntax-object-wrap\ 634}# #{id\ 2372}#)))
                       (let ((#{marks\ 2466}#
                               (#{join-marks\ 719}#
                                 (#{wrap-marks\ 673}# #{w\ 2373}#)
                                 (#{wrap-marks\ 673}# #{w1\ 2464}#))))
                         (call-with-values
                           (lambda ()
                             (#{search\ 2378}#
                               #{id\ 2463}#
                               (#{wrap-subst\ 675}# #{w\ 2373}#)
                               #{marks\ 2466}#))
                           (lambda (#{new-id\ 2467}# #{marks\ 2468}#)
                             (let ((#{t\ 2473}# #{new-id\ 2467}#))
                               (if #{t\ 2473}#
                                 #{t\ 2473}#
                                 (let ((#{t\ 2476}#
                                         (call-with-values
                                           (lambda ()
                                             (#{search\ 2378}#
                                               #{id\ 2463}#
                                               (#{wrap-subst\ 675}#
                                                 #{w1\ 2464}#)
                                               #{marks\ 2468}#))
                                           (lambda (#{x\ 2478}#
                                                    .
                                                    #{ignore\ 2479}#)
                                             #{x\ 2478}#))))
                                   (if #{t\ 2476}#
                                     #{t\ 2476}#
                                     #{id\ 2463}#))))))))
                     (syntax-violation
                       'id-var-name
                       "invalid id"
                       #{id\ 2372}#))))))
           (#{same-marks?\ 721}#
             (lambda (#{x\ 2484}# #{y\ 2485}#)
               (let ((#{t\ 2490}# (eq? #{x\ 2484}# #{y\ 2485}#)))
                 (if #{t\ 2490}#
                   #{t\ 2490}#
                   (if (not (null? #{x\ 2484}#))
                     (if (not (null? #{y\ 2485}#))
                       (if (eq? (car #{x\ 2484}#) (car #{y\ 2485}#))
                         (#{same-marks?\ 721}#
                           (cdr #{x\ 2484}#)
                           (cdr #{y\ 2485}#))
                         #f)
                       #f)
                     #f)))))
           (#{join-marks\ 719}#
             (lambda (#{m1\ 2496}# #{m2\ 2497}#)
               (#{smart-append\ 715}# #{m1\ 2496}# #{m2\ 2497}#)))
           (#{join-wraps\ 717}#
             (lambda (#{w1\ 2500}# #{w2\ 2501}#)
               (let ((#{m1\ 2506}# (#{wrap-marks\ 673}# #{w1\ 2500}#))
                     (#{s1\ 2507}# (#{wrap-subst\ 675}# #{w1\ 2500}#)))
                 (if (null? #{m1\ 2506}#)
                   (if (null? #{s1\ 2507}#)
                     #{w2\ 2501}#
                     (#{make-wrap\ 671}#
                       (#{wrap-marks\ 673}# #{w2\ 2501}#)
                       (#{smart-append\ 715}#
                         #{s1\ 2507}#
                         (#{wrap-subst\ 675}# #{w2\ 2501}#))))
                   (#{make-wrap\ 671}#
                     (#{smart-append\ 715}#
                       #{m1\ 2506}#
                       (#{wrap-marks\ 673}# #{w2\ 2501}#))
                     (#{smart-append\ 715}#
                       #{s1\ 2507}#
                       (#{wrap-subst\ 675}# #{w2\ 2501}#)))))))
           (#{smart-append\ 715}#
             (lambda (#{m1\ 2508}# #{m2\ 2509}#)
               (if (null? #{m2\ 2509}#)
                 #{m1\ 2508}#
                 (append #{m1\ 2508}# #{m2\ 2509}#))))
           (#{make-binding-wrap\ 713}#
             (lambda (#{ids\ 2512}# #{labels\ 2513}# #{w\ 2514}#)
               (if (null? #{ids\ 2512}#)
                 #{w\ 2514}#
                 (#{make-wrap\ 671}#
                   (#{wrap-marks\ 673}# #{w\ 2514}#)
                   (cons (let ((#{labelvec\ 2519}#
                                 (list->vector #{labels\ 2513}#)))
                           (let ((#{n\ 2521}#
                                   (vector-length #{labelvec\ 2519}#)))
                             (let ((#{symnamevec\ 2524}#
                                     (make-vector #{n\ 2521}#))
                                   (#{marksvec\ 2525}#
                                     (make-vector #{n\ 2521}#)))
                               (begin
                                 (letrec ((#{f\ 2529}#
                                            (lambda (#{ids\ 2530}# #{i\ 2531}#)
                                              (if (not (null? #{ids\ 2530}#))
                                                (call-with-values
                                                  (lambda ()
                                                    (#{id-sym-name&marks\ 669}#
                                                      (car #{ids\ 2530}#)
                                                      #{w\ 2514}#))
                                                  (lambda (#{symname\ 2532}#
                                                           #{marks\ 2533}#)
                                                    (begin
                                                      (vector-set!
                                                        #{symnamevec\ 2524}#
                                                        #{i\ 2531}#
                                                        #{symname\ 2532}#)
                                                      (vector-set!
                                                        #{marksvec\ 2525}#
                                                        #{i\ 2531}#
                                                        #{marks\ 2533}#)
                                                      (#{f\ 2529}#
                                                        (cdr #{ids\ 2530}#)
                                                        (#{fx+\ 567}#
                                                          #{i\ 2531}#
                                                          1)))))))))
                                   (#{f\ 2529}# #{ids\ 2512}# 0))
                                 (#{make-ribcage\ 687}#
                                   #{symnamevec\ 2524}#
                                   #{marksvec\ 2525}#
                                   #{labelvec\ 2519}#)))))
                         (#{wrap-subst\ 675}# #{w\ 2514}#))))))
           (#{extend-ribcage!\ 711}#
             (lambda (#{ribcage\ 2536}# #{id\ 2537}# #{label\ 2538}#)
               (begin
                 (#{set-ribcage-symnames!\ 697}#
                   #{ribcage\ 2536}#
                   (cons (#{syntax-object-expression\ 632}# #{id\ 2537}#)
                         (#{ribcage-symnames\ 691}# #{ribcage\ 2536}#)))
                 (#{set-ribcage-marks!\ 699}#
                   #{ribcage\ 2536}#
                   (cons (#{wrap-marks\ 673}#
                           (#{syntax-object-wrap\ 634}# #{id\ 2537}#))
                         (#{ribcage-marks\ 693}# #{ribcage\ 2536}#)))
                 (#{set-ribcage-labels!\ 701}#
                   #{ribcage\ 2536}#
                   (cons #{label\ 2538}#
                         (#{ribcage-labels\ 695}# #{ribcage\ 2536}#))))))
           (#{anti-mark\ 707}#
             (lambda (#{w\ 2542}#)
               (#{make-wrap\ 671}#
                 (cons #f (#{wrap-marks\ 673}# #{w\ 2542}#))
                 (cons 'shift
                       (#{wrap-subst\ 675}# #{w\ 2542}#)))))
           (#{set-ribcage-labels!\ 701}#
             (lambda (#{x\ 2545}# #{update\ 2546}#)
               (vector-set! #{x\ 2545}# 3 #{update\ 2546}#)))
           (#{set-ribcage-marks!\ 699}#
             (lambda (#{x\ 2549}# #{update\ 2550}#)
               (vector-set! #{x\ 2549}# 2 #{update\ 2550}#)))
           (#{set-ribcage-symnames!\ 697}#
             (lambda (#{x\ 2553}# #{update\ 2554}#)
               (vector-set! #{x\ 2553}# 1 #{update\ 2554}#)))
           (#{ribcage-labels\ 695}#
             (lambda (#{x\ 2557}#) (vector-ref #{x\ 2557}# 3)))
           (#{ribcage-marks\ 693}#
             (lambda (#{x\ 2559}#) (vector-ref #{x\ 2559}# 2)))
           (#{ribcage-symnames\ 691}#
             (lambda (#{x\ 2561}#) (vector-ref #{x\ 2561}# 1)))
           (#{ribcage?\ 689}#
             (lambda (#{x\ 2563}#)
               (if (vector? #{x\ 2563}#)
                 (if (= (vector-length #{x\ 2563}#) 4)
                   (eq? (vector-ref #{x\ 2563}# 0) (quote ribcage))
                   #f)
                 #f)))
           (#{make-ribcage\ 687}#
             (lambda (#{symnames\ 2568}#
                      #{marks\ 2569}#
                      #{labels\ 2570}#)
               (vector
                 'ribcage
                 #{symnames\ 2568}#
                 #{marks\ 2569}#
                 #{labels\ 2570}#)))
           (#{gen-labels\ 684}#
             (lambda (#{ls\ 2574}#)
               (if (null? #{ls\ 2574}#)
                 '()
                 (cons (#{gen-label\ 682}#)
                       (#{gen-labels\ 684}# (cdr #{ls\ 2574}#))))))
           (#{gen-label\ 682}#
             (lambda () (symbol->string (gensym "i"))))
           (#{wrap-subst\ 675}# cdr)
           (#{wrap-marks\ 673}# car)
           (#{make-wrap\ 671}# cons)
           (#{id-sym-name&marks\ 669}#
             (lambda (#{x\ 2576}# #{w\ 2577}#)
               (if (#{syntax-object?\ 630}# #{x\ 2576}#)
                 (values
                   (#{syntax-object-expression\ 632}# #{x\ 2576}#)
                   (#{join-marks\ 719}#
                     (#{wrap-marks\ 673}# #{w\ 2577}#)
                     (#{wrap-marks\ 673}#
                       (#{syntax-object-wrap\ 634}# #{x\ 2576}#))))
                 (values
                   #{x\ 2576}#
                   (#{wrap-marks\ 673}# #{w\ 2577}#)))))
           (#{id?\ 666}#
             (lambda (#{x\ 2580}#)
               (if (symbol? #{x\ 2580}#)
                 #t
                 (if (#{syntax-object?\ 630}# #{x\ 2580}#)
                   (symbol?
                     (#{syntax-object-expression\ 632}# #{x\ 2580}#))
                   #f))))
           (#{nonsymbol-id?\ 664}#
             (lambda (#{x\ 2587}#)
               (if (#{syntax-object?\ 630}# #{x\ 2587}#)
                 (symbol?
                   (#{syntax-object-expression\ 632}# #{x\ 2587}#))
                 #f)))
           (#{global-extend\ 662}#
             (lambda (#{type\ 2591}# #{sym\ 2592}# #{val\ 2593}#)
               (#{put-global-definition-hook\ 580}#
                 #{sym\ 2592}#
                 #{type\ 2591}#
                 #{val\ 2593}#)))
           (#{lookup\ 660}#
             (lambda (#{x\ 2597}# #{r\ 2598}# #{mod\ 2599}#)
               (let ((#{t\ 2605}# (assq #{x\ 2597}# #{r\ 2598}#)))
                 (if #{t\ 2605}#
                   (cdr #{t\ 2605}#)
                   (if (symbol? #{x\ 2597}#)
                     (let ((#{t\ 2611}#
                             (#{get-global-definition-hook\ 582}#
                               #{x\ 2597}#
                               #{mod\ 2599}#)))
                       (if #{t\ 2611}# #{t\ 2611}# (quote (global))))
                     '(displaced-lexical))))))
           (#{macros-only-env\ 658}#
             (lambda (#{r\ 2616}#)
               (if (null? #{r\ 2616}#)
                 '()
                 (let ((#{a\ 2619}# (car #{r\ 2616}#)))
                   (if (eq? (cadr #{a\ 2619}#) (quote macro))
                     (cons #{a\ 2619}#
                           (#{macros-only-env\ 658}# (cdr #{r\ 2616}#)))
                     (#{macros-only-env\ 658}# (cdr #{r\ 2616}#)))))))
           (#{extend-var-env\ 656}#
             (lambda (#{labels\ 2620}# #{vars\ 2621}# #{r\ 2622}#)
               (if (null? #{labels\ 2620}#)
                 #{r\ 2622}#
                 (#{extend-var-env\ 656}#
                   (cdr #{labels\ 2620}#)
                   (cdr #{vars\ 2621}#)
                   (cons (cons (car #{labels\ 2620}#)
                               (cons (quote lexical) (car #{vars\ 2621}#)))
                         #{r\ 2622}#)))))
           (#{extend-env\ 654}#
             (lambda (#{labels\ 2627}# #{bindings\ 2628}# #{r\ 2629}#)
               (if (null? #{labels\ 2627}#)
                 #{r\ 2629}#
                 (#{extend-env\ 654}#
                   (cdr #{labels\ 2627}#)
                   (cdr #{bindings\ 2628}#)
                   (cons (cons (car #{labels\ 2627}#)
                               (car #{bindings\ 2628}#))
                         #{r\ 2629}#)))))
           (#{binding-value\ 651}# cdr)
           (#{binding-type\ 649}# car)
           (#{source-annotation\ 645}#
             (lambda (#{x\ 2633}#)
               (if (#{syntax-object?\ 630}# #{x\ 2633}#)
                 (#{source-annotation\ 645}#
                   (#{syntax-object-expression\ 632}# #{x\ 2633}#))
                 (if (pair? #{x\ 2633}#)
                   (let ((#{props\ 2640}# (source-properties #{x\ 2633}#)))
                     (if (pair? #{props\ 2640}#) #{props\ 2640}# #f))
                   #f))))
           (#{set-syntax-object-module!\ 642}#
             (lambda (#{x\ 2642}# #{update\ 2643}#)
               (vector-set! #{x\ 2642}# 3 #{update\ 2643}#)))
           (#{set-syntax-object-wrap!\ 640}#
             (lambda (#{x\ 2646}# #{update\ 2647}#)
               (vector-set! #{x\ 2646}# 2 #{update\ 2647}#)))
           (#{set-syntax-object-expression!\ 638}#
             (lambda (#{x\ 2650}# #{update\ 2651}#)
               (vector-set! #{x\ 2650}# 1 #{update\ 2651}#)))
           (#{syntax-object-module\ 636}#
             (lambda (#{x\ 2654}#) (vector-ref #{x\ 2654}# 3)))
           (#{syntax-object-wrap\ 634}#
             (lambda (#{x\ 2656}#) (vector-ref #{x\ 2656}# 2)))
           (#{syntax-object-expression\ 632}#
             (lambda (#{x\ 2658}#) (vector-ref #{x\ 2658}# 1)))
           (#{syntax-object?\ 630}#
             (lambda (#{x\ 2660}#)
               (if (vector? #{x\ 2660}#)
                 (if (= (vector-length #{x\ 2660}#) 4)
                   (eq? (vector-ref #{x\ 2660}# 0)
                        'syntax-object)
                   #f)
                 #f)))
           (#{make-syntax-object\ 628}#
             (lambda (#{expression\ 2665}#
                      #{wrap\ 2666}#
                      #{module\ 2667}#)
               (vector
                 'syntax-object
                 #{expression\ 2665}#
                 #{wrap\ 2666}#
                 #{module\ 2667}#)))
           (#{build-letrec\ 624}#
             (lambda (#{src\ 2671}#
                      #{ids\ 2672}#
                      #{vars\ 2673}#
                      #{val-exps\ 2674}#
                      #{body-exp\ 2675}#)
               (if (null? #{vars\ 2673}#)
                 #{body-exp\ 2675}#
                 (let ((#{atom-key\ 2683}# (fluid-ref #{*mode*\ 565}#)))
                   (if (memv #{atom-key\ 2683}# (quote (c)))
                     (begin
                       (for-each
                         #{maybe-name-value!\ 604}#
                         #{ids\ 2672}#
                         #{val-exps\ 2674}#)
                       ((@ (language tree-il) make-letrec)
                        #{src\ 2671}#
                        #{ids\ 2672}#
                        #{vars\ 2673}#
                        #{val-exps\ 2674}#
                        #{body-exp\ 2675}#))
                     (#{decorate-source\ 584}#
                       (list 'letrec
                             (map list #{vars\ 2673}# #{val-exps\ 2674}#)
                             #{body-exp\ 2675}#)
                       #{src\ 2671}#))))))
           (#{build-named-let\ 622}#
             (lambda (#{src\ 2687}#
                      #{ids\ 2688}#
                      #{vars\ 2689}#
                      #{val-exps\ 2690}#
                      #{body-exp\ 2691}#)
               (let ((#{f\ 2701}# (car #{vars\ 2689}#))
                     (#{f-name\ 2702}# (car #{ids\ 2688}#))
                     (#{vars\ 2703}# (cdr #{vars\ 2689}#))
                     (#{ids\ 2704}# (cdr #{ids\ 2688}#)))
                 (let ((#{atom-key\ 2707}# (fluid-ref #{*mode*\ 565}#)))
                   (if (memv #{atom-key\ 2707}# (quote (c)))
                     (let ((#{proc\ 2710}#
                             (#{build-simple-lambda\ 608}#
                               #{src\ 2687}#
                               #{ids\ 2704}#
                               #f
                               #{vars\ 2703}#
                               '()
                               #{body-exp\ 2691}#)))
                       (begin
                         (#{maybe-name-value!\ 604}#
                           #{f-name\ 2702}#
                           #{proc\ 2710}#)
                         (for-each
                           #{maybe-name-value!\ 604}#
                           #{ids\ 2704}#
                           #{val-exps\ 2690}#)
                         ((@ (language tree-il) make-letrec)
                          #{src\ 2687}#
                          (list #{f-name\ 2702}#)
                          (list #{f\ 2701}#)
                          (list #{proc\ 2710}#)
                          (#{build-application\ 588}#
                            #{src\ 2687}#
                            (#{build-lexical-reference\ 594}#
                              'fun
                              #{src\ 2687}#
                              #{f-name\ 2702}#
                              #{f\ 2701}#)
                            #{val-exps\ 2690}#))))
                     (#{decorate-source\ 584}#
                       (list 'letrec
                             (list (list #{f\ 2701}#
                                         (list 'lambda
                                               #{vars\ 2703}#
                                               #{body-exp\ 2691}#)))
                             (cons #{f\ 2701}# #{val-exps\ 2690}#))
                       #{src\ 2687}#))))))
           (#{build-let\ 620}#
             (lambda (#{src\ 2713}#
                      #{ids\ 2714}#
                      #{vars\ 2715}#
                      #{val-exps\ 2716}#
                      #{body-exp\ 2717}#)
               (if (null? #{vars\ 2715}#)
                 #{body-exp\ 2717}#
                 (let ((#{atom-key\ 2725}# (fluid-ref #{*mode*\ 565}#)))
                   (if (memv #{atom-key\ 2725}# (quote (c)))
                     (begin
                       (for-each
                         #{maybe-name-value!\ 604}#
                         #{ids\ 2714}#
                         #{val-exps\ 2716}#)
                       ((@ (language tree-il) make-let)
                        #{src\ 2713}#
                        #{ids\ 2714}#
                        #{vars\ 2715}#
                        #{val-exps\ 2716}#
                        #{body-exp\ 2717}#))
                     (#{decorate-source\ 584}#
                       (list 'let
                             (map list #{vars\ 2715}# #{val-exps\ 2716}#)
                             #{body-exp\ 2717}#)
                       #{src\ 2713}#))))))
           (#{build-sequence\ 618}#
             (lambda (#{src\ 2729}# #{exps\ 2730}#)
               (if (null? (cdr #{exps\ 2730}#))
                 (car #{exps\ 2730}#)
                 (let ((#{atom-key\ 2735}# (fluid-ref #{*mode*\ 565}#)))
                   (if (memv #{atom-key\ 2735}# (quote (c)))
                     ((@ (language tree-il) make-sequence)
                      #{src\ 2729}#
                      #{exps\ 2730}#)
                     (#{decorate-source\ 584}#
                       (cons (quote begin) #{exps\ 2730}#)
                       #{src\ 2729}#))))))
           (#{build-data\ 616}#
             (lambda (#{src\ 2739}# #{exp\ 2740}#)
               (let ((#{atom-key\ 2745}# (fluid-ref #{*mode*\ 565}#)))
                 (if (memv #{atom-key\ 2745}# (quote (c)))
                   ((@ (language tree-il) make-const)
                    #{src\ 2739}#
                    #{exp\ 2740}#)
                   (#{decorate-source\ 584}#
                     (if (if (self-evaluating? #{exp\ 2740}#)
                           (not (vector? #{exp\ 2740}#))
                           #f)
                       #{exp\ 2740}#
                       (list (quote quote) #{exp\ 2740}#))
                     #{src\ 2739}#)))))
           (#{build-primref\ 614}#
             (lambda (#{src\ 2750}# #{name\ 2751}#)
               (if (equal?
                     (module-name (current-module))
                     '(guile))
                 (let ((#{atom-key\ 2756}# (fluid-ref #{*mode*\ 565}#)))
                   (if (memv #{atom-key\ 2756}# (quote (c)))
                     ((@ (language tree-il) make-toplevel-ref)
                      #{src\ 2750}#
                      #{name\ 2751}#)
                     (#{decorate-source\ 584}#
                       #{name\ 2751}#
                       #{src\ 2750}#)))
                 (let ((#{atom-key\ 2761}# (fluid-ref #{*mode*\ 565}#)))
                   (if (memv #{atom-key\ 2761}# (quote (c)))
                     ((@ (language tree-il) make-module-ref)
                      #{src\ 2750}#
                      '(guile)
                      #{name\ 2751}#
                      #f)
                     (#{decorate-source\ 584}#
                       (list (quote @@) (quote (guile)) #{name\ 2751}#)
                       #{src\ 2750}#))))))
           (#{build-lambda-case\ 612}#
             (lambda (#{src\ 2765}#
                      #{req\ 2766}#
                      #{opt\ 2767}#
                      #{rest\ 2768}#
                      #{kw\ 2769}#
                      #{inits\ 2770}#
                      #{vars\ 2771}#
                      #{body\ 2772}#
                      #{else-case\ 2773}#)
               (let ((#{atom-key\ 2785}# (fluid-ref #{*mode*\ 565}#)))
                 (if (memv #{atom-key\ 2785}# (quote (c)))
                   ((@ (language tree-il) make-lambda-case)
                    #{src\ 2765}#
                    #{req\ 2766}#
                    #{opt\ 2767}#
                    #{rest\ 2768}#
                    #{kw\ 2769}#
                    #{inits\ 2770}#
                    #{vars\ 2771}#
                    #{body\ 2772}#
                    #{else-case\ 2773}#)
                   (let ((#{nreq\ 2790}# (length #{req\ 2766}#)))
                     (let ((#{nopt\ 2792}#
                             (if #{opt\ 2767}# (length #{opt\ 2767}#) 0)))
                       (let ((#{rest-idx\ 2794}#
                               (if #{rest\ 2768}#
                                 (+ #{nreq\ 2790}# #{nopt\ 2792}#)
                                 #f)))
                         (let ((#{allow-other-keys?\ 2798}#
                                 (if #{kw\ 2769}# (car #{kw\ 2769}#) #f)))
                           (let ((#{kw-indices\ 2800}#
                                   (map (lambda (#{x\ 2801}#)
                                          (cons (car #{x\ 2801}#)
                                                (list-index
                                                  #{vars\ 2771}#
                                                  (caddr #{x\ 2801}#))))
                                        (if #{kw\ 2769}#
                                          (cdr #{kw\ 2769}#)
                                          '()))))
                             (let ((#{nargs\ 2804}#
                                     (apply max
                                            (+ #{nreq\ 2790}#
                                               #{nopt\ 2792}#
                                               (if #{rest\ 2768}# 1 0))
                                            (map 1+
                                                 (map cdr
                                                      #{kw-indices\ 2800}#)))))
                               (begin
                                 (let ((#{t\ 2807}#
                                         (= #{nargs\ 2804}#
                                            (length #{vars\ 2771}#)
                                            (+ #{nreq\ 2790}#
                                               (length #{inits\ 2770}#)
                                               (if #{rest\ 2768}# 1 0)))))
                                   (if #{t\ 2807}#
                                     #{t\ 2807}#
                                     (error "something went wrong"
                                            #{req\ 2766}#
                                            #{opt\ 2767}#
                                            #{rest\ 2768}#
                                            #{kw\ 2769}#
                                            #{inits\ 2770}#
                                            #{vars\ 2771}#
                                            #{nreq\ 2790}#
                                            #{nopt\ 2792}#
                                            #{kw-indices\ 2800}#
                                            #{nargs\ 2804}#)))
                                 (#{decorate-source\ 584}#
                                   (cons (list (append
                                                 (list-head
                                                   #{vars\ 2771}#
                                                   #{nreq\ 2790}#)
                                                 (append
                                                   (if #{opt\ 2767}#
                                                     (cons #:optional
                                                           (map list
                                                                (list-head
                                                                  (list-tail
                                                                    #{vars\ 2771}#
                                                                    #{nreq\ 2790}#)
                                                                  #{nopt\ 2792}#)
                                                                (list-head
                                                                  #{inits\ 2770}#
                                                                  #{nopt\ 2792}#)))
                                                     '())
                                                   (append
                                                     (if #{kw\ 2769}#
                                                       (cons #:key
                                                             (map (lambda (#{x\ 2812}#
                                                                           #{init\ 2813}#)
                                                                    (list (caddr #{x\ 2812}#)
                                                                          #{init\ 2813}#
                                                                          (car #{x\ 2812}#)))
                                                                  (cdr #{kw\ 2769}#)
                                                                  (list-tail
                                                                    #{inits\ 2770}#
                                                                    #{nopt\ 2792}#)))
                                                       '())
                                                     (append
                                                       (if #{allow-other-keys?\ 2798}#
                                                         '(#:allow-other-keys)
                                                         '())
                                                       (if #{rest\ 2768}#
                                                         (list-ref
                                                           #{vars\ 2771}#
                                                           #{rest-idx\ 2794}#)
                                                         '())))))
                                               #{body\ 2772}#)
                                         (let ((#{t\ 2818}#
                                                 #{else-case\ 2773}#))
                                           (if #{t\ 2818}#
                                             #{t\ 2818}#
                                             '())))
                                   #{src\ 2765}#))))))))))))
           (#{build-case-lambda\ 610}#
             (lambda (#{src\ 2820}# #{meta\ 2821}# #{body\ 2822}#)
               (let ((#{atom-key\ 2828}# (fluid-ref #{*mode*\ 565}#)))
                 (if (memv #{atom-key\ 2828}# (quote (c)))
                   ((@ (language tree-il) make-lambda)
                    #{src\ 2820}#
                    #{meta\ 2821}#
                    #{body\ 2822}#)
                   (#{decorate-source\ 584}#
                     (cons (quote case-lambda*) #{body\ 2822}#)
                     #{src\ 2820}#)))))
           (#{build-simple-lambda\ 608}#
             (lambda (#{src\ 2832}#
                      #{req\ 2833}#
                      #{rest\ 2834}#
                      #{vars\ 2835}#
                      #{meta\ 2836}#
                      #{exp\ 2837}#)
               (let ((#{atom-key\ 2846}# (fluid-ref #{*mode*\ 565}#)))
                 (if (memv #{atom-key\ 2846}# (quote (c)))
                   ((@ (language tree-il) make-lambda)
                    #{src\ 2832}#
                    #{meta\ 2836}#
                    ((@ (language tree-il) make-lambda-case)
                     #{src\ 2832}#
                     #{req\ 2833}#
                     #f
                     #{rest\ 2834}#
                     #f
                     '()
                     #{vars\ 2835}#
                     #{exp\ 2837}#
                     #f))
                   (#{decorate-source\ 584}#
                     (list 'lambda
                           (if #{rest\ 2834}#
                             (apply cons* #{vars\ 2835}#)
                             #{vars\ 2835}#)
                           #{exp\ 2837}#)
                     #{src\ 2832}#)))))
           (#{build-global-definition\ 606}#
             (lambda (#{source\ 2850}# #{var\ 2851}# #{exp\ 2852}#)
               (let ((#{atom-key\ 2858}# (fluid-ref #{*mode*\ 565}#)))
                 (if (memv #{atom-key\ 2858}# (quote (c)))
                   (begin
                     (#{maybe-name-value!\ 604}#
                       #{var\ 2851}#
                       #{exp\ 2852}#)
                     ((@ (language tree-il) make-toplevel-define)
                      #{source\ 2850}#
                      #{var\ 2851}#
                      #{exp\ 2852}#))
                   (#{decorate-source\ 584}#
                     (list (quote define) #{var\ 2851}# #{exp\ 2852}#)
                     #{source\ 2850}#)))))
           (#{maybe-name-value!\ 604}#
             (lambda (#{name\ 2862}# #{val\ 2863}#)
               (if ((@ (language tree-il) lambda?) #{val\ 2863}#)
                 (let ((#{meta\ 2869}#
                         ((@ (language tree-il) lambda-meta)
                          #{val\ 2863}#)))
                   (if (not (assq (quote name) #{meta\ 2869}#))
                     ((setter (@ (language tree-il) lambda-meta))
                      #{val\ 2863}#
                      (acons 'name
                             #{name\ 2862}#
                             #{meta\ 2869}#)))))))
           (#{build-global-assignment\ 602}#
             (lambda (#{source\ 2870}#
                      #{var\ 2871}#
                      #{exp\ 2872}#
                      #{mod\ 2873}#)
               (#{analyze-variable\ 598}#
                 #{mod\ 2873}#
                 #{var\ 2871}#
                 (lambda (#{mod\ 2878}# #{var\ 2879}# #{public?\ 2880}#)
                   (let ((#{atom-key\ 2886}# (fluid-ref #{*mode*\ 565}#)))
                     (if (memv #{atom-key\ 2886}# (quote (c)))
                       ((@ (language tree-il) make-module-set)
                        #{source\ 2870}#
                        #{mod\ 2878}#
                        #{var\ 2879}#
                        #{public?\ 2880}#
                        #{exp\ 2872}#)
                       (#{decorate-source\ 584}#
                         (list 'set!
                               (list (if #{public?\ 2880}#
                                       '@
                                       '@@)
                                     #{mod\ 2878}#
                                     #{var\ 2879}#)
                               #{exp\ 2872}#)
                         #{source\ 2870}#))))
                 (lambda (#{var\ 2890}#)
                   (let ((#{atom-key\ 2894}# (fluid-ref #{*mode*\ 565}#)))
                     (if (memv #{atom-key\ 2894}# (quote (c)))
                       ((@ (language tree-il) make-toplevel-set)
                        #{source\ 2870}#
                        #{var\ 2890}#
                        #{exp\ 2872}#)
                       (#{decorate-source\ 584}#
                         (list (quote set!) #{var\ 2890}# #{exp\ 2872}#)
                         #{source\ 2870}#)))))))
           (#{build-global-reference\ 600}#
             (lambda (#{source\ 2898}# #{var\ 2899}# #{mod\ 2900}#)
               (#{analyze-variable\ 598}#
                 #{mod\ 2900}#
                 #{var\ 2899}#
                 (lambda (#{mod\ 2904}# #{var\ 2905}# #{public?\ 2906}#)
                   (let ((#{atom-key\ 2912}# (fluid-ref #{*mode*\ 565}#)))
                     (if (memv #{atom-key\ 2912}# (quote (c)))
                       ((@ (language tree-il) make-module-ref)
                        #{source\ 2898}#
                        #{mod\ 2904}#
                        #{var\ 2905}#
                        #{public?\ 2906}#)
                       (#{decorate-source\ 584}#
                         (list (if #{public?\ 2906}# (quote @) (quote @@))
                               #{mod\ 2904}#
                               #{var\ 2905}#)
                         #{source\ 2898}#))))
                 (lambda (#{var\ 2915}#)
                   (let ((#{atom-key\ 2919}# (fluid-ref #{*mode*\ 565}#)))
                     (if (memv #{atom-key\ 2919}# (quote (c)))
                       ((@ (language tree-il) make-toplevel-ref)
                        #{source\ 2898}#
                        #{var\ 2915}#)
                       (#{decorate-source\ 584}#
                         #{var\ 2915}#
                         #{source\ 2898}#)))))))
           (#{analyze-variable\ 598}#
             (lambda (#{mod\ 2922}#
                      #{var\ 2923}#
                      #{modref-cont\ 2924}#
                      #{bare-cont\ 2925}#)
               (if (not #{mod\ 2922}#)
                 (#{bare-cont\ 2925}# #{var\ 2923}#)
                 (let ((#{kind\ 2932}# (car #{mod\ 2922}#))
                       (#{mod\ 2933}# (cdr #{mod\ 2922}#)))
                   (if (memv #{kind\ 2932}# (quote (public)))
                     (#{modref-cont\ 2924}#
                       #{mod\ 2933}#
                       #{var\ 2923}#
                       #t)
                     (if (memv #{kind\ 2932}# (quote (private)))
                       (if (not (equal?
                                  #{mod\ 2933}#
                                  (module-name (current-module))))
                         (#{modref-cont\ 2924}#
                           #{mod\ 2933}#
                           #{var\ 2923}#
                           #f)
                         (#{bare-cont\ 2925}# #{var\ 2923}#))
                       (if (memv #{kind\ 2932}# (quote (bare)))
                         (#{bare-cont\ 2925}# #{var\ 2923}#)
                         (if (memv #{kind\ 2932}# (quote (hygiene)))
                           (if (if (not (equal?
                                          #{mod\ 2933}#
                                          (module-name (current-module))))
                                 (module-variable
                                   (resolve-module #{mod\ 2933}#)
                                   #{var\ 2923}#)
                                 #f)
                             (#{modref-cont\ 2924}#
                               #{mod\ 2933}#
                               #{var\ 2923}#
                               #f)
                             (#{bare-cont\ 2925}# #{var\ 2923}#))
                           (syntax-violation
                             #f
                             "bad module kind"
                             #{var\ 2923}#
                             #{mod\ 2933}#)))))))))
           (#{build-lexical-assignment\ 596}#
             (lambda (#{source\ 2941}#
                      #{name\ 2942}#
                      #{var\ 2943}#
                      #{exp\ 2944}#)
               (let ((#{atom-key\ 2951}# (fluid-ref #{*mode*\ 565}#)))
                 (if (memv #{atom-key\ 2951}# (quote (c)))
                   ((@ (language tree-il) make-lexical-set)
                    #{source\ 2941}#
                    #{name\ 2942}#
                    #{var\ 2943}#
                    #{exp\ 2944}#)
                   (#{decorate-source\ 584}#
                     (list (quote set!) #{var\ 2943}# #{exp\ 2944}#)
                     #{source\ 2941}#)))))
           (#{build-lexical-reference\ 594}#
             (lambda (#{type\ 2955}#
                      #{source\ 2956}#
                      #{name\ 2957}#
                      #{var\ 2958}#)
               (let ((#{atom-key\ 2965}# (fluid-ref #{*mode*\ 565}#)))
                 (if (memv #{atom-key\ 2965}# (quote (c)))
                   ((@ (language tree-il) make-lexical-ref)
                    #{source\ 2956}#
                    #{name\ 2957}#
                    #{var\ 2958}#)
                   (#{decorate-source\ 584}#
                     #{var\ 2958}#
                     #{source\ 2956}#)))))
           (#{build-dynlet\ 592}#
             (lambda (#{source\ 2968}#
                      #{fluids\ 2969}#
                      #{vals\ 2970}#
                      #{body\ 2971}#)
               (let ((#{atom-key\ 2978}# (fluid-ref #{*mode*\ 565}#)))
                 (if (memv #{atom-key\ 2978}# (quote (c)))
                   ((@ (language tree-il) make-dynlet)
                    #{source\ 2968}#
                    #{fluids\ 2969}#
                    #{vals\ 2970}#
                    #{body\ 2971}#)
                   (#{decorate-source\ 584}#
                     (list 'with-fluids
                           (map list #{fluids\ 2969}# #{vals\ 2970}#)
                           #{body\ 2971}#)
                     #{source\ 2968}#)))))
           (#{build-conditional\ 590}#
             (lambda (#{source\ 2982}#
                      #{test-exp\ 2983}#
                      #{then-exp\ 2984}#
                      #{else-exp\ 2985}#)
               (let ((#{atom-key\ 2992}# (fluid-ref #{*mode*\ 565}#)))
                 (if (memv #{atom-key\ 2992}# (quote (c)))
                   ((@ (language tree-il) make-conditional)
                    #{source\ 2982}#
                    #{test-exp\ 2983}#
                    #{then-exp\ 2984}#
                    #{else-exp\ 2985}#)
                   (#{decorate-source\ 584}#
                     (if (equal? #{else-exp\ 2985}# (quote (if #f #f)))
                       (list 'if
                             #{test-exp\ 2983}#
                             #{then-exp\ 2984}#)
                       (list 'if
                             #{test-exp\ 2983}#
                             #{then-exp\ 2984}#
                             #{else-exp\ 2985}#))
                     #{source\ 2982}#)))))
           (#{build-application\ 588}#
             (lambda (#{source\ 2997}#
                      #{fun-exp\ 2998}#
                      #{arg-exps\ 2999}#)
               (let ((#{atom-key\ 3005}# (fluid-ref #{*mode*\ 565}#)))
                 (if (memv #{atom-key\ 3005}# (quote (c)))
                   ((@ (language tree-il) make-application)
                    #{source\ 2997}#
                    #{fun-exp\ 2998}#
                    #{arg-exps\ 2999}#)
                   (#{decorate-source\ 584}#
                     (cons #{fun-exp\ 2998}# #{arg-exps\ 2999}#)
                     #{source\ 2997}#)))))
           (#{build-void\ 586}#
             (lambda (#{source\ 3009}#)
               (let ((#{atom-key\ 3013}# (fluid-ref #{*mode*\ 565}#)))
                 (if (memv #{atom-key\ 3013}# (quote (c)))
                   ((@ (language tree-il) make-void)
                    #{source\ 3009}#)
                   (#{decorate-source\ 584}#
                     '(if #f #f)
                     #{source\ 3009}#)))))
           (#{decorate-source\ 584}#
             (lambda (#{e\ 3016}# #{s\ 3017}#)
               (begin
                 (if (if (pair? #{e\ 3016}#) #{s\ 3017}# #f)
                   (set-source-properties! #{e\ 3016}# #{s\ 3017}#))
                 #{e\ 3016}#)))
           (#{get-global-definition-hook\ 582}#
             (lambda (#{symbol\ 3022}# #{module\ 3023}#)
               (begin
                 (if (if (not #{module\ 3023}#) (current-module) #f)
                   (warn "module system is booted, we should have a module"
                         #{symbol\ 3022}#))
                 (let ((#{v\ 3029}#
                         (module-variable
                           (if #{module\ 3023}#
                             (resolve-module (cdr #{module\ 3023}#))
                             (current-module))
                           #{symbol\ 3022}#)))
                   (if #{v\ 3029}#
                     (if (variable-bound? #{v\ 3029}#)
                       (let ((#{val\ 3034}# (variable-ref #{v\ 3029}#)))
                         (if (macro? #{val\ 3034}#)
                           (if (macro-type #{val\ 3034}#)
                             (cons (macro-type #{val\ 3034}#)
                                   (macro-binding #{val\ 3034}#))
                             #f)
                           #f))
                       #f)
                     #f)))))
           (#{put-global-definition-hook\ 580}#
             (lambda (#{symbol\ 3038}# #{type\ 3039}# #{val\ 3040}#)
               (module-define!
                 (current-module)
                 #{symbol\ 3038}#
                 (make-syntax-transformer
                   #{symbol\ 3038}#
                   #{type\ 3039}#
                   #{val\ 3040}#))))
           (#{local-eval-hook\ 577}#
             (lambda (#{x\ 3044}# #{mod\ 3045}#)
               (primitive-eval
                 (memoize-expression
                   (let ((#{atom-key\ 3050}# (fluid-ref #{*mode*\ 565}#)))
                     (if (memv #{atom-key\ 3050}# (quote (c)))
                       ((@ (language tree-il) tree-il->scheme)
                        #{x\ 3044}#)
                       #{x\ 3044}#))))))
           (#{top-level-eval-hook\ 575}#
             (lambda (#{x\ 3053}# #{mod\ 3054}#)
               (primitive-eval
                 (memoize-expression
                   (let ((#{atom-key\ 3059}# (fluid-ref #{*mode*\ 565}#)))
                     (if (memv #{atom-key\ 3059}# (quote (c)))
                       ((@ (language tree-il) tree-il->scheme)
                        #{x\ 3053}#)
                       #{x\ 3053}#))))))
           (#{fx<\ 573}# <)
           (#{fx=\ 571}# =)
           (#{fx-\ 569}# -)
           (#{fx+\ 567}# +)
           (#{*mode*\ 565}# (make-fluid)))
    (begin
      (#{global-extend\ 662}#
        'local-syntax
        'letrec-syntax
        #t)
      (#{global-extend\ 662}#
        'local-syntax
        'let-syntax
        #f)
      (#{global-extend\ 662}#
        'core
        'fluid-let-syntax
        (lambda (#{e\ 3062}#
                 #{r\ 3063}#
                 #{w\ 3064}#
                 #{s\ 3065}#
                 #{mod\ 3066}#)
          ((lambda (#{tmp\ 3072}#)
             ((lambda (#{tmp\ 3073}#)
                (if (if #{tmp\ 3073}#
                      (apply (lambda (#{_\ 3079}#
                                      #{var\ 3080}#
                                      #{val\ 3081}#
                                      #{e1\ 3082}#
                                      #{e2\ 3083}#)
                               (#{valid-bound-ids?\ 729}# #{var\ 3080}#))
                             #{tmp\ 3073}#)
                      #f)
                  (apply (lambda (#{_\ 3090}#
                                  #{var\ 3091}#
                                  #{val\ 3092}#
                                  #{e1\ 3093}#
                                  #{e2\ 3094}#)
                           (let ((#{names\ 3096}#
                                   (map (lambda (#{x\ 3097}#)
                                          (#{id-var-name\ 723}#
                                            #{x\ 3097}#
                                            #{w\ 3064}#))
                                        #{var\ 3091}#)))
                             (begin
                               (for-each
                                 (lambda (#{id\ 3100}# #{n\ 3101}#)
                                   (let ((#{atom-key\ 3106}#
                                           (#{binding-type\ 649}#
                                             (#{lookup\ 660}#
                                               #{n\ 3101}#
                                               #{r\ 3063}#
                                               #{mod\ 3066}#))))
                                     (if (memv #{atom-key\ 3106}#
                                               '(displaced-lexical))
                                       (syntax-violation
                                         'fluid-let-syntax
                                         "identifier out of context"
                                         #{e\ 3062}#
                                         (#{source-wrap\ 737}#
                                           #{id\ 3100}#
                                           #{w\ 3064}#
                                           #{s\ 3065}#
                                           #{mod\ 3066}#)))))
                                 #{var\ 3091}#
                                 #{names\ 3096}#)
                               (#{chi-body\ 759}#
                                 (cons #{e1\ 3093}# #{e2\ 3094}#)
                                 (#{source-wrap\ 737}#
                                   #{e\ 3062}#
                                   #{w\ 3064}#
                                   #{s\ 3065}#
                                   #{mod\ 3066}#)
                                 (#{extend-env\ 654}#
                                   #{names\ 3096}#
                                   (let ((#{trans-r\ 3111}#
                                           (#{macros-only-env\ 658}#
                                             #{r\ 3063}#)))
                                     (map (lambda (#{x\ 3112}#)
                                            (cons 'macro
                                                  (#{eval-local-transformer\ 763}#
                                                    (#{chi\ 751}#
                                                      #{x\ 3112}#
                                                      #{trans-r\ 3111}#
                                                      #{w\ 3064}#
                                                      #{mod\ 3066}#)
                                                    #{mod\ 3066}#)))
                                          #{val\ 3092}#))
                                   #{r\ 3063}#)
                                 #{w\ 3064}#
                                 #{mod\ 3066}#))))
                         #{tmp\ 3073}#)
                  ((lambda (#{_\ 3117}#)
                     (syntax-violation
                       'fluid-let-syntax
                       "bad syntax"
                       (#{source-wrap\ 737}#
                         #{e\ 3062}#
                         #{w\ 3064}#
                         #{s\ 3065}#
                         #{mod\ 3066}#)))
                   #{tmp\ 3072}#)))
              ($sc-dispatch
                #{tmp\ 3072}#
                '(any #(each (any any)) any . each-any))))
           #{e\ 3062}#)))
      (#{global-extend\ 662}#
        'core
        'quote
        (lambda (#{e\ 3118}#
                 #{r\ 3119}#
                 #{w\ 3120}#
                 #{s\ 3121}#
                 #{mod\ 3122}#)
          ((lambda (#{tmp\ 3128}#)
             ((lambda (#{tmp\ 3129}#)
                (if #{tmp\ 3129}#
                  (apply (lambda (#{_\ 3132}# #{e\ 3133}#)
                           (#{build-data\ 616}#
                             #{s\ 3121}#
                             (#{strip\ 777}# #{e\ 3133}# #{w\ 3120}#)))
                         #{tmp\ 3129}#)
                  ((lambda (#{_\ 3135}#)
                     (syntax-violation
                       'quote
                       "bad syntax"
                       (#{source-wrap\ 737}#
                         #{e\ 3118}#
                         #{w\ 3120}#
                         #{s\ 3121}#
                         #{mod\ 3122}#)))
                   #{tmp\ 3128}#)))
              ($sc-dispatch #{tmp\ 3128}# (quote (any any)))))
           #{e\ 3118}#)))
      (#{global-extend\ 662}#
        'core
        'syntax
        (letrec ((#{regen\ 3151}#
                   (lambda (#{x\ 3152}#)
                     (let ((#{atom-key\ 3156}# (car #{x\ 3152}#)))
                       (if (memv #{atom-key\ 3156}# (quote (ref)))
                         (#{build-lexical-reference\ 594}#
                           'value
                           #f
                           (cadr #{x\ 3152}#)
                           (cadr #{x\ 3152}#))
                         (if (memv #{atom-key\ 3156}# (quote (primitive)))
                           (#{build-primref\ 614}# #f (cadr #{x\ 3152}#))
                           (if (memv #{atom-key\ 3156}# (quote (quote)))
                             (#{build-data\ 616}# #f (cadr #{x\ 3152}#))
                             (if (memv #{atom-key\ 3156}# (quote (lambda)))
                               (if (list? (cadr #{x\ 3152}#))
                                 (#{build-simple-lambda\ 608}#
                                   #f
                                   (cadr #{x\ 3152}#)
                                   #f
                                   (cadr #{x\ 3152}#)
                                   '()
                                   (#{regen\ 3151}# (caddr #{x\ 3152}#)))
                                 (error "how did we get here" #{x\ 3152}#))
                               (#{build-application\ 588}#
                                 #f
                                 (#{build-primref\ 614}# #f (car #{x\ 3152}#))
                                 (map #{regen\ 3151}#
                                      (cdr #{x\ 3152}#))))))))))
                 (#{gen-vector\ 3149}#
                   (lambda (#{x\ 3168}#)
                     (if (eq? (car #{x\ 3168}#) (quote list))
                       (cons (quote vector) (cdr #{x\ 3168}#))
                       (if (eq? (car #{x\ 3168}#) (quote quote))
                         (list 'quote
                               (list->vector (cadr #{x\ 3168}#)))
                         (list (quote list->vector) #{x\ 3168}#)))))
                 (#{gen-append\ 3147}#
                   (lambda (#{x\ 3178}# #{y\ 3179}#)
                     (if (equal? #{y\ 3179}# (quote (quote ())))
                       #{x\ 3178}#
                       (list (quote append) #{x\ 3178}# #{y\ 3179}#))))
                 (#{gen-cons\ 3145}#
                   (lambda (#{x\ 3183}# #{y\ 3184}#)
                     (let ((#{atom-key\ 3189}# (car #{y\ 3184}#)))
                       (if (memv #{atom-key\ 3189}# (quote (quote)))
                         (if (eq? (car #{x\ 3183}#) (quote quote))
                           (list 'quote
                                 (cons (cadr #{x\ 3183}#) (cadr #{y\ 3184}#)))
                           (if (eq? (cadr #{y\ 3184}#) (quote ()))
                             (list (quote list) #{x\ 3183}#)
                             (list (quote cons) #{x\ 3183}# #{y\ 3184}#)))
                         (if (memv #{atom-key\ 3189}# (quote (list)))
                           (cons 'list
                                 (cons #{x\ 3183}# (cdr #{y\ 3184}#)))
                           (list (quote cons) #{x\ 3183}# #{y\ 3184}#))))))
                 (#{gen-map\ 3143}#
                   (lambda (#{e\ 3198}# #{map-env\ 3199}#)
                     (let ((#{formals\ 3204}# (map cdr #{map-env\ 3199}#))
                           (#{actuals\ 3205}#
                             (map (lambda (#{x\ 3206}#)
                                    (list (quote ref) (car #{x\ 3206}#)))
                                  #{map-env\ 3199}#)))
                       (if (eq? (car #{e\ 3198}#) (quote ref))
                         (car #{actuals\ 3205}#)
                         (if (and-map
                               (lambda (#{x\ 3213}#)
                                 (if (eq? (car #{x\ 3213}#) (quote ref))
                                   (memq (cadr #{x\ 3213}#) #{formals\ 3204}#)
                                   #f))
                               (cdr #{e\ 3198}#))
                           (cons 'map
                                 (cons (list 'primitive
                                             (car #{e\ 3198}#))
                                       (map (let ((#{r\ 3219}#
                                                    (map cons
                                                         #{formals\ 3204}#
                                                         #{actuals\ 3205}#)))
                                              (lambda (#{x\ 3220}#)
                                                (cdr (assq (cadr #{x\ 3220}#)
                                                           #{r\ 3219}#))))
                                            (cdr #{e\ 3198}#))))
                           (cons 'map
                                 (cons (list 'lambda
                                             #{formals\ 3204}#
                                             #{e\ 3198}#)
                                       #{actuals\ 3205}#)))))))
                 (#{gen-mappend\ 3141}#
                   (lambda (#{e\ 3224}# #{map-env\ 3225}#)
                     (list 'apply
                           '(primitive append)
                           (#{gen-map\ 3143}# #{e\ 3224}# #{map-env\ 3225}#))))
                 (#{gen-ref\ 3139}#
                   (lambda (#{src\ 3229}#
                            #{var\ 3230}#
                            #{level\ 3231}#
                            #{maps\ 3232}#)
                     (if (#{fx=\ 571}# #{level\ 3231}# 0)
                       (values #{var\ 3230}# #{maps\ 3232}#)
                       (if (null? #{maps\ 3232}#)
                         (syntax-violation
                           'syntax
                           "missing ellipsis"
                           #{src\ 3229}#)
                         (call-with-values
                           (lambda ()
                             (#{gen-ref\ 3139}#
                               #{src\ 3229}#
                               #{var\ 3230}#
                               (#{fx-\ 569}# #{level\ 3231}# 1)
                               (cdr #{maps\ 3232}#)))
                           (lambda (#{outer-var\ 3237}# #{outer-maps\ 3238}#)
                             (let ((#{b\ 3242}#
                                     (assq #{outer-var\ 3237}#
                                           (car #{maps\ 3232}#))))
                               (if #{b\ 3242}#
                                 (values (cdr #{b\ 3242}#) #{maps\ 3232}#)
                                 (let ((#{inner-var\ 3244}#
                                         (#{gen-var\ 779}# (quote tmp))))
                                   (values
                                     #{inner-var\ 3244}#
                                     (cons (cons (cons #{outer-var\ 3237}#
                                                       #{inner-var\ 3244}#)
                                                 (car #{maps\ 3232}#))
                                           #{outer-maps\ 3238}#)))))))))))
                 (#{gen-syntax\ 3137}#
                   (lambda (#{src\ 3245}#
                            #{e\ 3246}#
                            #{r\ 3247}#
                            #{maps\ 3248}#
                            #{ellipsis?\ 3249}#
                            #{mod\ 3250}#)
                     (if (#{id?\ 666}# #{e\ 3246}#)
                       (let ((#{label\ 3258}#
                               (#{id-var-name\ 723}#
                                 #{e\ 3246}#
                                 '(()))))
                         (let ((#{b\ 3261}#
                                 (#{lookup\ 660}#
                                   #{label\ 3258}#
                                   #{r\ 3247}#
                                   #{mod\ 3250}#)))
                           (if (eq? (#{binding-type\ 649}# #{b\ 3261}#)
                                    'syntax)
                             (call-with-values
                               (lambda ()
                                 (let ((#{var.lev\ 3263}#
                                         (#{binding-value\ 651}# #{b\ 3261}#)))
                                   (#{gen-ref\ 3139}#
                                     #{src\ 3245}#
                                     (car #{var.lev\ 3263}#)
                                     (cdr #{var.lev\ 3263}#)
                                     #{maps\ 3248}#)))
                               (lambda (#{var\ 3264}# #{maps\ 3265}#)
                                 (values
                                   (list (quote ref) #{var\ 3264}#)
                                   #{maps\ 3265}#)))
                             (if (#{ellipsis?\ 3249}# #{e\ 3246}#)
                               (syntax-violation
                                 'syntax
                                 "misplaced ellipsis"
                                 #{src\ 3245}#)
                               (values
                                 (list (quote quote) #{e\ 3246}#)
                                 #{maps\ 3248}#)))))
                       ((lambda (#{tmp\ 3270}#)
                          ((lambda (#{tmp\ 3271}#)
                             (if (if #{tmp\ 3271}#
                                   (apply (lambda (#{dots\ 3274}# #{e\ 3275}#)
                                            (#{ellipsis?\ 3249}#
                                              #{dots\ 3274}#))
                                          #{tmp\ 3271}#)
                                   #f)
                               (apply (lambda (#{dots\ 3278}# #{e\ 3279}#)
                                        (#{gen-syntax\ 3137}#
                                          #{src\ 3245}#
                                          #{e\ 3279}#
                                          #{r\ 3247}#
                                          #{maps\ 3248}#
                                          (lambda (#{x\ 3280}#) #f)
                                          #{mod\ 3250}#))
                                      #{tmp\ 3271}#)
                               ((lambda (#{tmp\ 3282}#)
                                  (if (if #{tmp\ 3282}#
                                        (apply (lambda (#{x\ 3286}#
                                                        #{dots\ 3287}#
                                                        #{y\ 3288}#)
                                                 (#{ellipsis?\ 3249}#
                                                   #{dots\ 3287}#))
                                               #{tmp\ 3282}#)
                                        #f)
                                    (apply (lambda (#{x\ 3292}#
                                                    #{dots\ 3293}#
                                                    #{y\ 3294}#)
                                             (letrec ((#{f\ 3298}#
                                                        (lambda (#{y\ 3299}#
                                                                 #{k\ 3300}#)
                                                          ((lambda (#{tmp\ 3307}#)
                                                             ((lambda (#{tmp\ 3308}#)
                                                                (if (if #{tmp\ 3308}#
                                                                      (apply (lambda (#{dots\ 3311}#
                                                                                      #{y\ 3312}#)
                                                                               (#{ellipsis?\ 3249}#
                                                                                 #{dots\ 3311}#))
                                                                             #{tmp\ 3308}#)
                                                                      #f)
                                                                  (apply (lambda (#{dots\ 3315}#
                                                                                  #{y\ 3316}#)
                                                                           (#{f\ 3298}#
                                                                             #{y\ 3316}#
                                                                             (lambda (#{maps\ 3317}#)
                                                                               (call-with-values
                                                                                 (lambda ()
                                                                                   (#{k\ 3300}#
                                                                                     (cons '()
                                                                                           #{maps\ 3317}#)))
                                                                                 (lambda (#{x\ 3319}#
                                                                                          #{maps\ 3320}#)
                                                                                   (if (null? (car #{maps\ 3320}#))
                                                                                     (syntax-violation
                                                                                       'syntax
                                                                                       "extra ellipsis"
                                                                                       #{src\ 3245}#)
                                                                                     (values
                                                                                       (#{gen-mappend\ 3141}#
                                                                                         #{x\ 3319}#
                                                                                         (car #{maps\ 3320}#))
                                                                                       (cdr #{maps\ 3320}#))))))))
                                                                         #{tmp\ 3308}#)
                                                                  ((lambda (#{_\ 3324}#)
                                                                     (call-with-values
                                                                       (lambda ()
                                                                         (#{gen-syntax\ 3137}#
                                                                           #{src\ 3245}#
                                                                           #{y\ 3299}#
                                                                           #{r\ 3247}#
                                                                           #{maps\ 3248}#
                                                                           #{ellipsis?\ 3249}#
                                                                           #{mod\ 3250}#))
                                                                       (lambda (#{y\ 3325}#
                                                                                #{maps\ 3326}#)
                                                                         (call-with-values
                                                                           (lambda ()
                                                                             (#{k\ 3300}#
                                                                               #{maps\ 3326}#))
                                                                           (lambda (#{x\ 3329}#
                                                                                    #{maps\ 3330}#)
                                                                             (values
                                                                               (#{gen-append\ 3147}#
                                                                                 #{x\ 3329}#
                                                                                 #{y\ 3325}#)
                                                                               #{maps\ 3330}#))))))
                                                                   #{tmp\ 3307}#)))
                                                              ($sc-dispatch
                                                                #{tmp\ 3307}#
                                                                '(any . any))))
                                                           #{y\ 3299}#))))
                                               (#{f\ 3298}#
                                                 #{y\ 3294}#
                                                 (lambda (#{maps\ 3301}#)
                                                   (call-with-values
                                                     (lambda ()
                                                       (#{gen-syntax\ 3137}#
                                                         #{src\ 3245}#
                                                         #{x\ 3292}#
                                                         #{r\ 3247}#
                                                         (cons '()
                                                               #{maps\ 3301}#)
                                                         #{ellipsis?\ 3249}#
                                                         #{mod\ 3250}#))
                                                     (lambda (#{x\ 3303}#
                                                              #{maps\ 3304}#)
                                                       (if (null? (car #{maps\ 3304}#))
                                                         (syntax-violation
                                                           'syntax
                                                           "extra ellipsis"
                                                           #{src\ 3245}#)
                                                         (values
                                                           (#{gen-map\ 3143}#
                                                             #{x\ 3303}#
                                                             (car #{maps\ 3304}#))
                                                           (cdr #{maps\ 3304}#)))))))))
                                           #{tmp\ 3282}#)
                                    ((lambda (#{tmp\ 3333}#)
                                       (if #{tmp\ 3333}#
                                         (apply (lambda (#{x\ 3336}#
                                                         #{y\ 3337}#)
                                                  (call-with-values
                                                    (lambda ()
                                                      (#{gen-syntax\ 3137}#
                                                        #{src\ 3245}#
                                                        #{x\ 3336}#
                                                        #{r\ 3247}#
                                                        #{maps\ 3248}#
                                                        #{ellipsis?\ 3249}#
                                                        #{mod\ 3250}#))
                                                    (lambda (#{x\ 3338}#
                                                             #{maps\ 3339}#)
                                                      (call-with-values
                                                        (lambda ()
                                                          (#{gen-syntax\ 3137}#
                                                            #{src\ 3245}#
                                                            #{y\ 3337}#
                                                            #{r\ 3247}#
                                                            #{maps\ 3339}#
                                                            #{ellipsis?\ 3249}#
                                                            #{mod\ 3250}#))
                                                        (lambda (#{y\ 3342}#
                                                                 #{maps\ 3343}#)
                                                          (values
                                                            (#{gen-cons\ 3145}#
                                                              #{x\ 3338}#
                                                              #{y\ 3342}#)
                                                            #{maps\ 3343}#))))))
                                                #{tmp\ 3333}#)
                                         ((lambda (#{tmp\ 3346}#)
                                            (if #{tmp\ 3346}#
                                              (apply (lambda (#{e1\ 3349}#
                                                              #{e2\ 3350}#)
                                                       (call-with-values
                                                         (lambda ()
                                                           (#{gen-syntax\ 3137}#
                                                             #{src\ 3245}#
                                                             (cons #{e1\ 3349}#
                                                                   #{e2\ 3350}#)
                                                             #{r\ 3247}#
                                                             #{maps\ 3248}#
                                                             #{ellipsis?\ 3249}#
                                                             #{mod\ 3250}#))
                                                         (lambda (#{e\ 3352}#
                                                                  #{maps\ 3353}#)
                                                           (values
                                                             (#{gen-vector\ 3149}#
                                                               #{e\ 3352}#)
                                                             #{maps\ 3353}#))))
                                                     #{tmp\ 3346}#)
                                              ((lambda (#{_\ 3357}#)
                                                 (values
                                                   (list 'quote
                                                         #{e\ 3246}#)
                                                   #{maps\ 3248}#))
                                               #{tmp\ 3270}#)))
                                          ($sc-dispatch
                                            #{tmp\ 3270}#
                                            '#(vector (any . each-any))))))
                                     ($sc-dispatch
                                       #{tmp\ 3270}#
                                       '(any . any)))))
                                ($sc-dispatch
                                  #{tmp\ 3270}#
                                  '(any any . any)))))
                           ($sc-dispatch #{tmp\ 3270}# (quote (any any)))))
                        #{e\ 3246}#)))))
          (lambda (#{e\ 3359}#
                   #{r\ 3360}#
                   #{w\ 3361}#
                   #{s\ 3362}#
                   #{mod\ 3363}#)
            (let ((#{e\ 3370}#
                    (#{source-wrap\ 737}#
                      #{e\ 3359}#
                      #{w\ 3361}#
                      #{s\ 3362}#
                      #{mod\ 3363}#)))
              ((lambda (#{tmp\ 3371}#)
                 ((lambda (#{tmp\ 3372}#)
                    (if #{tmp\ 3372}#
                      (apply (lambda (#{_\ 3375}# #{x\ 3376}#)
                               (call-with-values
                                 (lambda ()
                                   (#{gen-syntax\ 3137}#
                                     #{e\ 3370}#
                                     #{x\ 3376}#
                                     #{r\ 3360}#
                                     '()
                                     #{ellipsis?\ 767}#
                                     #{mod\ 3363}#))
                                 (lambda (#{e\ 3377}# #{maps\ 3378}#)
                                   (#{regen\ 3151}# #{e\ 3377}#))))
                             #{tmp\ 3372}#)
                      ((lambda (#{_\ 3382}#)
                         (syntax-violation
                           'syntax
                           "bad `syntax' form"
                           #{e\ 3370}#))
                       #{tmp\ 3371}#)))
                  ($sc-dispatch #{tmp\ 3371}# (quote (any any)))))
               #{e\ 3370}#)))))
      (#{global-extend\ 662}#
        'core
        'lambda
        (lambda (#{e\ 3383}#
                 #{r\ 3384}#
                 #{w\ 3385}#
                 #{s\ 3386}#
                 #{mod\ 3387}#)
          ((lambda (#{tmp\ 3393}#)
             ((lambda (#{tmp\ 3394}#)
                (if #{tmp\ 3394}#
                  (apply (lambda (#{_\ 3399}#
                                  #{args\ 3400}#
                                  #{e1\ 3401}#
                                  #{e2\ 3402}#)
                           (call-with-values
                             (lambda ()
                               (#{lambda-formals\ 769}# #{args\ 3400}#))
                             (lambda (#{req\ 3403}#
                                      #{opt\ 3404}#
                                      #{rest\ 3405}#
                                      #{kw\ 3406}#)
                               (letrec ((#{lp\ 3414}#
                                          (lambda (#{body\ 3415}#
                                                   #{meta\ 3416}#)
                                            ((lambda (#{tmp\ 3418}#)
                                               ((lambda (#{tmp\ 3419}#)
                                                  (if (if #{tmp\ 3419}#
                                                        (apply (lambda (#{docstring\ 3423}#
                                                                        #{e1\ 3424}#
                                                                        #{e2\ 3425}#)
                                                                 (string?
                                                                   (syntax->datum
                                                                     #{docstring\ 3423}#)))
                                                               #{tmp\ 3419}#)
                                                        #f)
                                                    (apply (lambda (#{docstring\ 3429}#
                                                                    #{e1\ 3430}#
                                                                    #{e2\ 3431}#)
                                                             (#{lp\ 3414}#
                                                               (cons #{e1\ 3430}#
                                                                     #{e2\ 3431}#)
                                                               (append
                                                                 #{meta\ 3416}#
                                                                 (list (cons 'documentation
                                                                             (syntax->datum
                                                                               #{docstring\ 3429}#))))))
                                                           #{tmp\ 3419}#)
                                                    ((lambda (#{tmp\ 3434}#)
                                                       (if #{tmp\ 3434}#
                                                         (apply (lambda (#{k\ 3439}#
                                                                         #{v\ 3440}#
                                                                         #{e1\ 3441}#
                                                                         #{e2\ 3442}#)
                                                                  (#{lp\ 3414}#
                                                                    (cons #{e1\ 3441}#
                                                                          #{e2\ 3442}#)
                                                                    (append
                                                                      #{meta\ 3416}#
                                                                      (syntax->datum
                                                                        (map cons
                                                                             #{k\ 3439}#
                                                                             #{v\ 3440}#)))))
                                                                #{tmp\ 3434}#)
                                                         ((lambda (#{_\ 3447}#)
                                                            (#{chi-simple-lambda\ 771}#
                                                              #{e\ 3383}#
                                                              #{r\ 3384}#
                                                              #{w\ 3385}#
                                                              #{s\ 3386}#
                                                              #{mod\ 3387}#
                                                              #{req\ 3403}#
                                                              #{rest\ 3405}#
                                                              #{meta\ 3416}#
                                                              #{body\ 3415}#))
                                                          #{tmp\ 3418}#)))
                                                     ($sc-dispatch
                                                       #{tmp\ 3418}#
                                                       '(#(vector
                                                           #(each (any . any)))
                                                         any
                                                         .
                                                         each-any)))))
                                                ($sc-dispatch
                                                  #{tmp\ 3418}#
                                                  '(any any . each-any))))
                                             #{body\ 3415}#))))
                                 (#{lp\ 3414}#
                                   (cons #{e1\ 3401}# #{e2\ 3402}#)
                                   '())))))
                         #{tmp\ 3394}#)
                  ((lambda (#{_\ 3449}#)
                     (syntax-violation
                       'lambda
                       "bad lambda"
                       #{e\ 3383}#))
                   #{tmp\ 3393}#)))
              ($sc-dispatch
                #{tmp\ 3393}#
                '(any any any . each-any))))
           #{e\ 3383}#)))
      (#{global-extend\ 662}#
        'core
        'lambda*
        (lambda (#{e\ 3450}#
                 #{r\ 3451}#
                 #{w\ 3452}#
                 #{s\ 3453}#
                 #{mod\ 3454}#)
          ((lambda (#{tmp\ 3460}#)
             ((lambda (#{tmp\ 3461}#)
                (if #{tmp\ 3461}#
                  (apply (lambda (#{_\ 3466}#
                                  #{args\ 3467}#
                                  #{e1\ 3468}#
                                  #{e2\ 3469}#)
                           (call-with-values
                             (lambda ()
                               (#{chi-lambda-case\ 775}#
                                 #{e\ 3450}#
                                 #{r\ 3451}#
                                 #{w\ 3452}#
                                 #{s\ 3453}#
                                 #{mod\ 3454}#
                                 #{lambda*-formals\ 773}#
                                 (list (cons #{args\ 3467}#
                                             (cons #{e1\ 3468}#
                                                   #{e2\ 3469}#)))))
                             (lambda (#{meta\ 3471}# #{lcase\ 3472}#)
                               (#{build-case-lambda\ 610}#
                                 #{s\ 3453}#
                                 #{meta\ 3471}#
                                 #{lcase\ 3472}#))))
                         #{tmp\ 3461}#)
                  ((lambda (#{_\ 3476}#)
                     (syntax-violation
                       'lambda
                       "bad lambda*"
                       #{e\ 3450}#))
                   #{tmp\ 3460}#)))
              ($sc-dispatch
                #{tmp\ 3460}#
                '(any any any . each-any))))
           #{e\ 3450}#)))
      (#{global-extend\ 662}#
        'core
        'case-lambda
        (lambda (#{e\ 3477}#
                 #{r\ 3478}#
                 #{w\ 3479}#
                 #{s\ 3480}#
                 #{mod\ 3481}#)
          ((lambda (#{tmp\ 3487}#)
             ((lambda (#{tmp\ 3488}#)
                (if #{tmp\ 3488}#
                  (apply (lambda (#{_\ 3496}#
                                  #{args\ 3497}#
                                  #{e1\ 3498}#
                                  #{e2\ 3499}#
                                  #{args*\ 3500}#
                                  #{e1*\ 3501}#
                                  #{e2*\ 3502}#)
                           (call-with-values
                             (lambda ()
                               (#{chi-lambda-case\ 775}#
                                 #{e\ 3477}#
                                 #{r\ 3478}#
                                 #{w\ 3479}#
                                 #{s\ 3480}#
                                 #{mod\ 3481}#
                                 #{lambda-formals\ 769}#
                                 (cons (cons #{args\ 3497}#
                                             (cons #{e1\ 3498}# #{e2\ 3499}#))
                                       (map (lambda (#{tmp\ 3506}#
                                                     #{tmp\ 3505}#
                                                     #{tmp\ 3504}#)
                                              (cons #{tmp\ 3504}#
                                                    (cons #{tmp\ 3505}#
                                                          #{tmp\ 3506}#)))
                                            #{e2*\ 3502}#
                                            #{e1*\ 3501}#
                                            #{args*\ 3500}#))))
                             (lambda (#{meta\ 3508}# #{lcase\ 3509}#)
                               (#{build-case-lambda\ 610}#
                                 #{s\ 3480}#
                                 #{meta\ 3508}#
                                 #{lcase\ 3509}#))))
                         #{tmp\ 3488}#)
                  ((lambda (#{_\ 3513}#)
                     (syntax-violation
                       'case-lambda
                       "bad case-lambda"
                       #{e\ 3477}#))
                   #{tmp\ 3487}#)))
              ($sc-dispatch
                #{tmp\ 3487}#
                '(any (any any . each-any)
                      .
                      #(each (any any . each-any))))))
           #{e\ 3477}#)))
      (#{global-extend\ 662}#
        'core
        'case-lambda*
        (lambda (#{e\ 3514}#
                 #{r\ 3515}#
                 #{w\ 3516}#
                 #{s\ 3517}#
                 #{mod\ 3518}#)
          ((lambda (#{tmp\ 3524}#)
             ((lambda (#{tmp\ 3525}#)
                (if #{tmp\ 3525}#
                  (apply (lambda (#{_\ 3533}#
                                  #{args\ 3534}#
                                  #{e1\ 3535}#
                                  #{e2\ 3536}#
                                  #{args*\ 3537}#
                                  #{e1*\ 3538}#
                                  #{e2*\ 3539}#)
                           (call-with-values
                             (lambda ()
                               (#{chi-lambda-case\ 775}#
                                 #{e\ 3514}#
                                 #{r\ 3515}#
                                 #{w\ 3516}#
                                 #{s\ 3517}#
                                 #{mod\ 3518}#
                                 #{lambda*-formals\ 773}#
                                 (cons (cons #{args\ 3534}#
                                             (cons #{e1\ 3535}# #{e2\ 3536}#))
                                       (map (lambda (#{tmp\ 3543}#
                                                     #{tmp\ 3542}#
                                                     #{tmp\ 3541}#)
                                              (cons #{tmp\ 3541}#
                                                    (cons #{tmp\ 3542}#
                                                          #{tmp\ 3543}#)))
                                            #{e2*\ 3539}#
                                            #{e1*\ 3538}#
                                            #{args*\ 3537}#))))
                             (lambda (#{meta\ 3545}# #{lcase\ 3546}#)
                               (#{build-case-lambda\ 610}#
                                 #{s\ 3517}#
                                 #{meta\ 3545}#
                                 #{lcase\ 3546}#))))
                         #{tmp\ 3525}#)
                  ((lambda (#{_\ 3550}#)
                     (syntax-violation
                       'case-lambda
                       "bad case-lambda*"
                       #{e\ 3514}#))
                   #{tmp\ 3524}#)))
              ($sc-dispatch
                #{tmp\ 3524}#
                '(any (any any . each-any)
                      .
                      #(each (any any . each-any))))))
           #{e\ 3514}#)))
      (#{global-extend\ 662}#
        'core
        'let
        (letrec ((#{chi-let\ 3552}#
                   (lambda (#{e\ 3553}#
                            #{r\ 3554}#
                            #{w\ 3555}#
                            #{s\ 3556}#
                            #{mod\ 3557}#
                            #{constructor\ 3558}#
                            #{ids\ 3559}#
                            #{vals\ 3560}#
                            #{exps\ 3561}#)
                     (if (not (#{valid-bound-ids?\ 729}# #{ids\ 3559}#))
                       (syntax-violation
                         'let
                         "duplicate bound variable"
                         #{e\ 3553}#)
                       (let ((#{labels\ 3573}#
                               (#{gen-labels\ 684}# #{ids\ 3559}#))
                             (#{new-vars\ 3574}#
                               (map #{gen-var\ 779}# #{ids\ 3559}#)))
                         (let ((#{nw\ 3577}#
                                 (#{make-binding-wrap\ 713}#
                                   #{ids\ 3559}#
                                   #{labels\ 3573}#
                                   #{w\ 3555}#))
                               (#{nr\ 3578}#
                                 (#{extend-var-env\ 656}#
                                   #{labels\ 3573}#
                                   #{new-vars\ 3574}#
                                   #{r\ 3554}#)))
                           (#{constructor\ 3558}#
                             #{s\ 3556}#
                             (map syntax->datum #{ids\ 3559}#)
                             #{new-vars\ 3574}#
                             (map (lambda (#{x\ 3579}#)
                                    (#{chi\ 751}#
                                      #{x\ 3579}#
                                      #{r\ 3554}#
                                      #{w\ 3555}#
                                      #{mod\ 3557}#))
                                  #{vals\ 3560}#)
                             (#{chi-body\ 759}#
                               #{exps\ 3561}#
                               (#{source-wrap\ 737}#
                                 #{e\ 3553}#
                                 #{nw\ 3577}#
                                 #{s\ 3556}#
                                 #{mod\ 3557}#)
                               #{nr\ 3578}#
                               #{nw\ 3577}#
                               #{mod\ 3557}#))))))))
          (lambda (#{e\ 3581}#
                   #{r\ 3582}#
                   #{w\ 3583}#
                   #{s\ 3584}#
                   #{mod\ 3585}#)
            ((lambda (#{tmp\ 3591}#)
               ((lambda (#{tmp\ 3592}#)
                  (if (if #{tmp\ 3592}#
                        (apply (lambda (#{_\ 3598}#
                                        #{id\ 3599}#
                                        #{val\ 3600}#
                                        #{e1\ 3601}#
                                        #{e2\ 3602}#)
                                 (and-map #{id?\ 666}# #{id\ 3599}#))
                               #{tmp\ 3592}#)
                        #f)
                    (apply (lambda (#{_\ 3609}#
                                    #{id\ 3610}#
                                    #{val\ 3611}#
                                    #{e1\ 3612}#
                                    #{e2\ 3613}#)
                             (#{chi-let\ 3552}#
                               #{e\ 3581}#
                               #{r\ 3582}#
                               #{w\ 3583}#
                               #{s\ 3584}#
                               #{mod\ 3585}#
                               #{build-let\ 620}#
                               #{id\ 3610}#
                               #{val\ 3611}#
                               (cons #{e1\ 3612}# #{e2\ 3613}#)))
                           #{tmp\ 3592}#)
                    ((lambda (#{tmp\ 3617}#)
                       (if (if #{tmp\ 3617}#
                             (apply (lambda (#{_\ 3624}#
                                             #{f\ 3625}#
                                             #{id\ 3626}#
                                             #{val\ 3627}#
                                             #{e1\ 3628}#
                                             #{e2\ 3629}#)
                                      (if (#{id?\ 666}# #{f\ 3625}#)
                                        (and-map #{id?\ 666}# #{id\ 3626}#)
                                        #f))
                                    #{tmp\ 3617}#)
                             #f)
                         (apply (lambda (#{_\ 3639}#
                                         #{f\ 3640}#
                                         #{id\ 3641}#
                                         #{val\ 3642}#
                                         #{e1\ 3643}#
                                         #{e2\ 3644}#)
                                  (#{chi-let\ 3552}#
                                    #{e\ 3581}#
                                    #{r\ 3582}#
                                    #{w\ 3583}#
                                    #{s\ 3584}#
                                    #{mod\ 3585}#
                                    #{build-named-let\ 622}#
                                    (cons #{f\ 3640}# #{id\ 3641}#)
                                    #{val\ 3642}#
                                    (cons #{e1\ 3643}# #{e2\ 3644}#)))
                                #{tmp\ 3617}#)
                         ((lambda (#{_\ 3649}#)
                            (syntax-violation
                              'let
                              "bad let"
                              (#{source-wrap\ 737}#
                                #{e\ 3581}#
                                #{w\ 3583}#
                                #{s\ 3584}#
                                #{mod\ 3585}#)))
                          #{tmp\ 3591}#)))
                     ($sc-dispatch
                       #{tmp\ 3591}#
                       '(any any #(each (any any)) any . each-any)))))
                ($sc-dispatch
                  #{tmp\ 3591}#
                  '(any #(each (any any)) any . each-any))))
             #{e\ 3581}#))))
      (#{global-extend\ 662}#
        'core
        'letrec
        (lambda (#{e\ 3650}#
                 #{r\ 3651}#
                 #{w\ 3652}#
                 #{s\ 3653}#
                 #{mod\ 3654}#)
          ((lambda (#{tmp\ 3660}#)
             ((lambda (#{tmp\ 3661}#)
                (if (if #{tmp\ 3661}#
                      (apply (lambda (#{_\ 3667}#
                                      #{id\ 3668}#
                                      #{val\ 3669}#
                                      #{e1\ 3670}#
                                      #{e2\ 3671}#)
                               (and-map #{id?\ 666}# #{id\ 3668}#))
                             #{tmp\ 3661}#)
                      #f)
                  (apply (lambda (#{_\ 3678}#
                                  #{id\ 3679}#
                                  #{val\ 3680}#
                                  #{e1\ 3681}#
                                  #{e2\ 3682}#)
                           (let ((#{ids\ 3684}# #{id\ 3679}#))
                             (if (not (#{valid-bound-ids?\ 729}#
                                        #{ids\ 3684}#))
                               (syntax-violation
                                 'letrec
                                 "duplicate bound variable"
                                 #{e\ 3650}#)
                               (let ((#{labels\ 3688}#
                                       (#{gen-labels\ 684}# #{ids\ 3684}#))
                                     (#{new-vars\ 3689}#
                                       (map #{gen-var\ 779}# #{ids\ 3684}#)))
                                 (let ((#{w\ 3692}#
                                         (#{make-binding-wrap\ 713}#
                                           #{ids\ 3684}#
                                           #{labels\ 3688}#
                                           #{w\ 3652}#))
                                       (#{r\ 3693}#
                                         (#{extend-var-env\ 656}#
                                           #{labels\ 3688}#
                                           #{new-vars\ 3689}#
                                           #{r\ 3651}#)))
                                   (#{build-letrec\ 624}#
                                     #{s\ 3653}#
                                     (map syntax->datum #{ids\ 3684}#)
                                     #{new-vars\ 3689}#
                                     (map (lambda (#{x\ 3694}#)
                                            (#{chi\ 751}#
                                              #{x\ 3694}#
                                              #{r\ 3693}#
                                              #{w\ 3692}#
                                              #{mod\ 3654}#))
                                          #{val\ 3680}#)
                                     (#{chi-body\ 759}#
                                       (cons #{e1\ 3681}# #{e2\ 3682}#)
                                       (#{source-wrap\ 737}#
                                         #{e\ 3650}#
                                         #{w\ 3692}#
                                         #{s\ 3653}#
                                         #{mod\ 3654}#)
                                       #{r\ 3693}#
                                       #{w\ 3692}#
                                       #{mod\ 3654}#)))))))
                         #{tmp\ 3661}#)
                  ((lambda (#{_\ 3699}#)
                     (syntax-violation
                       'letrec
                       "bad letrec"
                       (#{source-wrap\ 737}#
                         #{e\ 3650}#
                         #{w\ 3652}#
                         #{s\ 3653}#
                         #{mod\ 3654}#)))
                   #{tmp\ 3660}#)))
              ($sc-dispatch
                #{tmp\ 3660}#
                '(any #(each (any any)) any . each-any))))
           #{e\ 3650}#)))
      (#{global-extend\ 662}#
        'core
        'set!
        (lambda (#{e\ 3700}#
                 #{r\ 3701}#
                 #{w\ 3702}#
                 #{s\ 3703}#
                 #{mod\ 3704}#)
          ((lambda (#{tmp\ 3710}#)
             ((lambda (#{tmp\ 3711}#)
                (if (if #{tmp\ 3711}#
                      (apply (lambda (#{_\ 3715}# #{id\ 3716}# #{val\ 3717}#)
                               (#{id?\ 666}# #{id\ 3716}#))
                             #{tmp\ 3711}#)
                      #f)
                  (apply (lambda (#{_\ 3721}# #{id\ 3722}# #{val\ 3723}#)
                           (let ((#{val\ 3726}#
                                   (#{chi\ 751}#
                                     #{val\ 3723}#
                                     #{r\ 3701}#
                                     #{w\ 3702}#
                                     #{mod\ 3704}#))
                                 (#{n\ 3727}#
                                   (#{id-var-name\ 723}#
                                     #{id\ 3722}#
                                     #{w\ 3702}#)))
                             (let ((#{b\ 3729}#
                                     (#{lookup\ 660}#
                                       #{n\ 3727}#
                                       #{r\ 3701}#
                                       #{mod\ 3704}#)))
                               (let ((#{atom-key\ 3732}#
                                       (#{binding-type\ 649}# #{b\ 3729}#)))
                                 (if (memv #{atom-key\ 3732}#
                                           '(lexical))
                                   (#{build-lexical-assignment\ 596}#
                                     #{s\ 3703}#
                                     (syntax->datum #{id\ 3722}#)
                                     (#{binding-value\ 651}# #{b\ 3729}#)
                                     #{val\ 3726}#)
                                   (if (memv #{atom-key\ 3732}#
                                             '(global))
                                     (#{build-global-assignment\ 602}#
                                       #{s\ 3703}#
                                       #{n\ 3727}#
                                       #{val\ 3726}#
                                       #{mod\ 3704}#)
                                     (if (memv #{atom-key\ 3732}#
                                               '(displaced-lexical))
                                       (syntax-violation
                                         'set!
                                         "identifier out of context"
                                         (#{wrap\ 735}#
                                           #{id\ 3722}#
                                           #{w\ 3702}#
                                           #{mod\ 3704}#))
                                       (syntax-violation
                                         'set!
                                         "bad set!"
                                         (#{source-wrap\ 737}#
                                           #{e\ 3700}#
                                           #{w\ 3702}#
                                           #{s\ 3703}#
                                           #{mod\ 3704}#)))))))))
                         #{tmp\ 3711}#)
                  ((lambda (#{tmp\ 3737}#)
                     (if #{tmp\ 3737}#
                       (apply (lambda (#{_\ 3742}#
                                       #{head\ 3743}#
                                       #{tail\ 3744}#
                                       #{val\ 3745}#)
                                (call-with-values
                                  (lambda ()
                                    (#{syntax-type\ 747}#
                                      #{head\ 3743}#
                                      #{r\ 3701}#
                                      '(())
                                      #f
                                      #f
                                      #{mod\ 3704}#
                                      #t))
                                  (lambda (#{type\ 3748}#
                                           #{value\ 3749}#
                                           #{ee\ 3750}#
                                           #{ww\ 3751}#
                                           #{ss\ 3752}#
                                           #{modmod\ 3753}#)
                                    (if (memv #{type\ 3748}#
                                              '(module-ref))
                                      (let ((#{val\ 3762}#
                                              (#{chi\ 751}#
                                                #{val\ 3745}#
                                                #{r\ 3701}#
                                                #{w\ 3702}#
                                                #{mod\ 3704}#)))
                                        (call-with-values
                                          (lambda ()
                                            (#{value\ 3749}#
                                              (cons #{head\ 3743}#
                                                    #{tail\ 3744}#)
                                              #{r\ 3701}#
                                              #{w\ 3702}#))
                                          (lambda (#{e\ 3764}#
                                                   #{r\ 3765}#
                                                   #{w\ 3766}#
                                                   #{s*\ 3767}#
                                                   #{mod\ 3768}#)
                                            ((lambda (#{tmp\ 3774}#)
                                               ((lambda (#{tmp\ 3775}#)
                                                  (if (if #{tmp\ 3775}#
                                                        (apply (lambda (#{e\ 3777}#)
                                                                 (#{id?\ 666}#
                                                                   #{e\ 3777}#))
                                                               #{tmp\ 3775}#)
                                                        #f)
                                                    (apply (lambda (#{e\ 3779}#)
                                                             (#{build-global-assignment\ 602}#
                                                               #{s\ 3703}#
                                                               (syntax->datum
                                                                 #{e\ 3779}#)
                                                               #{val\ 3762}#
                                                               #{mod\ 3768}#))
                                                           #{tmp\ 3775}#)
                                                    (syntax-violation
                                                      #f
                                                      "source expression failed to match any pattern"
                                                      #{tmp\ 3774}#)))
                                                (list #{tmp\ 3774}#)))
                                             #{e\ 3764}#))))
                                      (#{build-application\ 588}#
                                        #{s\ 3703}#
                                        (#{chi\ 751}#
                                          (list '#(syntax-object
                                                   setter
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(type
                                                        value
                                                        ee
                                                        ww
                                                        ss
                                                        modmod)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i3754"
                                                        "i3755"
                                                        "i3756"
                                                        "i3757"
                                                        "i3758"
                                                        "i3759"))
                                                    #(ribcage
                                                      #(_ head tail val)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i3738"
                                                        "i3739"
                                                        "i3740"
                                                        "i3741"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(e r w s mod)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i3705"
                                                        "i3706"
                                                        "i3707"
                                                        "i3708"
                                                        "i3709"))
                                                    #(ribcage
                                                      (lambda-var-list
                                                        gen-var
                                                        strip
                                                        chi-lambda-case
                                                        lambda*-formals
                                                        chi-simple-lambda
                                                        lambda-formals
                                                        ellipsis?
                                                        chi-void
                                                        eval-local-transformer
                                                        chi-local-syntax
                                                        chi-body
                                                        chi-macro
                                                        chi-application
                                                        chi-expr
                                                        chi
                                                        chi-top
                                                        syntax-type
                                                        chi-when-list
                                                        chi-install-global
                                                        chi-top-sequence
                                                        chi-sequence
                                                        source-wrap
                                                        wrap
                                                        bound-id-member?
                                                        distinct-bound-ids?
                                                        valid-bound-ids?
                                                        bound-id=?
                                                        free-id=?
                                                        id-var-name
                                                        same-marks?
                                                        join-marks
                                                        join-wraps
                                                        smart-append
                                                        make-binding-wrap
                                                        extend-ribcage!
                                                        make-empty-ribcage
                                                        new-mark
                                                        anti-mark
                                                        the-anti-mark
                                                        top-marked?
                                                        top-wrap
                                                        empty-wrap
                                                        set-ribcage-labels!
                                                        set-ribcage-marks!
                                                        set-ribcage-symnames!
                                                        ribcage-labels
                                                        ribcage-marks
                                                        ribcage-symnames
                                                        ribcage?
                                                        make-ribcage
                                                        gen-labels
                                                        gen-label
                                                        make-rename
                                                        rename-marks
                                                        rename-new
                                                        rename-old
                                                        subst-rename?
                                                        wrap-subst
                                                        wrap-marks
                                                        make-wrap
                                                        id-sym-name&marks
                                                        id-sym-name
                                                        id?
                                                        nonsymbol-id?
                                                        global-extend
                                                        lookup
                                                        macros-only-env
                                                        extend-var-env
                                                        extend-env
                                                        null-env
                                                        binding-value
                                                        binding-type
                                                        make-binding
                                                        arg-check
                                                        source-annotation
                                                        no-source
                                                        set-syntax-object-module!
                                                        set-syntax-object-wrap!
                                                        set-syntax-object-expression!
                                                        syntax-object-module
                                                        syntax-object-wrap
                                                        syntax-object-expression
                                                        syntax-object?
                                                        make-syntax-object
                                                        build-lexical-var
                                                        build-letrec
                                                        build-named-let
                                                        build-let
                                                        build-sequence
                                                        build-data
                                                        build-primref
                                                        build-lambda-case
                                                        build-case-lambda
                                                        build-simple-lambda
                                                        build-global-definition
                                                        maybe-name-value!
                                                        build-global-assignment
                                                        build-global-reference
                                                        analyze-variable
                                                        build-lexical-assignment
                                                        build-lexical-reference
                                                        build-dynlet
                                                        build-conditional
                                                        build-application
                                                        build-void
                                                        decorate-source
                                                        get-global-definition-hook
                                                        put-global-definition-hook
                                                        gensym-hook
                                                        local-eval-hook
                                                        top-level-eval-hook
                                                        fx<
                                                        fx=
                                                        fx-
                                                        fx+
                                                        *mode*)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i780"
                                                       "i778"
                                                       "i776"
                                                       "i774"
                                                       "i772"
                                                       "i770"
                                                       "i768"
                                                       "i766"
                                                       "i764"
                                                       "i762"
                                                       "i760"
                                                       "i758"
                                                       "i756"
                                                       "i754"
                                                       "i752"
                                                       "i750"
                                                       "i748"
                                                       "i746"
                                                       "i744"
                                                       "i742"
                                                       "i740"
                                                       "i738"
                                                       "i736"
                                                       "i734"
                                                       "i732"
                                                       "i730"
                                                       "i728"
                                                       "i726"
                                                       "i724"
                                                       "i722"
                                                       "i720"
                                                       "i718"
                                                       "i716"
                                                       "i714"
                                                       "i712"
                                                       "i710"
                                                       "i709"
                                                       "i708"
                                                       "i706"
                                                       "i705"
                                                       "i704"
                                                       "i703"
                                                       "i702"
                                                       "i700"
                                                       "i698"
                                                       "i696"
                                                       "i694"
                                                       "i692"
                                                       "i690"
                                                       "i688"
                                                       "i686"
                                                       "i683"
                                                       "i681"
                                                       "i680"
                                                       "i679"
                                                       "i678"
                                                       "i677"
                                                       "i676"
                                                       "i674"
                                                       "i672"
                                                       "i670"
                                                       "i668"
                                                       "i667"
                                                       "i665"
                                                       "i663"
                                                       "i661"
                                                       "i659"
                                                       "i657"
                                                       "i655"
                                                       "i653"
                                                       "i652"
                                                       "i650"
                                                       "i648"
                                                       "i647"
                                                       "i646"
                                                       "i644"
                                                       "i643"
                                                       "i641"
                                                       "i639"
                                                       "i637"
                                                       "i635"
                                                       "i633"
                                                       "i631"
                                                       "i629"
                                                       "i627"
                                                       "i625"
                                                       "i623"
                                                       "i621"
                                                       "i619"
                                                       "i617"
                                                       "i615"
                                                       "i613"
                                                       "i611"
                                                       "i609"
                                                       "i607"
                                                       "i605"
                                                       "i603"
                                                       "i601"
                                                       "i599"
                                                       "i597"
                                                       "i595"
                                                       "i593"
                                                       "i591"
                                                       "i589"
                                                       "i587"
                                                       "i585"
                                                       "i583"
                                                       "i581"
                                                       "i579"
                                                       "i578"
                                                       "i576"
                                                       "i574"
                                                       "i572"
                                                       "i570"
                                                       "i568"
                                                       "i566"
                                                       "i564"))
                                                    #(ribcage
                                                      (define-structure
                                                        and-map*)
                                                      ((top) (top))
                                                      ("i467" "i465")))
                                                   (hygiene guile))
                                                #{head\ 3743}#)
                                          #{r\ 3701}#
                                          #{w\ 3702}#
                                          #{mod\ 3704}#)
                                        (map (lambda (#{e\ 3781}#)
                                               (#{chi\ 751}#
                                                 #{e\ 3781}#
                                                 #{r\ 3701}#
                                                 #{w\ 3702}#
                                                 #{mod\ 3704}#))
                                             (append
                                               #{tail\ 3744}#
                                               (list #{val\ 3745}#))))))))
                              #{tmp\ 3737}#)
                       ((lambda (#{_\ 3785}#)
                          (syntax-violation
                            'set!
                            "bad set!"
                            (#{source-wrap\ 737}#
                              #{e\ 3700}#
                              #{w\ 3702}#
                              #{s\ 3703}#
                              #{mod\ 3704}#)))
                        #{tmp\ 3710}#)))
                   ($sc-dispatch
                     #{tmp\ 3710}#
                     '(any (any . each-any) any)))))
              ($sc-dispatch
                #{tmp\ 3710}#
                '(any any any))))
           #{e\ 3700}#)))
      (#{global-extend\ 662}#
        'module-ref
        '@
        (lambda (#{e\ 3786}# #{r\ 3787}# #{w\ 3788}#)
          ((lambda (#{tmp\ 3792}#)
             ((lambda (#{tmp\ 3793}#)
                (if (if #{tmp\ 3793}#
                      (apply (lambda (#{_\ 3797}# #{mod\ 3798}# #{id\ 3799}#)
                               (if (and-map #{id?\ 666}# #{mod\ 3798}#)
                                 (#{id?\ 666}# #{id\ 3799}#)
                                 #f))
                             #{tmp\ 3793}#)
                      #f)
                  (apply (lambda (#{_\ 3806}# #{mod\ 3807}# #{id\ 3808}#)
                           (values
                             (syntax->datum #{id\ 3808}#)
                             #{r\ 3787}#
                             #{w\ 3788}#
                             #f
                             (syntax->datum
                               (cons '#(syntax-object
                                        public
                                        ((top)
                                         #(ribcage
                                           #(_ mod id)
                                           #((top) (top) (top))
                                           #("i3803" "i3804" "i3805"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(e r w)
                                           #((top) (top) (top))
                                           #("i3789" "i3790" "i3791"))
                                         #(ribcage
                                           (lambda-var-list
                                             gen-var
                                             strip
                                             chi-lambda-case
                                             lambda*-formals
                                             chi-simple-lambda
                                             lambda-formals
                                             ellipsis?
                                             chi-void
                                             eval-local-transformer
                                             chi-local-syntax
                                             chi-body
                                             chi-macro
                                             chi-application
                                             chi-expr
                                             chi
                                             chi-top
                                             syntax-type
                                             chi-when-list
                                             chi-install-global
                                             chi-top-sequence
                                             chi-sequence
                                             source-wrap
                                             wrap
                                             bound-id-member?
                                             distinct-bound-ids?
                                             valid-bound-ids?
                                             bound-id=?
                                             free-id=?
                                             id-var-name
                                             same-marks?
                                             join-marks
                                             join-wraps
                                             smart-append
                                             make-binding-wrap
                                             extend-ribcage!
                                             make-empty-ribcage
                                             new-mark
                                             anti-mark
                                             the-anti-mark
                                             top-marked?
                                             top-wrap
                                             empty-wrap
                                             set-ribcage-labels!
                                             set-ribcage-marks!
                                             set-ribcage-symnames!
                                             ribcage-labels
                                             ribcage-marks
                                             ribcage-symnames
                                             ribcage?
                                             make-ribcage
                                             gen-labels
                                             gen-label
                                             make-rename
                                             rename-marks
                                             rename-new
                                             rename-old
                                             subst-rename?
                                             wrap-subst
                                             wrap-marks
                                             make-wrap
                                             id-sym-name&marks
                                             id-sym-name
                                             id?
                                             nonsymbol-id?
                                             global-extend
                                             lookup
                                             macros-only-env
                                             extend-var-env
                                             extend-env
                                             null-env
                                             binding-value
                                             binding-type
                                             make-binding
                                             arg-check
                                             source-annotation
                                             no-source
                                             set-syntax-object-module!
                                             set-syntax-object-wrap!
                                             set-syntax-object-expression!
                                             syntax-object-module
                                             syntax-object-wrap
                                             syntax-object-expression
                                             syntax-object?
                                             make-syntax-object
                                             build-lexical-var
                                             build-letrec
                                             build-named-let
                                             build-let
                                             build-sequence
                                             build-data
                                             build-primref
                                             build-lambda-case
                                             build-case-lambda
                                             build-simple-lambda
                                             build-global-definition
                                             maybe-name-value!
                                             build-global-assignment
                                             build-global-reference
                                             analyze-variable
                                             build-lexical-assignment
                                             build-lexical-reference
                                             build-dynlet
                                             build-conditional
                                             build-application
                                             build-void
                                             decorate-source
                                             get-global-definition-hook
                                             put-global-definition-hook
                                             gensym-hook
                                             local-eval-hook
                                             top-level-eval-hook
                                             fx<
                                             fx=
                                             fx-
                                             fx+
                                             *mode*)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("i780"
                                            "i778"
                                            "i776"
                                            "i774"
                                            "i772"
                                            "i770"
                                            "i768"
                                            "i766"
                                            "i764"
                                            "i762"
                                            "i760"
                                            "i758"
                                            "i756"
                                            "i754"
                                            "i752"
                                            "i750"
                                            "i748"
                                            "i746"
                                            "i744"
                                            "i742"
                                            "i740"
                                            "i738"
                                            "i736"
                                            "i734"
                                            "i732"
                                            "i730"
                                            "i728"
                                            "i726"
                                            "i724"
                                            "i722"
                                            "i720"
                                            "i718"
                                            "i716"
                                            "i714"
                                            "i712"
                                            "i710"
                                            "i709"
                                            "i708"
                                            "i706"
                                            "i705"
                                            "i704"
                                            "i703"
                                            "i702"
                                            "i700"
                                            "i698"
                                            "i696"
                                            "i694"
                                            "i692"
                                            "i690"
                                            "i688"
                                            "i686"
                                            "i683"
                                            "i681"
                                            "i680"
                                            "i679"
                                            "i678"
                                            "i677"
                                            "i676"
                                            "i674"
                                            "i672"
                                            "i670"
                                            "i668"
                                            "i667"
                                            "i665"
                                            "i663"
                                            "i661"
                                            "i659"
                                            "i657"
                                            "i655"
                                            "i653"
                                            "i652"
                                            "i650"
                                            "i648"
                                            "i647"
                                            "i646"
                                            "i644"
                                            "i643"
                                            "i641"
                                            "i639"
                                            "i637"
                                            "i635"
                                            "i633"
                                            "i631"
                                            "i629"
                                            "i627"
                                            "i625"
                                            "i623"
                                            "i621"
                                            "i619"
                                            "i617"
                                            "i615"
                                            "i613"
                                            "i611"
                                            "i609"
                                            "i607"
                                            "i605"
                                            "i603"
                                            "i601"
                                            "i599"
                                            "i597"
                                            "i595"
                                            "i593"
                                            "i591"
                                            "i589"
                                            "i587"
                                            "i585"
                                            "i583"
                                            "i581"
                                            "i579"
                                            "i578"
                                            "i576"
                                            "i574"
                                            "i572"
                                            "i570"
                                            "i568"
                                            "i566"
                                            "i564"))
                                         #(ribcage
                                           (define-structure and-map*)
                                           ((top) (top))
                                           ("i467" "i465")))
                                        (hygiene guile))
                                     #{mod\ 3807}#))))
                         #{tmp\ 3793}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{tmp\ 3792}#)))
              ($sc-dispatch
                #{tmp\ 3792}#
                '(any each-any any))))
           #{e\ 3786}#)))
      (#{global-extend\ 662}#
        'module-ref
        '@@
        (lambda (#{e\ 3810}# #{r\ 3811}# #{w\ 3812}#)
          (letrec ((#{remodulate\ 3817}#
                     (lambda (#{x\ 3818}# #{mod\ 3819}#)
                       (if (pair? #{x\ 3818}#)
                         (cons (#{remodulate\ 3817}#
                                 (car #{x\ 3818}#)
                                 #{mod\ 3819}#)
                               (#{remodulate\ 3817}#
                                 (cdr #{x\ 3818}#)
                                 #{mod\ 3819}#))
                         (if (#{syntax-object?\ 630}# #{x\ 3818}#)
                           (#{make-syntax-object\ 628}#
                             (#{remodulate\ 3817}#
                               (#{syntax-object-expression\ 632}# #{x\ 3818}#)
                               #{mod\ 3819}#)
                             (#{syntax-object-wrap\ 634}# #{x\ 3818}#)
                             #{mod\ 3819}#)
                           (if (vector? #{x\ 3818}#)
                             (let ((#{n\ 3830}# (vector-length #{x\ 3818}#)))
                               (let ((#{v\ 3832}# (make-vector #{n\ 3830}#)))
                                 (letrec ((#{loop\ 3835}#
                                            (lambda (#{i\ 3836}#)
                                              (if (#{fx=\ 571}#
                                                    #{i\ 3836}#
                                                    #{n\ 3830}#)
                                                (begin (if #f #f) #{v\ 3832}#)
                                                (begin
                                                  (vector-set!
                                                    #{v\ 3832}#
                                                    #{i\ 3836}#
                                                    (#{remodulate\ 3817}#
                                                      (vector-ref
                                                        #{x\ 3818}#
                                                        #{i\ 3836}#)
                                                      #{mod\ 3819}#))
                                                  (#{loop\ 3835}#
                                                    (#{fx+\ 567}#
                                                      #{i\ 3836}#
                                                      1)))))))
                                   (#{loop\ 3835}# 0))))
                             #{x\ 3818}#))))))
            ((lambda (#{tmp\ 3840}#)
               ((lambda (#{tmp\ 3841}#)
                  (if (if #{tmp\ 3841}#
                        (apply (lambda (#{_\ 3845}#
                                        #{mod\ 3846}#
                                        #{exp\ 3847}#)
                                 (and-map #{id?\ 666}# #{mod\ 3846}#))
                               #{tmp\ 3841}#)
                        #f)
                    (apply (lambda (#{_\ 3852}# #{mod\ 3853}# #{exp\ 3854}#)
                             (let ((#{mod\ 3856}#
                                     (syntax->datum
                                       (cons '#(syntax-object
                                                private
                                                ((top)
                                                 #(ribcage
                                                   #(_ mod exp)
                                                   #((top) (top) (top))
                                                   #("i3849" "i3850" "i3851"))
                                                 #(ribcage
                                                   (remodulate)
                                                   ((top))
                                                   ("i3816"))
                                                 #(ribcage
                                                   #(e r w)
                                                   #((top) (top) (top))
                                                   #("i3813" "i3814" "i3815"))
                                                 #(ribcage
                                                   (lambda-var-list
                                                     gen-var
                                                     strip
                                                     chi-lambda-case
                                                     lambda*-formals
                                                     chi-simple-lambda
                                                     lambda-formals
                                                     ellipsis?
                                                     chi-void
                                                     eval-local-transformer
                                                     chi-local-syntax
                                                     chi-body
                                                     chi-macro
                                                     chi-application
                                                     chi-expr
                                                     chi
                                                     chi-top
                                                     syntax-type
                                                     chi-when-list
                                                     chi-install-global
                                                     chi-top-sequence
                                                     chi-sequence
                                                     source-wrap
                                                     wrap
                                                     bound-id-member?
                                                     distinct-bound-ids?
                                                     valid-bound-ids?
                                                     bound-id=?
                                                     free-id=?
                                                     id-var-name
                                                     same-marks?
                                                     join-marks
                                                     join-wraps
                                                     smart-append
                                                     make-binding-wrap
                                                     extend-ribcage!
                                                     make-empty-ribcage
                                                     new-mark
                                                     anti-mark
                                                     the-anti-mark
                                                     top-marked?
                                                     top-wrap
                                                     empty-wrap
                                                     set-ribcage-labels!
                                                     set-ribcage-marks!
                                                     set-ribcage-symnames!
                                                     ribcage-labels
                                                     ribcage-marks
                                                     ribcage-symnames
                                                     ribcage?
                                                     make-ribcage
                                                     gen-labels
                                                     gen-label
                                                     make-rename
                                                     rename-marks
                                                     rename-new
                                                     rename-old
                                                     subst-rename?
                                                     wrap-subst
                                                     wrap-marks
                                                     make-wrap
                                                     id-sym-name&marks
                                                     id-sym-name
                                                     id?
                                                     nonsymbol-id?
                                                     global-extend
                                                     lookup
                                                     macros-only-env
                                                     extend-var-env
                                                     extend-env
                                                     null-env
                                                     binding-value
                                                     binding-type
                                                     make-binding
                                                     arg-check
                                                     source-annotation
                                                     no-source
                                                     set-syntax-object-module!
                                                     set-syntax-object-wrap!
                                                     set-syntax-object-expression!
                                                     syntax-object-module
                                                     syntax-object-wrap
                                                     syntax-object-expression
                                                     syntax-object?
                                                     make-syntax-object
                                                     build-lexical-var
                                                     build-letrec
                                                     build-named-let
                                                     build-let
                                                     build-sequence
                                                     build-data
                                                     build-primref
                                                     build-lambda-case
                                                     build-case-lambda
                                                     build-simple-lambda
                                                     build-global-definition
                                                     maybe-name-value!
                                                     build-global-assignment
                                                     build-global-reference
                                                     analyze-variable
                                                     build-lexical-assignment
                                                     build-lexical-reference
                                                     build-dynlet
                                                     build-conditional
                                                     build-application
                                                     build-void
                                                     decorate-source
                                                     get-global-definition-hook
                                                     put-global-definition-hook
                                                     gensym-hook
                                                     local-eval-hook
                                                     top-level-eval-hook
                                                     fx<
                                                     fx=
                                                     fx-
                                                     fx+
                                                     *mode*)
                                                   ((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                   ("i780"
                                                    "i778"
                                                    "i776"
                                                    "i774"
                                                    "i772"
                                                    "i770"
                                                    "i768"
                                                    "i766"
                                                    "i764"
                                                    "i762"
                                                    "i760"
                                                    "i758"
                                                    "i756"
                                                    "i754"
                                                    "i752"
                                                    "i750"
                                                    "i748"
                                                    "i746"
                                                    "i744"
                                                    "i742"
                                                    "i740"
                                                    "i738"
                                                    "i736"
                                                    "i734"
                                                    "i732"
                                                    "i730"
                                                    "i728"
                                                    "i726"
                                                    "i724"
                                                    "i722"
                                                    "i720"
                                                    "i718"
                                                    "i716"
                                                    "i714"
                                                    "i712"
                                                    "i710"
                                                    "i709"
                                                    "i708"
                                                    "i706"
                                                    "i705"
                                                    "i704"
                                                    "i703"
                                                    "i702"
                                                    "i700"
                                                    "i698"
                                                    "i696"
                                                    "i694"
                                                    "i692"
                                                    "i690"
                                                    "i688"
                                                    "i686"
                                                    "i683"
                                                    "i681"
                                                    "i680"
                                                    "i679"
                                                    "i678"
                                                    "i677"
                                                    "i676"
                                                    "i674"
                                                    "i672"
                                                    "i670"
                                                    "i668"
                                                    "i667"
                                                    "i665"
                                                    "i663"
                                                    "i661"
                                                    "i659"
                                                    "i657"
                                                    "i655"
                                                    "i653"
                                                    "i652"
                                                    "i650"
                                                    "i648"
                                                    "i647"
                                                    "i646"
                                                    "i644"
                                                    "i643"
                                                    "i641"
                                                    "i639"
                                                    "i637"
                                                    "i635"
                                                    "i633"
                                                    "i631"
                                                    "i629"
                                                    "i627"
                                                    "i625"
                                                    "i623"
                                                    "i621"
                                                    "i619"
                                                    "i617"
                                                    "i615"
                                                    "i613"
                                                    "i611"
                                                    "i609"
                                                    "i607"
                                                    "i605"
                                                    "i603"
                                                    "i601"
                                                    "i599"
                                                    "i597"
                                                    "i595"
                                                    "i593"
                                                    "i591"
                                                    "i589"
                                                    "i587"
                                                    "i585"
                                                    "i583"
                                                    "i581"
                                                    "i579"
                                                    "i578"
                                                    "i576"
                                                    "i574"
                                                    "i572"
                                                    "i570"
                                                    "i568"
                                                    "i566"
                                                    "i564"))
                                                 #(ribcage
                                                   (define-structure and-map*)
                                                   ((top) (top))
                                                   ("i467" "i465")))
                                                (hygiene guile))
                                             #{mod\ 3853}#))))
                               (values
                                 (#{remodulate\ 3817}#
                                   #{exp\ 3854}#
                                   #{mod\ 3856}#)
                                 #{r\ 3811}#
                                 #{w\ 3812}#
                                 (#{source-annotation\ 645}# #{exp\ 3854}#)
                                 #{mod\ 3856}#)))
                           #{tmp\ 3841}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 3840}#)))
                ($sc-dispatch
                  #{tmp\ 3840}#
                  '(any each-any any))))
             #{e\ 3810}#))))
      (#{global-extend\ 662}#
        'core
        'if
        (lambda (#{e\ 3858}#
                 #{r\ 3859}#
                 #{w\ 3860}#
                 #{s\ 3861}#
                 #{mod\ 3862}#)
          ((lambda (#{tmp\ 3868}#)
             ((lambda (#{tmp\ 3869}#)
                (if #{tmp\ 3869}#
                  (apply (lambda (#{_\ 3873}# #{test\ 3874}# #{then\ 3875}#)
                           (#{build-conditional\ 590}#
                             #{s\ 3861}#
                             (#{chi\ 751}#
                               #{test\ 3874}#
                               #{r\ 3859}#
                               #{w\ 3860}#
                               #{mod\ 3862}#)
                             (#{chi\ 751}#
                               #{then\ 3875}#
                               #{r\ 3859}#
                               #{w\ 3860}#
                               #{mod\ 3862}#)
                             (#{build-void\ 586}# #f)))
                         #{tmp\ 3869}#)
                  ((lambda (#{tmp\ 3877}#)
                     (if #{tmp\ 3877}#
                       (apply (lambda (#{_\ 3882}#
                                       #{test\ 3883}#
                                       #{then\ 3884}#
                                       #{else\ 3885}#)
                                (#{build-conditional\ 590}#
                                  #{s\ 3861}#
                                  (#{chi\ 751}#
                                    #{test\ 3883}#
                                    #{r\ 3859}#
                                    #{w\ 3860}#
                                    #{mod\ 3862}#)
                                  (#{chi\ 751}#
                                    #{then\ 3884}#
                                    #{r\ 3859}#
                                    #{w\ 3860}#
                                    #{mod\ 3862}#)
                                  (#{chi\ 751}#
                                    #{else\ 3885}#
                                    #{r\ 3859}#
                                    #{w\ 3860}#
                                    #{mod\ 3862}#)))
                              #{tmp\ 3877}#)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         #{tmp\ 3868}#)))
                   ($sc-dispatch
                     #{tmp\ 3868}#
                     '(any any any any)))))
              ($sc-dispatch
                #{tmp\ 3868}#
                '(any any any))))
           #{e\ 3858}#)))
      (#{global-extend\ 662}#
        'core
        'with-fluids
        (lambda (#{e\ 3886}#
                 #{r\ 3887}#
                 #{w\ 3888}#
                 #{s\ 3889}#
                 #{mod\ 3890}#)
          ((lambda (#{tmp\ 3896}#)
             ((lambda (#{tmp\ 3897}#)
                (if #{tmp\ 3897}#
                  (apply (lambda (#{_\ 3903}#
                                  #{fluid\ 3904}#
                                  #{val\ 3905}#
                                  #{b\ 3906}#
                                  #{b*\ 3907}#)
                           (#{build-dynlet\ 592}#
                             #{s\ 3889}#
                             (map (lambda (#{x\ 3908}#)
                                    (#{chi\ 751}#
                                      #{x\ 3908}#
                                      #{r\ 3887}#
                                      #{w\ 3888}#
                                      #{mod\ 3890}#))
                                  #{fluid\ 3904}#)
                             (map (lambda (#{x\ 3911}#)
                                    (#{chi\ 751}#
                                      #{x\ 3911}#
                                      #{r\ 3887}#
                                      #{w\ 3888}#
                                      #{mod\ 3890}#))
                                  #{val\ 3905}#)
                             (#{chi-body\ 759}#
                               (cons #{b\ 3906}# #{b*\ 3907}#)
                               (#{source-wrap\ 737}#
                                 #{e\ 3886}#
                                 #{w\ 3888}#
                                 #{s\ 3889}#
                                 #{mod\ 3890}#)
                               #{r\ 3887}#
                               #{w\ 3888}#
                               #{mod\ 3890}#)))
                         #{tmp\ 3897}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{tmp\ 3896}#)))
              ($sc-dispatch
                #{tmp\ 3896}#
                '(any #(each (any any)) any . each-any))))
           #{e\ 3886}#)))
      (#{global-extend\ 662}#
        'begin
        'begin
        '())
      (#{global-extend\ 662}#
        'define
        'define
        '())
      (#{global-extend\ 662}#
        'define-syntax
        'define-syntax
        '())
      (#{global-extend\ 662}#
        'eval-when
        'eval-when
        '())
      (#{global-extend\ 662}#
        'core
        'syntax-case
        (letrec ((#{gen-syntax-case\ 3922}#
                   (lambda (#{x\ 3923}#
                            #{keys\ 3924}#
                            #{clauses\ 3925}#
                            #{r\ 3926}#
                            #{mod\ 3927}#)
                     (if (null? #{clauses\ 3925}#)
                       (#{build-application\ 588}#
                         #f
                         (#{build-primref\ 614}#
                           #f
                           'syntax-violation)
                         (list (#{build-data\ 616}# #f #f)
                               (#{build-data\ 616}#
                                 #f
                                 "source expression failed to match any pattern")
                               #{x\ 3923}#))
                       ((lambda (#{tmp\ 3937}#)
                          ((lambda (#{tmp\ 3938}#)
                             (if #{tmp\ 3938}#
                               (apply (lambda (#{pat\ 3941}# #{exp\ 3942}#)
                                        (if (if (#{id?\ 666}# #{pat\ 3941}#)
                                              (and-map
                                                (lambda (#{x\ 3945}#)
                                                  (not (#{free-id=?\ 725}#
                                                         #{pat\ 3941}#
                                                         #{x\ 3945}#)))
                                                (cons '#(syntax-object
                                                         ...
                                                         ((top)
                                                          #(ribcage
                                                            #(pat exp)
                                                            #((top) (top))
                                                            #("i3939" "i3940"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x
                                                              keys
                                                              clauses
                                                              r
                                                              mod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i3928"
                                                              "i3929"
                                                              "i3930"
                                                              "i3931"
                                                              "i3932"))
                                                          #(ribcage
                                                            (gen-syntax-case
                                                              gen-clause
                                                              build-dispatch-call
                                                              convert-pattern)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i3921"
                                                             "i3919"
                                                             "i3917"
                                                             "i3915"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              chi-lambda-case
                                                              lambda*-formals
                                                              chi-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              chi-void
                                                              eval-local-transformer
                                                              chi-local-syntax
                                                              chi-body
                                                              chi-macro
                                                              chi-application
                                                              chi-expr
                                                              chi
                                                              chi-top
                                                              syntax-type
                                                              chi-when-list
                                                              chi-install-global
                                                              chi-top-sequence
                                                              chi-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              maybe-name-value!
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              *mode*)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i780"
                                                             "i778"
                                                             "i776"
                                                             "i774"
                                                             "i772"
                                                             "i770"
                                                             "i768"
                                                             "i766"
                                                             "i764"
                                                             "i762"
                                                             "i760"
                                                             "i758"
                                                             "i756"
                                                             "i754"
                                                             "i752"
                                                             "i750"
                                                             "i748"
                                                             "i746"
                                                             "i744"
                                                             "i742"
                                                             "i740"
                                                             "i738"
                                                             "i736"
                                                             "i734"
                                                             "i732"
                                                             "i730"
                                                             "i728"
                                                             "i726"
                                                             "i724"
                                                             "i722"
                                                             "i720"
                                                             "i718"
                                                             "i716"
                                                             "i714"
                                                             "i712"
                                                             "i710"
                                                             "i709"
                                                             "i708"
                                                             "i706"
                                                             "i705"
                                                             "i704"
                                                             "i703"
                                                             "i702"
                                                             "i700"
                                                             "i698"
                                                             "i696"
                                                             "i694"
                                                             "i692"
                                                             "i690"
                                                             "i688"
                                                             "i686"
                                                             "i683"
                                                             "i681"
                                                             "i680"
                                                             "i679"
                                                             "i678"
                                                             "i677"
                                                             "i676"
                                                             "i674"
                                                             "i672"
                                                             "i670"
                                                             "i668"
                                                             "i667"
                                                             "i665"
                                                             "i663"
                                                             "i661"
                                                             "i659"
                                                             "i657"
                                                             "i655"
                                                             "i653"
                                                             "i652"
                                                             "i650"
                                                             "i648"
                                                             "i647"
                                                             "i646"
                                                             "i644"
                                                             "i643"
                                                             "i641"
                                                             "i639"
                                                             "i637"
                                                             "i635"
                                                             "i633"
                                                             "i631"
                                                             "i629"
                                                             "i627"
                                                             "i625"
                                                             "i623"
                                                             "i621"
                                                             "i619"
                                                             "i617"
                                                             "i615"
                                                             "i613"
                                                             "i611"
                                                             "i609"
                                                             "i607"
                                                             "i605"
                                                             "i603"
                                                             "i601"
                                                             "i599"
                                                             "i597"
                                                             "i595"
                                                             "i593"
                                                             "i591"
                                                             "i589"
                                                             "i587"
                                                             "i585"
                                                             "i583"
                                                             "i581"
                                                             "i579"
                                                             "i578"
                                                             "i576"
                                                             "i574"
                                                             "i572"
                                                             "i570"
                                                             "i568"
                                                             "i566"
                                                             "i564"))
                                                          #(ribcage
                                                            (define-structure
                                                              and-map*)
                                                            ((top) (top))
                                                            ("i467" "i465")))
                                                         (hygiene guile))
                                                      #{keys\ 3924}#))
                                              #f)
                                          (let ((#{labels\ 3949}#
                                                  (list (#{gen-label\ 682}#)))
                                                (#{var\ 3950}#
                                                  (#{gen-var\ 779}#
                                                    #{pat\ 3941}#)))
                                            (#{build-application\ 588}#
                                              #f
                                              (#{build-simple-lambda\ 608}#
                                                #f
                                                (list (syntax->datum
                                                        #{pat\ 3941}#))
                                                #f
                                                (list #{var\ 3950}#)
                                                '()
                                                (#{chi\ 751}#
                                                  #{exp\ 3942}#
                                                  (#{extend-env\ 654}#
                                                    #{labels\ 3949}#
                                                    (list (cons 'syntax
                                                                (cons #{var\ 3950}#
                                                                      0)))
                                                    #{r\ 3926}#)
                                                  (#{make-binding-wrap\ 713}#
                                                    (list #{pat\ 3941}#)
                                                    #{labels\ 3949}#
                                                    '(()))
                                                  #{mod\ 3927}#))
                                              (list #{x\ 3923}#)))
                                          (#{gen-clause\ 3920}#
                                            #{x\ 3923}#
                                            #{keys\ 3924}#
                                            (cdr #{clauses\ 3925}#)
                                            #{r\ 3926}#
                                            #{pat\ 3941}#
                                            #t
                                            #{exp\ 3942}#
                                            #{mod\ 3927}#)))
                                      #{tmp\ 3938}#)
                               ((lambda (#{tmp\ 3956}#)
                                  (if #{tmp\ 3956}#
                                    (apply (lambda (#{pat\ 3960}#
                                                    #{fender\ 3961}#
                                                    #{exp\ 3962}#)
                                             (#{gen-clause\ 3920}#
                                               #{x\ 3923}#
                                               #{keys\ 3924}#
                                               (cdr #{clauses\ 3925}#)
                                               #{r\ 3926}#
                                               #{pat\ 3960}#
                                               #{fender\ 3961}#
                                               #{exp\ 3962}#
                                               #{mod\ 3927}#))
                                           #{tmp\ 3956}#)
                                    ((lambda (#{_\ 3964}#)
                                       (syntax-violation
                                         'syntax-case
                                         "invalid clause"
                                         (car #{clauses\ 3925}#)))
                                     #{tmp\ 3937}#)))
                                ($sc-dispatch
                                  #{tmp\ 3937}#
                                  '(any any any)))))
                           ($sc-dispatch #{tmp\ 3937}# (quote (any any)))))
                        (car #{clauses\ 3925}#)))))
                 (#{gen-clause\ 3920}#
                   (lambda (#{x\ 3965}#
                            #{keys\ 3966}#
                            #{clauses\ 3967}#
                            #{r\ 3968}#
                            #{pat\ 3969}#
                            #{fender\ 3970}#
                            #{exp\ 3971}#
                            #{mod\ 3972}#)
                     (call-with-values
                       (lambda ()
                         (#{convert-pattern\ 3916}#
                           #{pat\ 3969}#
                           #{keys\ 3966}#))
                       (lambda (#{p\ 3981}# #{pvars\ 3982}#)
                         (if (not (#{distinct-bound-ids?\ 731}#
                                    (map car #{pvars\ 3982}#)))
                           (syntax-violation
                             'syntax-case
                             "duplicate pattern variable"
                             #{pat\ 3969}#)
                           (if (not (and-map
                                      (lambda (#{x\ 3989}#)
                                        (not (#{ellipsis?\ 767}#
                                               (car #{x\ 3989}#))))
                                      #{pvars\ 3982}#))
                             (syntax-violation
                               'syntax-case
                               "misplaced ellipsis"
                               #{pat\ 3969}#)
                             (let ((#{y\ 3993}#
                                     (#{gen-var\ 779}# (quote tmp))))
                               (#{build-application\ 588}#
                                 #f
                                 (#{build-simple-lambda\ 608}#
                                   #f
                                   (list (quote tmp))
                                   #f
                                   (list #{y\ 3993}#)
                                   '()
                                   (let ((#{y\ 3997}#
                                           (#{build-lexical-reference\ 594}#
                                             'value
                                             #f
                                             'tmp
                                             #{y\ 3993}#)))
                                     (#{build-conditional\ 590}#
                                       #f
                                       ((lambda (#{tmp\ 4000}#)
                                          ((lambda (#{tmp\ 4001}#)
                                             (if #{tmp\ 4001}#
                                               (apply (lambda () #{y\ 3997}#)
                                                      #{tmp\ 4001}#)
                                               ((lambda (#{_\ 4003}#)
                                                  (#{build-conditional\ 590}#
                                                    #f
                                                    #{y\ 3997}#
                                                    (#{build-dispatch-call\ 3918}#
                                                      #{pvars\ 3982}#
                                                      #{fender\ 3970}#
                                                      #{y\ 3997}#
                                                      #{r\ 3968}#
                                                      #{mod\ 3972}#)
                                                    (#{build-data\ 616}#
                                                      #f
                                                      #f)))
                                                #{tmp\ 4000}#)))
                                           ($sc-dispatch
                                             #{tmp\ 4000}#
                                             '#(atom #t))))
                                        #{fender\ 3970}#)
                                       (#{build-dispatch-call\ 3918}#
                                         #{pvars\ 3982}#
                                         #{exp\ 3971}#
                                         #{y\ 3997}#
                                         #{r\ 3968}#
                                         #{mod\ 3972}#)
                                       (#{gen-syntax-case\ 3922}#
                                         #{x\ 3965}#
                                         #{keys\ 3966}#
                                         #{clauses\ 3967}#
                                         #{r\ 3968}#
                                         #{mod\ 3972}#))))
                                 (list (if (eq? #{p\ 3981}# (quote any))
                                         (#{build-application\ 588}#
                                           #f
                                           (#{build-primref\ 614}#
                                             #f
                                             'list)
                                           (list #{x\ 3965}#))
                                         (#{build-application\ 588}#
                                           #f
                                           (#{build-primref\ 614}#
                                             #f
                                             '$sc-dispatch)
                                           (list #{x\ 3965}#
                                                 (#{build-data\ 616}#
                                                   #f
                                                   #{p\ 3981}#)))))))))))))
                 (#{build-dispatch-call\ 3918}#
                   (lambda (#{pvars\ 4011}#
                            #{exp\ 4012}#
                            #{y\ 4013}#
                            #{r\ 4014}#
                            #{mod\ 4015}#)
                     (let ((#{ids\ 4023}# (map car #{pvars\ 4011}#))
                           (#{levels\ 4024}# (map cdr #{pvars\ 4011}#)))
                       (let ((#{labels\ 4027}#
                               (#{gen-labels\ 684}# #{ids\ 4023}#))
                             (#{new-vars\ 4028}#
                               (map #{gen-var\ 779}# #{ids\ 4023}#)))
                         (#{build-application\ 588}#
                           #f
                           (#{build-primref\ 614}# #f (quote apply))
                           (list (#{build-simple-lambda\ 608}#
                                   #f
                                   (map syntax->datum #{ids\ 4023}#)
                                   #f
                                   #{new-vars\ 4028}#
                                   '()
                                   (#{chi\ 751}#
                                     #{exp\ 4012}#
                                     (#{extend-env\ 654}#
                                       #{labels\ 4027}#
                                       (map (lambda (#{var\ 4032}#
                                                     #{level\ 4033}#)
                                              (cons 'syntax
                                                    (cons #{var\ 4032}#
                                                          #{level\ 4033}#)))
                                            #{new-vars\ 4028}#
                                            (map cdr #{pvars\ 4011}#))
                                       #{r\ 4014}#)
                                     (#{make-binding-wrap\ 713}#
                                       #{ids\ 4023}#
                                       #{labels\ 4027}#
                                       '(()))
                                     #{mod\ 4015}#))
                                 #{y\ 4013}#))))))
                 (#{convert-pattern\ 3916}#
                   (lambda (#{pattern\ 4039}# #{keys\ 4040}#)
                     (letrec ((#{cvt\ 4046}#
                                (lambda (#{p\ 4047}# #{n\ 4048}# #{ids\ 4049}#)
                                  (if (#{id?\ 666}# #{p\ 4047}#)
                                    (if (#{bound-id-member?\ 733}#
                                          #{p\ 4047}#
                                          #{keys\ 4040}#)
                                      (values
                                        (vector (quote free-id) #{p\ 4047}#)
                                        #{ids\ 4049}#)
                                      (values
                                        'any
                                        (cons (cons #{p\ 4047}# #{n\ 4048}#)
                                              #{ids\ 4049}#)))
                                    ((lambda (#{tmp\ 4053}#)
                                       ((lambda (#{tmp\ 4054}#)
                                          (if (if #{tmp\ 4054}#
                                                (apply (lambda (#{x\ 4057}#
                                                                #{dots\ 4058}#)
                                                         (#{ellipsis?\ 767}#
                                                           #{dots\ 4058}#))
                                                       #{tmp\ 4054}#)
                                                #f)
                                            (apply (lambda (#{x\ 4061}#
                                                            #{dots\ 4062}#)
                                                     (call-with-values
                                                       (lambda ()
                                                         (#{cvt\ 4046}#
                                                           #{x\ 4061}#
                                                           (#{fx+\ 567}#
                                                             #{n\ 4048}#
                                                             1)
                                                           #{ids\ 4049}#))
                                                       (lambda (#{p\ 4063}#
                                                                #{ids\ 4064}#)
                                                         (values
                                                           (if (eq? #{p\ 4063}#
                                                                    'any)
                                                             'each-any
                                                             (vector
                                                               'each
                                                               #{p\ 4063}#))
                                                           #{ids\ 4064}#))))
                                                   #{tmp\ 4054}#)
                                            ((lambda (#{tmp\ 4067}#)
                                               (if (if #{tmp\ 4067}#
                                                     (apply (lambda (#{x\ 4071}#
                                                                     #{dots\ 4072}#
                                                                     #{ys\ 4073}#)
                                                              (#{ellipsis?\ 767}#
                                                                #{dots\ 4072}#))
                                                            #{tmp\ 4067}#)
                                                     #f)
                                                 (apply (lambda (#{x\ 4077}#
                                                                 #{dots\ 4078}#
                                                                 #{ys\ 4079}#)
                                                          (call-with-values
                                                            (lambda ()
                                                              (#{cvt*\ 4044}#
                                                                #{ys\ 4079}#
                                                                #{n\ 4048}#
                                                                #{ids\ 4049}#))
                                                            (lambda (#{ys\ 4081}#
                                                                     #{ids\ 4082}#)
                                                              (call-with-values
                                                                (lambda ()
                                                                  (#{cvt\ 4046}#
                                                                    #{x\ 4077}#
                                                                    (+ #{n\ 4048}#
                                                                       1)
                                                                    #{ids\ 4082}#))
                                                                (lambda (#{x\ 4085}#
                                                                         #{ids\ 4086}#)
                                                                  (values
                                                                    (list->vector
                                                                      (cons 'each+
                                                                            (cons #{x\ 4085}#
                                                                                  (cons (reverse
                                                                                          #{ys\ 4081}#)
                                                                                        '(())))))
                                                                    #{ids\ 4086}#))))))
                                                        #{tmp\ 4067}#)
                                                 ((lambda (#{tmp\ 4090}#)
                                                    (if #{tmp\ 4090}#
                                                      (apply (lambda (#{x\ 4093}#
                                                                      #{y\ 4094}#)
                                                               (call-with-values
                                                                 (lambda ()
                                                                   (#{cvt\ 4046}#
                                                                     #{y\ 4094}#
                                                                     #{n\ 4048}#
                                                                     #{ids\ 4049}#))
                                                                 (lambda (#{y\ 4095}#
                                                                          #{ids\ 4096}#)
                                                                   (call-with-values
                                                                     (lambda ()
                                                                       (#{cvt\ 4046}#
                                                                         #{x\ 4093}#
                                                                         #{n\ 4048}#
                                                                         #{ids\ 4096}#))
                                                                     (lambda (#{x\ 4099}#
                                                                              #{ids\ 4100}#)
                                                                       (values
                                                                         (cons #{x\ 4099}#
                                                                               #{y\ 4095}#)
                                                                         #{ids\ 4100}#))))))
                                                             #{tmp\ 4090}#)
                                                      ((lambda (#{tmp\ 4103}#)
                                                         (if #{tmp\ 4103}#
                                                           (apply (lambda ()
                                                                    (values
                                                                      '()
                                                                      #{ids\ 4049}#))
                                                                  #{tmp\ 4103}#)
                                                           ((lambda (#{tmp\ 4104}#)
                                                              (if #{tmp\ 4104}#
                                                                (apply (lambda (#{x\ 4106}#)
                                                                         (call-with-values
                                                                           (lambda ()
                                                                             (#{cvt\ 4046}#
                                                                               #{x\ 4106}#
                                                                               #{n\ 4048}#
                                                                               #{ids\ 4049}#))
                                                                           (lambda (#{p\ 4108}#
                                                                                    #{ids\ 4109}#)
                                                                             (values
                                                                               (vector
                                                                                 'vector
                                                                                 #{p\ 4108}#)
                                                                               #{ids\ 4109}#))))
                                                                       #{tmp\ 4104}#)
                                                                ((lambda (#{x\ 4113}#)
                                                                   (values
                                                                     (vector
                                                                       'atom
                                                                       (#{strip\ 777}#
                                                                         #{p\ 4047}#
                                                                         '(())))
                                                                     #{ids\ 4049}#))
                                                                 #{tmp\ 4053}#)))
                                                            ($sc-dispatch
                                                              #{tmp\ 4053}#
                                                              '#(vector
                                                                 each-any)))))
                                                       ($sc-dispatch
                                                         #{tmp\ 4053}#
                                                         '()))))
                                                  ($sc-dispatch
                                                    #{tmp\ 4053}#
                                                    '(any . any)))))
                                             ($sc-dispatch
                                               #{tmp\ 4053}#
                                               '(any any . each-any)))))
                                        ($sc-dispatch
                                          #{tmp\ 4053}#
                                          '(any any))))
                                     #{p\ 4047}#))))
                              (#{cvt*\ 4044}#
                                (lambda (#{p*\ 4115}#
                                         #{n\ 4116}#
                                         #{ids\ 4117}#)
                                  (if (null? #{p*\ 4115}#)
                                    (values (quote ()) #{ids\ 4117}#)
                                    (call-with-values
                                      (lambda ()
                                        (#{cvt*\ 4044}#
                                          (cdr #{p*\ 4115}#)
                                          #{n\ 4116}#
                                          #{ids\ 4117}#))
                                      (lambda (#{y\ 4121}# #{ids\ 4122}#)
                                        (call-with-values
                                          (lambda ()
                                            (#{cvt\ 4046}#
                                              (car #{p*\ 4115}#)
                                              #{n\ 4116}#
                                              #{ids\ 4122}#))
                                          (lambda (#{x\ 4125}# #{ids\ 4126}#)
                                            (values
                                              (cons #{x\ 4125}# #{y\ 4121}#)
                                              #{ids\ 4126}#)))))))))
                       (#{cvt\ 4046}# #{pattern\ 4039}# 0 (quote ()))))))
          (lambda (#{e\ 4129}#
                   #{r\ 4130}#
                   #{w\ 4131}#
                   #{s\ 4132}#
                   #{mod\ 4133}#)
            (let ((#{e\ 4140}#
                    (#{source-wrap\ 737}#
                      #{e\ 4129}#
                      #{w\ 4131}#
                      #{s\ 4132}#
                      #{mod\ 4133}#)))
              ((lambda (#{tmp\ 4141}#)
                 ((lambda (#{tmp\ 4142}#)
                    (if #{tmp\ 4142}#
                      (apply (lambda (#{_\ 4147}#
                                      #{val\ 4148}#
                                      #{key\ 4149}#
                                      #{m\ 4150}#)
                               (if (and-map
                                     (lambda (#{x\ 4151}#)
                                       (if (#{id?\ 666}# #{x\ 4151}#)
                                         (not (#{ellipsis?\ 767}# #{x\ 4151}#))
                                         #f))
                                     #{key\ 4149}#)
                                 (let ((#{x\ 4157}#
                                         (#{gen-var\ 779}# (quote tmp))))
                                   (#{build-application\ 588}#
                                     #{s\ 4132}#
                                     (#{build-simple-lambda\ 608}#
                                       #f
                                       (list (quote tmp))
                                       #f
                                       (list #{x\ 4157}#)
                                       '()
                                       (#{gen-syntax-case\ 3922}#
                                         (#{build-lexical-reference\ 594}#
                                           'value
                                           #f
                                           'tmp
                                           #{x\ 4157}#)
                                         #{key\ 4149}#
                                         #{m\ 4150}#
                                         #{r\ 4130}#
                                         #{mod\ 4133}#))
                                     (list (#{chi\ 751}#
                                             #{val\ 4148}#
                                             #{r\ 4130}#
                                             '(())
                                             #{mod\ 4133}#))))
                                 (syntax-violation
                                   'syntax-case
                                   "invalid literals list"
                                   #{e\ 4140}#)))
                             #{tmp\ 4142}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp\ 4141}#)))
                  ($sc-dispatch
                    #{tmp\ 4141}#
                    '(any any each-any . each-any))))
               #{e\ 4140}#)))))
      (set! macroexpand
        (lambda (#{x\ 4163}# . #{rest\ 4164}#)
          (let ((#{m\ 4170}#
                  (if (null? #{rest\ 4164}#)
                    'e
                    (car #{rest\ 4164}#)))
                (#{esew\ 4171}#
                  (if (let ((#{t\ 4175}# (null? #{rest\ 4164}#)))
                        (if #{t\ 4175}#
                          #{t\ 4175}#
                          (null? (cdr #{rest\ 4164}#))))
                    '(eval)
                    (cadr #{rest\ 4164}#)))
                (#{mod\ 4172}#
                  (cons 'hygiene
                        (module-name (current-module)))))
            (with-fluids
              ((#{*mode*\ 565}# #{m\ 4170}#))
              (if (eq? #{m\ 4170}# (quote e))
                (memoize-expression
                  (#{chi-top\ 749}#
                    #{x\ 4163}#
                    '()
                    '((top))
                    #{m\ 4170}#
                    #{esew\ 4171}#
                    #{mod\ 4172}#))
                (#{chi-top\ 749}#
                  #{x\ 4163}#
                  '()
                  '((top))
                  #{m\ 4170}#
                  #{esew\ 4171}#
                  #{mod\ 4172}#))))))
      (set! identifier?
        (lambda (#{x\ 4181}#)
          (#{nonsymbol-id?\ 664}# #{x\ 4181}#)))
      (set! datum->syntax
        (lambda (#{id\ 4183}# #{datum\ 4184}#)
          (#{make-syntax-object\ 628}#
            #{datum\ 4184}#
            (#{syntax-object-wrap\ 634}# #{id\ 4183}#)
            #f)))
      (set! syntax->datum
        (lambda (#{x\ 4187}#)
          (#{strip\ 777}# #{x\ 4187}# (quote (())))))
      (set! generate-temporaries
        (lambda (#{ls\ 4190}#)
          (begin
            (let ((#{x\ 4194}# #{ls\ 4190}#))
              (if (not (list? #{x\ 4194}#))
                (syntax-violation
                  'generate-temporaries
                  "invalid argument"
                  #{x\ 4194}#)))
            (map (lambda (#{x\ 4195}#)
                   (#{wrap\ 735}# (gensym) (quote ((top))) #f))
                 #{ls\ 4190}#))))
      (set! free-identifier=?
        (lambda (#{x\ 4199}# #{y\ 4200}#)
          (begin
            (let ((#{x\ 4205}# #{x\ 4199}#))
              (if (not (#{nonsymbol-id?\ 664}# #{x\ 4205}#))
                (syntax-violation
                  'free-identifier=?
                  "invalid argument"
                  #{x\ 4205}#)))
            (let ((#{x\ 4208}# #{y\ 4200}#))
              (if (not (#{nonsymbol-id?\ 664}# #{x\ 4208}#))
                (syntax-violation
                  'free-identifier=?
                  "invalid argument"
                  #{x\ 4208}#)))
            (#{free-id=?\ 725}# #{x\ 4199}# #{y\ 4200}#))))
      (set! bound-identifier=?
        (lambda (#{x\ 4209}# #{y\ 4210}#)
          (begin
            (let ((#{x\ 4215}# #{x\ 4209}#))
              (if (not (#{nonsymbol-id?\ 664}# #{x\ 4215}#))
                (syntax-violation
                  'bound-identifier=?
                  "invalid argument"
                  #{x\ 4215}#)))
            (let ((#{x\ 4218}# #{y\ 4210}#))
              (if (not (#{nonsymbol-id?\ 664}# #{x\ 4218}#))
                (syntax-violation
                  'bound-identifier=?
                  "invalid argument"
                  #{x\ 4218}#)))
            (#{bound-id=?\ 727}# #{x\ 4209}# #{y\ 4210}#))))
      (set! syntax-violation
        (lambda (#{who\ 4219}#
                 #{message\ 4220}#
                 #{form\ 4221}#
                 .
                 #{subform\ 4222}#)
          (begin
            (let ((#{x\ 4229}# #{who\ 4219}#))
              (if (not ((lambda (#{x\ 4230}#)
                          (let ((#{t\ 4234}# (not #{x\ 4230}#)))
                            (if #{t\ 4234}#
                              #{t\ 4234}#
                              (let ((#{t\ 4237}# (string? #{x\ 4230}#)))
                                (if #{t\ 4237}#
                                  #{t\ 4237}#
                                  (symbol? #{x\ 4230}#))))))
                        #{x\ 4229}#))
                (syntax-violation
                  'syntax-violation
                  "invalid argument"
                  #{x\ 4229}#)))
            (let ((#{x\ 4241}# #{message\ 4220}#))
              (if (not (string? #{x\ 4241}#))
                (syntax-violation
                  'syntax-violation
                  "invalid argument"
                  #{x\ 4241}#)))
            (scm-error
              'syntax-error
              'macroexpand
              (string-append
                (if #{who\ 4219}# "~a: " "")
                "~a "
                (if (null? #{subform\ 4222}#)
                  "in ~a"
                  "in subform `~s' of `~s'"))
              (let ((#{tail\ 4243}#
                      (cons #{message\ 4220}#
                            (map (lambda (#{x\ 4244}#)
                                   (#{strip\ 777}# #{x\ 4244}# (quote (()))))
                                 (append
                                   #{subform\ 4222}#
                                   (list #{form\ 4221}#))))))
                (if #{who\ 4219}#
                  (cons #{who\ 4219}# #{tail\ 4243}#)
                  #{tail\ 4243}#))
              #f))))
      (letrec ((#{match\ 4260}#
                 (lambda (#{e\ 4261}#
                          #{p\ 4262}#
                          #{w\ 4263}#
                          #{r\ 4264}#
                          #{mod\ 4265}#)
                   (if (not #{r\ 4264}#)
                     #f
                     (if (eq? #{p\ 4262}# (quote any))
                       (cons (#{wrap\ 735}#
                               #{e\ 4261}#
                               #{w\ 4263}#
                               #{mod\ 4265}#)
                             #{r\ 4264}#)
                       (if (#{syntax-object?\ 630}# #{e\ 4261}#)
                         (#{match*\ 4258}#
                           (#{syntax-object-expression\ 632}# #{e\ 4261}#)
                           #{p\ 4262}#
                           (#{join-wraps\ 717}#
                             #{w\ 4263}#
                             (#{syntax-object-wrap\ 634}# #{e\ 4261}#))
                           #{r\ 4264}#
                           (#{syntax-object-module\ 636}# #{e\ 4261}#))
                         (#{match*\ 4258}#
                           #{e\ 4261}#
                           #{p\ 4262}#
                           #{w\ 4263}#
                           #{r\ 4264}#
                           #{mod\ 4265}#))))))
               (#{match*\ 4258}#
                 (lambda (#{e\ 4278}#
                          #{p\ 4279}#
                          #{w\ 4280}#
                          #{r\ 4281}#
                          #{mod\ 4282}#)
                   (if (null? #{p\ 4279}#)
                     (if (null? #{e\ 4278}#) #{r\ 4281}# #f)
                     (if (pair? #{p\ 4279}#)
                       (if (pair? #{e\ 4278}#)
                         (#{match\ 4260}#
                           (car #{e\ 4278}#)
                           (car #{p\ 4279}#)
                           #{w\ 4280}#
                           (#{match\ 4260}#
                             (cdr #{e\ 4278}#)
                             (cdr #{p\ 4279}#)
                             #{w\ 4280}#
                             #{r\ 4281}#
                             #{mod\ 4282}#)
                           #{mod\ 4282}#)
                         #f)
                       (if (eq? #{p\ 4279}# (quote each-any))
                         (let ((#{l\ 4299}#
                                 (#{match-each-any\ 4252}#
                                   #{e\ 4278}#
                                   #{w\ 4280}#
                                   #{mod\ 4282}#)))
                           (if #{l\ 4299}#
                             (cons #{l\ 4299}# #{r\ 4281}#)
                             #f))
                         (let ((#{atom-key\ 4305}# (vector-ref #{p\ 4279}# 0)))
                           (if (memv #{atom-key\ 4305}# (quote (each)))
                             (if (null? #{e\ 4278}#)
                               (#{match-empty\ 4254}#
                                 (vector-ref #{p\ 4279}# 1)
                                 #{r\ 4281}#)
                               (let ((#{l\ 4308}#
                                       (#{match-each\ 4248}#
                                         #{e\ 4278}#
                                         (vector-ref #{p\ 4279}# 1)
                                         #{w\ 4280}#
                                         #{mod\ 4282}#)))
                                 (if #{l\ 4308}#
                                   (letrec ((#{collect\ 4313}#
                                              (lambda (#{l\ 4314}#)
                                                (if (null? (car #{l\ 4314}#))
                                                  #{r\ 4281}#
                                                  (cons (map car #{l\ 4314}#)
                                                        (#{collect\ 4313}#
                                                          (map cdr
                                                               #{l\ 4314}#)))))))
                                     (#{collect\ 4313}# #{l\ 4308}#))
                                   #f)))
                             (if (memv #{atom-key\ 4305}# (quote (each+)))
                               (call-with-values
                                 (lambda ()
                                   (#{match-each+\ 4250}#
                                     #{e\ 4278}#
                                     (vector-ref #{p\ 4279}# 1)
                                     (vector-ref #{p\ 4279}# 2)
                                     (vector-ref #{p\ 4279}# 3)
                                     #{w\ 4280}#
                                     #{r\ 4281}#
                                     #{mod\ 4282}#))
                                 (lambda (#{xr*\ 4316}#
                                          #{y-pat\ 4317}#
                                          #{r\ 4318}#)
                                   (if #{r\ 4318}#
                                     (if (null? #{y-pat\ 4317}#)
                                       (if (null? #{xr*\ 4316}#)
                                         (#{match-empty\ 4254}#
                                           (vector-ref #{p\ 4279}# 1)
                                           #{r\ 4318}#)
                                         (#{combine\ 4256}#
                                           #{xr*\ 4316}#
                                           #{r\ 4318}#))
                                       #f)
                                     #f)))
                               (if (memv #{atom-key\ 4305}# (quote (free-id)))
                                 (if (#{id?\ 666}# #{e\ 4278}#)
                                   (if (#{free-id=?\ 725}#
                                         (#{wrap\ 735}#
                                           #{e\ 4278}#
                                           #{w\ 4280}#
                                           #{mod\ 4282}#)
                                         (vector-ref #{p\ 4279}# 1))
                                     #{r\ 4281}#
                                     #f)
                                   #f)
                                 (if (memv #{atom-key\ 4305}# (quote (atom)))
                                   (if (equal?
                                         (vector-ref #{p\ 4279}# 1)
                                         (#{strip\ 777}#
                                           #{e\ 4278}#
                                           #{w\ 4280}#))
                                     #{r\ 4281}#
                                     #f)
                                   (if (memv #{atom-key\ 4305}#
                                             '(vector))
                                     (if (vector? #{e\ 4278}#)
                                       (#{match\ 4260}#
                                         (vector->list #{e\ 4278}#)
                                         (vector-ref #{p\ 4279}# 1)
                                         #{w\ 4280}#
                                         #{r\ 4281}#
                                         #{mod\ 4282}#)
                                       #f))))))))))))
               (#{combine\ 4256}#
                 (lambda (#{r*\ 4335}# #{r\ 4336}#)
                   (if (null? (car #{r*\ 4335}#))
                     #{r\ 4336}#
                     (cons (map car #{r*\ 4335}#)
                           (#{combine\ 4256}#
                             (map cdr #{r*\ 4335}#)
                             #{r\ 4336}#)))))
               (#{match-empty\ 4254}#
                 (lambda (#{p\ 4339}# #{r\ 4340}#)
                   (if (null? #{p\ 4339}#)
                     #{r\ 4340}#
                     (if (eq? #{p\ 4339}# (quote any))
                       (cons (quote ()) #{r\ 4340}#)
                       (if (pair? #{p\ 4339}#)
                         (#{match-empty\ 4254}#
                           (car #{p\ 4339}#)
                           (#{match-empty\ 4254}#
                             (cdr #{p\ 4339}#)
                             #{r\ 4340}#))
                         (if (eq? #{p\ 4339}# (quote each-any))
                           (cons (quote ()) #{r\ 4340}#)
                           (let ((#{atom-key\ 4354}#
                                   (vector-ref #{p\ 4339}# 0)))
                             (if (memv #{atom-key\ 4354}# (quote (each)))
                               (#{match-empty\ 4254}#
                                 (vector-ref #{p\ 4339}# 1)
                                 #{r\ 4340}#)
                               (if (memv #{atom-key\ 4354}# (quote (each+)))
                                 (#{match-empty\ 4254}#
                                   (vector-ref #{p\ 4339}# 1)
                                   (#{match-empty\ 4254}#
                                     (reverse (vector-ref #{p\ 4339}# 2))
                                     (#{match-empty\ 4254}#
                                       (vector-ref #{p\ 4339}# 3)
                                       #{r\ 4340}#)))
                                 (if (memv #{atom-key\ 4354}#
                                           '(free-id atom))
                                   #{r\ 4340}#
                                   (if (memv #{atom-key\ 4354}#
                                             '(vector))
                                     (#{match-empty\ 4254}#
                                       (vector-ref #{p\ 4339}# 1)
                                       #{r\ 4340}#))))))))))))
               (#{match-each-any\ 4252}#
                 (lambda (#{e\ 4359}# #{w\ 4360}# #{mod\ 4361}#)
                   (if (pair? #{e\ 4359}#)
                     (let ((#{l\ 4368}#
                             (#{match-each-any\ 4252}#
                               (cdr #{e\ 4359}#)
                               #{w\ 4360}#
                               #{mod\ 4361}#)))
                       (if #{l\ 4368}#
                         (cons (#{wrap\ 735}#
                                 (car #{e\ 4359}#)
                                 #{w\ 4360}#
                                 #{mod\ 4361}#)
                               #{l\ 4368}#)
                         #f))
                     (if (null? #{e\ 4359}#)
                       '()
                       (if (#{syntax-object?\ 630}# #{e\ 4359}#)
                         (#{match-each-any\ 4252}#
                           (#{syntax-object-expression\ 632}# #{e\ 4359}#)
                           (#{join-wraps\ 717}#
                             #{w\ 4360}#
                             (#{syntax-object-wrap\ 634}# #{e\ 4359}#))
                           #{mod\ 4361}#)
                         #f)))))
               (#{match-each+\ 4250}#
                 (lambda (#{e\ 4376}#
                          #{x-pat\ 4377}#
                          #{y-pat\ 4378}#
                          #{z-pat\ 4379}#
                          #{w\ 4380}#
                          #{r\ 4381}#
                          #{mod\ 4382}#)
                   (letrec ((#{f\ 4393}#
                              (lambda (#{e\ 4394}# #{w\ 4395}#)
                                (if (pair? #{e\ 4394}#)
                                  (call-with-values
                                    (lambda ()
                                      (#{f\ 4393}#
                                        (cdr #{e\ 4394}#)
                                        #{w\ 4395}#))
                                    (lambda (#{xr*\ 4398}#
                                             #{y-pat\ 4399}#
                                             #{r\ 4400}#)
                                      (if #{r\ 4400}#
                                        (if (null? #{y-pat\ 4399}#)
                                          (let ((#{xr\ 4405}#
                                                  (#{match\ 4260}#
                                                    (car #{e\ 4394}#)
                                                    #{x-pat\ 4377}#
                                                    #{w\ 4395}#
                                                    '()
                                                    #{mod\ 4382}#)))
                                            (if #{xr\ 4405}#
                                              (values
                                                (cons #{xr\ 4405}#
                                                      #{xr*\ 4398}#)
                                                #{y-pat\ 4399}#
                                                #{r\ 4400}#)
                                              (values #f #f #f)))
                                          (values
                                            '()
                                            (cdr #{y-pat\ 4399}#)
                                            (#{match\ 4260}#
                                              (car #{e\ 4394}#)
                                              (car #{y-pat\ 4399}#)
                                              #{w\ 4395}#
                                              #{r\ 4400}#
                                              #{mod\ 4382}#)))
                                        (values #f #f #f))))
                                  (if (#{syntax-object?\ 630}# #{e\ 4394}#)
                                    (#{f\ 4393}#
                                      (#{syntax-object-expression\ 632}#
                                        #{e\ 4394}#)
                                      (#{join-wraps\ 717}#
                                        #{w\ 4395}#
                                        #{e\ 4394}#))
                                    (values
                                      '()
                                      #{y-pat\ 4378}#
                                      (#{match\ 4260}#
                                        #{e\ 4394}#
                                        #{z-pat\ 4379}#
                                        #{w\ 4395}#
                                        #{r\ 4381}#
                                        #{mod\ 4382}#)))))))
                     (#{f\ 4393}# #{e\ 4376}# #{w\ 4380}#))))
               (#{match-each\ 4248}#
                 (lambda (#{e\ 4409}#
                          #{p\ 4410}#
                          #{w\ 4411}#
                          #{mod\ 4412}#)
                   (if (pair? #{e\ 4409}#)
                     (let ((#{first\ 4420}#
                             (#{match\ 4260}#
                               (car #{e\ 4409}#)
                               #{p\ 4410}#
                               #{w\ 4411}#
                               '()
                               #{mod\ 4412}#)))
                       (if #{first\ 4420}#
                         (let ((#{rest\ 4424}#
                                 (#{match-each\ 4248}#
                                   (cdr #{e\ 4409}#)
                                   #{p\ 4410}#
                                   #{w\ 4411}#
                                   #{mod\ 4412}#)))
                           (if #{rest\ 4424}#
                             (cons #{first\ 4420}# #{rest\ 4424}#)
                             #f))
                         #f))
                     (if (null? #{e\ 4409}#)
                       '()
                       (if (#{syntax-object?\ 630}# #{e\ 4409}#)
                         (#{match-each\ 4248}#
                           (#{syntax-object-expression\ 632}# #{e\ 4409}#)
                           #{p\ 4410}#
                           (#{join-wraps\ 717}#
                             #{w\ 4411}#
                             (#{syntax-object-wrap\ 634}# #{e\ 4409}#))
                           (#{syntax-object-module\ 636}# #{e\ 4409}#))
                         #f))))))
        (set! $sc-dispatch
          (lambda (#{e\ 4432}# #{p\ 4433}#)
            (if (eq? #{p\ 4433}# (quote any))
              (list #{e\ 4432}#)
              (if (#{syntax-object?\ 630}# #{e\ 4432}#)
                (#{match*\ 4258}#
                  (#{syntax-object-expression\ 632}# #{e\ 4432}#)
                  #{p\ 4433}#
                  (#{syntax-object-wrap\ 634}# #{e\ 4432}#)
                  '()
                  (#{syntax-object-module\ 636}# #{e\ 4432}#))
                (#{match*\ 4258}#
                  #{e\ 4432}#
                  #{p\ 4433}#
                  '(())
                  '()
                  #f)))))))))

(define with-syntax
  (make-syntax-transformer
    'with-syntax
    'macro
    (cons (lambda (#{x\ 4442}#)
            ((lambda (#{tmp\ 4444}#)
               ((lambda (#{tmp\ 4445}#)
                  (if #{tmp\ 4445}#
                    (apply (lambda (#{_\ 4449}# #{e1\ 4450}# #{e2\ 4451}#)
                             (cons '#(syntax-object
                                      begin
                                      ((top)
                                       #(ribcage
                                         #(_ e1 e2)
                                         #((top) (top) (top))
                                         #("i4446" "i4447" "i4448"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4443")))
                                      (hygiene guile))
                                   (cons #{e1\ 4450}# #{e2\ 4451}#)))
                           #{tmp\ 4445}#)
                    ((lambda (#{tmp\ 4453}#)
                       (if #{tmp\ 4453}#
                         (apply (lambda (#{_\ 4459}#
                                         #{out\ 4460}#
                                         #{in\ 4461}#
                                         #{e1\ 4462}#
                                         #{e2\ 4463}#)
                                  (list '#(syntax-object
                                           syntax-case
                                           ((top)
                                            #(ribcage
                                              #(_ out in e1 e2)
                                              #((top) (top) (top) (top) (top))
                                              #("i4454"
                                                "i4455"
                                                "i4456"
                                                "i4457"
                                                "i4458"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i4443")))
                                           (hygiene guile))
                                        #{in\ 4461}#
                                        '()
                                        (list #{out\ 4460}#
                                              (cons '#(syntax-object
                                                       begin
                                                       ((top)
                                                        #(ribcage
                                                          #(_ out in e1 e2)
                                                          #((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                          #("i4454"
                                                            "i4455"
                                                            "i4456"
                                                            "i4457"
                                                            "i4458"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i4443")))
                                                       (hygiene guile))
                                                    (cons #{e1\ 4462}#
                                                          #{e2\ 4463}#)))))
                                #{tmp\ 4453}#)
                         ((lambda (#{tmp\ 4465}#)
                            (if #{tmp\ 4465}#
                              (apply (lambda (#{_\ 4471}#
                                              #{out\ 4472}#
                                              #{in\ 4473}#
                                              #{e1\ 4474}#
                                              #{e2\ 4475}#)
                                       (list '#(syntax-object
                                                syntax-case
                                                ((top)
                                                 #(ribcage
                                                   #(_ out in e1 e2)
                                                   #((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                   #("i4466"
                                                     "i4467"
                                                     "i4468"
                                                     "i4469"
                                                     "i4470"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i4443")))
                                                (hygiene guile))
                                             (cons '#(syntax-object
                                                      list
                                                      ((top)
                                                       #(ribcage
                                                         #(_ out in e1 e2)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("i4466"
                                                           "i4467"
                                                           "i4468"
                                                           "i4469"
                                                           "i4470"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i4443")))
                                                      (hygiene guile))
                                                   #{in\ 4473}#)
                                             '()
                                             (list #{out\ 4472}#
                                                   (cons '#(syntax-object
                                                            begin
                                                            ((top)
                                                             #(ribcage
                                                               #(_
                                                                 out
                                                                 in
                                                                 e1
                                                                 e2)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i4466"
                                                                 "i4467"
                                                                 "i4468"
                                                                 "i4469"
                                                                 "i4470"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i4443")))
                                                            (hygiene guile))
                                                         (cons #{e1\ 4474}#
                                                               #{e2\ 4475}#)))))
                                     #{tmp\ 4465}#)
                              (syntax-violation
                                #f
                                "source expression failed to match any pattern"
                                #{tmp\ 4444}#)))
                          ($sc-dispatch
                            #{tmp\ 4444}#
                            '(any #(each (any any)) any . each-any)))))
                     ($sc-dispatch
                       #{tmp\ 4444}#
                       '(any ((any any)) any . each-any)))))
                ($sc-dispatch
                  #{tmp\ 4444}#
                  '(any () any . each-any))))
             #{x\ 4442}#))
          (module-name (current-module)))))

(define syntax-rules
  (make-syntax-transformer
    'syntax-rules
    'macro
    (cons (lambda (#{x\ 4479}#)
            ((lambda (#{tmp\ 4481}#)
               ((lambda (#{tmp\ 4482}#)
                  (if #{tmp\ 4482}#
                    (apply (lambda (#{_\ 4488}#
                                    #{k\ 4489}#
                                    #{keyword\ 4490}#
                                    #{pattern\ 4491}#
                                    #{template\ 4492}#)
                             (list '#(syntax-object
                                      lambda
                                      ((top)
                                       #(ribcage
                                         #(_ k keyword pattern template)
                                         #((top) (top) (top) (top) (top))
                                         #("i4483"
                                           "i4484"
                                           "i4485"
                                           "i4486"
                                           "i4487"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4480")))
                                      (hygiene guile))
                                   '(#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(_ k keyword pattern template)
                                          #((top) (top) (top) (top) (top))
                                          #("i4483"
                                            "i4484"
                                            "i4485"
                                            "i4486"
                                            "i4487"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i4480")))
                                       (hygiene guile)))
                                   (vector
                                     '(#(syntax-object
                                         macro-type
                                         ((top)
                                          #(ribcage
                                            #(_ k keyword pattern template)
                                            #((top) (top) (top) (top) (top))
                                            #("i4483"
                                              "i4484"
                                              "i4485"
                                              "i4486"
                                              "i4487"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i4480")))
                                         (hygiene guile))
                                       .
                                       #(syntax-object
                                         syntax-rules
                                         ((top)
                                          #(ribcage
                                            #(_ k keyword pattern template)
                                            #((top) (top) (top) (top) (top))
                                            #("i4483"
                                              "i4484"
                                              "i4485"
                                              "i4486"
                                              "i4487"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i4480")))
                                         (hygiene guile)))
                                     (cons '#(syntax-object
                                              patterns
                                              ((top)
                                               #(ribcage
                                                 #(_
                                                   k
                                                   keyword
                                                   pattern
                                                   template)
                                                 #((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                 #("i4483"
                                                   "i4484"
                                                   "i4485"
                                                   "i4486"
                                                   "i4487"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i4480")))
                                              (hygiene guile))
                                           #{pattern\ 4491}#))
                                   (cons '#(syntax-object
                                            syntax-case
                                            ((top)
                                             #(ribcage
                                               #(_ k keyword pattern template)
                                               #((top) (top) (top) (top) (top))
                                               #("i4483"
                                                 "i4484"
                                                 "i4485"
                                                 "i4486"
                                                 "i4487"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i4480")))
                                            (hygiene guile))
                                         (cons '#(syntax-object
                                                  x
                                                  ((top)
                                                   #(ribcage
                                                     #(_
                                                       k
                                                       keyword
                                                       pattern
                                                       template)
                                                     #((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                     #("i4483"
                                                       "i4484"
                                                       "i4485"
                                                       "i4486"
                                                       "i4487"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i4480")))
                                                  (hygiene guile))
                                               (cons #{k\ 4489}#
                                                     (map (lambda (#{tmp\ 4496}#
                                                                   #{tmp\ 4495}#)
                                                            (list (cons '#(syntax-object
                                                                           dummy
                                                                           ((top)
                                                                            #(ribcage
                                                                              #(_
                                                                                k
                                                                                keyword
                                                                                pattern
                                                                                template)
                                                                              #((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                              #("i4483"
                                                                                "i4484"
                                                                                "i4485"
                                                                                "i4486"
                                                                                "i4487"))
                                                                            #(ribcage
                                                                              ()
                                                                              ()
                                                                              ())
                                                                            #(ribcage
                                                                              #(x)
                                                                              #((top))
                                                                              #("i4480")))
                                                                           (hygiene
                                                                             guile))
                                                                        #{tmp\ 4495}#)
                                                                  (list '#(syntax-object
                                                                           syntax
                                                                           ((top)
                                                                            #(ribcage
                                                                              #(_
                                                                                k
                                                                                keyword
                                                                                pattern
                                                                                template)
                                                                              #((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                              #("i4483"
                                                                                "i4484"
                                                                                "i4485"
                                                                                "i4486"
                                                                                "i4487"))
                                                                            #(ribcage
                                                                              ()
                                                                              ()
                                                                              ())
                                                                            #(ribcage
                                                                              #(x)
                                                                              #((top))
                                                                              #("i4480")))
                                                                           (hygiene
                                                                             guile))
                                                                        #{tmp\ 4496}#)))
                                                          #{template\ 4492}#
                                                          #{pattern\ 4491}#))))))
                           #{tmp\ 4482}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 4481}#)))
                ($sc-dispatch
                  #{tmp\ 4481}#
                  '(any each-any . #(each ((any . any) any))))))
             #{x\ 4479}#))
          (module-name (current-module)))))

(define let*
  (make-syntax-transformer
    'let*
    'macro
    (cons (lambda (#{x\ 4497}#)
            ((lambda (#{tmp\ 4499}#)
               ((lambda (#{tmp\ 4500}#)
                  (if (if #{tmp\ 4500}#
                        (apply (lambda (#{let*\ 4506}#
                                        #{x\ 4507}#
                                        #{v\ 4508}#
                                        #{e1\ 4509}#
                                        #{e2\ 4510}#)
                                 (and-map identifier? #{x\ 4507}#))
                               #{tmp\ 4500}#)
                        #f)
                    (apply (lambda (#{let*\ 4517}#
                                    #{x\ 4518}#
                                    #{v\ 4519}#
                                    #{e1\ 4520}#
                                    #{e2\ 4521}#)
                             (letrec ((#{f\ 4524}#
                                        (lambda (#{bindings\ 4525}#)
                                          (if (null? #{bindings\ 4525}#)
                                            (cons '#(syntax-object
                                                     let
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(f bindings)
                                                        #((top) (top))
                                                        #("i4522" "i4523"))
                                                      #(ribcage
                                                        #(let* x v e1 e2)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i4512"
                                                          "i4513"
                                                          "i4514"
                                                          "i4515"
                                                          "i4516"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i4498")))
                                                     (hygiene guile))
                                                  (cons '()
                                                        (cons #{e1\ 4520}#
                                                              #{e2\ 4521}#)))
                                            ((lambda (#{tmp\ 4530}#)
                                               ((lambda (#{tmp\ 4531}#)
                                                  (if #{tmp\ 4531}#
                                                    (apply (lambda (#{body\ 4534}#
                                                                    #{binding\ 4535}#)
                                                             (list '#(syntax-object
                                                                      let
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(body
                                                                           binding)
                                                                         #((top)
                                                                           (top))
                                                                         #("i4532"
                                                                           "i4533"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(f
                                                                           bindings)
                                                                         #((top)
                                                                           (top))
                                                                         #("i4522"
                                                                           "i4523"))
                                                                       #(ribcage
                                                                         #(let*
                                                                           x
                                                                           v
                                                                           e1
                                                                           e2)
                                                                         #((top)
                                                                           (top)
                                                                           (top)
                                                                           (top)
                                                                           (top))
                                                                         #("i4512"
                                                                           "i4513"
                                                                           "i4514"
                                                                           "i4515"
                                                                           "i4516"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(x)
                                                                         #((top))
                                                                         #("i4498")))
                                                                      (hygiene
                                                                        guile))
                                                                   (list #{binding\ 4535}#)
                                                                   #{body\ 4534}#))
                                                           #{tmp\ 4531}#)
                                                    (syntax-violation
                                                      #f
                                                      "source expression failed to match any pattern"
                                                      #{tmp\ 4530}#)))
                                                ($sc-dispatch
                                                  #{tmp\ 4530}#
                                                  '(any any))))
                                             (list (#{f\ 4524}#
                                                     (cdr #{bindings\ 4525}#))
                                                   (car #{bindings\ 4525}#)))))))
                               (#{f\ 4524}#
                                 (map list #{x\ 4518}# #{v\ 4519}#))))
                           #{tmp\ 4500}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 4499}#)))
                ($sc-dispatch
                  #{tmp\ 4499}#
                  '(any #(each (any any)) any . each-any))))
             #{x\ 4497}#))
          (module-name (current-module)))))

(define do
  (make-syntax-transformer
    'do
    'macro
    (cons (lambda (#{orig-x\ 4536}#)
            ((lambda (#{tmp\ 4538}#)
               ((lambda (#{tmp\ 4539}#)
                  (if #{tmp\ 4539}#
                    (apply (lambda (#{_\ 4547}#
                                    #{var\ 4548}#
                                    #{init\ 4549}#
                                    #{step\ 4550}#
                                    #{e0\ 4551}#
                                    #{e1\ 4552}#
                                    #{c\ 4553}#)
                             ((lambda (#{tmp\ 4555}#)
                                ((lambda (#{tmp\ 4556}#)
                                   (if #{tmp\ 4556}#
                                     (apply (lambda (#{step\ 4558}#)
                                              ((lambda (#{tmp\ 4559}#)
                                                 ((lambda (#{tmp\ 4560}#)
                                                    (if #{tmp\ 4560}#
                                                      (apply (lambda ()
                                                               (list '#(syntax-object
                                                                        let
                                                                        ((top)
                                                                         #(ribcage
                                                                           #(step)
                                                                           #((top))
                                                                           #("i4557"))
                                                                         #(ribcage
                                                                           #(_
                                                                             var
                                                                             init
                                                                             step
                                                                             e0
                                                                             e1
                                                                             c)
                                                                           #((top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top))
                                                                           #("i4540"
                                                                             "i4541"
                                                                             "i4542"
                                                                             "i4543"
                                                                             "i4544"
                                                                             "i4545"
                                                                             "i4546"))
                                                                         #(ribcage
                                                                           ()
                                                                           ()
                                                                           ())
                                                                         #(ribcage
                                                                           #(orig-x)
                                                                           #((top))
                                                                           #("i4537")))
                                                                        (hygiene
                                                                          guile))
                                                                     '#(syntax-object
                                                                        doloop
                                                                        ((top)
                                                                         #(ribcage
                                                                           #(step)
                                                                           #((top))
                                                                           #("i4557"))
                                                                         #(ribcage
                                                                           #(_
                                                                             var
                                                                             init
                                                                             step
                                                                             e0
                                                                             e1
                                                                             c)
                                                                           #((top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top))
                                                                           #("i4540"
                                                                             "i4541"
                                                                             "i4542"
                                                                             "i4543"
                                                                             "i4544"
                                                                             "i4545"
                                                                             "i4546"))
                                                                         #(ribcage
                                                                           ()
                                                                           ()
                                                                           ())
                                                                         #(ribcage
                                                                           #(orig-x)
                                                                           #((top))
                                                                           #("i4537")))
                                                                        (hygiene
                                                                          guile))
                                                                     (map list
                                                                          #{var\ 4548}#
                                                                          #{init\ 4549}#)
                                                                     (list '#(syntax-object
                                                                              if
                                                                              ((top)
                                                                               #(ribcage
                                                                                 #(step)
                                                                                 #((top))
                                                                                 #("i4557"))
                                                                               #(ribcage
                                                                                 #(_
                                                                                   var
                                                                                   init
                                                                                   step
                                                                                   e0
                                                                                   e1
                                                                                   c)
                                                                                 #((top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top))
                                                                                 #("i4540"
                                                                                   "i4541"
                                                                                   "i4542"
                                                                                   "i4543"
                                                                                   "i4544"
                                                                                   "i4545"
                                                                                   "i4546"))
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 #(orig-x)
                                                                                 #((top))
                                                                                 #("i4537")))
                                                                              (hygiene
                                                                                guile))
                                                                           (list '#(syntax-object
                                                                                    not
                                                                                    ((top)
                                                                                     #(ribcage
                                                                                       #(step)
                                                                                       #((top))
                                                                                       #("i4557"))
                                                                                     #(ribcage
                                                                                       #(_
                                                                                         var
                                                                                         init
                                                                                         step
                                                                                         e0
                                                                                         e1
                                                                                         c)
                                                                                       #((top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top))
                                                                                       #("i4540"
                                                                                         "i4541"
                                                                                         "i4542"
                                                                                         "i4543"
                                                                                         "i4544"
                                                                                         "i4545"
                                                                                         "i4546"))
                                                                                     #(ribcage
                                                                                       ()
                                                                                       ()
                                                                                       ())
                                                                                     #(ribcage
                                                                                       #(orig-x)
                                                                                       #((top))
                                                                                       #("i4537")))
                                                                                    (hygiene
                                                                                      guile))
                                                                                 #{e0\ 4551}#)
                                                                           (cons '#(syntax-object
                                                                                    begin
                                                                                    ((top)
                                                                                     #(ribcage
                                                                                       #(step)
                                                                                       #((top))
                                                                                       #("i4557"))
                                                                                     #(ribcage
                                                                                       #(_
                                                                                         var
                                                                                         init
                                                                                         step
                                                                                         e0
                                                                                         e1
                                                                                         c)
                                                                                       #((top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top))
                                                                                       #("i4540"
                                                                                         "i4541"
                                                                                         "i4542"
                                                                                         "i4543"
                                                                                         "i4544"
                                                                                         "i4545"
                                                                                         "i4546"))
                                                                                     #(ribcage
                                                                                       ()
                                                                                       ()
                                                                                       ())
                                                                                     #(ribcage
                                                                                       #(orig-x)
                                                                                       #((top))
                                                                                       #("i4537")))
                                                                                    (hygiene
                                                                                      guile))
                                                                                 (append
                                                                                   #{c\ 4553}#
                                                                                   (list (cons '#(syntax-object
                                                                                                  doloop
                                                                                                  ((top)
                                                                                                   #(ribcage
                                                                                                     #(step)
                                                                                                     #((top))
                                                                                                     #("i4557"))
                                                                                                   #(ribcage
                                                                                                     #(_
                                                                                                       var
                                                                                                       init
                                                                                                       step
                                                                                                       e0
                                                                                                       e1
                                                                                                       c)
                                                                                                     #((top)
                                                                                                       (top)
                                                                                                       (top)
                                                                                                       (top)
                                                                                                       (top)
                                                                                                       (top)
                                                                                                       (top))
                                                                                                     #("i4540"
                                                                                                       "i4541"
                                                                                                       "i4542"
                                                                                                       "i4543"
                                                                                                       "i4544"
                                                                                                       "i4545"
                                                                                                       "i4546"))
                                                                                                   #(ribcage
                                                                                                     ()
                                                                                                     ()
                                                                                                     ())
                                                                                                   #(ribcage
                                                                                                     #(orig-x)
                                                                                                     #((top))
                                                                                                     #("i4537")))
                                                                                                  (hygiene
                                                                                                    guile))
                                                                                               #{step\ 4558}#)))))))
                                                             #{tmp\ 4560}#)
                                                      ((lambda (#{tmp\ 4565}#)
                                                         (if #{tmp\ 4565}#
                                                           (apply (lambda (#{e1\ 4568}#
                                                                           #{e2\ 4569}#)
                                                                    (list '#(syntax-object
                                                                             let
                                                                             ((top)
                                                                              #(ribcage
                                                                                #(e1
                                                                                  e2)
                                                                                #((top)
                                                                                  (top))
                                                                                #("i4566"
                                                                                  "i4567"))
                                                                              #(ribcage
                                                                                #(step)
                                                                                #((top))
                                                                                #("i4557"))
                                                                              #(ribcage
                                                                                #(_
                                                                                  var
                                                                                  init
                                                                                  step
                                                                                  e0
                                                                                  e1
                                                                                  c)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4540"
                                                                                  "i4541"
                                                                                  "i4542"
                                                                                  "i4543"
                                                                                  "i4544"
                                                                                  "i4545"
                                                                                  "i4546"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(orig-x)
                                                                                #((top))
                                                                                #("i4537")))
                                                                             (hygiene
                                                                               guile))
                                                                          '#(syntax-object
                                                                             doloop
                                                                             ((top)
                                                                              #(ribcage
                                                                                #(e1
                                                                                  e2)
                                                                                #((top)
                                                                                  (top))
                                                                                #("i4566"
                                                                                  "i4567"))
                                                                              #(ribcage
                                                                                #(step)
                                                                                #((top))
                                                                                #("i4557"))
                                                                              #(ribcage
                                                                                #(_
                                                                                  var
                                                                                  init
                                                                                  step
                                                                                  e0
                                                                                  e1
                                                                                  c)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4540"
                                                                                  "i4541"
                                                                                  "i4542"
                                                                                  "i4543"
                                                                                  "i4544"
                                                                                  "i4545"
                                                                                  "i4546"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(orig-x)
                                                                                #((top))
                                                                                #("i4537")))
                                                                             (hygiene
                                                                               guile))
                                                                          (map list
                                                                               #{var\ 4548}#
                                                                               #{init\ 4549}#)
                                                                          (list '#(syntax-object
                                                                                   if
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(e1
                                                                                        e2)
                                                                                      #((top)
                                                                                        (top))
                                                                                      #("i4566"
                                                                                        "i4567"))
                                                                                    #(ribcage
                                                                                      #(step)
                                                                                      #((top))
                                                                                      #("i4557"))
                                                                                    #(ribcage
                                                                                      #(_
                                                                                        var
                                                                                        init
                                                                                        step
                                                                                        e0
                                                                                        e1
                                                                                        c)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4540"
                                                                                        "i4541"
                                                                                        "i4542"
                                                                                        "i4543"
                                                                                        "i4544"
                                                                                        "i4545"
                                                                                        "i4546"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(orig-x)
                                                                                      #((top))
                                                                                      #("i4537")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                #{e0\ 4551}#
                                                                                (cons '#(syntax-object
                                                                                         begin
                                                                                         ((top)
                                                                                          #(ribcage
                                                                                            #(e1
                                                                                              e2)
                                                                                            #((top)
                                                                                              (top))
                                                                                            #("i4566"
                                                                                              "i4567"))
                                                                                          #(ribcage
                                                                                            #(step)
                                                                                            #((top))
                                                                                            #("i4557"))
                                                                                          #(ribcage
                                                                                            #(_
                                                                                              var
                                                                                              init
                                                                                              step
                                                                                              e0
                                                                                              e1
                                                                                              c)
                                                                                            #((top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top))
                                                                                            #("i4540"
                                                                                              "i4541"
                                                                                              "i4542"
                                                                                              "i4543"
                                                                                              "i4544"
                                                                                              "i4545"
                                                                                              "i4546"))
                                                                                          #(ribcage
                                                                                            ()
                                                                                            ()
                                                                                            ())
                                                                                          #(ribcage
                                                                                            #(orig-x)
                                                                                            #((top))
                                                                                            #("i4537")))
                                                                                         (hygiene
                                                                                           guile))
                                                                                      (cons #{e1\ 4568}#
                                                                                            #{e2\ 4569}#))
                                                                                (cons '#(syntax-object
                                                                                         begin
                                                                                         ((top)
                                                                                          #(ribcage
                                                                                            #(e1
                                                                                              e2)
                                                                                            #((top)
                                                                                              (top))
                                                                                            #("i4566"
                                                                                              "i4567"))
                                                                                          #(ribcage
                                                                                            #(step)
                                                                                            #((top))
                                                                                            #("i4557"))
                                                                                          #(ribcage
                                                                                            #(_
                                                                                              var
                                                                                              init
                                                                                              step
                                                                                              e0
                                                                                              e1
                                                                                              c)
                                                                                            #((top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top))
                                                                                            #("i4540"
                                                                                              "i4541"
                                                                                              "i4542"
                                                                                              "i4543"
                                                                                              "i4544"
                                                                                              "i4545"
                                                                                              "i4546"))
                                                                                          #(ribcage
                                                                                            ()
                                                                                            ()
                                                                                            ())
                                                                                          #(ribcage
                                                                                            #(orig-x)
                                                                                            #((top))
                                                                                            #("i4537")))
                                                                                         (hygiene
                                                                                           guile))
                                                                                      (append
                                                                                        #{c\ 4553}#
                                                                                        (list (cons '#(syntax-object
                                                                                                       doloop
                                                                                                       ((top)
                                                                                                        #(ribcage
                                                                                                          #(e1
                                                                                                            e2)
                                                                                                          #((top)
                                                                                                            (top))
                                                                                                          #("i4566"
                                                                                                            "i4567"))
                                                                                                        #(ribcage
                                                                                                          #(step)
                                                                                                          #((top))
                                                                                                          #("i4557"))
                                                                                                        #(ribcage
                                                                                                          #(_
                                                                                                            var
                                                                                                            init
                                                                                                            step
                                                                                                            e0
                                                                                                            e1
                                                                                                            c)
                                                                                                          #((top)
                                                                                                            (top)
                                                                                                            (top)
                                                                                                            (top)
                                                                                                            (top)
                                                                                                            (top)
                                                                                                            (top))
                                                                                                          #("i4540"
                                                                                                            "i4541"
                                                                                                            "i4542"
                                                                                                            "i4543"
                                                                                                            "i4544"
                                                                                                            "i4545"
                                                                                                            "i4546"))
                                                                                                        #(ribcage
                                                                                                          ()
                                                                                                          ()
                                                                                                          ())
                                                                                                        #(ribcage
                                                                                                          #(orig-x)
                                                                                                          #((top))
                                                                                                          #("i4537")))
                                                                                                       (hygiene
                                                                                                         guile))
                                                                                                    #{step\ 4558}#)))))))
                                                                  #{tmp\ 4565}#)
                                                           (syntax-violation
                                                             #f
                                                             "source expression failed to match any pattern"
                                                             #{tmp\ 4559}#)))
                                                       ($sc-dispatch
                                                         #{tmp\ 4559}#
                                                         '(any . each-any)))))
                                                  ($sc-dispatch
                                                    #{tmp\ 4559}#
                                                    '())))
                                               #{e1\ 4552}#))
                                            #{tmp\ 4556}#)
                                     (syntax-violation
                                       #f
                                       "source expression failed to match any pattern"
                                       #{tmp\ 4555}#)))
                                 ($sc-dispatch
                                   #{tmp\ 4555}#
                                   'each-any)))
                              (map (lambda (#{v\ 4576}# #{s\ 4577}#)
                                     ((lambda (#{tmp\ 4580}#)
                                        ((lambda (#{tmp\ 4581}#)
                                           (if #{tmp\ 4581}#
                                             (apply (lambda () #{v\ 4576}#)
                                                    #{tmp\ 4581}#)
                                             ((lambda (#{tmp\ 4582}#)
                                                (if #{tmp\ 4582}#
                                                  (apply (lambda (#{e\ 4584}#)
                                                           #{e\ 4584}#)
                                                         #{tmp\ 4582}#)
                                                  ((lambda (#{_\ 4586}#)
                                                     (syntax-violation
                                                       'do
                                                       "bad step expression"
                                                       #{orig-x\ 4536}#
                                                       #{s\ 4577}#))
                                                   #{tmp\ 4580}#)))
                                              ($sc-dispatch
                                                #{tmp\ 4580}#
                                                '(any)))))
                                         ($sc-dispatch
                                           #{tmp\ 4580}#
                                           '())))
                                      #{s\ 4577}#))
                                   #{var\ 4548}#
                                   #{step\ 4550}#)))
                           #{tmp\ 4539}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 4538}#)))
                ($sc-dispatch
                  #{tmp\ 4538}#
                  '(any #(each (any any . any))
                        (any . each-any)
                        .
                        each-any))))
             #{orig-x\ 4536}#))
          (module-name (current-module)))))

(define quasiquote
  (make-syntax-transformer
    'quasiquote
    'macro
    (cons (letrec ((#{quasicons\ 4593}#
                     (lambda (#{x\ 4597}# #{y\ 4598}#)
                       ((lambda (#{tmp\ 4602}#)
                          ((lambda (#{tmp\ 4603}#)
                             (if #{tmp\ 4603}#
                               (apply (lambda (#{x\ 4606}# #{y\ 4607}#)
                                        ((lambda (#{tmp\ 4608}#)
                                           ((lambda (#{tmp\ 4609}#)
                                              (if #{tmp\ 4609}#
                                                (apply (lambda (#{dy\ 4611}#)
                                                         ((lambda (#{tmp\ 4612}#)
                                                            ((lambda (#{tmp\ 4613}#)
                                                               (if #{tmp\ 4613}#
                                                                 (apply (lambda (#{dx\ 4615}#)
                                                                          (list '#(syntax-object
                                                                                   quote
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(dx)
                                                                                      #((top))
                                                                                      #("i4614"))
                                                                                    #(ribcage
                                                                                      #(dy)
                                                                                      #((top))
                                                                                      #("i4610"))
                                                                                    #(ribcage
                                                                                      #(x
                                                                                        y)
                                                                                      #((top)
                                                                                        (top))
                                                                                      #("i4604"
                                                                                        "i4605"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(x
                                                                                        y)
                                                                                      #((top)
                                                                                        (top))
                                                                                      #("i4599"
                                                                                        "i4600"))
                                                                                    #(ribcage
                                                                                      #(quasicons
                                                                                        quasiappend
                                                                                        quasivector
                                                                                        quasi)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4589"
                                                                                        "i4590"
                                                                                        "i4591"
                                                                                        "i4592")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                (cons #{dx\ 4615}#
                                                                                      #{dy\ 4611}#)))
                                                                        #{tmp\ 4613}#)
                                                                 ((lambda (#{_\ 4617}#)
                                                                    (if (null? #{dy\ 4611}#)
                                                                      (list '#(syntax-object
                                                                               list
                                                                               ((top)
                                                                                #(ribcage
                                                                                  #(_)
                                                                                  #((top))
                                                                                  #("i4616"))
                                                                                #(ribcage
                                                                                  #(dy)
                                                                                  #((top))
                                                                                  #("i4610"))
                                                                                #(ribcage
                                                                                  #(x
                                                                                    y)
                                                                                  #((top)
                                                                                    (top))
                                                                                  #("i4604"
                                                                                    "i4605"))
                                                                                #(ribcage
                                                                                  ()
                                                                                  ()
                                                                                  ())
                                                                                #(ribcage
                                                                                  ()
                                                                                  ()
                                                                                  ())
                                                                                #(ribcage
                                                                                  #(x
                                                                                    y)
                                                                                  #((top)
                                                                                    (top))
                                                                                  #("i4599"
                                                                                    "i4600"))
                                                                                #(ribcage
                                                                                  #(quasicons
                                                                                    quasiappend
                                                                                    quasivector
                                                                                    quasi)
                                                                                  #((top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top))
                                                                                  #("i4589"
                                                                                    "i4590"
                                                                                    "i4591"
                                                                                    "i4592")))
                                                                               (hygiene
                                                                                 guile))
                                                                            #{x\ 4606}#)
                                                                      (list '#(syntax-object
                                                                               cons
                                                                               ((top)
                                                                                #(ribcage
                                                                                  #(_)
                                                                                  #((top))
                                                                                  #("i4616"))
                                                                                #(ribcage
                                                                                  #(dy)
                                                                                  #((top))
                                                                                  #("i4610"))
                                                                                #(ribcage
                                                                                  #(x
                                                                                    y)
                                                                                  #((top)
                                                                                    (top))
                                                                                  #("i4604"
                                                                                    "i4605"))
                                                                                #(ribcage
                                                                                  ()
                                                                                  ()
                                                                                  ())
                                                                                #(ribcage
                                                                                  ()
                                                                                  ()
                                                                                  ())
                                                                                #(ribcage
                                                                                  #(x
                                                                                    y)
                                                                                  #((top)
                                                                                    (top))
                                                                                  #("i4599"
                                                                                    "i4600"))
                                                                                #(ribcage
                                                                                  #(quasicons
                                                                                    quasiappend
                                                                                    quasivector
                                                                                    quasi)
                                                                                  #((top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top))
                                                                                  #("i4589"
                                                                                    "i4590"
                                                                                    "i4591"
                                                                                    "i4592")))
                                                                               (hygiene
                                                                                 guile))
                                                                            #{x\ 4606}#
                                                                            #{y\ 4607}#)))
                                                                  #{tmp\ 4612}#)))
                                                             ($sc-dispatch
                                                               #{tmp\ 4612}#
                                                               '(#(free-id
                                                                   #(syntax-object
                                                                     quote
                                                                     ((top)
                                                                      #(ribcage
                                                                        #(dy)
                                                                        #((top))
                                                                        #("i4610"))
                                                                      #(ribcage
                                                                        #(x y)
                                                                        #((top)
                                                                          (top))
                                                                        #("i4604"
                                                                          "i4605"))
                                                                      #(ribcage
                                                                        ()
                                                                        ()
                                                                        ())
                                                                      #(ribcage
                                                                        ()
                                                                        ()
                                                                        ())
                                                                      #(ribcage
                                                                        #(x y)
                                                                        #((top)
                                                                          (top))
                                                                        #("i4599"
                                                                          "i4600"))
                                                                      #(ribcage
                                                                        #(quasicons
                                                                          quasiappend
                                                                          quasivector
                                                                          quasi)
                                                                        #((top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                        #("i4589"
                                                                          "i4590"
                                                                          "i4591"
                                                                          "i4592")))
                                                                     (hygiene
                                                                       guile)))
                                                                 any))))
                                                          #{x\ 4606}#))
                                                       #{tmp\ 4609}#)
                                                ((lambda (#{tmp\ 4618}#)
                                                   (if #{tmp\ 4618}#
                                                     (apply (lambda (#{stuff\ 4620}#)
                                                              (cons '#(syntax-object
                                                                       list
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(stuff)
                                                                          #((top))
                                                                          #("i4619"))
                                                                        #(ribcage
                                                                          #(x
                                                                            y)
                                                                          #((top)
                                                                            (top))
                                                                          #("i4604"
                                                                            "i4605"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(x
                                                                            y)
                                                                          #((top)
                                                                            (top))
                                                                          #("i4599"
                                                                            "i4600"))
                                                                        #(ribcage
                                                                          #(quasicons
                                                                            quasiappend
                                                                            quasivector
                                                                            quasi)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i4589"
                                                                            "i4590"
                                                                            "i4591"
                                                                            "i4592")))
                                                                       (hygiene
                                                                         guile))
                                                                    (cons #{x\ 4606}#
                                                                          #{stuff\ 4620}#)))
                                                            #{tmp\ 4618}#)
                                                     ((lambda (#{else\ 4622}#)
                                                        (list '#(syntax-object
                                                                 cons
                                                                 ((top)
                                                                  #(ribcage
                                                                    #(else)
                                                                    #((top))
                                                                    #("i4621"))
                                                                  #(ribcage
                                                                    #(x y)
                                                                    #((top)
                                                                      (top))
                                                                    #("i4604"
                                                                      "i4605"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x y)
                                                                    #((top)
                                                                      (top))
                                                                    #("i4599"
                                                                      "i4600"))
                                                                  #(ribcage
                                                                    #(quasicons
                                                                      quasiappend
                                                                      quasivector
                                                                      quasi)
                                                                    #((top)
                                                                      (top)
                                                                      (top)
                                                                      (top))
                                                                    #("i4589"
                                                                      "i4590"
                                                                      "i4591"
                                                                      "i4592")))
                                                                 (hygiene
                                                                   guile))
                                                              #{x\ 4606}#
                                                              #{y\ 4607}#))
                                                      #{tmp\ 4608}#)))
                                                 ($sc-dispatch
                                                   #{tmp\ 4608}#
                                                   '(#(free-id
                                                       #(syntax-object
                                                         list
                                                         ((top)
                                                          #(ribcage
                                                            #(x y)
                                                            #((top) (top))
                                                            #("i4604" "i4605"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x y)
                                                            #((top) (top))
                                                            #("i4599" "i4600"))
                                                          #(ribcage
                                                            #(quasicons
                                                              quasiappend
                                                              quasivector
                                                              quasi)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i4589"
                                                              "i4590"
                                                              "i4591"
                                                              "i4592")))
                                                         (hygiene guile)))
                                                     .
                                                     any)))))
                                            ($sc-dispatch
                                              #{tmp\ 4608}#
                                              '(#(free-id
                                                  #(syntax-object
                                                    quote
                                                    ((top)
                                                     #(ribcage
                                                       #(x y)
                                                       #((top) (top))
                                                       #("i4604" "i4605"))
                                                     #(ribcage () () ())
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x y)
                                                       #((top) (top))
                                                       #("i4599" "i4600"))
                                                     #(ribcage
                                                       #(quasicons
                                                         quasiappend
                                                         quasivector
                                                         quasi)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i4589"
                                                         "i4590"
                                                         "i4591"
                                                         "i4592")))
                                                    (hygiene guile)))
                                                any))))
                                         #{y\ 4607}#))
                                      #{tmp\ 4603}#)
                               (syntax-violation
                                 #f
                                 "source expression failed to match any pattern"
                                 #{tmp\ 4602}#)))
                           ($sc-dispatch #{tmp\ 4602}# (quote (any any)))))
                        (list #{x\ 4597}# #{y\ 4598}#))))
                   (#{quasiappend\ 4594}#
                     (lambda (#{x\ 4623}# #{y\ 4624}#)
                       ((lambda (#{tmp\ 4628}#)
                          ((lambda (#{tmp\ 4629}#)
                             (if #{tmp\ 4629}#
                               (apply (lambda (#{x\ 4632}# #{y\ 4633}#)
                                        ((lambda (#{tmp\ 4634}#)
                                           ((lambda (#{tmp\ 4635}#)
                                              (if #{tmp\ 4635}#
                                                (apply (lambda () #{x\ 4632}#)
                                                       #{tmp\ 4635}#)
                                                ((lambda (#{_\ 4637}#)
                                                   (list '#(syntax-object
                                                            append
                                                            ((top)
                                                             #(ribcage
                                                               #(_)
                                                               #((top))
                                                               #("i4636"))
                                                             #(ribcage
                                                               #(x y)
                                                               #((top) (top))
                                                               #("i4630"
                                                                 "i4631"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x y)
                                                               #((top) (top))
                                                               #("i4625"
                                                                 "i4626"))
                                                             #(ribcage
                                                               #(quasicons
                                                                 quasiappend
                                                                 quasivector
                                                                 quasi)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i4589"
                                                                 "i4590"
                                                                 "i4591"
                                                                 "i4592")))
                                                            (hygiene guile))
                                                         #{x\ 4632}#
                                                         #{y\ 4633}#))
                                                 #{tmp\ 4634}#)))
                                            ($sc-dispatch
                                              #{tmp\ 4634}#
                                              '(#(free-id
                                                  #(syntax-object
                                                    quote
                                                    ((top)
                                                     #(ribcage
                                                       #(x y)
                                                       #((top) (top))
                                                       #("i4630" "i4631"))
                                                     #(ribcage () () ())
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x y)
                                                       #((top) (top))
                                                       #("i4625" "i4626"))
                                                     #(ribcage
                                                       #(quasicons
                                                         quasiappend
                                                         quasivector
                                                         quasi)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i4589"
                                                         "i4590"
                                                         "i4591"
                                                         "i4592")))
                                                    (hygiene guile)))
                                                ()))))
                                         #{y\ 4633}#))
                                      #{tmp\ 4629}#)
                               (syntax-violation
                                 #f
                                 "source expression failed to match any pattern"
                                 #{tmp\ 4628}#)))
                           ($sc-dispatch #{tmp\ 4628}# (quote (any any)))))
                        (list #{x\ 4623}# #{y\ 4624}#))))
                   (#{quasivector\ 4595}#
                     (lambda (#{x\ 4638}#)
                       ((lambda (#{tmp\ 4641}#)
                          ((lambda (#{x\ 4643}#)
                             ((lambda (#{tmp\ 4644}#)
                                ((lambda (#{tmp\ 4645}#)
                                   (if #{tmp\ 4645}#
                                     (apply (lambda (#{x\ 4647}#)
                                              (list '#(syntax-object
                                                       quote
                                                       ((top)
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i4646"))
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i4642"))
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i4639"))
                                                        #(ribcage
                                                          #(quasicons
                                                            quasiappend
                                                            quasivector
                                                            quasi)
                                                          #((top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                          #("i4589"
                                                            "i4590"
                                                            "i4591"
                                                            "i4592")))
                                                       (hygiene guile))
                                                    (list->vector
                                                      #{x\ 4647}#)))
                                            #{tmp\ 4645}#)
                                     ((lambda (#{tmp\ 4649}#)
                                        (if #{tmp\ 4649}#
                                          (apply (lambda (#{x\ 4651}#)
                                                   (cons '#(syntax-object
                                                            vector
                                                            ((top)
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i4650"))
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i4642"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i4639"))
                                                             #(ribcage
                                                               #(quasicons
                                                                 quasiappend
                                                                 quasivector
                                                                 quasi)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i4589"
                                                                 "i4590"
                                                                 "i4591"
                                                                 "i4592")))
                                                            (hygiene guile))
                                                         #{x\ 4651}#))
                                                 #{tmp\ 4649}#)
                                          ((lambda (#{_\ 4654}#)
                                             (list '#(syntax-object
                                                      list->vector
                                                      ((top)
                                                       #(ribcage
                                                         #(_)
                                                         #((top))
                                                         #("i4653"))
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i4642"))
                                                       #(ribcage () () ())
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i4639"))
                                                       #(ribcage
                                                         #(quasicons
                                                           quasiappend
                                                           quasivector
                                                           quasi)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("i4589"
                                                           "i4590"
                                                           "i4591"
                                                           "i4592")))
                                                      (hygiene guile))
                                                   #{x\ 4643}#))
                                           #{tmp\ 4644}#)))
                                      ($sc-dispatch
                                        #{tmp\ 4644}#
                                        '(#(free-id
                                            #(syntax-object
                                              list
                                              ((top)
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i4642"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i4639"))
                                               #(ribcage
                                                 #(quasicons
                                                   quasiappend
                                                   quasivector
                                                   quasi)
                                                 #((top) (top) (top) (top))
                                                 #("i4589"
                                                   "i4590"
                                                   "i4591"
                                                   "i4592")))
                                              (hygiene guile)))
                                          .
                                          each-any)))))
                                 ($sc-dispatch
                                   #{tmp\ 4644}#
                                   '(#(free-id
                                       #(syntax-object
                                         quote
                                         ((top)
                                          #(ribcage #(x) #((top)) #("i4642"))
                                          #(ribcage () () ())
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i4639"))
                                          #(ribcage
                                            #(quasicons
                                              quasiappend
                                              quasivector
                                              quasi)
                                            #((top) (top) (top) (top))
                                            #("i4589"
                                              "i4590"
                                              "i4591"
                                              "i4592")))
                                         (hygiene guile)))
                                     each-any))))
                              #{x\ 4643}#))
                           #{tmp\ 4641}#))
                        #{x\ 4638}#)))
                   (#{quasi\ 4596}#
                     (lambda (#{p\ 4655}# #{lev\ 4656}#)
                       ((lambda (#{tmp\ 4659}#)
                          ((lambda (#{tmp\ 4660}#)
                             (if #{tmp\ 4660}#
                               (apply (lambda (#{p\ 4662}#)
                                        (if (= #{lev\ 4656}# 0)
                                          #{p\ 4662}#
                                          (#{quasicons\ 4593}#
                                            '(#(syntax-object
                                                quote
                                                ((top)
                                                 #(ribcage
                                                   #(p)
                                                   #((top))
                                                   #("i4661"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(p lev)
                                                   #((top) (top))
                                                   #("i4657" "i4658"))
                                                 #(ribcage
                                                   #(quasicons
                                                     quasiappend
                                                     quasivector
                                                     quasi)
                                                   #((top) (top) (top) (top))
                                                   #("i4589"
                                                     "i4590"
                                                     "i4591"
                                                     "i4592")))
                                                (hygiene guile))
                                              #(syntax-object
                                                unquote
                                                ((top)
                                                 #(ribcage
                                                   #(p)
                                                   #((top))
                                                   #("i4661"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(p lev)
                                                   #((top) (top))
                                                   #("i4657" "i4658"))
                                                 #(ribcage
                                                   #(quasicons
                                                     quasiappend
                                                     quasivector
                                                     quasi)
                                                   #((top) (top) (top) (top))
                                                   #("i4589"
                                                     "i4590"
                                                     "i4591"
                                                     "i4592")))
                                                (hygiene guile)))
                                            (#{quasi\ 4596}#
                                              (list #{p\ 4662}#)
                                              (- #{lev\ 4656}# 1)))))
                                      #{tmp\ 4660}#)
                               ((lambda (#{tmp\ 4663}#)
                                  (if (if #{tmp\ 4663}#
                                        (apply (lambda (#{args\ 4665}#)
                                                 (= #{lev\ 4656}# 0))
                                               #{tmp\ 4663}#)
                                        #f)
                                    (apply (lambda (#{args\ 4667}#)
                                             (syntax-violation
                                               'unquote
                                               "unquote takes exactly one argument"
                                               #{p\ 4655}#
                                               (cons '#(syntax-object
                                                        unquote
                                                        ((top)
                                                         #(ribcage
                                                           #(args)
                                                           #((top))
                                                           #("i4666"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(p lev)
                                                           #((top) (top))
                                                           #("i4657" "i4658"))
                                                         #(ribcage
                                                           #(quasicons
                                                             quasiappend
                                                             quasivector
                                                             quasi)
                                                           #((top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                           #("i4589"
                                                             "i4590"
                                                             "i4591"
                                                             "i4592")))
                                                        (hygiene guile))
                                                     #{args\ 4667}#)))
                                           #{tmp\ 4663}#)
                                    ((lambda (#{tmp\ 4668}#)
                                       (if #{tmp\ 4668}#
                                         (apply (lambda (#{p\ 4671}#
                                                         #{q\ 4672}#)
                                                  (if (= #{lev\ 4656}# 0)
                                                    (#{quasiappend\ 4594}#
                                                      #{p\ 4671}#
                                                      (#{quasi\ 4596}#
                                                        #{q\ 4672}#
                                                        #{lev\ 4656}#))
                                                    (#{quasicons\ 4593}#
                                                      (#{quasicons\ 4593}#
                                                        '(#(syntax-object
                                                            quote
                                                            ((top)
                                                             #(ribcage
                                                               #(p q)
                                                               #((top) (top))
                                                               #("i4669"
                                                                 "i4670"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(p lev)
                                                               #((top) (top))
                                                               #("i4657"
                                                                 "i4658"))
                                                             #(ribcage
                                                               #(quasicons
                                                                 quasiappend
                                                                 quasivector
                                                                 quasi)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i4589"
                                                                 "i4590"
                                                                 "i4591"
                                                                 "i4592")))
                                                            (hygiene guile))
                                                          #(syntax-object
                                                            unquote-splicing
                                                            ((top)
                                                             #(ribcage
                                                               #(p q)
                                                               #((top) (top))
                                                               #("i4669"
                                                                 "i4670"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(p lev)
                                                               #((top) (top))
                                                               #("i4657"
                                                                 "i4658"))
                                                             #(ribcage
                                                               #(quasicons
                                                                 quasiappend
                                                                 quasivector
                                                                 quasi)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i4589"
                                                                 "i4590"
                                                                 "i4591"
                                                                 "i4592")))
                                                            (hygiene guile)))
                                                        (#{quasi\ 4596}#
                                                          (list #{p\ 4671}#)
                                                          (- #{lev\ 4656}# 1)))
                                                      (#{quasi\ 4596}#
                                                        #{q\ 4672}#
                                                        #{lev\ 4656}#))))
                                                #{tmp\ 4668}#)
                                         ((lambda (#{tmp\ 4673}#)
                                            (if (if #{tmp\ 4673}#
                                                  (apply (lambda (#{args\ 4676}#
                                                                  #{q\ 4677}#)
                                                           (= #{lev\ 4656}# 0))
                                                         #{tmp\ 4673}#)
                                                  #f)
                                              (apply (lambda (#{args\ 4680}#
                                                              #{q\ 4681}#)
                                                       (syntax-violation
                                                         'unquote-splicing
                                                         "unquote-splicing takes exactly one argument"
                                                         #{p\ 4655}#
                                                         (cons '#(syntax-object
                                                                  unquote-splicing
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(args q)
                                                                     #((top)
                                                                       (top))
                                                                     #("i4678"
                                                                       "i4679"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(p lev)
                                                                     #((top)
                                                                       (top))
                                                                     #("i4657"
                                                                       "i4658"))
                                                                   #(ribcage
                                                                     #(quasicons
                                                                       quasiappend
                                                                       quasivector
                                                                       quasi)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i4589"
                                                                       "i4590"
                                                                       "i4591"
                                                                       "i4592")))
                                                                  (hygiene
                                                                    guile))
                                                               #{args\ 4680}#)))
                                                     #{tmp\ 4673}#)
                                              ((lambda (#{tmp\ 4682}#)
                                                 (if #{tmp\ 4682}#
                                                   (apply (lambda (#{p\ 4684}#)
                                                            (#{quasicons\ 4593}#
                                                              '(#(syntax-object
                                                                  quote
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(p)
                                                                     #((top))
                                                                     #("i4683"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(p lev)
                                                                     #((top)
                                                                       (top))
                                                                     #("i4657"
                                                                       "i4658"))
                                                                   #(ribcage
                                                                     #(quasicons
                                                                       quasiappend
                                                                       quasivector
                                                                       quasi)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i4589"
                                                                       "i4590"
                                                                       "i4591"
                                                                       "i4592")))
                                                                  (hygiene
                                                                    guile))
                                                                #(syntax-object
                                                                  quasiquote
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(p)
                                                                     #((top))
                                                                     #("i4683"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(p lev)
                                                                     #((top)
                                                                       (top))
                                                                     #("i4657"
                                                                       "i4658"))
                                                                   #(ribcage
                                                                     #(quasicons
                                                                       quasiappend
                                                                       quasivector
                                                                       quasi)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i4589"
                                                                       "i4590"
                                                                       "i4591"
                                                                       "i4592")))
                                                                  (hygiene
                                                                    guile)))
                                                              (#{quasi\ 4596}#
                                                                (list #{p\ 4684}#)
                                                                (+ #{lev\ 4656}#
                                                                   1))))
                                                          #{tmp\ 4682}#)
                                                   ((lambda (#{tmp\ 4685}#)
                                                      (if #{tmp\ 4685}#
                                                        (apply (lambda (#{p\ 4688}#
                                                                        #{q\ 4689}#)
                                                                 (#{quasicons\ 4593}#
                                                                   (#{quasi\ 4596}#
                                                                     #{p\ 4688}#
                                                                     #{lev\ 4656}#)
                                                                   (#{quasi\ 4596}#
                                                                     #{q\ 4689}#
                                                                     #{lev\ 4656}#)))
                                                               #{tmp\ 4685}#)
                                                        ((lambda (#{tmp\ 4690}#)
                                                           (if #{tmp\ 4690}#
                                                             (apply (lambda (#{x\ 4692}#)
                                                                      (#{quasivector\ 4595}#
                                                                        (#{quasi\ 4596}#
                                                                          #{x\ 4692}#
                                                                          #{lev\ 4656}#)))
                                                                    #{tmp\ 4690}#)
                                                             ((lambda (#{p\ 4695}#)
                                                                (list '#(syntax-object
                                                                         quote
                                                                         ((top)
                                                                          #(ribcage
                                                                            #(p)
                                                                            #((top))
                                                                            #("i4694"))
                                                                          #(ribcage
                                                                            ()
                                                                            ()
                                                                            ())
                                                                          #(ribcage
                                                                            #(p
                                                                              lev)
                                                                            #((top)
                                                                              (top))
                                                                            #("i4657"
                                                                              "i4658"))
                                                                          #(ribcage
                                                                            #(quasicons
                                                                              quasiappend
                                                                              quasivector
                                                                              quasi)
                                                                            #((top)
                                                                              (top)
                                                                              (top)
                                                                              (top))
                                                                            #("i4589"
                                                                              "i4590"
                                                                              "i4591"
                                                                              "i4592")))
                                                                         (hygiene
                                                                           guile))
                                                                      #{p\ 4695}#))
                                                              #{tmp\ 4659}#)))
                                                         ($sc-dispatch
                                                           #{tmp\ 4659}#
                                                           '#(vector
                                                              each-any)))))
                                                    ($sc-dispatch
                                                      #{tmp\ 4659}#
                                                      '(any . any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 4659}#
                                                 '(#(free-id
                                                     #(syntax-object
                                                       quasiquote
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p lev)
                                                          #((top) (top))
                                                          #("i4657" "i4658"))
                                                        #(ribcage
                                                          #(quasicons
                                                            quasiappend
                                                            quasivector
                                                            quasi)
                                                          #((top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                          #("i4589"
                                                            "i4590"
                                                            "i4591"
                                                            "i4592")))
                                                       (hygiene guile)))
                                                   any)))))
                                          ($sc-dispatch
                                            #{tmp\ 4659}#
                                            '((#(free-id
                                                 #(syntax-object
                                                   unquote-splicing
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(p lev)
                                                      #((top) (top))
                                                      #("i4657" "i4658"))
                                                    #(ribcage
                                                      #(quasicons
                                                        quasiappend
                                                        quasivector
                                                        quasi)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i4589"
                                                        "i4590"
                                                        "i4591"
                                                        "i4592")))
                                                   (hygiene guile)))
                                               .
                                               any)
                                              .
                                              any)))))
                                     ($sc-dispatch
                                       #{tmp\ 4659}#
                                       '((#(free-id
                                            #(syntax-object
                                              unquote-splicing
                                              ((top)
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(p lev)
                                                 #((top) (top))
                                                 #("i4657" "i4658"))
                                               #(ribcage
                                                 #(quasicons
                                                   quasiappend
                                                   quasivector
                                                   quasi)
                                                 #((top) (top) (top) (top))
                                                 #("i4589"
                                                   "i4590"
                                                   "i4591"
                                                   "i4592")))
                                              (hygiene guile)))
                                          any)
                                         .
                                         any)))))
                                ($sc-dispatch
                                  #{tmp\ 4659}#
                                  '(#(free-id
                                      #(syntax-object
                                        unquote
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(p lev)
                                           #((top) (top))
                                           #("i4657" "i4658"))
                                         #(ribcage
                                           #(quasicons
                                             quasiappend
                                             quasivector
                                             quasi)
                                           #((top) (top) (top) (top))
                                           #("i4589" "i4590" "i4591" "i4592")))
                                        (hygiene guile)))
                                    .
                                    any)))))
                           ($sc-dispatch
                             #{tmp\ 4659}#
                             '(#(free-id
                                 #(syntax-object
                                   unquote
                                   ((top)
                                    #(ribcage () () ())
                                    #(ribcage
                                      #(p lev)
                                      #((top) (top))
                                      #("i4657" "i4658"))
                                    #(ribcage
                                      #(quasicons
                                        quasiappend
                                        quasivector
                                        quasi)
                                      #((top) (top) (top) (top))
                                      #("i4589" "i4590" "i4591" "i4592")))
                                   (hygiene guile)))
                               any))))
                        #{p\ 4655}#))))
            (lambda (#{x\ 4696}#)
              ((lambda (#{tmp\ 4698}#)
                 ((lambda (#{tmp\ 4699}#)
                    (if #{tmp\ 4699}#
                      (apply (lambda (#{_\ 4702}# #{e\ 4703}#)
                               (#{quasi\ 4596}# #{e\ 4703}# 0))
                             #{tmp\ 4699}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp\ 4698}#)))
                  ($sc-dispatch #{tmp\ 4698}# (quote (any any)))))
               #{x\ 4696}#)))
          (module-name (current-module)))))

(define include
  (make-syntax-transformer
    'include
    'macro
    (cons (lambda (#{x\ 4704}#)
            (letrec ((#{read-file\ 4707}#
                       (lambda (#{fn\ 4708}# #{k\ 4709}#)
                         (let ((#{p\ 4713}# (open-input-file #{fn\ 4708}#)))
                           (letrec ((#{f\ 4717}#
                                      (lambda (#{x\ 4718}# #{result\ 4719}#)
                                        (if (eof-object? #{x\ 4718}#)
                                          (begin
                                            (close-input-port #{p\ 4713}#)
                                            (reverse #{result\ 4719}#))
                                          (#{f\ 4717}#
                                            (read #{p\ 4713}#)
                                            (cons (datum->syntax
                                                    #{k\ 4709}#
                                                    #{x\ 4718}#)
                                                  #{result\ 4719}#))))))
                             (#{f\ 4717}# (read #{p\ 4713}#) (quote ())))))))
              ((lambda (#{tmp\ 4720}#)
                 ((lambda (#{tmp\ 4721}#)
                    (if #{tmp\ 4721}#
                      (apply (lambda (#{k\ 4724}# #{filename\ 4725}#)
                               (let ((#{fn\ 4727}#
                                       (syntax->datum #{filename\ 4725}#)))
                                 ((lambda (#{tmp\ 4729}#)
                                    ((lambda (#{tmp\ 4730}#)
                                       (if #{tmp\ 4730}#
                                         (apply (lambda (#{exp\ 4732}#)
                                                  (cons '#(syntax-object
                                                           begin
                                                           ((top)
                                                            #(ribcage
                                                              #(exp)
                                                              #((top))
                                                              #("i4731"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(fn)
                                                              #((top))
                                                              #("i4726"))
                                                            #(ribcage
                                                              #(k filename)
                                                              #((top) (top))
                                                              #("i4722"
                                                                "i4723"))
                                                            #(ribcage
                                                              (read-file)
                                                              ((top))
                                                              ("i4706"))
                                                            #(ribcage
                                                              #(x)
                                                              #((top))
                                                              #("i4705")))
                                                           (hygiene guile))
                                                        #{exp\ 4732}#))
                                                #{tmp\ 4730}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp\ 4729}#)))
                                     ($sc-dispatch
                                       #{tmp\ 4729}#
                                       'each-any)))
                                  (#{read-file\ 4707}#
                                    #{fn\ 4727}#
                                    #{k\ 4724}#))))
                             #{tmp\ 4721}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp\ 4720}#)))
                  ($sc-dispatch #{tmp\ 4720}# (quote (any any)))))
               #{x\ 4704}#)))
          (module-name (current-module)))))

(define include-from-path
  (make-syntax-transformer
    'include-from-path
    'macro
    (cons (lambda (#{x\ 4734}#)
            ((lambda (#{tmp\ 4736}#)
               ((lambda (#{tmp\ 4737}#)
                  (if #{tmp\ 4737}#
                    (apply (lambda (#{k\ 4740}# #{filename\ 4741}#)
                             (let ((#{fn\ 4743}#
                                     (syntax->datum #{filename\ 4741}#)))
                               ((lambda (#{tmp\ 4745}#)
                                  ((lambda (#{fn\ 4747}#)
                                     (list '#(syntax-object
                                              include
                                              ((top)
                                               #(ribcage
                                                 #(fn)
                                                 #((top))
                                                 #("i4746"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(fn)
                                                 #((top))
                                                 #("i4742"))
                                               #(ribcage
                                                 #(k filename)
                                                 #((top) (top))
                                                 #("i4738" "i4739"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i4735")))
                                              (hygiene guile))
                                           #{fn\ 4747}#))
                                   #{tmp\ 4745}#))
                                (let ((#{t\ 4750}#
                                        (%search-load-path #{fn\ 4743}#)))
                                  (if #{t\ 4750}#
                                    #{t\ 4750}#
                                    (syntax-violation
                                      'include-from-path
                                      "file not found in path"
                                      #{x\ 4734}#
                                      #{filename\ 4741}#))))))
                           #{tmp\ 4737}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 4736}#)))
                ($sc-dispatch #{tmp\ 4736}# (quote (any any)))))
             #{x\ 4734}#))
          (module-name (current-module)))))

(define unquote
  (make-syntax-transformer
    'unquote
    'macro
    (cons (lambda (#{x\ 4752}#)
            ((lambda (#{tmp\ 4754}#)
               ((lambda (#{tmp\ 4755}#)
                  (if #{tmp\ 4755}#
                    (apply (lambda (#{_\ 4758}# #{e\ 4759}#)
                             (syntax-violation
                               'unquote
                               "expression not valid outside of quasiquote"
                               #{x\ 4752}#))
                           #{tmp\ 4755}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 4754}#)))
                ($sc-dispatch #{tmp\ 4754}# (quote (any any)))))
             #{x\ 4752}#))
          (module-name (current-module)))))

(define unquote-splicing
  (make-syntax-transformer
    'unquote-splicing
    'macro
    (cons (lambda (#{x\ 4760}#)
            ((lambda (#{tmp\ 4762}#)
               ((lambda (#{tmp\ 4763}#)
                  (if #{tmp\ 4763}#
                    (apply (lambda (#{_\ 4766}# #{e\ 4767}#)
                             (syntax-violation
                               'unquote-splicing
                               "expression not valid outside of quasiquote"
                               #{x\ 4760}#))
                           #{tmp\ 4763}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 4762}#)))
                ($sc-dispatch #{tmp\ 4762}# (quote (any any)))))
             #{x\ 4760}#))
          (module-name (current-module)))))

(define case
  (make-syntax-transformer
    'case
    'macro
    (cons (lambda (#{x\ 4768}#)
            ((lambda (#{tmp\ 4770}#)
               ((lambda (#{tmp\ 4771}#)
                  (if #{tmp\ 4771}#
                    (apply (lambda (#{_\ 4776}#
                                    #{e\ 4777}#
                                    #{m1\ 4778}#
                                    #{m2\ 4779}#)
                             ((lambda (#{tmp\ 4781}#)
                                ((lambda (#{body\ 4783}#)
                                   (list '#(syntax-object
                                            let
                                            ((top)
                                             #(ribcage
                                               #(body)
                                               #((top))
                                               #("i4782"))
                                             #(ribcage
                                               #(_ e m1 m2)
                                               #((top) (top) (top) (top))
                                               #("i4772"
                                                 "i4773"
                                                 "i4774"
                                                 "i4775"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i4769")))
                                            (hygiene guile))
                                         (list (list '#(syntax-object
                                                        t
                                                        ((top)
                                                         #(ribcage
                                                           #(body)
                                                           #((top))
                                                           #("i4782"))
                                                         #(ribcage
                                                           #(_ e m1 m2)
                                                           #((top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                           #("i4772"
                                                             "i4773"
                                                             "i4774"
                                                             "i4775"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i4769")))
                                                        (hygiene guile))
                                                     #{e\ 4777}#))
                                         #{body\ 4783}#))
                                 #{tmp\ 4781}#))
                              (letrec ((#{f\ 4787}#
                                         (lambda (#{clause\ 4788}#
                                                  #{clauses\ 4789}#)
                                           (if (null? #{clauses\ 4789}#)
                                             ((lambda (#{tmp\ 4791}#)
                                                ((lambda (#{tmp\ 4792}#)
                                                   (if #{tmp\ 4792}#
                                                     (apply (lambda (#{e1\ 4795}#
                                                                     #{e2\ 4796}#)
                                                              (cons '#(syntax-object
                                                                       begin
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(e1
                                                                            e2)
                                                                          #((top)
                                                                            (top))
                                                                          #("i4793"
                                                                            "i4794"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(f
                                                                            clause
                                                                            clauses)
                                                                          #((top)
                                                                            (top)
                                                                            (top))
                                                                          #("i4784"
                                                                            "i4785"
                                                                            "i4786"))
                                                                        #(ribcage
                                                                          #(_
                                                                            e
                                                                            m1
                                                                            m2)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i4772"
                                                                            "i4773"
                                                                            "i4774"
                                                                            "i4775"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(x)
                                                                          #((top))
                                                                          #("i4769")))
                                                                       (hygiene
                                                                         guile))
                                                                    (cons #{e1\ 4795}#
                                                                          #{e2\ 4796}#)))
                                                            #{tmp\ 4792}#)
                                                     ((lambda (#{tmp\ 4798}#)
                                                        (if #{tmp\ 4798}#
                                                          (apply (lambda (#{k\ 4802}#
                                                                          #{e1\ 4803}#
                                                                          #{e2\ 4804}#)
                                                                   (list '#(syntax-object
                                                                            if
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(k
                                                                                 e1
                                                                                 e2)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4799"
                                                                                 "i4800"
                                                                                 "i4801"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(f
                                                                                 clause
                                                                                 clauses)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4784"
                                                                                 "i4785"
                                                                                 "i4786"))
                                                                             #(ribcage
                                                                               #(_
                                                                                 e
                                                                                 m1
                                                                                 m2)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4772"
                                                                                 "i4773"
                                                                                 "i4774"
                                                                                 "i4775"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(x)
                                                                               #((top))
                                                                               #("i4769")))
                                                                            (hygiene
                                                                              guile))
                                                                         (list '#(syntax-object
                                                                                  memv
                                                                                  ((top)
                                                                                   #(ribcage
                                                                                     #(k
                                                                                       e1
                                                                                       e2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4799"
                                                                                       "i4800"
                                                                                       "i4801"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(f
                                                                                       clause
                                                                                       clauses)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4784"
                                                                                       "i4785"
                                                                                       "i4786"))
                                                                                   #(ribcage
                                                                                     #(_
                                                                                       e
                                                                                       m1
                                                                                       m2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4772"
                                                                                       "i4773"
                                                                                       "i4774"
                                                                                       "i4775"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(x)
                                                                                     #((top))
                                                                                     #("i4769")))
                                                                                  (hygiene
                                                                                    guile))
                                                                               '#(syntax-object
                                                                                  t
                                                                                  ((top)
                                                                                   #(ribcage
                                                                                     #(k
                                                                                       e1
                                                                                       e2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4799"
                                                                                       "i4800"
                                                                                       "i4801"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(f
                                                                                       clause
                                                                                       clauses)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4784"
                                                                                       "i4785"
                                                                                       "i4786"))
                                                                                   #(ribcage
                                                                                     #(_
                                                                                       e
                                                                                       m1
                                                                                       m2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4772"
                                                                                       "i4773"
                                                                                       "i4774"
                                                                                       "i4775"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(x)
                                                                                     #((top))
                                                                                     #("i4769")))
                                                                                  (hygiene
                                                                                    guile))
                                                                               (list '#(syntax-object
                                                                                        quote
                                                                                        ((top)
                                                                                         #(ribcage
                                                                                           #(k
                                                                                             e1
                                                                                             e2)
                                                                                           #((top)
                                                                                             (top)
                                                                                             (top))
                                                                                           #("i4799"
                                                                                             "i4800"
                                                                                             "i4801"))
                                                                                         #(ribcage
                                                                                           ()
                                                                                           ()
                                                                                           ())
                                                                                         #(ribcage
                                                                                           #(f
                                                                                             clause
                                                                                             clauses)
                                                                                           #((top)
                                                                                             (top)
                                                                                             (top))
                                                                                           #("i4784"
                                                                                             "i4785"
                                                                                             "i4786"))
                                                                                         #(ribcage
                                                                                           #(_
                                                                                             e
                                                                                             m1
                                                                                             m2)
                                                                                           #((top)
                                                                                             (top)
                                                                                             (top)
                                                                                             (top))
                                                                                           #("i4772"
                                                                                             "i4773"
                                                                                             "i4774"
                                                                                             "i4775"))
                                                                                         #(ribcage
                                                                                           ()
                                                                                           ()
                                                                                           ())
                                                                                         #(ribcage
                                                                                           #(x)
                                                                                           #((top))
                                                                                           #("i4769")))
                                                                                        (hygiene
                                                                                          guile))
                                                                                     #{k\ 4802}#))
                                                                         (cons '#(syntax-object
                                                                                  begin
                                                                                  ((top)
                                                                                   #(ribcage
                                                                                     #(k
                                                                                       e1
                                                                                       e2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4799"
                                                                                       "i4800"
                                                                                       "i4801"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(f
                                                                                       clause
                                                                                       clauses)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4784"
                                                                                       "i4785"
                                                                                       "i4786"))
                                                                                   #(ribcage
                                                                                     #(_
                                                                                       e
                                                                                       m1
                                                                                       m2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4772"
                                                                                       "i4773"
                                                                                       "i4774"
                                                                                       "i4775"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(x)
                                                                                     #((top))
                                                                                     #("i4769")))
                                                                                  (hygiene
                                                                                    guile))
                                                                               (cons #{e1\ 4803}#
                                                                                     #{e2\ 4804}#))))
                                                                 #{tmp\ 4798}#)
                                                          ((lambda (#{_\ 4808}#)
                                                             (syntax-violation
                                                               'case
                                                               "bad clause"
                                                               #{x\ 4768}#
                                                               #{clause\ 4788}#))
                                                           #{tmp\ 4791}#)))
                                                      ($sc-dispatch
                                                        #{tmp\ 4791}#
                                                        '(each-any
                                                           any
                                                           .
                                                           each-any)))))
                                                 ($sc-dispatch
                                                   #{tmp\ 4791}#
                                                   '(#(free-id
                                                       #(syntax-object
                                                         else
                                                         ((top)
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(f clause clauses)
                                                            #((top)
                                                              (top)
                                                              (top))
                                                            #("i4784"
                                                              "i4785"
                                                              "i4786"))
                                                          #(ribcage
                                                            #(_ e m1 m2)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i4772"
                                                              "i4773"
                                                              "i4774"
                                                              "i4775"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i4769")))
                                                         (hygiene guile)))
                                                     any
                                                     .
                                                     each-any))))
                                              #{clause\ 4788}#)
                                             ((lambda (#{tmp\ 4810}#)
                                                ((lambda (#{rest\ 4812}#)
                                                   ((lambda (#{tmp\ 4813}#)
                                                      ((lambda (#{tmp\ 4814}#)
                                                         (if #{tmp\ 4814}#
                                                           (apply (lambda (#{k\ 4818}#
                                                                           #{e1\ 4819}#
                                                                           #{e2\ 4820}#)
                                                                    (list '#(syntax-object
                                                                             if
                                                                             ((top)
                                                                              #(ribcage
                                                                                #(k
                                                                                  e1
                                                                                  e2)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4815"
                                                                                  "i4816"
                                                                                  "i4817"))
                                                                              #(ribcage
                                                                                #(rest)
                                                                                #((top))
                                                                                #("i4811"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(f
                                                                                  clause
                                                                                  clauses)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4784"
                                                                                  "i4785"
                                                                                  "i4786"))
                                                                              #(ribcage
                                                                                #(_
                                                                                  e
                                                                                  m1
                                                                                  m2)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4772"
                                                                                  "i4773"
                                                                                  "i4774"
                                                                                  "i4775"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(x)
                                                                                #((top))
                                                                                #("i4769")))
                                                                             (hygiene
                                                                               guile))
                                                                          (list '#(syntax-object
                                                                                   memv
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(k
                                                                                        e1
                                                                                        e2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4815"
                                                                                        "i4816"
                                                                                        "i4817"))
                                                                                    #(ribcage
                                                                                      #(rest)
                                                                                      #((top))
                                                                                      #("i4811"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(f
                                                                                        clause
                                                                                        clauses)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4784"
                                                                                        "i4785"
                                                                                        "i4786"))
                                                                                    #(ribcage
                                                                                      #(_
                                                                                        e
                                                                                        m1
                                                                                        m2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4772"
                                                                                        "i4773"
                                                                                        "i4774"
                                                                                        "i4775"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(x)
                                                                                      #((top))
                                                                                      #("i4769")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                '#(syntax-object
                                                                                   t
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(k
                                                                                        e1
                                                                                        e2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4815"
                                                                                        "i4816"
                                                                                        "i4817"))
                                                                                    #(ribcage
                                                                                      #(rest)
                                                                                      #((top))
                                                                                      #("i4811"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(f
                                                                                        clause
                                                                                        clauses)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4784"
                                                                                        "i4785"
                                                                                        "i4786"))
                                                                                    #(ribcage
                                                                                      #(_
                                                                                        e
                                                                                        m1
                                                                                        m2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4772"
                                                                                        "i4773"
                                                                                        "i4774"
                                                                                        "i4775"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(x)
                                                                                      #((top))
                                                                                      #("i4769")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                (list '#(syntax-object
                                                                                         quote
                                                                                         ((top)
                                                                                          #(ribcage
                                                                                            #(k
                                                                                              e1
                                                                                              e2)
                                                                                            #((top)
                                                                                              (top)
                                                                                              (top))
                                                                                            #("i4815"
                                                                                              "i4816"
                                                                                              "i4817"))
                                                                                          #(ribcage
                                                                                            #(rest)
                                                                                            #((top))
                                                                                            #("i4811"))
                                                                                          #(ribcage
                                                                                            ()
                                                                                            ()
                                                                                            ())
                                                                                          #(ribcage
                                                                                            #(f
                                                                                              clause
                                                                                              clauses)
                                                                                            #((top)
                                                                                              (top)
                                                                                              (top))
                                                                                            #("i4784"
                                                                                              "i4785"
                                                                                              "i4786"))
                                                                                          #(ribcage
                                                                                            #(_
                                                                                              e
                                                                                              m1
                                                                                              m2)
                                                                                            #((top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top))
                                                                                            #("i4772"
                                                                                              "i4773"
                                                                                              "i4774"
                                                                                              "i4775"))
                                                                                          #(ribcage
                                                                                            ()
                                                                                            ()
                                                                                            ())
                                                                                          #(ribcage
                                                                                            #(x)
                                                                                            #((top))
                                                                                            #("i4769")))
                                                                                         (hygiene
                                                                                           guile))
                                                                                      #{k\ 4818}#))
                                                                          (cons '#(syntax-object
                                                                                   begin
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(k
                                                                                        e1
                                                                                        e2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4815"
                                                                                        "i4816"
                                                                                        "i4817"))
                                                                                    #(ribcage
                                                                                      #(rest)
                                                                                      #((top))
                                                                                      #("i4811"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(f
                                                                                        clause
                                                                                        clauses)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4784"
                                                                                        "i4785"
                                                                                        "i4786"))
                                                                                    #(ribcage
                                                                                      #(_
                                                                                        e
                                                                                        m1
                                                                                        m2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4772"
                                                                                        "i4773"
                                                                                        "i4774"
                                                                                        "i4775"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(x)
                                                                                      #((top))
                                                                                      #("i4769")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                (cons #{e1\ 4819}#
                                                                                      #{e2\ 4820}#))
                                                                          #{rest\ 4812}#))
                                                                  #{tmp\ 4814}#)
                                                           ((lambda (#{_\ 4824}#)
                                                              (syntax-violation
                                                                'case
                                                                "bad clause"
                                                                #{x\ 4768}#
                                                                #{clause\ 4788}#))
                                                            #{tmp\ 4813}#)))
                                                       ($sc-dispatch
                                                         #{tmp\ 4813}#
                                                         '(each-any
                                                            any
                                                            .
                                                            each-any))))
                                                    #{clause\ 4788}#))
                                                 #{tmp\ 4810}#))
                                              (#{f\ 4787}#
                                                (car #{clauses\ 4789}#)
                                                (cdr #{clauses\ 4789}#)))))))
                                (#{f\ 4787}# #{m1\ 4778}# #{m2\ 4779}#))))
                           #{tmp\ 4771}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 4770}#)))
                ($sc-dispatch
                  #{tmp\ 4770}#
                  '(any any any . each-any))))
             #{x\ 4768}#))
          (module-name (current-module)))))

(define identifier-syntax
  (make-syntax-transformer
    'identifier-syntax
    'macro
    (cons (lambda (#{x\ 4825}#)
            ((lambda (#{tmp\ 4827}#)
               ((lambda (#{tmp\ 4828}#)
                  (if #{tmp\ 4828}#
                    (apply (lambda (#{_\ 4831}# #{e\ 4832}#)
                             (list '#(syntax-object
                                      lambda
                                      ((top)
                                       #(ribcage
                                         #(_ e)
                                         #((top) (top))
                                         #("i4829" "i4830"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4826")))
                                      (hygiene guile))
                                   '(#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(_ e)
                                          #((top) (top))
                                          #("i4829" "i4830"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i4826")))
                                       (hygiene guile)))
                                   '#((#(syntax-object
                                         macro-type
                                         ((top)
                                          #(ribcage
                                            #(_ e)
                                            #((top) (top))
                                            #("i4829" "i4830"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i4826")))
                                         (hygiene guile))
                                       .
                                       #(syntax-object
                                         identifier-syntax
                                         ((top)
                                          #(ribcage
                                            #(_ e)
                                            #((top) (top))
                                            #("i4829" "i4830"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i4826")))
                                         (hygiene guile))))
                                   (list '#(syntax-object
                                            syntax-case
                                            ((top)
                                             #(ribcage
                                               #(_ e)
                                               #((top) (top))
                                               #("i4829" "i4830"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i4826")))
                                            (hygiene guile))
                                         '#(syntax-object
                                            x
                                            ((top)
                                             #(ribcage
                                               #(_ e)
                                               #((top) (top))
                                               #("i4829" "i4830"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i4826")))
                                            (hygiene guile))
                                         '()
                                         (list '#(syntax-object
                                                  id
                                                  ((top)
                                                   #(ribcage
                                                     #(_ e)
                                                     #((top) (top))
                                                     #("i4829" "i4830"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i4826")))
                                                  (hygiene guile))
                                               '(#(syntax-object
                                                   identifier?
                                                   ((top)
                                                    #(ribcage
                                                      #(_ e)
                                                      #((top) (top))
                                                      #("i4829" "i4830"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i4826")))
                                                   (hygiene guile))
                                                 (#(syntax-object
                                                    syntax
                                                    ((top)
                                                     #(ribcage
                                                       #(_ e)
                                                       #((top) (top))
                                                       #("i4829" "i4830"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i4826")))
                                                    (hygiene guile))
                                                  #(syntax-object
                                                    id
                                                    ((top)
                                                     #(ribcage
                                                       #(_ e)
                                                       #((top) (top))
                                                       #("i4829" "i4830"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i4826")))
                                                    (hygiene guile))))
                                               (list '#(syntax-object
                                                        syntax
                                                        ((top)
                                                         #(ribcage
                                                           #(_ e)
                                                           #((top) (top))
                                                           #("i4829" "i4830"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i4826")))
                                                        (hygiene guile))
                                                     #{e\ 4832}#))
                                         (list (cons #{_\ 4831}#
                                                     '(#(syntax-object
                                                         x
                                                         ((top)
                                                          #(ribcage
                                                            #(_ e)
                                                            #((top) (top))
                                                            #("i4829" "i4830"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i4826")))
                                                         (hygiene guile))
                                                       #(syntax-object
                                                         ...
                                                         ((top)
                                                          #(ribcage
                                                            #(_ e)
                                                            #((top) (top))
                                                            #("i4829" "i4830"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i4826")))
                                                         (hygiene guile))))
                                               (list '#(syntax-object
                                                        syntax
                                                        ((top)
                                                         #(ribcage
                                                           #(_ e)
                                                           #((top) (top))
                                                           #("i4829" "i4830"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i4826")))
                                                        (hygiene guile))
                                                     (cons #{e\ 4832}#
                                                           '(#(syntax-object
                                                               x
                                                               ((top)
                                                                #(ribcage
                                                                  #(_ e)
                                                                  #((top)
                                                                    (top))
                                                                  #("i4829"
                                                                    "i4830"))
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  #(x)
                                                                  #((top))
                                                                  #("i4826")))
                                                               (hygiene guile))
                                                             #(syntax-object
                                                               ...
                                                               ((top)
                                                                #(ribcage
                                                                  #(_ e)
                                                                  #((top)
                                                                    (top))
                                                                  #("i4829"
                                                                    "i4830"))
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  #(x)
                                                                  #((top))
                                                                  #("i4826")))
                                                               (hygiene
                                                                 guile)))))))))
                           #{tmp\ 4828}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 4827}#)))
                ($sc-dispatch #{tmp\ 4827}# (quote (any any)))))
             #{x\ 4825}#))
          (module-name (current-module)))))

(define define*
  (make-syntax-transformer
    'define*
    'macro
    (cons (lambda (#{x\ 4833}#)
            ((lambda (#{tmp\ 4835}#)
               ((lambda (#{tmp\ 4836}#)
                  (if #{tmp\ 4836}#
                    (apply (lambda (#{_\ 4842}#
                                    #{id\ 4843}#
                                    #{args\ 4844}#
                                    #{b0\ 4845}#
                                    #{b1\ 4846}#)
                             (list '#(syntax-object
                                      define
                                      ((top)
                                       #(ribcage
                                         #(_ id args b0 b1)
                                         #((top) (top) (top) (top) (top))
                                         #("i4837"
                                           "i4838"
                                           "i4839"
                                           "i4840"
                                           "i4841"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4834")))
                                      (hygiene guile))
                                   #{id\ 4843}#
                                   (cons '#(syntax-object
                                            lambda*
                                            ((top)
                                             #(ribcage
                                               #(_ id args b0 b1)
                                               #((top) (top) (top) (top) (top))
                                               #("i4837"
                                                 "i4838"
                                                 "i4839"
                                                 "i4840"
                                                 "i4841"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i4834")))
                                            (hygiene guile))
                                         (cons #{args\ 4844}#
                                               (cons #{b0\ 4845}#
                                                     #{b1\ 4846}#)))))
                           #{tmp\ 4836}#)
                    ((lambda (#{tmp\ 4848}#)
                       (if (if #{tmp\ 4848}#
                             (apply (lambda (#{_\ 4852}#
                                             #{id\ 4853}#
                                             #{val\ 4854}#)
                                      (identifier?
                                        '#(syntax-object
                                           x
                                           ((top)
                                            #(ribcage
                                              #(_ id val)
                                              #((top) (top) (top))
                                              #("i4849" "i4850" "i4851"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i4834")))
                                           (hygiene guile))))
                                    #{tmp\ 4848}#)
                             #f)
                         (apply (lambda (#{_\ 4858}#
                                         #{id\ 4859}#
                                         #{val\ 4860}#)
                                  (list '#(syntax-object
                                           define
                                           ((top)
                                            #(ribcage
                                              #(_ id val)
                                              #((top) (top) (top))
                                              #("i4855" "i4856" "i4857"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i4834")))
                                           (hygiene guile))
                                        #{id\ 4859}#
                                        #{val\ 4860}#))
                                #{tmp\ 4848}#)
                         (syntax-violation
                           #f
                           "source expression failed to match any pattern"
                           #{tmp\ 4835}#)))
                     ($sc-dispatch
                       #{tmp\ 4835}#
                       '(any any any)))))
                ($sc-dispatch
                  #{tmp\ 4835}#
                  '(any (any . any) any . each-any))))
             #{x\ 4833}#))
          (module-name (current-module)))))

