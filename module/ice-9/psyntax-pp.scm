(eval-when (compile) (set-current-module (resolve-module (quote (guile)))))
(if #f #f)

(letrec*
  ((#{top-level-eval-hook 4302}#
     (lambda (#{x 36832}# #{mod 36833}#)
       (primitive-eval #{x 36832}#)))
   (#{maybe-name-value! 4307}#
     (lambda (#{name 19451}# #{val 19452}#)
       (if (if (struct? #{val 19452}#)
             (eq? (struct-vtable #{val 19452}#)
                  (vector-ref %expanded-vtables 14))
             #f)
         (let ((#{meta 19459}# (struct-ref #{val 19452}# 1)))
           (if (not (assq 'name #{meta 19459}#))
             (let ((#{v 19464}#
                     (cons (cons 'name #{name 19451}#) #{meta 19459}#)))
               (struct-set! #{val 19452}# 1 #{v 19464}#)))))))
   (#{build-call 4309}#
     (lambda (#{source 19196}#
              #{fun-exp 19197}#
              #{arg-exps 19198}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 11)
         #{source 19196}#
         #{fun-exp 19197}#
         #{arg-exps 19198}#)))
   (#{build-conditional 4310}#
     (lambda (#{source 19204}#
              #{test-exp 19205}#
              #{then-exp 19206}#
              #{else-exp 19207}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 10)
         #{source 19204}#
         #{test-exp 19205}#
         #{then-exp 19206}#
         #{else-exp 19207}#)))
   (#{build-dynlet 4311}#
     (lambda (#{source 19214}#
              #{fluids 19215}#
              #{vals 19216}#
              #{body 19217}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 18)
         #{source 19214}#
         #{fluids 19215}#
         #{vals 19216}#
         #{body 19217}#)))
   (#{build-lexical-reference 4312}#
     (lambda (#{type 36834}#
              #{source 36835}#
              #{name 36836}#
              #{var 36837}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 3)
         #{source 36835}#
         #{name 36836}#
         #{var 36837}#)))
   (#{build-lexical-assignment 4313}#
     (lambda (#{source 19224}#
              #{name 19225}#
              #{var 19226}#
              #{exp 19227}#)
       (begin
         (if (if (struct? #{exp 19227}#)
               (eq? (struct-vtable #{exp 19227}#)
                    (vector-ref %expanded-vtables 14))
               #f)
           (let ((#{meta 19243}# (struct-ref #{exp 19227}# 1)))
             (if (not (assq 'name #{meta 19243}#))
               (let ((#{v 19250}#
                       (cons (cons 'name #{name 19225}#) #{meta 19243}#)))
                 (struct-set! #{exp 19227}# 1 #{v 19250}#)))))
         (make-struct/no-tail
           (vector-ref %expanded-vtables 4)
           #{source 19224}#
           #{name 19225}#
           #{var 19226}#
           #{exp 19227}#))))
   (#{analyze-variable 4314}#
     (lambda (#{mod 36843}#
              #{var 36844}#
              #{modref-cont 36845}#
              #{bare-cont 36846}#)
       (if (not #{mod 36843}#)
         (#{bare-cont 36846}# #{var 36844}#)
         (let ((#{kind 36847}# (car #{mod 36843}#))
               (#{mod 36848}# (cdr #{mod 36843}#)))
           (if (eqv? #{kind 36847}# 'public)
             (#{modref-cont 36845}#
               #{mod 36848}#
               #{var 36844}#
               #t)
             (if (eqv? #{kind 36847}# 'private)
               (if (not (equal?
                          #{mod 36848}#
                          (module-name (current-module))))
                 (#{modref-cont 36845}#
                   #{mod 36848}#
                   #{var 36844}#
                   #f)
                 (#{bare-cont 36846}# #{var 36844}#))
               (if (eqv? #{kind 36847}# 'bare)
                 (#{bare-cont 36846}# #{var 36844}#)
                 (if (eqv? #{kind 36847}# 'hygiene)
                   (if (if (not (equal?
                                  #{mod 36848}#
                                  (module-name (current-module))))
                         (module-variable
                           (resolve-module #{mod 36848}#)
                           #{var 36844}#)
                         #f)
                     (#{modref-cont 36845}#
                       #{mod 36848}#
                       #{var 36844}#
                       #f)
                     (#{bare-cont 36846}# #{var 36844}#))
                   (syntax-violation
                     #f
                     "bad module kind"
                     #{var 36844}#
                     #{mod 36848}#)))))))))
   (#{build-global-reference 4315}#
     (lambda (#{source 36863}# #{var 36864}# #{mod 36865}#)
       (#{analyze-variable 4314}#
         #{mod 36865}#
         #{var 36864}#
         (lambda (#{mod 36868}# #{var 36869}# #{public? 36870}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 5)
             #{source 36863}#
             #{mod 36868}#
             #{var 36869}#
             #{public? 36870}#))
         (lambda (#{var 36877}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 7)
             #{source 36863}#
             #{var 36877}#)))))
   (#{build-global-assignment 4316}#
     (lambda (#{source 19259}#
              #{var 19260}#
              #{exp 19261}#
              #{mod 19262}#)
       (begin
         (if (if (struct? #{exp 19261}#)
               (eq? (struct-vtable #{exp 19261}#)
                    (vector-ref %expanded-vtables 14))
               #f)
           (let ((#{meta 19278}# (struct-ref #{exp 19261}# 1)))
             (if (not (assq 'name #{meta 19278}#))
               (let ((#{v 19285}#
                       (cons (cons 'name #{var 19260}#) #{meta 19278}#)))
                 (struct-set! #{exp 19261}# 1 #{v 19285}#)))))
         (#{analyze-variable 4314}#
           #{mod 19262}#
           #{var 19260}#
           (lambda (#{mod 19290}# #{var 19291}# #{public? 19292}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 6)
               #{source 19259}#
               #{mod 19290}#
               #{var 19291}#
               #{public? 19292}#
               #{exp 19261}#))
           (lambda (#{var 19300}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 8)
               #{source 19259}#
               #{var 19300}#
               #{exp 19261}#))))))
   (#{build-global-definition 4317}#
     (lambda (#{source 36882}# #{var 36883}# #{exp 36884}#)
       (begin
         (if (if (struct? #{exp 36884}#)
               (eq? (struct-vtable #{exp 36884}#)
                    (vector-ref %expanded-vtables 14))
               #f)
           (let ((#{meta 36900}# (struct-ref #{exp 36884}# 1)))
             (if (not (assq 'name #{meta 36900}#))
               (let ((#{v 36907}#
                       (cons (cons 'name #{var 36883}#) #{meta 36900}#)))
                 (struct-set! #{exp 36884}# 1 #{v 36907}#)))))
         (make-struct/no-tail
           (vector-ref %expanded-vtables 9)
           #{source 36882}#
           #{var 36883}#
           #{exp 36884}#))))
   (#{build-simple-lambda 4318}#
     (lambda (#{src 19306}#
              #{req 19307}#
              #{rest 19308}#
              #{vars 19309}#
              #{meta 19310}#
              #{exp 19311}#)
       (let ((#{body 19317}#
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 15)
                 #{src 19306}#
                 #{req 19307}#
                 #f
                 #{rest 19308}#
                 #f
                 '()
                 #{vars 19309}#
                 #{exp 19311}#
                 #f)))
         (make-struct/no-tail
           (vector-ref %expanded-vtables 14)
           #{src 19306}#
           #{meta 19310}#
           #{body 19317}#))))
   (#{build-primcall 4321}#
     (lambda (#{src 19329}# #{name 19330}# #{args 19331}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 12)
         #{src 19329}#
         #{name 19330}#
         #{args 19331}#)))
   (#{build-sequence 4324}#
     (lambda (#{src 36915}# #{exps 36916}#)
       (if (null? (cdr #{exps 36916}#))
         (car #{exps 36916}#)
         (let ((#{head 36920}# (car #{exps 36916}#))
               (#{tail 36921}#
                 (#{build-sequence 4324}# #f (cdr #{exps 36916}#))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 13)
             #{src 36915}#
             #{head 36920}#
             #{tail 36921}#)))))
   (#{build-named-let 4326}#
     (lambda (#{src 19337}#
              #{ids 19338}#
              #{vars 19339}#
              #{val-exps 19340}#
              #{body-exp 19341}#)
       (let ((#{f 19342}# (car #{vars 19339}#))
             (#{f-name 19343}# (car #{ids 19338}#))
             (#{vars 19344}# (cdr #{vars 19339}#))
             (#{ids 19345}# (cdr #{ids 19338}#)))
         (let ((#{proc 19346}#
                 (let ((#{body 19366}#
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 15)
                           #{src 19337}#
                           #{ids 19345}#
                           #f
                           #f
                           #f
                           '()
                           #{vars 19344}#
                           #{body-exp 19341}#
                           #f)))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 14)
                     #{src 19337}#
                     '()
                     #{body 19366}#))))
           (begin
             (if (if (struct? #{proc 19346}#)
                   (eq? (struct-vtable #{proc 19346}#)
                        (vector-ref %expanded-vtables 14))
                   #f)
               (let ((#{meta 19390}# (struct-ref #{proc 19346}# 1)))
                 (if (not (assq 'name #{meta 19390}#))
                   (let ((#{v 19397}#
                           (cons (cons 'name #{f-name 19343}#)
                                 #{meta 19390}#)))
                     (struct-set! #{proc 19346}# 1 #{v 19397}#)))))
             (for-each
               #{maybe-name-value! 4307}#
               #{ids 19345}#
               #{val-exps 19340}#)
             (let ((#{names 19421}# (list #{f-name 19343}#))
                   (#{gensyms 19422}# (list #{f 19342}#))
                   (#{vals 19423}# (list #{proc 19346}#))
                   (#{body 19424}#
                     (let ((#{fun-exp 19428}#
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 3)
                               #{src 19337}#
                               #{f-name 19343}#
                               #{f 19342}#)))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 11)
                         #{src 19337}#
                         #{fun-exp 19428}#
                         #{val-exps 19340}#))))
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 17)
                 #{src 19337}#
                 #f
                 #{names 19421}#
                 #{gensyms 19422}#
                 #{vals 19423}#
                 #{body 19424}#)))))))
   (#{build-letrec 4327}#
     (lambda (#{src 19444}#
              #{in-order? 19445}#
              #{ids 19446}#
              #{vars 19447}#
              #{val-exps 19448}#
              #{body-exp 19449}#)
       (if (null? #{vars 19447}#)
         #{body-exp 19449}#
         (begin
           (for-each
             #{maybe-name-value! 4307}#
             #{ids 19446}#
             #{val-exps 19448}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 17)
             #{src 19444}#
             #{in-order? 19445}#
             #{ids 19446}#
             #{vars 19447}#
             #{val-exps 19448}#
             #{body-exp 19449}#)))))
   (#{source-annotation 4336}#
     (lambda (#{x 19475}#)
       (if (if (vector? #{x 19475}#)
             (if (= (vector-length #{x 19475}#) 4)
               (eq? (vector-ref #{x 19475}# 0) 'syntax-object)
               #f)
             #f)
         (#{source-annotation 4336}#
           (vector-ref #{x 19475}# 1))
         (if (pair? #{x 19475}#)
           (let ((#{props 19490}# (source-properties #{x 19475}#)))
             (if (pair? #{props 19490}#) #{props 19490}# #f))
           #f))))
   (#{extend-env 4337}#
     (lambda (#{labels 19492}# #{bindings 19493}# #{r 19494}#)
       (if (null? #{labels 19492}#)
         #{r 19494}#
         (#{extend-env 4337}#
           (cdr #{labels 19492}#)
           (cdr #{bindings 19493}#)
           (cons (cons (car #{labels 19492}#)
                       (car #{bindings 19493}#))
                 #{r 19494}#)))))
   (#{extend-var-env 4338}#
     (lambda (#{labels 19495}# #{vars 19496}# #{r 19497}#)
       (if (null? #{labels 19495}#)
         #{r 19497}#
         (#{extend-var-env 4338}#
           (cdr #{labels 19495}#)
           (cdr #{vars 19496}#)
           (cons (cons (car #{labels 19495}#)
                       (cons 'lexical (car #{vars 19496}#)))
                 #{r 19497}#)))))
   (#{macros-only-env 4339}#
     (lambda (#{r 19498}#)
       (if (null? #{r 19498}#)
         '()
         (let ((#{a 19499}# (car #{r 19498}#)))
           (if (eq? (car (cdr #{a 19499}#)) 'macro)
             (cons #{a 19499}#
                   (#{macros-only-env 4339}# (cdr #{r 19498}#)))
             (#{macros-only-env 4339}# (cdr #{r 19498}#)))))))
   (#{global-extend 4341}#
     (lambda (#{type 19501}# #{sym 19502}# #{val 19503}#)
       (module-define!
         (current-module)
         #{sym 19502}#
         (make-syntax-transformer
           #{sym 19502}#
           #{type 19501}#
           #{val 19503}#))))
   (#{id? 4343}#
     (lambda (#{x 12438}#)
       (if (symbol? #{x 12438}#)
         #t
         (if (if (vector? #{x 12438}#)
               (if (= (vector-length #{x 12438}#) 4)
                 (eq? (vector-ref #{x 12438}# 0) 'syntax-object)
                 #f)
               #f)
           (symbol? (vector-ref #{x 12438}# 1))
           #f))))
   (#{gen-labels 4346}#
     (lambda (#{ls 19513}#)
       (if (null? #{ls 19513}#)
         '()
         (cons (symbol->string (gensym "i"))
               (#{gen-labels 4346}# (cdr #{ls 19513}#))))))
   (#{make-binding-wrap 4357}#
     (lambda (#{ids 19517}# #{labels 19518}# #{w 19519}#)
       (if (null? #{ids 19517}#)
         #{w 19519}#
         (cons (car #{w 19519}#)
               (cons (let ((#{labelvec 19520}#
                             (list->vector #{labels 19518}#)))
                       (let ((#{n 19521}# (vector-length #{labelvec 19520}#)))
                         (let ((#{symnamevec 19522}# (make-vector #{n 19521}#))
                               (#{marksvec 19523}# (make-vector #{n 19521}#)))
                           (begin
                             (letrec*
                               ((#{f 19524}#
                                  (lambda (#{ids 19723}# #{i 19724}#)
                                    (if (not (null? #{ids 19723}#))
                                      (call-with-values
                                        (lambda ()
                                          (let ((#{x 19727}#
                                                  (car #{ids 19723}#)))
                                            (if (if (vector? #{x 19727}#)
                                                  (if (= (vector-length
                                                           #{x 19727}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{x 19727}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (values
                                                (vector-ref #{x 19727}# 1)
                                                (let ((#{m1 19743}#
                                                        (car #{w 19519}#))
                                                      (#{m2 19744}#
                                                        (car (vector-ref
                                                               #{x 19727}#
                                                               2))))
                                                  (if (null? #{m2 19744}#)
                                                    #{m1 19743}#
                                                    (append
                                                      #{m1 19743}#
                                                      #{m2 19744}#))))
                                              (values
                                                #{x 19727}#
                                                (car #{w 19519}#)))))
                                        (lambda (#{symname 19764}#
                                                 #{marks 19765}#)
                                          (begin
                                            (vector-set!
                                              #{symnamevec 19522}#
                                              #{i 19724}#
                                              #{symname 19764}#)
                                            (vector-set!
                                              #{marksvec 19523}#
                                              #{i 19724}#
                                              #{marks 19765}#)
                                            (#{f 19524}#
                                              (cdr #{ids 19723}#)
                                              (#{1+}# #{i 19724}#)))))))))
                               (#{f 19524}# #{ids 19517}# 0))
                             (vector
                               'ribcage
                               #{symnamevec 19522}#
                               #{marksvec 19523}#
                               #{labelvec 19520}#)))))
                     (cdr #{w 19519}#))))))
   (#{same-marks? 4361}#
     (lambda (#{x 36922}# #{y 36923}#)
       (if (eq? #{x 36922}# #{y 36923}#)
         (eq? #{x 36922}# #{y 36923}#)
         (if (not (null? #{x 36922}#))
           (if (not (null? #{y 36923}#))
             (if (eq? (car #{x 36922}#) (car #{y 36923}#))
               (#{same-marks? 4361}#
                 (cdr #{x 36922}#)
                 (cdr #{y 36923}#))
               #f)
             #f)
           #f))))
   (#{id-var-name 4362}#
     (lambda (#{id 19772}# #{w 19773}#)
       (letrec*
         ((#{search 19774}#
            (lambda (#{sym 19835}# #{subst 19836}# #{marks 19837}#)
              (if (null? #{subst 19836}#)
                (values #f #{marks 19837}#)
                (let ((#{fst 19838}# (car #{subst 19836}#)))
                  (if (eq? #{fst 19838}# 'shift)
                    (#{search 19774}#
                      #{sym 19835}#
                      (cdr #{subst 19836}#)
                      (cdr #{marks 19837}#))
                    (let ((#{symnames 19840}# (vector-ref #{fst 19838}# 1)))
                      (if (vector? #{symnames 19840}#)
                        (#{search-vector-rib 19776}#
                          #{sym 19835}#
                          #{subst 19836}#
                          #{marks 19837}#
                          #{symnames 19840}#
                          #{fst 19838}#)
                        (#{search-list-rib 19775}#
                          #{sym 19835}#
                          #{subst 19836}#
                          #{marks 19837}#
                          #{symnames 19840}#
                          #{fst 19838}#))))))))
          (#{search-list-rib 19775}#
            (lambda (#{sym 20010}#
                     #{subst 20011}#
                     #{marks 20012}#
                     #{symnames 20013}#
                     #{ribcage 20014}#)
              (letrec*
                ((#{f 20015}#
                   (lambda (#{symnames 20018}# #{i 20019}#)
                     (if (null? #{symnames 20018}#)
                       (#{search 19774}#
                         #{sym 20010}#
                         (cdr #{subst 20011}#)
                         #{marks 20012}#)
                       (if (if (eq? (car #{symnames 20018}#) #{sym 20010}#)
                             (#{same-marks? 4361}#
                               #{marks 20012}#
                               (list-ref
                                 (vector-ref #{ribcage 20014}# 2)
                                 #{i 20019}#))
                             #f)
                         (values
                           (list-ref
                             (vector-ref #{ribcage 20014}# 3)
                             #{i 20019}#)
                           #{marks 20012}#)
                         (#{f 20015}#
                           (cdr #{symnames 20018}#)
                           (#{1+}# #{i 20019}#)))))))
                (#{f 20015}# #{symnames 20013}# 0))))
          (#{search-vector-rib 19776}#
            (lambda (#{sym 20169}#
                     #{subst 20170}#
                     #{marks 20171}#
                     #{symnames 20172}#
                     #{ribcage 20173}#)
              (let ((#{n 20174}# (vector-length #{symnames 20172}#)))
                (letrec*
                  ((#{f 20175}#
                     (lambda (#{i 20232}#)
                       (if (= #{i 20232}# #{n 20174}#)
                         (#{search 19774}#
                           #{sym 20169}#
                           (cdr #{subst 20170}#)
                           #{marks 20171}#)
                         (if (if (eq? (vector-ref
                                        #{symnames 20172}#
                                        #{i 20232}#)
                                      #{sym 20169}#)
                               (#{same-marks? 4361}#
                                 #{marks 20171}#
                                 (vector-ref
                                   (vector-ref #{ribcage 20173}# 2)
                                   #{i 20232}#))
                               #f)
                           (values
                             (vector-ref
                               (vector-ref #{ribcage 20173}# 3)
                               #{i 20232}#)
                             #{marks 20171}#)
                           (#{f 20175}# (#{1+}# #{i 20232}#)))))))
                  (#{f 20175}# 0))))))
         (if (symbol? #{id 19772}#)
           (let ((#{t 19777}#
                   (#{search 19774}#
                     #{id 19772}#
                     (cdr #{w 19773}#)
                     (car #{w 19773}#))))
             (if #{t 19777}# #{t 19777}# #{id 19772}#))
           (if (if (vector? #{id 19772}#)
                 (if (= (vector-length #{id 19772}#) 4)
                   (eq? (vector-ref #{id 19772}# 0) 'syntax-object)
                   #f)
                 #f)
             (let ((#{id 19792}# (vector-ref #{id 19772}# 1))
                   (#{w1 19793}# (vector-ref #{id 19772}# 2)))
               (let ((#{marks 19794}#
                       (let ((#{m1 19804}# (car #{w 19773}#))
                             (#{m2 19805}# (car #{w1 19793}#)))
                         (if (null? #{m2 19805}#)
                           #{m1 19804}#
                           (append #{m1 19804}# #{m2 19805}#)))))
                 (call-with-values
                   (lambda ()
                     (#{search 19774}#
                       #{id 19792}#
                       (cdr #{w 19773}#)
                       #{marks 19794}#))
                   (lambda (#{new-id 19821}# #{marks 19822}#)
                     (if #{new-id 19821}#
                       #{new-id 19821}#
                       (let ((#{t 19830}#
                               (#{search 19774}#
                                 #{id 19792}#
                                 (cdr #{w1 19793}#)
                                 #{marks 19822}#)))
                         (if #{t 19830}# #{t 19830}# #{id 19792}#)))))))
             (syntax-violation
               'id-var-name
               "invalid id"
               #{id 19772}#))))))
   (#{free-id=? 4363}#
     (lambda (#{i 20382}# #{j 20383}#)
       (let ((#{ni 20384}#
               (#{id-var-name 4362}# #{i 20382}# '(())))
             (#{nj 20385}#
               (#{id-var-name 4362}# #{j 20383}# '(()))))
         (if (eq? #{ni 20384}#
                  (if (if (vector? #{i 20382}#)
                        (if (= (vector-length #{i 20382}#) 4)
                          (eq? (vector-ref #{i 20382}# 0) 'syntax-object)
                          #f)
                        #f)
                    (vector-ref #{i 20382}# 1)
                    #{i 20382}#))
           (if (eq? #{nj 20385}#
                    (if (if (vector? #{j 20383}#)
                          (if (= (vector-length #{j 20383}#) 4)
                            (eq? (vector-ref #{j 20383}# 0) 'syntax-object)
                            #f)
                          #f)
                      (vector-ref #{j 20383}# 1)
                      #{j 20383}#))
             (if (let ((#{bi 20443}#
                         (let ((#{mod 20712}#
                                 (if (if (vector? #{i 20382}#)
                                       (if (= (vector-length #{i 20382}#) 4)
                                         (eq? (vector-ref #{i 20382}# 0)
                                              'syntax-object)
                                         #f)
                                       #f)
                                   (vector-ref #{i 20382}# 3)
                                   #f)))
                           (module-variable
                             (if #{mod 20712}#
                               (resolve-module (cdr #{mod 20712}#))
                               (current-module))
                             (if (if (vector? #{i 20382}#)
                                   (if (= (vector-length #{i 20382}#) 4)
                                     (eq? (vector-ref #{i 20382}# 0)
                                          'syntax-object)
                                     #f)
                                   #f)
                               (vector-ref #{i 20382}# 1)
                               #{i 20382}#)))))
                   (if #{bi 20443}#
                     (eq? #{bi 20443}#
                          (let ((#{mod 20556}#
                                  (if (if (vector? #{j 20383}#)
                                        (if (= (vector-length #{j 20383}#) 4)
                                          (eq? (vector-ref #{j 20383}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (vector-ref #{j 20383}# 3)
                                    #f)))
                            (module-variable
                              (if #{mod 20556}#
                                (resolve-module (cdr #{mod 20556}#))
                                (current-module))
                              (if (if (vector? #{j 20383}#)
                                    (if (= (vector-length #{j 20383}#) 4)
                                      (eq? (vector-ref #{j 20383}# 0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (vector-ref #{j 20383}# 1)
                                #{j 20383}#))))
                     (if (not (let ((#{mod 20634}#
                                      (if (if (vector? #{j 20383}#)
                                            (if (= (vector-length #{j 20383}#)
                                                   4)
                                              (eq? (vector-ref #{j 20383}# 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (vector-ref #{j 20383}# 3)
                                        #f)))
                                (module-variable
                                  (if #{mod 20634}#
                                    (resolve-module (cdr #{mod 20634}#))
                                    (current-module))
                                  (if (if (vector? #{j 20383}#)
                                        (if (= (vector-length #{j 20383}#) 4)
                                          (eq? (vector-ref #{j 20383}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (vector-ref #{j 20383}# 1)
                                    #{j 20383}#))))
                       (eq? #{ni 20384}# #{nj 20385}#)
                       #f)))
               (eq? (let ((#{mod 20790}#
                            (if (if (vector? #{i 20382}#)
                                  (if (= (vector-length #{i 20382}#) 4)
                                    (eq? (vector-ref #{i 20382}# 0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (vector-ref #{i 20382}# 3)
                              #f)))
                      (module-variable
                        (if #{mod 20790}#
                          (resolve-module (cdr #{mod 20790}#))
                          (current-module))
                        (if (if (vector? #{i 20382}#)
                              (if (= (vector-length #{i 20382}#) 4)
                                (eq? (vector-ref #{i 20382}# 0) 'syntax-object)
                                #f)
                              #f)
                          (vector-ref #{i 20382}# 1)
                          #{i 20382}#)))
                    (let ((#{mod 20868}#
                            (if (if (vector? #{j 20383}#)
                                  (if (= (vector-length #{j 20383}#) 4)
                                    (eq? (vector-ref #{j 20383}# 0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (vector-ref #{j 20383}# 3)
                              #f)))
                      (module-variable
                        (if #{mod 20868}#
                          (resolve-module (cdr #{mod 20868}#))
                          (current-module))
                        (if (if (vector? #{j 20383}#)
                              (if (= (vector-length #{j 20383}#) 4)
                                (eq? (vector-ref #{j 20383}# 0) 'syntax-object)
                                #f)
                              #f)
                          (vector-ref #{j 20383}# 1)
                          #{j 20383}#))))
               #f)
             #f)
           (if (eq? #{ni 20384}# #{nj 20385}#)
             (not (eq? #{nj 20385}#
                       (if (if (vector? #{j 20383}#)
                             (if (= (vector-length #{j 20383}#) 4)
                               (eq? (vector-ref #{j 20383}# 0) 'syntax-object)
                               #f)
                             #f)
                         (vector-ref #{j 20383}# 1)
                         #{j 20383}#)))
             #f)))))
   (#{bound-id=? 4364}#
     (lambda (#{i 20968}# #{j 20969}#)
       (if (if (if (vector? #{i 20968}#)
                 (if (= (vector-length #{i 20968}#) 4)
                   (eq? (vector-ref #{i 20968}# 0) 'syntax-object)
                   #f)
                 #f)
             (if (vector? #{j 20969}#)
               (if (= (vector-length #{j 20969}#) 4)
                 (eq? (vector-ref #{j 20969}# 0) 'syntax-object)
                 #f)
               #f)
             #f)
         (if (eq? (vector-ref #{i 20968}# 1)
                  (vector-ref #{j 20969}# 1))
           (#{same-marks? 4361}#
             (car (vector-ref #{i 20968}# 2))
             (car (vector-ref #{j 20969}# 2)))
           #f)
         (eq? #{i 20968}# #{j 20969}#))))
   (#{valid-bound-ids? 4365}#
     (lambda (#{ids 21138}#)
       (if (letrec*
             ((#{all-ids? 21139}#
                (lambda (#{ids 21336}#)
                  (if (null? #{ids 21336}#)
                    (null? #{ids 21336}#)
                    (if (let ((#{x 21347}# (car #{ids 21336}#)))
                          (if (symbol? #{x 21347}#)
                            #t
                            (if (if (vector? #{x 21347}#)
                                  (if (= (vector-length #{x 21347}#) 4)
                                    (eq? (vector-ref #{x 21347}# 0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (symbol? (vector-ref #{x 21347}# 1))
                              #f)))
                      (#{all-ids? 21139}# (cdr #{ids 21336}#))
                      #f)))))
             (#{all-ids? 21139}# #{ids 21138}#))
         (#{distinct-bound-ids? 4366}# #{ids 21138}#)
         #f)))
   (#{distinct-bound-ids? 4366}#
     (lambda (#{ids 21468}#)
       (letrec*
         ((#{distinct? 21469}#
            (lambda (#{ids 21574}#)
              (if (null? #{ids 21574}#)
                (null? #{ids 21574}#)
                (if (not (#{bound-id-member? 4367}#
                           (car #{ids 21574}#)
                           (cdr #{ids 21574}#)))
                  (#{distinct? 21469}# (cdr #{ids 21574}#))
                  #f)))))
         (#{distinct? 21469}# #{ids 21468}#))))
   (#{bound-id-member? 4367}#
     (lambda (#{x 21670}# #{list 21671}#)
       (if (not (null? #{list 21671}#))
         (let ((#{t 21672}#
                 (#{bound-id=? 4364}#
                   #{x 21670}#
                   (car #{list 21671}#))))
           (if #{t 21672}#
             #{t 21672}#
             (#{bound-id-member? 4367}#
               #{x 21670}#
               (cdr #{list 21671}#))))
         #f)))
   (#{source-wrap 4369}#
     (lambda (#{x 21850}#
              #{w 21851}#
              #{s 21852}#
              #{defmod 21853}#)
       (let ((#{x 21857}#
               (begin
                 (if (if (pair? #{x 21850}#) #{s 21852}# #f)
                   (set-source-properties! #{x 21850}# #{s 21852}#))
                 #{x 21850}#)))
         (if (if (null? (car #{w 21851}#))
               (null? (cdr #{w 21851}#))
               #f)
           #{x 21857}#
           (if (if (vector? #{x 21857}#)
                 (if (= (vector-length #{x 21857}#) 4)
                   (eq? (vector-ref #{x 21857}# 0) 'syntax-object)
                   #f)
                 #f)
             (let ((#{expression 21889}# (vector-ref #{x 21857}# 1))
                   (#{wrap 21890}#
                     (let ((#{w2 21898}# (vector-ref #{x 21857}# 2)))
                       (let ((#{m1 21899}# (car #{w 21851}#))
                             (#{s1 21900}# (cdr #{w 21851}#)))
                         (if (null? #{m1 21899}#)
                           (if (null? #{s1 21900}#)
                             #{w2 21898}#
                             (cons (car #{w2 21898}#)
                                   (let ((#{m2 21915}# (cdr #{w2 21898}#)))
                                     (if (null? #{m2 21915}#)
                                       #{s1 21900}#
                                       (append #{s1 21900}# #{m2 21915}#)))))
                           (cons (let ((#{m2 21923}# (car #{w2 21898}#)))
                                   (if (null? #{m2 21923}#)
                                     #{m1 21899}#
                                     (append #{m1 21899}# #{m2 21923}#)))
                                 (let ((#{m2 21931}# (cdr #{w2 21898}#)))
                                   (if (null? #{m2 21931}#)
                                     #{s1 21900}#
                                     (append #{s1 21900}# #{m2 21931}#))))))))
                   (#{module 21891}# (vector-ref #{x 21857}# 3)))
               (vector
                 'syntax-object
                 #{expression 21889}#
                 #{wrap 21890}#
                 #{module 21891}#))
             (if (null? #{x 21857}#)
               #{x 21857}#
               (vector
                 'syntax-object
                 #{x 21857}#
                 #{w 21851}#
                 #{defmod 21853}#)))))))
   (#{chi-sequence 4370}#
     (lambda (#{body 36931}#
              #{r 36932}#
              #{w 36933}#
              #{s 36934}#
              #{mod 36935}#)
       (#{build-sequence 4324}#
         #{s 36934}#
         (letrec*
           ((#{dobody 37027}#
              (lambda (#{body 37114}#
                       #{r 37115}#
                       #{w 37116}#
                       #{mod 37117}#)
                (if (null? #{body 37114}#)
                  '()
                  (let ((#{first 37118}#
                          (#{chi 4375}#
                            (car #{body 37114}#)
                            #{r 37115}#
                            #{w 37116}#
                            #{mod 37117}#)))
                    (cons #{first 37118}#
                          (#{dobody 37027}#
                            (cdr #{body 37114}#)
                            #{r 37115}#
                            #{w 37116}#
                            #{mod 37117}#)))))))
           (#{dobody 37027}#
             #{body 36931}#
             #{r 36932}#
             #{w 36933}#
             #{mod 36935}#)))))
   (#{chi-top-sequence 4371}#
     (lambda (#{body 21946}#
              #{r 21947}#
              #{w 21948}#
              #{s 21949}#
              #{m 21950}#
              #{esew 21951}#
              #{mod 21952}#)
       (letrec*
         ((#{scan 21953}#
            (lambda (#{body 22100}#
                     #{r 22101}#
                     #{w 22102}#
                     #{s 22103}#
                     #{m 22104}#
                     #{esew 22105}#
                     #{mod 22106}#
                     #{exps 22107}#)
              (if (null? #{body 22100}#)
                #{exps 22107}#
                (call-with-values
                  (lambda ()
                    (call-with-values
                      (lambda ()
                        (let ((#{e 22108}# (car #{body 22100}#)))
                          (#{syntax-type 4374}#
                            #{e 22108}#
                            #{r 22101}#
                            #{w 22102}#
                            (let ((#{t 22112}#
                                    (#{source-annotation 4336}# #{e 22108}#)))
                              (if #{t 22112}# #{t 22112}# #{s 22103}#))
                            #f
                            #{mod 22106}#
                            #f)))
                      (lambda (#{type 22410}#
                               #{value 22411}#
                               #{e 22412}#
                               #{w 22413}#
                               #{s 22414}#
                               #{mod 22415}#)
                        (if (eqv? #{type 22410}# 'begin-form)
                          (let ((#{tmp 22420}#
                                  ($sc-dispatch #{e 22412}# '(_))))
                            (if #{tmp 22420}#
                              (@apply (lambda () #{exps 22107}#) #{tmp 22420}#)
                              (let ((#{tmp 22424}#
                                      ($sc-dispatch
                                        #{e 22412}#
                                        '(_ any . each-any))))
                                (if #{tmp 22424}#
                                  (@apply
                                    (lambda (#{e1 22428}# #{e2 22429}#)
                                      (#{scan 21953}#
                                        (cons #{e1 22428}# #{e2 22429}#)
                                        #{r 22101}#
                                        #{w 22413}#
                                        #{s 22414}#
                                        #{m 22104}#
                                        #{esew 22105}#
                                        #{mod 22415}#
                                        #{exps 22107}#))
                                    #{tmp 22424}#)
                                  (syntax-violation
                                    #f
                                    "source expression failed to match any pattern"
                                    #{e 22412}#)))))
                          (if (eqv? #{type 22410}# 'local-syntax-form)
                            (#{chi-local-syntax 4380}#
                              #{value 22411}#
                              #{e 22412}#
                              #{r 22101}#
                              #{w 22413}#
                              #{s 22414}#
                              #{mod 22415}#
                              (lambda (#{body 22444}#
                                       #{r 22445}#
                                       #{w 22446}#
                                       #{s 22447}#
                                       #{mod 22448}#)
                                (#{scan 21953}#
                                  #{body 22444}#
                                  #{r 22445}#
                                  #{w 22446}#
                                  #{s 22447}#
                                  #{m 22104}#
                                  #{esew 22105}#
                                  #{mod 22448}#
                                  #{exps 22107}#)))
                            (if (eqv? #{type 22410}# 'eval-when-form)
                              (let ((#{tmp 22453}#
                                      ($sc-dispatch
                                        #{e 22412}#
                                        '(_ each-any any . each-any))))
                                (if #{tmp 22453}#
                                  (@apply
                                    (lambda (#{x 22457}#
                                             #{e1 22458}#
                                             #{e2 22459}#)
                                      (let ((#{when-list 22460}#
                                              (#{chi-when-list 4373}#
                                                #{e 22412}#
                                                #{x 22457}#
                                                #{w 22413}#))
                                            (#{body 22461}#
                                              (cons #{e1 22458}#
                                                    #{e2 22459}#)))
                                        (if (eq? #{m 22104}# 'e)
                                          (if (memq 'eval #{when-list 22460}#)
                                            (#{scan 21953}#
                                              #{body 22461}#
                                              #{r 22101}#
                                              #{w 22413}#
                                              #{s 22414}#
                                              (if (memq 'expand
                                                        #{when-list 22460}#)
                                                'c&e
                                                'e)
                                              '(eval)
                                              #{mod 22415}#
                                              #{exps 22107}#)
                                            (begin
                                              (if (memq 'expand
                                                        #{when-list 22460}#)
                                                (let ((#{x 22468}#
                                                        (#{chi-top-sequence 4371}#
                                                          #{body 22461}#
                                                          #{r 22101}#
                                                          #{w 22413}#
                                                          #{s 22414}#
                                                          'e
                                                          '(eval)
                                                          #{mod 22415}#)))
                                                  (primitive-eval
                                                    #{x 22468}#)))
                                              (values #{exps 22107}#)))
                                          (if (memq 'load #{when-list 22460}#)
                                            (if (let ((#{t 22470}#
                                                        (memq 'compile
                                                              #{when-list 22460}#)))
                                                  (if #{t 22470}#
                                                    #{t 22470}#
                                                    (let ((#{t 22472}#
                                                            (memq 'expand
                                                                  #{when-list 22460}#)))
                                                      (if #{t 22472}#
                                                        #{t 22472}#
                                                        (if (eq? #{m 22104}#
                                                                 'c&e)
                                                          (memq 'eval
                                                                #{when-list 22460}#)
                                                          #f)))))
                                              (#{scan 21953}#
                                                #{body 22461}#
                                                #{r 22101}#
                                                #{w 22413}#
                                                #{s 22414}#
                                                'c&e
                                                '(compile load)
                                                #{mod 22415}#
                                                #{exps 22107}#)
                                              (if (if (eq? #{m 22104}# 'c)
                                                    #t
                                                    (eq? #{m 22104}# 'c&e))
                                                (#{scan 21953}#
                                                  #{body 22461}#
                                                  #{r 22101}#
                                                  #{w 22413}#
                                                  #{s 22414}#
                                                  'c
                                                  '(load)
                                                  #{mod 22415}#
                                                  #{exps 22107}#)
                                                (values #{exps 22107}#)))
                                            (if (let ((#{t 22482}#
                                                        (memq 'compile
                                                              #{when-list 22460}#)))
                                                  (if #{t 22482}#
                                                    #{t 22482}#
                                                    (let ((#{t 22484}#
                                                            (memq 'expand
                                                                  #{when-list 22460}#)))
                                                      (if #{t 22484}#
                                                        #{t 22484}#
                                                        (if (eq? #{m 22104}#
                                                                 'c&e)
                                                          (memq 'eval
                                                                #{when-list 22460}#)
                                                          #f)))))
                                              (begin
                                                (let ((#{x 22489}#
                                                        (#{chi-top-sequence 4371}#
                                                          #{body 22461}#
                                                          #{r 22101}#
                                                          #{w 22413}#
                                                          #{s 22414}#
                                                          'e
                                                          '(eval)
                                                          #{mod 22415}#)))
                                                  (primitive-eval #{x 22489}#))
                                                (values #{exps 22107}#))
                                              (values #{exps 22107}#))))))
                                    #{tmp 22453}#)
                                  (syntax-violation
                                    #f
                                    "source expression failed to match any pattern"
                                    #{e 22412}#)))
                              (if (eqv? #{type 22410}# 'define-syntax-form)
                                (let ((#{n 22500}#
                                        (#{id-var-name 4362}#
                                          #{value 22411}#
                                          #{w 22413}#))
                                      (#{r 22501}#
                                        (#{macros-only-env 4339}#
                                          #{r 22101}#)))
                                  (if (eqv? #{m 22104}# 'c)
                                    (if (memq 'compile #{esew 22105}#)
                                      (let ((#{e 22505}#
                                              (#{chi-install-global 4372}#
                                                #{n 22500}#
                                                (#{chi 4375}#
                                                  #{e 22412}#
                                                  #{r 22501}#
                                                  #{w 22413}#
                                                  #{mod 22415}#))))
                                        (begin
                                          (#{top-level-eval-hook 4302}#
                                            #{e 22505}#
                                            #{mod 22415}#)
                                          (if (memq 'load #{esew 22105}#)
                                            (values
                                              (cons #{e 22505}#
                                                    #{exps 22107}#))
                                            (values #{exps 22107}#))))
                                      (if (memq 'load #{esew 22105}#)
                                        (values
                                          (cons (#{chi-install-global 4372}#
                                                  #{n 22500}#
                                                  (#{chi 4375}#
                                                    #{e 22412}#
                                                    #{r 22501}#
                                                    #{w 22413}#
                                                    #{mod 22415}#))
                                                #{exps 22107}#))
                                        (values #{exps 22107}#)))
                                    (if (eqv? #{m 22104}# 'c&e)
                                      (let ((#{e 22951}#
                                              (#{chi-install-global 4372}#
                                                #{n 22500}#
                                                (#{chi 4375}#
                                                  #{e 22412}#
                                                  #{r 22501}#
                                                  #{w 22413}#
                                                  #{mod 22415}#))))
                                        (begin
                                          (#{top-level-eval-hook 4302}#
                                            #{e 22951}#
                                            #{mod 22415}#)
                                          (values
                                            (cons #{e 22951}#
                                                  #{exps 22107}#))))
                                      (begin
                                        (if (memq 'eval #{esew 22105}#)
                                          (#{top-level-eval-hook 4302}#
                                            (#{chi-install-global 4372}#
                                              #{n 22500}#
                                              (#{chi 4375}#
                                                #{e 22412}#
                                                #{r 22501}#
                                                #{w 22413}#
                                                #{mod 22415}#))
                                            #{mod 22415}#))
                                        (values #{exps 22107}#)))))
                                (if (eqv? #{type 22410}# 'define-form)
                                  (let ((#{n 23601}#
                                          (#{id-var-name 4362}#
                                            #{value 22411}#
                                            #{w 22413}#)))
                                    (let ((#{type 23602}#
                                            (car (let ((#{t 24604}#
                                                         (assq #{n 23601}#
                                                               #{r 22101}#)))
                                                   (if #{t 24604}#
                                                     (cdr #{t 24604}#)
                                                     (if (symbol? #{n 23601}#)
                                                       (let ((#{t 24609}#
                                                               (begin
                                                                 (if (if (not #{mod 22415}#)
                                                                       (current-module)
                                                                       #f)
                                                                   (warn "module system is booted, we should have a module"
                                                                         #{n 23601}#))
                                                                 (let ((#{v 24646}#
                                                                         (module-variable
                                                                           (if #{mod 22415}#
                                                                             (resolve-module
                                                                               (cdr #{mod 22415}#))
                                                                             (current-module))
                                                                           #{n 23601}#)))
                                                                   (if #{v 24646}#
                                                                     (if (variable-bound?
                                                                           #{v 24646}#)
                                                                       (let ((#{val 24655}#
                                                                               (variable-ref
                                                                                 #{v 24646}#)))
                                                                         (if (macro?
                                                                               #{val 24655}#)
                                                                           (if (macro-type
                                                                                 #{val 24655}#)
                                                                             (cons (macro-type
                                                                                     #{val 24655}#)
                                                                                   (macro-binding
                                                                                     #{val 24655}#))
                                                                             #f)
                                                                           #f))
                                                                       #f)
                                                                     #f)))))
                                                         (if #{t 24609}#
                                                           #{t 24609}#
                                                           '(global)))
                                                       '(displaced-lexical)))))))
                                      (if (let ((#{t 23636}# #{type 23602}#))
                                            (if (eqv? #{t 23636}# 'global)
                                              #t
                                              (if (eqv? #{t 23636}# 'core)
                                                #t
                                                (if (eqv? #{t 23636}# 'macro)
                                                  #t
                                                  (eqv? #{t 23636}#
                                                        'module-ref)))))
                                        (begin
                                          (if (if (if (eq? #{m 22104}# 'c)
                                                    #t
                                                    (eq? #{m 22104}# 'c&e))
                                                (if (not (module-local-variable
                                                           (current-module)
                                                           #{n 23601}#))
                                                  (current-module)
                                                  #f)
                                                #f)
                                            (let ((#{old 23800}#
                                                    (module-variable
                                                      (current-module)
                                                      #{n 23601}#)))
                                              (if (if (variable? #{old 23800}#)
                                                    (variable-bound?
                                                      #{old 23800}#)
                                                    #f)
                                                (module-define!
                                                  (current-module)
                                                  #{n 23601}#
                                                  (variable-ref #{old 23800}#))
                                                (module-add!
                                                  (current-module)
                                                  #{n 23601}#
                                                  (make-undefined-variable)))))
                                          (values
                                            (cons (if (eq? #{m 22104}# 'c&e)
                                                    (let ((#{x 23802}#
                                                            (#{build-global-definition 4317}#
                                                              #{s 22414}#
                                                              #{n 23601}#
                                                              (#{chi 4375}#
                                                                #{e 22412}#
                                                                #{r 22101}#
                                                                #{w 22413}#
                                                                #{mod 22415}#))))
                                                      (begin
                                                        (#{top-level-eval-hook 4302}#
                                                          #{x 23802}#
                                                          #{mod 22415}#)
                                                        #{x 23802}#))
                                                    (lambda ()
                                                      (#{build-global-definition 4317}#
                                                        #{s 22414}#
                                                        #{n 23601}#
                                                        (#{chi 4375}#
                                                          #{e 22412}#
                                                          #{r 22101}#
                                                          #{w 22413}#
                                                          #{mod 22415}#))))
                                                  #{exps 22107}#)))
                                        (if (let ((#{t 24339}# #{type 23602}#))
                                              (eqv? #{t 24339}#
                                                    'displaced-lexical))
                                          (syntax-violation
                                            #f
                                            "identifier out of context"
                                            #{e 22412}#
                                            (if (if (null? (car #{w 22413}#))
                                                  (null? (cdr #{w 22413}#))
                                                  #f)
                                              #{value 22411}#
                                              (if (if (vector? #{value 22411}#)
                                                    (if (= (vector-length
                                                             #{value 22411}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{value 22411}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (let ((#{expression 24431}#
                                                        (vector-ref
                                                          #{value 22411}#
                                                          1))
                                                      (#{wrap 24432}#
                                                        (let ((#{w2 24442}#
                                                                (vector-ref
                                                                  #{value 22411}#
                                                                  2)))
                                                          (let ((#{m1 24443}#
                                                                  (car #{w 22413}#))
                                                                (#{s1 24444}#
                                                                  (cdr #{w 22413}#)))
                                                            (if (null? #{m1 24443}#)
                                                              (if (null? #{s1 24444}#)
                                                                #{w2 24442}#
                                                                (cons (car #{w2 24442}#)
                                                                      (let ((#{m2 24461}#
                                                                              (cdr #{w2 24442}#)))
                                                                        (if (null? #{m2 24461}#)
                                                                          #{s1 24444}#
                                                                          (append
                                                                            #{s1 24444}#
                                                                            #{m2 24461}#)))))
                                                              (cons (let ((#{m2 24469}#
                                                                            (car #{w2 24442}#)))
                                                                      (if (null? #{m2 24469}#)
                                                                        #{m1 24443}#
                                                                        (append
                                                                          #{m1 24443}#
                                                                          #{m2 24469}#)))
                                                                    (let ((#{m2 24477}#
                                                                            (cdr #{w2 24442}#)))
                                                                      (if (null? #{m2 24477}#)
                                                                        #{s1 24444}#
                                                                        (append
                                                                          #{s1 24444}#
                                                                          #{m2 24477}#))))))))
                                                      (#{module 24433}#
                                                        (vector-ref
                                                          #{value 22411}#
                                                          3)))
                                                  (vector
                                                    'syntax-object
                                                    #{expression 24431}#
                                                    #{wrap 24432}#
                                                    #{module 24433}#))
                                                (if (null? #{value 22411}#)
                                                  #{value 22411}#
                                                  (vector
                                                    'syntax-object
                                                    #{value 22411}#
                                                    #{w 22413}#
                                                    #{mod 22415}#)))))
                                          (syntax-violation
                                            #f
                                            "cannot define keyword at top level"
                                            #{e 22412}#
                                            (if (if (null? (car #{w 22413}#))
                                                  (null? (cdr #{w 22413}#))
                                                  #f)
                                              #{value 22411}#
                                              (if (if (vector? #{value 22411}#)
                                                    (if (= (vector-length
                                                             #{value 22411}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{value 22411}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (let ((#{expression 24529}#
                                                        (vector-ref
                                                          #{value 22411}#
                                                          1))
                                                      (#{wrap 24530}#
                                                        (let ((#{w2 24540}#
                                                                (vector-ref
                                                                  #{value 22411}#
                                                                  2)))
                                                          (let ((#{m1 24541}#
                                                                  (car #{w 22413}#))
                                                                (#{s1 24542}#
                                                                  (cdr #{w 22413}#)))
                                                            (if (null? #{m1 24541}#)
                                                              (if (null? #{s1 24542}#)
                                                                #{w2 24540}#
                                                                (cons (car #{w2 24540}#)
                                                                      (let ((#{m2 24559}#
                                                                              (cdr #{w2 24540}#)))
                                                                        (if (null? #{m2 24559}#)
                                                                          #{s1 24542}#
                                                                          (append
                                                                            #{s1 24542}#
                                                                            #{m2 24559}#)))))
                                                              (cons (let ((#{m2 24567}#
                                                                            (car #{w2 24540}#)))
                                                                      (if (null? #{m2 24567}#)
                                                                        #{m1 24541}#
                                                                        (append
                                                                          #{m1 24541}#
                                                                          #{m2 24567}#)))
                                                                    (let ((#{m2 24575}#
                                                                            (cdr #{w2 24540}#)))
                                                                      (if (null? #{m2 24575}#)
                                                                        #{s1 24542}#
                                                                        (append
                                                                          #{s1 24542}#
                                                                          #{m2 24575}#))))))))
                                                      (#{module 24531}#
                                                        (vector-ref
                                                          #{value 22411}#
                                                          3)))
                                                  (vector
                                                    'syntax-object
                                                    #{expression 24529}#
                                                    #{wrap 24530}#
                                                    #{module 24531}#))
                                                (if (null? #{value 22411}#)
                                                  #{value 22411}#
                                                  (vector
                                                    'syntax-object
                                                    #{value 22411}#
                                                    #{w 22413}#
                                                    #{mod 22415}#)))))))))
                                  (values
                                    (cons (if (eq? #{m 22104}# 'c&e)
                                            (let ((#{x 24666}#
                                                    (#{chi-expr 4376}#
                                                      #{type 22410}#
                                                      #{value 22411}#
                                                      #{e 22412}#
                                                      #{r 22101}#
                                                      #{w 22413}#
                                                      #{s 22414}#
                                                      #{mod 22415}#)))
                                              (begin
                                                (primitive-eval #{x 24666}#)
                                                #{x 24666}#))
                                            (lambda ()
                                              (#{chi-expr 4376}#
                                                #{type 22410}#
                                                #{value 22411}#
                                                #{e 22412}#
                                                #{r 22101}#
                                                #{w 22413}#
                                                #{s 22414}#
                                                #{mod 22415}#)))
                                          #{exps 22107}#))))))))))
                  (lambda (#{exps 24675}#)
                    (#{scan 21953}#
                      (cdr #{body 22100}#)
                      #{r 22101}#
                      #{w 22102}#
                      #{s 22103}#
                      #{m 22104}#
                      #{esew 22105}#
                      #{mod 22106}#
                      #{exps 24675}#)))))))
         (call-with-values
           (lambda ()
             (#{scan 21953}#
               #{body 21946}#
               #{r 21947}#
               #{w 21948}#
               #{s 21949}#
               #{m 21950}#
               #{esew 21951}#
               #{mod 21952}#
               '()))
           (lambda (#{exps 21956}#)
             (if (null? #{exps 21956}#)
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 0)
                 #{s 21949}#)
               (#{build-sequence 4324}#
                 #{s 21949}#
                 (letrec*
                   ((#{lp 22000}#
                      (lambda (#{in 22096}# #{out 22097}#)
                        (if (null? #{in 22096}#)
                          #{out 22097}#
                          (let ((#{e 22098}# (car #{in 22096}#)))
                            (#{lp 22000}#
                              (cdr #{in 22096}#)
                              (cons (if (procedure? #{e 22098}#)
                                      (#{e 22098}#)
                                      #{e 22098}#)
                                    #{out 22097}#)))))))
                   (#{lp 22000}# #{exps 21956}# '())))))))))
   (#{chi-install-global 4372}#
     (lambda (#{name 24676}# #{e 24677}#)
       (let ((#{exp 24683}#
               (let ((#{args 24694}#
                       (list (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               #{name 24676}#)
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               'macro)
                             #{e 24677}#)))
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 12)
                   #f
                   'make-syntax-transformer
                   #{args 24694}#))))
         (begin
           (if (if (struct? #{exp 24683}#)
                 (eq? (struct-vtable #{exp 24683}#)
                      (vector-ref %expanded-vtables 14))
                 #f)
             (let ((#{meta 24721}# (struct-ref #{exp 24683}# 1)))
               (if (not (assq 'name #{meta 24721}#))
                 (let ((#{v 24728}#
                         (cons (cons 'name #{name 24676}#) #{meta 24721}#)))
                   (struct-set! #{exp 24683}# 1 #{v 24728}#)))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 9)
             #f
             #{name 24676}#
             #{exp 24683}#)))))
   (#{chi-when-list 4373}#
     (lambda (#{e 24739}# #{when-list 24740}# #{w 24741}#)
       (letrec*
         ((#{f 24742}#
            (lambda (#{when-list 24944}# #{situations 24945}#)
              (if (null? #{when-list 24944}#)
                #{situations 24945}#
                (#{f 24742}#
                  (cdr #{when-list 24944}#)
                  (cons (let ((#{x 24946}#
                                (syntax->datum (car #{when-list 24944}#))))
                          (if (if (eq? #{x 24946}# 'compile)
                                #t
                                (if (eq? #{x 24946}# 'load)
                                  #t
                                  (if (eq? #{x 24946}# 'eval)
                                    #t
                                    (eq? #{x 24946}# 'expand))))
                            #{x 24946}#
                            (syntax-violation
                              'eval-when
                              "invalid situation"
                              #{e 24739}#
                              (let ((#{x 24965}# (car #{when-list 24944}#)))
                                (if (if (null? (car #{w 24741}#))
                                      (null? (cdr #{w 24741}#))
                                      #f)
                                  #{x 24965}#
                                  (if (if (vector? #{x 24965}#)
                                        (if (= (vector-length #{x 24965}#) 4)
                                          (eq? (vector-ref #{x 24965}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (let ((#{expression 24983}#
                                            (vector-ref #{x 24965}# 1))
                                          (#{wrap 24984}#
                                            (let ((#{w2 24992}#
                                                    (vector-ref
                                                      #{x 24965}#
                                                      2)))
                                              (let ((#{m1 24993}#
                                                      (car #{w 24741}#))
                                                    (#{s1 24994}#
                                                      (cdr #{w 24741}#)))
                                                (if (null? #{m1 24993}#)
                                                  (if (null? #{s1 24994}#)
                                                    #{w2 24992}#
                                                    (cons (car #{w2 24992}#)
                                                          (let ((#{m2 25009}#
                                                                  (cdr #{w2 24992}#)))
                                                            (if (null? #{m2 25009}#)
                                                              #{s1 24994}#
                                                              (append
                                                                #{s1 24994}#
                                                                #{m2 25009}#)))))
                                                  (cons (let ((#{m2 25017}#
                                                                (car #{w2 24992}#)))
                                                          (if (null? #{m2 25017}#)
                                                            #{m1 24993}#
                                                            (append
                                                              #{m1 24993}#
                                                              #{m2 25017}#)))
                                                        (let ((#{m2 25025}#
                                                                (cdr #{w2 24992}#)))
                                                          (if (null? #{m2 25025}#)
                                                            #{s1 24994}#
                                                            (append
                                                              #{s1 24994}#
                                                              #{m2 25025}#))))))))
                                          (#{module 24985}#
                                            (vector-ref #{x 24965}# 3)))
                                      (vector
                                        'syntax-object
                                        #{expression 24983}#
                                        #{wrap 24984}#
                                        #{module 24985}#))
                                    (if (null? #{x 24965}#)
                                      #{x 24965}#
                                      (vector
                                        'syntax-object
                                        #{x 24965}#
                                        #{w 24741}#
                                        #f))))))))
                        #{situations 24945}#))))))
         (#{f 24742}# #{when-list 24740}# '()))))
   (#{syntax-type 4374}#
     (lambda (#{e 25040}#
              #{r 25041}#
              #{w 25042}#
              #{s 25043}#
              #{rib 25044}#
              #{mod 25045}#
              #{for-car? 25046}#)
       (if (symbol? #{e 25040}#)
         (let ((#{n 25047}#
                 (#{id-var-name 4362}# #{e 25040}# #{w 25042}#)))
           (let ((#{b 25048}#
                   (let ((#{t 25623}# (assq #{n 25047}# #{r 25041}#)))
                     (if #{t 25623}#
                       (cdr #{t 25623}#)
                       (if (symbol? #{n 25047}#)
                         (let ((#{t 25628}#
                                 (begin
                                   (if (if (not #{mod 25045}#)
                                         (current-module)
                                         #f)
                                     (warn "module system is booted, we should have a module"
                                           #{n 25047}#))
                                   (let ((#{v 25665}#
                                           (module-variable
                                             (if #{mod 25045}#
                                               (resolve-module
                                                 (cdr #{mod 25045}#))
                                               (current-module))
                                             #{n 25047}#)))
                                     (if #{v 25665}#
                                       (if (variable-bound? #{v 25665}#)
                                         (let ((#{val 25674}#
                                                 (variable-ref #{v 25665}#)))
                                           (if (macro? #{val 25674}#)
                                             (if (macro-type #{val 25674}#)
                                               (cons (macro-type #{val 25674}#)
                                                     (macro-binding
                                                       #{val 25674}#))
                                               #f)
                                             #f))
                                         #f)
                                       #f)))))
                           (if #{t 25628}# #{t 25628}# '(global)))
                         '(displaced-lexical))))))
             (let ((#{type 25049}# (car #{b 25048}#)))
               (if (let ((#{t 25083}# #{type 25049}#))
                     (eqv? #{t 25083}# 'lexical))
                 (values
                   #{type 25049}#
                   (cdr #{b 25048}#)
                   #{e 25040}#
                   #{w 25042}#
                   #{s 25043}#
                   #{mod 25045}#)
                 (if (let ((#{t 25240}# #{type 25049}#))
                       (eqv? #{t 25240}# 'global))
                   (values
                     #{type 25049}#
                     #{n 25047}#
                     #{e 25040}#
                     #{w 25042}#
                     #{s 25043}#
                     #{mod 25045}#)
                   (if (let ((#{t 25366}# #{type 25049}#))
                         (eqv? #{t 25366}# 'macro))
                     (if #{for-car? 25046}#
                       (values
                         #{type 25049}#
                         (cdr #{b 25048}#)
                         #{e 25040}#
                         #{w 25042}#
                         #{s 25043}#
                         #{mod 25045}#)
                       (#{syntax-type 4374}#
                         (#{chi-macro 4378}#
                           (cdr #{b 25048}#)
                           #{e 25040}#
                           #{r 25041}#
                           #{w 25042}#
                           #{s 25043}#
                           #{rib 25044}#
                           #{mod 25045}#)
                         #{r 25041}#
                         '(())
                         #{s 25043}#
                         #{rib 25044}#
                         #{mod 25045}#
                         #f))
                     (values
                       #{type 25049}#
                       (cdr #{b 25048}#)
                       #{e 25040}#
                       #{w 25042}#
                       #{s 25043}#
                       #{mod 25045}#)))))))
         (if (pair? #{e 25040}#)
           (let ((#{first 25685}# (car #{e 25040}#)))
             (call-with-values
               (lambda ()
                 (#{syntax-type 4374}#
                   #{first 25685}#
                   #{r 25041}#
                   #{w 25042}#
                   #{s 25043}#
                   #{rib 25044}#
                   #{mod 25045}#
                   #t))
               (lambda (#{ftype 25687}#
                        #{fval 25688}#
                        #{fe 25689}#
                        #{fw 25690}#
                        #{fs 25691}#
                        #{fmod 25692}#)
                 (if (eqv? #{ftype 25687}# 'lexical)
                   (values
                     'lexical-call
                     #{fval 25688}#
                     #{e 25040}#
                     #{w 25042}#
                     #{s 25043}#
                     #{mod 25045}#)
                   (if (eqv? #{ftype 25687}# 'global)
                     (values
                       'global-call
                       (vector
                         'syntax-object
                         #{fval 25688}#
                         #{w 25042}#
                         #{fmod 25692}#)
                       #{e 25040}#
                       #{w 25042}#
                       #{s 25043}#
                       #{mod 25045}#)
                     (if (eqv? #{ftype 25687}# 'macro)
                       (#{syntax-type 4374}#
                         (#{chi-macro 4378}#
                           #{fval 25688}#
                           #{e 25040}#
                           #{r 25041}#
                           #{w 25042}#
                           #{s 25043}#
                           #{rib 25044}#
                           #{mod 25045}#)
                         #{r 25041}#
                         '(())
                         #{s 25043}#
                         #{rib 25044}#
                         #{mod 25045}#
                         #{for-car? 25046}#)
                       (if (eqv? #{ftype 25687}# 'module-ref)
                         (call-with-values
                           (lambda ()
                             (#{fval 25688}#
                               #{e 25040}#
                               #{r 25041}#
                               #{w 25042}#))
                           (lambda (#{e 25713}#
                                    #{r 25714}#
                                    #{w 25715}#
                                    #{s 25716}#
                                    #{mod 25717}#)
                             (#{syntax-type 4374}#
                               #{e 25713}#
                               #{r 25714}#
                               #{w 25715}#
                               #{s 25716}#
                               #{rib 25044}#
                               #{mod 25717}#
                               #{for-car? 25046}#)))
                         (if (eqv? #{ftype 25687}# 'core)
                           (values
                             'core-form
                             #{fval 25688}#
                             #{e 25040}#
                             #{w 25042}#
                             #{s 25043}#
                             #{mod 25045}#)
                           (if (eqv? #{ftype 25687}# 'local-syntax)
                             (values
                               'local-syntax-form
                               #{fval 25688}#
                               #{e 25040}#
                               #{w 25042}#
                               #{s 25043}#
                               #{mod 25045}#)
                             (if (eqv? #{ftype 25687}# 'begin)
                               (values
                                 'begin-form
                                 #f
                                 #{e 25040}#
                                 #{w 25042}#
                                 #{s 25043}#
                                 #{mod 25045}#)
                               (if (eqv? #{ftype 25687}# 'eval-when)
                                 (values
                                   'eval-when-form
                                   #f
                                   #{e 25040}#
                                   #{w 25042}#
                                   #{s 25043}#
                                   #{mod 25045}#)
                                 (if (eqv? #{ftype 25687}# 'define)
                                   (let ((#{tmp 25734}#
                                           ($sc-dispatch
                                             #{e 25040}#
                                             '(_ any any))))
                                     (if (if #{tmp 25734}#
                                           (@apply
                                             (lambda (#{name 25738}#
                                                      #{val 25739}#)
                                               (if (symbol? #{name 25738}#)
                                                 #t
                                                 (if (if (vector?
                                                           #{name 25738}#)
                                                       (if (= (vector-length
                                                                #{name 25738}#)
                                                              4)
                                                         (eq? (vector-ref
                                                                #{name 25738}#
                                                                0)
                                                              'syntax-object)
                                                         #f)
                                                       #f)
                                                   (symbol?
                                                     (vector-ref
                                                       #{name 25738}#
                                                       1))
                                                   #f)))
                                             #{tmp 25734}#)
                                           #f)
                                       (@apply
                                         (lambda (#{name 25766}# #{val 25767}#)
                                           (values
                                             'define-form
                                             #{name 25766}#
                                             #{val 25767}#
                                             #{w 25042}#
                                             #{s 25043}#
                                             #{mod 25045}#))
                                         #{tmp 25734}#)
                                       (let ((#{tmp 25768}#
                                               ($sc-dispatch
                                                 #{e 25040}#
                                                 '(_ (any . any)
                                                     any
                                                     .
                                                     each-any))))
                                         (if (if #{tmp 25768}#
                                               (@apply
                                                 (lambda (#{name 25772}#
                                                          #{args 25773}#
                                                          #{e1 25774}#
                                                          #{e2 25775}#)
                                                   (if (if (symbol?
                                                             #{name 25772}#)
                                                         #t
                                                         (if (if (vector?
                                                                   #{name 25772}#)
                                                               (if (= (vector-length
                                                                        #{name 25772}#)
                                                                      4)
                                                                 (eq? (vector-ref
                                                                        #{name 25772}#
                                                                        0)
                                                                      'syntax-object)
                                                                 #f)
                                                               #f)
                                                           (symbol?
                                                             (vector-ref
                                                               #{name 25772}#
                                                               1))
                                                           #f))
                                                     (#{valid-bound-ids? 4365}#
                                                       (#{lambda-var-list 4390}#
                                                         #{args 25773}#))
                                                     #f))
                                                 #{tmp 25768}#)
                                               #f)
                                           (@apply
                                             (lambda (#{name 26256}#
                                                      #{args 26257}#
                                                      #{e1 26258}#
                                                      #{e2 26259}#)
                                               (values
                                                 'define-form
                                                 (if (if (null? (car #{w 25042}#))
                                                       (null? (cdr #{w 25042}#))
                                                       #f)
                                                   #{name 26256}#
                                                   (if (if (vector?
                                                             #{name 26256}#)
                                                         (if (= (vector-length
                                                                  #{name 26256}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{name 26256}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (let ((#{expression 26289}#
                                                             (vector-ref
                                                               #{name 26256}#
                                                               1))
                                                           (#{wrap 26290}#
                                                             (let ((#{w2 26300}#
                                                                     (vector-ref
                                                                       #{name 26256}#
                                                                       2)))
                                                               (let ((#{m1 26301}#
                                                                       (car #{w 25042}#))
                                                                     (#{s1 26302}#
                                                                       (cdr #{w 25042}#)))
                                                                 (if (null? #{m1 26301}#)
                                                                   (if (null? #{s1 26302}#)
                                                                     #{w2 26300}#
                                                                     (cons (car #{w2 26300}#)
                                                                           (let ((#{m2 26319}#
                                                                                   (cdr #{w2 26300}#)))
                                                                             (if (null? #{m2 26319}#)
                                                                               #{s1 26302}#
                                                                               (append
                                                                                 #{s1 26302}#
                                                                                 #{m2 26319}#)))))
                                                                   (cons (let ((#{m2 26327}#
                                                                                 (car #{w2 26300}#)))
                                                                           (if (null? #{m2 26327}#)
                                                                             #{m1 26301}#
                                                                             (append
                                                                               #{m1 26301}#
                                                                               #{m2 26327}#)))
                                                                         (let ((#{m2 26335}#
                                                                                 (cdr #{w2 26300}#)))
                                                                           (if (null? #{m2 26335}#)
                                                                             #{s1 26302}#
                                                                             (append
                                                                               #{s1 26302}#
                                                                               #{m2 26335}#))))))))
                                                           (#{module 26291}#
                                                             (vector-ref
                                                               #{name 26256}#
                                                               3)))
                                                       (vector
                                                         'syntax-object
                                                         #{expression 26289}#
                                                         #{wrap 26290}#
                                                         #{module 26291}#))
                                                     (if (null? #{name 26256}#)
                                                       #{name 26256}#
                                                       (vector
                                                         'syntax-object
                                                         #{name 26256}#
                                                         #{w 25042}#
                                                         #{mod 25045}#))))
                                                 (let ((#{e 26361}#
                                                         (cons '#(syntax-object
                                                                  lambda
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(name
                                                                       args
                                                                       e1
                                                                       e2)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i1888"
                                                                       "i1889"
                                                                       "i1890"
                                                                       "i1891"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(ftype
                                                                       fval
                                                                       fe
                                                                       fw
                                                                       fs
                                                                       fmod)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i1841"
                                                                       "i1842"
                                                                       "i1843"
                                                                       "i1844"
                                                                       "i1845"
                                                                       "i1846"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(first)
                                                                     #((top))
                                                                     #("i1833"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(e
                                                                       r
                                                                       w
                                                                       s
                                                                       rib
                                                                       mod
                                                                       for-car?)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i1805"
                                                                       "i1806"
                                                                       "i1807"
                                                                       "i1808"
                                                                       "i1809"
                                                                       "i1810"
                                                                       "i1811"))
                                                                   #(ribcage
                                                                     (lambda-var-list
                                                                       gen-var
                                                                       strip
                                                                       chi-lambda-case
                                                                       lambda*-formals
                                                                       chi-simple-lambda
                                                                       lambda-formals
                                                                       ellipsis?
                                                                       chi-void
                                                                       eval-local-transformer
                                                                       chi-local-syntax
                                                                       chi-body
                                                                       chi-macro
                                                                       chi-call
                                                                       chi-expr
                                                                       chi
                                                                       syntax-type
                                                                       chi-when-list
                                                                       chi-install-global
                                                                       chi-top-sequence
                                                                       chi-sequence
                                                                       source-wrap
                                                                       wrap
                                                                       bound-id-member?
                                                                       distinct-bound-ids?
                                                                       valid-bound-ids?
                                                                       bound-id=?
                                                                       free-id=?
                                                                       id-var-name
                                                                       same-marks?
                                                                       join-marks
                                                                       join-wraps
                                                                       smart-append
                                                                       make-binding-wrap
                                                                       extend-ribcage!
                                                                       make-empty-ribcage
                                                                       new-mark
                                                                       anti-mark
                                                                       the-anti-mark
                                                                       top-marked?
                                                                       top-wrap
                                                                       empty-wrap
                                                                       set-ribcage-labels!
                                                                       set-ribcage-marks!
                                                                       set-ribcage-symnames!
                                                                       ribcage-labels
                                                                       ribcage-marks
                                                                       ribcage-symnames
                                                                       ribcage?
                                                                       make-ribcage
                                                                       gen-labels
                                                                       gen-label
                                                                       make-rename
                                                                       rename-marks
                                                                       rename-new
                                                                       rename-old
                                                                       subst-rename?
                                                                       wrap-subst
                                                                       wrap-marks
                                                                       make-wrap
                                                                       id-sym-name&marks
                                                                       id-sym-name
                                                                       id?
                                                                       nonsymbol-id?
                                                                       global-extend
                                                                       lookup
                                                                       macros-only-env
                                                                       extend-var-env
                                                                       extend-env
                                                                       null-env
                                                                       binding-value
                                                                       binding-type
                                                                       make-binding
                                                                       arg-check
                                                                       source-annotation
                                                                       no-source
                                                                       set-syntax-object-module!
                                                                       set-syntax-object-wrap!
                                                                       set-syntax-object-expression!
                                                                       syntax-object-module
                                                                       syntax-object-wrap
                                                                       syntax-object-expression
                                                                       syntax-object?
                                                                       make-syntax-object
                                                                       build-lexical-var
                                                                       build-letrec
                                                                       build-named-let
                                                                       build-let
                                                                       build-sequence
                                                                       build-data
                                                                       build-primref
                                                                       build-primcall
                                                                       build-lambda-case
                                                                       build-case-lambda
                                                                       build-simple-lambda
                                                                       build-global-definition
                                                                       build-global-assignment
                                                                       build-global-reference
                                                                       analyze-variable
                                                                       build-lexical-assignment
                                                                       build-lexical-reference
                                                                       build-dynlet
                                                                       build-conditional
                                                                       build-call
                                                                       build-void
                                                                       maybe-name-value!
                                                                       decorate-source
                                                                       get-global-definition-hook
                                                                       put-global-definition-hook
                                                                       gensym-hook
                                                                       local-eval-hook
                                                                       top-level-eval-hook
                                                                       fx<
                                                                       fx=
                                                                       fx-
                                                                       fx+
                                                                       set-lambda-meta!
                                                                       lambda-meta
                                                                       lambda?
                                                                       make-dynlet
                                                                       make-letrec
                                                                       make-let
                                                                       make-lambda-case
                                                                       make-lambda
                                                                       make-seq
                                                                       make-primcall
                                                                       make-call
                                                                       make-conditional
                                                                       make-toplevel-define
                                                                       make-toplevel-set
                                                                       make-toplevel-ref
                                                                       make-module-set
                                                                       make-module-ref
                                                                       make-lexical-set
                                                                       make-lexical-ref
                                                                       make-primitive-ref
                                                                       make-const
                                                                       make-void)
                                                                     ((top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top))
                                                                     ("i471"
                                                                      "i469"
                                                                      "i467"
                                                                      "i465"
                                                                      "i463"
                                                                      "i461"
                                                                      "i459"
                                                                      "i457"
                                                                      "i455"
                                                                      "i453"
                                                                      "i451"
                                                                      "i449"
                                                                      "i447"
                                                                      "i445"
                                                                      "i443"
                                                                      "i441"
                                                                      "i439"
                                                                      "i437"
                                                                      "i435"
                                                                      "i433"
                                                                      "i431"
                                                                      "i429"
                                                                      "i427"
                                                                      "i425"
                                                                      "i423"
                                                                      "i421"
                                                                      "i419"
                                                                      "i417"
                                                                      "i415"
                                                                      "i413"
                                                                      "i411"
                                                                      "i409"
                                                                      "i407"
                                                                      "i405"
                                                                      "i403"
                                                                      "i402"
                                                                      "i400"
                                                                      "i397"
                                                                      "i396"
                                                                      "i395"
                                                                      "i393"
                                                                      "i392"
                                                                      "i390"
                                                                      "i388"
                                                                      "i386"
                                                                      "i384"
                                                                      "i382"
                                                                      "i380"
                                                                      "i378"
                                                                      "i376"
                                                                      "i373"
                                                                      "i371"
                                                                      "i370"
                                                                      "i368"
                                                                      "i366"
                                                                      "i364"
                                                                      "i362"
                                                                      "i361"
                                                                      "i360"
                                                                      "i359"
                                                                      "i357"
                                                                      "i356"
                                                                      "i353"
                                                                      "i351"
                                                                      "i349"
                                                                      "i347"
                                                                      "i345"
                                                                      "i343"
                                                                      "i341"
                                                                      "i340"
                                                                      "i339"
                                                                      "i337"
                                                                      "i335"
                                                                      "i334"
                                                                      "i331"
                                                                      "i330"
                                                                      "i328"
                                                                      "i326"
                                                                      "i324"
                                                                      "i322"
                                                                      "i320"
                                                                      "i318"
                                                                      "i316"
                                                                      "i314"
                                                                      "i312"
                                                                      "i309"
                                                                      "i307"
                                                                      "i305"
                                                                      "i303"
                                                                      "i301"
                                                                      "i299"
                                                                      "i297"
                                                                      "i295"
                                                                      "i293"
                                                                      "i291"
                                                                      "i289"
                                                                      "i287"
                                                                      "i285"
                                                                      "i283"
                                                                      "i281"
                                                                      "i279"
                                                                      "i277"
                                                                      "i275"
                                                                      "i273"
                                                                      "i271"
                                                                      "i269"
                                                                      "i267"
                                                                      "i265"
                                                                      "i263"
                                                                      "i262"
                                                                      "i259"
                                                                      "i257"
                                                                      "i256"
                                                                      "i255"
                                                                      "i254"
                                                                      "i253"
                                                                      "i251"
                                                                      "i249"
                                                                      "i247"
                                                                      "i244"
                                                                      "i242"
                                                                      "i240"
                                                                      "i238"
                                                                      "i236"
                                                                      "i234"
                                                                      "i232"
                                                                      "i230"
                                                                      "i228"
                                                                      "i226"
                                                                      "i224"
                                                                      "i222"
                                                                      "i220"
                                                                      "i218"
                                                                      "i216"
                                                                      "i214"
                                                                      "i212"
                                                                      "i210"
                                                                      "i208"))
                                                                   #(ribcage
                                                                     (define-structure
                                                                       define-expansion-accessors
                                                                       define-expansion-constructors)
                                                                     ((top)
                                                                      (top)
                                                                      (top))
                                                                     ("i46"
                                                                      "i45"
                                                                      "i44")))
                                                                  (hygiene
                                                                    guile))
                                                               (let ((#{x 26365}#
                                                                       (cons #{args 26257}#
                                                                             (cons #{e1 26258}#
                                                                                   #{e2 26259}#))))
                                                                 (if (if (null? (car #{w 25042}#))
                                                                       (null? (cdr #{w 25042}#))
                                                                       #f)
                                                                   #{x 26365}#
                                                                   (if (if (vector?
                                                                             #{x 26365}#)
                                                                         (if (= (vector-length
                                                                                  #{x 26365}#)
                                                                                4)
                                                                           (eq? (vector-ref
                                                                                  #{x 26365}#
                                                                                  0)
                                                                                'syntax-object)
                                                                           #f)
                                                                         #f)
                                                                     (let ((#{expression 26383}#
                                                                             (vector-ref
                                                                               #{x 26365}#
                                                                               1))
                                                                           (#{wrap 26384}#
                                                                             (let ((#{w2 26392}#
                                                                                     (vector-ref
                                                                                       #{x 26365}#
                                                                                       2)))
                                                                               (let ((#{m1 26393}#
                                                                                       (car #{w 25042}#))
                                                                                     (#{s1 26394}#
                                                                                       (cdr #{w 25042}#)))
                                                                                 (if (null? #{m1 26393}#)
                                                                                   (if (null? #{s1 26394}#)
                                                                                     #{w2 26392}#
                                                                                     (cons (car #{w2 26392}#)
                                                                                           (let ((#{m2 26409}#
                                                                                                   (cdr #{w2 26392}#)))
                                                                                             (if (null? #{m2 26409}#)
                                                                                               #{s1 26394}#
                                                                                               (append
                                                                                                 #{s1 26394}#
                                                                                                 #{m2 26409}#)))))
                                                                                   (cons (let ((#{m2 26417}#
                                                                                                 (car #{w2 26392}#)))
                                                                                           (if (null? #{m2 26417}#)
                                                                                             #{m1 26393}#
                                                                                             (append
                                                                                               #{m1 26393}#
                                                                                               #{m2 26417}#)))
                                                                                         (let ((#{m2 26425}#
                                                                                                 (cdr #{w2 26392}#)))
                                                                                           (if (null? #{m2 26425}#)
                                                                                             #{s1 26394}#
                                                                                             (append
                                                                                               #{s1 26394}#
                                                                                               #{m2 26425}#))))))))
                                                                           (#{module 26385}#
                                                                             (vector-ref
                                                                               #{x 26365}#
                                                                               3)))
                                                                       (vector
                                                                         'syntax-object
                                                                         #{expression 26383}#
                                                                         #{wrap 26384}#
                                                                         #{module 26385}#))
                                                                     (if (null? #{x 26365}#)
                                                                       #{x 26365}#
                                                                       (vector
                                                                         'syntax-object
                                                                         #{x 26365}#
                                                                         #{w 25042}#
                                                                         #{mod 25045}#))))))))
                                                   (begin
                                                     (if (if (pair? #{e 26361}#)
                                                           #{s 25043}#
                                                           #f)
                                                       (set-source-properties!
                                                         #{e 26361}#
                                                         #{s 25043}#))
                                                     #{e 26361}#))
                                                 '(())
                                                 #{s 25043}#
                                                 #{mod 25045}#))
                                             #{tmp 25768}#)
                                           (let ((#{tmp 26444}#
                                                   ($sc-dispatch
                                                     #{e 25040}#
                                                     '(_ any))))
                                             (if (if #{tmp 26444}#
                                                   (@apply
                                                     (lambda (#{name 26448}#)
                                                       (if (symbol?
                                                             #{name 26448}#)
                                                         #t
                                                         (if (if (vector?
                                                                   #{name 26448}#)
                                                               (if (= (vector-length
                                                                        #{name 26448}#)
                                                                      4)
                                                                 (eq? (vector-ref
                                                                        #{name 26448}#
                                                                        0)
                                                                      'syntax-object)
                                                                 #f)
                                                               #f)
                                                           (symbol?
                                                             (vector-ref
                                                               #{name 26448}#
                                                               1))
                                                           #f)))
                                                     #{tmp 26444}#)
                                                   #f)
                                               (@apply
                                                 (lambda (#{name 26475}#)
                                                   (values
                                                     'define-form
                                                     (if (if (null? (car #{w 25042}#))
                                                           (null? (cdr #{w 25042}#))
                                                           #f)
                                                       #{name 26475}#
                                                       (if (if (vector?
                                                                 #{name 26475}#)
                                                             (if (= (vector-length
                                                                      #{name 26475}#)
                                                                    4)
                                                               (eq? (vector-ref
                                                                      #{name 26475}#
                                                                      0)
                                                                    'syntax-object)
                                                               #f)
                                                             #f)
                                                         (let ((#{expression 26505}#
                                                                 (vector-ref
                                                                   #{name 26475}#
                                                                   1))
                                                               (#{wrap 26506}#
                                                                 (let ((#{w2 26516}#
                                                                         (vector-ref
                                                                           #{name 26475}#
                                                                           2)))
                                                                   (let ((#{m1 26517}#
                                                                           (car #{w 25042}#))
                                                                         (#{s1 26518}#
                                                                           (cdr #{w 25042}#)))
                                                                     (if (null? #{m1 26517}#)
                                                                       (if (null? #{s1 26518}#)
                                                                         #{w2 26516}#
                                                                         (cons (car #{w2 26516}#)
                                                                               (let ((#{m2 26535}#
                                                                                       (cdr #{w2 26516}#)))
                                                                                 (if (null? #{m2 26535}#)
                                                                                   #{s1 26518}#
                                                                                   (append
                                                                                     #{s1 26518}#
                                                                                     #{m2 26535}#)))))
                                                                       (cons (let ((#{m2 26543}#
                                                                                     (car #{w2 26516}#)))
                                                                               (if (null? #{m2 26543}#)
                                                                                 #{m1 26517}#
                                                                                 (append
                                                                                   #{m1 26517}#
                                                                                   #{m2 26543}#)))
                                                                             (let ((#{m2 26551}#
                                                                                     (cdr #{w2 26516}#)))
                                                                               (if (null? #{m2 26551}#)
                                                                                 #{s1 26518}#
                                                                                 (append
                                                                                   #{s1 26518}#
                                                                                   #{m2 26551}#))))))))
                                                               (#{module 26507}#
                                                                 (vector-ref
                                                                   #{name 26475}#
                                                                   3)))
                                                           (vector
                                                             'syntax-object
                                                             #{expression 26505}#
                                                             #{wrap 26506}#
                                                             #{module 26507}#))
                                                         (if (null? #{name 26475}#)
                                                           #{name 26475}#
                                                           (vector
                                                             'syntax-object
                                                             #{name 26475}#
                                                             #{w 25042}#
                                                             #{mod 25045}#))))
                                                     '(#(syntax-object
                                                         if
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i1901"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1841"
                                                              "i1842"
                                                              "i1843"
                                                              "i1844"
                                                              "i1845"
                                                              "i1846"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i1833"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1805"
                                                              "i1806"
                                                              "i1807"
                                                              "i1808"
                                                              "i1809"
                                                              "i1810"
                                                              "i1811"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              chi-lambda-case
                                                              lambda*-formals
                                                              chi-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              chi-void
                                                              eval-local-transformer
                                                              chi-local-syntax
                                                              chi-body
                                                              chi-macro
                                                              chi-call
                                                              chi-expr
                                                              chi
                                                              syntax-type
                                                              chi-when-list
                                                              chi-install-global
                                                              chi-top-sequence
                                                              chi-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-primcall
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-call
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-seq
                                                              make-primcall
                                                              make-call
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i471"
                                                             "i469"
                                                             "i467"
                                                             "i465"
                                                             "i463"
                                                             "i461"
                                                             "i459"
                                                             "i457"
                                                             "i455"
                                                             "i453"
                                                             "i451"
                                                             "i449"
                                                             "i447"
                                                             "i445"
                                                             "i443"
                                                             "i441"
                                                             "i439"
                                                             "i437"
                                                             "i435"
                                                             "i433"
                                                             "i431"
                                                             "i429"
                                                             "i427"
                                                             "i425"
                                                             "i423"
                                                             "i421"
                                                             "i419"
                                                             "i417"
                                                             "i415"
                                                             "i413"
                                                             "i411"
                                                             "i409"
                                                             "i407"
                                                             "i405"
                                                             "i403"
                                                             "i402"
                                                             "i400"
                                                             "i397"
                                                             "i396"
                                                             "i395"
                                                             "i393"
                                                             "i392"
                                                             "i390"
                                                             "i388"
                                                             "i386"
                                                             "i384"
                                                             "i382"
                                                             "i380"
                                                             "i378"
                                                             "i376"
                                                             "i373"
                                                             "i371"
                                                             "i370"
                                                             "i368"
                                                             "i366"
                                                             "i364"
                                                             "i362"
                                                             "i361"
                                                             "i360"
                                                             "i359"
                                                             "i357"
                                                             "i356"
                                                             "i353"
                                                             "i351"
                                                             "i349"
                                                             "i347"
                                                             "i345"
                                                             "i343"
                                                             "i341"
                                                             "i340"
                                                             "i339"
                                                             "i337"
                                                             "i335"
                                                             "i334"
                                                             "i331"
                                                             "i330"
                                                             "i328"
                                                             "i326"
                                                             "i324"
                                                             "i322"
                                                             "i320"
                                                             "i318"
                                                             "i316"
                                                             "i314"
                                                             "i312"
                                                             "i309"
                                                             "i307"
                                                             "i305"
                                                             "i303"
                                                             "i301"
                                                             "i299"
                                                             "i297"
                                                             "i295"
                                                             "i293"
                                                             "i291"
                                                             "i289"
                                                             "i287"
                                                             "i285"
                                                             "i283"
                                                             "i281"
                                                             "i279"
                                                             "i277"
                                                             "i275"
                                                             "i273"
                                                             "i271"
                                                             "i269"
                                                             "i267"
                                                             "i265"
                                                             "i263"
                                                             "i262"
                                                             "i259"
                                                             "i257"
                                                             "i256"
                                                             "i255"
                                                             "i254"
                                                             "i253"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i244"
                                                             "i242"
                                                             "i240"
                                                             "i238"
                                                             "i236"
                                                             "i234"
                                                             "i232"
                                                             "i230"
                                                             "i228"
                                                             "i226"
                                                             "i224"
                                                             "i222"
                                                             "i220"
                                                             "i218"
                                                             "i216"
                                                             "i214"
                                                             "i212"
                                                             "i210"
                                                             "i208"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i46"
                                                             "i45"
                                                             "i44")))
                                                         (hygiene guile))
                                                       #(syntax-object
                                                         #f
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i1901"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1841"
                                                              "i1842"
                                                              "i1843"
                                                              "i1844"
                                                              "i1845"
                                                              "i1846"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i1833"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1805"
                                                              "i1806"
                                                              "i1807"
                                                              "i1808"
                                                              "i1809"
                                                              "i1810"
                                                              "i1811"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              chi-lambda-case
                                                              lambda*-formals
                                                              chi-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              chi-void
                                                              eval-local-transformer
                                                              chi-local-syntax
                                                              chi-body
                                                              chi-macro
                                                              chi-call
                                                              chi-expr
                                                              chi
                                                              syntax-type
                                                              chi-when-list
                                                              chi-install-global
                                                              chi-top-sequence
                                                              chi-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-primcall
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-call
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-seq
                                                              make-primcall
                                                              make-call
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i471"
                                                             "i469"
                                                             "i467"
                                                             "i465"
                                                             "i463"
                                                             "i461"
                                                             "i459"
                                                             "i457"
                                                             "i455"
                                                             "i453"
                                                             "i451"
                                                             "i449"
                                                             "i447"
                                                             "i445"
                                                             "i443"
                                                             "i441"
                                                             "i439"
                                                             "i437"
                                                             "i435"
                                                             "i433"
                                                             "i431"
                                                             "i429"
                                                             "i427"
                                                             "i425"
                                                             "i423"
                                                             "i421"
                                                             "i419"
                                                             "i417"
                                                             "i415"
                                                             "i413"
                                                             "i411"
                                                             "i409"
                                                             "i407"
                                                             "i405"
                                                             "i403"
                                                             "i402"
                                                             "i400"
                                                             "i397"
                                                             "i396"
                                                             "i395"
                                                             "i393"
                                                             "i392"
                                                             "i390"
                                                             "i388"
                                                             "i386"
                                                             "i384"
                                                             "i382"
                                                             "i380"
                                                             "i378"
                                                             "i376"
                                                             "i373"
                                                             "i371"
                                                             "i370"
                                                             "i368"
                                                             "i366"
                                                             "i364"
                                                             "i362"
                                                             "i361"
                                                             "i360"
                                                             "i359"
                                                             "i357"
                                                             "i356"
                                                             "i353"
                                                             "i351"
                                                             "i349"
                                                             "i347"
                                                             "i345"
                                                             "i343"
                                                             "i341"
                                                             "i340"
                                                             "i339"
                                                             "i337"
                                                             "i335"
                                                             "i334"
                                                             "i331"
                                                             "i330"
                                                             "i328"
                                                             "i326"
                                                             "i324"
                                                             "i322"
                                                             "i320"
                                                             "i318"
                                                             "i316"
                                                             "i314"
                                                             "i312"
                                                             "i309"
                                                             "i307"
                                                             "i305"
                                                             "i303"
                                                             "i301"
                                                             "i299"
                                                             "i297"
                                                             "i295"
                                                             "i293"
                                                             "i291"
                                                             "i289"
                                                             "i287"
                                                             "i285"
                                                             "i283"
                                                             "i281"
                                                             "i279"
                                                             "i277"
                                                             "i275"
                                                             "i273"
                                                             "i271"
                                                             "i269"
                                                             "i267"
                                                             "i265"
                                                             "i263"
                                                             "i262"
                                                             "i259"
                                                             "i257"
                                                             "i256"
                                                             "i255"
                                                             "i254"
                                                             "i253"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i244"
                                                             "i242"
                                                             "i240"
                                                             "i238"
                                                             "i236"
                                                             "i234"
                                                             "i232"
                                                             "i230"
                                                             "i228"
                                                             "i226"
                                                             "i224"
                                                             "i222"
                                                             "i220"
                                                             "i218"
                                                             "i216"
                                                             "i214"
                                                             "i212"
                                                             "i210"
                                                             "i208"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i46"
                                                             "i45"
                                                             "i44")))
                                                         (hygiene guile))
                                                       #(syntax-object
                                                         #f
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i1901"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1841"
                                                              "i1842"
                                                              "i1843"
                                                              "i1844"
                                                              "i1845"
                                                              "i1846"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i1833"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1805"
                                                              "i1806"
                                                              "i1807"
                                                              "i1808"
                                                              "i1809"
                                                              "i1810"
                                                              "i1811"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              chi-lambda-case
                                                              lambda*-formals
                                                              chi-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              chi-void
                                                              eval-local-transformer
                                                              chi-local-syntax
                                                              chi-body
                                                              chi-macro
                                                              chi-call
                                                              chi-expr
                                                              chi
                                                              syntax-type
                                                              chi-when-list
                                                              chi-install-global
                                                              chi-top-sequence
                                                              chi-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-primcall
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-call
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-seq
                                                              make-primcall
                                                              make-call
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i471"
                                                             "i469"
                                                             "i467"
                                                             "i465"
                                                             "i463"
                                                             "i461"
                                                             "i459"
                                                             "i457"
                                                             "i455"
                                                             "i453"
                                                             "i451"
                                                             "i449"
                                                             "i447"
                                                             "i445"
                                                             "i443"
                                                             "i441"
                                                             "i439"
                                                             "i437"
                                                             "i435"
                                                             "i433"
                                                             "i431"
                                                             "i429"
                                                             "i427"
                                                             "i425"
                                                             "i423"
                                                             "i421"
                                                             "i419"
                                                             "i417"
                                                             "i415"
                                                             "i413"
                                                             "i411"
                                                             "i409"
                                                             "i407"
                                                             "i405"
                                                             "i403"
                                                             "i402"
                                                             "i400"
                                                             "i397"
                                                             "i396"
                                                             "i395"
                                                             "i393"
                                                             "i392"
                                                             "i390"
                                                             "i388"
                                                             "i386"
                                                             "i384"
                                                             "i382"
                                                             "i380"
                                                             "i378"
                                                             "i376"
                                                             "i373"
                                                             "i371"
                                                             "i370"
                                                             "i368"
                                                             "i366"
                                                             "i364"
                                                             "i362"
                                                             "i361"
                                                             "i360"
                                                             "i359"
                                                             "i357"
                                                             "i356"
                                                             "i353"
                                                             "i351"
                                                             "i349"
                                                             "i347"
                                                             "i345"
                                                             "i343"
                                                             "i341"
                                                             "i340"
                                                             "i339"
                                                             "i337"
                                                             "i335"
                                                             "i334"
                                                             "i331"
                                                             "i330"
                                                             "i328"
                                                             "i326"
                                                             "i324"
                                                             "i322"
                                                             "i320"
                                                             "i318"
                                                             "i316"
                                                             "i314"
                                                             "i312"
                                                             "i309"
                                                             "i307"
                                                             "i305"
                                                             "i303"
                                                             "i301"
                                                             "i299"
                                                             "i297"
                                                             "i295"
                                                             "i293"
                                                             "i291"
                                                             "i289"
                                                             "i287"
                                                             "i285"
                                                             "i283"
                                                             "i281"
                                                             "i279"
                                                             "i277"
                                                             "i275"
                                                             "i273"
                                                             "i271"
                                                             "i269"
                                                             "i267"
                                                             "i265"
                                                             "i263"
                                                             "i262"
                                                             "i259"
                                                             "i257"
                                                             "i256"
                                                             "i255"
                                                             "i254"
                                                             "i253"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i244"
                                                             "i242"
                                                             "i240"
                                                             "i238"
                                                             "i236"
                                                             "i234"
                                                             "i232"
                                                             "i230"
                                                             "i228"
                                                             "i226"
                                                             "i224"
                                                             "i222"
                                                             "i220"
                                                             "i218"
                                                             "i216"
                                                             "i214"
                                                             "i212"
                                                             "i210"
                                                             "i208"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i46"
                                                             "i45"
                                                             "i44")))
                                                         (hygiene guile)))
                                                     '(())
                                                     #{s 25043}#
                                                     #{mod 25045}#))
                                                 #{tmp 26444}#)
                                               (syntax-violation
                                                 #f
                                                 "source expression failed to match any pattern"
                                                 #{e 25040}#)))))))
                                   (if (eqv? #{ftype 25687}# 'define-syntax)
                                     (let ((#{tmp 26590}#
                                             ($sc-dispatch
                                               #{e 25040}#
                                               '(_ any any))))
                                       (if (if #{tmp 26590}#
                                             (@apply
                                               (lambda (#{name 26594}#
                                                        #{val 26595}#)
                                                 (if (symbol? #{name 26594}#)
                                                   #t
                                                   (if (if (vector?
                                                             #{name 26594}#)
                                                         (if (= (vector-length
                                                                  #{name 26594}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{name 26594}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (symbol?
                                                       (vector-ref
                                                         #{name 26594}#
                                                         1))
                                                     #f)))
                                               #{tmp 26590}#)
                                             #f)
                                         (@apply
                                           (lambda (#{name 26622}#
                                                    #{val 26623}#)
                                             (values
                                               'define-syntax-form
                                               #{name 26622}#
                                               #{val 26623}#
                                               #{w 25042}#
                                               #{s 25043}#
                                               #{mod 25045}#))
                                           #{tmp 26590}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{e 25040}#)))
                                     (values
                                       'call
                                       #f
                                       #{e 25040}#
                                       #{w 25042}#
                                       #{s 25043}#
                                       #{mod 25045}#))))))))))))))
           (if (if (vector? #{e 25040}#)
                 (if (= (vector-length #{e 25040}#) 4)
                   (eq? (vector-ref #{e 25040}# 0) 'syntax-object)
                   #f)
                 #f)
             (#{syntax-type 4374}#
               (vector-ref #{e 25040}# 1)
               #{r 25041}#
               (let ((#{w2 26648}# (vector-ref #{e 25040}# 2)))
                 (let ((#{m1 26649}# (car #{w 25042}#))
                       (#{s1 26650}# (cdr #{w 25042}#)))
                   (if (null? #{m1 26649}#)
                     (if (null? #{s1 26650}#)
                       #{w2 26648}#
                       (cons (car #{w2 26648}#)
                             (let ((#{m2 26661}# (cdr #{w2 26648}#)))
                               (if (null? #{m2 26661}#)
                                 #{s1 26650}#
                                 (append #{s1 26650}# #{m2 26661}#)))))
                     (cons (let ((#{m2 26669}# (car #{w2 26648}#)))
                             (if (null? #{m2 26669}#)
                               #{m1 26649}#
                               (append #{m1 26649}# #{m2 26669}#)))
                           (let ((#{m2 26677}# (cdr #{w2 26648}#)))
                             (if (null? #{m2 26677}#)
                               #{s1 26650}#
                               (append #{s1 26650}# #{m2 26677}#)))))))
               (let ((#{t 26682}#
                       (#{source-annotation 4336}# #{e 25040}#)))
                 (if #{t 26682}# #{t 26682}# #{s 25043}#))
               #{rib 25044}#
               (let ((#{t 26980}# (vector-ref #{e 25040}# 3)))
                 (if #{t 26980}# #{t 26980}# #{mod 25045}#))
               #{for-car? 25046}#)
             (if (self-evaluating? #{e 25040}#)
               (values
                 'constant
                 #f
                 #{e 25040}#
                 #{w 25042}#
                 #{s 25043}#
                 #{mod 25045}#)
               (values
                 'other
                 #f
                 #{e 25040}#
                 #{w 25042}#
                 #{s 25043}#
                 #{mod 25045}#)))))))
   (#{chi 4375}#
     (lambda (#{e 26989}#
              #{r 26990}#
              #{w 26991}#
              #{mod 26992}#)
       (call-with-values
         (lambda ()
           (#{syntax-type 4374}#
             #{e 26989}#
             #{r 26990}#
             #{w 26991}#
             (#{source-annotation 4336}# #{e 26989}#)
             #f
             #{mod 26992}#
             #f))
         (lambda (#{type 27196}#
                  #{value 27197}#
                  #{e 27198}#
                  #{w 27199}#
                  #{s 27200}#
                  #{mod 27201}#)
           (#{chi-expr 4376}#
             #{type 27196}#
             #{value 27197}#
             #{e 27198}#
             #{r 26990}#
             #{w 27199}#
             #{s 27200}#
             #{mod 27201}#)))))
   (#{chi-expr 4376}#
     (lambda (#{type 27204}#
              #{value 27205}#
              #{e 27206}#
              #{r 27207}#
              #{w 27208}#
              #{s 27209}#
              #{mod 27210}#)
       (if (eqv? #{type 27204}# 'lexical)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 3)
           #{s 27209}#
           #{e 27206}#
           #{value 27205}#)
         (if (if (eqv? #{type 27204}# 'core)
               #t
               (eqv? #{type 27204}# 'core-form))
           (#{value 27205}#
             #{e 27206}#
             #{r 27207}#
             #{w 27208}#
             #{s 27209}#
             #{mod 27210}#)
           (if (eqv? #{type 27204}# 'module-ref)
             (call-with-values
               (lambda ()
                 (#{value 27205}#
                   #{e 27206}#
                   #{r 27207}#
                   #{w 27208}#))
               (lambda (#{e 27236}#
                        #{r 27237}#
                        #{w 27238}#
                        #{s 27239}#
                        #{mod 27240}#)
                 (#{chi 4375}#
                   #{e 27236}#
                   #{r 27237}#
                   #{w 27238}#
                   #{mod 27240}#)))
             (if (eqv? #{type 27204}# 'lexical-call)
               (#{chi-call 4377}#
                 (let ((#{id 27421}# (car #{e 27206}#)))
                   (#{build-lexical-reference 4312}#
                     'fun
                     (#{source-annotation 4336}# #{id 27421}#)
                     (if (if (vector? #{id 27421}#)
                           (if (= (vector-length #{id 27421}#) 4)
                             (eq? (vector-ref #{id 27421}# 0) 'syntax-object)
                             #f)
                           #f)
                       (syntax->datum #{id 27421}#)
                       #{id 27421}#)
                     #{value 27205}#))
                 #{e 27206}#
                 #{r 27207}#
                 #{w 27208}#
                 #{s 27209}#
                 #{mod 27210}#)
               (if (eqv? #{type 27204}# 'global-call)
                 (#{chi-call 4377}#
                   (#{build-global-reference 4315}#
                     (#{source-annotation 4336}# (car #{e 27206}#))
                     (if (if (vector? #{value 27205}#)
                           (if (= (vector-length #{value 27205}#) 4)
                             (eq? (vector-ref #{value 27205}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{value 27205}# 1)
                       #{value 27205}#)
                     (if (if (vector? #{value 27205}#)
                           (if (= (vector-length #{value 27205}#) 4)
                             (eq? (vector-ref #{value 27205}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{value 27205}# 3)
                       #{mod 27210}#))
                   #{e 27206}#
                   #{r 27207}#
                   #{w 27208}#
                   #{s 27209}#
                   #{mod 27210}#)
                 (if (eqv? #{type 27204}# 'constant)
                   (let ((#{exp 28143}#
                           (#{strip 4388}#
                             (let ((#{x 28156}#
                                     (begin
                                       (if (if (pair? #{e 27206}#)
                                             #{s 27209}#
                                             #f)
                                         (set-source-properties!
                                           #{e 27206}#
                                           #{s 27209}#))
                                       #{e 27206}#)))
                               (if (if (null? (car #{w 27208}#))
                                     (null? (cdr #{w 27208}#))
                                     #f)
                                 #{x 28156}#
                                 (if (if (vector? #{x 28156}#)
                                       (if (= (vector-length #{x 28156}#) 4)
                                         (eq? (vector-ref #{x 28156}# 0)
                                              'syntax-object)
                                         #f)
                                       #f)
                                   (let ((#{expression 28188}#
                                           (vector-ref #{x 28156}# 1))
                                         (#{wrap 28189}#
                                           (let ((#{w2 28197}#
                                                   (vector-ref #{x 28156}# 2)))
                                             (let ((#{m1 28198}#
                                                     (car #{w 27208}#))
                                                   (#{s1 28199}#
                                                     (cdr #{w 27208}#)))
                                               (if (null? #{m1 28198}#)
                                                 (if (null? #{s1 28199}#)
                                                   #{w2 28197}#
                                                   (cons (car #{w2 28197}#)
                                                         (let ((#{m2 28214}#
                                                                 (cdr #{w2 28197}#)))
                                                           (if (null? #{m2 28214}#)
                                                             #{s1 28199}#
                                                             (append
                                                               #{s1 28199}#
                                                               #{m2 28214}#)))))
                                                 (cons (let ((#{m2 28222}#
                                                               (car #{w2 28197}#)))
                                                         (if (null? #{m2 28222}#)
                                                           #{m1 28198}#
                                                           (append
                                                             #{m1 28198}#
                                                             #{m2 28222}#)))
                                                       (let ((#{m2 28230}#
                                                               (cdr #{w2 28197}#)))
                                                         (if (null? #{m2 28230}#)
                                                           #{s1 28199}#
                                                           (append
                                                             #{s1 28199}#
                                                             #{m2 28230}#))))))))
                                         (#{module 28190}#
                                           (vector-ref #{x 28156}# 3)))
                                     (vector
                                       'syntax-object
                                       #{expression 28188}#
                                       #{wrap 28189}#
                                       #{module 28190}#))
                                   (if (null? #{x 28156}#)
                                     #{x 28156}#
                                     (vector
                                       'syntax-object
                                       #{x 28156}#
                                       #{w 27208}#
                                       #{mod 27210}#)))))
                             '(()))))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 1)
                       #{s 27209}#
                       #{exp 28143}#))
                   (if (eqv? #{type 27204}# 'global)
                     (#{analyze-variable 4314}#
                       #{mod 27210}#
                       #{value 27205}#
                       (lambda (#{mod 28255}# #{var 28256}# #{public? 28257}#)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #{s 27209}#
                           #{mod 28255}#
                           #{var 28256}#
                           #{public? 28257}#))
                       (lambda (#{var 28265}#)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #{s 27209}#
                           #{var 28265}#)))
                     (if (eqv? #{type 27204}# 'call)
                       (#{chi-call 4377}#
                         (#{chi 4375}#
                           (car #{e 27206}#)
                           #{r 27207}#
                           #{w 27208}#
                           #{mod 27210}#)
                         #{e 27206}#
                         #{r 27207}#
                         #{w 27208}#
                         #{s 27209}#
                         #{mod 27210}#)
                       (if (eqv? #{type 27204}# 'begin-form)
                         (let ((#{tmp 28443}#
                                 ($sc-dispatch
                                   #{e 27206}#
                                   '(_ any . each-any))))
                           (if #{tmp 28443}#
                             (@apply
                               (lambda (#{e1 28447}# #{e2 28448}#)
                                 (#{chi-sequence 4370}#
                                   (cons #{e1 28447}# #{e2 28448}#)
                                   #{r 27207}#
                                   #{w 27208}#
                                   #{s 27209}#
                                   #{mod 27210}#))
                               #{tmp 28443}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{e 27206}#)))
                         (if (eqv? #{type 27204}# 'local-syntax-form)
                           (#{chi-local-syntax 4380}#
                             #{value 27205}#
                             #{e 27206}#
                             #{r 27207}#
                             #{w 27208}#
                             #{s 27209}#
                             #{mod 27210}#
                             #{chi-sequence 4370}#)
                           (if (eqv? #{type 27204}# 'eval-when-form)
                             (let ((#{tmp 28628}#
                                     ($sc-dispatch
                                       #{e 27206}#
                                       '(_ each-any any . each-any))))
                               (if #{tmp 28628}#
                                 (@apply
                                   (lambda (#{x 28632}#
                                            #{e1 28633}#
                                            #{e2 28634}#)
                                     (let ((#{when-list 28635}#
                                             (#{chi-when-list 4373}#
                                               #{e 27206}#
                                               #{x 28632}#
                                               #{w 27208}#)))
                                       (if (memq 'eval #{when-list 28635}#)
                                         (#{chi-sequence 4370}#
                                           (cons #{e1 28633}# #{e2 28634}#)
                                           #{r 27207}#
                                           #{w 27208}#
                                           #{s 27209}#
                                           #{mod 27210}#)
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 0)
                                           #f))))
                                   #{tmp 28628}#)
                                 (syntax-violation
                                   #f
                                   "source expression failed to match any pattern"
                                   #{e 27206}#)))
                             (if (if (eqv? #{type 27204}# 'define-form)
                                   #t
                                   (eqv? #{type 27204}# 'define-syntax-form))
                               (syntax-violation
                                 #f
                                 "definition in expression context"
                                 #{e 27206}#
                                 (if (if (null? (car #{w 27208}#))
                                       (null? (cdr #{w 27208}#))
                                       #f)
                                   #{value 27205}#
                                   (if (if (vector? #{value 27205}#)
                                         (if (= (vector-length #{value 27205}#)
                                                4)
                                           (eq? (vector-ref #{value 27205}# 0)
                                                'syntax-object)
                                           #f)
                                         #f)
                                     (let ((#{expression 28786}#
                                             (vector-ref #{value 27205}# 1))
                                           (#{wrap 28787}#
                                             (let ((#{w2 28797}#
                                                     (vector-ref
                                                       #{value 27205}#
                                                       2)))
                                               (let ((#{m1 28798}#
                                                       (car #{w 27208}#))
                                                     (#{s1 28799}#
                                                       (cdr #{w 27208}#)))
                                                 (if (null? #{m1 28798}#)
                                                   (if (null? #{s1 28799}#)
                                                     #{w2 28797}#
                                                     (cons (car #{w2 28797}#)
                                                           (let ((#{m2 28816}#
                                                                   (cdr #{w2 28797}#)))
                                                             (if (null? #{m2 28816}#)
                                                               #{s1 28799}#
                                                               (append
                                                                 #{s1 28799}#
                                                                 #{m2 28816}#)))))
                                                   (cons (let ((#{m2 28824}#
                                                                 (car #{w2 28797}#)))
                                                           (if (null? #{m2 28824}#)
                                                             #{m1 28798}#
                                                             (append
                                                               #{m1 28798}#
                                                               #{m2 28824}#)))
                                                         (let ((#{m2 28832}#
                                                                 (cdr #{w2 28797}#)))
                                                           (if (null? #{m2 28832}#)
                                                             #{s1 28799}#
                                                             (append
                                                               #{s1 28799}#
                                                               #{m2 28832}#))))))))
                                           (#{module 28788}#
                                             (vector-ref #{value 27205}# 3)))
                                       (vector
                                         'syntax-object
                                         #{expression 28786}#
                                         #{wrap 28787}#
                                         #{module 28788}#))
                                     (if (null? #{value 27205}#)
                                       #{value 27205}#
                                       (vector
                                         'syntax-object
                                         #{value 27205}#
                                         #{w 27208}#
                                         #{mod 27210}#)))))
                               (if (eqv? #{type 27204}# 'syntax)
                                 (syntax-violation
                                   #f
                                   "reference to pattern variable outside syntax form"
                                   (let ((#{x 28867}#
                                           (begin
                                             (if (if (pair? #{e 27206}#)
                                                   #{s 27209}#
                                                   #f)
                                               (set-source-properties!
                                                 #{e 27206}#
                                                 #{s 27209}#))
                                             #{e 27206}#)))
                                     (if (if (null? (car #{w 27208}#))
                                           (null? (cdr #{w 27208}#))
                                           #f)
                                       #{x 28867}#
                                       (if (if (vector? #{x 28867}#)
                                             (if (= (vector-length #{x 28867}#)
                                                    4)
                                               (eq? (vector-ref #{x 28867}# 0)
                                                    'syntax-object)
                                               #f)
                                             #f)
                                         (let ((#{expression 28899}#
                                                 (vector-ref #{x 28867}# 1))
                                               (#{wrap 28900}#
                                                 (let ((#{w2 28908}#
                                                         (vector-ref
                                                           #{x 28867}#
                                                           2)))
                                                   (let ((#{m1 28909}#
                                                           (car #{w 27208}#))
                                                         (#{s1 28910}#
                                                           (cdr #{w 27208}#)))
                                                     (if (null? #{m1 28909}#)
                                                       (if (null? #{s1 28910}#)
                                                         #{w2 28908}#
                                                         (cons (car #{w2 28908}#)
                                                               (let ((#{m2 28925}#
                                                                       (cdr #{w2 28908}#)))
                                                                 (if (null? #{m2 28925}#)
                                                                   #{s1 28910}#
                                                                   (append
                                                                     #{s1 28910}#
                                                                     #{m2 28925}#)))))
                                                       (cons (let ((#{m2 28933}#
                                                                     (car #{w2 28908}#)))
                                                               (if (null? #{m2 28933}#)
                                                                 #{m1 28909}#
                                                                 (append
                                                                   #{m1 28909}#
                                                                   #{m2 28933}#)))
                                                             (let ((#{m2 28941}#
                                                                     (cdr #{w2 28908}#)))
                                                               (if (null? #{m2 28941}#)
                                                                 #{s1 28910}#
                                                                 (append
                                                                   #{s1 28910}#
                                                                   #{m2 28941}#))))))))
                                               (#{module 28901}#
                                                 (vector-ref #{x 28867}# 3)))
                                           (vector
                                             'syntax-object
                                             #{expression 28899}#
                                             #{wrap 28900}#
                                             #{module 28901}#))
                                         (if (null? #{x 28867}#)
                                           #{x 28867}#
                                           (vector
                                             'syntax-object
                                             #{x 28867}#
                                             #{w 27208}#
                                             #{mod 27210}#))))))
                                 (if (eqv? #{type 27204}# 'displaced-lexical)
                                   (syntax-violation
                                     #f
                                     "reference to identifier outside its scope"
                                     (let ((#{x 28968}#
                                             (begin
                                               (if (if (pair? #{e 27206}#)
                                                     #{s 27209}#
                                                     #f)
                                                 (set-source-properties!
                                                   #{e 27206}#
                                                   #{s 27209}#))
                                               #{e 27206}#)))
                                       (if (if (null? (car #{w 27208}#))
                                             (null? (cdr #{w 27208}#))
                                             #f)
                                         #{x 28968}#
                                         (if (if (vector? #{x 28968}#)
                                               (if (= (vector-length
                                                        #{x 28968}#)
                                                      4)
                                                 (eq? (vector-ref
                                                        #{x 28968}#
                                                        0)
                                                      'syntax-object)
                                                 #f)
                                               #f)
                                           (let ((#{expression 29000}#
                                                   (vector-ref #{x 28968}# 1))
                                                 (#{wrap 29001}#
                                                   (let ((#{w2 29009}#
                                                           (vector-ref
                                                             #{x 28968}#
                                                             2)))
                                                     (let ((#{m1 29010}#
                                                             (car #{w 27208}#))
                                                           (#{s1 29011}#
                                                             (cdr #{w 27208}#)))
                                                       (if (null? #{m1 29010}#)
                                                         (if (null? #{s1 29011}#)
                                                           #{w2 29009}#
                                                           (cons (car #{w2 29009}#)
                                                                 (let ((#{m2 29026}#
                                                                         (cdr #{w2 29009}#)))
                                                                   (if (null? #{m2 29026}#)
                                                                     #{s1 29011}#
                                                                     (append
                                                                       #{s1 29011}#
                                                                       #{m2 29026}#)))))
                                                         (cons (let ((#{m2 29034}#
                                                                       (car #{w2 29009}#)))
                                                                 (if (null? #{m2 29034}#)
                                                                   #{m1 29010}#
                                                                   (append
                                                                     #{m1 29010}#
                                                                     #{m2 29034}#)))
                                                               (let ((#{m2 29042}#
                                                                       (cdr #{w2 29009}#)))
                                                                 (if (null? #{m2 29042}#)
                                                                   #{s1 29011}#
                                                                   (append
                                                                     #{s1 29011}#
                                                                     #{m2 29042}#))))))))
                                                 (#{module 29002}#
                                                   (vector-ref #{x 28968}# 3)))
                                             (vector
                                               'syntax-object
                                               #{expression 29000}#
                                               #{wrap 29001}#
                                               #{module 29002}#))
                                           (if (null? #{x 28968}#)
                                             #{x 28968}#
                                             (vector
                                               'syntax-object
                                               #{x 28968}#
                                               #{w 27208}#
                                               #{mod 27210}#))))))
                                   (syntax-violation
                                     #f
                                     "unexpected syntax"
                                     (let ((#{x 29066}#
                                             (begin
                                               (if (if (pair? #{e 27206}#)
                                                     #{s 27209}#
                                                     #f)
                                                 (set-source-properties!
                                                   #{e 27206}#
                                                   #{s 27209}#))
                                               #{e 27206}#)))
                                       (if (if (null? (car #{w 27208}#))
                                             (null? (cdr #{w 27208}#))
                                             #f)
                                         #{x 29066}#
                                         (if (if (vector? #{x 29066}#)
                                               (if (= (vector-length
                                                        #{x 29066}#)
                                                      4)
                                                 (eq? (vector-ref
                                                        #{x 29066}#
                                                        0)
                                                      'syntax-object)
                                                 #f)
                                               #f)
                                           (let ((#{expression 29098}#
                                                   (vector-ref #{x 29066}# 1))
                                                 (#{wrap 29099}#
                                                   (let ((#{w2 29107}#
                                                           (vector-ref
                                                             #{x 29066}#
                                                             2)))
                                                     (let ((#{m1 29108}#
                                                             (car #{w 27208}#))
                                                           (#{s1 29109}#
                                                             (cdr #{w 27208}#)))
                                                       (if (null? #{m1 29108}#)
                                                         (if (null? #{s1 29109}#)
                                                           #{w2 29107}#
                                                           (cons (car #{w2 29107}#)
                                                                 (let ((#{m2 29124}#
                                                                         (cdr #{w2 29107}#)))
                                                                   (if (null? #{m2 29124}#)
                                                                     #{s1 29109}#
                                                                     (append
                                                                       #{s1 29109}#
                                                                       #{m2 29124}#)))))
                                                         (cons (let ((#{m2 29132}#
                                                                       (car #{w2 29107}#)))
                                                                 (if (null? #{m2 29132}#)
                                                                   #{m1 29108}#
                                                                   (append
                                                                     #{m1 29108}#
                                                                     #{m2 29132}#)))
                                                               (let ((#{m2 29140}#
                                                                       (cdr #{w2 29107}#)))
                                                                 (if (null? #{m2 29140}#)
                                                                   #{s1 29109}#
                                                                   (append
                                                                     #{s1 29109}#
                                                                     #{m2 29140}#))))))))
                                                 (#{module 29100}#
                                                   (vector-ref #{x 29066}# 3)))
                                             (vector
                                               'syntax-object
                                               #{expression 29098}#
                                               #{wrap 29099}#
                                               #{module 29100}#))
                                           (if (null? #{x 29066}#)
                                             #{x 29066}#
                                             (vector
                                               'syntax-object
                                               #{x 29066}#
                                               #{w 27208}#
                                               #{mod 27210}#))))))))))))))))))))))
   (#{chi-call 4377}#
     (lambda (#{x 29155}#
              #{e 29156}#
              #{r 29157}#
              #{w 29158}#
              #{s 29159}#
              #{mod 29160}#)
       (let ((#{tmp 29162}#
               ($sc-dispatch #{e 29156}# '(any . each-any))))
         (if #{tmp 29162}#
           (@apply
             (lambda (#{e0 29166}# #{e1 29167}#)
               (#{build-call 4309}#
                 #{s 29159}#
                 #{x 29155}#
                 (map (lambda (#{e 29259}#)
                        (#{chi 4375}#
                          #{e 29259}#
                          #{r 29157}#
                          #{w 29158}#
                          #{mod 29160}#))
                      #{e1 29167}#)))
             #{tmp 29162}#)
           (syntax-violation
             #f
             "source expression failed to match any pattern"
             #{e 29156}#)))))
   (#{chi-macro 4378}#
     (lambda (#{p 29347}#
              #{e 29348}#
              #{r 29349}#
              #{w 29350}#
              #{s 29351}#
              #{rib 29352}#
              #{mod 29353}#)
       (letrec*
         ((#{rebuild-macro-output 29354}#
            (lambda (#{x 29461}# #{m 29462}#)
              (if (pair? #{x 29461}#)
                (let ((#{e 29466}#
                        (cons (#{rebuild-macro-output 29354}#
                                (car #{x 29461}#)
                                #{m 29462}#)
                              (#{rebuild-macro-output 29354}#
                                (cdr #{x 29461}#)
                                #{m 29462}#))))
                  (begin
                    (if (if (pair? #{e 29466}#) #{s 29351}# #f)
                      (set-source-properties! #{e 29466}# #{s 29351}#))
                    #{e 29466}#))
                (if (if (vector? #{x 29461}#)
                      (if (= (vector-length #{x 29461}#) 4)
                        (eq? (vector-ref #{x 29461}# 0) 'syntax-object)
                        #f)
                      #f)
                  (let ((#{w 29482}# (vector-ref #{x 29461}# 2)))
                    (let ((#{ms 29483}# (car #{w 29482}#))
                          (#{s 29484}# (cdr #{w 29482}#)))
                      (if (if (pair? #{ms 29483}#)
                            (eq? (car #{ms 29483}#) #f)
                            #f)
                        (let ((#{expression 29492}# (vector-ref #{x 29461}# 1))
                              (#{wrap 29493}#
                                (cons (cdr #{ms 29483}#)
                                      (if #{rib 29352}#
                                        (cons #{rib 29352}# (cdr #{s 29484}#))
                                        (cdr #{s 29484}#))))
                              (#{module 29494}# (vector-ref #{x 29461}# 3)))
                          (vector
                            'syntax-object
                            #{expression 29492}#
                            #{wrap 29493}#
                            #{module 29494}#))
                        (let ((#{expression 29504}#
                                (let ((#{e 29509}# (vector-ref #{x 29461}# 1)))
                                  (begin
                                    (if (if (pair? #{e 29509}#) #{s 29484}# #f)
                                      (set-source-properties!
                                        #{e 29509}#
                                        #{s 29484}#))
                                    #{e 29509}#)))
                              (#{wrap 29505}#
                                (cons (cons #{m 29462}# #{ms 29483}#)
                                      (if #{rib 29352}#
                                        (cons #{rib 29352}#
                                              (cons 'shift #{s 29484}#))
                                        (cons 'shift #{s 29484}#))))
                              (#{module 29506}# (vector-ref #{x 29461}# 3)))
                          (vector
                            'syntax-object
                            #{expression 29504}#
                            #{wrap 29505}#
                            #{module 29506}#)))))
                  (if (vector? #{x 29461}#)
                    (let ((#{n 29521}# (vector-length #{x 29461}#)))
                      (let ((#{v 29522}#
                              (let ((#{e 29530}# (make-vector #{n 29521}#)))
                                (begin
                                  (if (if (pair? #{e 29530}#) #{x 29461}# #f)
                                    (set-source-properties!
                                      #{e 29530}#
                                      #{x 29461}#))
                                  #{e 29530}#))))
                        (letrec*
                          ((#{loop 29523}#
                             (lambda (#{i 29584}#)
                               (if (= #{i 29584}# #{n 29521}#)
                                 #{v 29522}#
                                 (begin
                                   (vector-set!
                                     #{v 29522}#
                                     #{i 29584}#
                                     (#{rebuild-macro-output 29354}#
                                       (vector-ref #{x 29461}# #{i 29584}#)
                                       #{m 29462}#))
                                   (#{loop 29523}# (#{1+}# #{i 29584}#)))))))
                          (#{loop 29523}# 0))))
                    (if (symbol? #{x 29461}#)
                      (syntax-violation
                        #f
                        "encountered raw symbol in macro output"
                        (let ((#{s 29590}# (cdr #{w 29350}#)))
                          (let ((#{x 29594}#
                                  (begin
                                    (if (if (pair? #{e 29348}#) #{s 29590}# #f)
                                      (set-source-properties!
                                        #{e 29348}#
                                        #{s 29590}#))
                                    #{e 29348}#)))
                            (if (if (null? (car #{w 29350}#))
                                  (null? (cdr #{w 29350}#))
                                  #f)
                              #{x 29594}#
                              (if (if (vector? #{x 29594}#)
                                    (if (= (vector-length #{x 29594}#) 4)
                                      (eq? (vector-ref #{x 29594}# 0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (let ((#{expression 29626}#
                                        (vector-ref #{x 29594}# 1))
                                      (#{wrap 29627}#
                                        (let ((#{w2 29635}#
                                                (vector-ref #{x 29594}# 2)))
                                          (let ((#{m1 29636}#
                                                  (car #{w 29350}#))
                                                (#{s1 29637}#
                                                  (cdr #{w 29350}#)))
                                            (if (null? #{m1 29636}#)
                                              (if (null? #{s1 29637}#)
                                                #{w2 29635}#
                                                (cons (car #{w2 29635}#)
                                                      (let ((#{m2 29652}#
                                                              (cdr #{w2 29635}#)))
                                                        (if (null? #{m2 29652}#)
                                                          #{s1 29637}#
                                                          (append
                                                            #{s1 29637}#
                                                            #{m2 29652}#)))))
                                              (cons (let ((#{m2 29660}#
                                                            (car #{w2 29635}#)))
                                                      (if (null? #{m2 29660}#)
                                                        #{m1 29636}#
                                                        (append
                                                          #{m1 29636}#
                                                          #{m2 29660}#)))
                                                    (let ((#{m2 29668}#
                                                            (cdr #{w2 29635}#)))
                                                      (if (null? #{m2 29668}#)
                                                        #{s1 29637}#
                                                        (append
                                                          #{s1 29637}#
                                                          #{m2 29668}#))))))))
                                      (#{module 29628}#
                                        (vector-ref #{x 29594}# 3)))
                                  (vector
                                    'syntax-object
                                    #{expression 29626}#
                                    #{wrap 29627}#
                                    #{module 29628}#))
                                (if (null? #{x 29594}#)
                                  #{x 29594}#
                                  (vector
                                    'syntax-object
                                    #{x 29594}#
                                    #{w 29350}#
                                    #{mod 29353}#))))))
                        #{x 29461}#)
                      (begin
                        (if (if (pair? #{x 29461}#) #{s 29351}# #f)
                          (set-source-properties! #{x 29461}# #{s 29351}#))
                        #{x 29461}#))))))))
         (#{rebuild-macro-output 29354}#
           (#{p 29347}#
             (let ((#{w 29361}#
                     (cons (cons #f (car #{w 29350}#))
                           (cons 'shift (cdr #{w 29350}#)))))
               (let ((#{x 29366}#
                       (begin
                         (if (if (pair? #{e 29348}#) #{s 29351}# #f)
                           (set-source-properties! #{e 29348}# #{s 29351}#))
                         #{e 29348}#)))
                 (if (if (null? (car #{w 29361}#))
                       (null? (cdr #{w 29361}#))
                       #f)
                   #{x 29366}#
                   (if (if (vector? #{x 29366}#)
                         (if (= (vector-length #{x 29366}#) 4)
                           (eq? (vector-ref #{x 29366}# 0) 'syntax-object)
                           #f)
                         #f)
                     (let ((#{expression 29404}# (vector-ref #{x 29366}# 1))
                           (#{wrap 29405}#
                             (let ((#{w2 29413}# (vector-ref #{x 29366}# 2)))
                               (let ((#{m1 29414}# (car #{w 29361}#))
                                     (#{s1 29415}# (cdr #{w 29361}#)))
                                 (if (null? #{m1 29414}#)
                                   (if (null? #{s1 29415}#)
                                     #{w2 29413}#
                                     (cons (car #{w2 29413}#)
                                           (let ((#{m2 29430}#
                                                   (cdr #{w2 29413}#)))
                                             (if (null? #{m2 29430}#)
                                               #{s1 29415}#
                                               (append
                                                 #{s1 29415}#
                                                 #{m2 29430}#)))))
                                   (cons (let ((#{m2 29438}#
                                                 (car #{w2 29413}#)))
                                           (if (null? #{m2 29438}#)
                                             #{m1 29414}#
                                             (append
                                               #{m1 29414}#
                                               #{m2 29438}#)))
                                         (let ((#{m2 29446}#
                                                 (cdr #{w2 29413}#)))
                                           (if (null? #{m2 29446}#)
                                             #{s1 29415}#
                                             (append
                                               #{s1 29415}#
                                               #{m2 29446}#))))))))
                           (#{module 29406}# (vector-ref #{x 29366}# 3)))
                       (vector
                         'syntax-object
                         #{expression 29404}#
                         #{wrap 29405}#
                         #{module 29406}#))
                     (if (null? #{x 29366}#)
                       #{x 29366}#
                       (vector
                         'syntax-object
                         #{x 29366}#
                         #{w 29361}#
                         #{mod 29353}#)))))))
           (gensym "m")))))
   (#{chi-body 4379}#
     (lambda (#{body 29698}#
              #{outer-form 29699}#
              #{r 29700}#
              #{w 29701}#
              #{mod 29702}#)
       (let ((#{r 29703}#
               (cons '("placeholder" placeholder) #{r 29700}#)))
         (let ((#{ribcage 29704}# (vector 'ribcage '() '() '())))
           (let ((#{w 29705}#
                   (cons (car #{w 29701}#)
                         (cons #{ribcage 29704}# (cdr #{w 29701}#)))))
             (letrec*
               ((#{parse 29706}#
                  (lambda (#{body 29814}#
                           #{ids 29815}#
                           #{labels 29816}#
                           #{var-ids 29817}#
                           #{vars 29818}#
                           #{vals 29819}#
                           #{bindings 29820}#)
                    (if (null? #{body 29814}#)
                      (syntax-violation
                        #f
                        "no expressions in body"
                        #{outer-form 29699}#)
                      (let ((#{e 29821}# (cdr (car #{body 29814}#)))
                            (#{er 29822}# (car (car #{body 29814}#))))
                        (call-with-values
                          (lambda ()
                            (#{syntax-type 4374}#
                              #{e 29821}#
                              #{er 29822}#
                              '(())
                              (#{source-annotation 4336}# #{er 29822}#)
                              #{ribcage 29704}#
                              #{mod 29702}#
                              #f))
                          (lambda (#{type 30028}#
                                   #{value 30029}#
                                   #{e 30030}#
                                   #{w 30031}#
                                   #{s 30032}#
                                   #{mod 30033}#)
                            (if (eqv? #{type 30028}# 'define-form)
                              (let ((#{id 30037}#
                                      (if (if (null? (car #{w 30031}#))
                                            (null? (cdr #{w 30031}#))
                                            #f)
                                        #{value 30029}#
                                        (if (if (vector? #{value 30029}#)
                                              (if (= (vector-length
                                                       #{value 30029}#)
                                                     4)
                                                (eq? (vector-ref
                                                       #{value 30029}#
                                                       0)
                                                     'syntax-object)
                                                #f)
                                              #f)
                                          (let ((#{expression 30082}#
                                                  (vector-ref
                                                    #{value 30029}#
                                                    1))
                                                (#{wrap 30083}#
                                                  (let ((#{w2 30093}#
                                                          (vector-ref
                                                            #{value 30029}#
                                                            2)))
                                                    (let ((#{m1 30094}#
                                                            (car #{w 30031}#))
                                                          (#{s1 30095}#
                                                            (cdr #{w 30031}#)))
                                                      (if (null? #{m1 30094}#)
                                                        (if (null? #{s1 30095}#)
                                                          #{w2 30093}#
                                                          (cons (car #{w2 30093}#)
                                                                (let ((#{m2 30112}#
                                                                        (cdr #{w2 30093}#)))
                                                                  (if (null? #{m2 30112}#)
                                                                    #{s1 30095}#
                                                                    (append
                                                                      #{s1 30095}#
                                                                      #{m2 30112}#)))))
                                                        (cons (let ((#{m2 30120}#
                                                                      (car #{w2 30093}#)))
                                                                (if (null? #{m2 30120}#)
                                                                  #{m1 30094}#
                                                                  (append
                                                                    #{m1 30094}#
                                                                    #{m2 30120}#)))
                                                              (let ((#{m2 30128}#
                                                                      (cdr #{w2 30093}#)))
                                                                (if (null? #{m2 30128}#)
                                                                  #{s1 30095}#
                                                                  (append
                                                                    #{s1 30095}#
                                                                    #{m2 30128}#))))))))
                                                (#{module 30084}#
                                                  (vector-ref
                                                    #{value 30029}#
                                                    3)))
                                            (vector
                                              'syntax-object
                                              #{expression 30082}#
                                              #{wrap 30083}#
                                              #{module 30084}#))
                                          (if (null? #{value 30029}#)
                                            #{value 30029}#
                                            (vector
                                              'syntax-object
                                              #{value 30029}#
                                              #{w 30031}#
                                              #{mod 30033}#)))))
                                    (#{label 30038}#
                                      (symbol->string (gensym "i"))))
                                (let ((#{var 30039}#
                                        (let ((#{id 30189}#
                                                (if (if (vector? #{id 30037}#)
                                                      (if (= (vector-length
                                                               #{id 30037}#)
                                                             4)
                                                        (eq? (vector-ref
                                                               #{id 30037}#
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (vector-ref #{id 30037}# 1)
                                                  #{id 30037}#)))
                                          (gensym
                                            (string-append
                                              (symbol->string #{id 30189}#)
                                              " ")))))
                                  (begin
                                    (begin
                                      (let ((#{update 30048}#
                                              (cons (vector-ref #{id 30037}# 1)
                                                    (vector-ref
                                                      #{ribcage 29704}#
                                                      1))))
                                        (vector-set!
                                          #{ribcage 29704}#
                                          1
                                          #{update 30048}#))
                                      (let ((#{update 30160}#
                                              (cons (car (vector-ref
                                                           #{id 30037}#
                                                           2))
                                                    (vector-ref
                                                      #{ribcage 29704}#
                                                      2))))
                                        (vector-set!
                                          #{ribcage 29704}#
                                          2
                                          #{update 30160}#))
                                      (let ((#{update 30175}#
                                              (cons #{label 30038}#
                                                    (vector-ref
                                                      #{ribcage 29704}#
                                                      3))))
                                        (vector-set!
                                          #{ribcage 29704}#
                                          3
                                          #{update 30175}#)))
                                    (#{parse 29706}#
                                      (cdr #{body 29814}#)
                                      (cons #{id 30037}# #{ids 29815}#)
                                      (cons #{label 30038}# #{labels 29816}#)
                                      (cons #{id 30037}# #{var-ids 29817}#)
                                      (cons #{var 30039}# #{vars 29818}#)
                                      (cons (cons #{er 29822}#
                                                  (if (if (null? (car #{w 30031}#))
                                                        (null? (cdr #{w 30031}#))
                                                        #f)
                                                    #{e 30030}#
                                                    (if (if (vector?
                                                              #{e 30030}#)
                                                          (if (= (vector-length
                                                                   #{e 30030}#)
                                                                 4)
                                                            (eq? (vector-ref
                                                                   #{e 30030}#
                                                                   0)
                                                                 'syntax-object)
                                                            #f)
                                                          #f)
                                                      (let ((#{expression 30241}#
                                                              (vector-ref
                                                                #{e 30030}#
                                                                1))
                                                            (#{wrap 30242}#
                                                              (let ((#{w2 30252}#
                                                                      (vector-ref
                                                                        #{e 30030}#
                                                                        2)))
                                                                (let ((#{m1 30253}#
                                                                        (car #{w 30031}#))
                                                                      (#{s1 30254}#
                                                                        (cdr #{w 30031}#)))
                                                                  (if (null? #{m1 30253}#)
                                                                    (if (null? #{s1 30254}#)
                                                                      #{w2 30252}#
                                                                      (cons (car #{w2 30252}#)
                                                                            (let ((#{m2 30271}#
                                                                                    (cdr #{w2 30252}#)))
                                                                              (if (null? #{m2 30271}#)
                                                                                #{s1 30254}#
                                                                                (append
                                                                                  #{s1 30254}#
                                                                                  #{m2 30271}#)))))
                                                                    (cons (let ((#{m2 30279}#
                                                                                  (car #{w2 30252}#)))
                                                                            (if (null? #{m2 30279}#)
                                                                              #{m1 30253}#
                                                                              (append
                                                                                #{m1 30253}#
                                                                                #{m2 30279}#)))
                                                                          (let ((#{m2 30287}#
                                                                                  (cdr #{w2 30252}#)))
                                                                            (if (null? #{m2 30287}#)
                                                                              #{s1 30254}#
                                                                              (append
                                                                                #{s1 30254}#
                                                                                #{m2 30287}#))))))))
                                                            (#{module 30243}#
                                                              (vector-ref
                                                                #{e 30030}#
                                                                3)))
                                                        (vector
                                                          'syntax-object
                                                          #{expression 30241}#
                                                          #{wrap 30242}#
                                                          #{module 30243}#))
                                                      (if (null? #{e 30030}#)
                                                        #{e 30030}#
                                                        (vector
                                                          'syntax-object
                                                          #{e 30030}#
                                                          #{w 30031}#
                                                          #{mod 30033}#)))))
                                            #{vals 29819}#)
                                      (cons (cons 'lexical #{var 30039}#)
                                            #{bindings 29820}#)))))
                              (if (eqv? #{type 30028}# 'define-syntax-form)
                                (let ((#{id 30313}#
                                        (if (if (null? (car #{w 30031}#))
                                              (null? (cdr #{w 30031}#))
                                              #f)
                                          #{value 30029}#
                                          (if (if (vector? #{value 30029}#)
                                                (if (= (vector-length
                                                         #{value 30029}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{value 30029}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (let ((#{expression 30357}#
                                                    (vector-ref
                                                      #{value 30029}#
                                                      1))
                                                  (#{wrap 30358}#
                                                    (let ((#{w2 30368}#
                                                            (vector-ref
                                                              #{value 30029}#
                                                              2)))
                                                      (let ((#{m1 30369}#
                                                              (car #{w 30031}#))
                                                            (#{s1 30370}#
                                                              (cdr #{w 30031}#)))
                                                        (if (null? #{m1 30369}#)
                                                          (if (null? #{s1 30370}#)
                                                            #{w2 30368}#
                                                            (cons (car #{w2 30368}#)
                                                                  (let ((#{m2 30387}#
                                                                          (cdr #{w2 30368}#)))
                                                                    (if (null? #{m2 30387}#)
                                                                      #{s1 30370}#
                                                                      (append
                                                                        #{s1 30370}#
                                                                        #{m2 30387}#)))))
                                                          (cons (let ((#{m2 30395}#
                                                                        (car #{w2 30368}#)))
                                                                  (if (null? #{m2 30395}#)
                                                                    #{m1 30369}#
                                                                    (append
                                                                      #{m1 30369}#
                                                                      #{m2 30395}#)))
                                                                (let ((#{m2 30403}#
                                                                        (cdr #{w2 30368}#)))
                                                                  (if (null? #{m2 30403}#)
                                                                    #{s1 30370}#
                                                                    (append
                                                                      #{s1 30370}#
                                                                      #{m2 30403}#))))))))
                                                  (#{module 30359}#
                                                    (vector-ref
                                                      #{value 30029}#
                                                      3)))
                                              (vector
                                                'syntax-object
                                                #{expression 30357}#
                                                #{wrap 30358}#
                                                #{module 30359}#))
                                            (if (null? #{value 30029}#)
                                              #{value 30029}#
                                              (vector
                                                'syntax-object
                                                #{value 30029}#
                                                #{w 30031}#
                                                #{mod 30033}#)))))
                                      (#{label 30314}#
                                        (symbol->string (gensym "i"))))
                                  (begin
                                    (begin
                                      (let ((#{update 30323}#
                                              (cons (vector-ref #{id 30313}# 1)
                                                    (vector-ref
                                                      #{ribcage 29704}#
                                                      1))))
                                        (vector-set!
                                          #{ribcage 29704}#
                                          1
                                          #{update 30323}#))
                                      (let ((#{update 30435}#
                                              (cons (car (vector-ref
                                                           #{id 30313}#
                                                           2))
                                                    (vector-ref
                                                      #{ribcage 29704}#
                                                      2))))
                                        (vector-set!
                                          #{ribcage 29704}#
                                          2
                                          #{update 30435}#))
                                      (let ((#{update 30450}#
                                              (cons #{label 30314}#
                                                    (vector-ref
                                                      #{ribcage 29704}#
                                                      3))))
                                        (vector-set!
                                          #{ribcage 29704}#
                                          3
                                          #{update 30450}#)))
                                    (#{parse 29706}#
                                      (cdr #{body 29814}#)
                                      (cons #{id 30313}# #{ids 29815}#)
                                      (cons #{label 30314}# #{labels 29816}#)
                                      #{var-ids 29817}#
                                      #{vars 29818}#
                                      #{vals 29819}#
                                      (cons (cons 'macro
                                                  (cons #{er 29822}#
                                                        (if (if (null? (car #{w 30031}#))
                                                              (null? (cdr #{w 30031}#))
                                                              #f)
                                                          #{e 30030}#
                                                          (if (if (vector?
                                                                    #{e 30030}#)
                                                                (if (= (vector-length
                                                                         #{e 30030}#)
                                                                       4)
                                                                  (eq? (vector-ref
                                                                         #{e 30030}#
                                                                         0)
                                                                       'syntax-object)
                                                                  #f)
                                                                #f)
                                                            (let ((#{expression 30489}#
                                                                    (vector-ref
                                                                      #{e 30030}#
                                                                      1))
                                                                  (#{wrap 30490}#
                                                                    (let ((#{w2 30500}#
                                                                            (vector-ref
                                                                              #{e 30030}#
                                                                              2)))
                                                                      (let ((#{m1 30501}#
                                                                              (car #{w 30031}#))
                                                                            (#{s1 30502}#
                                                                              (cdr #{w 30031}#)))
                                                                        (if (null? #{m1 30501}#)
                                                                          (if (null? #{s1 30502}#)
                                                                            #{w2 30500}#
                                                                            (cons (car #{w2 30500}#)
                                                                                  (let ((#{m2 30519}#
                                                                                          (cdr #{w2 30500}#)))
                                                                                    (if (null? #{m2 30519}#)
                                                                                      #{s1 30502}#
                                                                                      (append
                                                                                        #{s1 30502}#
                                                                                        #{m2 30519}#)))))
                                                                          (cons (let ((#{m2 30527}#
                                                                                        (car #{w2 30500}#)))
                                                                                  (if (null? #{m2 30527}#)
                                                                                    #{m1 30501}#
                                                                                    (append
                                                                                      #{m1 30501}#
                                                                                      #{m2 30527}#)))
                                                                                (let ((#{m2 30535}#
                                                                                        (cdr #{w2 30500}#)))
                                                                                  (if (null? #{m2 30535}#)
                                                                                    #{s1 30502}#
                                                                                    (append
                                                                                      #{s1 30502}#
                                                                                      #{m2 30535}#))))))))
                                                                  (#{module 30491}#
                                                                    (vector-ref
                                                                      #{e 30030}#
                                                                      3)))
                                                              (vector
                                                                'syntax-object
                                                                #{expression 30489}#
                                                                #{wrap 30490}#
                                                                #{module 30491}#))
                                                            (if (null? #{e 30030}#)
                                                              #{e 30030}#
                                                              (vector
                                                                'syntax-object
                                                                #{e 30030}#
                                                                #{w 30031}#
                                                                #{mod 30033}#))))))
                                            #{bindings 29820}#))))
                                (if (eqv? #{type 30028}# 'begin-form)
                                  (let ((#{tmp 30562}#
                                          ($sc-dispatch
                                            #{e 30030}#
                                            '(_ . each-any))))
                                    (if #{tmp 30562}#
                                      (@apply
                                        (lambda (#{e1 30566}#)
                                          (#{parse 29706}#
                                            (letrec*
                                              ((#{f 30567}#
                                                 (lambda (#{forms 30783}#)
                                                   (if (null? #{forms 30783}#)
                                                     (cdr #{body 29814}#)
                                                     (cons (cons #{er 29822}#
                                                                 (let ((#{x 30787}#
                                                                         (car #{forms 30783}#)))
                                                                   (if (if (null? (car #{w 30031}#))
                                                                         (null? (cdr #{w 30031}#))
                                                                         #f)
                                                                     #{x 30787}#
                                                                     (if (if (vector?
                                                                               #{x 30787}#)
                                                                           (if (= (vector-length
                                                                                    #{x 30787}#)
                                                                                  4)
                                                                             (eq? (vector-ref
                                                                                    #{x 30787}#
                                                                                    0)
                                                                                  'syntax-object)
                                                                             #f)
                                                                           #f)
                                                                       (let ((#{expression 30805}#
                                                                               (vector-ref
                                                                                 #{x 30787}#
                                                                                 1))
                                                                             (#{wrap 30806}#
                                                                               (let ((#{w2 30814}#
                                                                                       (vector-ref
                                                                                         #{x 30787}#
                                                                                         2)))
                                                                                 (let ((#{m1 30815}#
                                                                                         (car #{w 30031}#))
                                                                                       (#{s1 30816}#
                                                                                         (cdr #{w 30031}#)))
                                                                                   (if (null? #{m1 30815}#)
                                                                                     (if (null? #{s1 30816}#)
                                                                                       #{w2 30814}#
                                                                                       (cons (car #{w2 30814}#)
                                                                                             (let ((#{m2 30831}#
                                                                                                     (cdr #{w2 30814}#)))
                                                                                               (if (null? #{m2 30831}#)
                                                                                                 #{s1 30816}#
                                                                                                 (append
                                                                                                   #{s1 30816}#
                                                                                                   #{m2 30831}#)))))
                                                                                     (cons (let ((#{m2 30839}#
                                                                                                   (car #{w2 30814}#)))
                                                                                             (if (null? #{m2 30839}#)
                                                                                               #{m1 30815}#
                                                                                               (append
                                                                                                 #{m1 30815}#
                                                                                                 #{m2 30839}#)))
                                                                                           (let ((#{m2 30847}#
                                                                                                   (cdr #{w2 30814}#)))
                                                                                             (if (null? #{m2 30847}#)
                                                                                               #{s1 30816}#
                                                                                               (append
                                                                                                 #{s1 30816}#
                                                                                                 #{m2 30847}#))))))))
                                                                             (#{module 30807}#
                                                                               (vector-ref
                                                                                 #{x 30787}#
                                                                                 3)))
                                                                         (vector
                                                                           'syntax-object
                                                                           #{expression 30805}#
                                                                           #{wrap 30806}#
                                                                           #{module 30807}#))
                                                                       (if (null? #{x 30787}#)
                                                                         #{x 30787}#
                                                                         (vector
                                                                           'syntax-object
                                                                           #{x 30787}#
                                                                           #{w 30031}#
                                                                           #{mod 30033}#))))))
                                                           (#{f 30567}#
                                                             (cdr #{forms 30783}#)))))))
                                              (#{f 30567}# #{e1 30566}#))
                                            #{ids 29815}#
                                            #{labels 29816}#
                                            #{var-ids 29817}#
                                            #{vars 29818}#
                                            #{vals 29819}#
                                            #{bindings 29820}#))
                                        #{tmp 30562}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{e 30030}#)))
                                  (if (eqv? #{type 30028}# 'local-syntax-form)
                                    (#{chi-local-syntax 4380}#
                                      #{value 30029}#
                                      #{e 30030}#
                                      #{er 29822}#
                                      #{w 30031}#
                                      #{s 30032}#
                                      #{mod 30033}#
                                      (lambda (#{forms 30873}#
                                               #{er 30874}#
                                               #{w 30875}#
                                               #{s 30876}#
                                               #{mod 30877}#)
                                        (#{parse 29706}#
                                          (letrec*
                                            ((#{f 30878}#
                                               (lambda (#{forms 31094}#)
                                                 (if (null? #{forms 31094}#)
                                                   (cdr #{body 29814}#)
                                                   (cons (cons #{er 30874}#
                                                               (let ((#{x 31098}#
                                                                       (car #{forms 31094}#)))
                                                                 (if (if (null? (car #{w 30875}#))
                                                                       (null? (cdr #{w 30875}#))
                                                                       #f)
                                                                   #{x 31098}#
                                                                   (if (if (vector?
                                                                             #{x 31098}#)
                                                                         (if (= (vector-length
                                                                                  #{x 31098}#)
                                                                                4)
                                                                           (eq? (vector-ref
                                                                                  #{x 31098}#
                                                                                  0)
                                                                                'syntax-object)
                                                                           #f)
                                                                         #f)
                                                                     (let ((#{expression 31116}#
                                                                             (vector-ref
                                                                               #{x 31098}#
                                                                               1))
                                                                           (#{wrap 31117}#
                                                                             (let ((#{w2 31125}#
                                                                                     (vector-ref
                                                                                       #{x 31098}#
                                                                                       2)))
                                                                               (let ((#{m1 31126}#
                                                                                       (car #{w 30875}#))
                                                                                     (#{s1 31127}#
                                                                                       (cdr #{w 30875}#)))
                                                                                 (if (null? #{m1 31126}#)
                                                                                   (if (null? #{s1 31127}#)
                                                                                     #{w2 31125}#
                                                                                     (cons (car #{w2 31125}#)
                                                                                           (let ((#{m2 31142}#
                                                                                                   (cdr #{w2 31125}#)))
                                                                                             (if (null? #{m2 31142}#)
                                                                                               #{s1 31127}#
                                                                                               (append
                                                                                                 #{s1 31127}#
                                                                                                 #{m2 31142}#)))))
                                                                                   (cons (let ((#{m2 31150}#
                                                                                                 (car #{w2 31125}#)))
                                                                                           (if (null? #{m2 31150}#)
                                                                                             #{m1 31126}#
                                                                                             (append
                                                                                               #{m1 31126}#
                                                                                               #{m2 31150}#)))
                                                                                         (let ((#{m2 31158}#
                                                                                                 (cdr #{w2 31125}#)))
                                                                                           (if (null? #{m2 31158}#)
                                                                                             #{s1 31127}#
                                                                                             (append
                                                                                               #{s1 31127}#
                                                                                               #{m2 31158}#))))))))
                                                                           (#{module 31118}#
                                                                             (vector-ref
                                                                               #{x 31098}#
                                                                               3)))
                                                                       (vector
                                                                         'syntax-object
                                                                         #{expression 31116}#
                                                                         #{wrap 31117}#
                                                                         #{module 31118}#))
                                                                     (if (null? #{x 31098}#)
                                                                       #{x 31098}#
                                                                       (vector
                                                                         'syntax-object
                                                                         #{x 31098}#
                                                                         #{w 30875}#
                                                                         #{mod 30877}#))))))
                                                         (#{f 30878}#
                                                           (cdr #{forms 31094}#)))))))
                                            (#{f 30878}# #{forms 30873}#))
                                          #{ids 29815}#
                                          #{labels 29816}#
                                          #{var-ids 29817}#
                                          #{vars 29818}#
                                          #{vals 29819}#
                                          #{bindings 29820}#)))
                                    (if (null? #{ids 29815}#)
                                      (#{build-sequence 4324}#
                                        #f
                                        (map (lambda (#{x 31247}#)
                                               (#{chi 4375}#
                                                 (cdr #{x 31247}#)
                                                 (car #{x 31247}#)
                                                 '(())
                                                 #{mod 30033}#))
                                             (cons (cons #{er 29822}#
                                                         (let ((#{x 31326}#
                                                                 (begin
                                                                   (if (if (pair? #{e 30030}#)
                                                                         #{s 30032}#
                                                                         #f)
                                                                     (set-source-properties!
                                                                       #{e 30030}#
                                                                       #{s 30032}#))
                                                                   #{e 30030}#)))
                                                           (if (if (null? (car #{w 30031}#))
                                                                 (null? (cdr #{w 30031}#))
                                                                 #f)
                                                             #{x 31326}#
                                                             (if (if (vector?
                                                                       #{x 31326}#)
                                                                   (if (= (vector-length
                                                                            #{x 31326}#)
                                                                          4)
                                                                     (eq? (vector-ref
                                                                            #{x 31326}#
                                                                            0)
                                                                          'syntax-object)
                                                                     #f)
                                                                   #f)
                                                               (let ((#{expression 31358}#
                                                                       (vector-ref
                                                                         #{x 31326}#
                                                                         1))
                                                                     (#{wrap 31359}#
                                                                       (let ((#{w2 31367}#
                                                                               (vector-ref
                                                                                 #{x 31326}#
                                                                                 2)))
                                                                         (let ((#{m1 31368}#
                                                                                 (car #{w 30031}#))
                                                                               (#{s1 31369}#
                                                                                 (cdr #{w 30031}#)))
                                                                           (if (null? #{m1 31368}#)
                                                                             (if (null? #{s1 31369}#)
                                                                               #{w2 31367}#
                                                                               (cons (car #{w2 31367}#)
                                                                                     (let ((#{m2 31384}#
                                                                                             (cdr #{w2 31367}#)))
                                                                                       (if (null? #{m2 31384}#)
                                                                                         #{s1 31369}#
                                                                                         (append
                                                                                           #{s1 31369}#
                                                                                           #{m2 31384}#)))))
                                                                             (cons (let ((#{m2 31392}#
                                                                                           (car #{w2 31367}#)))
                                                                                     (if (null? #{m2 31392}#)
                                                                                       #{m1 31368}#
                                                                                       (append
                                                                                         #{m1 31368}#
                                                                                         #{m2 31392}#)))
                                                                                   (let ((#{m2 31400}#
                                                                                           (cdr #{w2 31367}#)))
                                                                                     (if (null? #{m2 31400}#)
                                                                                       #{s1 31369}#
                                                                                       (append
                                                                                         #{s1 31369}#
                                                                                         #{m2 31400}#))))))))
                                                                     (#{module 31360}#
                                                                       (vector-ref
                                                                         #{x 31326}#
                                                                         3)))
                                                                 (vector
                                                                   'syntax-object
                                                                   #{expression 31358}#
                                                                   #{wrap 31359}#
                                                                   #{module 31360}#))
                                                               (if (null? #{x 31326}#)
                                                                 #{x 31326}#
                                                                 (vector
                                                                   'syntax-object
                                                                   #{x 31326}#
                                                                   #{w 30031}#
                                                                   #{mod 30033}#))))))
                                                   (cdr #{body 29814}#))))
                                      (begin
                                        (if (not (#{valid-bound-ids? 4365}#
                                                   #{ids 29815}#))
                                          (syntax-violation
                                            #f
                                            "invalid or duplicate identifier in definition"
                                            #{outer-form 29699}#))
                                        (letrec*
                                          ((#{loop 31499}#
                                             (lambda (#{bs 31502}#
                                                      #{er-cache 31503}#
                                                      #{r-cache 31504}#)
                                               (if (not (null? #{bs 31502}#))
                                                 (let ((#{b 31505}#
                                                         (car #{bs 31502}#)))
                                                   (if (eq? (car #{b 31505}#)
                                                            'macro)
                                                     (let ((#{er 31507}#
                                                             (car (cdr #{b 31505}#))))
                                                       (let ((#{r-cache 31508}#
                                                               (if (eq? #{er 31507}#
                                                                        #{er-cache 31503}#)
                                                                 #{r-cache 31504}#
                                                                 (#{macros-only-env 4339}#
                                                                   #{er 31507}#))))
                                                         (begin
                                                           (set-cdr!
                                                             #{b 31505}#
                                                             (#{eval-local-transformer 4381}#
                                                               (#{chi 4375}#
                                                                 (cdr (cdr #{b 31505}#))
                                                                 #{r-cache 31508}#
                                                                 '(())
                                                                 #{mod 30033}#)
                                                               #{mod 30033}#))
                                                           (#{loop 31499}#
                                                             (cdr #{bs 31502}#)
                                                             #{er 31507}#
                                                             #{r-cache 31508}#))))
                                                     (#{loop 31499}#
                                                       (cdr #{bs 31502}#)
                                                       #{er-cache 31503}#
                                                       #{r-cache 31504}#)))))))
                                          (#{loop 31499}#
                                            #{bindings 29820}#
                                            #f
                                            #f))
                                        (set-cdr!
                                          #{r 29703}#
                                          (#{extend-env 4337}#
                                            #{labels 29816}#
                                            #{bindings 29820}#
                                            (cdr #{r 29703}#)))
                                        (#{build-letrec 4327}#
                                          #f
                                          #t
                                          (reverse
                                            (map syntax->datum
                                                 #{var-ids 29817}#))
                                          (reverse #{vars 29818}#)
                                          (map (lambda (#{x 31927}#)
                                                 (#{chi 4375}#
                                                   (cdr #{x 31927}#)
                                                   (car #{x 31927}#)
                                                   '(())
                                                   #{mod 30033}#))
                                               (reverse #{vals 29819}#))
                                          (#{build-sequence 4324}#
                                            #f
                                            (map (lambda (#{x 32071}#)
                                                   (#{chi 4375}#
                                                     (cdr #{x 32071}#)
                                                     (car #{x 32071}#)
                                                     '(())
                                                     #{mod 30033}#))
                                                 (cons (cons #{er 29822}#
                                                             (let ((#{x 32150}#
                                                                     (begin
                                                                       (if (if (pair? #{e 30030}#)
                                                                             #{s 30032}#
                                                                             #f)
                                                                         (set-source-properties!
                                                                           #{e 30030}#
                                                                           #{s 30032}#))
                                                                       #{e 30030}#)))
                                                               (if (if (null? (car #{w 30031}#))
                                                                     (null? (cdr #{w 30031}#))
                                                                     #f)
                                                                 #{x 32150}#
                                                                 (if (if (vector?
                                                                           #{x 32150}#)
                                                                       (if (= (vector-length
                                                                                #{x 32150}#)
                                                                              4)
                                                                         (eq? (vector-ref
                                                                                #{x 32150}#
                                                                                0)
                                                                              'syntax-object)
                                                                         #f)
                                                                       #f)
                                                                   (let ((#{expression 32182}#
                                                                           (vector-ref
                                                                             #{x 32150}#
                                                                             1))
                                                                         (#{wrap 32183}#
                                                                           (let ((#{w2 32191}#
                                                                                   (vector-ref
                                                                                     #{x 32150}#
                                                                                     2)))
                                                                             (let ((#{m1 32192}#
                                                                                     (car #{w 30031}#))
                                                                                   (#{s1 32193}#
                                                                                     (cdr #{w 30031}#)))
                                                                               (if (null? #{m1 32192}#)
                                                                                 (if (null? #{s1 32193}#)
                                                                                   #{w2 32191}#
                                                                                   (cons (car #{w2 32191}#)
                                                                                         (let ((#{m2 32208}#
                                                                                                 (cdr #{w2 32191}#)))
                                                                                           (if (null? #{m2 32208}#)
                                                                                             #{s1 32193}#
                                                                                             (append
                                                                                               #{s1 32193}#
                                                                                               #{m2 32208}#)))))
                                                                                 (cons (let ((#{m2 32216}#
                                                                                               (car #{w2 32191}#)))
                                                                                         (if (null? #{m2 32216}#)
                                                                                           #{m1 32192}#
                                                                                           (append
                                                                                             #{m1 32192}#
                                                                                             #{m2 32216}#)))
                                                                                       (let ((#{m2 32224}#
                                                                                               (cdr #{w2 32191}#)))
                                                                                         (if (null? #{m2 32224}#)
                                                                                           #{s1 32193}#
                                                                                           (append
                                                                                             #{s1 32193}#
                                                                                             #{m2 32224}#))))))))
                                                                         (#{module 32184}#
                                                                           (vector-ref
                                                                             #{x 32150}#
                                                                             3)))
                                                                     (vector
                                                                       'syntax-object
                                                                       #{expression 32182}#
                                                                       #{wrap 32183}#
                                                                       #{module 32184}#))
                                                                   (if (null? #{x 32150}#)
                                                                     #{x 32150}#
                                                                     (vector
                                                                       'syntax-object
                                                                       #{x 32150}#
                                                                       #{w 30031}#
                                                                       #{mod 30033}#))))))
                                                       (cdr #{body 29814}#))))))))))))))))))
               (#{parse 29706}#
                 (map (lambda (#{x 29709}#)
                        (cons #{r 29703}#
                              (if (if (null? (car #{w 29705}#))
                                    (null? (cdr #{w 29705}#))
                                    #f)
                                #{x 29709}#
                                (if (if (vector? #{x 29709}#)
                                      (if (= (vector-length #{x 29709}#) 4)
                                        (eq? (vector-ref #{x 29709}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (let ((#{expression 29745}#
                                          (vector-ref #{x 29709}# 1))
                                        (#{wrap 29746}#
                                          (let ((#{w2 29756}#
                                                  (vector-ref #{x 29709}# 2)))
                                            (let ((#{m1 29757}#
                                                    (car #{w 29705}#))
                                                  (#{s1 29758}#
                                                    (cdr #{w 29705}#)))
                                              (if (null? #{m1 29757}#)
                                                (if (null? #{s1 29758}#)
                                                  #{w2 29756}#
                                                  (cons (car #{w2 29756}#)
                                                        (let ((#{m2 29775}#
                                                                (cdr #{w2 29756}#)))
                                                          (if (null? #{m2 29775}#)
                                                            #{s1 29758}#
                                                            (append
                                                              #{s1 29758}#
                                                              #{m2 29775}#)))))
                                                (cons (let ((#{m2 29783}#
                                                              (car #{w2 29756}#)))
                                                        (if (null? #{m2 29783}#)
                                                          #{m1 29757}#
                                                          (append
                                                            #{m1 29757}#
                                                            #{m2 29783}#)))
                                                      (let ((#{m2 29791}#
                                                              (cdr #{w2 29756}#)))
                                                        (if (null? #{m2 29791}#)
                                                          #{s1 29758}#
                                                          (append
                                                            #{s1 29758}#
                                                            #{m2 29791}#))))))))
                                        (#{module 29747}#
                                          (vector-ref #{x 29709}# 3)))
                                    (vector
                                      'syntax-object
                                      #{expression 29745}#
                                      #{wrap 29746}#
                                      #{module 29747}#))
                                  (if (null? #{x 29709}#)
                                    #{x 29709}#
                                    (vector
                                      'syntax-object
                                      #{x 29709}#
                                      #{w 29705}#
                                      #{mod 29702}#))))))
                      #{body 29698}#)
                 '()
                 '()
                 '()
                 '()
                 '()
                 '())))))))
   (#{chi-local-syntax 4380}#
     (lambda (#{rec? 32239}#
              #{e 32240}#
              #{r 32241}#
              #{w 32242}#
              #{s 32243}#
              #{mod 32244}#
              #{k 32245}#)
       (let ((#{tmp 32247}#
               ($sc-dispatch
                 #{e 32240}#
                 '(_ #(each (any any)) any . each-any))))
         (if #{tmp 32247}#
           (@apply
             (lambda (#{id 32251}#
                      #{val 32252}#
                      #{e1 32253}#
                      #{e2 32254}#)
               (if (not (#{valid-bound-ids? 4365}# #{id 32251}#))
                 (syntax-violation
                   #f
                   "duplicate bound keyword"
                   #{e 32240}#)
                 (let ((#{labels 32351}#
                         (#{gen-labels 4346}# #{id 32251}#)))
                   (let ((#{new-w 32352}#
                           (#{make-binding-wrap 4357}#
                             #{id 32251}#
                             #{labels 32351}#
                             #{w 32242}#)))
                     (#{k 32245}#
                       (cons #{e1 32253}# #{e2 32254}#)
                       (#{extend-env 4337}#
                         #{labels 32351}#
                         (let ((#{trans-r 32392}#
                                 (#{macros-only-env 4339}# #{r 32241}#)))
                           (begin
                             (if #{rec? 32239}# (if #f #f))
                             (map (lambda (#{x 32393}#)
                                    (cons 'macro
                                          (#{eval-local-transformer 4381}#
                                            (#{chi 4375}#
                                              #{x 32393}#
                                              #{trans-r 32392}#
                                              (if #{rec? 32239}#
                                                #{new-w 32352}#
                                                #{w 32242}#)
                                              #{mod 32244}#)
                                            #{mod 32244}#)))
                                  #{val 32252}#)))
                         #{r 32241}#)
                       #{new-w 32352}#
                       #{s 32243}#
                       #{mod 32244}#)))))
             #{tmp 32247}#)
           (syntax-violation
             #f
             "bad local syntax definition"
             (let ((#{x 32718}#
                     (begin
                       (if (if (pair? #{e 32240}#) #{s 32243}# #f)
                         (set-source-properties! #{e 32240}# #{s 32243}#))
                       #{e 32240}#)))
               (if (if (null? (car #{w 32242}#))
                     (null? (cdr #{w 32242}#))
                     #f)
                 #{x 32718}#
                 (if (if (vector? #{x 32718}#)
                       (if (= (vector-length #{x 32718}#) 4)
                         (eq? (vector-ref #{x 32718}# 0) 'syntax-object)
                         #f)
                       #f)
                   (let ((#{expression 32750}# (vector-ref #{x 32718}# 1))
                         (#{wrap 32751}#
                           (let ((#{w2 32759}# (vector-ref #{x 32718}# 2)))
                             (let ((#{m1 32760}# (car #{w 32242}#))
                                   (#{s1 32761}# (cdr #{w 32242}#)))
                               (if (null? #{m1 32760}#)
                                 (if (null? #{s1 32761}#)
                                   #{w2 32759}#
                                   (cons (car #{w2 32759}#)
                                         (let ((#{m2 32776}#
                                                 (cdr #{w2 32759}#)))
                                           (if (null? #{m2 32776}#)
                                             #{s1 32761}#
                                             (append
                                               #{s1 32761}#
                                               #{m2 32776}#)))))
                                 (cons (let ((#{m2 32784}# (car #{w2 32759}#)))
                                         (if (null? #{m2 32784}#)
                                           #{m1 32760}#
                                           (append #{m1 32760}# #{m2 32784}#)))
                                       (let ((#{m2 32792}# (cdr #{w2 32759}#)))
                                         (if (null? #{m2 32792}#)
                                           #{s1 32761}#
                                           (append
                                             #{s1 32761}#
                                             #{m2 32792}#))))))))
                         (#{module 32752}# (vector-ref #{x 32718}# 3)))
                     (vector
                       'syntax-object
                       #{expression 32750}#
                       #{wrap 32751}#
                       #{module 32752}#))
                   (if (null? #{x 32718}#)
                     #{x 32718}#
                     (vector
                       'syntax-object
                       #{x 32718}#
                       #{w 32242}#
                       #{mod 32244}#))))))))))
   (#{eval-local-transformer 4381}#
     (lambda (#{expanded 32810}# #{mod 32811}#)
       (let ((#{p 32812}# (primitive-eval #{expanded 32810}#)))
         (if (procedure? #{p 32812}#)
           #{p 32812}#
           (syntax-violation
             #f
             "nonprocedure transformer"
             #{p 32812}#)))))
   (#{ellipsis? 4383}#
     (lambda (#{x 5834}#)
       (if (if (if (vector? #{x 5834}#)
                 (if (= (vector-length #{x 5834}#) 4)
                   (eq? (vector-ref #{x 5834}# 0) 'syntax-object)
                   #f)
                 #f)
             (symbol? (vector-ref #{x 5834}# 1))
             #f)
         (#{free-id=? 4363}#
           #{x 5834}#
           '#(syntax-object
              ...
              ((top)
               #(ribcage () () ())
               #(ribcage () () ())
               #(ribcage #(x) #((top)) #("i2263"))
               #(ribcage
                 (lambda-var-list
                   gen-var
                   strip
                   chi-lambda-case
                   lambda*-formals
                   chi-simple-lambda
                   lambda-formals
                   ellipsis?
                   chi-void
                   eval-local-transformer
                   chi-local-syntax
                   chi-body
                   chi-macro
                   chi-call
                   chi-expr
                   chi
                   syntax-type
                   chi-when-list
                   chi-install-global
                   chi-top-sequence
                   chi-sequence
                   source-wrap
                   wrap
                   bound-id-member?
                   distinct-bound-ids?
                   valid-bound-ids?
                   bound-id=?
                   free-id=?
                   id-var-name
                   same-marks?
                   join-marks
                   join-wraps
                   smart-append
                   make-binding-wrap
                   extend-ribcage!
                   make-empty-ribcage
                   new-mark
                   anti-mark
                   the-anti-mark
                   top-marked?
                   top-wrap
                   empty-wrap
                   set-ribcage-labels!
                   set-ribcage-marks!
                   set-ribcage-symnames!
                   ribcage-labels
                   ribcage-marks
                   ribcage-symnames
                   ribcage?
                   make-ribcage
                   gen-labels
                   gen-label
                   make-rename
                   rename-marks
                   rename-new
                   rename-old
                   subst-rename?
                   wrap-subst
                   wrap-marks
                   make-wrap
                   id-sym-name&marks
                   id-sym-name
                   id?
                   nonsymbol-id?
                   global-extend
                   lookup
                   macros-only-env
                   extend-var-env
                   extend-env
                   null-env
                   binding-value
                   binding-type
                   make-binding
                   arg-check
                   source-annotation
                   no-source
                   set-syntax-object-module!
                   set-syntax-object-wrap!
                   set-syntax-object-expression!
                   syntax-object-module
                   syntax-object-wrap
                   syntax-object-expression
                   syntax-object?
                   make-syntax-object
                   build-lexical-var
                   build-letrec
                   build-named-let
                   build-let
                   build-sequence
                   build-data
                   build-primref
                   build-primcall
                   build-lambda-case
                   build-case-lambda
                   build-simple-lambda
                   build-global-definition
                   build-global-assignment
                   build-global-reference
                   analyze-variable
                   build-lexical-assignment
                   build-lexical-reference
                   build-dynlet
                   build-conditional
                   build-call
                   build-void
                   maybe-name-value!
                   decorate-source
                   get-global-definition-hook
                   put-global-definition-hook
                   gensym-hook
                   local-eval-hook
                   top-level-eval-hook
                   fx<
                   fx=
                   fx-
                   fx+
                   set-lambda-meta!
                   lambda-meta
                   lambda?
                   make-dynlet
                   make-letrec
                   make-let
                   make-lambda-case
                   make-lambda
                   make-seq
                   make-primcall
                   make-call
                   make-conditional
                   make-toplevel-define
                   make-toplevel-set
                   make-toplevel-ref
                   make-module-set
                   make-module-ref
                   make-lexical-set
                   make-lexical-ref
                   make-primitive-ref
                   make-const
                   make-void)
                 ((top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top))
                 ("i471"
                  "i469"
                  "i467"
                  "i465"
                  "i463"
                  "i461"
                  "i459"
                  "i457"
                  "i455"
                  "i453"
                  "i451"
                  "i449"
                  "i447"
                  "i445"
                  "i443"
                  "i441"
                  "i439"
                  "i437"
                  "i435"
                  "i433"
                  "i431"
                  "i429"
                  "i427"
                  "i425"
                  "i423"
                  "i421"
                  "i419"
                  "i417"
                  "i415"
                  "i413"
                  "i411"
                  "i409"
                  "i407"
                  "i405"
                  "i403"
                  "i402"
                  "i400"
                  "i397"
                  "i396"
                  "i395"
                  "i393"
                  "i392"
                  "i390"
                  "i388"
                  "i386"
                  "i384"
                  "i382"
                  "i380"
                  "i378"
                  "i376"
                  "i373"
                  "i371"
                  "i370"
                  "i368"
                  "i366"
                  "i364"
                  "i362"
                  "i361"
                  "i360"
                  "i359"
                  "i357"
                  "i356"
                  "i353"
                  "i351"
                  "i349"
                  "i347"
                  "i345"
                  "i343"
                  "i341"
                  "i340"
                  "i339"
                  "i337"
                  "i335"
                  "i334"
                  "i331"
                  "i330"
                  "i328"
                  "i326"
                  "i324"
                  "i322"
                  "i320"
                  "i318"
                  "i316"
                  "i314"
                  "i312"
                  "i309"
                  "i307"
                  "i305"
                  "i303"
                  "i301"
                  "i299"
                  "i297"
                  "i295"
                  "i293"
                  "i291"
                  "i289"
                  "i287"
                  "i285"
                  "i283"
                  "i281"
                  "i279"
                  "i277"
                  "i275"
                  "i273"
                  "i271"
                  "i269"
                  "i267"
                  "i265"
                  "i263"
                  "i262"
                  "i259"
                  "i257"
                  "i256"
                  "i255"
                  "i254"
                  "i253"
                  "i251"
                  "i249"
                  "i247"
                  "i244"
                  "i242"
                  "i240"
                  "i238"
                  "i236"
                  "i234"
                  "i232"
                  "i230"
                  "i228"
                  "i226"
                  "i224"
                  "i222"
                  "i220"
                  "i218"
                  "i216"
                  "i214"
                  "i212"
                  "i210"
                  "i208"))
               #(ribcage
                 (define-structure
                   define-expansion-accessors
                   define-expansion-constructors)
                 ((top) (top) (top))
                 ("i46" "i45" "i44")))
              (hygiene guile)))
         #f)))
   (#{lambda-formals 4384}#
     (lambda (#{orig-args 32817}#)
       (letrec*
         ((#{req 32818}#
            (lambda (#{args 32822}# #{rreq 32823}#)
              (let ((#{tmp 32825}# ($sc-dispatch #{args 32822}# '())))
                (if #{tmp 32825}#
                  (@apply
                    (lambda ()
                      (#{check 32819}# (reverse #{rreq 32823}#) #f))
                    #{tmp 32825}#)
                  (let ((#{tmp 32941}#
                          ($sc-dispatch #{args 32822}# '(any . any))))
                    (if (if #{tmp 32941}#
                          (@apply
                            (lambda (#{a 32945}# #{b 32946}#)
                              (if (symbol? #{a 32945}#)
                                #t
                                (if (if (vector? #{a 32945}#)
                                      (if (= (vector-length #{a 32945}#) 4)
                                        (eq? (vector-ref #{a 32945}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 32945}# 1))
                                  #f)))
                            #{tmp 32941}#)
                          #f)
                      (@apply
                        (lambda (#{a 32973}# #{b 32974}#)
                          (#{req 32818}#
                            #{b 32974}#
                            (cons #{a 32973}# #{rreq 32823}#)))
                        #{tmp 32941}#)
                      (let ((#{tmp 32975}# (list #{args 32822}#)))
                        (if (@apply
                              (lambda (#{r 32977}#)
                                (if (symbol? #{r 32977}#)
                                  #t
                                  (if (if (vector? #{r 32977}#)
                                        (if (= (vector-length #{r 32977}#) 4)
                                          (eq? (vector-ref #{r 32977}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref #{r 32977}# 1))
                                    #f)))
                              #{tmp 32975}#)
                          (@apply
                            (lambda (#{r 33007}#)
                              (#{check 32819}#
                                (reverse #{rreq 32823}#)
                                #{r 33007}#))
                            #{tmp 32975}#)
                          (syntax-violation
                            'lambda
                            "invalid argument list"
                            #{orig-args 32817}#
                            #{args 32822}#)))))))))
          (#{check 32819}#
            (lambda (#{req 33131}# #{rest 33132}#)
              (if (#{distinct-bound-ids? 4366}#
                    (if #{rest 33132}#
                      (cons #{rest 33132}# #{req 33131}#)
                      #{req 33131}#))
                (values #{req 33131}# #f #{rest 33132}# #f)
                (syntax-violation
                  'lambda
                  "duplicate identifier in argument list"
                  #{orig-args 32817}#)))))
         (#{req 32818}# #{orig-args 32817}# '()))))
   (#{chi-simple-lambda 4385}#
     (lambda (#{e 33241}#
              #{r 33242}#
              #{w 33243}#
              #{s 33244}#
              #{mod 33245}#
              #{req 33246}#
              #{rest 33247}#
              #{meta 33248}#
              #{body 33249}#)
       (let ((#{ids 33250}#
               (if #{rest 33247}#
                 (append #{req 33246}# (list #{rest 33247}#))
                 #{req 33246}#)))
         (let ((#{vars 33251}#
                 (map #{gen-var 4389}# #{ids 33250}#)))
           (let ((#{labels 33252}#
                   (#{gen-labels 4346}# #{ids 33250}#)))
             (#{build-simple-lambda 4318}#
               #{s 33244}#
               (map syntax->datum #{req 33246}#)
               (if #{rest 33247}#
                 (syntax->datum #{rest 33247}#)
                 #f)
               #{vars 33251}#
               #{meta 33248}#
               (#{chi-body 4379}#
                 #{body 33249}#
                 (let ((#{x 33441}#
                         (begin
                           (if (if (pair? #{e 33241}#) #{s 33244}# #f)
                             (set-source-properties! #{e 33241}# #{s 33244}#))
                           #{e 33241}#)))
                   (if (if (null? (car #{w 33243}#))
                         (null? (cdr #{w 33243}#))
                         #f)
                     #{x 33441}#
                     (if (if (vector? #{x 33441}#)
                           (if (= (vector-length #{x 33441}#) 4)
                             (eq? (vector-ref #{x 33441}# 0) 'syntax-object)
                             #f)
                           #f)
                       (let ((#{expression 33473}# (vector-ref #{x 33441}# 1))
                             (#{wrap 33474}#
                               (let ((#{w2 33482}# (vector-ref #{x 33441}# 2)))
                                 (let ((#{m1 33483}# (car #{w 33243}#))
                                       (#{s1 33484}# (cdr #{w 33243}#)))
                                   (if (null? #{m1 33483}#)
                                     (if (null? #{s1 33484}#)
                                       #{w2 33482}#
                                       (cons (car #{w2 33482}#)
                                             (let ((#{m2 33499}#
                                                     (cdr #{w2 33482}#)))
                                               (if (null? #{m2 33499}#)
                                                 #{s1 33484}#
                                                 (append
                                                   #{s1 33484}#
                                                   #{m2 33499}#)))))
                                     (cons (let ((#{m2 33507}#
                                                   (car #{w2 33482}#)))
                                             (if (null? #{m2 33507}#)
                                               #{m1 33483}#
                                               (append
                                                 #{m1 33483}#
                                                 #{m2 33507}#)))
                                           (let ((#{m2 33515}#
                                                   (cdr #{w2 33482}#)))
                                             (if (null? #{m2 33515}#)
                                               #{s1 33484}#
                                               (append
                                                 #{s1 33484}#
                                                 #{m2 33515}#))))))))
                             (#{module 33475}# (vector-ref #{x 33441}# 3)))
                         (vector
                           'syntax-object
                           #{expression 33473}#
                           #{wrap 33474}#
                           #{module 33475}#))
                       (if (null? #{x 33441}#)
                         #{x 33441}#
                         (vector
                           'syntax-object
                           #{x 33441}#
                           #{w 33243}#
                           #{mod 33245}#)))))
                 (#{extend-var-env 4338}#
                   #{labels 33252}#
                   #{vars 33251}#
                   #{r 33242}#)
                 (#{make-binding-wrap 4357}#
                   #{ids 33250}#
                   #{labels 33252}#
                   #{w 33243}#)
                 #{mod 33245}#)))))))
   (#{lambda*-formals 4386}#
     (lambda (#{orig-args 33746}#)
       (letrec*
         ((#{req 33747}#
            (lambda (#{args 33754}# #{rreq 33755}#)
              (let ((#{tmp 33757}# ($sc-dispatch #{args 33754}# '())))
                (if #{tmp 33757}#
                  (@apply
                    (lambda ()
                      (#{check 33751}#
                        (reverse #{rreq 33755}#)
                        '()
                        #f
                        '()))
                    #{tmp 33757}#)
                  (let ((#{tmp 33876}#
                          ($sc-dispatch #{args 33754}# '(any . any))))
                    (if (if #{tmp 33876}#
                          (@apply
                            (lambda (#{a 33880}# #{b 33881}#)
                              (if (symbol? #{a 33880}#)
                                #t
                                (if (if (vector? #{a 33880}#)
                                      (if (= (vector-length #{a 33880}#) 4)
                                        (eq? (vector-ref #{a 33880}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 33880}# 1))
                                  #f)))
                            #{tmp 33876}#)
                          #f)
                      (@apply
                        (lambda (#{a 33908}# #{b 33909}#)
                          (#{req 33747}#
                            #{b 33909}#
                            (cons #{a 33908}# #{rreq 33755}#)))
                        #{tmp 33876}#)
                      (let ((#{tmp 33910}#
                              ($sc-dispatch #{args 33754}# '(any . any))))
                        (if (if #{tmp 33910}#
                              (@apply
                                (lambda (#{a 33914}# #{b 33915}#)
                                  (eq? (syntax->datum #{a 33914}#) #:optional))
                                #{tmp 33910}#)
                              #f)
                          (@apply
                            (lambda (#{a 33916}# #{b 33917}#)
                              (#{opt 33748}#
                                #{b 33917}#
                                (reverse #{rreq 33755}#)
                                '()))
                            #{tmp 33910}#)
                          (let ((#{tmp 33920}#
                                  ($sc-dispatch #{args 33754}# '(any . any))))
                            (if (if #{tmp 33920}#
                                  (@apply
                                    (lambda (#{a 33924}# #{b 33925}#)
                                      (eq? (syntax->datum #{a 33924}#) #:key))
                                    #{tmp 33920}#)
                                  #f)
                              (@apply
                                (lambda (#{a 33926}# #{b 33927}#)
                                  (#{key 33749}#
                                    #{b 33927}#
                                    (reverse #{rreq 33755}#)
                                    '()
                                    '()))
                                #{tmp 33920}#)
                              (let ((#{tmp 33930}#
                                      ($sc-dispatch
                                        #{args 33754}#
                                        '(any any))))
                                (if (if #{tmp 33930}#
                                      (@apply
                                        (lambda (#{a 33934}# #{b 33935}#)
                                          (eq? (syntax->datum #{a 33934}#)
                                               #:rest))
                                        #{tmp 33930}#)
                                      #f)
                                  (@apply
                                    (lambda (#{a 33936}# #{b 33937}#)
                                      (#{rest 33750}#
                                        #{b 33937}#
                                        (reverse #{rreq 33755}#)
                                        '()
                                        '()))
                                    #{tmp 33930}#)
                                  (let ((#{tmp 33940}# (list #{args 33754}#)))
                                    (if (@apply
                                          (lambda (#{r 33942}#)
                                            (if (symbol? #{r 33942}#)
                                              #t
                                              (if (if (vector? #{r 33942}#)
                                                    (if (= (vector-length
                                                             #{r 33942}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{r 33942}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref #{r 33942}# 1))
                                                #f)))
                                          #{tmp 33940}#)
                                      (@apply
                                        (lambda (#{r 33972}#)
                                          (#{rest 33750}#
                                            #{r 33972}#
                                            (reverse #{rreq 33755}#)
                                            '()
                                            '()))
                                        #{tmp 33940}#)
                                      (syntax-violation
                                        'lambda*
                                        "invalid argument list"
                                        #{orig-args 33746}#
                                        #{args 33754}#)))))))))))))))
          (#{opt 33748}#
            (lambda (#{args 33991}# #{req 33992}# #{ropt 33993}#)
              (let ((#{tmp 33995}# ($sc-dispatch #{args 33991}# '())))
                (if #{tmp 33995}#
                  (@apply
                    (lambda ()
                      (#{check 33751}#
                        #{req 33992}#
                        (reverse #{ropt 33993}#)
                        #f
                        '()))
                    #{tmp 33995}#)
                  (let ((#{tmp 34116}#
                          ($sc-dispatch #{args 33991}# '(any . any))))
                    (if (if #{tmp 34116}#
                          (@apply
                            (lambda (#{a 34120}# #{b 34121}#)
                              (if (symbol? #{a 34120}#)
                                #t
                                (if (if (vector? #{a 34120}#)
                                      (if (= (vector-length #{a 34120}#) 4)
                                        (eq? (vector-ref #{a 34120}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 34120}# 1))
                                  #f)))
                            #{tmp 34116}#)
                          #f)
                      (@apply
                        (lambda (#{a 34148}# #{b 34149}#)
                          (#{opt 33748}#
                            #{b 34149}#
                            #{req 33992}#
                            (cons (cons #{a 34148}#
                                        '(#(syntax-object
                                            #f
                                            ((top)
                                             #(ribcage
                                               #(a b)
                                               #((top) (top))
                                               #("i2402" "i2403"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(args req ropt)
                                               #((top) (top) (top))
                                               #("i2392" "i2393" "i2394"))
                                             #(ribcage
                                               (check rest key opt req)
                                               ((top) (top) (top) (top) (top))
                                               ("i2338"
                                                "i2336"
                                                "i2334"
                                                "i2332"
                                                "i2330"))
                                             #(ribcage
                                               #(orig-args)
                                               #((top))
                                               #("i2329"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 chi-lambda-case
                                                 lambda*-formals
                                                 chi-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 chi-void
                                                 eval-local-transformer
                                                 chi-local-syntax
                                                 chi-body
                                                 chi-macro
                                                 chi-call
                                                 chi-expr
                                                 chi
                                                 syntax-type
                                                 chi-when-list
                                                 chi-install-global
                                                 chi-top-sequence
                                                 chi-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-primcall
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-call
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-seq
                                                 make-primcall
                                                 make-call
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i471"
                                                "i469"
                                                "i467"
                                                "i465"
                                                "i463"
                                                "i461"
                                                "i459"
                                                "i457"
                                                "i455"
                                                "i453"
                                                "i451"
                                                "i449"
                                                "i447"
                                                "i445"
                                                "i443"
                                                "i441"
                                                "i439"
                                                "i437"
                                                "i435"
                                                "i433"
                                                "i431"
                                                "i429"
                                                "i427"
                                                "i425"
                                                "i423"
                                                "i421"
                                                "i419"
                                                "i417"
                                                "i415"
                                                "i413"
                                                "i411"
                                                "i409"
                                                "i407"
                                                "i405"
                                                "i403"
                                                "i402"
                                                "i400"
                                                "i397"
                                                "i396"
                                                "i395"
                                                "i393"
                                                "i392"
                                                "i390"
                                                "i388"
                                                "i386"
                                                "i384"
                                                "i382"
                                                "i380"
                                                "i378"
                                                "i376"
                                                "i373"
                                                "i371"
                                                "i370"
                                                "i368"
                                                "i366"
                                                "i364"
                                                "i362"
                                                "i361"
                                                "i360"
                                                "i359"
                                                "i357"
                                                "i356"
                                                "i353"
                                                "i351"
                                                "i349"
                                                "i347"
                                                "i345"
                                                "i343"
                                                "i341"
                                                "i340"
                                                "i339"
                                                "i337"
                                                "i335"
                                                "i334"
                                                "i331"
                                                "i330"
                                                "i328"
                                                "i326"
                                                "i324"
                                                "i322"
                                                "i320"
                                                "i318"
                                                "i316"
                                                "i314"
                                                "i312"
                                                "i309"
                                                "i307"
                                                "i305"
                                                "i303"
                                                "i301"
                                                "i299"
                                                "i297"
                                                "i295"
                                                "i293"
                                                "i291"
                                                "i289"
                                                "i287"
                                                "i285"
                                                "i283"
                                                "i281"
                                                "i279"
                                                "i277"
                                                "i275"
                                                "i273"
                                                "i271"
                                                "i269"
                                                "i267"
                                                "i265"
                                                "i263"
                                                "i262"
                                                "i259"
                                                "i257"
                                                "i256"
                                                "i255"
                                                "i254"
                                                "i253"
                                                "i251"
                                                "i249"
                                                "i247"
                                                "i244"
                                                "i242"
                                                "i240"
                                                "i238"
                                                "i236"
                                                "i234"
                                                "i232"
                                                "i230"
                                                "i228"
                                                "i226"
                                                "i224"
                                                "i222"
                                                "i220"
                                                "i218"
                                                "i216"
                                                "i214"
                                                "i212"
                                                "i210"
                                                "i208"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("i46" "i45" "i44")))
                                            (hygiene guile))))
                                  #{ropt 33993}#)))
                        #{tmp 34116}#)
                      (let ((#{tmp 34150}#
                              ($sc-dispatch
                                #{args 33991}#
                                '((any any) . any))))
                        (if (if #{tmp 34150}#
                              (@apply
                                (lambda (#{a 34154}#
                                         #{init 34155}#
                                         #{b 34156}#)
                                  (if (symbol? #{a 34154}#)
                                    #t
                                    (if (if (vector? #{a 34154}#)
                                          (if (= (vector-length #{a 34154}#) 4)
                                            (eq? (vector-ref #{a 34154}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref #{a 34154}# 1))
                                      #f)))
                                #{tmp 34150}#)
                              #f)
                          (@apply
                            (lambda (#{a 34183}# #{init 34184}# #{b 34185}#)
                              (#{opt 33748}#
                                #{b 34185}#
                                #{req 33992}#
                                (cons (list #{a 34183}# #{init 34184}#)
                                      #{ropt 33993}#)))
                            #{tmp 34150}#)
                          (let ((#{tmp 34186}#
                                  ($sc-dispatch #{args 33991}# '(any . any))))
                            (if (if #{tmp 34186}#
                                  (@apply
                                    (lambda (#{a 34190}# #{b 34191}#)
                                      (eq? (syntax->datum #{a 34190}#) #:key))
                                    #{tmp 34186}#)
                                  #f)
                              (@apply
                                (lambda (#{a 34192}# #{b 34193}#)
                                  (#{key 33749}#
                                    #{b 34193}#
                                    #{req 33992}#
                                    (reverse #{ropt 33993}#)
                                    '()))
                                #{tmp 34186}#)
                              (let ((#{tmp 34196}#
                                      ($sc-dispatch
                                        #{args 33991}#
                                        '(any any))))
                                (if (if #{tmp 34196}#
                                      (@apply
                                        (lambda (#{a 34200}# #{b 34201}#)
                                          (eq? (syntax->datum #{a 34200}#)
                                               #:rest))
                                        #{tmp 34196}#)
                                      #f)
                                  (@apply
                                    (lambda (#{a 34202}# #{b 34203}#)
                                      (#{rest 33750}#
                                        #{b 34203}#
                                        #{req 33992}#
                                        (reverse #{ropt 33993}#)
                                        '()))
                                    #{tmp 34196}#)
                                  (let ((#{tmp 34206}# (list #{args 33991}#)))
                                    (if (@apply
                                          (lambda (#{r 34208}#)
                                            (if (symbol? #{r 34208}#)
                                              #t
                                              (if (if (vector? #{r 34208}#)
                                                    (if (= (vector-length
                                                             #{r 34208}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{r 34208}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref #{r 34208}# 1))
                                                #f)))
                                          #{tmp 34206}#)
                                      (@apply
                                        (lambda (#{r 34238}#)
                                          (#{rest 33750}#
                                            #{r 34238}#
                                            #{req 33992}#
                                            (reverse #{ropt 33993}#)
                                            '()))
                                        #{tmp 34206}#)
                                      (syntax-violation
                                        'lambda*
                                        "invalid optional argument list"
                                        #{orig-args 33746}#
                                        #{args 33991}#)))))))))))))))
          (#{key 33749}#
            (lambda (#{args 34257}#
                     #{req 34258}#
                     #{opt 34259}#
                     #{rkey 34260}#)
              (let ((#{tmp 34262}# ($sc-dispatch #{args 34257}# '())))
                (if #{tmp 34262}#
                  (@apply
                    (lambda ()
                      (#{check 33751}#
                        #{req 34258}#
                        #{opt 34259}#
                        #f
                        (cons #f (reverse #{rkey 34260}#))))
                    #{tmp 34262}#)
                  (let ((#{tmp 34384}#
                          ($sc-dispatch #{args 34257}# '(any . any))))
                    (if (if #{tmp 34384}#
                          (@apply
                            (lambda (#{a 34388}# #{b 34389}#)
                              (if (symbol? #{a 34388}#)
                                #t
                                (if (if (vector? #{a 34388}#)
                                      (if (= (vector-length #{a 34388}#) 4)
                                        (eq? (vector-ref #{a 34388}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 34388}# 1))
                                  #f)))
                            #{tmp 34384}#)
                          #f)
                      (@apply
                        (lambda (#{a 34416}# #{b 34417}#)
                          (let ((#{tmp 34418}#
                                  (symbol->keyword
                                    (syntax->datum #{a 34416}#))))
                            (#{key 33749}#
                              #{b 34417}#
                              #{req 34258}#
                              #{opt 34259}#
                              (cons (cons #{tmp 34418}#
                                          (cons #{a 34416}#
                                                '(#(syntax-object
                                                    #f
                                                    ((top)
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(k)
                                                       #((top))
                                                       #("i2465"))
                                                     #(ribcage
                                                       #(a b)
                                                       #((top) (top))
                                                       #("i2459" "i2460"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(args req opt rkey)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i2448"
                                                         "i2449"
                                                         "i2450"
                                                         "i2451"))
                                                     #(ribcage
                                                       (check rest key opt req)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i2338"
                                                        "i2336"
                                                        "i2334"
                                                        "i2332"
                                                        "i2330"))
                                                     #(ribcage
                                                       #(orig-args)
                                                       #((top))
                                                       #("i2329"))
                                                     #(ribcage
                                                       (lambda-var-list
                                                         gen-var
                                                         strip
                                                         chi-lambda-case
                                                         lambda*-formals
                                                         chi-simple-lambda
                                                         lambda-formals
                                                         ellipsis?
                                                         chi-void
                                                         eval-local-transformer
                                                         chi-local-syntax
                                                         chi-body
                                                         chi-macro
                                                         chi-call
                                                         chi-expr
                                                         chi
                                                         syntax-type
                                                         chi-when-list
                                                         chi-install-global
                                                         chi-top-sequence
                                                         chi-sequence
                                                         source-wrap
                                                         wrap
                                                         bound-id-member?
                                                         distinct-bound-ids?
                                                         valid-bound-ids?
                                                         bound-id=?
                                                         free-id=?
                                                         id-var-name
                                                         same-marks?
                                                         join-marks
                                                         join-wraps
                                                         smart-append
                                                         make-binding-wrap
                                                         extend-ribcage!
                                                         make-empty-ribcage
                                                         new-mark
                                                         anti-mark
                                                         the-anti-mark
                                                         top-marked?
                                                         top-wrap
                                                         empty-wrap
                                                         set-ribcage-labels!
                                                         set-ribcage-marks!
                                                         set-ribcage-symnames!
                                                         ribcage-labels
                                                         ribcage-marks
                                                         ribcage-symnames
                                                         ribcage?
                                                         make-ribcage
                                                         gen-labels
                                                         gen-label
                                                         make-rename
                                                         rename-marks
                                                         rename-new
                                                         rename-old
                                                         subst-rename?
                                                         wrap-subst
                                                         wrap-marks
                                                         make-wrap
                                                         id-sym-name&marks
                                                         id-sym-name
                                                         id?
                                                         nonsymbol-id?
                                                         global-extend
                                                         lookup
                                                         macros-only-env
                                                         extend-var-env
                                                         extend-env
                                                         null-env
                                                         binding-value
                                                         binding-type
                                                         make-binding
                                                         arg-check
                                                         source-annotation
                                                         no-source
                                                         set-syntax-object-module!
                                                         set-syntax-object-wrap!
                                                         set-syntax-object-expression!
                                                         syntax-object-module
                                                         syntax-object-wrap
                                                         syntax-object-expression
                                                         syntax-object?
                                                         make-syntax-object
                                                         build-lexical-var
                                                         build-letrec
                                                         build-named-let
                                                         build-let
                                                         build-sequence
                                                         build-data
                                                         build-primref
                                                         build-primcall
                                                         build-lambda-case
                                                         build-case-lambda
                                                         build-simple-lambda
                                                         build-global-definition
                                                         build-global-assignment
                                                         build-global-reference
                                                         analyze-variable
                                                         build-lexical-assignment
                                                         build-lexical-reference
                                                         build-dynlet
                                                         build-conditional
                                                         build-call
                                                         build-void
                                                         maybe-name-value!
                                                         decorate-source
                                                         get-global-definition-hook
                                                         put-global-definition-hook
                                                         gensym-hook
                                                         local-eval-hook
                                                         top-level-eval-hook
                                                         fx<
                                                         fx=
                                                         fx-
                                                         fx+
                                                         set-lambda-meta!
                                                         lambda-meta
                                                         lambda?
                                                         make-dynlet
                                                         make-letrec
                                                         make-let
                                                         make-lambda-case
                                                         make-lambda
                                                         make-seq
                                                         make-primcall
                                                         make-call
                                                         make-conditional
                                                         make-toplevel-define
                                                         make-toplevel-set
                                                         make-toplevel-ref
                                                         make-module-set
                                                         make-module-ref
                                                         make-lexical-set
                                                         make-lexical-ref
                                                         make-primitive-ref
                                                         make-const
                                                         make-void)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i471"
                                                        "i469"
                                                        "i467"
                                                        "i465"
                                                        "i463"
                                                        "i461"
                                                        "i459"
                                                        "i457"
                                                        "i455"
                                                        "i453"
                                                        "i451"
                                                        "i449"
                                                        "i447"
                                                        "i445"
                                                        "i443"
                                                        "i441"
                                                        "i439"
                                                        "i437"
                                                        "i435"
                                                        "i433"
                                                        "i431"
                                                        "i429"
                                                        "i427"
                                                        "i425"
                                                        "i423"
                                                        "i421"
                                                        "i419"
                                                        "i417"
                                                        "i415"
                                                        "i413"
                                                        "i411"
                                                        "i409"
                                                        "i407"
                                                        "i405"
                                                        "i403"
                                                        "i402"
                                                        "i400"
                                                        "i397"
                                                        "i396"
                                                        "i395"
                                                        "i393"
                                                        "i392"
                                                        "i390"
                                                        "i388"
                                                        "i386"
                                                        "i384"
                                                        "i382"
                                                        "i380"
                                                        "i378"
                                                        "i376"
                                                        "i373"
                                                        "i371"
                                                        "i370"
                                                        "i368"
                                                        "i366"
                                                        "i364"
                                                        "i362"
                                                        "i361"
                                                        "i360"
                                                        "i359"
                                                        "i357"
                                                        "i356"
                                                        "i353"
                                                        "i351"
                                                        "i349"
                                                        "i347"
                                                        "i345"
                                                        "i343"
                                                        "i341"
                                                        "i340"
                                                        "i339"
                                                        "i337"
                                                        "i335"
                                                        "i334"
                                                        "i331"
                                                        "i330"
                                                        "i328"
                                                        "i326"
                                                        "i324"
                                                        "i322"
                                                        "i320"
                                                        "i318"
                                                        "i316"
                                                        "i314"
                                                        "i312"
                                                        "i309"
                                                        "i307"
                                                        "i305"
                                                        "i303"
                                                        "i301"
                                                        "i299"
                                                        "i297"
                                                        "i295"
                                                        "i293"
                                                        "i291"
                                                        "i289"
                                                        "i287"
                                                        "i285"
                                                        "i283"
                                                        "i281"
                                                        "i279"
                                                        "i277"
                                                        "i275"
                                                        "i273"
                                                        "i271"
                                                        "i269"
                                                        "i267"
                                                        "i265"
                                                        "i263"
                                                        "i262"
                                                        "i259"
                                                        "i257"
                                                        "i256"
                                                        "i255"
                                                        "i254"
                                                        "i253"
                                                        "i251"
                                                        "i249"
                                                        "i247"
                                                        "i244"
                                                        "i242"
                                                        "i240"
                                                        "i238"
                                                        "i236"
                                                        "i234"
                                                        "i232"
                                                        "i230"
                                                        "i228"
                                                        "i226"
                                                        "i224"
                                                        "i222"
                                                        "i220"
                                                        "i218"
                                                        "i216"
                                                        "i214"
                                                        "i212"
                                                        "i210"
                                                        "i208"))
                                                     #(ribcage
                                                       (define-structure
                                                         define-expansion-accessors
                                                         define-expansion-constructors)
                                                       ((top) (top) (top))
                                                       ("i46" "i45" "i44")))
                                                    (hygiene guile)))))
                                    #{rkey 34260}#))))
                        #{tmp 34384}#)
                      (let ((#{tmp 34421}#
                              ($sc-dispatch
                                #{args 34257}#
                                '((any any) . any))))
                        (if (if #{tmp 34421}#
                              (@apply
                                (lambda (#{a 34425}#
                                         #{init 34426}#
                                         #{b 34427}#)
                                  (if (symbol? #{a 34425}#)
                                    #t
                                    (if (if (vector? #{a 34425}#)
                                          (if (= (vector-length #{a 34425}#) 4)
                                            (eq? (vector-ref #{a 34425}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref #{a 34425}# 1))
                                      #f)))
                                #{tmp 34421}#)
                              #f)
                          (@apply
                            (lambda (#{a 34454}# #{init 34455}# #{b 34456}#)
                              (let ((#{tmp 34457}#
                                      (symbol->keyword
                                        (syntax->datum #{a 34454}#))))
                                (#{key 33749}#
                                  #{b 34456}#
                                  #{req 34258}#
                                  #{opt 34259}#
                                  (cons (list #{tmp 34457}#
                                              #{a 34454}#
                                              #{init 34455}#)
                                        #{rkey 34260}#))))
                            #{tmp 34421}#)
                          (let ((#{tmp 34460}#
                                  ($sc-dispatch
                                    #{args 34257}#
                                    '((any any any) . any))))
                            (if (if #{tmp 34460}#
                                  (@apply
                                    (lambda (#{a 34464}#
                                             #{init 34465}#
                                             #{k 34466}#
                                             #{b 34467}#)
                                      (if (if (symbol? #{a 34464}#)
                                            #t
                                            (if (if (vector? #{a 34464}#)
                                                  (if (= (vector-length
                                                           #{a 34464}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{a 34464}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (symbol?
                                                (vector-ref #{a 34464}# 1))
                                              #f))
                                        (keyword? (syntax->datum #{k 34466}#))
                                        #f))
                                    #{tmp 34460}#)
                                  #f)
                              (@apply
                                (lambda (#{a 34494}#
                                         #{init 34495}#
                                         #{k 34496}#
                                         #{b 34497}#)
                                  (#{key 33749}#
                                    #{b 34497}#
                                    #{req 34258}#
                                    #{opt 34259}#
                                    (cons (list #{k 34496}#
                                                #{a 34494}#
                                                #{init 34495}#)
                                          #{rkey 34260}#)))
                                #{tmp 34460}#)
                              (let ((#{tmp 34498}#
                                      ($sc-dispatch #{args 34257}# '(any))))
                                (if (if #{tmp 34498}#
                                      (@apply
                                        (lambda (#{aok 34502}#)
                                          (eq? (syntax->datum #{aok 34502}#)
                                               #:allow-other-keys))
                                        #{tmp 34498}#)
                                      #f)
                                  (@apply
                                    (lambda (#{aok 34503}#)
                                      (#{check 33751}#
                                        #{req 34258}#
                                        #{opt 34259}#
                                        #f
                                        (cons #t (reverse #{rkey 34260}#))))
                                    #{tmp 34498}#)
                                  (let ((#{tmp 34622}#
                                          ($sc-dispatch
                                            #{args 34257}#
                                            '(any any any))))
                                    (if (if #{tmp 34622}#
                                          (@apply
                                            (lambda (#{aok 34626}#
                                                     #{a 34627}#
                                                     #{b 34628}#)
                                              (if (eq? (syntax->datum
                                                         #{aok 34626}#)
                                                       #:allow-other-keys)
                                                (eq? (syntax->datum
                                                       #{a 34627}#)
                                                     #:rest)
                                                #f))
                                            #{tmp 34622}#)
                                          #f)
                                      (@apply
                                        (lambda (#{aok 34629}#
                                                 #{a 34630}#
                                                 #{b 34631}#)
                                          (#{rest 33750}#
                                            #{b 34631}#
                                            #{req 34258}#
                                            #{opt 34259}#
                                            (cons #t
                                                  (reverse #{rkey 34260}#))))
                                        #{tmp 34622}#)
                                      (let ((#{tmp 34634}#
                                              ($sc-dispatch
                                                #{args 34257}#
                                                '(any . any))))
                                        (if (if #{tmp 34634}#
                                              (@apply
                                                (lambda (#{aok 34638}#
                                                         #{r 34639}#)
                                                  (if (eq? (syntax->datum
                                                             #{aok 34638}#)
                                                           #:allow-other-keys)
                                                    (if (symbol? #{r 34639}#)
                                                      #t
                                                      (if (if (vector?
                                                                #{r 34639}#)
                                                            (if (= (vector-length
                                                                     #{r 34639}#)
                                                                   4)
                                                              (eq? (vector-ref
                                                                     #{r 34639}#
                                                                     0)
                                                                   'syntax-object)
                                                              #f)
                                                            #f)
                                                        (symbol?
                                                          (vector-ref
                                                            #{r 34639}#
                                                            1))
                                                        #f))
                                                    #f))
                                                #{tmp 34634}#)
                                              #f)
                                          (@apply
                                            (lambda (#{aok 34666}# #{r 34667}#)
                                              (#{rest 33750}#
                                                #{r 34667}#
                                                #{req 34258}#
                                                #{opt 34259}#
                                                (cons #t
                                                      (reverse
                                                        #{rkey 34260}#))))
                                            #{tmp 34634}#)
                                          (let ((#{tmp 34670}#
                                                  ($sc-dispatch
                                                    #{args 34257}#
                                                    '(any any))))
                                            (if (if #{tmp 34670}#
                                                  (@apply
                                                    (lambda (#{a 34674}#
                                                             #{b 34675}#)
                                                      (eq? (syntax->datum
                                                             #{a 34674}#)
                                                           #:rest))
                                                    #{tmp 34670}#)
                                                  #f)
                                              (@apply
                                                (lambda (#{a 34676}#
                                                         #{b 34677}#)
                                                  (#{rest 33750}#
                                                    #{b 34677}#
                                                    #{req 34258}#
                                                    #{opt 34259}#
                                                    (cons #f
                                                          (reverse
                                                            #{rkey 34260}#))))
                                                #{tmp 34670}#)
                                              (let ((#{tmp 34680}#
                                                      (list #{args 34257}#)))
                                                (if (@apply
                                                      (lambda (#{r 34682}#)
                                                        (if (symbol?
                                                              #{r 34682}#)
                                                          #t
                                                          (if (if (vector?
                                                                    #{r 34682}#)
                                                                (if (= (vector-length
                                                                         #{r 34682}#)
                                                                       4)
                                                                  (eq? (vector-ref
                                                                         #{r 34682}#
                                                                         0)
                                                                       'syntax-object)
                                                                  #f)
                                                                #f)
                                                            (symbol?
                                                              (vector-ref
                                                                #{r 34682}#
                                                                1))
                                                            #f)))
                                                      #{tmp 34680}#)
                                                  (@apply
                                                    (lambda (#{r 34712}#)
                                                      (#{rest 33750}#
                                                        #{r 34712}#
                                                        #{req 34258}#
                                                        #{opt 34259}#
                                                        (cons #f
                                                              (reverse
                                                                #{rkey 34260}#))))
                                                    #{tmp 34680}#)
                                                  (syntax-violation
                                                    'lambda*
                                                    "invalid keyword argument list"
                                                    #{orig-args 33746}#
                                                    #{args 34257}#)))))))))))))))))))))
          (#{rest 33750}#
            (lambda (#{args 34740}#
                     #{req 34741}#
                     #{opt 34742}#
                     #{kw 34743}#)
              (let ((#{tmp 34745}# (list #{args 34740}#)))
                (if (@apply
                      (lambda (#{r 34747}#)
                        (if (symbol? #{r 34747}#)
                          #t
                          (if (if (vector? #{r 34747}#)
                                (if (= (vector-length #{r 34747}#) 4)
                                  (eq? (vector-ref #{r 34747}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{r 34747}# 1))
                            #f)))
                      #{tmp 34745}#)
                  (@apply
                    (lambda (#{r 34777}#)
                      (#{check 33751}#
                        #{req 34741}#
                        #{opt 34742}#
                        #{r 34777}#
                        #{kw 34743}#))
                    #{tmp 34745}#)
                  (syntax-violation
                    'lambda*
                    "invalid rest argument"
                    #{orig-args 33746}#
                    #{args 34740}#)))))
          (#{check 33751}#
            (lambda (#{req 34905}#
                     #{opt 34906}#
                     #{rest 34907}#
                     #{kw 34908}#)
              (if (#{distinct-bound-ids? 4366}#
                    (append
                      #{req 34905}#
                      (map car #{opt 34906}#)
                      (if #{rest 34907}# (list #{rest 34907}#) '())
                      (if (pair? #{kw 34908}#)
                        (map cadr (cdr #{kw 34908}#))
                        '())))
                (values
                  #{req 34905}#
                  #{opt 34906}#
                  #{rest 34907}#
                  #{kw 34908}#)
                (syntax-violation
                  'lambda*
                  "duplicate identifier in argument list"
                  #{orig-args 33746}#)))))
         (#{req 33747}# #{orig-args 33746}# '()))))
   (#{chi-lambda-case 4387}#
     (lambda (#{e 35017}#
              #{r 35018}#
              #{w 35019}#
              #{s 35020}#
              #{mod 35021}#
              #{get-formals 35022}#
              #{clauses 35023}#)
       (letrec*
         ((#{expand-req 35024}#
            (lambda (#{req 35160}#
                     #{opt 35161}#
                     #{rest 35162}#
                     #{kw 35163}#
                     #{body 35164}#)
              (let ((#{vars 35165}#
                      (map #{gen-var 4389}# #{req 35160}#))
                    (#{labels 35166}#
                      (#{gen-labels 4346}# #{req 35160}#)))
                (let ((#{r* 35167}#
                        (#{extend-var-env 4338}#
                          #{labels 35166}#
                          #{vars 35165}#
                          #{r 35018}#))
                      (#{w* 35168}#
                        (#{make-binding-wrap 4357}#
                          #{req 35160}#
                          #{labels 35166}#
                          #{w 35019}#)))
                  (#{expand-opt 35025}#
                    (map syntax->datum #{req 35160}#)
                    #{opt 35161}#
                    #{rest 35162}#
                    #{kw 35163}#
                    #{body 35164}#
                    (reverse #{vars 35165}#)
                    #{r* 35167}#
                    #{w* 35168}#
                    '()
                    '())))))
          (#{expand-opt 35025}#
            (lambda (#{req 35404}#
                     #{opt 35405}#
                     #{rest 35406}#
                     #{kw 35407}#
                     #{body 35408}#
                     #{vars 35409}#
                     #{r* 35410}#
                     #{w* 35411}#
                     #{out 35412}#
                     #{inits 35413}#)
              (if (pair? #{opt 35405}#)
                (let ((#{tmp 35414}# (car #{opt 35405}#)))
                  (let ((#{tmp 35415}#
                          ($sc-dispatch #{tmp 35414}# '(any any))))
                    (if #{tmp 35415}#
                      (@apply
                        (lambda (#{id 35417}# #{i 35418}#)
                          (let ((#{v 35419}#
                                  (let ((#{id 35427}#
                                          (if (if (vector? #{id 35417}#)
                                                (if (= (vector-length
                                                         #{id 35417}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{id 35417}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{id 35417}# 1)
                                            #{id 35417}#)))
                                    (gensym
                                      (string-append
                                        (symbol->string #{id 35427}#)
                                        " ")))))
                            (let ((#{l 35420}#
                                    (#{gen-labels 4346}# (list #{v 35419}#))))
                              (let ((#{r** 35421}#
                                      (#{extend-var-env 4338}#
                                        #{l 35420}#
                                        (list #{v 35419}#)
                                        #{r* 35410}#)))
                                (let ((#{w** 35422}#
                                        (#{make-binding-wrap 4357}#
                                          (list #{id 35417}#)
                                          #{l 35420}#
                                          #{w* 35411}#)))
                                  (#{expand-opt 35025}#
                                    #{req 35404}#
                                    (cdr #{opt 35405}#)
                                    #{rest 35406}#
                                    #{kw 35407}#
                                    #{body 35408}#
                                    (cons #{v 35419}# #{vars 35409}#)
                                    #{r** 35421}#
                                    #{w** 35422}#
                                    (cons (syntax->datum #{id 35417}#)
                                          #{out 35412}#)
                                    (cons (#{chi 4375}#
                                            #{i 35418}#
                                            #{r* 35410}#
                                            #{w* 35411}#
                                            #{mod 35021}#)
                                          #{inits 35413}#)))))))
                        #{tmp 35415}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp 35414}#))))
                (if #{rest 35406}#
                  (let ((#{v 35728}#
                          (let ((#{id 35738}#
                                  (if (if (vector? #{rest 35406}#)
                                        (if (= (vector-length #{rest 35406}#)
                                               4)
                                          (eq? (vector-ref #{rest 35406}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (vector-ref #{rest 35406}# 1)
                                    #{rest 35406}#)))
                            (gensym
                              (string-append
                                (symbol->string #{id 35738}#)
                                " ")))))
                    (let ((#{l 35729}#
                            (#{gen-labels 4346}# (list #{v 35728}#))))
                      (let ((#{r* 35730}#
                              (#{extend-var-env 4338}#
                                #{l 35729}#
                                (list #{v 35728}#)
                                #{r* 35410}#)))
                        (let ((#{w* 35731}#
                                (#{make-binding-wrap 4357}#
                                  (list #{rest 35406}#)
                                  #{l 35729}#
                                  #{w* 35411}#)))
                          (#{expand-kw 35026}#
                            #{req 35404}#
                            (if (pair? #{out 35412}#)
                              (reverse #{out 35412}#)
                              #f)
                            (syntax->datum #{rest 35406}#)
                            (if (pair? #{kw 35407}#)
                              (cdr #{kw 35407}#)
                              #{kw 35407}#)
                            #{body 35408}#
                            (cons #{v 35728}# #{vars 35409}#)
                            #{r* 35730}#
                            #{w* 35731}#
                            (if (pair? #{kw 35407}#) (car #{kw 35407}#) #f)
                            '()
                            #{inits 35413}#)))))
                  (#{expand-kw 35026}#
                    #{req 35404}#
                    (if (pair? #{out 35412}#)
                      (reverse #{out 35412}#)
                      #f)
                    #f
                    (if (pair? #{kw 35407}#)
                      (cdr #{kw 35407}#)
                      #{kw 35407}#)
                    #{body 35408}#
                    #{vars 35409}#
                    #{r* 35410}#
                    #{w* 35411}#
                    (if (pair? #{kw 35407}#) (car #{kw 35407}#) #f)
                    '()
                    #{inits 35413}#)))))
          (#{expand-kw 35026}#
            (lambda (#{req 35960}#
                     #{opt 35961}#
                     #{rest 35962}#
                     #{kw 35963}#
                     #{body 35964}#
                     #{vars 35965}#
                     #{r* 35966}#
                     #{w* 35967}#
                     #{aok 35968}#
                     #{out 35969}#
                     #{inits 35970}#)
              (if (pair? #{kw 35963}#)
                (let ((#{tmp 35971}# (car #{kw 35963}#)))
                  (let ((#{tmp 35972}#
                          ($sc-dispatch #{tmp 35971}# '(any any any))))
                    (if #{tmp 35972}#
                      (@apply
                        (lambda (#{k 35974}# #{id 35975}# #{i 35976}#)
                          (let ((#{v 35977}#
                                  (let ((#{id 35985}#
                                          (if (if (vector? #{id 35975}#)
                                                (if (= (vector-length
                                                         #{id 35975}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{id 35975}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{id 35975}# 1)
                                            #{id 35975}#)))
                                    (gensym
                                      (string-append
                                        (symbol->string #{id 35985}#)
                                        " ")))))
                            (let ((#{l 35978}#
                                    (#{gen-labels 4346}# (list #{v 35977}#))))
                              (let ((#{r** 35979}#
                                      (#{extend-var-env 4338}#
                                        #{l 35978}#
                                        (list #{v 35977}#)
                                        #{r* 35966}#)))
                                (let ((#{w** 35980}#
                                        (#{make-binding-wrap 4357}#
                                          (list #{id 35975}#)
                                          #{l 35978}#
                                          #{w* 35967}#)))
                                  (#{expand-kw 35026}#
                                    #{req 35960}#
                                    #{opt 35961}#
                                    #{rest 35962}#
                                    (cdr #{kw 35963}#)
                                    #{body 35964}#
                                    (cons #{v 35977}# #{vars 35965}#)
                                    #{r** 35979}#
                                    #{w** 35980}#
                                    #{aok 35968}#
                                    (cons (list (syntax->datum #{k 35974}#)
                                                (syntax->datum #{id 35975}#)
                                                #{v 35977}#)
                                          #{out 35969}#)
                                    (cons (#{chi 4375}#
                                            #{i 35976}#
                                            #{r* 35966}#
                                            #{w* 35967}#
                                            #{mod 35021}#)
                                          #{inits 35970}#)))))))
                        #{tmp 35972}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp 35971}#))))
                (#{expand-body 35027}#
                  #{req 35960}#
                  #{opt 35961}#
                  #{rest 35962}#
                  (if (if #{aok 35968}#
                        #{aok 35968}#
                        (pair? #{out 35969}#))
                    (cons #{aok 35968}# (reverse #{out 35969}#))
                    #f)
                  #{body 35964}#
                  (reverse #{vars 35965}#)
                  #{r* 35966}#
                  #{w* 35967}#
                  (reverse #{inits 35970}#)
                  '()))))
          (#{expand-body 35027}#
            (lambda (#{req 36295}#
                     #{opt 36296}#
                     #{rest 36297}#
                     #{kw 36298}#
                     #{body 36299}#
                     #{vars 36300}#
                     #{r* 36301}#
                     #{w* 36302}#
                     #{inits 36303}#
                     #{meta 36304}#)
              (let ((#{tmp 36306}#
                      ($sc-dispatch
                        #{body 36299}#
                        '(any any . each-any))))
                (if (if #{tmp 36306}#
                      (@apply
                        (lambda (#{docstring 36310}# #{e1 36311}# #{e2 36312}#)
                          (string? (syntax->datum #{docstring 36310}#)))
                        #{tmp 36306}#)
                      #f)
                  (@apply
                    (lambda (#{docstring 36313}# #{e1 36314}# #{e2 36315}#)
                      (#{expand-body 35027}#
                        #{req 36295}#
                        #{opt 36296}#
                        #{rest 36297}#
                        #{kw 36298}#
                        (cons #{e1 36314}# #{e2 36315}#)
                        #{vars 36300}#
                        #{r* 36301}#
                        #{w* 36302}#
                        #{inits 36303}#
                        (append
                          #{meta 36304}#
                          (list (cons 'documentation
                                      (syntax->datum #{docstring 36313}#))))))
                    #{tmp 36306}#)
                  (let ((#{tmp 36316}#
                          ($sc-dispatch
                            #{body 36299}#
                            '(#(vector #(each (any . any))) any . each-any))))
                    (if #{tmp 36316}#
                      (@apply
                        (lambda (#{k 36320}#
                                 #{v 36321}#
                                 #{e1 36322}#
                                 #{e2 36323}#)
                          (#{expand-body 35027}#
                            #{req 36295}#
                            #{opt 36296}#
                            #{rest 36297}#
                            #{kw 36298}#
                            (cons #{e1 36322}# #{e2 36323}#)
                            #{vars 36300}#
                            #{r* 36301}#
                            #{w* 36302}#
                            #{inits 36303}#
                            (append
                              #{meta 36304}#
                              (syntax->datum
                                (map cons #{k 36320}# #{v 36321}#)))))
                        #{tmp 36316}#)
                      (let ((#{tmp 36324}#
                              ($sc-dispatch #{body 36299}# '(any . each-any))))
                        (if #{tmp 36324}#
                          (@apply
                            (lambda (#{e1 36328}# #{e2 36329}#)
                              (values
                                #{meta 36304}#
                                #{req 36295}#
                                #{opt 36296}#
                                #{rest 36297}#
                                #{kw 36298}#
                                #{inits 36303}#
                                #{vars 36300}#
                                (#{chi-body 4379}#
                                  (cons #{e1 36328}# #{e2 36329}#)
                                  (let ((#{x 36341}#
                                          (begin
                                            (if (if (pair? #{e 35017}#)
                                                  #{s 35020}#
                                                  #f)
                                              (set-source-properties!
                                                #{e 35017}#
                                                #{s 35020}#))
                                            #{e 35017}#)))
                                    (if (if (null? (car #{w 35019}#))
                                          (null? (cdr #{w 35019}#))
                                          #f)
                                      #{x 36341}#
                                      (if (if (vector? #{x 36341}#)
                                            (if (= (vector-length #{x 36341}#)
                                                   4)
                                              (eq? (vector-ref #{x 36341}# 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (let ((#{expression 36373}#
                                                (vector-ref #{x 36341}# 1))
                                              (#{wrap 36374}#
                                                (let ((#{w2 36382}#
                                                        (vector-ref
                                                          #{x 36341}#
                                                          2)))
                                                  (let ((#{m1 36383}#
                                                          (car #{w 35019}#))
                                                        (#{s1 36384}#
                                                          (cdr #{w 35019}#)))
                                                    (if (null? #{m1 36383}#)
                                                      (if (null? #{s1 36384}#)
                                                        #{w2 36382}#
                                                        (cons (car #{w2 36382}#)
                                                              (let ((#{m2 36399}#
                                                                      (cdr #{w2 36382}#)))
                                                                (if (null? #{m2 36399}#)
                                                                  #{s1 36384}#
                                                                  (append
                                                                    #{s1 36384}#
                                                                    #{m2 36399}#)))))
                                                      (cons (let ((#{m2 36407}#
                                                                    (car #{w2 36382}#)))
                                                              (if (null? #{m2 36407}#)
                                                                #{m1 36383}#
                                                                (append
                                                                  #{m1 36383}#
                                                                  #{m2 36407}#)))
                                                            (let ((#{m2 36415}#
                                                                    (cdr #{w2 36382}#)))
                                                              (if (null? #{m2 36415}#)
                                                                #{s1 36384}#
                                                                (append
                                                                  #{s1 36384}#
                                                                  #{m2 36415}#))))))))
                                              (#{module 36375}#
                                                (vector-ref #{x 36341}# 3)))
                                          (vector
                                            'syntax-object
                                            #{expression 36373}#
                                            #{wrap 36374}#
                                            #{module 36375}#))
                                        (if (null? #{x 36341}#)
                                          #{x 36341}#
                                          (vector
                                            'syntax-object
                                            #{x 36341}#
                                            #{w 35019}#
                                            #{mod 35021}#)))))
                                  #{r* 36301}#
                                  #{w* 36302}#
                                  #{mod 35021}#)))
                            #{tmp 36324}#)
                          (syntax-violation
                            #f
                            "source expression failed to match any pattern"
                            #{body 36299}#))))))))))
         (let ((#{tmp 35029}#
                 ($sc-dispatch #{clauses 35023}# '())))
           (if #{tmp 35029}#
             (@apply
               (lambda () (values '() #f))
               #{tmp 35029}#)
             (let ((#{tmp 35034}#
                     ($sc-dispatch
                       #{clauses 35023}#
                       '((any any . each-any)
                         .
                         #(each (any any . each-any))))))
               (if #{tmp 35034}#
                 (@apply
                   (lambda (#{args 35038}#
                            #{e1 35039}#
                            #{e2 35040}#
                            #{args* 35041}#
                            #{e1* 35042}#
                            #{e2* 35043}#)
                     (call-with-values
                       (lambda ()
                         (#{get-formals 35022}# #{args 35038}#))
                       (lambda (#{req 35044}#
                                #{opt 35045}#
                                #{rest 35046}#
                                #{kw 35047}#)
                         (call-with-values
                           (lambda ()
                             (#{expand-req 35024}#
                               #{req 35044}#
                               #{opt 35045}#
                               #{rest 35046}#
                               #{kw 35047}#
                               (cons #{e1 35039}# #{e2 35040}#)))
                           (lambda (#{meta 35116}#
                                    #{req 35117}#
                                    #{opt 35118}#
                                    #{rest 35119}#
                                    #{kw 35120}#
                                    #{inits 35121}#
                                    #{vars 35122}#
                                    #{body 35123}#)
                             (call-with-values
                               (lambda ()
                                 (#{chi-lambda-case 4387}#
                                   #{e 35017}#
                                   #{r 35018}#
                                   #{w 35019}#
                                   #{s 35020}#
                                   #{mod 35021}#
                                   #{get-formals 35022}#
                                   (map (lambda (#{tmp 2808 35124}#
                                                 #{tmp 2807 35125}#
                                                 #{tmp 2806 35126}#)
                                          (cons #{tmp 2806 35126}#
                                                (cons #{tmp 2807 35125}#
                                                      #{tmp 2808 35124}#)))
                                        #{e2* 35043}#
                                        #{e1* 35042}#
                                        #{args* 35041}#)))
                               (lambda (#{meta* 35127}# #{else* 35128}#)
                                 (values
                                   (append #{meta 35116}# #{meta* 35127}#)
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 15)
                                     #{s 35020}#
                                     #{req 35117}#
                                     #{opt 35118}#
                                     #{rest 35119}#
                                     #{kw 35120}#
                                     #{inits 35121}#
                                     #{vars 35122}#
                                     #{body 35123}#
                                     #{else* 35128}#)))))))))
                   #{tmp 35034}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{clauses 35023}#))))))))
   (#{strip 4388}#
     (lambda (#{x 36442}# #{w 36443}#)
       (if (memq 'top (car #{w 36443}#))
         #{x 36442}#
         (letrec*
           ((#{f 36444}#
              (lambda (#{x 36447}#)
                (if (if (vector? #{x 36447}#)
                      (if (= (vector-length #{x 36447}#) 4)
                        (eq? (vector-ref #{x 36447}# 0) 'syntax-object)
                        #f)
                      #f)
                  (#{strip 4388}#
                    (vector-ref #{x 36447}# 1)
                    (vector-ref #{x 36447}# 2))
                  (if (pair? #{x 36447}#)
                    (let ((#{a 36466}# (#{f 36444}# (car #{x 36447}#)))
                          (#{d 36467}# (#{f 36444}# (cdr #{x 36447}#))))
                      (if (if (eq? #{a 36466}# (car #{x 36447}#))
                            (eq? #{d 36467}# (cdr #{x 36447}#))
                            #f)
                        #{x 36447}#
                        (cons #{a 36466}# #{d 36467}#)))
                    (if (vector? #{x 36447}#)
                      (let ((#{old 36470}# (vector->list #{x 36447}#)))
                        (let ((#{new 36471}# (map #{f 36444}# #{old 36470}#)))
                          (letrec*
                            ((#{lp 36472}#
                               (lambda (#{l1 36569}# #{l2 36570}#)
                                 (if (null? #{l1 36569}#)
                                   #{x 36447}#
                                   (if (eq? (car #{l1 36569}#)
                                            (car #{l2 36570}#))
                                     (#{lp 36472}#
                                       (cdr #{l1 36569}#)
                                       (cdr #{l2 36570}#))
                                     (list->vector #{new 36471}#))))))
                            (#{lp 36472}# #{old 36470}# #{new 36471}#))))
                      #{x 36447}#))))))
           (#{f 36444}# #{x 36442}#)))))
   (#{gen-var 4389}#
     (lambda (#{id 35172}#)
       (let ((#{id 35173}#
               (if (if (vector? #{id 35172}#)
                     (if (= (vector-length #{id 35172}#) 4)
                       (eq? (vector-ref #{id 35172}# 0) 'syntax-object)
                       #f)
                     #f)
                 (vector-ref #{id 35172}# 1)
                 #{id 35172}#)))
         (gensym
           (string-append (symbol->string #{id 35173}#) " ")))))
   (#{lambda-var-list 4390}#
     (lambda (#{vars 36571}#)
       (letrec*
         ((#{lvl 36572}#
            (lambda (#{vars 36575}# #{ls 36576}# #{w 36577}#)
              (if (pair? #{vars 36575}#)
                (#{lvl 36572}#
                  (cdr #{vars 36575}#)
                  (cons (let ((#{x 36581}# (car #{vars 36575}#)))
                          (if (if (null? (car #{w 36577}#))
                                (null? (cdr #{w 36577}#))
                                #f)
                            #{x 36581}#
                            (if (if (vector? #{x 36581}#)
                                  (if (= (vector-length #{x 36581}#) 4)
                                    (eq? (vector-ref #{x 36581}# 0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (let ((#{expression 36599}#
                                      (vector-ref #{x 36581}# 1))
                                    (#{wrap 36600}#
                                      (let ((#{w2 36608}#
                                              (vector-ref #{x 36581}# 2)))
                                        (let ((#{m1 36609}# (car #{w 36577}#))
                                              (#{s1 36610}# (cdr #{w 36577}#)))
                                          (if (null? #{m1 36609}#)
                                            (if (null? #{s1 36610}#)
                                              #{w2 36608}#
                                              (cons (car #{w2 36608}#)
                                                    (let ((#{m2 36625}#
                                                            (cdr #{w2 36608}#)))
                                                      (if (null? #{m2 36625}#)
                                                        #{s1 36610}#
                                                        (append
                                                          #{s1 36610}#
                                                          #{m2 36625}#)))))
                                            (cons (let ((#{m2 36633}#
                                                          (car #{w2 36608}#)))
                                                    (if (null? #{m2 36633}#)
                                                      #{m1 36609}#
                                                      (append
                                                        #{m1 36609}#
                                                        #{m2 36633}#)))
                                                  (let ((#{m2 36641}#
                                                          (cdr #{w2 36608}#)))
                                                    (if (null? #{m2 36641}#)
                                                      #{s1 36610}#
                                                      (append
                                                        #{s1 36610}#
                                                        #{m2 36641}#))))))))
                                    (#{module 36601}#
                                      (vector-ref #{x 36581}# 3)))
                                (vector
                                  'syntax-object
                                  #{expression 36599}#
                                  #{wrap 36600}#
                                  #{module 36601}#))
                              (if (null? #{x 36581}#)
                                #{x 36581}#
                                (vector
                                  'syntax-object
                                  #{x 36581}#
                                  #{w 36577}#
                                  #f)))))
                        #{ls 36576}#)
                  #{w 36577}#)
                (if (if (symbol? #{vars 36575}#)
                      #t
                      (if (if (vector? #{vars 36575}#)
                            (if (= (vector-length #{vars 36575}#) 4)
                              (eq? (vector-ref #{vars 36575}# 0)
                                   'syntax-object)
                              #f)
                            #f)
                        (symbol? (vector-ref #{vars 36575}# 1))
                        #f))
                  (cons (if (if (null? (car #{w 36577}#))
                              (null? (cdr #{w 36577}#))
                              #f)
                          #{vars 36575}#
                          (if (if (vector? #{vars 36575}#)
                                (if (= (vector-length #{vars 36575}#) 4)
                                  (eq? (vector-ref #{vars 36575}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (let ((#{expression 36711}#
                                    (vector-ref #{vars 36575}# 1))
                                  (#{wrap 36712}#
                                    (let ((#{w2 36722}#
                                            (vector-ref #{vars 36575}# 2)))
                                      (let ((#{m1 36723}# (car #{w 36577}#))
                                            (#{s1 36724}# (cdr #{w 36577}#)))
                                        (if (null? #{m1 36723}#)
                                          (if (null? #{s1 36724}#)
                                            #{w2 36722}#
                                            (cons (car #{w2 36722}#)
                                                  (let ((#{m2 36741}#
                                                          (cdr #{w2 36722}#)))
                                                    (if (null? #{m2 36741}#)
                                                      #{s1 36724}#
                                                      (append
                                                        #{s1 36724}#
                                                        #{m2 36741}#)))))
                                          (cons (let ((#{m2 36749}#
                                                        (car #{w2 36722}#)))
                                                  (if (null? #{m2 36749}#)
                                                    #{m1 36723}#
                                                    (append
                                                      #{m1 36723}#
                                                      #{m2 36749}#)))
                                                (let ((#{m2 36757}#
                                                        (cdr #{w2 36722}#)))
                                                  (if (null? #{m2 36757}#)
                                                    #{s1 36724}#
                                                    (append
                                                      #{s1 36724}#
                                                      #{m2 36757}#))))))))
                                  (#{module 36713}#
                                    (vector-ref #{vars 36575}# 3)))
                              (vector
                                'syntax-object
                                #{expression 36711}#
                                #{wrap 36712}#
                                #{module 36713}#))
                            (if (null? #{vars 36575}#)
                              #{vars 36575}#
                              (vector
                                'syntax-object
                                #{vars 36575}#
                                #{w 36577}#
                                #f))))
                        #{ls 36576}#)
                  (if (null? #{vars 36575}#)
                    #{ls 36576}#
                    (if (if (vector? #{vars 36575}#)
                          (if (= (vector-length #{vars 36575}#) 4)
                            (eq? (vector-ref #{vars 36575}# 0)
                                 'syntax-object)
                            #f)
                          #f)
                      (#{lvl 36572}#
                        (vector-ref #{vars 36575}# 1)
                        #{ls 36576}#
                        (let ((#{w2 36798}# (vector-ref #{vars 36575}# 2)))
                          (let ((#{m1 36799}# (car #{w 36577}#))
                                (#{s1 36800}# (cdr #{w 36577}#)))
                            (if (null? #{m1 36799}#)
                              (if (null? #{s1 36800}#)
                                #{w2 36798}#
                                (cons (car #{w2 36798}#)
                                      (let ((#{m2 36811}# (cdr #{w2 36798}#)))
                                        (if (null? #{m2 36811}#)
                                          #{s1 36800}#
                                          (append
                                            #{s1 36800}#
                                            #{m2 36811}#)))))
                              (cons (let ((#{m2 36819}# (car #{w2 36798}#)))
                                      (if (null? #{m2 36819}#)
                                        #{m1 36799}#
                                        (append #{m1 36799}# #{m2 36819}#)))
                                    (let ((#{m2 36827}# (cdr #{w2 36798}#)))
                                      (if (null? #{m2 36827}#)
                                        #{s1 36800}#
                                        (append
                                          #{s1 36800}#
                                          #{m2 36827}#))))))))
                      (cons #{vars 36575}# #{ls 36576}#))))))))
         (#{lvl 36572}# #{vars 36571}# '() '(()))))))
  (begin
    (module-define!
      (current-module)
      'letrec-syntax
      (make-syntax-transformer
        'letrec-syntax
        'local-syntax
        #t))
    (module-define!
      (current-module)
      'let-syntax
      (make-syntax-transformer
        'let-syntax
        'local-syntax
        #f))
    (#{global-extend 4341}#
      'core
      'fluid-let-syntax
      (lambda (#{e 4517}#
               #{r 4518}#
               #{w 4519}#
               #{s 4520}#
               #{mod 4521}#)
        (let ((#{tmp 4523}#
                ($sc-dispatch
                  #{e 4517}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 4523}#
                (@apply
                  (lambda (#{var 4527}#
                           #{val 4528}#
                           #{e1 4529}#
                           #{e2 4530}#)
                    (#{valid-bound-ids? 4365}# #{var 4527}#))
                  #{tmp 4523}#)
                #f)
            (@apply
              (lambda (#{var 4615}#
                       #{val 4616}#
                       #{e1 4617}#
                       #{e2 4618}#)
                (let ((#{names 4619}#
                        (map (lambda (#{x 4885}#)
                               (#{id-var-name 4362}# #{x 4885}# #{w 4519}#))
                             #{var 4615}#)))
                  (begin
                    (for-each
                      (lambda (#{id 4620}# #{n 4621}#)
                        (let ((#{atom-key 4622}#
                                (car (let ((#{t 4822}#
                                             (assq #{n 4621}# #{r 4518}#)))
                                       (if #{t 4822}#
                                         (cdr #{t 4822}#)
                                         (if (symbol? #{n 4621}#)
                                           (let ((#{t 4827}#
                                                   (begin
                                                     (if (if (not #{mod 4521}#)
                                                           (current-module)
                                                           #f)
                                                       (warn "module system is booted, we should have a module"
                                                             #{n 4621}#))
                                                     (let ((#{v 4864}#
                                                             (module-variable
                                                               (if #{mod 4521}#
                                                                 (resolve-module
                                                                   (cdr #{mod 4521}#))
                                                                 (current-module))
                                                               #{n 4621}#)))
                                                       (if #{v 4864}#
                                                         (if (variable-bound?
                                                               #{v 4864}#)
                                                           (let ((#{val 4873}#
                                                                   (variable-ref
                                                                     #{v 4864}#)))
                                                             (if (macro?
                                                                   #{val 4873}#)
                                                               (if (macro-type
                                                                     #{val 4873}#)
                                                                 (cons (macro-type
                                                                         #{val 4873}#)
                                                                       (macro-binding
                                                                         #{val 4873}#))
                                                                 #f)
                                                               #f))
                                                           #f)
                                                         #f)))))
                                             (if #{t 4827}#
                                               #{t 4827}#
                                               '(global)))
                                           '(displaced-lexical)))))))
                          (if (let ((#{t 4655}# #{atom-key 4622}#))
                                (eqv? #{t 4655}# 'displaced-lexical))
                            (syntax-violation
                              'fluid-let-syntax
                              "identifier out of context"
                              #{e 4517}#
                              (let ((#{x 4727}#
                                      (begin
                                        (if (if (pair? #{id 4620}#)
                                              #{s 4520}#
                                              #f)
                                          (set-source-properties!
                                            #{id 4620}#
                                            #{s 4520}#))
                                        #{id 4620}#)))
                                (if (if (null? (car #{w 4519}#))
                                      (null? (cdr #{w 4519}#))
                                      #f)
                                  #{x 4727}#
                                  (if (if (vector? #{x 4727}#)
                                        (if (= (vector-length #{x 4727}#) 4)
                                          (eq? (vector-ref #{x 4727}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (let ((#{expression 4759}#
                                            (vector-ref #{x 4727}# 1))
                                          (#{wrap 4760}#
                                            (let ((#{w2 4768}#
                                                    (vector-ref #{x 4727}# 2)))
                                              (let ((#{m1 4769}#
                                                      (car #{w 4519}#))
                                                    (#{s1 4770}#
                                                      (cdr #{w 4519}#)))
                                                (if (null? #{m1 4769}#)
                                                  (if (null? #{s1 4770}#)
                                                    #{w2 4768}#
                                                    (cons (car #{w2 4768}#)
                                                          (let ((#{m2 4785}#
                                                                  (cdr #{w2 4768}#)))
                                                            (if (null? #{m2 4785}#)
                                                              #{s1 4770}#
                                                              (append
                                                                #{s1 4770}#
                                                                #{m2 4785}#)))))
                                                  (cons (let ((#{m2 4793}#
                                                                (car #{w2 4768}#)))
                                                          (if (null? #{m2 4793}#)
                                                            #{m1 4769}#
                                                            (append
                                                              #{m1 4769}#
                                                              #{m2 4793}#)))
                                                        (let ((#{m2 4801}#
                                                                (cdr #{w2 4768}#)))
                                                          (if (null? #{m2 4801}#)
                                                            #{s1 4770}#
                                                            (append
                                                              #{s1 4770}#
                                                              #{m2 4801}#))))))))
                                          (#{module 4761}#
                                            (vector-ref #{x 4727}# 3)))
                                      (vector
                                        'syntax-object
                                        #{expression 4759}#
                                        #{wrap 4760}#
                                        #{module 4761}#))
                                    (if (null? #{x 4727}#)
                                      #{x 4727}#
                                      (vector
                                        'syntax-object
                                        #{x 4727}#
                                        #{w 4519}#
                                        #{mod 4521}#)))))))))
                      #{var 4615}#
                      #{names 4619}#)
                    (#{chi-body 4379}#
                      (cons #{e1 4617}# #{e2 4618}#)
                      (let ((#{x 4898}#
                              (begin
                                (if (if (pair? #{e 4517}#) #{s 4520}# #f)
                                  (set-source-properties!
                                    #{e 4517}#
                                    #{s 4520}#))
                                #{e 4517}#)))
                        (if (if (null? (car #{w 4519}#))
                              (null? (cdr #{w 4519}#))
                              #f)
                          #{x 4898}#
                          (if (if (vector? #{x 4898}#)
                                (if (= (vector-length #{x 4898}#) 4)
                                  (eq? (vector-ref #{x 4898}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (let ((#{expression 4930}#
                                    (vector-ref #{x 4898}# 1))
                                  (#{wrap 4931}#
                                    (let ((#{w2 4939}#
                                            (vector-ref #{x 4898}# 2)))
                                      (let ((#{m1 4940}# (car #{w 4519}#))
                                            (#{s1 4941}# (cdr #{w 4519}#)))
                                        (if (null? #{m1 4940}#)
                                          (if (null? #{s1 4941}#)
                                            #{w2 4939}#
                                            (cons (car #{w2 4939}#)
                                                  (let ((#{m2 4956}#
                                                          (cdr #{w2 4939}#)))
                                                    (if (null? #{m2 4956}#)
                                                      #{s1 4941}#
                                                      (append
                                                        #{s1 4941}#
                                                        #{m2 4956}#)))))
                                          (cons (let ((#{m2 4964}#
                                                        (car #{w2 4939}#)))
                                                  (if (null? #{m2 4964}#)
                                                    #{m1 4940}#
                                                    (append
                                                      #{m1 4940}#
                                                      #{m2 4964}#)))
                                                (let ((#{m2 4972}#
                                                        (cdr #{w2 4939}#)))
                                                  (if (null? #{m2 4972}#)
                                                    #{s1 4941}#
                                                    (append
                                                      #{s1 4941}#
                                                      #{m2 4972}#))))))))
                                  (#{module 4932}# (vector-ref #{x 4898}# 3)))
                              (vector
                                'syntax-object
                                #{expression 4930}#
                                #{wrap 4931}#
                                #{module 4932}#))
                            (if (null? #{x 4898}#)
                              #{x 4898}#
                              (vector
                                'syntax-object
                                #{x 4898}#
                                #{w 4519}#
                                #{mod 4521}#)))))
                      (#{extend-env 4337}#
                        #{names 4619}#
                        (let ((#{trans-r 5050}#
                                (#{macros-only-env 4339}# #{r 4518}#)))
                          (map (lambda (#{x 5051}#)
                                 (cons 'macro
                                       (#{eval-local-transformer 4381}#
                                         (#{chi 4375}#
                                           #{x 5051}#
                                           #{trans-r 5050}#
                                           #{w 4519}#
                                           #{mod 4521}#)
                                         #{mod 4521}#)))
                               #{val 4616}#))
                        #{r 4518}#)
                      #{w 4519}#
                      #{mod 4521}#))))
              #{tmp 4523}#)
            (syntax-violation
              'fluid-let-syntax
              "bad syntax"
              (let ((#{x 5267}#
                      (begin
                        (if (if (pair? #{e 4517}#) #{s 4520}# #f)
                          (set-source-properties! #{e 4517}# #{s 4520}#))
                        #{e 4517}#)))
                (if (if (null? (car #{w 4519}#))
                      (null? (cdr #{w 4519}#))
                      #f)
                  #{x 5267}#
                  (if (if (vector? #{x 5267}#)
                        (if (= (vector-length #{x 5267}#) 4)
                          (eq? (vector-ref #{x 5267}# 0) 'syntax-object)
                          #f)
                        #f)
                    (let ((#{expression 5299}# (vector-ref #{x 5267}# 1))
                          (#{wrap 5300}#
                            (let ((#{w2 5308}# (vector-ref #{x 5267}# 2)))
                              (let ((#{m1 5309}# (car #{w 4519}#))
                                    (#{s1 5310}# (cdr #{w 4519}#)))
                                (if (null? #{m1 5309}#)
                                  (if (null? #{s1 5310}#)
                                    #{w2 5308}#
                                    (cons (car #{w2 5308}#)
                                          (let ((#{m2 5325}#
                                                  (cdr #{w2 5308}#)))
                                            (if (null? #{m2 5325}#)
                                              #{s1 5310}#
                                              (append
                                                #{s1 5310}#
                                                #{m2 5325}#)))))
                                  (cons (let ((#{m2 5333}# (car #{w2 5308}#)))
                                          (if (null? #{m2 5333}#)
                                            #{m1 5309}#
                                            (append #{m1 5309}# #{m2 5333}#)))
                                        (let ((#{m2 5341}# (cdr #{w2 5308}#)))
                                          (if (null? #{m2 5341}#)
                                            #{s1 5310}#
                                            (append
                                              #{s1 5310}#
                                              #{m2 5341}#))))))))
                          (#{module 5301}# (vector-ref #{x 5267}# 3)))
                      (vector
                        'syntax-object
                        #{expression 5299}#
                        #{wrap 5300}#
                        #{module 5301}#))
                    (if (null? #{x 5267}#)
                      #{x 5267}#
                      (vector
                        'syntax-object
                        #{x 5267}#
                        #{w 4519}#
                        #{mod 4521}#))))))))))
    (module-define!
      (current-module)
      'quote
      (make-syntax-transformer
        'quote
        'core
        (lambda (#{e 5369}#
                 #{r 5370}#
                 #{w 5371}#
                 #{s 5372}#
                 #{mod 5373}#)
          (let ((#{tmp 5375}# ($sc-dispatch #{e 5369}# '(_ any))))
            (if #{tmp 5375}#
              (@apply
                (lambda (#{e 5378}#)
                  (let ((#{exp 5382}#
                          (#{strip 4388}# #{e 5378}# #{w 5371}#)))
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 1)
                      #{s 5372}#
                      #{exp 5382}#)))
                #{tmp 5375}#)
              (syntax-violation
                'quote
                "bad syntax"
                (let ((#{x 5396}#
                        (begin
                          (if (if (pair? #{e 5369}#) #{s 5372}# #f)
                            (set-source-properties! #{e 5369}# #{s 5372}#))
                          #{e 5369}#)))
                  (if (if (null? (car #{w 5371}#))
                        (null? (cdr #{w 5371}#))
                        #f)
                    #{x 5396}#
                    (if (if (vector? #{x 5396}#)
                          (if (= (vector-length #{x 5396}#) 4)
                            (eq? (vector-ref #{x 5396}# 0) 'syntax-object)
                            #f)
                          #f)
                      (let ((#{expression 5428}# (vector-ref #{x 5396}# 1))
                            (#{wrap 5429}#
                              (let ((#{w2 5437}# (vector-ref #{x 5396}# 2)))
                                (let ((#{m1 5438}# (car #{w 5371}#))
                                      (#{s1 5439}# (cdr #{w 5371}#)))
                                  (if (null? #{m1 5438}#)
                                    (if (null? #{s1 5439}#)
                                      #{w2 5437}#
                                      (cons (car #{w2 5437}#)
                                            (let ((#{m2 5454}#
                                                    (cdr #{w2 5437}#)))
                                              (if (null? #{m2 5454}#)
                                                #{s1 5439}#
                                                (append
                                                  #{s1 5439}#
                                                  #{m2 5454}#)))))
                                    (cons (let ((#{m2 5462}#
                                                  (car #{w2 5437}#)))
                                            (if (null? #{m2 5462}#)
                                              #{m1 5438}#
                                              (append
                                                #{m1 5438}#
                                                #{m2 5462}#)))
                                          (let ((#{m2 5470}#
                                                  (cdr #{w2 5437}#)))
                                            (if (null? #{m2 5470}#)
                                              #{s1 5439}#
                                              (append
                                                #{s1 5439}#
                                                #{m2 5470}#))))))))
                            (#{module 5430}# (vector-ref #{x 5396}# 3)))
                        (vector
                          'syntax-object
                          #{expression 5428}#
                          #{wrap 5429}#
                          #{module 5430}#))
                      (if (null? #{x 5396}#)
                        #{x 5396}#
                        (vector
                          'syntax-object
                          #{x 5396}#
                          #{w 5371}#
                          #{mod 5373}#)))))))))))
    (#{global-extend 4341}#
      'core
      'syntax
      (letrec*
        ((#{gen-syntax 5710}#
           (lambda (#{src 6173}#
                    #{e 6174}#
                    #{r 6175}#
                    #{maps 6176}#
                    #{ellipsis? 6177}#
                    #{mod 6178}#)
             (if (if (symbol? #{e 6174}#)
                   #t
                   (if (if (vector? #{e 6174}#)
                         (if (= (vector-length #{e 6174}#) 4)
                           (eq? (vector-ref #{e 6174}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{e 6174}# 1))
                     #f))
               (let ((#{label 6205}#
                       (#{id-var-name 4362}# #{e 6174}# '(()))))
                 (let ((#{b 6206}#
                         (let ((#{t 6343}# (assq #{label 6205}# #{r 6175}#)))
                           (if #{t 6343}#
                             (cdr #{t 6343}#)
                             (if (symbol? #{label 6205}#)
                               (let ((#{t 6348}#
                                       (begin
                                         (if (if (not #{mod 6178}#)
                                               (current-module)
                                               #f)
                                           (warn "module system is booted, we should have a module"
                                                 #{label 6205}#))
                                         (let ((#{v 6385}#
                                                 (module-variable
                                                   (if #{mod 6178}#
                                                     (resolve-module
                                                       (cdr #{mod 6178}#))
                                                     (current-module))
                                                   #{label 6205}#)))
                                           (if #{v 6385}#
                                             (if (variable-bound? #{v 6385}#)
                                               (let ((#{val 6394}#
                                                       (variable-ref
                                                         #{v 6385}#)))
                                                 (if (macro? #{val 6394}#)
                                                   (if (macro-type
                                                         #{val 6394}#)
                                                     (cons (macro-type
                                                             #{val 6394}#)
                                                           (macro-binding
                                                             #{val 6394}#))
                                                     #f)
                                                   #f))
                                               #f)
                                             #f)))))
                                 (if #{t 6348}# #{t 6348}# '(global)))
                               '(displaced-lexical))))))
                   (if (eq? (car #{b 6206}#) 'syntax)
                     (call-with-values
                       (lambda ()
                         (let ((#{var.lev 6239}# (cdr #{b 6206}#)))
                           (#{gen-ref 5711}#
                             #{src 6173}#
                             (car #{var.lev 6239}#)
                             (cdr #{var.lev 6239}#)
                             #{maps 6176}#)))
                       (lambda (#{var 6335}# #{maps 6336}#)
                         (values (list 'ref #{var 6335}#) #{maps 6336}#)))
                     (if (#{ellipsis? 6177}# #{e 6174}#)
                       (syntax-violation
                         'syntax
                         "misplaced ellipsis"
                         #{src 6173}#)
                       (values (list 'quote #{e 6174}#) #{maps 6176}#)))))
               (let ((#{tmp 6406}#
                       ($sc-dispatch #{e 6174}# '(any any))))
                 (if (if #{tmp 6406}#
                       (@apply
                         (lambda (#{dots 6410}# #{e 6411}#)
                           (#{ellipsis? 6177}# #{dots 6410}#))
                         #{tmp 6406}#)
                       #f)
                   (@apply
                     (lambda (#{dots 6412}# #{e 6413}#)
                       (#{gen-syntax 5710}#
                         #{src 6173}#
                         #{e 6413}#
                         #{r 6175}#
                         #{maps 6176}#
                         (lambda (#{x 6414}#) #f)
                         #{mod 6178}#))
                     #{tmp 6406}#)
                   (let ((#{tmp 6415}#
                           ($sc-dispatch #{e 6174}# '(any any . any))))
                     (if (if #{tmp 6415}#
                           (@apply
                             (lambda (#{x 6419}# #{dots 6420}# #{y 6421}#)
                               (#{ellipsis? 6177}# #{dots 6420}#))
                             #{tmp 6415}#)
                           #f)
                       (@apply
                         (lambda (#{x 6422}# #{dots 6423}# #{y 6424}#)
                           (letrec*
                             ((#{f 6425}#
                                (lambda (#{y 6433}# #{k 6434}#)
                                  (let ((#{tmp 6436}#
                                          ($sc-dispatch
                                            #{y 6433}#
                                            '(any . any))))
                                    (if (if #{tmp 6436}#
                                          (@apply
                                            (lambda (#{dots 6440}# #{y 6441}#)
                                              (#{ellipsis? 6177}#
                                                #{dots 6440}#))
                                            #{tmp 6436}#)
                                          #f)
                                      (@apply
                                        (lambda (#{dots 6442}# #{y 6443}#)
                                          (#{f 6425}#
                                            #{y 6443}#
                                            (lambda (#{maps 6444}#)
                                              (call-with-values
                                                (lambda ()
                                                  (#{k 6434}#
                                                    (cons '() #{maps 6444}#)))
                                                (lambda (#{x 6445}#
                                                         #{maps 6446}#)
                                                  (if (null? (car #{maps 6446}#))
                                                    (syntax-violation
                                                      'syntax
                                                      "extra ellipsis"
                                                      #{src 6173}#)
                                                    (values
                                                      (let ((#{map-env 6450}#
                                                              (car #{maps 6446}#)))
                                                        (list 'apply
                                                              '(primitive
                                                                 append)
                                                              (#{gen-map 5713}#
                                                                #{x 6445}#
                                                                #{map-env 6450}#)))
                                                      (cdr #{maps 6446}#))))))))
                                        #{tmp 6436}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{gen-syntax 5710}#
                                            #{src 6173}#
                                            #{y 6433}#
                                            #{r 6175}#
                                            #{maps 6176}#
                                            #{ellipsis? 6177}#
                                            #{mod 6178}#))
                                        (lambda (#{y 6453}# #{maps 6454}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{k 6434}# #{maps 6454}#))
                                            (lambda (#{x 6455}# #{maps 6456}#)
                                              (values
                                                (if (equal? #{y 6453}# ''())
                                                  #{x 6455}#
                                                  (list 'append
                                                        #{x 6455}#
                                                        #{y 6453}#))
                                                #{maps 6456}#))))))))))
                             (#{f 6425}#
                               #{y 6424}#
                               (lambda (#{maps 6428}#)
                                 (call-with-values
                                   (lambda ()
                                     (#{gen-syntax 5710}#
                                       #{src 6173}#
                                       #{x 6422}#
                                       #{r 6175}#
                                       (cons '() #{maps 6428}#)
                                       #{ellipsis? 6177}#
                                       #{mod 6178}#))
                                   (lambda (#{x 6429}# #{maps 6430}#)
                                     (if (null? (car #{maps 6430}#))
                                       (syntax-violation
                                         'syntax
                                         "extra ellipsis"
                                         #{src 6173}#)
                                       (values
                                         (#{gen-map 5713}#
                                           #{x 6429}#
                                           (car #{maps 6430}#))
                                         (cdr #{maps 6430}#)))))))))
                         #{tmp 6415}#)
                       (let ((#{tmp 6472}#
                               ($sc-dispatch #{e 6174}# '(any . any))))
                         (if #{tmp 6472}#
                           (@apply
                             (lambda (#{x 6476}# #{y 6477}#)
                               (call-with-values
                                 (lambda ()
                                   (#{gen-syntax 5710}#
                                     #{src 6173}#
                                     #{x 6476}#
                                     #{r 6175}#
                                     #{maps 6176}#
                                     #{ellipsis? 6177}#
                                     #{mod 6178}#))
                                 (lambda (#{x 6478}# #{maps 6479}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{gen-syntax 5710}#
                                         #{src 6173}#
                                         #{y 6477}#
                                         #{r 6175}#
                                         #{maps 6479}#
                                         #{ellipsis? 6177}#
                                         #{mod 6178}#))
                                     (lambda (#{y 6480}# #{maps 6481}#)
                                       (values
                                         (let ((#{atom-key 6486}#
                                                 (car #{y 6480}#)))
                                           (if (eqv? #{atom-key 6486}# 'quote)
                                             (if (eq? (car #{x 6478}#) 'quote)
                                               (list 'quote
                                                     (cons (car (cdr #{x 6478}#))
                                                           (car (cdr #{y 6480}#))))
                                               (if (eq? (car (cdr #{y 6480}#))
                                                        '())
                                                 (list 'list #{x 6478}#)
                                                 (list 'cons
                                                       #{x 6478}#
                                                       #{y 6480}#)))
                                             (if (eqv? #{atom-key 6486}# 'list)
                                               (cons 'list
                                                     (cons #{x 6478}#
                                                           (cdr #{y 6480}#)))
                                               (list 'cons
                                                     #{x 6478}#
                                                     #{y 6480}#))))
                                         #{maps 6481}#))))))
                             #{tmp 6472}#)
                           (let ((#{tmp 6515}#
                                   ($sc-dispatch
                                     #{e 6174}#
                                     '#(vector (any . each-any)))))
                             (if #{tmp 6515}#
                               (@apply
                                 (lambda (#{e1 6519}# #{e2 6520}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{gen-syntax 5710}#
                                         #{src 6173}#
                                         (cons #{e1 6519}# #{e2 6520}#)
                                         #{r 6175}#
                                         #{maps 6176}#
                                         #{ellipsis? 6177}#
                                         #{mod 6178}#))
                                     (lambda (#{e 6521}# #{maps 6522}#)
                                       (values
                                         (if (eq? (car #{e 6521}#) 'list)
                                           (cons 'vector (cdr #{e 6521}#))
                                           (if (eq? (car #{e 6521}#) 'quote)
                                             (list 'quote
                                                   (list->vector
                                                     (car (cdr #{e 6521}#))))
                                             (list 'list->vector #{e 6521}#)))
                                         #{maps 6522}#))))
                                 #{tmp 6515}#)
                               (values
                                 (list 'quote #{e 6174}#)
                                 #{maps 6176}#))))))))))))
         (#{gen-ref 5711}#
           (lambda (#{src 6549}#
                    #{var 6550}#
                    #{level 6551}#
                    #{maps 6552}#)
             (if (= #{level 6551}# 0)
               (values #{var 6550}# #{maps 6552}#)
               (if (null? #{maps 6552}#)
                 (syntax-violation
                   'syntax
                   "missing ellipsis"
                   #{src 6549}#)
                 (call-with-values
                   (lambda ()
                     (#{gen-ref 5711}#
                       #{src 6549}#
                       #{var 6550}#
                       (#{1-}# #{level 6551}#)
                       (cdr #{maps 6552}#)))
                   (lambda (#{outer-var 6553}# #{outer-maps 6554}#)
                     (let ((#{b 6555}#
                             (assq #{outer-var 6553}# (car #{maps 6552}#))))
                       (if #{b 6555}#
                         (values (cdr #{b 6555}#) #{maps 6552}#)
                         (let ((#{inner-var 6557}#
                                 (gensym
                                   (string-append (symbol->string 'tmp) " "))))
                           (values
                             #{inner-var 6557}#
                             (cons (cons (cons #{outer-var 6553}#
                                               #{inner-var 6557}#)
                                         (car #{maps 6552}#))
                                   #{outer-maps 6554}#)))))))))))
         (#{gen-map 5713}#
           (lambda (#{e 6571}# #{map-env 6572}#)
             (let ((#{formals 6573}# (map cdr #{map-env 6572}#))
                   (#{actuals 6574}#
                     (map (lambda (#{x 6576}#)
                            (list 'ref (car #{x 6576}#)))
                          #{map-env 6572}#)))
               (if (eq? (car #{e 6571}#) 'ref)
                 (car #{actuals 6574}#)
                 (if (and-map
                       (lambda (#{x 6577}#)
                         (if (eq? (car #{x 6577}#) 'ref)
                           (memq (car (cdr #{x 6577}#)) #{formals 6573}#)
                           #f))
                       (cdr #{e 6571}#))
                   (cons 'map
                         (cons (list 'primitive (car #{e 6571}#))
                               (map (let ((#{r 6579}#
                                            (map cons
                                                 #{formals 6573}#
                                                 #{actuals 6574}#)))
                                      (lambda (#{x 6580}#)
                                        (cdr (assq (car (cdr #{x 6580}#))
                                                   #{r 6579}#))))
                                    (cdr #{e 6571}#))))
                   (cons 'map
                         (cons (list 'lambda #{formals 6573}# #{e 6571}#)
                               #{actuals 6574}#)))))))
         (#{regen 5717}#
           (lambda (#{x 6582}#)
             (let ((#{atom-key 6583}# (car #{x 6582}#)))
               (if (eqv? #{atom-key 6583}# 'ref)
                 (let ((#{name 6593}# (car (cdr #{x 6582}#)))
                       (#{var 6594}# (car (cdr #{x 6582}#))))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 3)
                     #f
                     #{name 6593}#
                     #{var 6594}#))
                 (if (eqv? #{atom-key 6583}# 'primitive)
                   (let ((#{name 6605}# (car (cdr #{x 6582}#))))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 2)
                       #f
                       #{name 6605}#))
                   (if (eqv? #{atom-key 6583}# 'quote)
                     (let ((#{exp 6616}# (car (cdr #{x 6582}#))))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 1)
                         #f
                         #{exp 6616}#))
                     (if (eqv? #{atom-key 6583}# 'lambda)
                       (if (list? (car (cdr #{x 6582}#)))
                         (let ((#{req 6627}# (car (cdr #{x 6582}#)))
                               (#{vars 6629}# (car (cdr #{x 6582}#)))
                               (#{exp 6631}#
                                 (#{regen 5717}#
                                   (car (cdr (cdr #{x 6582}#))))))
                           (let ((#{body 6636}#
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 15)
                                     #f
                                     #{req 6627}#
                                     #f
                                     #f
                                     #f
                                     '()
                                     #{vars 6629}#
                                     #{exp 6631}#
                                     #f)))
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 14)
                               #f
                               '()
                               #{body 6636}#)))
                         (error "how did we get here" #{x 6582}#))
                       (let ((#{name 6652}# (car #{x 6582}#))
                             (#{args 6653}#
                               (map #{regen 5717}# (cdr #{x 6582}#))))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 12)
                           #f
                           #{name 6652}#
                           #{args 6653}#))))))))))
        (lambda (#{e 5718}#
                 #{r 5719}#
                 #{w 5720}#
                 #{s 5721}#
                 #{mod 5722}#)
          (let ((#{e 5723}#
                  (let ((#{x 6084}#
                          (begin
                            (if (if (pair? #{e 5718}#) #{s 5721}# #f)
                              (set-source-properties! #{e 5718}# #{s 5721}#))
                            #{e 5718}#)))
                    (if (if (null? (car #{w 5720}#))
                          (null? (cdr #{w 5720}#))
                          #f)
                      #{x 6084}#
                      (if (if (vector? #{x 6084}#)
                            (if (= (vector-length #{x 6084}#) 4)
                              (eq? (vector-ref #{x 6084}# 0) 'syntax-object)
                              #f)
                            #f)
                        (let ((#{expression 6116}# (vector-ref #{x 6084}# 1))
                              (#{wrap 6117}#
                                (let ((#{w2 6125}# (vector-ref #{x 6084}# 2)))
                                  (let ((#{m1 6126}# (car #{w 5720}#))
                                        (#{s1 6127}# (cdr #{w 5720}#)))
                                    (if (null? #{m1 6126}#)
                                      (if (null? #{s1 6127}#)
                                        #{w2 6125}#
                                        (cons (car #{w2 6125}#)
                                              (let ((#{m2 6142}#
                                                      (cdr #{w2 6125}#)))
                                                (if (null? #{m2 6142}#)
                                                  #{s1 6127}#
                                                  (append
                                                    #{s1 6127}#
                                                    #{m2 6142}#)))))
                                      (cons (let ((#{m2 6150}#
                                                    (car #{w2 6125}#)))
                                              (if (null? #{m2 6150}#)
                                                #{m1 6126}#
                                                (append
                                                  #{m1 6126}#
                                                  #{m2 6150}#)))
                                            (let ((#{m2 6158}#
                                                    (cdr #{w2 6125}#)))
                                              (if (null? #{m2 6158}#)
                                                #{s1 6127}#
                                                (append
                                                  #{s1 6127}#
                                                  #{m2 6158}#))))))))
                              (#{module 6118}# (vector-ref #{x 6084}# 3)))
                          (vector
                            'syntax-object
                            #{expression 6116}#
                            #{wrap 6117}#
                            #{module 6118}#))
                        (if (null? #{x 6084}#)
                          #{x 6084}#
                          (vector
                            'syntax-object
                            #{x 6084}#
                            #{w 5720}#
                            #{mod 5722}#)))))))
            (let ((#{tmp 5724}# #{e 5723}#))
              (let ((#{tmp 5725}#
                      ($sc-dispatch #{tmp 5724}# '(_ any))))
                (if #{tmp 5725}#
                  (@apply
                    (lambda (#{x 5777}#)
                      (call-with-values
                        (lambda ()
                          (#{gen-syntax 5710}#
                            #{e 5723}#
                            #{x 5777}#
                            #{r 5719}#
                            '()
                            #{ellipsis? 4383}#
                            #{mod 5722}#))
                        (lambda (#{e 5860}# #{maps 5861}#)
                          (#{regen 5717}# #{e 5860}#))))
                    #{tmp 5725}#)
                  (syntax-violation
                    'syntax
                    "bad `syntax' form"
                    #{e 5723}#))))))))
    (#{global-extend 4341}#
      'core
      'lambda
      (lambda (#{e 6889}#
               #{r 6890}#
               #{w 6891}#
               #{s 6892}#
               #{mod 6893}#)
        (let ((#{tmp 6895}#
                ($sc-dispatch #{e 6889}# '(_ any any . each-any))))
          (if #{tmp 6895}#
            (@apply
              (lambda (#{args 6899}# #{e1 6900}# #{e2 6901}#)
                (call-with-values
                  (lambda ()
                    (#{lambda-formals 4384}# #{args 6899}#))
                  (lambda (#{req 6904}#
                           #{opt 6905}#
                           #{rest 6906}#
                           #{kw 6907}#)
                    (letrec*
                      ((#{lp 6908}#
                         (lambda (#{body 6911}# #{meta 6912}#)
                           (let ((#{tmp 6914}#
                                   ($sc-dispatch
                                     #{body 6911}#
                                     '(any any . each-any))))
                             (if (if #{tmp 6914}#
                                   (@apply
                                     (lambda (#{docstring 6918}#
                                              #{e1 6919}#
                                              #{e2 6920}#)
                                       (string?
                                         (syntax->datum #{docstring 6918}#)))
                                     #{tmp 6914}#)
                                   #f)
                               (@apply
                                 (lambda (#{docstring 6921}#
                                          #{e1 6922}#
                                          #{e2 6923}#)
                                   (#{lp 6908}#
                                     (cons #{e1 6922}# #{e2 6923}#)
                                     (append
                                       #{meta 6912}#
                                       (list (cons 'documentation
                                                   (syntax->datum
                                                     #{docstring 6921}#))))))
                                 #{tmp 6914}#)
                               (let ((#{tmp 6924}#
                                       ($sc-dispatch
                                         #{body 6911}#
                                         '(#(vector #(each (any . any)))
                                           any
                                           .
                                           each-any))))
                                 (if #{tmp 6924}#
                                   (@apply
                                     (lambda (#{k 6928}#
                                              #{v 6929}#
                                              #{e1 6930}#
                                              #{e2 6931}#)
                                       (#{lp 6908}#
                                         (cons #{e1 6930}# #{e2 6931}#)
                                         (append
                                           #{meta 6912}#
                                           (syntax->datum
                                             (map cons
                                                  #{k 6928}#
                                                  #{v 6929}#)))))
                                     #{tmp 6924}#)
                                   (#{chi-simple-lambda 4385}#
                                     #{e 6889}#
                                     #{r 6890}#
                                     #{w 6891}#
                                     #{s 6892}#
                                     #{mod 6893}#
                                     #{req 6904}#
                                     #{rest 6906}#
                                     #{meta 6912}#
                                     #{body 6911}#))))))))
                      (#{lp 6908}# (cons #{e1 6900}# #{e2 6901}#) '())))))
              #{tmp 6895}#)
            (syntax-violation
              'lambda
              "bad lambda"
              #{e 6889}#)))))
    (#{global-extend 4341}#
      'core
      'lambda*
      (lambda (#{e 7315}#
               #{r 7316}#
               #{w 7317}#
               #{s 7318}#
               #{mod 7319}#)
        (let ((#{tmp 7321}#
                ($sc-dispatch #{e 7315}# '(_ any any . each-any))))
          (if #{tmp 7321}#
            (@apply
              (lambda (#{args 7325}# #{e1 7326}# #{e2 7327}#)
                (call-with-values
                  (lambda ()
                    (#{chi-lambda-case 4387}#
                      #{e 7315}#
                      #{r 7316}#
                      #{w 7317}#
                      #{s 7318}#
                      #{mod 7319}#
                      #{lambda*-formals 4386}#
                      (list (cons #{args 7325}#
                                  (cons #{e1 7326}# #{e2 7327}#)))))
                  (lambda (#{meta 7330}# #{lcase 7331}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 14)
                      #{s 7318}#
                      #{meta 7330}#
                      #{lcase 7331}#))))
              #{tmp 7321}#)
            (syntax-violation
              'lambda
              "bad lambda*"
              #{e 7315}#)))))
    (#{global-extend 4341}#
      'core
      'case-lambda
      (lambda (#{e 7494}#
               #{r 7495}#
               #{w 7496}#
               #{s 7497}#
               #{mod 7498}#)
        (let ((#{tmp 7500}#
                ($sc-dispatch
                  #{e 7494}#
                  '(_ (any any . each-any)
                      .
                      #(each (any any . each-any))))))
          (if #{tmp 7500}#
            (@apply
              (lambda (#{args 7504}#
                       #{e1 7505}#
                       #{e2 7506}#
                       #{args* 7507}#
                       #{e1* 7508}#
                       #{e2* 7509}#)
                (call-with-values
                  (lambda ()
                    (#{chi-lambda-case 4387}#
                      #{e 7494}#
                      #{r 7495}#
                      #{w 7496}#
                      #{s 7497}#
                      #{mod 7498}#
                      #{lambda-formals 4384}#
                      (cons (cons #{args 7504}#
                                  (cons #{e1 7505}# #{e2 7506}#))
                            (map (lambda (#{tmp 3306 7512}#
                                          #{tmp 3305 7513}#
                                          #{tmp 3304 7514}#)
                                   (cons #{tmp 3304 7514}#
                                         (cons #{tmp 3305 7513}#
                                               #{tmp 3306 7512}#)))
                                 #{e2* 7509}#
                                 #{e1* 7508}#
                                 #{args* 7507}#))))
                  (lambda (#{meta 7515}# #{lcase 7516}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 14)
                      #{s 7497}#
                      #{meta 7515}#
                      #{lcase 7516}#))))
              #{tmp 7500}#)
            (syntax-violation
              'case-lambda
              "bad case-lambda"
              #{e 7494}#)))))
    (#{global-extend 4341}#
      'core
      'case-lambda*
      (lambda (#{e 7685}#
               #{r 7686}#
               #{w 7687}#
               #{s 7688}#
               #{mod 7689}#)
        (let ((#{tmp 7691}#
                ($sc-dispatch
                  #{e 7685}#
                  '(_ (any any . each-any)
                      .
                      #(each (any any . each-any))))))
          (if #{tmp 7691}#
            (@apply
              (lambda (#{args 7695}#
                       #{e1 7696}#
                       #{e2 7697}#
                       #{args* 7698}#
                       #{e1* 7699}#
                       #{e2* 7700}#)
                (call-with-values
                  (lambda ()
                    (#{chi-lambda-case 4387}#
                      #{e 7685}#
                      #{r 7686}#
                      #{w 7687}#
                      #{s 7688}#
                      #{mod 7689}#
                      #{lambda*-formals 4386}#
                      (cons (cons #{args 7695}#
                                  (cons #{e1 7696}# #{e2 7697}#))
                            (map (lambda (#{tmp 3341 7703}#
                                          #{tmp 3340 7704}#
                                          #{tmp 3339 7705}#)
                                   (cons #{tmp 3339 7705}#
                                         (cons #{tmp 3340 7704}#
                                               #{tmp 3341 7703}#)))
                                 #{e2* 7700}#
                                 #{e1* 7699}#
                                 #{args* 7698}#))))
                  (lambda (#{meta 7706}# #{lcase 7707}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 14)
                      #{s 7688}#
                      #{meta 7706}#
                      #{lcase 7707}#))))
              #{tmp 7691}#)
            (syntax-violation
              'case-lambda
              "bad case-lambda*"
              #{e 7685}#)))))
    (#{global-extend 4341}#
      'core
      'let
      (letrec*
        ((#{chi-let 7916}#
           (lambda (#{e 8126}#
                    #{r 8127}#
                    #{w 8128}#
                    #{s 8129}#
                    #{mod 8130}#
                    #{constructor 8131}#
                    #{ids 8132}#
                    #{vals 8133}#
                    #{exps 8134}#)
             (if (not (#{valid-bound-ids? 4365}# #{ids 8132}#))
               (syntax-violation
                 'let
                 "duplicate bound variable"
                 #{e 8126}#)
               (let ((#{labels 8219}#
                       (#{gen-labels 4346}# #{ids 8132}#))
                     (#{new-vars 8220}#
                       (map #{gen-var 4389}# #{ids 8132}#)))
                 (let ((#{nw 8221}#
                         (#{make-binding-wrap 4357}#
                           #{ids 8132}#
                           #{labels 8219}#
                           #{w 8128}#))
                       (#{nr 8222}#
                         (#{extend-var-env 4338}#
                           #{labels 8219}#
                           #{new-vars 8220}#
                           #{r 8127}#)))
                   (#{constructor 8131}#
                     #{s 8129}#
                     (map syntax->datum #{ids 8132}#)
                     #{new-vars 8220}#
                     (map (lambda (#{x 8239}#)
                            (#{chi 4375}#
                              #{x 8239}#
                              #{r 8127}#
                              #{w 8128}#
                              #{mod 8130}#))
                          #{vals 8133}#)
                     (#{chi-body 4379}#
                       #{exps 8134}#
                       (#{source-wrap 4369}#
                         #{e 8126}#
                         #{nw 8221}#
                         #{s 8129}#
                         #{mod 8130}#)
                       #{nr 8222}#
                       #{nw 8221}#
                       #{mod 8130}#))))))))
        (lambda (#{e 7917}#
                 #{r 7918}#
                 #{w 7919}#
                 #{s 7920}#
                 #{mod 7921}#)
          (let ((#{tmp 7923}#
                  ($sc-dispatch
                    #{e 7917}#
                    '(_ #(each (any any)) any . each-any))))
            (if (if #{tmp 7923}#
                  (@apply
                    (lambda (#{id 7927}#
                             #{val 7928}#
                             #{e1 7929}#
                             #{e2 7930}#)
                      (and-map #{id? 4343}# #{id 7927}#))
                    #{tmp 7923}#)
                  #f)
              (@apply
                (lambda (#{id 7946}#
                         #{val 7947}#
                         #{e1 7948}#
                         #{e2 7949}#)
                  (#{chi-let 7916}#
                    #{e 7917}#
                    #{r 7918}#
                    #{w 7919}#
                    #{s 7920}#
                    #{mod 7921}#
                    (lambda (#{src 7953}#
                             #{ids 7954}#
                             #{vars 7955}#
                             #{val-exps 7956}#
                             #{body-exp 7957}#)
                      (begin
                        (for-each
                          #{maybe-name-value! 4307}#
                          #{ids 7954}#
                          #{val-exps 7956}#)
                        (if (null? #{vars 7955}#)
                          #{body-exp 7957}#
                          (make-struct/no-tail
                            (vector-ref %expanded-vtables 16)
                            #{src 7953}#
                            #{ids 7954}#
                            #{vars 7955}#
                            #{val-exps 7956}#
                            #{body-exp 7957}#))))
                    #{id 7946}#
                    #{val 7947}#
                    (cons #{e1 7948}# #{e2 7949}#)))
                #{tmp 7923}#)
              (let ((#{tmp 7964}#
                      ($sc-dispatch
                        #{e 7917}#
                        '(_ any #(each (any any)) any . each-any))))
                (if (if #{tmp 7964}#
                      (@apply
                        (lambda (#{f 7968}#
                                 #{id 7969}#
                                 #{val 7970}#
                                 #{e1 7971}#
                                 #{e2 7972}#)
                          (if (if (symbol? #{f 7968}#)
                                #t
                                (if (if (vector? #{f 7968}#)
                                      (if (= (vector-length #{f 7968}#) 4)
                                        (eq? (vector-ref #{f 7968}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{f 7968}# 1))
                                  #f))
                            (and-map #{id? 4343}# #{id 7969}#)
                            #f))
                        #{tmp 7964}#)
                      #f)
                  (@apply
                    (lambda (#{f 8014}#
                             #{id 8015}#
                             #{val 8016}#
                             #{e1 8017}#
                             #{e2 8018}#)
                      (#{chi-let 7916}#
                        #{e 7917}#
                        #{r 7918}#
                        #{w 7919}#
                        #{s 7920}#
                        #{mod 7921}#
                        #{build-named-let 4326}#
                        (cons #{f 8014}# #{id 8015}#)
                        #{val 8016}#
                        (cons #{e1 8017}# #{e2 8018}#)))
                    #{tmp 7964}#)
                  (syntax-violation
                    'let
                    "bad let"
                    (let ((#{x 8031}#
                            (begin
                              (if (if (pair? #{e 7917}#) #{s 7920}# #f)
                                (set-source-properties! #{e 7917}# #{s 7920}#))
                              #{e 7917}#)))
                      (if (if (null? (car #{w 7919}#))
                            (null? (cdr #{w 7919}#))
                            #f)
                        #{x 8031}#
                        (if (if (vector? #{x 8031}#)
                              (if (= (vector-length #{x 8031}#) 4)
                                (eq? (vector-ref #{x 8031}# 0) 'syntax-object)
                                #f)
                              #f)
                          (let ((#{expression 8063}# (vector-ref #{x 8031}# 1))
                                (#{wrap 8064}#
                                  (let ((#{w2 8072}#
                                          (vector-ref #{x 8031}# 2)))
                                    (let ((#{m1 8073}# (car #{w 7919}#))
                                          (#{s1 8074}# (cdr #{w 7919}#)))
                                      (if (null? #{m1 8073}#)
                                        (if (null? #{s1 8074}#)
                                          #{w2 8072}#
                                          (cons (car #{w2 8072}#)
                                                (let ((#{m2 8089}#
                                                        (cdr #{w2 8072}#)))
                                                  (if (null? #{m2 8089}#)
                                                    #{s1 8074}#
                                                    (append
                                                      #{s1 8074}#
                                                      #{m2 8089}#)))))
                                        (cons (let ((#{m2 8097}#
                                                      (car #{w2 8072}#)))
                                                (if (null? #{m2 8097}#)
                                                  #{m1 8073}#
                                                  (append
                                                    #{m1 8073}#
                                                    #{m2 8097}#)))
                                              (let ((#{m2 8105}#
                                                      (cdr #{w2 8072}#)))
                                                (if (null? #{m2 8105}#)
                                                  #{s1 8074}#
                                                  (append
                                                    #{s1 8074}#
                                                    #{m2 8105}#))))))))
                                (#{module 8065}# (vector-ref #{x 8031}# 3)))
                            (vector
                              'syntax-object
                              #{expression 8063}#
                              #{wrap 8064}#
                              #{module 8065}#))
                          (if (null? #{x 8031}#)
                            #{x 8031}#
                            (vector
                              'syntax-object
                              #{x 8031}#
                              #{w 7919}#
                              #{mod 7921}#)))))))))))))
    (#{global-extend 4341}#
      'core
      'letrec
      (lambda (#{e 8716}#
               #{r 8717}#
               #{w 8718}#
               #{s 8719}#
               #{mod 8720}#)
        (let ((#{tmp 8722}#
                ($sc-dispatch
                  #{e 8716}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 8722}#
                (@apply
                  (lambda (#{id 8726}#
                           #{val 8727}#
                           #{e1 8728}#
                           #{e2 8729}#)
                    (and-map #{id? 4343}# #{id 8726}#))
                  #{tmp 8722}#)
                #f)
            (@apply
              (lambda (#{id 8745}#
                       #{val 8746}#
                       #{e1 8747}#
                       #{e2 8748}#)
                (if (not (#{valid-bound-ids? 4365}# #{id 8745}#))
                  (syntax-violation
                    'letrec
                    "duplicate bound variable"
                    #{e 8716}#)
                  (let ((#{labels 8845}#
                          (#{gen-labels 4346}# #{id 8745}#))
                        (#{new-vars 8846}#
                          (map #{gen-var 4389}# #{id 8745}#)))
                    (let ((#{w 8847}#
                            (#{make-binding-wrap 4357}#
                              #{id 8745}#
                              #{labels 8845}#
                              #{w 8718}#))
                          (#{r 8848}#
                            (#{extend-var-env 4338}#
                              #{labels 8845}#
                              #{new-vars 8846}#
                              #{r 8717}#)))
                      (#{build-letrec 4327}#
                        #{s 8719}#
                        #f
                        (map syntax->datum #{id 8745}#)
                        #{new-vars 8846}#
                        (map (lambda (#{x 8927}#)
                               (#{chi 4375}#
                                 #{x 8927}#
                                 #{r 8848}#
                                 #{w 8847}#
                                 #{mod 8720}#))
                             #{val 8746}#)
                        (#{chi-body 4379}#
                          (cons #{e1 8747}# #{e2 8748}#)
                          (let ((#{x 8989}#
                                  (begin
                                    (if (if (pair? #{e 8716}#) #{s 8719}# #f)
                                      (set-source-properties!
                                        #{e 8716}#
                                        #{s 8719}#))
                                    #{e 8716}#)))
                            (if (if (null? (car #{w 8847}#))
                                  (null? (cdr #{w 8847}#))
                                  #f)
                              #{x 8989}#
                              (if (if (vector? #{x 8989}#)
                                    (if (= (vector-length #{x 8989}#) 4)
                                      (eq? (vector-ref #{x 8989}# 0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (let ((#{expression 9021}#
                                        (vector-ref #{x 8989}# 1))
                                      (#{wrap 9022}#
                                        (let ((#{w2 9030}#
                                                (vector-ref #{x 8989}# 2)))
                                          (let ((#{m1 9031}# (car #{w 8847}#))
                                                (#{s1 9032}# (cdr #{w 8847}#)))
                                            (if (null? #{m1 9031}#)
                                              (if (null? #{s1 9032}#)
                                                #{w2 9030}#
                                                (cons (car #{w2 9030}#)
                                                      (let ((#{m2 9047}#
                                                              (cdr #{w2 9030}#)))
                                                        (if (null? #{m2 9047}#)
                                                          #{s1 9032}#
                                                          (append
                                                            #{s1 9032}#
                                                            #{m2 9047}#)))))
                                              (cons (let ((#{m2 9055}#
                                                            (car #{w2 9030}#)))
                                                      (if (null? #{m2 9055}#)
                                                        #{m1 9031}#
                                                        (append
                                                          #{m1 9031}#
                                                          #{m2 9055}#)))
                                                    (let ((#{m2 9063}#
                                                            (cdr #{w2 9030}#)))
                                                      (if (null? #{m2 9063}#)
                                                        #{s1 9032}#
                                                        (append
                                                          #{s1 9032}#
                                                          #{m2 9063}#))))))))
                                      (#{module 9023}#
                                        (vector-ref #{x 8989}# 3)))
                                  (vector
                                    'syntax-object
                                    #{expression 9021}#
                                    #{wrap 9022}#
                                    #{module 9023}#))
                                (if (null? #{x 8989}#)
                                  #{x 8989}#
                                  (vector
                                    'syntax-object
                                    #{x 8989}#
                                    #{w 8847}#
                                    #{mod 8720}#)))))
                          #{r 8848}#
                          #{w 8847}#
                          #{mod 8720}#))))))
              #{tmp 8722}#)
            (syntax-violation
              'letrec
              "bad letrec"
              (let ((#{x 9303}#
                      (begin
                        (if (if (pair? #{e 8716}#) #{s 8719}# #f)
                          (set-source-properties! #{e 8716}# #{s 8719}#))
                        #{e 8716}#)))
                (if (if (null? (car #{w 8718}#))
                      (null? (cdr #{w 8718}#))
                      #f)
                  #{x 9303}#
                  (if (if (vector? #{x 9303}#)
                        (if (= (vector-length #{x 9303}#) 4)
                          (eq? (vector-ref #{x 9303}# 0) 'syntax-object)
                          #f)
                        #f)
                    (let ((#{expression 9335}# (vector-ref #{x 9303}# 1))
                          (#{wrap 9336}#
                            (let ((#{w2 9344}# (vector-ref #{x 9303}# 2)))
                              (let ((#{m1 9345}# (car #{w 8718}#))
                                    (#{s1 9346}# (cdr #{w 8718}#)))
                                (if (null? #{m1 9345}#)
                                  (if (null? #{s1 9346}#)
                                    #{w2 9344}#
                                    (cons (car #{w2 9344}#)
                                          (let ((#{m2 9361}#
                                                  (cdr #{w2 9344}#)))
                                            (if (null? #{m2 9361}#)
                                              #{s1 9346}#
                                              (append
                                                #{s1 9346}#
                                                #{m2 9361}#)))))
                                  (cons (let ((#{m2 9369}# (car #{w2 9344}#)))
                                          (if (null? #{m2 9369}#)
                                            #{m1 9345}#
                                            (append #{m1 9345}# #{m2 9369}#)))
                                        (let ((#{m2 9377}# (cdr #{w2 9344}#)))
                                          (if (null? #{m2 9377}#)
                                            #{s1 9346}#
                                            (append
                                              #{s1 9346}#
                                              #{m2 9377}#))))))))
                          (#{module 9337}# (vector-ref #{x 9303}# 3)))
                      (vector
                        'syntax-object
                        #{expression 9335}#
                        #{wrap 9336}#
                        #{module 9337}#))
                    (if (null? #{x 9303}#)
                      #{x 9303}#
                      (vector
                        'syntax-object
                        #{x 9303}#
                        #{w 8718}#
                        #{mod 8720}#))))))))))
    (#{global-extend 4341}#
      'core
      'letrec*
      (lambda (#{e 9528}#
               #{r 9529}#
               #{w 9530}#
               #{s 9531}#
               #{mod 9532}#)
        (let ((#{tmp 9534}#
                ($sc-dispatch
                  #{e 9528}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 9534}#
                (@apply
                  (lambda (#{id 9538}#
                           #{val 9539}#
                           #{e1 9540}#
                           #{e2 9541}#)
                    (and-map #{id? 4343}# #{id 9538}#))
                  #{tmp 9534}#)
                #f)
            (@apply
              (lambda (#{id 9557}#
                       #{val 9558}#
                       #{e1 9559}#
                       #{e2 9560}#)
                (if (not (#{valid-bound-ids? 4365}# #{id 9557}#))
                  (syntax-violation
                    'letrec*
                    "duplicate bound variable"
                    #{e 9528}#)
                  (let ((#{labels 9657}#
                          (#{gen-labels 4346}# #{id 9557}#))
                        (#{new-vars 9658}#
                          (map #{gen-var 4389}# #{id 9557}#)))
                    (let ((#{w 9659}#
                            (#{make-binding-wrap 4357}#
                              #{id 9557}#
                              #{labels 9657}#
                              #{w 9530}#))
                          (#{r 9660}#
                            (#{extend-var-env 4338}#
                              #{labels 9657}#
                              #{new-vars 9658}#
                              #{r 9529}#)))
                      (#{build-letrec 4327}#
                        #{s 9531}#
                        #t
                        (map syntax->datum #{id 9557}#)
                        #{new-vars 9658}#
                        (map (lambda (#{x 9739}#)
                               (#{chi 4375}#
                                 #{x 9739}#
                                 #{r 9660}#
                                 #{w 9659}#
                                 #{mod 9532}#))
                             #{val 9558}#)
                        (#{chi-body 4379}#
                          (cons #{e1 9559}# #{e2 9560}#)
                          (let ((#{x 9801}#
                                  (begin
                                    (if (if (pair? #{e 9528}#) #{s 9531}# #f)
                                      (set-source-properties!
                                        #{e 9528}#
                                        #{s 9531}#))
                                    #{e 9528}#)))
                            (if (if (null? (car #{w 9659}#))
                                  (null? (cdr #{w 9659}#))
                                  #f)
                              #{x 9801}#
                              (if (if (vector? #{x 9801}#)
                                    (if (= (vector-length #{x 9801}#) 4)
                                      (eq? (vector-ref #{x 9801}# 0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (let ((#{expression 9833}#
                                        (vector-ref #{x 9801}# 1))
                                      (#{wrap 9834}#
                                        (let ((#{w2 9842}#
                                                (vector-ref #{x 9801}# 2)))
                                          (let ((#{m1 9843}# (car #{w 9659}#))
                                                (#{s1 9844}# (cdr #{w 9659}#)))
                                            (if (null? #{m1 9843}#)
                                              (if (null? #{s1 9844}#)
                                                #{w2 9842}#
                                                (cons (car #{w2 9842}#)
                                                      (let ((#{m2 9859}#
                                                              (cdr #{w2 9842}#)))
                                                        (if (null? #{m2 9859}#)
                                                          #{s1 9844}#
                                                          (append
                                                            #{s1 9844}#
                                                            #{m2 9859}#)))))
                                              (cons (let ((#{m2 9867}#
                                                            (car #{w2 9842}#)))
                                                      (if (null? #{m2 9867}#)
                                                        #{m1 9843}#
                                                        (append
                                                          #{m1 9843}#
                                                          #{m2 9867}#)))
                                                    (let ((#{m2 9875}#
                                                            (cdr #{w2 9842}#)))
                                                      (if (null? #{m2 9875}#)
                                                        #{s1 9844}#
                                                        (append
                                                          #{s1 9844}#
                                                          #{m2 9875}#))))))))
                                      (#{module 9835}#
                                        (vector-ref #{x 9801}# 3)))
                                  (vector
                                    'syntax-object
                                    #{expression 9833}#
                                    #{wrap 9834}#
                                    #{module 9835}#))
                                (if (null? #{x 9801}#)
                                  #{x 9801}#
                                  (vector
                                    'syntax-object
                                    #{x 9801}#
                                    #{w 9659}#
                                    #{mod 9532}#)))))
                          #{r 9660}#
                          #{w 9659}#
                          #{mod 9532}#))))))
              #{tmp 9534}#)
            (syntax-violation
              'letrec*
              "bad letrec*"
              (let ((#{x 10115}#
                      (begin
                        (if (if (pair? #{e 9528}#) #{s 9531}# #f)
                          (set-source-properties! #{e 9528}# #{s 9531}#))
                        #{e 9528}#)))
                (if (if (null? (car #{w 9530}#))
                      (null? (cdr #{w 9530}#))
                      #f)
                  #{x 10115}#
                  (if (if (vector? #{x 10115}#)
                        (if (= (vector-length #{x 10115}#) 4)
                          (eq? (vector-ref #{x 10115}# 0) 'syntax-object)
                          #f)
                        #f)
                    (let ((#{expression 10147}# (vector-ref #{x 10115}# 1))
                          (#{wrap 10148}#
                            (let ((#{w2 10156}# (vector-ref #{x 10115}# 2)))
                              (let ((#{m1 10157}# (car #{w 9530}#))
                                    (#{s1 10158}# (cdr #{w 9530}#)))
                                (if (null? #{m1 10157}#)
                                  (if (null? #{s1 10158}#)
                                    #{w2 10156}#
                                    (cons (car #{w2 10156}#)
                                          (let ((#{m2 10173}#
                                                  (cdr #{w2 10156}#)))
                                            (if (null? #{m2 10173}#)
                                              #{s1 10158}#
                                              (append
                                                #{s1 10158}#
                                                #{m2 10173}#)))))
                                  (cons (let ((#{m2 10181}#
                                                (car #{w2 10156}#)))
                                          (if (null? #{m2 10181}#)
                                            #{m1 10157}#
                                            (append
                                              #{m1 10157}#
                                              #{m2 10181}#)))
                                        (let ((#{m2 10189}#
                                                (cdr #{w2 10156}#)))
                                          (if (null? #{m2 10189}#)
                                            #{s1 10158}#
                                            (append
                                              #{s1 10158}#
                                              #{m2 10189}#))))))))
                          (#{module 10149}# (vector-ref #{x 10115}# 3)))
                      (vector
                        'syntax-object
                        #{expression 10147}#
                        #{wrap 10148}#
                        #{module 10149}#))
                    (if (null? #{x 10115}#)
                      #{x 10115}#
                      (vector
                        'syntax-object
                        #{x 10115}#
                        #{w 9530}#
                        #{mod 9532}#))))))))))
    (#{global-extend 4341}#
      'core
      'set!
      (lambda (#{e 10408}#
               #{r 10409}#
               #{w 10410}#
               #{s 10411}#
               #{mod 10412}#)
        (let ((#{tmp 10414}#
                ($sc-dispatch #{e 10408}# '(_ any any))))
          (if (if #{tmp 10414}#
                (@apply
                  (lambda (#{id 10418}# #{val 10419}#)
                    (if (symbol? #{id 10418}#)
                      #t
                      (if (if (vector? #{id 10418}#)
                            (if (= (vector-length #{id 10418}#) 4)
                              (eq? (vector-ref #{id 10418}# 0) 'syntax-object)
                              #f)
                            #f)
                        (symbol? (vector-ref #{id 10418}# 1))
                        #f)))
                  #{tmp 10414}#)
                #f)
            (@apply
              (lambda (#{id 10446}# #{val 10447}#)
                (let ((#{n 10448}#
                        (#{id-var-name 4362}# #{id 10446}# #{w 10410}#))
                      (#{id-mod 10449}#
                        (if (if (vector? #{id 10446}#)
                              (if (= (vector-length #{id 10446}#) 4)
                                (eq? (vector-ref #{id 10446}# 0)
                                     'syntax-object)
                                #f)
                              #f)
                          (vector-ref #{id 10446}# 3)
                          #{mod 10412}#)))
                  (let ((#{b 10450}#
                          (let ((#{t 11167}# (assq #{n 10448}# #{r 10409}#)))
                            (if #{t 11167}#
                              (cdr #{t 11167}#)
                              (if (symbol? #{n 10448}#)
                                (let ((#{t 11172}#
                                        (begin
                                          (if (if (not #{id-mod 10449}#)
                                                (current-module)
                                                #f)
                                            (warn "module system is booted, we should have a module"
                                                  #{n 10448}#))
                                          (let ((#{v 11209}#
                                                  (module-variable
                                                    (if #{id-mod 10449}#
                                                      (resolve-module
                                                        (cdr #{id-mod 10449}#))
                                                      (current-module))
                                                    #{n 10448}#)))
                                            (if #{v 11209}#
                                              (if (variable-bound? #{v 11209}#)
                                                (let ((#{val 11218}#
                                                        (variable-ref
                                                          #{v 11209}#)))
                                                  (if (macro? #{val 11218}#)
                                                    (if (macro-type
                                                          #{val 11218}#)
                                                      (cons (macro-type
                                                              #{val 11218}#)
                                                            (macro-binding
                                                              #{val 11218}#))
                                                      #f)
                                                    #f))
                                                #f)
                                              #f)))))
                                  (if #{t 11172}# #{t 11172}# '(global)))
                                '(displaced-lexical))))))
                    (let ((#{atom-key 10451}# (car #{b 10450}#)))
                      (if (let ((#{t 10490}# #{atom-key 10451}#))
                            (eqv? #{t 10490}# 'lexical))
                        (#{build-lexical-assignment 4313}#
                          #{s 10411}#
                          (syntax->datum #{id 10446}#)
                          (cdr #{b 10450}#)
                          (#{chi 4375}#
                            #{val 10447}#
                            #{r 10409}#
                            #{w 10410}#
                            #{mod 10412}#))
                        (if (let ((#{t 10789}# #{atom-key 10451}#))
                              (eqv? #{t 10789}# 'global))
                          (#{build-global-assignment 4316}#
                            #{s 10411}#
                            #{n 10448}#
                            (#{chi 4375}#
                              #{val 10447}#
                              #{r 10409}#
                              #{w 10410}#
                              #{mod 10412}#)
                            #{id-mod 10449}#)
                          (if (let ((#{t 11058}# #{atom-key 10451}#))
                                (eqv? #{t 11058}# 'macro))
                            (let ((#{p 11121}# (cdr #{b 10450}#)))
                              (if (procedure-property
                                    #{p 11121}#
                                    'variable-transformer)
                                (#{chi 4375}#
                                  (#{chi-macro 4378}#
                                    #{p 11121}#
                                    #{e 10408}#
                                    #{r 10409}#
                                    #{w 10410}#
                                    #{s 10411}#
                                    #f
                                    #{mod 10412}#)
                                  #{r 10409}#
                                  '(())
                                  #{mod 10412}#)
                                (syntax-violation
                                  'set!
                                  "not a variable transformer"
                                  (if (if (null? (car #{w 10410}#))
                                        (null? (cdr #{w 10410}#))
                                        #f)
                                    #{e 10408}#
                                    (if (if (vector? #{e 10408}#)
                                          (if (= (vector-length #{e 10408}#) 4)
                                            (eq? (vector-ref #{e 10408}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (let ((#{expression 11323}#
                                              (vector-ref #{e 10408}# 1))
                                            (#{wrap 11324}#
                                              (let ((#{w2 11334}#
                                                      (vector-ref
                                                        #{e 10408}#
                                                        2)))
                                                (let ((#{m1 11335}#
                                                        (car #{w 10410}#))
                                                      (#{s1 11336}#
                                                        (cdr #{w 10410}#)))
                                                  (if (null? #{m1 11335}#)
                                                    (if (null? #{s1 11336}#)
                                                      #{w2 11334}#
                                                      (cons (car #{w2 11334}#)
                                                            (let ((#{m2 11353}#
                                                                    (cdr #{w2 11334}#)))
                                                              (if (null? #{m2 11353}#)
                                                                #{s1 11336}#
                                                                (append
                                                                  #{s1 11336}#
                                                                  #{m2 11353}#)))))
                                                    (cons (let ((#{m2 11361}#
                                                                  (car #{w2 11334}#)))
                                                            (if (null? #{m2 11361}#)
                                                              #{m1 11335}#
                                                              (append
                                                                #{m1 11335}#
                                                                #{m2 11361}#)))
                                                          (let ((#{m2 11369}#
                                                                  (cdr #{w2 11334}#)))
                                                            (if (null? #{m2 11369}#)
                                                              #{s1 11336}#
                                                              (append
                                                                #{s1 11336}#
                                                                #{m2 11369}#))))))))
                                            (#{module 11325}#
                                              (vector-ref #{e 10408}# 3)))
                                        (vector
                                          'syntax-object
                                          #{expression 11323}#
                                          #{wrap 11324}#
                                          #{module 11325}#))
                                      (if (null? #{e 10408}#)
                                        #{e 10408}#
                                        (vector
                                          'syntax-object
                                          #{e 10408}#
                                          #{w 10410}#
                                          #{mod 10412}#))))
                                  (if (if (null? (car #{w 10410}#))
                                        (null? (cdr #{w 10410}#))
                                        #f)
                                    #{id 10446}#
                                    (if (if (vector? #{id 10446}#)
                                          (if (= (vector-length #{id 10446}#)
                                                 4)
                                            (eq? (vector-ref #{id 10446}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (let ((#{expression 11421}#
                                              (vector-ref #{id 10446}# 1))
                                            (#{wrap 11422}#
                                              (let ((#{w2 11432}#
                                                      (vector-ref
                                                        #{id 10446}#
                                                        2)))
                                                (let ((#{m1 11433}#
                                                        (car #{w 10410}#))
                                                      (#{s1 11434}#
                                                        (cdr #{w 10410}#)))
                                                  (if (null? #{m1 11433}#)
                                                    (if (null? #{s1 11434}#)
                                                      #{w2 11432}#
                                                      (cons (car #{w2 11432}#)
                                                            (let ((#{m2 11451}#
                                                                    (cdr #{w2 11432}#)))
                                                              (if (null? #{m2 11451}#)
                                                                #{s1 11434}#
                                                                (append
                                                                  #{s1 11434}#
                                                                  #{m2 11451}#)))))
                                                    (cons (let ((#{m2 11459}#
                                                                  (car #{w2 11432}#)))
                                                            (if (null? #{m2 11459}#)
                                                              #{m1 11433}#
                                                              (append
                                                                #{m1 11433}#
                                                                #{m2 11459}#)))
                                                          (let ((#{m2 11467}#
                                                                  (cdr #{w2 11432}#)))
                                                            (if (null? #{m2 11467}#)
                                                              #{s1 11434}#
                                                              (append
                                                                #{s1 11434}#
                                                                #{m2 11467}#))))))))
                                            (#{module 11423}#
                                              (vector-ref #{id 10446}# 3)))
                                        (vector
                                          'syntax-object
                                          #{expression 11421}#
                                          #{wrap 11422}#
                                          #{module 11423}#))
                                      (if (null? #{id 10446}#)
                                        #{id 10446}#
                                        (vector
                                          'syntax-object
                                          #{id 10446}#
                                          #{w 10410}#
                                          #{id-mod 10449}#)))))))
                            (if (eqv? #{atom-key 10451}# 'displaced-lexical)
                              (syntax-violation
                                'set!
                                "identifier out of context"
                                (if (if (null? (car #{w 10410}#))
                                      (null? (cdr #{w 10410}#))
                                      #f)
                                  #{id 10446}#
                                  (if (if (vector? #{id 10446}#)
                                        (if (= (vector-length #{id 10446}#) 4)
                                          (eq? (vector-ref #{id 10446}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (let ((#{expression 11523}#
                                            (vector-ref #{id 10446}# 1))
                                          (#{wrap 11524}#
                                            (let ((#{w2 11534}#
                                                    (vector-ref
                                                      #{id 10446}#
                                                      2)))
                                              (let ((#{m1 11535}#
                                                      (car #{w 10410}#))
                                                    (#{s1 11536}#
                                                      (cdr #{w 10410}#)))
                                                (if (null? #{m1 11535}#)
                                                  (if (null? #{s1 11536}#)
                                                    #{w2 11534}#
                                                    (cons (car #{w2 11534}#)
                                                          (let ((#{m2 11553}#
                                                                  (cdr #{w2 11534}#)))
                                                            (if (null? #{m2 11553}#)
                                                              #{s1 11536}#
                                                              (append
                                                                #{s1 11536}#
                                                                #{m2 11553}#)))))
                                                  (cons (let ((#{m2 11561}#
                                                                (car #{w2 11534}#)))
                                                          (if (null? #{m2 11561}#)
                                                            #{m1 11535}#
                                                            (append
                                                              #{m1 11535}#
                                                              #{m2 11561}#)))
                                                        (let ((#{m2 11569}#
                                                                (cdr #{w2 11534}#)))
                                                          (if (null? #{m2 11569}#)
                                                            #{s1 11536}#
                                                            (append
                                                              #{s1 11536}#
                                                              #{m2 11569}#))))))))
                                          (#{module 11525}#
                                            (vector-ref #{id 10446}# 3)))
                                      (vector
                                        'syntax-object
                                        #{expression 11523}#
                                        #{wrap 11524}#
                                        #{module 11525}#))
                                    (if (null? #{id 10446}#)
                                      #{id 10446}#
                                      (vector
                                        'syntax-object
                                        #{id 10446}#
                                        #{w 10410}#
                                        #{mod 10412}#)))))
                              (syntax-violation
                                'set!
                                "bad set!"
                                (let ((#{x 11601}#
                                        (begin
                                          (if (if (pair? #{e 10408}#)
                                                #{s 10411}#
                                                #f)
                                            (set-source-properties!
                                              #{e 10408}#
                                              #{s 10411}#))
                                          #{e 10408}#)))
                                  (if (if (null? (car #{w 10410}#))
                                        (null? (cdr #{w 10410}#))
                                        #f)
                                    #{x 11601}#
                                    (if (if (vector? #{x 11601}#)
                                          (if (= (vector-length #{x 11601}#) 4)
                                            (eq? (vector-ref #{x 11601}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (let ((#{expression 11633}#
                                              (vector-ref #{x 11601}# 1))
                                            (#{wrap 11634}#
                                              (let ((#{w2 11642}#
                                                      (vector-ref
                                                        #{x 11601}#
                                                        2)))
                                                (let ((#{m1 11643}#
                                                        (car #{w 10410}#))
                                                      (#{s1 11644}#
                                                        (cdr #{w 10410}#)))
                                                  (if (null? #{m1 11643}#)
                                                    (if (null? #{s1 11644}#)
                                                      #{w2 11642}#
                                                      (cons (car #{w2 11642}#)
                                                            (let ((#{m2 11659}#
                                                                    (cdr #{w2 11642}#)))
                                                              (if (null? #{m2 11659}#)
                                                                #{s1 11644}#
                                                                (append
                                                                  #{s1 11644}#
                                                                  #{m2 11659}#)))))
                                                    (cons (let ((#{m2 11667}#
                                                                  (car #{w2 11642}#)))
                                                            (if (null? #{m2 11667}#)
                                                              #{m1 11643}#
                                                              (append
                                                                #{m1 11643}#
                                                                #{m2 11667}#)))
                                                          (let ((#{m2 11675}#
                                                                  (cdr #{w2 11642}#)))
                                                            (if (null? #{m2 11675}#)
                                                              #{s1 11644}#
                                                              (append
                                                                #{s1 11644}#
                                                                #{m2 11675}#))))))))
                                            (#{module 11635}#
                                              (vector-ref #{x 11601}# 3)))
                                        (vector
                                          'syntax-object
                                          #{expression 11633}#
                                          #{wrap 11634}#
                                          #{module 11635}#))
                                      (if (null? #{x 11601}#)
                                        #{x 11601}#
                                        (vector
                                          'syntax-object
                                          #{x 11601}#
                                          #{w 10410}#
                                          #{mod 10412}#))))))))))))))
              #{tmp 10414}#)
            (let ((#{tmp 11690}#
                    ($sc-dispatch
                      #{e 10408}#
                      '(_ (any . each-any) any))))
              (if #{tmp 11690}#
                (@apply
                  (lambda (#{head 11694}# #{tail 11695}# #{val 11696}#)
                    (call-with-values
                      (lambda ()
                        (#{syntax-type 4374}#
                          #{head 11694}#
                          #{r 10409}#
                          '(())
                          #f
                          #f
                          #{mod 10412}#
                          #t))
                      (lambda (#{type 11699}#
                               #{value 11700}#
                               #{ee 11701}#
                               #{ww 11702}#
                               #{ss 11703}#
                               #{modmod 11704}#)
                        (if (eqv? #{type 11699}# 'module-ref)
                          (let ((#{val 11708}#
                                  (#{chi 4375}#
                                    #{val 11696}#
                                    #{r 10409}#
                                    #{w 10410}#
                                    #{mod 10412}#)))
                            (call-with-values
                              (lambda ()
                                (#{value 11700}#
                                  (cons #{head 11694}# #{tail 11695}#)
                                  #{r 10409}#
                                  #{w 10410}#))
                              (lambda (#{e 11709}#
                                       #{r 11710}#
                                       #{w 11711}#
                                       #{s* 11712}#
                                       #{mod 11713}#)
                                (let ((#{tmp 11715}# (list #{e 11709}#)))
                                  (if (@apply
                                        (lambda (#{e 11717}#)
                                          (if (symbol? #{e 11717}#)
                                            #t
                                            (if (if (vector? #{e 11717}#)
                                                  (if (= (vector-length
                                                           #{e 11717}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{e 11717}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (symbol?
                                                (vector-ref #{e 11717}# 1))
                                              #f)))
                                        #{tmp 11715}#)
                                    (@apply
                                      (lambda (#{e 11747}#)
                                        (#{build-global-assignment 4316}#
                                          #{s 10411}#
                                          (syntax->datum #{e 11747}#)
                                          #{val 11708}#
                                          #{mod 11713}#))
                                      #{tmp 11715}#)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      #{e 11709}#))))))
                          (#{build-call 4309}#
                            #{s 10411}#
                            (#{chi 4375}#
                              (list '#(syntax-object
                                       setter
                                       ((top)
                                        #(ribcage () () ())
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(type value ee ww ss modmod)
                                          #((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                          #("i3587"
                                            "i3588"
                                            "i3589"
                                            "i3590"
                                            "i3591"
                                            "i3592"))
                                        #(ribcage
                                          #(head tail val)
                                          #((top) (top) (top))
                                          #("i3573" "i3574" "i3575"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(e r w s mod)
                                          #((top) (top) (top) (top) (top))
                                          #("i3537"
                                            "i3538"
                                            "i3539"
                                            "i3540"
                                            "i3541"))
                                        #(ribcage
                                          (lambda-var-list
                                            gen-var
                                            strip
                                            chi-lambda-case
                                            lambda*-formals
                                            chi-simple-lambda
                                            lambda-formals
                                            ellipsis?
                                            chi-void
                                            eval-local-transformer
                                            chi-local-syntax
                                            chi-body
                                            chi-macro
                                            chi-call
                                            chi-expr
                                            chi
                                            syntax-type
                                            chi-when-list
                                            chi-install-global
                                            chi-top-sequence
                                            chi-sequence
                                            source-wrap
                                            wrap
                                            bound-id-member?
                                            distinct-bound-ids?
                                            valid-bound-ids?
                                            bound-id=?
                                            free-id=?
                                            id-var-name
                                            same-marks?
                                            join-marks
                                            join-wraps
                                            smart-append
                                            make-binding-wrap
                                            extend-ribcage!
                                            make-empty-ribcage
                                            new-mark
                                            anti-mark
                                            the-anti-mark
                                            top-marked?
                                            top-wrap
                                            empty-wrap
                                            set-ribcage-labels!
                                            set-ribcage-marks!
                                            set-ribcage-symnames!
                                            ribcage-labels
                                            ribcage-marks
                                            ribcage-symnames
                                            ribcage?
                                            make-ribcage
                                            gen-labels
                                            gen-label
                                            make-rename
                                            rename-marks
                                            rename-new
                                            rename-old
                                            subst-rename?
                                            wrap-subst
                                            wrap-marks
                                            make-wrap
                                            id-sym-name&marks
                                            id-sym-name
                                            id?
                                            nonsymbol-id?
                                            global-extend
                                            lookup
                                            macros-only-env
                                            extend-var-env
                                            extend-env
                                            null-env
                                            binding-value
                                            binding-type
                                            make-binding
                                            arg-check
                                            source-annotation
                                            no-source
                                            set-syntax-object-module!
                                            set-syntax-object-wrap!
                                            set-syntax-object-expression!
                                            syntax-object-module
                                            syntax-object-wrap
                                            syntax-object-expression
                                            syntax-object?
                                            make-syntax-object
                                            build-lexical-var
                                            build-letrec
                                            build-named-let
                                            build-let
                                            build-sequence
                                            build-data
                                            build-primref
                                            build-primcall
                                            build-lambda-case
                                            build-case-lambda
                                            build-simple-lambda
                                            build-global-definition
                                            build-global-assignment
                                            build-global-reference
                                            analyze-variable
                                            build-lexical-assignment
                                            build-lexical-reference
                                            build-dynlet
                                            build-conditional
                                            build-call
                                            build-void
                                            maybe-name-value!
                                            decorate-source
                                            get-global-definition-hook
                                            put-global-definition-hook
                                            gensym-hook
                                            local-eval-hook
                                            top-level-eval-hook
                                            fx<
                                            fx=
                                            fx-
                                            fx+
                                            set-lambda-meta!
                                            lambda-meta
                                            lambda?
                                            make-dynlet
                                            make-letrec
                                            make-let
                                            make-lambda-case
                                            make-lambda
                                            make-seq
                                            make-primcall
                                            make-call
                                            make-conditional
                                            make-toplevel-define
                                            make-toplevel-set
                                            make-toplevel-ref
                                            make-module-set
                                            make-module-ref
                                            make-lexical-set
                                            make-lexical-ref
                                            make-primitive-ref
                                            make-const
                                            make-void)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("i471"
                                           "i469"
                                           "i467"
                                           "i465"
                                           "i463"
                                           "i461"
                                           "i459"
                                           "i457"
                                           "i455"
                                           "i453"
                                           "i451"
                                           "i449"
                                           "i447"
                                           "i445"
                                           "i443"
                                           "i441"
                                           "i439"
                                           "i437"
                                           "i435"
                                           "i433"
                                           "i431"
                                           "i429"
                                           "i427"
                                           "i425"
                                           "i423"
                                           "i421"
                                           "i419"
                                           "i417"
                                           "i415"
                                           "i413"
                                           "i411"
                                           "i409"
                                           "i407"
                                           "i405"
                                           "i403"
                                           "i402"
                                           "i400"
                                           "i397"
                                           "i396"
                                           "i395"
                                           "i393"
                                           "i392"
                                           "i390"
                                           "i388"
                                           "i386"
                                           "i384"
                                           "i382"
                                           "i380"
                                           "i378"
                                           "i376"
                                           "i373"
                                           "i371"
                                           "i370"
                                           "i368"
                                           "i366"
                                           "i364"
                                           "i362"
                                           "i361"
                                           "i360"
                                           "i359"
                                           "i357"
                                           "i356"
                                           "i353"
                                           "i351"
                                           "i349"
                                           "i347"
                                           "i345"
                                           "i343"
                                           "i341"
                                           "i340"
                                           "i339"
                                           "i337"
                                           "i335"
                                           "i334"
                                           "i331"
                                           "i330"
                                           "i328"
                                           "i326"
                                           "i324"
                                           "i322"
                                           "i320"
                                           "i318"
                                           "i316"
                                           "i314"
                                           "i312"
                                           "i309"
                                           "i307"
                                           "i305"
                                           "i303"
                                           "i301"
                                           "i299"
                                           "i297"
                                           "i295"
                                           "i293"
                                           "i291"
                                           "i289"
                                           "i287"
                                           "i285"
                                           "i283"
                                           "i281"
                                           "i279"
                                           "i277"
                                           "i275"
                                           "i273"
                                           "i271"
                                           "i269"
                                           "i267"
                                           "i265"
                                           "i263"
                                           "i262"
                                           "i259"
                                           "i257"
                                           "i256"
                                           "i255"
                                           "i254"
                                           "i253"
                                           "i251"
                                           "i249"
                                           "i247"
                                           "i244"
                                           "i242"
                                           "i240"
                                           "i238"
                                           "i236"
                                           "i234"
                                           "i232"
                                           "i230"
                                           "i228"
                                           "i226"
                                           "i224"
                                           "i222"
                                           "i220"
                                           "i218"
                                           "i216"
                                           "i214"
                                           "i212"
                                           "i210"
                                           "i208"))
                                        #(ribcage
                                          (define-structure
                                            define-expansion-accessors
                                            define-expansion-constructors)
                                          ((top) (top) (top))
                                          ("i46" "i45" "i44")))
                                       (hygiene guile))
                                    #{head 11694}#)
                              #{r 10409}#
                              #{w 10410}#
                              #{mod 10412}#)
                            (map (lambda (#{e 12076}#)
                                   (#{chi 4375}#
                                     #{e 12076}#
                                     #{r 10409}#
                                     #{w 10410}#
                                     #{mod 10412}#))
                                 (append
                                   #{tail 11695}#
                                   (list #{val 11696}#))))))))
                  #{tmp 11690}#)
                (syntax-violation
                  'set!
                  "bad set!"
                  (let ((#{x 12168}#
                          (begin
                            (if (if (pair? #{e 10408}#) #{s 10411}# #f)
                              (set-source-properties! #{e 10408}# #{s 10411}#))
                            #{e 10408}#)))
                    (if (if (null? (car #{w 10410}#))
                          (null? (cdr #{w 10410}#))
                          #f)
                      #{x 12168}#
                      (if (if (vector? #{x 12168}#)
                            (if (= (vector-length #{x 12168}#) 4)
                              (eq? (vector-ref #{x 12168}# 0) 'syntax-object)
                              #f)
                            #f)
                        (let ((#{expression 12200}# (vector-ref #{x 12168}# 1))
                              (#{wrap 12201}#
                                (let ((#{w2 12209}#
                                        (vector-ref #{x 12168}# 2)))
                                  (let ((#{m1 12210}# (car #{w 10410}#))
                                        (#{s1 12211}# (cdr #{w 10410}#)))
                                    (if (null? #{m1 12210}#)
                                      (if (null? #{s1 12211}#)
                                        #{w2 12209}#
                                        (cons (car #{w2 12209}#)
                                              (let ((#{m2 12226}#
                                                      (cdr #{w2 12209}#)))
                                                (if (null? #{m2 12226}#)
                                                  #{s1 12211}#
                                                  (append
                                                    #{s1 12211}#
                                                    #{m2 12226}#)))))
                                      (cons (let ((#{m2 12234}#
                                                    (car #{w2 12209}#)))
                                              (if (null? #{m2 12234}#)
                                                #{m1 12210}#
                                                (append
                                                  #{m1 12210}#
                                                  #{m2 12234}#)))
                                            (let ((#{m2 12242}#
                                                    (cdr #{w2 12209}#)))
                                              (if (null? #{m2 12242}#)
                                                #{s1 12211}#
                                                (append
                                                  #{s1 12211}#
                                                  #{m2 12242}#))))))))
                              (#{module 12202}# (vector-ref #{x 12168}# 3)))
                          (vector
                            'syntax-object
                            #{expression 12200}#
                            #{wrap 12201}#
                            #{module 12202}#))
                        (if (null? #{x 12168}#)
                          #{x 12168}#
                          (vector
                            'syntax-object
                            #{x 12168}#
                            #{w 10410}#
                            #{mod 10412}#))))))))))))
    (module-define!
      (current-module)
      '@
      (make-syntax-transformer
        '@
        'module-ref
        (lambda (#{e 12273}# #{r 12274}# #{w 12275}#)
          (let ((#{tmp 12277}#
                  ($sc-dispatch #{e 12273}# '(_ each-any any))))
            (if (if #{tmp 12277}#
                  (@apply
                    (lambda (#{mod 12280}# #{id 12281}#)
                      (if (and-map #{id? 4343}# #{mod 12280}#)
                        (if (symbol? #{id 12281}#)
                          #t
                          (if (if (vector? #{id 12281}#)
                                (if (= (vector-length #{id 12281}#) 4)
                                  (eq? (vector-ref #{id 12281}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{id 12281}# 1))
                            #f))
                        #f))
                    #{tmp 12277}#)
                  #f)
              (@apply
                (lambda (#{mod 12321}# #{id 12322}#)
                  (values
                    (syntax->datum #{id 12322}#)
                    #{r 12274}#
                    #{w 12275}#
                    #f
                    (syntax->datum
                      (cons '#(syntax-object
                               public
                               ((top)
                                #(ribcage
                                  #(mod id)
                                  #((top) (top))
                                  #("i3634" "i3635"))
                                #(ribcage () () ())
                                #(ribcage
                                  #(e r w)
                                  #((top) (top) (top))
                                  #("i3622" "i3623" "i3624"))
                                #(ribcage
                                  (lambda-var-list
                                    gen-var
                                    strip
                                    chi-lambda-case
                                    lambda*-formals
                                    chi-simple-lambda
                                    lambda-formals
                                    ellipsis?
                                    chi-void
                                    eval-local-transformer
                                    chi-local-syntax
                                    chi-body
                                    chi-macro
                                    chi-call
                                    chi-expr
                                    chi
                                    syntax-type
                                    chi-when-list
                                    chi-install-global
                                    chi-top-sequence
                                    chi-sequence
                                    source-wrap
                                    wrap
                                    bound-id-member?
                                    distinct-bound-ids?
                                    valid-bound-ids?
                                    bound-id=?
                                    free-id=?
                                    id-var-name
                                    same-marks?
                                    join-marks
                                    join-wraps
                                    smart-append
                                    make-binding-wrap
                                    extend-ribcage!
                                    make-empty-ribcage
                                    new-mark
                                    anti-mark
                                    the-anti-mark
                                    top-marked?
                                    top-wrap
                                    empty-wrap
                                    set-ribcage-labels!
                                    set-ribcage-marks!
                                    set-ribcage-symnames!
                                    ribcage-labels
                                    ribcage-marks
                                    ribcage-symnames
                                    ribcage?
                                    make-ribcage
                                    gen-labels
                                    gen-label
                                    make-rename
                                    rename-marks
                                    rename-new
                                    rename-old
                                    subst-rename?
                                    wrap-subst
                                    wrap-marks
                                    make-wrap
                                    id-sym-name&marks
                                    id-sym-name
                                    id?
                                    nonsymbol-id?
                                    global-extend
                                    lookup
                                    macros-only-env
                                    extend-var-env
                                    extend-env
                                    null-env
                                    binding-value
                                    binding-type
                                    make-binding
                                    arg-check
                                    source-annotation
                                    no-source
                                    set-syntax-object-module!
                                    set-syntax-object-wrap!
                                    set-syntax-object-expression!
                                    syntax-object-module
                                    syntax-object-wrap
                                    syntax-object-expression
                                    syntax-object?
                                    make-syntax-object
                                    build-lexical-var
                                    build-letrec
                                    build-named-let
                                    build-let
                                    build-sequence
                                    build-data
                                    build-primref
                                    build-primcall
                                    build-lambda-case
                                    build-case-lambda
                                    build-simple-lambda
                                    build-global-definition
                                    build-global-assignment
                                    build-global-reference
                                    analyze-variable
                                    build-lexical-assignment
                                    build-lexical-reference
                                    build-dynlet
                                    build-conditional
                                    build-call
                                    build-void
                                    maybe-name-value!
                                    decorate-source
                                    get-global-definition-hook
                                    put-global-definition-hook
                                    gensym-hook
                                    local-eval-hook
                                    top-level-eval-hook
                                    fx<
                                    fx=
                                    fx-
                                    fx+
                                    set-lambda-meta!
                                    lambda-meta
                                    lambda?
                                    make-dynlet
                                    make-letrec
                                    make-let
                                    make-lambda-case
                                    make-lambda
                                    make-seq
                                    make-primcall
                                    make-call
                                    make-conditional
                                    make-toplevel-define
                                    make-toplevel-set
                                    make-toplevel-ref
                                    make-module-set
                                    make-module-ref
                                    make-lexical-set
                                    make-lexical-ref
                                    make-primitive-ref
                                    make-const
                                    make-void)
                                  ((top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top))
                                  ("i471"
                                   "i469"
                                   "i467"
                                   "i465"
                                   "i463"
                                   "i461"
                                   "i459"
                                   "i457"
                                   "i455"
                                   "i453"
                                   "i451"
                                   "i449"
                                   "i447"
                                   "i445"
                                   "i443"
                                   "i441"
                                   "i439"
                                   "i437"
                                   "i435"
                                   "i433"
                                   "i431"
                                   "i429"
                                   "i427"
                                   "i425"
                                   "i423"
                                   "i421"
                                   "i419"
                                   "i417"
                                   "i415"
                                   "i413"
                                   "i411"
                                   "i409"
                                   "i407"
                                   "i405"
                                   "i403"
                                   "i402"
                                   "i400"
                                   "i397"
                                   "i396"
                                   "i395"
                                   "i393"
                                   "i392"
                                   "i390"
                                   "i388"
                                   "i386"
                                   "i384"
                                   "i382"
                                   "i380"
                                   "i378"
                                   "i376"
                                   "i373"
                                   "i371"
                                   "i370"
                                   "i368"
                                   "i366"
                                   "i364"
                                   "i362"
                                   "i361"
                                   "i360"
                                   "i359"
                                   "i357"
                                   "i356"
                                   "i353"
                                   "i351"
                                   "i349"
                                   "i347"
                                   "i345"
                                   "i343"
                                   "i341"
                                   "i340"
                                   "i339"
                                   "i337"
                                   "i335"
                                   "i334"
                                   "i331"
                                   "i330"
                                   "i328"
                                   "i326"
                                   "i324"
                                   "i322"
                                   "i320"
                                   "i318"
                                   "i316"
                                   "i314"
                                   "i312"
                                   "i309"
                                   "i307"
                                   "i305"
                                   "i303"
                                   "i301"
                                   "i299"
                                   "i297"
                                   "i295"
                                   "i293"
                                   "i291"
                                   "i289"
                                   "i287"
                                   "i285"
                                   "i283"
                                   "i281"
                                   "i279"
                                   "i277"
                                   "i275"
                                   "i273"
                                   "i271"
                                   "i269"
                                   "i267"
                                   "i265"
                                   "i263"
                                   "i262"
                                   "i259"
                                   "i257"
                                   "i256"
                                   "i255"
                                   "i254"
                                   "i253"
                                   "i251"
                                   "i249"
                                   "i247"
                                   "i244"
                                   "i242"
                                   "i240"
                                   "i238"
                                   "i236"
                                   "i234"
                                   "i232"
                                   "i230"
                                   "i228"
                                   "i226"
                                   "i224"
                                   "i222"
                                   "i220"
                                   "i218"
                                   "i216"
                                   "i214"
                                   "i212"
                                   "i210"
                                   "i208"))
                                #(ribcage
                                  (define-structure
                                    define-expansion-accessors
                                    define-expansion-constructors)
                                  ((top) (top) (top))
                                  ("i46" "i45" "i44")))
                               (hygiene guile))
                            #{mod 12321}#))))
                #{tmp 12277}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{e 12273}#))))))
    (#{global-extend 4341}#
      'module-ref
      '@@
      (lambda (#{e 12426}# #{r 12427}# #{w 12428}#)
        (letrec*
          ((#{remodulate 12429}#
             (lambda (#{x 12665}# #{mod 12666}#)
               (if (pair? #{x 12665}#)
                 (cons (#{remodulate 12429}#
                         (car #{x 12665}#)
                         #{mod 12666}#)
                       (#{remodulate 12429}#
                         (cdr #{x 12665}#)
                         #{mod 12666}#))
                 (if (if (vector? #{x 12665}#)
                       (if (= (vector-length #{x 12665}#) 4)
                         (eq? (vector-ref #{x 12665}# 0) 'syntax-object)
                         #f)
                       #f)
                   (let ((#{expression 12680}#
                           (#{remodulate 12429}#
                             (vector-ref #{x 12665}# 1)
                             #{mod 12666}#))
                         (#{wrap 12681}# (vector-ref #{x 12665}# 2)))
                     (vector
                       'syntax-object
                       #{expression 12680}#
                       #{wrap 12681}#
                       #{mod 12666}#))
                   (if (vector? #{x 12665}#)
                     (let ((#{n 12689}# (vector-length #{x 12665}#)))
                       (let ((#{v 12690}# (make-vector #{n 12689}#)))
                         (letrec*
                           ((#{loop 12691}#
                              (lambda (#{i 12746}#)
                                (if (= #{i 12746}# #{n 12689}#)
                                  #{v 12690}#
                                  (begin
                                    (vector-set!
                                      #{v 12690}#
                                      #{i 12746}#
                                      (#{remodulate 12429}#
                                        (vector-ref #{x 12665}# #{i 12746}#)
                                        #{mod 12666}#))
                                    (#{loop 12691}# (#{1+}# #{i 12746}#)))))))
                           (#{loop 12691}# 0))))
                     #{x 12665}#))))))
          (let ((#{tmp 12431}#
                  ($sc-dispatch #{e 12426}# '(_ each-any any))))
            (if (if #{tmp 12431}#
                  (@apply
                    (lambda (#{mod 12435}# #{exp 12436}#)
                      (and-map #{id? 4343}# #{mod 12435}#))
                    #{tmp 12431}#)
                  #f)
              (@apply
                (lambda (#{mod 12452}# #{exp 12453}#)
                  (let ((#{mod 12454}#
                          (syntax->datum
                            (cons '#(syntax-object
                                     private
                                     ((top)
                                      #(ribcage
                                        #(mod exp)
                                        #((top) (top))
                                        #("i3678" "i3679"))
                                      #(ribcage (remodulate) ((top)) ("i3645"))
                                      #(ribcage
                                        #(e r w)
                                        #((top) (top) (top))
                                        #("i3642" "i3643" "i3644"))
                                      #(ribcage
                                        (lambda-var-list
                                          gen-var
                                          strip
                                          chi-lambda-case
                                          lambda*-formals
                                          chi-simple-lambda
                                          lambda-formals
                                          ellipsis?
                                          chi-void
                                          eval-local-transformer
                                          chi-local-syntax
                                          chi-body
                                          chi-macro
                                          chi-call
                                          chi-expr
                                          chi
                                          syntax-type
                                          chi-when-list
                                          chi-install-global
                                          chi-top-sequence
                                          chi-sequence
                                          source-wrap
                                          wrap
                                          bound-id-member?
                                          distinct-bound-ids?
                                          valid-bound-ids?
                                          bound-id=?
                                          free-id=?
                                          id-var-name
                                          same-marks?
                                          join-marks
                                          join-wraps
                                          smart-append
                                          make-binding-wrap
                                          extend-ribcage!
                                          make-empty-ribcage
                                          new-mark
                                          anti-mark
                                          the-anti-mark
                                          top-marked?
                                          top-wrap
                                          empty-wrap
                                          set-ribcage-labels!
                                          set-ribcage-marks!
                                          set-ribcage-symnames!
                                          ribcage-labels
                                          ribcage-marks
                                          ribcage-symnames
                                          ribcage?
                                          make-ribcage
                                          gen-labels
                                          gen-label
                                          make-rename
                                          rename-marks
                                          rename-new
                                          rename-old
                                          subst-rename?
                                          wrap-subst
                                          wrap-marks
                                          make-wrap
                                          id-sym-name&marks
                                          id-sym-name
                                          id?
                                          nonsymbol-id?
                                          global-extend
                                          lookup
                                          macros-only-env
                                          extend-var-env
                                          extend-env
                                          null-env
                                          binding-value
                                          binding-type
                                          make-binding
                                          arg-check
                                          source-annotation
                                          no-source
                                          set-syntax-object-module!
                                          set-syntax-object-wrap!
                                          set-syntax-object-expression!
                                          syntax-object-module
                                          syntax-object-wrap
                                          syntax-object-expression
                                          syntax-object?
                                          make-syntax-object
                                          build-lexical-var
                                          build-letrec
                                          build-named-let
                                          build-let
                                          build-sequence
                                          build-data
                                          build-primref
                                          build-primcall
                                          build-lambda-case
                                          build-case-lambda
                                          build-simple-lambda
                                          build-global-definition
                                          build-global-assignment
                                          build-global-reference
                                          analyze-variable
                                          build-lexical-assignment
                                          build-lexical-reference
                                          build-dynlet
                                          build-conditional
                                          build-call
                                          build-void
                                          maybe-name-value!
                                          decorate-source
                                          get-global-definition-hook
                                          put-global-definition-hook
                                          gensym-hook
                                          local-eval-hook
                                          top-level-eval-hook
                                          fx<
                                          fx=
                                          fx-
                                          fx+
                                          set-lambda-meta!
                                          lambda-meta
                                          lambda?
                                          make-dynlet
                                          make-letrec
                                          make-let
                                          make-lambda-case
                                          make-lambda
                                          make-seq
                                          make-primcall
                                          make-call
                                          make-conditional
                                          make-toplevel-define
                                          make-toplevel-set
                                          make-toplevel-ref
                                          make-module-set
                                          make-module-ref
                                          make-lexical-set
                                          make-lexical-ref
                                          make-primitive-ref
                                          make-const
                                          make-void)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i471"
                                         "i469"
                                         "i467"
                                         "i465"
                                         "i463"
                                         "i461"
                                         "i459"
                                         "i457"
                                         "i455"
                                         "i453"
                                         "i451"
                                         "i449"
                                         "i447"
                                         "i445"
                                         "i443"
                                         "i441"
                                         "i439"
                                         "i437"
                                         "i435"
                                         "i433"
                                         "i431"
                                         "i429"
                                         "i427"
                                         "i425"
                                         "i423"
                                         "i421"
                                         "i419"
                                         "i417"
                                         "i415"
                                         "i413"
                                         "i411"
                                         "i409"
                                         "i407"
                                         "i405"
                                         "i403"
                                         "i402"
                                         "i400"
                                         "i397"
                                         "i396"
                                         "i395"
                                         "i393"
                                         "i392"
                                         "i390"
                                         "i388"
                                         "i386"
                                         "i384"
                                         "i382"
                                         "i380"
                                         "i378"
                                         "i376"
                                         "i373"
                                         "i371"
                                         "i370"
                                         "i368"
                                         "i366"
                                         "i364"
                                         "i362"
                                         "i361"
                                         "i360"
                                         "i359"
                                         "i357"
                                         "i356"
                                         "i353"
                                         "i351"
                                         "i349"
                                         "i347"
                                         "i345"
                                         "i343"
                                         "i341"
                                         "i340"
                                         "i339"
                                         "i337"
                                         "i335"
                                         "i334"
                                         "i331"
                                         "i330"
                                         "i328"
                                         "i326"
                                         "i324"
                                         "i322"
                                         "i320"
                                         "i318"
                                         "i316"
                                         "i314"
                                         "i312"
                                         "i309"
                                         "i307"
                                         "i305"
                                         "i303"
                                         "i301"
                                         "i299"
                                         "i297"
                                         "i295"
                                         "i293"
                                         "i291"
                                         "i289"
                                         "i287"
                                         "i285"
                                         "i283"
                                         "i281"
                                         "i279"
                                         "i277"
                                         "i275"
                                         "i273"
                                         "i271"
                                         "i269"
                                         "i267"
                                         "i265"
                                         "i263"
                                         "i262"
                                         "i259"
                                         "i257"
                                         "i256"
                                         "i255"
                                         "i254"
                                         "i253"
                                         "i251"
                                         "i249"
                                         "i247"
                                         "i244"
                                         "i242"
                                         "i240"
                                         "i238"
                                         "i236"
                                         "i234"
                                         "i232"
                                         "i230"
                                         "i228"
                                         "i226"
                                         "i224"
                                         "i222"
                                         "i220"
                                         "i218"
                                         "i216"
                                         "i214"
                                         "i212"
                                         "i210"
                                         "i208"))
                                      #(ribcage
                                        (define-structure
                                          define-expansion-accessors
                                          define-expansion-constructors)
                                        ((top) (top) (top))
                                        ("i46" "i45" "i44")))
                                     (hygiene guile))
                                  #{mod 12452}#))))
                    (values
                      (#{remodulate 12429}#
                        #{exp 12453}#
                        #{mod 12454}#)
                      #{r 12427}#
                      #{w 12428}#
                      (#{source-annotation 4336}# #{exp 12453}#)
                      #{mod 12454}#)))
                #{tmp 12431}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{e 12426}#))))))
    (#{global-extend 4341}#
      'core
      'if
      (lambda (#{e 12859}#
               #{r 12860}#
               #{w 12861}#
               #{s 12862}#
               #{mod 12863}#)
        (let ((#{tmp 12865}#
                ($sc-dispatch #{e 12859}# '(_ any any))))
          (if #{tmp 12865}#
            (@apply
              (lambda (#{test 12869}# #{then 12870}#)
                (#{build-conditional 4310}#
                  #{s 12862}#
                  (#{chi 4375}#
                    #{test 12869}#
                    #{r 12860}#
                    #{w 12861}#
                    #{mod 12863}#)
                  (#{chi 4375}#
                    #{then 12870}#
                    #{r 12860}#
                    #{w 12861}#
                    #{mod 12863}#)
                  (make-struct/no-tail
                    (vector-ref %expanded-vtables 0)
                    #f)))
              #{tmp 12865}#)
            (let ((#{tmp 13131}#
                    ($sc-dispatch #{e 12859}# '(_ any any any))))
              (if #{tmp 13131}#
                (@apply
                  (lambda (#{test 13135}# #{then 13136}# #{else 13137}#)
                    (#{build-conditional 4310}#
                      #{s 12862}#
                      (#{chi 4375}#
                        #{test 13135}#
                        #{r 12860}#
                        #{w 12861}#
                        #{mod 12863}#)
                      (#{chi 4375}#
                        #{then 13136}#
                        #{r 12860}#
                        #{w 12861}#
                        #{mod 12863}#)
                      (#{chi 4375}#
                        #{else 13137}#
                        #{r 12860}#
                        #{w 12861}#
                        #{mod 12863}#)))
                  #{tmp 13131}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{e 12859}#)))))))
    (#{global-extend 4341}#
      'core
      'with-fluids
      (lambda (#{e 13596}#
               #{r 13597}#
               #{w 13598}#
               #{s 13599}#
               #{mod 13600}#)
        (let ((#{tmp 13602}#
                ($sc-dispatch
                  #{e 13596}#
                  '(_ #(each (any any)) any . each-any))))
          (if #{tmp 13602}#
            (@apply
              (lambda (#{fluid 13606}#
                       #{val 13607}#
                       #{b 13608}#
                       #{b* 13609}#)
                (#{build-dynlet 4311}#
                  #{s 13599}#
                  (map (lambda (#{x 13702}#)
                         (#{chi 4375}#
                           #{x 13702}#
                           #{r 13597}#
                           #{w 13598}#
                           #{mod 13600}#))
                       #{fluid 13606}#)
                  (map (lambda (#{x 13784}#)
                         (#{chi 4375}#
                           #{x 13784}#
                           #{r 13597}#
                           #{w 13598}#
                           #{mod 13600}#))
                       #{val 13607}#)
                  (#{chi-body 4379}#
                    (cons #{b 13608}# #{b* 13609}#)
                    (let ((#{x 13877}#
                            (begin
                              (if (if (pair? #{e 13596}#) #{s 13599}# #f)
                                (set-source-properties!
                                  #{e 13596}#
                                  #{s 13599}#))
                              #{e 13596}#)))
                      (if (if (null? (car #{w 13598}#))
                            (null? (cdr #{w 13598}#))
                            #f)
                        #{x 13877}#
                        (if (if (vector? #{x 13877}#)
                              (if (= (vector-length #{x 13877}#) 4)
                                (eq? (vector-ref #{x 13877}# 0) 'syntax-object)
                                #f)
                              #f)
                          (let ((#{expression 13909}#
                                  (vector-ref #{x 13877}# 1))
                                (#{wrap 13910}#
                                  (let ((#{w2 13918}#
                                          (vector-ref #{x 13877}# 2)))
                                    (let ((#{m1 13919}# (car #{w 13598}#))
                                          (#{s1 13920}# (cdr #{w 13598}#)))
                                      (if (null? #{m1 13919}#)
                                        (if (null? #{s1 13920}#)
                                          #{w2 13918}#
                                          (cons (car #{w2 13918}#)
                                                (let ((#{m2 13935}#
                                                        (cdr #{w2 13918}#)))
                                                  (if (null? #{m2 13935}#)
                                                    #{s1 13920}#
                                                    (append
                                                      #{s1 13920}#
                                                      #{m2 13935}#)))))
                                        (cons (let ((#{m2 13943}#
                                                      (car #{w2 13918}#)))
                                                (if (null? #{m2 13943}#)
                                                  #{m1 13919}#
                                                  (append
                                                    #{m1 13919}#
                                                    #{m2 13943}#)))
                                              (let ((#{m2 13951}#
                                                      (cdr #{w2 13918}#)))
                                                (if (null? #{m2 13951}#)
                                                  #{s1 13920}#
                                                  (append
                                                    #{s1 13920}#
                                                    #{m2 13951}#))))))))
                                (#{module 13911}# (vector-ref #{x 13877}# 3)))
                            (vector
                              'syntax-object
                              #{expression 13909}#
                              #{wrap 13910}#
                              #{module 13911}#))
                          (if (null? #{x 13877}#)
                            #{x 13877}#
                            (vector
                              'syntax-object
                              #{x 13877}#
                              #{w 13598}#
                              #{mod 13600}#)))))
                    #{r 13597}#
                    #{w 13598}#
                    #{mod 13600}#)))
              #{tmp 13602}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{e 13596}#)))))
    (module-define!
      (current-module)
      'begin
      (make-syntax-transformer 'begin 'begin '()))
    (module-define!
      (current-module)
      'define
      (make-syntax-transformer 'define 'define '()))
    (module-define!
      (current-module)
      'define-syntax
      (make-syntax-transformer
        'define-syntax
        'define-syntax
        '()))
    (module-define!
      (current-module)
      'eval-when
      (make-syntax-transformer
        'eval-when
        'eval-when
        '()))
    (#{global-extend 4341}#
      'core
      'syntax-case
      (letrec*
        ((#{convert-pattern 14245}#
           (lambda (#{pattern 15901}# #{keys 15902}#)
             (letrec*
               ((#{cvt* 15903}#
                  (lambda (#{p* 16702}# #{n 16703}# #{ids 16704}#)
                    (if (not (pair? #{p* 16702}#))
                      (#{cvt 15905}#
                        #{p* 16702}#
                        #{n 16703}#
                        #{ids 16704}#)
                      (call-with-values
                        (lambda ()
                          (#{cvt* 15903}#
                            (cdr #{p* 16702}#)
                            #{n 16703}#
                            #{ids 16704}#))
                        (lambda (#{y 16707}# #{ids 16708}#)
                          (call-with-values
                            (lambda ()
                              (#{cvt 15905}#
                                (car #{p* 16702}#)
                                #{n 16703}#
                                #{ids 16708}#))
                            (lambda (#{x 16711}# #{ids 16712}#)
                              (values
                                (cons #{x 16711}# #{y 16707}#)
                                #{ids 16712}#))))))))
                (#{v-reverse 15904}#
                  (lambda (#{x 16713}#)
                    (letrec*
                      ((#{loop 16714}#
                         (lambda (#{r 16815}# #{x 16816}#)
                           (if (not (pair? #{x 16816}#))
                             (values #{r 16815}# #{x 16816}#)
                             (#{loop 16714}#
                               (cons (car #{x 16816}#) #{r 16815}#)
                               (cdr #{x 16816}#))))))
                      (#{loop 16714}# '() #{x 16713}#))))
                (#{cvt 15905}#
                  (lambda (#{p 15908}# #{n 15909}# #{ids 15910}#)
                    (if (if (symbol? #{p 15908}#)
                          #t
                          (if (if (vector? #{p 15908}#)
                                (if (= (vector-length #{p 15908}#) 4)
                                  (eq? (vector-ref #{p 15908}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{p 15908}# 1))
                            #f))
                      (if (#{bound-id-member? 4367}#
                            #{p 15908}#
                            #{keys 15902}#)
                        (values
                          (vector 'free-id #{p 15908}#)
                          #{ids 15910}#)
                        (if (#{free-id=? 4363}#
                              #{p 15908}#
                              '#(syntax-object
                                 _
                                 ((top)
                                  #(ribcage () () ())
                                  #(ribcage
                                    #(p n ids)
                                    #((top) (top) (top))
                                    #("i3779" "i3780" "i3781"))
                                  #(ribcage
                                    (cvt v-reverse cvt*)
                                    ((top) (top) (top))
                                    ("i3752" "i3750" "i3748"))
                                  #(ribcage
                                    #(pattern keys)
                                    #((top) (top))
                                    #("i3746" "i3747"))
                                  #(ribcage
                                    (gen-syntax-case
                                      gen-clause
                                      build-dispatch-call
                                      convert-pattern)
                                    ((top) (top) (top) (top))
                                    ("i3742" "i3740" "i3738" "i3736"))
                                  #(ribcage
                                    (lambda-var-list
                                      gen-var
                                      strip
                                      chi-lambda-case
                                      lambda*-formals
                                      chi-simple-lambda
                                      lambda-formals
                                      ellipsis?
                                      chi-void
                                      eval-local-transformer
                                      chi-local-syntax
                                      chi-body
                                      chi-macro
                                      chi-call
                                      chi-expr
                                      chi
                                      syntax-type
                                      chi-when-list
                                      chi-install-global
                                      chi-top-sequence
                                      chi-sequence
                                      source-wrap
                                      wrap
                                      bound-id-member?
                                      distinct-bound-ids?
                                      valid-bound-ids?
                                      bound-id=?
                                      free-id=?
                                      id-var-name
                                      same-marks?
                                      join-marks
                                      join-wraps
                                      smart-append
                                      make-binding-wrap
                                      extend-ribcage!
                                      make-empty-ribcage
                                      new-mark
                                      anti-mark
                                      the-anti-mark
                                      top-marked?
                                      top-wrap
                                      empty-wrap
                                      set-ribcage-labels!
                                      set-ribcage-marks!
                                      set-ribcage-symnames!
                                      ribcage-labels
                                      ribcage-marks
                                      ribcage-symnames
                                      ribcage?
                                      make-ribcage
                                      gen-labels
                                      gen-label
                                      make-rename
                                      rename-marks
                                      rename-new
                                      rename-old
                                      subst-rename?
                                      wrap-subst
                                      wrap-marks
                                      make-wrap
                                      id-sym-name&marks
                                      id-sym-name
                                      id?
                                      nonsymbol-id?
                                      global-extend
                                      lookup
                                      macros-only-env
                                      extend-var-env
                                      extend-env
                                      null-env
                                      binding-value
                                      binding-type
                                      make-binding
                                      arg-check
                                      source-annotation
                                      no-source
                                      set-syntax-object-module!
                                      set-syntax-object-wrap!
                                      set-syntax-object-expression!
                                      syntax-object-module
                                      syntax-object-wrap
                                      syntax-object-expression
                                      syntax-object?
                                      make-syntax-object
                                      build-lexical-var
                                      build-letrec
                                      build-named-let
                                      build-let
                                      build-sequence
                                      build-data
                                      build-primref
                                      build-primcall
                                      build-lambda-case
                                      build-case-lambda
                                      build-simple-lambda
                                      build-global-definition
                                      build-global-assignment
                                      build-global-reference
                                      analyze-variable
                                      build-lexical-assignment
                                      build-lexical-reference
                                      build-dynlet
                                      build-conditional
                                      build-call
                                      build-void
                                      maybe-name-value!
                                      decorate-source
                                      get-global-definition-hook
                                      put-global-definition-hook
                                      gensym-hook
                                      local-eval-hook
                                      top-level-eval-hook
                                      fx<
                                      fx=
                                      fx-
                                      fx+
                                      set-lambda-meta!
                                      lambda-meta
                                      lambda?
                                      make-dynlet
                                      make-letrec
                                      make-let
                                      make-lambda-case
                                      make-lambda
                                      make-seq
                                      make-primcall
                                      make-call
                                      make-conditional
                                      make-toplevel-define
                                      make-toplevel-set
                                      make-toplevel-ref
                                      make-module-set
                                      make-module-ref
                                      make-lexical-set
                                      make-lexical-ref
                                      make-primitive-ref
                                      make-const
                                      make-void)
                                    ((top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top))
                                    ("i471"
                                     "i469"
                                     "i467"
                                     "i465"
                                     "i463"
                                     "i461"
                                     "i459"
                                     "i457"
                                     "i455"
                                     "i453"
                                     "i451"
                                     "i449"
                                     "i447"
                                     "i445"
                                     "i443"
                                     "i441"
                                     "i439"
                                     "i437"
                                     "i435"
                                     "i433"
                                     "i431"
                                     "i429"
                                     "i427"
                                     "i425"
                                     "i423"
                                     "i421"
                                     "i419"
                                     "i417"
                                     "i415"
                                     "i413"
                                     "i411"
                                     "i409"
                                     "i407"
                                     "i405"
                                     "i403"
                                     "i402"
                                     "i400"
                                     "i397"
                                     "i396"
                                     "i395"
                                     "i393"
                                     "i392"
                                     "i390"
                                     "i388"
                                     "i386"
                                     "i384"
                                     "i382"
                                     "i380"
                                     "i378"
                                     "i376"
                                     "i373"
                                     "i371"
                                     "i370"
                                     "i368"
                                     "i366"
                                     "i364"
                                     "i362"
                                     "i361"
                                     "i360"
                                     "i359"
                                     "i357"
                                     "i356"
                                     "i353"
                                     "i351"
                                     "i349"
                                     "i347"
                                     "i345"
                                     "i343"
                                     "i341"
                                     "i340"
                                     "i339"
                                     "i337"
                                     "i335"
                                     "i334"
                                     "i331"
                                     "i330"
                                     "i328"
                                     "i326"
                                     "i324"
                                     "i322"
                                     "i320"
                                     "i318"
                                     "i316"
                                     "i314"
                                     "i312"
                                     "i309"
                                     "i307"
                                     "i305"
                                     "i303"
                                     "i301"
                                     "i299"
                                     "i297"
                                     "i295"
                                     "i293"
                                     "i291"
                                     "i289"
                                     "i287"
                                     "i285"
                                     "i283"
                                     "i281"
                                     "i279"
                                     "i277"
                                     "i275"
                                     "i273"
                                     "i271"
                                     "i269"
                                     "i267"
                                     "i265"
                                     "i263"
                                     "i262"
                                     "i259"
                                     "i257"
                                     "i256"
                                     "i255"
                                     "i254"
                                     "i253"
                                     "i251"
                                     "i249"
                                     "i247"
                                     "i244"
                                     "i242"
                                     "i240"
                                     "i238"
                                     "i236"
                                     "i234"
                                     "i232"
                                     "i230"
                                     "i228"
                                     "i226"
                                     "i224"
                                     "i222"
                                     "i220"
                                     "i218"
                                     "i216"
                                     "i214"
                                     "i212"
                                     "i210"
                                     "i208"))
                                  #(ribcage
                                    (define-structure
                                      define-expansion-accessors
                                      define-expansion-constructors)
                                    ((top) (top) (top))
                                    ("i46" "i45" "i44")))
                                 (hygiene guile)))
                          (values '_ #{ids 15910}#)
                          (values
                            'any
                            (cons (cons #{p 15908}# #{n 15909}#)
                                  #{ids 15910}#))))
                      (let ((#{tmp 16042}#
                              ($sc-dispatch #{p 15908}# '(any any))))
                        (if (if #{tmp 16042}#
                              (@apply
                                (lambda (#{x 16046}# #{dots 16047}#)
                                  (if (if (if (vector? #{dots 16047}#)
                                            (if (= (vector-length
                                                     #{dots 16047}#)
                                                   4)
                                              (eq? (vector-ref
                                                     #{dots 16047}#
                                                     0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (symbol? (vector-ref #{dots 16047}# 1))
                                        #f)
                                    (#{free-id=? 4363}#
                                      #{dots 16047}#
                                      '#(syntax-object
                                         ...
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i2263"))
                                          #(ribcage
                                            (lambda-var-list
                                              gen-var
                                              strip
                                              chi-lambda-case
                                              lambda*-formals
                                              chi-simple-lambda
                                              lambda-formals
                                              ellipsis?
                                              chi-void
                                              eval-local-transformer
                                              chi-local-syntax
                                              chi-body
                                              chi-macro
                                              chi-call
                                              chi-expr
                                              chi
                                              syntax-type
                                              chi-when-list
                                              chi-install-global
                                              chi-top-sequence
                                              chi-sequence
                                              source-wrap
                                              wrap
                                              bound-id-member?
                                              distinct-bound-ids?
                                              valid-bound-ids?
                                              bound-id=?
                                              free-id=?
                                              id-var-name
                                              same-marks?
                                              join-marks
                                              join-wraps
                                              smart-append
                                              make-binding-wrap
                                              extend-ribcage!
                                              make-empty-ribcage
                                              new-mark
                                              anti-mark
                                              the-anti-mark
                                              top-marked?
                                              top-wrap
                                              empty-wrap
                                              set-ribcage-labels!
                                              set-ribcage-marks!
                                              set-ribcage-symnames!
                                              ribcage-labels
                                              ribcage-marks
                                              ribcage-symnames
                                              ribcage?
                                              make-ribcage
                                              gen-labels
                                              gen-label
                                              make-rename
                                              rename-marks
                                              rename-new
                                              rename-old
                                              subst-rename?
                                              wrap-subst
                                              wrap-marks
                                              make-wrap
                                              id-sym-name&marks
                                              id-sym-name
                                              id?
                                              nonsymbol-id?
                                              global-extend
                                              lookup
                                              macros-only-env
                                              extend-var-env
                                              extend-env
                                              null-env
                                              binding-value
                                              binding-type
                                              make-binding
                                              arg-check
                                              source-annotation
                                              no-source
                                              set-syntax-object-module!
                                              set-syntax-object-wrap!
                                              set-syntax-object-expression!
                                              syntax-object-module
                                              syntax-object-wrap
                                              syntax-object-expression
                                              syntax-object?
                                              make-syntax-object
                                              build-lexical-var
                                              build-letrec
                                              build-named-let
                                              build-let
                                              build-sequence
                                              build-data
                                              build-primref
                                              build-primcall
                                              build-lambda-case
                                              build-case-lambda
                                              build-simple-lambda
                                              build-global-definition
                                              build-global-assignment
                                              build-global-reference
                                              analyze-variable
                                              build-lexical-assignment
                                              build-lexical-reference
                                              build-dynlet
                                              build-conditional
                                              build-call
                                              build-void
                                              maybe-name-value!
                                              decorate-source
                                              get-global-definition-hook
                                              put-global-definition-hook
                                              gensym-hook
                                              local-eval-hook
                                              top-level-eval-hook
                                              fx<
                                              fx=
                                              fx-
                                              fx+
                                              set-lambda-meta!
                                              lambda-meta
                                              lambda?
                                              make-dynlet
                                              make-letrec
                                              make-let
                                              make-lambda-case
                                              make-lambda
                                              make-seq
                                              make-primcall
                                              make-call
                                              make-conditional
                                              make-toplevel-define
                                              make-toplevel-set
                                              make-toplevel-ref
                                              make-module-set
                                              make-module-ref
                                              make-lexical-set
                                              make-lexical-ref
                                              make-primitive-ref
                                              make-const
                                              make-void)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i471"
                                             "i469"
                                             "i467"
                                             "i465"
                                             "i463"
                                             "i461"
                                             "i459"
                                             "i457"
                                             "i455"
                                             "i453"
                                             "i451"
                                             "i449"
                                             "i447"
                                             "i445"
                                             "i443"
                                             "i441"
                                             "i439"
                                             "i437"
                                             "i435"
                                             "i433"
                                             "i431"
                                             "i429"
                                             "i427"
                                             "i425"
                                             "i423"
                                             "i421"
                                             "i419"
                                             "i417"
                                             "i415"
                                             "i413"
                                             "i411"
                                             "i409"
                                             "i407"
                                             "i405"
                                             "i403"
                                             "i402"
                                             "i400"
                                             "i397"
                                             "i396"
                                             "i395"
                                             "i393"
                                             "i392"
                                             "i390"
                                             "i388"
                                             "i386"
                                             "i384"
                                             "i382"
                                             "i380"
                                             "i378"
                                             "i376"
                                             "i373"
                                             "i371"
                                             "i370"
                                             "i368"
                                             "i366"
                                             "i364"
                                             "i362"
                                             "i361"
                                             "i360"
                                             "i359"
                                             "i357"
                                             "i356"
                                             "i353"
                                             "i351"
                                             "i349"
                                             "i347"
                                             "i345"
                                             "i343"
                                             "i341"
                                             "i340"
                                             "i339"
                                             "i337"
                                             "i335"
                                             "i334"
                                             "i331"
                                             "i330"
                                             "i328"
                                             "i326"
                                             "i324"
                                             "i322"
                                             "i320"
                                             "i318"
                                             "i316"
                                             "i314"
                                             "i312"
                                             "i309"
                                             "i307"
                                             "i305"
                                             "i303"
                                             "i301"
                                             "i299"
                                             "i297"
                                             "i295"
                                             "i293"
                                             "i291"
                                             "i289"
                                             "i287"
                                             "i285"
                                             "i283"
                                             "i281"
                                             "i279"
                                             "i277"
                                             "i275"
                                             "i273"
                                             "i271"
                                             "i269"
                                             "i267"
                                             "i265"
                                             "i263"
                                             "i262"
                                             "i259"
                                             "i257"
                                             "i256"
                                             "i255"
                                             "i254"
                                             "i253"
                                             "i251"
                                             "i249"
                                             "i247"
                                             "i244"
                                             "i242"
                                             "i240"
                                             "i238"
                                             "i236"
                                             "i234"
                                             "i232"
                                             "i230"
                                             "i228"
                                             "i226"
                                             "i224"
                                             "i222"
                                             "i220"
                                             "i218"
                                             "i216"
                                             "i214"
                                             "i212"
                                             "i210"
                                             "i208"))
                                          #(ribcage
                                            (define-structure
                                              define-expansion-accessors
                                              define-expansion-constructors)
                                            ((top) (top) (top))
                                            ("i46" "i45" "i44")))
                                         (hygiene guile)))
                                    #f))
                                #{tmp 16042}#)
                              #f)
                          (@apply
                            (lambda (#{x 16086}# #{dots 16087}#)
                              (call-with-values
                                (lambda ()
                                  (#{cvt 15905}#
                                    #{x 16086}#
                                    (#{1+}# #{n 15909}#)
                                    #{ids 15910}#))
                                (lambda (#{p 16088}# #{ids 16089}#)
                                  (values
                                    (if (eq? #{p 16088}# 'any)
                                      'each-any
                                      (vector 'each #{p 16088}#))
                                    #{ids 16089}#))))
                            #{tmp 16042}#)
                          (let ((#{tmp 16090}#
                                  ($sc-dispatch #{p 15908}# '(any any . any))))
                            (if (if #{tmp 16090}#
                                  (@apply
                                    (lambda (#{x 16094}#
                                             #{dots 16095}#
                                             #{ys 16096}#)
                                      (if (if (if (vector? #{dots 16095}#)
                                                (if (= (vector-length
                                                         #{dots 16095}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{dots 16095}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (symbol?
                                              (vector-ref #{dots 16095}# 1))
                                            #f)
                                        (#{free-id=? 4363}#
                                          #{dots 16095}#
                                          '#(syntax-object
                                             ...
                                             ((top)
                                              #(ribcage () () ())
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("i2263"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  chi-lambda-case
                                                  lambda*-formals
                                                  chi-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  chi-void
                                                  eval-local-transformer
                                                  chi-local-syntax
                                                  chi-body
                                                  chi-macro
                                                  chi-call
                                                  chi-expr
                                                  chi
                                                  syntax-type
                                                  chi-when-list
                                                  chi-install-global
                                                  chi-top-sequence
                                                  chi-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-primcall
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-call
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-seq
                                                  make-primcall
                                                  make-call
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i471"
                                                 "i469"
                                                 "i467"
                                                 "i465"
                                                 "i463"
                                                 "i461"
                                                 "i459"
                                                 "i457"
                                                 "i455"
                                                 "i453"
                                                 "i451"
                                                 "i449"
                                                 "i447"
                                                 "i445"
                                                 "i443"
                                                 "i441"
                                                 "i439"
                                                 "i437"
                                                 "i435"
                                                 "i433"
                                                 "i431"
                                                 "i429"
                                                 "i427"
                                                 "i425"
                                                 "i423"
                                                 "i421"
                                                 "i419"
                                                 "i417"
                                                 "i415"
                                                 "i413"
                                                 "i411"
                                                 "i409"
                                                 "i407"
                                                 "i405"
                                                 "i403"
                                                 "i402"
                                                 "i400"
                                                 "i397"
                                                 "i396"
                                                 "i395"
                                                 "i393"
                                                 "i392"
                                                 "i390"
                                                 "i388"
                                                 "i386"
                                                 "i384"
                                                 "i382"
                                                 "i380"
                                                 "i378"
                                                 "i376"
                                                 "i373"
                                                 "i371"
                                                 "i370"
                                                 "i368"
                                                 "i366"
                                                 "i364"
                                                 "i362"
                                                 "i361"
                                                 "i360"
                                                 "i359"
                                                 "i357"
                                                 "i356"
                                                 "i353"
                                                 "i351"
                                                 "i349"
                                                 "i347"
                                                 "i345"
                                                 "i343"
                                                 "i341"
                                                 "i340"
                                                 "i339"
                                                 "i337"
                                                 "i335"
                                                 "i334"
                                                 "i331"
                                                 "i330"
                                                 "i328"
                                                 "i326"
                                                 "i324"
                                                 "i322"
                                                 "i320"
                                                 "i318"
                                                 "i316"
                                                 "i314"
                                                 "i312"
                                                 "i309"
                                                 "i307"
                                                 "i305"
                                                 "i303"
                                                 "i301"
                                                 "i299"
                                                 "i297"
                                                 "i295"
                                                 "i293"
                                                 "i291"
                                                 "i289"
                                                 "i287"
                                                 "i285"
                                                 "i283"
                                                 "i281"
                                                 "i279"
                                                 "i277"
                                                 "i275"
                                                 "i273"
                                                 "i271"
                                                 "i269"
                                                 "i267"
                                                 "i265"
                                                 "i263"
                                                 "i262"
                                                 "i259"
                                                 "i257"
                                                 "i256"
                                                 "i255"
                                                 "i254"
                                                 "i253"
                                                 "i251"
                                                 "i249"
                                                 "i247"
                                                 "i244"
                                                 "i242"
                                                 "i240"
                                                 "i238"
                                                 "i236"
                                                 "i234"
                                                 "i232"
                                                 "i230"
                                                 "i228"
                                                 "i226"
                                                 "i224"
                                                 "i222"
                                                 "i220"
                                                 "i218"
                                                 "i216"
                                                 "i214"
                                                 "i212"
                                                 "i210"
                                                 "i208"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("i46" "i45" "i44")))
                                             (hygiene guile)))
                                        #f))
                                    #{tmp 16090}#)
                                  #f)
                              (@apply
                                (lambda (#{x 16135}#
                                         #{dots 16136}#
                                         #{ys 16137}#)
                                  (call-with-values
                                    (lambda ()
                                      (#{cvt* 15903}#
                                        #{ys 16137}#
                                        #{n 15909}#
                                        #{ids 15910}#))
                                    (lambda (#{ys 16622}# #{ids 16623}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{cvt 15905}#
                                            #{x 16135}#
                                            (#{1+}# #{n 15909}#)
                                            #{ids 16623}#))
                                        (lambda (#{x 16624}# #{ids 16625}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{v-reverse 15904}#
                                                #{ys 16622}#))
                                            (lambda (#{ys 16661}# #{e 16662}#)
                                              (values
                                                (vector
                                                  'each+
                                                  #{x 16624}#
                                                  #{ys 16661}#
                                                  #{e 16662}#)
                                                #{ids 16625}#))))))))
                                #{tmp 16090}#)
                              (let ((#{tmp 16663}#
                                      ($sc-dispatch #{p 15908}# '(any . any))))
                                (if #{tmp 16663}#
                                  (@apply
                                    (lambda (#{x 16667}# #{y 16668}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{cvt 15905}#
                                            #{y 16668}#
                                            #{n 15909}#
                                            #{ids 15910}#))
                                        (lambda (#{y 16669}# #{ids 16670}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{cvt 15905}#
                                                #{x 16667}#
                                                #{n 15909}#
                                                #{ids 16670}#))
                                            (lambda (#{x 16671}# #{ids 16672}#)
                                              (values
                                                (cons #{x 16671}# #{y 16669}#)
                                                #{ids 16672}#))))))
                                    #{tmp 16663}#)
                                  (let ((#{tmp 16673}#
                                          ($sc-dispatch #{p 15908}# '())))
                                    (if #{tmp 16673}#
                                      (@apply
                                        (lambda () (values '() #{ids 15910}#))
                                        #{tmp 16673}#)
                                      (let ((#{tmp 16677}#
                                              ($sc-dispatch
                                                #{p 15908}#
                                                '#(vector each-any))))
                                        (if #{tmp 16677}#
                                          (@apply
                                            (lambda (#{x 16681}#)
                                              (call-with-values
                                                (lambda ()
                                                  (#{cvt 15905}#
                                                    #{x 16681}#
                                                    #{n 15909}#
                                                    #{ids 15910}#))
                                                (lambda (#{p 16682}#
                                                         #{ids 16683}#)
                                                  (values
                                                    (vector
                                                      'vector
                                                      #{p 16682}#)
                                                    #{ids 16683}#))))
                                            #{tmp 16677}#)
                                          (values
                                            (vector
                                              'atom
                                              (#{strip 4388}#
                                                #{p 15908}#
                                                '(())))
                                            #{ids 15910}#)))))))))))))))
               (#{cvt 15905}# #{pattern 15901}# 0 '()))))
         (#{build-dispatch-call 14246}#
           (lambda (#{pvars 16817}#
                    #{exp 16818}#
                    #{y 16819}#
                    #{r 16820}#
                    #{mod 16821}#)
             (let ((#{ids 16822}# (map car #{pvars 16817}#)))
               (begin
                 (map cdr #{pvars 16817}#)
                 (let ((#{labels 16824}#
                         (#{gen-labels 4346}# #{ids 16822}#))
                       (#{new-vars 16825}#
                         (map #{gen-var 4389}# #{ids 16822}#)))
                   (#{build-primcall 4321}#
                     #f
                     'apply
                     (list (#{build-simple-lambda 4318}#
                             #f
                             (map syntax->datum #{ids 16822}#)
                             #f
                             #{new-vars 16825}#
                             '()
                             (#{chi 4375}#
                               #{exp 16818}#
                               (#{extend-env 4337}#
                                 #{labels 16824}#
                                 (map (lambda (#{var 17157}# #{level 17158}#)
                                        (cons 'syntax
                                              (cons #{var 17157}#
                                                    #{level 17158}#)))
                                      #{new-vars 16825}#
                                      (map cdr #{pvars 16817}#))
                                 #{r 16820}#)
                               (#{make-binding-wrap 4357}#
                                 #{ids 16822}#
                                 #{labels 16824}#
                                 '(()))
                               #{mod 16821}#))
                           #{y 16819}#)))))))
         (#{gen-clause 14247}#
           (lambda (#{x 15495}#
                    #{keys 15496}#
                    #{clauses 15497}#
                    #{r 15498}#
                    #{pat 15499}#
                    #{fender 15500}#
                    #{exp 15501}#
                    #{mod 15502}#)
             (call-with-values
               (lambda ()
                 (#{convert-pattern 14245}#
                   #{pat 15499}#
                   #{keys 15496}#))
               (lambda (#{p 15640}# #{pvars 15641}#)
                 (if (not (#{distinct-bound-ids? 4366}#
                            (map car #{pvars 15641}#)))
                   (syntax-violation
                     'syntax-case
                     "duplicate pattern variable"
                     #{pat 15499}#)
                   (if (not (and-map
                              (lambda (#{x 15750}#)
                                (not (let ((#{x 15754}# (car #{x 15750}#)))
                                       (if (if (if (vector? #{x 15754}#)
                                                 (if (= (vector-length
                                                          #{x 15754}#)
                                                        4)
                                                   (eq? (vector-ref
                                                          #{x 15754}#
                                                          0)
                                                        'syntax-object)
                                                   #f)
                                                 #f)
                                             (symbol?
                                               (vector-ref #{x 15754}# 1))
                                             #f)
                                         (#{free-id=? 4363}#
                                           #{x 15754}#
                                           '#(syntax-object
                                              ...
                                              ((top)
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i2263"))
                                               #(ribcage
                                                 (lambda-var-list
                                                   gen-var
                                                   strip
                                                   chi-lambda-case
                                                   lambda*-formals
                                                   chi-simple-lambda
                                                   lambda-formals
                                                   ellipsis?
                                                   chi-void
                                                   eval-local-transformer
                                                   chi-local-syntax
                                                   chi-body
                                                   chi-macro
                                                   chi-call
                                                   chi-expr
                                                   chi
                                                   syntax-type
                                                   chi-when-list
                                                   chi-install-global
                                                   chi-top-sequence
                                                   chi-sequence
                                                   source-wrap
                                                   wrap
                                                   bound-id-member?
                                                   distinct-bound-ids?
                                                   valid-bound-ids?
                                                   bound-id=?
                                                   free-id=?
                                                   id-var-name
                                                   same-marks?
                                                   join-marks
                                                   join-wraps
                                                   smart-append
                                                   make-binding-wrap
                                                   extend-ribcage!
                                                   make-empty-ribcage
                                                   new-mark
                                                   anti-mark
                                                   the-anti-mark
                                                   top-marked?
                                                   top-wrap
                                                   empty-wrap
                                                   set-ribcage-labels!
                                                   set-ribcage-marks!
                                                   set-ribcage-symnames!
                                                   ribcage-labels
                                                   ribcage-marks
                                                   ribcage-symnames
                                                   ribcage?
                                                   make-ribcage
                                                   gen-labels
                                                   gen-label
                                                   make-rename
                                                   rename-marks
                                                   rename-new
                                                   rename-old
                                                   subst-rename?
                                                   wrap-subst
                                                   wrap-marks
                                                   make-wrap
                                                   id-sym-name&marks
                                                   id-sym-name
                                                   id?
                                                   nonsymbol-id?
                                                   global-extend
                                                   lookup
                                                   macros-only-env
                                                   extend-var-env
                                                   extend-env
                                                   null-env
                                                   binding-value
                                                   binding-type
                                                   make-binding
                                                   arg-check
                                                   source-annotation
                                                   no-source
                                                   set-syntax-object-module!
                                                   set-syntax-object-wrap!
                                                   set-syntax-object-expression!
                                                   syntax-object-module
                                                   syntax-object-wrap
                                                   syntax-object-expression
                                                   syntax-object?
                                                   make-syntax-object
                                                   build-lexical-var
                                                   build-letrec
                                                   build-named-let
                                                   build-let
                                                   build-sequence
                                                   build-data
                                                   build-primref
                                                   build-primcall
                                                   build-lambda-case
                                                   build-case-lambda
                                                   build-simple-lambda
                                                   build-global-definition
                                                   build-global-assignment
                                                   build-global-reference
                                                   analyze-variable
                                                   build-lexical-assignment
                                                   build-lexical-reference
                                                   build-dynlet
                                                   build-conditional
                                                   build-call
                                                   build-void
                                                   maybe-name-value!
                                                   decorate-source
                                                   get-global-definition-hook
                                                   put-global-definition-hook
                                                   gensym-hook
                                                   local-eval-hook
                                                   top-level-eval-hook
                                                   fx<
                                                   fx=
                                                   fx-
                                                   fx+
                                                   set-lambda-meta!
                                                   lambda-meta
                                                   lambda?
                                                   make-dynlet
                                                   make-letrec
                                                   make-let
                                                   make-lambda-case
                                                   make-lambda
                                                   make-seq
                                                   make-primcall
                                                   make-call
                                                   make-conditional
                                                   make-toplevel-define
                                                   make-toplevel-set
                                                   make-toplevel-ref
                                                   make-module-set
                                                   make-module-ref
                                                   make-lexical-set
                                                   make-lexical-ref
                                                   make-primitive-ref
                                                   make-const
                                                   make-void)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i471"
                                                  "i469"
                                                  "i467"
                                                  "i465"
                                                  "i463"
                                                  "i461"
                                                  "i459"
                                                  "i457"
                                                  "i455"
                                                  "i453"
                                                  "i451"
                                                  "i449"
                                                  "i447"
                                                  "i445"
                                                  "i443"
                                                  "i441"
                                                  "i439"
                                                  "i437"
                                                  "i435"
                                                  "i433"
                                                  "i431"
                                                  "i429"
                                                  "i427"
                                                  "i425"
                                                  "i423"
                                                  "i421"
                                                  "i419"
                                                  "i417"
                                                  "i415"
                                                  "i413"
                                                  "i411"
                                                  "i409"
                                                  "i407"
                                                  "i405"
                                                  "i403"
                                                  "i402"
                                                  "i400"
                                                  "i397"
                                                  "i396"
                                                  "i395"
                                                  "i393"
                                                  "i392"
                                                  "i390"
                                                  "i388"
                                                  "i386"
                                                  "i384"
                                                  "i382"
                                                  "i380"
                                                  "i378"
                                                  "i376"
                                                  "i373"
                                                  "i371"
                                                  "i370"
                                                  "i368"
                                                  "i366"
                                                  "i364"
                                                  "i362"
                                                  "i361"
                                                  "i360"
                                                  "i359"
                                                  "i357"
                                                  "i356"
                                                  "i353"
                                                  "i351"
                                                  "i349"
                                                  "i347"
                                                  "i345"
                                                  "i343"
                                                  "i341"
                                                  "i340"
                                                  "i339"
                                                  "i337"
                                                  "i335"
                                                  "i334"
                                                  "i331"
                                                  "i330"
                                                  "i328"
                                                  "i326"
                                                  "i324"
                                                  "i322"
                                                  "i320"
                                                  "i318"
                                                  "i316"
                                                  "i314"
                                                  "i312"
                                                  "i309"
                                                  "i307"
                                                  "i305"
                                                  "i303"
                                                  "i301"
                                                  "i299"
                                                  "i297"
                                                  "i295"
                                                  "i293"
                                                  "i291"
                                                  "i289"
                                                  "i287"
                                                  "i285"
                                                  "i283"
                                                  "i281"
                                                  "i279"
                                                  "i277"
                                                  "i275"
                                                  "i273"
                                                  "i271"
                                                  "i269"
                                                  "i267"
                                                  "i265"
                                                  "i263"
                                                  "i262"
                                                  "i259"
                                                  "i257"
                                                  "i256"
                                                  "i255"
                                                  "i254"
                                                  "i253"
                                                  "i251"
                                                  "i249"
                                                  "i247"
                                                  "i244"
                                                  "i242"
                                                  "i240"
                                                  "i238"
                                                  "i236"
                                                  "i234"
                                                  "i232"
                                                  "i230"
                                                  "i228"
                                                  "i226"
                                                  "i224"
                                                  "i222"
                                                  "i220"
                                                  "i218"
                                                  "i216"
                                                  "i214"
                                                  "i212"
                                                  "i210"
                                                  "i208"))
                                               #(ribcage
                                                 (define-structure
                                                   define-expansion-accessors
                                                   define-expansion-constructors)
                                                 ((top) (top) (top))
                                                 ("i46" "i45" "i44")))
                                              (hygiene guile)))
                                         #f))))
                              #{pvars 15641}#))
                     (syntax-violation
                       'syntax-case
                       "misplaced ellipsis"
                       #{pat 15499}#)
                     (let ((#{y 15779}#
                             (gensym
                               (string-append (symbol->string 'tmp) " "))))
                       (let ((#{fun-exp 15784}#
                               (let ((#{req 15793}# (list 'tmp))
                                     (#{vars 15795}# (list #{y 15779}#))
                                     (#{exp 15797}#
                                       (let ((#{y 15826}#
                                               (make-struct/no-tail
                                                 (vector-ref
                                                   %expanded-vtables
                                                   3)
                                                 #f
                                                 'tmp
                                                 #{y 15779}#)))
                                         (let ((#{test-exp 15830}#
                                                 (let ((#{tmp 15839}#
                                                         ($sc-dispatch
                                                           #{fender 15500}#
                                                           '#(atom #t))))
                                                   (if #{tmp 15839}#
                                                     (@apply
                                                       (lambda () #{y 15826}#)
                                                       #{tmp 15839}#)
                                                     (let ((#{then-exp 15857}#
                                                             (#{build-dispatch-call 14246}#
                                                               #{pvars 15641}#
                                                               #{fender 15500}#
                                                               #{y 15826}#
                                                               #{r 15498}#
                                                               #{mod 15502}#))
                                                           (#{else-exp 15858}#
                                                             (make-struct/no-tail
                                                               (vector-ref
                                                                 %expanded-vtables
                                                                 1)
                                                               #f
                                                               #f)))
                                                       (make-struct/no-tail
                                                         (vector-ref
                                                           %expanded-vtables
                                                           10)
                                                         #f
                                                         #{y 15826}#
                                                         #{then-exp 15857}#
                                                         #{else-exp 15858}#)))))
                                               (#{then-exp 15831}#
                                                 (#{build-dispatch-call 14246}#
                                                   #{pvars 15641}#
                                                   #{exp 15501}#
                                                   #{y 15826}#
                                                   #{r 15498}#
                                                   #{mod 15502}#))
                                               (#{else-exp 15832}#
                                                 (#{gen-syntax-case 14248}#
                                                   #{x 15495}#
                                                   #{keys 15496}#
                                                   #{clauses 15497}#
                                                   #{r 15498}#
                                                   #{mod 15502}#)))
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 10)
                                             #f
                                             #{test-exp 15830}#
                                             #{then-exp 15831}#
                                             #{else-exp 15832}#)))))
                                 (let ((#{body 15802}#
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 15)
                                           #f
                                           #{req 15793}#
                                           #f
                                           #f
                                           #f
                                           '()
                                           #{vars 15795}#
                                           #{exp 15797}#
                                           #f)))
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 14)
                                     #f
                                     '()
                                     #{body 15802}#))))
                             (#{arg-exps 15785}#
                               (list (if (eq? #{p 15640}# 'any)
                                       (let ((#{args 15880}#
                                               (list #{x 15495}#)))
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 12)
                                           #f
                                           'list
                                           #{args 15880}#))
                                       (let ((#{args 15889}#
                                               (list #{x 15495}#
                                                     (make-struct/no-tail
                                                       (vector-ref
                                                         %expanded-vtables
                                                         1)
                                                       #f
                                                       #{p 15640}#))))
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 12)
                                           #f
                                           '$sc-dispatch
                                           #{args 15889}#))))))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 11)
                           #f
                           #{fun-exp 15784}#
                           #{arg-exps 15785}#)))))))))
         (#{gen-syntax-case 14248}#
           (lambda (#{x 14992}#
                    #{keys 14993}#
                    #{clauses 14994}#
                    #{r 14995}#
                    #{mod 14996}#)
             (if (null? #{clauses 14994}#)
               (let ((#{args 15002}#
                       (list (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               #f)
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               "source expression failed to match any pattern")
                             #{x 14992}#)))
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 12)
                   #f
                   'syntax-violation
                   #{args 15002}#))
               (let ((#{tmp 15021}# (car #{clauses 14994}#)))
                 (let ((#{tmp 15022}#
                         ($sc-dispatch #{tmp 15021}# '(any any))))
                   (if #{tmp 15022}#
                     (@apply
                       (lambda (#{pat 15024}# #{exp 15025}#)
                         (if (if (if (symbol? #{pat 15024}#)
                                   #t
                                   (if (if (vector? #{pat 15024}#)
                                         (if (= (vector-length #{pat 15024}#)
                                                4)
                                           (eq? (vector-ref #{pat 15024}# 0)
                                                'syntax-object)
                                           #f)
                                         #f)
                                     (symbol? (vector-ref #{pat 15024}# 1))
                                     #f))
                               (and-map
                                 (lambda (#{x 15052}#)
                                   (not (#{free-id=? 4363}#
                                          #{pat 15024}#
                                          #{x 15052}#)))
                                 (cons '#(syntax-object
                                          ...
                                          ((top)
                                           #(ribcage
                                             #(pat exp)
                                             #((top) (top))
                                             #("i3939" "i3940"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x keys clauses r mod)
                                             #((top) (top) (top) (top) (top))
                                             #("i3929"
                                               "i3930"
                                               "i3931"
                                               "i3932"
                                               "i3933"))
                                           #(ribcage
                                             (gen-syntax-case
                                               gen-clause
                                               build-dispatch-call
                                               convert-pattern)
                                             ((top) (top) (top) (top))
                                             ("i3742" "i3740" "i3738" "i3736"))
                                           #(ribcage
                                             (lambda-var-list
                                               gen-var
                                               strip
                                               chi-lambda-case
                                               lambda*-formals
                                               chi-simple-lambda
                                               lambda-formals
                                               ellipsis?
                                               chi-void
                                               eval-local-transformer
                                               chi-local-syntax
                                               chi-body
                                               chi-macro
                                               chi-call
                                               chi-expr
                                               chi
                                               syntax-type
                                               chi-when-list
                                               chi-install-global
                                               chi-top-sequence
                                               chi-sequence
                                               source-wrap
                                               wrap
                                               bound-id-member?
                                               distinct-bound-ids?
                                               valid-bound-ids?
                                               bound-id=?
                                               free-id=?
                                               id-var-name
                                               same-marks?
                                               join-marks
                                               join-wraps
                                               smart-append
                                               make-binding-wrap
                                               extend-ribcage!
                                               make-empty-ribcage
                                               new-mark
                                               anti-mark
                                               the-anti-mark
                                               top-marked?
                                               top-wrap
                                               empty-wrap
                                               set-ribcage-labels!
                                               set-ribcage-marks!
                                               set-ribcage-symnames!
                                               ribcage-labels
                                               ribcage-marks
                                               ribcage-symnames
                                               ribcage?
                                               make-ribcage
                                               gen-labels
                                               gen-label
                                               make-rename
                                               rename-marks
                                               rename-new
                                               rename-old
                                               subst-rename?
                                               wrap-subst
                                               wrap-marks
                                               make-wrap
                                               id-sym-name&marks
                                               id-sym-name
                                               id?
                                               nonsymbol-id?
                                               global-extend
                                               lookup
                                               macros-only-env
                                               extend-var-env
                                               extend-env
                                               null-env
                                               binding-value
                                               binding-type
                                               make-binding
                                               arg-check
                                               source-annotation
                                               no-source
                                               set-syntax-object-module!
                                               set-syntax-object-wrap!
                                               set-syntax-object-expression!
                                               syntax-object-module
                                               syntax-object-wrap
                                               syntax-object-expression
                                               syntax-object?
                                               make-syntax-object
                                               build-lexical-var
                                               build-letrec
                                               build-named-let
                                               build-let
                                               build-sequence
                                               build-data
                                               build-primref
                                               build-primcall
                                               build-lambda-case
                                               build-case-lambda
                                               build-simple-lambda
                                               build-global-definition
                                               build-global-assignment
                                               build-global-reference
                                               analyze-variable
                                               build-lexical-assignment
                                               build-lexical-reference
                                               build-dynlet
                                               build-conditional
                                               build-call
                                               build-void
                                               maybe-name-value!
                                               decorate-source
                                               get-global-definition-hook
                                               put-global-definition-hook
                                               gensym-hook
                                               local-eval-hook
                                               top-level-eval-hook
                                               fx<
                                               fx=
                                               fx-
                                               fx+
                                               set-lambda-meta!
                                               lambda-meta
                                               lambda?
                                               make-dynlet
                                               make-letrec
                                               make-let
                                               make-lambda-case
                                               make-lambda
                                               make-seq
                                               make-primcall
                                               make-call
                                               make-conditional
                                               make-toplevel-define
                                               make-toplevel-set
                                               make-toplevel-ref
                                               make-module-set
                                               make-module-ref
                                               make-lexical-set
                                               make-lexical-ref
                                               make-primitive-ref
                                               make-const
                                               make-void)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i471"
                                              "i469"
                                              "i467"
                                              "i465"
                                              "i463"
                                              "i461"
                                              "i459"
                                              "i457"
                                              "i455"
                                              "i453"
                                              "i451"
                                              "i449"
                                              "i447"
                                              "i445"
                                              "i443"
                                              "i441"
                                              "i439"
                                              "i437"
                                              "i435"
                                              "i433"
                                              "i431"
                                              "i429"
                                              "i427"
                                              "i425"
                                              "i423"
                                              "i421"
                                              "i419"
                                              "i417"
                                              "i415"
                                              "i413"
                                              "i411"
                                              "i409"
                                              "i407"
                                              "i405"
                                              "i403"
                                              "i402"
                                              "i400"
                                              "i397"
                                              "i396"
                                              "i395"
                                              "i393"
                                              "i392"
                                              "i390"
                                              "i388"
                                              "i386"
                                              "i384"
                                              "i382"
                                              "i380"
                                              "i378"
                                              "i376"
                                              "i373"
                                              "i371"
                                              "i370"
                                              "i368"
                                              "i366"
                                              "i364"
                                              "i362"
                                              "i361"
                                              "i360"
                                              "i359"
                                              "i357"
                                              "i356"
                                              "i353"
                                              "i351"
                                              "i349"
                                              "i347"
                                              "i345"
                                              "i343"
                                              "i341"
                                              "i340"
                                              "i339"
                                              "i337"
                                              "i335"
                                              "i334"
                                              "i331"
                                              "i330"
                                              "i328"
                                              "i326"
                                              "i324"
                                              "i322"
                                              "i320"
                                              "i318"
                                              "i316"
                                              "i314"
                                              "i312"
                                              "i309"
                                              "i307"
                                              "i305"
                                              "i303"
                                              "i301"
                                              "i299"
                                              "i297"
                                              "i295"
                                              "i293"
                                              "i291"
                                              "i289"
                                              "i287"
                                              "i285"
                                              "i283"
                                              "i281"
                                              "i279"
                                              "i277"
                                              "i275"
                                              "i273"
                                              "i271"
                                              "i269"
                                              "i267"
                                              "i265"
                                              "i263"
                                              "i262"
                                              "i259"
                                              "i257"
                                              "i256"
                                              "i255"
                                              "i254"
                                              "i253"
                                              "i251"
                                              "i249"
                                              "i247"
                                              "i244"
                                              "i242"
                                              "i240"
                                              "i238"
                                              "i236"
                                              "i234"
                                              "i232"
                                              "i230"
                                              "i228"
                                              "i226"
                                              "i224"
                                              "i222"
                                              "i220"
                                              "i218"
                                              "i216"
                                              "i214"
                                              "i212"
                                              "i210"
                                              "i208"))
                                           #(ribcage
                                             (define-structure
                                               define-expansion-accessors
                                               define-expansion-constructors)
                                             ((top) (top) (top))
                                             ("i46" "i45" "i44")))
                                          (hygiene guile))
                                       #{keys 14993}#))
                               #f)
                           (if (#{free-id=? 4363}#
                                 '#(syntax-object
                                    pad
                                    ((top)
                                     #(ribcage
                                       #(pat exp)
                                       #((top) (top))
                                       #("i3939" "i3940"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x keys clauses r mod)
                                       #((top) (top) (top) (top) (top))
                                       #("i3929"
                                         "i3930"
                                         "i3931"
                                         "i3932"
                                         "i3933"))
                                     #(ribcage
                                       (gen-syntax-case
                                         gen-clause
                                         build-dispatch-call
                                         convert-pattern)
                                       ((top) (top) (top) (top))
                                       ("i3742" "i3740" "i3738" "i3736"))
                                     #(ribcage
                                       (lambda-var-list
                                         gen-var
                                         strip
                                         chi-lambda-case
                                         lambda*-formals
                                         chi-simple-lambda
                                         lambda-formals
                                         ellipsis?
                                         chi-void
                                         eval-local-transformer
                                         chi-local-syntax
                                         chi-body
                                         chi-macro
                                         chi-call
                                         chi-expr
                                         chi
                                         syntax-type
                                         chi-when-list
                                         chi-install-global
                                         chi-top-sequence
                                         chi-sequence
                                         source-wrap
                                         wrap
                                         bound-id-member?
                                         distinct-bound-ids?
                                         valid-bound-ids?
                                         bound-id=?
                                         free-id=?
                                         id-var-name
                                         same-marks?
                                         join-marks
                                         join-wraps
                                         smart-append
                                         make-binding-wrap
                                         extend-ribcage!
                                         make-empty-ribcage
                                         new-mark
                                         anti-mark
                                         the-anti-mark
                                         top-marked?
                                         top-wrap
                                         empty-wrap
                                         set-ribcage-labels!
                                         set-ribcage-marks!
                                         set-ribcage-symnames!
                                         ribcage-labels
                                         ribcage-marks
                                         ribcage-symnames
                                         ribcage?
                                         make-ribcage
                                         gen-labels
                                         gen-label
                                         make-rename
                                         rename-marks
                                         rename-new
                                         rename-old
                                         subst-rename?
                                         wrap-subst
                                         wrap-marks
                                         make-wrap
                                         id-sym-name&marks
                                         id-sym-name
                                         id?
                                         nonsymbol-id?
                                         global-extend
                                         lookup
                                         macros-only-env
                                         extend-var-env
                                         extend-env
                                         null-env
                                         binding-value
                                         binding-type
                                         make-binding
                                         arg-check
                                         source-annotation
                                         no-source
                                         set-syntax-object-module!
                                         set-syntax-object-wrap!
                                         set-syntax-object-expression!
                                         syntax-object-module
                                         syntax-object-wrap
                                         syntax-object-expression
                                         syntax-object?
                                         make-syntax-object
                                         build-lexical-var
                                         build-letrec
                                         build-named-let
                                         build-let
                                         build-sequence
                                         build-data
                                         build-primref
                                         build-primcall
                                         build-lambda-case
                                         build-case-lambda
                                         build-simple-lambda
                                         build-global-definition
                                         build-global-assignment
                                         build-global-reference
                                         analyze-variable
                                         build-lexical-assignment
                                         build-lexical-reference
                                         build-dynlet
                                         build-conditional
                                         build-call
                                         build-void
                                         maybe-name-value!
                                         decorate-source
                                         get-global-definition-hook
                                         put-global-definition-hook
                                         gensym-hook
                                         local-eval-hook
                                         top-level-eval-hook
                                         fx<
                                         fx=
                                         fx-
                                         fx+
                                         set-lambda-meta!
                                         lambda-meta
                                         lambda?
                                         make-dynlet
                                         make-letrec
                                         make-let
                                         make-lambda-case
                                         make-lambda
                                         make-seq
                                         make-primcall
                                         make-call
                                         make-conditional
                                         make-toplevel-define
                                         make-toplevel-set
                                         make-toplevel-ref
                                         make-module-set
                                         make-module-ref
                                         make-lexical-set
                                         make-lexical-ref
                                         make-primitive-ref
                                         make-const
                                         make-void)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i471"
                                        "i469"
                                        "i467"
                                        "i465"
                                        "i463"
                                        "i461"
                                        "i459"
                                        "i457"
                                        "i455"
                                        "i453"
                                        "i451"
                                        "i449"
                                        "i447"
                                        "i445"
                                        "i443"
                                        "i441"
                                        "i439"
                                        "i437"
                                        "i435"
                                        "i433"
                                        "i431"
                                        "i429"
                                        "i427"
                                        "i425"
                                        "i423"
                                        "i421"
                                        "i419"
                                        "i417"
                                        "i415"
                                        "i413"
                                        "i411"
                                        "i409"
                                        "i407"
                                        "i405"
                                        "i403"
                                        "i402"
                                        "i400"
                                        "i397"
                                        "i396"
                                        "i395"
                                        "i393"
                                        "i392"
                                        "i390"
                                        "i388"
                                        "i386"
                                        "i384"
                                        "i382"
                                        "i380"
                                        "i378"
                                        "i376"
                                        "i373"
                                        "i371"
                                        "i370"
                                        "i368"
                                        "i366"
                                        "i364"
                                        "i362"
                                        "i361"
                                        "i360"
                                        "i359"
                                        "i357"
                                        "i356"
                                        "i353"
                                        "i351"
                                        "i349"
                                        "i347"
                                        "i345"
                                        "i343"
                                        "i341"
                                        "i340"
                                        "i339"
                                        "i337"
                                        "i335"
                                        "i334"
                                        "i331"
                                        "i330"
                                        "i328"
                                        "i326"
                                        "i324"
                                        "i322"
                                        "i320"
                                        "i318"
                                        "i316"
                                        "i314"
                                        "i312"
                                        "i309"
                                        "i307"
                                        "i305"
                                        "i303"
                                        "i301"
                                        "i299"
                                        "i297"
                                        "i295"
                                        "i293"
                                        "i291"
                                        "i289"
                                        "i287"
                                        "i285"
                                        "i283"
                                        "i281"
                                        "i279"
                                        "i277"
                                        "i275"
                                        "i273"
                                        "i271"
                                        "i269"
                                        "i267"
                                        "i265"
                                        "i263"
                                        "i262"
                                        "i259"
                                        "i257"
                                        "i256"
                                        "i255"
                                        "i254"
                                        "i253"
                                        "i251"
                                        "i249"
                                        "i247"
                                        "i244"
                                        "i242"
                                        "i240"
                                        "i238"
                                        "i236"
                                        "i234"
                                        "i232"
                                        "i230"
                                        "i228"
                                        "i226"
                                        "i224"
                                        "i222"
                                        "i220"
                                        "i218"
                                        "i216"
                                        "i214"
                                        "i212"
                                        "i210"
                                        "i208"))
                                     #(ribcage
                                       (define-structure
                                         define-expansion-accessors
                                         define-expansion-constructors)
                                       ((top) (top) (top))
                                       ("i46" "i45" "i44")))
                                    (hygiene guile))
                                 '#(syntax-object
                                    _
                                    ((top)
                                     #(ribcage
                                       #(pat exp)
                                       #((top) (top))
                                       #("i3939" "i3940"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x keys clauses r mod)
                                       #((top) (top) (top) (top) (top))
                                       #("i3929"
                                         "i3930"
                                         "i3931"
                                         "i3932"
                                         "i3933"))
                                     #(ribcage
                                       (gen-syntax-case
                                         gen-clause
                                         build-dispatch-call
                                         convert-pattern)
                                       ((top) (top) (top) (top))
                                       ("i3742" "i3740" "i3738" "i3736"))
                                     #(ribcage
                                       (lambda-var-list
                                         gen-var
                                         strip
                                         chi-lambda-case
                                         lambda*-formals
                                         chi-simple-lambda
                                         lambda-formals
                                         ellipsis?
                                         chi-void
                                         eval-local-transformer
                                         chi-local-syntax
                                         chi-body
                                         chi-macro
                                         chi-call
                                         chi-expr
                                         chi
                                         syntax-type
                                         chi-when-list
                                         chi-install-global
                                         chi-top-sequence
                                         chi-sequence
                                         source-wrap
                                         wrap
                                         bound-id-member?
                                         distinct-bound-ids?
                                         valid-bound-ids?
                                         bound-id=?
                                         free-id=?
                                         id-var-name
                                         same-marks?
                                         join-marks
                                         join-wraps
                                         smart-append
                                         make-binding-wrap
                                         extend-ribcage!
                                         make-empty-ribcage
                                         new-mark
                                         anti-mark
                                         the-anti-mark
                                         top-marked?
                                         top-wrap
                                         empty-wrap
                                         set-ribcage-labels!
                                         set-ribcage-marks!
                                         set-ribcage-symnames!
                                         ribcage-labels
                                         ribcage-marks
                                         ribcage-symnames
                                         ribcage?
                                         make-ribcage
                                         gen-labels
                                         gen-label
                                         make-rename
                                         rename-marks
                                         rename-new
                                         rename-old
                                         subst-rename?
                                         wrap-subst
                                         wrap-marks
                                         make-wrap
                                         id-sym-name&marks
                                         id-sym-name
                                         id?
                                         nonsymbol-id?
                                         global-extend
                                         lookup
                                         macros-only-env
                                         extend-var-env
                                         extend-env
                                         null-env
                                         binding-value
                                         binding-type
                                         make-binding
                                         arg-check
                                         source-annotation
                                         no-source
                                         set-syntax-object-module!
                                         set-syntax-object-wrap!
                                         set-syntax-object-expression!
                                         syntax-object-module
                                         syntax-object-wrap
                                         syntax-object-expression
                                         syntax-object?
                                         make-syntax-object
                                         build-lexical-var
                                         build-letrec
                                         build-named-let
                                         build-let
                                         build-sequence
                                         build-data
                                         build-primref
                                         build-primcall
                                         build-lambda-case
                                         build-case-lambda
                                         build-simple-lambda
                                         build-global-definition
                                         build-global-assignment
                                         build-global-reference
                                         analyze-variable
                                         build-lexical-assignment
                                         build-lexical-reference
                                         build-dynlet
                                         build-conditional
                                         build-call
                                         build-void
                                         maybe-name-value!
                                         decorate-source
                                         get-global-definition-hook
                                         put-global-definition-hook
                                         gensym-hook
                                         local-eval-hook
                                         top-level-eval-hook
                                         fx<
                                         fx=
                                         fx-
                                         fx+
                                         set-lambda-meta!
                                         lambda-meta
                                         lambda?
                                         make-dynlet
                                         make-letrec
                                         make-let
                                         make-lambda-case
                                         make-lambda
                                         make-seq
                                         make-primcall
                                         make-call
                                         make-conditional
                                         make-toplevel-define
                                         make-toplevel-set
                                         make-toplevel-ref
                                         make-module-set
                                         make-module-ref
                                         make-lexical-set
                                         make-lexical-ref
                                         make-primitive-ref
                                         make-const
                                         make-void)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i471"
                                        "i469"
                                        "i467"
                                        "i465"
                                        "i463"
                                        "i461"
                                        "i459"
                                        "i457"
                                        "i455"
                                        "i453"
                                        "i451"
                                        "i449"
                                        "i447"
                                        "i445"
                                        "i443"
                                        "i441"
                                        "i439"
                                        "i437"
                                        "i435"
                                        "i433"
                                        "i431"
                                        "i429"
                                        "i427"
                                        "i425"
                                        "i423"
                                        "i421"
                                        "i419"
                                        "i417"
                                        "i415"
                                        "i413"
                                        "i411"
                                        "i409"
                                        "i407"
                                        "i405"
                                        "i403"
                                        "i402"
                                        "i400"
                                        "i397"
                                        "i396"
                                        "i395"
                                        "i393"
                                        "i392"
                                        "i390"
                                        "i388"
                                        "i386"
                                        "i384"
                                        "i382"
                                        "i380"
                                        "i378"
                                        "i376"
                                        "i373"
                                        "i371"
                                        "i370"
                                        "i368"
                                        "i366"
                                        "i364"
                                        "i362"
                                        "i361"
                                        "i360"
                                        "i359"
                                        "i357"
                                        "i356"
                                        "i353"
                                        "i351"
                                        "i349"
                                        "i347"
                                        "i345"
                                        "i343"
                                        "i341"
                                        "i340"
                                        "i339"
                                        "i337"
                                        "i335"
                                        "i334"
                                        "i331"
                                        "i330"
                                        "i328"
                                        "i326"
                                        "i324"
                                        "i322"
                                        "i320"
                                        "i318"
                                        "i316"
                                        "i314"
                                        "i312"
                                        "i309"
                                        "i307"
                                        "i305"
                                        "i303"
                                        "i301"
                                        "i299"
                                        "i297"
                                        "i295"
                                        "i293"
                                        "i291"
                                        "i289"
                                        "i287"
                                        "i285"
                                        "i283"
                                        "i281"
                                        "i279"
                                        "i277"
                                        "i275"
                                        "i273"
                                        "i271"
                                        "i269"
                                        "i267"
                                        "i265"
                                        "i263"
                                        "i262"
                                        "i259"
                                        "i257"
                                        "i256"
                                        "i255"
                                        "i254"
                                        "i253"
                                        "i251"
                                        "i249"
                                        "i247"
                                        "i244"
                                        "i242"
                                        "i240"
                                        "i238"
                                        "i236"
                                        "i234"
                                        "i232"
                                        "i230"
                                        "i228"
                                        "i226"
                                        "i224"
                                        "i222"
                                        "i220"
                                        "i218"
                                        "i216"
                                        "i214"
                                        "i212"
                                        "i210"
                                        "i208"))
                                     #(ribcage
                                       (define-structure
                                         define-expansion-accessors
                                         define-expansion-constructors)
                                       ((top) (top) (top))
                                       ("i46" "i45" "i44")))
                                    (hygiene guile)))
                             (#{chi 4375}#
                               #{exp 15025}#
                               #{r 14995}#
                               '(())
                               #{mod 14996}#)
                             (let ((#{labels 15138}#
                                     (list (symbol->string (gensym "i"))))
                                   (#{var 15139}#
                                     (let ((#{id 15177}#
                                             (if (if (vector? #{pat 15024}#)
                                                   (if (= (vector-length
                                                            #{pat 15024}#)
                                                          4)
                                                     (eq? (vector-ref
                                                            #{pat 15024}#
                                                            0)
                                                          'syntax-object)
                                                     #f)
                                                   #f)
                                               (vector-ref #{pat 15024}# 1)
                                               #{pat 15024}#)))
                                       (gensym
                                         (string-append
                                           (symbol->string #{id 15177}#)
                                           " ")))))
                               (#{build-call 4309}#
                                 #f
                                 (#{build-simple-lambda 4318}#
                                   #f
                                   (list (syntax->datum #{pat 15024}#))
                                   #f
                                   (list #{var 15139}#)
                                   '()
                                   (#{chi 4375}#
                                     #{exp 15025}#
                                     (#{extend-env 4337}#
                                       #{labels 15138}#
                                       (list (cons 'syntax
                                                   (cons #{var 15139}# 0)))
                                       #{r 14995}#)
                                     (#{make-binding-wrap 4357}#
                                       (list #{pat 15024}#)
                                       #{labels 15138}#
                                       '(()))
                                     #{mod 14996}#))
                                 (list #{x 14992}#))))
                           (#{gen-clause 14247}#
                             #{x 14992}#
                             #{keys 14993}#
                             (cdr #{clauses 14994}#)
                             #{r 14995}#
                             #{pat 15024}#
                             #t
                             #{exp 15025}#
                             #{mod 14996}#)))
                       #{tmp 15022}#)
                     (let ((#{tmp 15487}#
                             ($sc-dispatch #{tmp 15021}# '(any any any))))
                       (if #{tmp 15487}#
                         (@apply
                           (lambda (#{pat 15489}#
                                    #{fender 15490}#
                                    #{exp 15491}#)
                             (#{gen-clause 14247}#
                               #{x 14992}#
                               #{keys 14993}#
                               (cdr #{clauses 14994}#)
                               #{r 14995}#
                               #{pat 15489}#
                               #{fender 15490}#
                               #{exp 15491}#
                               #{mod 14996}#))
                           #{tmp 15487}#)
                         (syntax-violation
                           'syntax-case
                           "invalid clause"
                           (car #{clauses 14994}#)))))))))))
        (lambda (#{e 14249}#
                 #{r 14250}#
                 #{w 14251}#
                 #{s 14252}#
                 #{mod 14253}#)
          (let ((#{e 14254}#
                  (let ((#{x 14903}#
                          (begin
                            (if (if (pair? #{e 14249}#) #{s 14252}# #f)
                              (set-source-properties! #{e 14249}# #{s 14252}#))
                            #{e 14249}#)))
                    (if (if (null? (car #{w 14251}#))
                          (null? (cdr #{w 14251}#))
                          #f)
                      #{x 14903}#
                      (if (if (vector? #{x 14903}#)
                            (if (= (vector-length #{x 14903}#) 4)
                              (eq? (vector-ref #{x 14903}# 0) 'syntax-object)
                              #f)
                            #f)
                        (let ((#{expression 14935}# (vector-ref #{x 14903}# 1))
                              (#{wrap 14936}#
                                (let ((#{w2 14944}#
                                        (vector-ref #{x 14903}# 2)))
                                  (let ((#{m1 14945}# (car #{w 14251}#))
                                        (#{s1 14946}# (cdr #{w 14251}#)))
                                    (if (null? #{m1 14945}#)
                                      (if (null? #{s1 14946}#)
                                        #{w2 14944}#
                                        (cons (car #{w2 14944}#)
                                              (let ((#{m2 14961}#
                                                      (cdr #{w2 14944}#)))
                                                (if (null? #{m2 14961}#)
                                                  #{s1 14946}#
                                                  (append
                                                    #{s1 14946}#
                                                    #{m2 14961}#)))))
                                      (cons (let ((#{m2 14969}#
                                                    (car #{w2 14944}#)))
                                              (if (null? #{m2 14969}#)
                                                #{m1 14945}#
                                                (append
                                                  #{m1 14945}#
                                                  #{m2 14969}#)))
                                            (let ((#{m2 14977}#
                                                    (cdr #{w2 14944}#)))
                                              (if (null? #{m2 14977}#)
                                                #{s1 14946}#
                                                (append
                                                  #{s1 14946}#
                                                  #{m2 14977}#))))))))
                              (#{module 14937}# (vector-ref #{x 14903}# 3)))
                          (vector
                            'syntax-object
                            #{expression 14935}#
                            #{wrap 14936}#
                            #{module 14937}#))
                        (if (null? #{x 14903}#)
                          #{x 14903}#
                          (vector
                            'syntax-object
                            #{x 14903}#
                            #{w 14251}#
                            #{mod 14253}#)))))))
            (let ((#{tmp 14255}# #{e 14254}#))
              (let ((#{tmp 14256}#
                      ($sc-dispatch
                        #{tmp 14255}#
                        '(_ any each-any . each-any))))
                (if #{tmp 14256}#
                  (@apply
                    (lambda (#{val 14308}# #{key 14309}# #{m 14310}#)
                      (if (and-map
                            (lambda (#{x 14311}#)
                              (if (if (symbol? #{x 14311}#)
                                    #t
                                    (if (if (vector? #{x 14311}#)
                                          (if (= (vector-length #{x 14311}#) 4)
                                            (eq? (vector-ref #{x 14311}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref #{x 14311}# 1))
                                      #f))
                                (not (if (if (if (vector? #{x 14311}#)
                                               (if (= (vector-length
                                                        #{x 14311}#)
                                                      4)
                                                 (eq? (vector-ref
                                                        #{x 14311}#
                                                        0)
                                                      'syntax-object)
                                                 #f)
                                               #f)
                                           (symbol? (vector-ref #{x 14311}# 1))
                                           #f)
                                       (#{free-id=? 4363}#
                                         #{x 14311}#
                                         '#(syntax-object
                                            ...
                                            ((top)
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i2263"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 chi-lambda-case
                                                 lambda*-formals
                                                 chi-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 chi-void
                                                 eval-local-transformer
                                                 chi-local-syntax
                                                 chi-body
                                                 chi-macro
                                                 chi-call
                                                 chi-expr
                                                 chi
                                                 syntax-type
                                                 chi-when-list
                                                 chi-install-global
                                                 chi-top-sequence
                                                 chi-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-primcall
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-call
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-seq
                                                 make-primcall
                                                 make-call
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i471"
                                                "i469"
                                                "i467"
                                                "i465"
                                                "i463"
                                                "i461"
                                                "i459"
                                                "i457"
                                                "i455"
                                                "i453"
                                                "i451"
                                                "i449"
                                                "i447"
                                                "i445"
                                                "i443"
                                                "i441"
                                                "i439"
                                                "i437"
                                                "i435"
                                                "i433"
                                                "i431"
                                                "i429"
                                                "i427"
                                                "i425"
                                                "i423"
                                                "i421"
                                                "i419"
                                                "i417"
                                                "i415"
                                                "i413"
                                                "i411"
                                                "i409"
                                                "i407"
                                                "i405"
                                                "i403"
                                                "i402"
                                                "i400"
                                                "i397"
                                                "i396"
                                                "i395"
                                                "i393"
                                                "i392"
                                                "i390"
                                                "i388"
                                                "i386"
                                                "i384"
                                                "i382"
                                                "i380"
                                                "i378"
                                                "i376"
                                                "i373"
                                                "i371"
                                                "i370"
                                                "i368"
                                                "i366"
                                                "i364"
                                                "i362"
                                                "i361"
                                                "i360"
                                                "i359"
                                                "i357"
                                                "i356"
                                                "i353"
                                                "i351"
                                                "i349"
                                                "i347"
                                                "i345"
                                                "i343"
                                                "i341"
                                                "i340"
                                                "i339"
                                                "i337"
                                                "i335"
                                                "i334"
                                                "i331"
                                                "i330"
                                                "i328"
                                                "i326"
                                                "i324"
                                                "i322"
                                                "i320"
                                                "i318"
                                                "i316"
                                                "i314"
                                                "i312"
                                                "i309"
                                                "i307"
                                                "i305"
                                                "i303"
                                                "i301"
                                                "i299"
                                                "i297"
                                                "i295"
                                                "i293"
                                                "i291"
                                                "i289"
                                                "i287"
                                                "i285"
                                                "i283"
                                                "i281"
                                                "i279"
                                                "i277"
                                                "i275"
                                                "i273"
                                                "i271"
                                                "i269"
                                                "i267"
                                                "i265"
                                                "i263"
                                                "i262"
                                                "i259"
                                                "i257"
                                                "i256"
                                                "i255"
                                                "i254"
                                                "i253"
                                                "i251"
                                                "i249"
                                                "i247"
                                                "i244"
                                                "i242"
                                                "i240"
                                                "i238"
                                                "i236"
                                                "i234"
                                                "i232"
                                                "i230"
                                                "i228"
                                                "i226"
                                                "i224"
                                                "i222"
                                                "i220"
                                                "i218"
                                                "i216"
                                                "i214"
                                                "i212"
                                                "i210"
                                                "i208"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("i46" "i45" "i44")))
                                            (hygiene guile)))
                                       #f))
                                #f))
                            #{key 14309}#)
                        (let ((#{x 14376}#
                                (gensym
                                  (string-append (symbol->string 'tmp) " "))))
                          (#{build-call 4309}#
                            #{s 14252}#
                            (let ((#{req 14518}# (list 'tmp))
                                  (#{vars 14520}# (list #{x 14376}#))
                                  (#{exp 14522}#
                                    (#{gen-syntax-case 14248}#
                                      (make-struct/no-tail
                                        (vector-ref %expanded-vtables 3)
                                        #f
                                        'tmp
                                        #{x 14376}#)
                                      #{key 14309}#
                                      #{m 14310}#
                                      #{r 14250}#
                                      #{mod 14253}#)))
                              (let ((#{body 14527}#
                                      (make-struct/no-tail
                                        (vector-ref %expanded-vtables 15)
                                        #f
                                        #{req 14518}#
                                        #f
                                        #f
                                        #f
                                        '()
                                        #{vars 14520}#
                                        #{exp 14522}#
                                        #f)))
                                (make-struct/no-tail
                                  (vector-ref %expanded-vtables 14)
                                  #f
                                  '()
                                  #{body 14527}#)))
                            (list (#{chi 4375}#
                                    #{val 14308}#
                                    #{r 14250}#
                                    '(())
                                    #{mod 14253}#))))
                        (syntax-violation
                          'syntax-case
                          "invalid literals list"
                          #{e 14254}#)))
                    #{tmp 14256}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{tmp 14255}#))))))))
    (set! macroexpand
      (lambda*
        (#{x 17259}#
          #:optional
          (#{m 17260}# 'e)
          (#{esew 17261}# '(eval)))
        (#{chi-top-sequence 4371}#
          (list #{x 17259}#)
          '()
          '((top))
          #f
          #{m 17260}#
          #{esew 17261}#
          (cons 'hygiene (module-name (current-module))))))
    (set! identifier?
      (lambda (#{x 17264}#)
        (if (if (vector? #{x 17264}#)
              (if (= (vector-length #{x 17264}#) 4)
                (eq? (vector-ref #{x 17264}# 0) 'syntax-object)
                #f)
              #f)
          (symbol? (vector-ref #{x 17264}# 1))
          #f)))
    (set! datum->syntax
      (lambda (#{id 17289}# #{datum 17290}#)
        (let ((#{wrap 17295}# (vector-ref #{id 17289}# 2))
              (#{module 17296}# (vector-ref #{id 17289}# 3)))
          (vector
            'syntax-object
            #{datum 17290}#
            #{wrap 17295}#
            #{module 17296}#))))
    (set! syntax->datum
      (lambda (#{x 17303}#)
        (#{strip 4388}# #{x 17303}# '(()))))
    (set! syntax-source
      (lambda (#{x 17306}#)
        (#{source-annotation 4336}# #{x 17306}#)))
    (set! generate-temporaries
      (lambda (#{ls 17508}#)
        (begin
          (if (not (list? #{ls 17508}#))
            (syntax-violation
              'generate-temporaries
              "invalid argument"
              #{ls 17508}#))
          (let ((#{mod 17516}#
                  (cons 'hygiene (module-name (current-module)))))
            (map (lambda (#{x 17517}#)
                   (let ((#{x 17521}# (gensym)))
                     (if (if (vector? #{x 17521}#)
                           (if (= (vector-length #{x 17521}#) 4)
                             (eq? (vector-ref #{x 17521}# 0) 'syntax-object)
                             #f)
                           #f)
                       (let ((#{expression 17536}# (vector-ref #{x 17521}# 1))
                             (#{wrap 17537}#
                               (let ((#{w2 17545}# (vector-ref #{x 17521}# 2)))
                                 (cons (let ((#{m2 17552}# (car #{w2 17545}#)))
                                         (if (null? #{m2 17552}#)
                                           '(top)
                                           (append '(top) #{m2 17552}#)))
                                       (let ((#{m2 17559}# (cdr #{w2 17545}#)))
                                         (if (null? #{m2 17559}#)
                                           '()
                                           (append '() #{m2 17559}#))))))
                             (#{module 17538}# (vector-ref #{x 17521}# 3)))
                         (vector
                           'syntax-object
                           #{expression 17536}#
                           #{wrap 17537}#
                           #{module 17538}#))
                       (if (null? #{x 17521}#)
                         #{x 17521}#
                         (vector
                           'syntax-object
                           #{x 17521}#
                           '((top))
                           #{mod 17516}#)))))
                 #{ls 17508}#)))))
    (set! free-identifier=?
      (lambda (#{x 17568}# #{y 17569}#)
        (begin
          (if (not (if (if (vector? #{x 17568}#)
                         (if (= (vector-length #{x 17568}#) 4)
                           (eq? (vector-ref #{x 17568}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{x 17568}# 1))
                     #f))
            (syntax-violation
              'free-identifier=?
              "invalid argument"
              #{x 17568}#))
          (if (not (if (if (vector? #{y 17569}#)
                         (if (= (vector-length #{y 17569}#) 4)
                           (eq? (vector-ref #{y 17569}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{y 17569}# 1))
                     #f))
            (syntax-violation
              'free-identifier=?
              "invalid argument"
              #{y 17569}#))
          (#{free-id=? 4363}# #{x 17568}# #{y 17569}#))))
    (set! bound-identifier=?
      (lambda (#{x 17644}# #{y 17645}#)
        (begin
          (if (not (if (if (vector? #{x 17644}#)
                         (if (= (vector-length #{x 17644}#) 4)
                           (eq? (vector-ref #{x 17644}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{x 17644}# 1))
                     #f))
            (syntax-violation
              'bound-identifier=?
              "invalid argument"
              #{x 17644}#))
          (if (not (if (if (vector? #{y 17645}#)
                         (if (= (vector-length #{y 17645}#) 4)
                           (eq? (vector-ref #{y 17645}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{y 17645}# 1))
                     #f))
            (syntax-violation
              'bound-identifier=?
              "invalid argument"
              #{y 17645}#))
          (#{bound-id=? 4364}# #{x 17644}# #{y 17645}#))))
    (set! syntax-violation
      (lambda*
        (#{who 17811}#
          #{message 17812}#
          #{form 17813}#
          #:optional
          (#{subform 17814}# #f))
        (begin
          (if (not (if (not #{who 17811}#)
                     (not #{who 17811}#)
                     (let ((#{t 17832}# (string? #{who 17811}#)))
                       (if #{t 17832}#
                         #{t 17832}#
                         (symbol? #{who 17811}#)))))
            (syntax-violation
              'syntax-violation
              "invalid argument"
              #{who 17811}#))
          (if (not (string? #{message 17812}#))
            (syntax-violation
              'syntax-violation
              "invalid argument"
              #{message 17812}#))
          (throw 'syntax-error
                 #{who 17811}#
                 #{message 17812}#
                 (#{source-annotation 4336}#
                   (if #{form 17813}#
                     #{form 17813}#
                     #{subform 17814}#))
                 (#{strip 4388}# #{form 17813}# '(()))
                 (if #{subform 17814}#
                   (#{strip 4388}# #{subform 17814}# '(()))
                   #f)))))
    (letrec*
      ((#{match-each 18083}#
         (lambda (#{e 18971}#
                  #{p 18972}#
                  #{w 18973}#
                  #{mod 18974}#)
           (if (pair? #{e 18971}#)
             (let ((#{first 18975}#
                     (#{match 18089}#
                       (car #{e 18971}#)
                       #{p 18972}#
                       #{w 18973}#
                       '()
                       #{mod 18974}#)))
               (if #{first 18975}#
                 (let ((#{rest 18978}#
                         (#{match-each 18083}#
                           (cdr #{e 18971}#)
                           #{p 18972}#
                           #{w 18973}#
                           #{mod 18974}#)))
                   (if #{rest 18978}#
                     (cons #{first 18975}# #{rest 18978}#)
                     #f))
                 #f))
             (if (null? #{e 18971}#)
               '()
               (if (if (vector? #{e 18971}#)
                     (if (= (vector-length #{e 18971}#) 4)
                       (eq? (vector-ref #{e 18971}# 0) 'syntax-object)
                       #f)
                     #f)
                 (#{match-each 18083}#
                   (vector-ref #{e 18971}# 1)
                   #{p 18972}#
                   (let ((#{w2 19000}# (vector-ref #{e 18971}# 2)))
                     (let ((#{m1 19001}# (car #{w 18973}#))
                           (#{s1 19002}# (cdr #{w 18973}#)))
                       (if (null? #{m1 19001}#)
                         (if (null? #{s1 19002}#)
                           #{w2 19000}#
                           (cons (car #{w2 19000}#)
                                 (let ((#{m2 19013}# (cdr #{w2 19000}#)))
                                   (if (null? #{m2 19013}#)
                                     #{s1 19002}#
                                     (append #{s1 19002}# #{m2 19013}#)))))
                         (cons (let ((#{m2 19021}# (car #{w2 19000}#)))
                                 (if (null? #{m2 19021}#)
                                   #{m1 19001}#
                                   (append #{m1 19001}# #{m2 19021}#)))
                               (let ((#{m2 19029}# (cdr #{w2 19000}#)))
                                 (if (null? #{m2 19029}#)
                                   #{s1 19002}#
                                   (append #{s1 19002}# #{m2 19029}#)))))))
                   (vector-ref #{e 18971}# 3))
                 #f)))))
       (#{match-each-any 18085}#
         (lambda (#{e 19038}# #{w 19039}# #{mod 19040}#)
           (if (pair? #{e 19038}#)
             (let ((#{l 19041}#
                     (#{match-each-any 18085}#
                       (cdr #{e 19038}#)
                       #{w 19039}#
                       #{mod 19040}#)))
               (if #{l 19041}#
                 (cons (let ((#{x 19046}# (car #{e 19038}#)))
                         (if (if (null? (car #{w 19039}#))
                               (null? (cdr #{w 19039}#))
                               #f)
                           #{x 19046}#
                           (if (if (vector? #{x 19046}#)
                                 (if (= (vector-length #{x 19046}#) 4)
                                   (eq? (vector-ref #{x 19046}# 0)
                                        'syntax-object)
                                   #f)
                                 #f)
                             (let ((#{expression 19064}#
                                     (vector-ref #{x 19046}# 1))
                                   (#{wrap 19065}#
                                     (let ((#{w2 19073}#
                                             (vector-ref #{x 19046}# 2)))
                                       (let ((#{m1 19074}# (car #{w 19039}#))
                                             (#{s1 19075}# (cdr #{w 19039}#)))
                                         (if (null? #{m1 19074}#)
                                           (if (null? #{s1 19075}#)
                                             #{w2 19073}#
                                             (cons (car #{w2 19073}#)
                                                   (let ((#{m2 19090}#
                                                           (cdr #{w2 19073}#)))
                                                     (if (null? #{m2 19090}#)
                                                       #{s1 19075}#
                                                       (append
                                                         #{s1 19075}#
                                                         #{m2 19090}#)))))
                                           (cons (let ((#{m2 19098}#
                                                         (car #{w2 19073}#)))
                                                   (if (null? #{m2 19098}#)
                                                     #{m1 19074}#
                                                     (append
                                                       #{m1 19074}#
                                                       #{m2 19098}#)))
                                                 (let ((#{m2 19106}#
                                                         (cdr #{w2 19073}#)))
                                                   (if (null? #{m2 19106}#)
                                                     #{s1 19075}#
                                                     (append
                                                       #{s1 19075}#
                                                       #{m2 19106}#))))))))
                                   (#{module 19066}#
                                     (vector-ref #{x 19046}# 3)))
                               (vector
                                 'syntax-object
                                 #{expression 19064}#
                                 #{wrap 19065}#
                                 #{module 19066}#))
                             (if (null? #{x 19046}#)
                               #{x 19046}#
                               (vector
                                 'syntax-object
                                 #{x 19046}#
                                 #{w 19039}#
                                 #{mod 19040}#)))))
                       #{l 19041}#)
                 #f))
             (if (null? #{e 19038}#)
               '()
               (if (if (vector? #{e 19038}#)
                     (if (= (vector-length #{e 19038}#) 4)
                       (eq? (vector-ref #{e 19038}# 0) 'syntax-object)
                       #f)
                     #f)
                 (#{match-each-any 18085}#
                   (vector-ref #{e 19038}# 1)
                   (let ((#{w2 19139}# (vector-ref #{e 19038}# 2)))
                     (let ((#{m1 19140}# (car #{w 19039}#))
                           (#{s1 19141}# (cdr #{w 19039}#)))
                       (if (null? #{m1 19140}#)
                         (if (null? #{s1 19141}#)
                           #{w2 19139}#
                           (cons (car #{w2 19139}#)
                                 (let ((#{m2 19152}# (cdr #{w2 19139}#)))
                                   (if (null? #{m2 19152}#)
                                     #{s1 19141}#
                                     (append #{s1 19141}# #{m2 19152}#)))))
                         (cons (let ((#{m2 19160}# (car #{w2 19139}#)))
                                 (if (null? #{m2 19160}#)
                                   #{m1 19140}#
                                   (append #{m1 19140}# #{m2 19160}#)))
                               (let ((#{m2 19168}# (cdr #{w2 19139}#)))
                                 (if (null? #{m2 19168}#)
                                   #{s1 19141}#
                                   (append #{s1 19141}# #{m2 19168}#)))))))
                   #{mod 19040}#)
                 #f)))))
       (#{match-empty 18086}#
         (lambda (#{p 19173}# #{r 19174}#)
           (if (null? #{p 19173}#)
             #{r 19174}#
             (if (eq? #{p 19173}# '_)
               #{r 19174}#
               (if (eq? #{p 19173}# 'any)
                 (cons '() #{r 19174}#)
                 (if (pair? #{p 19173}#)
                   (#{match-empty 18086}#
                     (car #{p 19173}#)
                     (#{match-empty 18086}#
                       (cdr #{p 19173}#)
                       #{r 19174}#))
                   (if (eq? #{p 19173}# 'each-any)
                     (cons '() #{r 19174}#)
                     (let ((#{atom-key 19175}# (vector-ref #{p 19173}# 0)))
                       (if (eqv? #{atom-key 19175}# 'each)
                         (#{match-empty 18086}#
                           (vector-ref #{p 19173}# 1)
                           #{r 19174}#)
                         (if (eqv? #{atom-key 19175}# 'each+)
                           (#{match-empty 18086}#
                             (vector-ref #{p 19173}# 1)
                             (#{match-empty 18086}#
                               (reverse (vector-ref #{p 19173}# 2))
                               (#{match-empty 18086}#
                                 (vector-ref #{p 19173}# 3)
                                 #{r 19174}#)))
                           (if (if (eqv? #{atom-key 19175}# 'free-id)
                                 #t
                                 (eqv? #{atom-key 19175}# 'atom))
                             #{r 19174}#
                             (if (eqv? #{atom-key 19175}# 'vector)
                               (#{match-empty 18086}#
                                 (vector-ref #{p 19173}# 1)
                                 #{r 19174}#)))))))))))))
       (#{combine 18087}#
         (lambda (#{r* 19194}# #{r 19195}#)
           (if (null? (car #{r* 19194}#))
             #{r 19195}#
             (cons (map car #{r* 19194}#)
                   (#{combine 18087}#
                     (map cdr #{r* 19194}#)
                     #{r 19195}#)))))
       (#{match* 18088}#
         (lambda (#{e 18118}#
                  #{p 18119}#
                  #{w 18120}#
                  #{r 18121}#
                  #{mod 18122}#)
           (if (null? #{p 18119}#)
             (if (null? #{e 18118}#) #{r 18121}# #f)
             (if (pair? #{p 18119}#)
               (if (pair? #{e 18118}#)
                 (#{match 18089}#
                   (car #{e 18118}#)
                   (car #{p 18119}#)
                   #{w 18120}#
                   (#{match 18089}#
                     (cdr #{e 18118}#)
                     (cdr #{p 18119}#)
                     #{w 18120}#
                     #{r 18121}#
                     #{mod 18122}#)
                   #{mod 18122}#)
                 #f)
               (if (eq? #{p 18119}# 'each-any)
                 (let ((#{l 18127}#
                         (#{match-each-any 18085}#
                           #{e 18118}#
                           #{w 18120}#
                           #{mod 18122}#)))
                   (if #{l 18127}#
                     (cons #{l 18127}# #{r 18121}#)
                     #f))
                 (let ((#{atom-key 18132}# (vector-ref #{p 18119}# 0)))
                   (if (eqv? #{atom-key 18132}# 'each)
                     (if (null? #{e 18118}#)
                       (#{match-empty 18086}#
                         (vector-ref #{p 18119}# 1)
                         #{r 18121}#)
                       (let ((#{l 18139}#
                               (#{match-each 18083}#
                                 #{e 18118}#
                                 (vector-ref #{p 18119}# 1)
                                 #{w 18120}#
                                 #{mod 18122}#)))
                         (if #{l 18139}#
                           (letrec*
                             ((#{collect 18142}#
                                (lambda (#{l 18203}#)
                                  (if (null? (car #{l 18203}#))
                                    #{r 18121}#
                                    (cons (map car #{l 18203}#)
                                          (#{collect 18142}#
                                            (map cdr #{l 18203}#)))))))
                             (#{collect 18142}# #{l 18139}#))
                           #f)))
                     (if (eqv? #{atom-key 18132}# 'each+)
                       (call-with-values
                         (lambda ()
                           (let ((#{x-pat 18212}# (vector-ref #{p 18119}# 1))
                                 (#{y-pat 18213}# (vector-ref #{p 18119}# 2))
                                 (#{z-pat 18214}# (vector-ref #{p 18119}# 3)))
                             (letrec*
                               ((#{f 18218}#
                                  (lambda (#{e 18220}# #{w 18221}#)
                                    (if (pair? #{e 18220}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{f 18218}#
                                            (cdr #{e 18220}#)
                                            #{w 18221}#))
                                        (lambda (#{xr* 18222}#
                                                 #{y-pat 18223}#
                                                 #{r 18224}#)
                                          (if #{r 18224}#
                                            (if (null? #{y-pat 18223}#)
                                              (let ((#{xr 18225}#
                                                      (#{match 18089}#
                                                        (car #{e 18220}#)
                                                        #{x-pat 18212}#
                                                        #{w 18221}#
                                                        '()
                                                        #{mod 18122}#)))
                                                (if #{xr 18225}#
                                                  (values
                                                    (cons #{xr 18225}#
                                                          #{xr* 18222}#)
                                                    #{y-pat 18223}#
                                                    #{r 18224}#)
                                                  (values #f #f #f)))
                                              (values
                                                '()
                                                (cdr #{y-pat 18223}#)
                                                (#{match 18089}#
                                                  (car #{e 18220}#)
                                                  (car #{y-pat 18223}#)
                                                  #{w 18221}#
                                                  #{r 18224}#
                                                  #{mod 18122}#)))
                                            (values #f #f #f))))
                                      (if (if (vector? #{e 18220}#)
                                            (if (= (vector-length #{e 18220}#)
                                                   4)
                                              (eq? (vector-ref #{e 18220}# 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (#{f 18218}#
                                          (vector-ref #{e 18220}# 1)
                                          (let ((#{m1 18253}#
                                                  (car #{w 18221}#))
                                                (#{s1 18254}#
                                                  (cdr #{w 18221}#)))
                                            (if (null? #{m1 18253}#)
                                              (if (null? #{s1 18254}#)
                                                #{e 18220}#
                                                (cons (car #{e 18220}#)
                                                      (let ((#{m2 18266}#
                                                              (cdr #{e 18220}#)))
                                                        (if (null? #{m2 18266}#)
                                                          #{s1 18254}#
                                                          (append
                                                            #{s1 18254}#
                                                            #{m2 18266}#)))))
                                              (cons (let ((#{m2 18276}#
                                                            (car #{e 18220}#)))
                                                      (if (null? #{m2 18276}#)
                                                        #{m1 18253}#
                                                        (append
                                                          #{m1 18253}#
                                                          #{m2 18276}#)))
                                                    (let ((#{m2 18286}#
                                                            (cdr #{e 18220}#)))
                                                      (if (null? #{m2 18286}#)
                                                        #{s1 18254}#
                                                        (append
                                                          #{s1 18254}#
                                                          #{m2 18286}#)))))))
                                        (values
                                          '()
                                          #{y-pat 18213}#
                                          (#{match 18089}#
                                            #{e 18220}#
                                            #{z-pat 18214}#
                                            #{w 18221}#
                                            #{r 18121}#
                                            #{mod 18122}#)))))))
                               (#{f 18218}# #{e 18118}# #{w 18120}#))))
                         (lambda (#{xr* 18296}# #{y-pat 18297}# #{r 18298}#)
                           (if #{r 18298}#
                             (if (null? #{y-pat 18297}#)
                               (if (null? #{xr* 18296}#)
                                 (#{match-empty 18086}#
                                   (vector-ref #{p 18119}# 1)
                                   #{r 18298}#)
                                 (#{combine 18087}# #{xr* 18296}# #{r 18298}#))
                               #f)
                             #f)))
                       (if (eqv? #{atom-key 18132}# 'free-id)
                         (if (if (symbol? #{e 18118}#)
                               #t
                               (if (if (vector? #{e 18118}#)
                                     (if (= (vector-length #{e 18118}#) 4)
                                       (eq? (vector-ref #{e 18118}# 0)
                                            'syntax-object)
                                       #f)
                                     #f)
                                 (symbol? (vector-ref #{e 18118}# 1))
                                 #f))
                           (if (#{free-id=? 4363}#
                                 (if (if (null? (car #{w 18120}#))
                                       (null? (cdr #{w 18120}#))
                                       #f)
                                   #{e 18118}#
                                   (if (if (vector? #{e 18118}#)
                                         (if (= (vector-length #{e 18118}#) 4)
                                           (eq? (vector-ref #{e 18118}# 0)
                                                'syntax-object)
                                           #f)
                                         #f)
                                     (let ((#{expression 18729}#
                                             (vector-ref #{e 18118}# 1))
                                           (#{wrap 18730}#
                                             (let ((#{w2 18740}#
                                                     (vector-ref
                                                       #{e 18118}#
                                                       2)))
                                               (let ((#{m1 18741}#
                                                       (car #{w 18120}#))
                                                     (#{s1 18742}#
                                                       (cdr #{w 18120}#)))
                                                 (if (null? #{m1 18741}#)
                                                   (if (null? #{s1 18742}#)
                                                     #{w2 18740}#
                                                     (cons (car #{w2 18740}#)
                                                           (let ((#{m2 18759}#
                                                                   (cdr #{w2 18740}#)))
                                                             (if (null? #{m2 18759}#)
                                                               #{s1 18742}#
                                                               (append
                                                                 #{s1 18742}#
                                                                 #{m2 18759}#)))))
                                                   (cons (let ((#{m2 18767}#
                                                                 (car #{w2 18740}#)))
                                                           (if (null? #{m2 18767}#)
                                                             #{m1 18741}#
                                                             (append
                                                               #{m1 18741}#
                                                               #{m2 18767}#)))
                                                         (let ((#{m2 18775}#
                                                                 (cdr #{w2 18740}#)))
                                                           (if (null? #{m2 18775}#)
                                                             #{s1 18742}#
                                                             (append
                                                               #{s1 18742}#
                                                               #{m2 18775}#))))))))
                                           (#{module 18731}#
                                             (vector-ref #{e 18118}# 3)))
                                       (vector
                                         'syntax-object
                                         #{expression 18729}#
                                         #{wrap 18730}#
                                         #{module 18731}#))
                                     (if (null? #{e 18118}#)
                                       #{e 18118}#
                                       (vector
                                         'syntax-object
                                         #{e 18118}#
                                         #{w 18120}#
                                         #{mod 18122}#))))
                                 (vector-ref #{p 18119}# 1))
                             #{r 18121}#
                             #f)
                           #f)
                         (if (eqv? #{atom-key 18132}# 'atom)
                           (if (equal?
                                 (vector-ref #{p 18119}# 1)
                                 (#{strip 4388}# #{e 18118}# #{w 18120}#))
                             #{r 18121}#
                             #f)
                           (if (eqv? #{atom-key 18132}# 'vector)
                             (if (vector? #{e 18118}#)
                               (#{match 18089}#
                                 (vector->list #{e 18118}#)
                                 (vector-ref #{p 18119}# 1)
                                 #{w 18120}#
                                 #{r 18121}#
                                 #{mod 18122}#)
                               #f))))))))))))
       (#{match 18089}#
         (lambda (#{e 18808}#
                  #{p 18809}#
                  #{w 18810}#
                  #{r 18811}#
                  #{mod 18812}#)
           (if (not #{r 18811}#)
             #f
             (if (eq? #{p 18809}# '_)
               #{r 18811}#
               (if (eq? #{p 18809}# 'any)
                 (cons (if (if (null? (car #{w 18810}#))
                             (null? (cdr #{w 18810}#))
                             #f)
                         #{e 18808}#
                         (if (if (vector? #{e 18808}#)
                               (if (= (vector-length #{e 18808}#) 4)
                                 (eq? (vector-ref #{e 18808}# 0)
                                      'syntax-object)
                                 #f)
                               #f)
                           (let ((#{expression 18842}#
                                   (vector-ref #{e 18808}# 1))
                                 (#{wrap 18843}#
                                   (let ((#{w2 18853}#
                                           (vector-ref #{e 18808}# 2)))
                                     (let ((#{m1 18854}# (car #{w 18810}#))
                                           (#{s1 18855}# (cdr #{w 18810}#)))
                                       (if (null? #{m1 18854}#)
                                         (if (null? #{s1 18855}#)
                                           #{w2 18853}#
                                           (cons (car #{w2 18853}#)
                                                 (let ((#{m2 18872}#
                                                         (cdr #{w2 18853}#)))
                                                   (if (null? #{m2 18872}#)
                                                     #{s1 18855}#
                                                     (append
                                                       #{s1 18855}#
                                                       #{m2 18872}#)))))
                                         (cons (let ((#{m2 18880}#
                                                       (car #{w2 18853}#)))
                                                 (if (null? #{m2 18880}#)
                                                   #{m1 18854}#
                                                   (append
                                                     #{m1 18854}#
                                                     #{m2 18880}#)))
                                               (let ((#{m2 18888}#
                                                       (cdr #{w2 18853}#)))
                                                 (if (null? #{m2 18888}#)
                                                   #{s1 18855}#
                                                   (append
                                                     #{s1 18855}#
                                                     #{m2 18888}#))))))))
                                 (#{module 18844}# (vector-ref #{e 18808}# 3)))
                             (vector
                               'syntax-object
                               #{expression 18842}#
                               #{wrap 18843}#
                               #{module 18844}#))
                           (if (null? #{e 18808}#)
                             #{e 18808}#
                             (vector
                               'syntax-object
                               #{e 18808}#
                               #{w 18810}#
                               #{mod 18812}#))))
                       #{r 18811}#)
                 (if (if (vector? #{e 18808}#)
                       (if (= (vector-length #{e 18808}#) 4)
                         (eq? (vector-ref #{e 18808}# 0) 'syntax-object)
                         #f)
                       #f)
                   (#{match* 18088}#
                     (vector-ref #{e 18808}# 1)
                     #{p 18809}#
                     (let ((#{w2 18931}# (vector-ref #{e 18808}# 2)))
                       (let ((#{m1 18932}# (car #{w 18810}#))
                             (#{s1 18933}# (cdr #{w 18810}#)))
                         (if (null? #{m1 18932}#)
                           (if (null? #{s1 18933}#)
                             #{w2 18931}#
                             (cons (car #{w2 18931}#)
                                   (let ((#{m2 18944}# (cdr #{w2 18931}#)))
                                     (if (null? #{m2 18944}#)
                                       #{s1 18933}#
                                       (append #{s1 18933}# #{m2 18944}#)))))
                           (cons (let ((#{m2 18952}# (car #{w2 18931}#)))
                                   (if (null? #{m2 18952}#)
                                     #{m1 18932}#
                                     (append #{m1 18932}# #{m2 18952}#)))
                                 (let ((#{m2 18960}# (cdr #{w2 18931}#)))
                                   (if (null? #{m2 18960}#)
                                     #{s1 18933}#
                                     (append #{s1 18933}# #{m2 18960}#)))))))
                     #{r 18811}#
                     (vector-ref #{e 18808}# 3))
                   (#{match* 18088}#
                     #{e 18808}#
                     #{p 18809}#
                     #{w 18810}#
                     #{r 18811}#
                     #{mod 18812}#))))))))
      (set! $sc-dispatch
        (lambda (#{e 18090}# #{p 18091}#)
          (if (eq? #{p 18091}# 'any)
            (list #{e 18090}#)
            (if (eq? #{p 18091}# '_)
              '()
              (if (if (vector? #{e 18090}#)
                    (if (= (vector-length #{e 18090}#) 4)
                      (eq? (vector-ref #{e 18090}# 0) 'syntax-object)
                      #f)
                    #f)
                (#{match* 18088}#
                  (vector-ref #{e 18090}# 1)
                  #{p 18091}#
                  (vector-ref #{e 18090}# 2)
                  '()
                  (vector-ref #{e 18090}# 3))
                (#{match* 18088}#
                  #{e 18090}#
                  #{p 18091}#
                  '(())
                  '()
                  #f)))))))))

(define with-syntax
  (make-syntax-transformer
    'with-syntax
    'macro
    (lambda (#{x 37271}#)
      (let ((#{tmp 37273}#
              ($sc-dispatch #{x 37271}# '(_ () any . each-any))))
        (if #{tmp 37273}#
          (@apply
            (lambda (#{e1 37277}# #{e2 37278}#)
              (cons '#(syntax-object
                       let
                       ((top)
                        #(ribcage
                          #(e1 e2)
                          #((top) (top))
                          #("i37244" "i37245"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i37241")))
                       (hygiene guile))
                    (cons '() (cons #{e1 37277}# #{e2 37278}#))))
            #{tmp 37273}#)
          (let ((#{tmp 37279}#
                  ($sc-dispatch
                    #{x 37271}#
                    '(_ ((any any)) any . each-any))))
            (if #{tmp 37279}#
              (@apply
                (lambda (#{out 37283}#
                         #{in 37284}#
                         #{e1 37285}#
                         #{e2 37286}#)
                  (list '#(syntax-object
                           syntax-case
                           ((top)
                            #(ribcage
                              #(out in e1 e2)
                              #((top) (top) (top) (top))
                              #("i37250" "i37251" "i37252" "i37253"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i37241")))
                           (hygiene guile))
                        #{in 37284}#
                        '()
                        (list #{out 37283}#
                              (cons '#(syntax-object
                                       let
                                       ((top)
                                        #(ribcage
                                          #(out in e1 e2)
                                          #((top) (top) (top) (top))
                                          #("i37250"
                                            "i37251"
                                            "i37252"
                                            "i37253"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i37241")))
                                       (hygiene guile))
                                    (cons '()
                                          (cons #{e1 37285}# #{e2 37286}#))))))
                #{tmp 37279}#)
              (let ((#{tmp 37287}#
                      ($sc-dispatch
                        #{x 37271}#
                        '(_ #(each (any any)) any . each-any))))
                (if #{tmp 37287}#
                  (@apply
                    (lambda (#{out 37291}#
                             #{in 37292}#
                             #{e1 37293}#
                             #{e2 37294}#)
                      (list '#(syntax-object
                               syntax-case
                               ((top)
                                #(ribcage
                                  #(out in e1 e2)
                                  #((top) (top) (top) (top))
                                  #("i37260" "i37261" "i37262" "i37263"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i37241")))
                               (hygiene guile))
                            (cons '#(syntax-object
                                     list
                                     ((top)
                                      #(ribcage
                                        #(out in e1 e2)
                                        #((top) (top) (top) (top))
                                        #("i37260" "i37261" "i37262" "i37263"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i37241")))
                                     (hygiene guile))
                                  #{in 37292}#)
                            '()
                            (list #{out 37291}#
                                  (cons '#(syntax-object
                                           let
                                           ((top)
                                            #(ribcage
                                              #(out in e1 e2)
                                              #((top) (top) (top) (top))
                                              #("i37260"
                                                "i37261"
                                                "i37262"
                                                "i37263"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i37241")))
                                           (hygiene guile))
                                        (cons '()
                                              (cons #{e1 37293}#
                                                    #{e2 37294}#))))))
                    #{tmp 37287}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{x 37271}#))))))))))

(define syntax-rules
  (make-syntax-transformer
    'syntax-rules
    'macro
    (lambda (#{x 37348}#)
      (let ((#{tmp 37350}#
              ($sc-dispatch
                #{x 37348}#
                '(_ each-any . #(each ((any . any) any))))))
        (if #{tmp 37350}#
          (@apply
            (lambda (#{k 37354}#
                     #{keyword 37355}#
                     #{pattern 37356}#
                     #{template 37357}#)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage
                          #(k keyword pattern template)
                          #((top) (top) (top) (top))
                          #("i37311" "i37312" "i37313" "i37314"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i37308")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage
                           #(k keyword pattern template)
                           #((top) (top) (top) (top))
                           #("i37311" "i37312" "i37313" "i37314"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("i37308")))
                        (hygiene guile)))
                    (vector
                      '(#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("i37311" "i37312" "i37313" "i37314"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i37308")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          syntax-rules
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("i37311" "i37312" "i37313" "i37314"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i37308")))
                          (hygiene guile)))
                      (cons '#(syntax-object
                               patterns
                               ((top)
                                #(ribcage
                                  #(k keyword pattern template)
                                  #((top) (top) (top) (top))
                                  #("i37311" "i37312" "i37313" "i37314"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i37308")))
                               (hygiene guile))
                            #{pattern 37356}#))
                    (cons '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage
                                #(k keyword pattern template)
                                #((top) (top) (top) (top))
                                #("i37311" "i37312" "i37313" "i37314"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i37308")))
                             (hygiene guile))
                          (cons '#(syntax-object
                                   x
                                   ((top)
                                    #(ribcage
                                      #(k keyword pattern template)
                                      #((top) (top) (top) (top))
                                      #("i37311" "i37312" "i37313" "i37314"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i37308")))
                                   (hygiene guile))
                                (cons #{k 37354}#
                                      (map (lambda (#{tmp 37322 37358}#
                                                    #{tmp 37321 37359}#)
                                             (list (cons '#(syntax-object
                                                            dummy
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i37311"
                                                                 "i37312"
                                                                 "i37313"
                                                                 "i37314"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i37308")))
                                                            (hygiene guile))
                                                         #{tmp 37321 37359}#)
                                                   (list '#(syntax-object
                                                            syntax
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i37311"
                                                                 "i37312"
                                                                 "i37313"
                                                                 "i37314"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i37308")))
                                                            (hygiene guile))
                                                         #{tmp 37322 37358}#)))
                                           #{template 37357}#
                                           #{pattern 37356}#))))))
            #{tmp 37350}#)
          (let ((#{tmp 37360}#
                  ($sc-dispatch
                    #{x 37348}#
                    '(_ each-any any . #(each ((any . any) any))))))
            (if (if #{tmp 37360}#
                  (@apply
                    (lambda (#{k 37364}#
                             #{docstring 37365}#
                             #{keyword 37366}#
                             #{pattern 37367}#
                             #{template 37368}#)
                      (string? (syntax->datum #{docstring 37365}#)))
                    #{tmp 37360}#)
                  #f)
              (@apply
                (lambda (#{k 37369}#
                         #{docstring 37370}#
                         #{keyword 37371}#
                         #{pattern 37372}#
                         #{template 37373}#)
                  (list '#(syntax-object
                           lambda
                           ((top)
                            #(ribcage
                              #(k docstring keyword pattern template)
                              #((top) (top) (top) (top) (top))
                              #("i37334" "i37335" "i37336" "i37337" "i37338"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i37308")))
                           (hygiene guile))
                        '(#(syntax-object
                            x
                            ((top)
                             #(ribcage
                               #(k docstring keyword pattern template)
                               #((top) (top) (top) (top) (top))
                               #("i37334" "i37335" "i37336" "i37337" "i37338"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i37308")))
                            (hygiene guile)))
                        #{docstring 37370}#
                        (vector
                          '(#(syntax-object
                              macro-type
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("i37334"
                                   "i37335"
                                   "i37336"
                                   "i37337"
                                   "i37338"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i37308")))
                              (hygiene guile))
                            .
                            #(syntax-object
                              syntax-rules
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("i37334"
                                   "i37335"
                                   "i37336"
                                   "i37337"
                                   "i37338"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i37308")))
                              (hygiene guile)))
                          (cons '#(syntax-object
                                   patterns
                                   ((top)
                                    #(ribcage
                                      #(k docstring keyword pattern template)
                                      #((top) (top) (top) (top) (top))
                                      #("i37334"
                                        "i37335"
                                        "i37336"
                                        "i37337"
                                        "i37338"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i37308")))
                                   (hygiene guile))
                                #{pattern 37372}#))
                        (cons '#(syntax-object
                                 syntax-case
                                 ((top)
                                  #(ribcage
                                    #(k docstring keyword pattern template)
                                    #((top) (top) (top) (top) (top))
                                    #("i37334"
                                      "i37335"
                                      "i37336"
                                      "i37337"
                                      "i37338"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i37308")))
                                 (hygiene guile))
                              (cons '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(k
                                            docstring
                                            keyword
                                            pattern
                                            template)
                                          #((top) (top) (top) (top) (top))
                                          #("i37334"
                                            "i37335"
                                            "i37336"
                                            "i37337"
                                            "i37338"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i37308")))
                                       (hygiene guile))
                                    (cons #{k 37369}#
                                          (map (lambda (#{tmp 37347 37374}#
                                                        #{tmp 37346 37375}#)
                                                 (list (cons '#(syntax-object
                                                                dummy
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("i37334"
                                                                     "i37335"
                                                                     "i37336"
                                                                     "i37337"
                                                                     "i37338"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i37308")))
                                                                (hygiene
                                                                  guile))
                                                             #{tmp 37346 37375}#)
                                                       (list '#(syntax-object
                                                                syntax
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("i37334"
                                                                     "i37335"
                                                                     "i37336"
                                                                     "i37337"
                                                                     "i37338"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i37308")))
                                                                (hygiene
                                                                  guile))
                                                             #{tmp 37347 37374}#)))
                                               #{template 37373}#
                                               #{pattern 37372}#))))))
                #{tmp 37360}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 37348}#))))))))

(define define-syntax-rule
  (make-syntax-transformer
    'define-syntax-rule
    'macro
    (lambda (#{x 37412}#)
      (let ((#{tmp 37414}#
              ($sc-dispatch #{x 37412}# '(_ (any . any) any))))
        (if #{tmp 37414}#
          (@apply
            (lambda (#{name 37418}#
                     #{pattern 37419}#
                     #{template 37420}#)
              (list '#(syntax-object
                       define-syntax
                       ((top)
                        #(ribcage
                          #(name pattern template)
                          #((top) (top) (top))
                          #("i37389" "i37390" "i37391"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i37386")))
                       (hygiene guile))
                    #{name 37418}#
                    (list '#(syntax-object
                             syntax-rules
                             ((top)
                              #(ribcage
                                #(name pattern template)
                                #((top) (top) (top))
                                #("i37389" "i37390" "i37391"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i37386")))
                             (hygiene guile))
                          '()
                          (list (cons '#(syntax-object
                                         _
                                         ((top)
                                          #(ribcage
                                            #(name pattern template)
                                            #((top) (top) (top))
                                            #("i37389" "i37390" "i37391"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i37386")))
                                         (hygiene guile))
                                      #{pattern 37419}#)
                                #{template 37420}#))))
            #{tmp 37414}#)
          (let ((#{tmp 37421}#
                  ($sc-dispatch
                    #{x 37412}#
                    '(_ (any . any) any any))))
            (if (if #{tmp 37421}#
                  (@apply
                    (lambda (#{name 37425}#
                             #{pattern 37426}#
                             #{docstring 37427}#
                             #{template 37428}#)
                      (string? (syntax->datum #{docstring 37427}#)))
                    #{tmp 37421}#)
                  #f)
              (@apply
                (lambda (#{name 37429}#
                         #{pattern 37430}#
                         #{docstring 37431}#
                         #{template 37432}#)
                  (list '#(syntax-object
                           define-syntax
                           ((top)
                            #(ribcage
                              #(name pattern docstring template)
                              #((top) (top) (top) (top))
                              #("i37404" "i37405" "i37406" "i37407"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i37386")))
                           (hygiene guile))
                        #{name 37429}#
                        (list '#(syntax-object
                                 syntax-rules
                                 ((top)
                                  #(ribcage
                                    #(name pattern docstring template)
                                    #((top) (top) (top) (top))
                                    #("i37404" "i37405" "i37406" "i37407"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i37386")))
                                 (hygiene guile))
                              '()
                              #{docstring 37431}#
                              (list (cons '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(name
                                                  pattern
                                                  docstring
                                                  template)
                                                #((top) (top) (top) (top))
                                                #("i37404"
                                                  "i37405"
                                                  "i37406"
                                                  "i37407"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("i37386")))
                                             (hygiene guile))
                                          #{pattern 37430}#)
                                    #{template 37432}#))))
                #{tmp 37421}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 37412}#))))))))

(define let*
  (make-syntax-transformer
    'let*
    'macro
    (lambda (#{x 37481}#)
      (let ((#{tmp 37483}#
              ($sc-dispatch
                #{x 37481}#
                '(any #(each (any any)) any . each-any))))
        (if (if #{tmp 37483}#
              (@apply
                (lambda (#{let* 37487}#
                         #{x 37488}#
                         #{v 37489}#
                         #{e1 37490}#
                         #{e2 37491}#)
                  (and-map identifier? #{x 37488}#))
                #{tmp 37483}#)
              #f)
          (@apply
            (lambda (#{let* 37492}#
                     #{x 37493}#
                     #{v 37494}#
                     #{e1 37495}#
                     #{e2 37496}#)
              (letrec*
                ((#{f 37497}#
                   (lambda (#{bindings 37500}#)
                     (if (null? #{bindings 37500}#)
                       (cons '#(syntax-object
                                let
                                ((top)
                                 #(ribcage () () ())
                                 #(ribcage
                                   #(f bindings)
                                   #((top) (top))
                                   #("i37467" "i37468"))
                                 #(ribcage
                                   #(let* x v e1 e2)
                                   #((top) (top) (top) (top) (top))
                                   #("i37457"
                                     "i37458"
                                     "i37459"
                                     "i37460"
                                     "i37461"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("i37443")))
                                (hygiene guile))
                             (cons '() (cons #{e1 37495}# #{e2 37496}#)))
                       (let ((#{tmp 37501}#
                               (list (#{f 37497}# (cdr #{bindings 37500}#))
                                     (car #{bindings 37500}#))))
                         (let ((#{tmp 37502}#
                                 ($sc-dispatch #{tmp 37501}# '(any any))))
                           (if #{tmp 37502}#
                             (@apply
                               (lambda (#{body 37504}# #{binding 37505}#)
                                 (list '#(syntax-object
                                          let
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(body binding)
                                             #((top) (top))
                                             #("i37477" "i37478"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(f bindings)
                                             #((top) (top))
                                             #("i37467" "i37468"))
                                           #(ribcage
                                             #(let* x v e1 e2)
                                             #((top) (top) (top) (top) (top))
                                             #("i37457"
                                               "i37458"
                                               "i37459"
                                               "i37460"
                                               "i37461"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x)
                                             #((top))
                                             #("i37443")))
                                          (hygiene guile))
                                       (list #{binding 37505}#)
                                       #{body 37504}#))
                               #{tmp 37502}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp 37501}#))))))))
                (#{f 37497}# (map list #{x 37493}# #{v 37494}#))))
            #{tmp 37483}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 37481}#))))))

(define do
  (make-syntax-transformer
    'do
    'macro
    (lambda (#{orig-x 37563}#)
      (let ((#{tmp 37565}#
              ($sc-dispatch
                #{orig-x 37563}#
                '(_ #(each (any any . any))
                    (any . each-any)
                    .
                    each-any))))
        (if #{tmp 37565}#
          (@apply
            (lambda (#{var 37569}#
                     #{init 37570}#
                     #{step 37571}#
                     #{e0 37572}#
                     #{e1 37573}#
                     #{c 37574}#)
              (let ((#{tmp 37575}#
                      (map (lambda (#{v 37578}# #{s 37579}#)
                             (let ((#{tmp 37581}#
                                     ($sc-dispatch #{s 37579}# '())))
                               (if #{tmp 37581}#
                                 (@apply (lambda () #{v 37578}#) #{tmp 37581}#)
                                 (let ((#{tmp 37584}#
                                         ($sc-dispatch #{s 37579}# '(any))))
                                   (if #{tmp 37584}#
                                     (@apply
                                       (lambda (#{e 37587}#) #{e 37587}#)
                                       #{tmp 37584}#)
                                     (syntax-violation
                                       'do
                                       "bad step expression"
                                       #{orig-x 37563}#
                                       #{s 37579}#))))))
                           #{var 37569}#
                           #{step 37571}#)))
                (let ((#{tmp 37576}#
                        ($sc-dispatch #{tmp 37575}# 'each-any)))
                  (if #{tmp 37576}#
                    (@apply
                      (lambda (#{step 37593}#)
                        (let ((#{tmp 37595}# ($sc-dispatch #{e1 37573}# '())))
                          (if #{tmp 37595}#
                            (@apply
                              (lambda ()
                                (list '#(syntax-object
                                         let
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("i37531"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("i37516"
                                              "i37517"
                                              "i37518"
                                              "i37519"
                                              "i37520"
                                              "i37521"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("i37513")))
                                         (hygiene guile))
                                      '#(syntax-object
                                         doloop
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("i37531"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("i37516"
                                              "i37517"
                                              "i37518"
                                              "i37519"
                                              "i37520"
                                              "i37521"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("i37513")))
                                         (hygiene guile))
                                      (map list #{var 37569}# #{init 37570}#)
                                      (list '#(syntax-object
                                               if
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(step)
                                                  #((top))
                                                  #("i37531"))
                                                #(ribcage
                                                  #(var init step e0 e1 c)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("i37516"
                                                    "i37517"
                                                    "i37518"
                                                    "i37519"
                                                    "i37520"
                                                    "i37521"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(orig-x)
                                                  #((top))
                                                  #("i37513")))
                                               (hygiene guile))
                                            (list '#(syntax-object
                                                     not
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("i37531"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i37516"
                                                          "i37517"
                                                          "i37518"
                                                          "i37519"
                                                          "i37520"
                                                          "i37521"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("i37513")))
                                                     (hygiene guile))
                                                  #{e0 37572}#)
                                            (cons '#(syntax-object
                                                     begin
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("i37531"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i37516"
                                                          "i37517"
                                                          "i37518"
                                                          "i37519"
                                                          "i37520"
                                                          "i37521"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("i37513")))
                                                     (hygiene guile))
                                                  (append
                                                    #{c 37574}#
                                                    (list (cons '#(syntax-object
                                                                   doloop
                                                                   ((top)
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(step)
                                                                      #((top))
                                                                      #("i37531"))
                                                                    #(ribcage
                                                                      #(var
                                                                        init
                                                                        step
                                                                        e0
                                                                        e1
                                                                        c)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("i37516"
                                                                        "i37517"
                                                                        "i37518"
                                                                        "i37519"
                                                                        "i37520"
                                                                        "i37521"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(orig-x)
                                                                      #((top))
                                                                      #("i37513")))
                                                                   (hygiene
                                                                     guile))
                                                                #{step 37593}#)))))))
                              #{tmp 37595}#)
                            (let ((#{tmp 37599}#
                                    ($sc-dispatch
                                      #{e1 37573}#
                                      '(any . each-any))))
                              (if #{tmp 37599}#
                                (@apply
                                  (lambda (#{e1 37603}# #{e2 37604}#)
                                    (list '#(syntax-object
                                             let
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("i37540" "i37541"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("i37531"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i37516"
                                                  "i37517"
                                                  "i37518"
                                                  "i37519"
                                                  "i37520"
                                                  "i37521"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("i37513")))
                                             (hygiene guile))
                                          '#(syntax-object
                                             doloop
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("i37540" "i37541"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("i37531"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i37516"
                                                  "i37517"
                                                  "i37518"
                                                  "i37519"
                                                  "i37520"
                                                  "i37521"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("i37513")))
                                             (hygiene guile))
                                          (map list
                                               #{var 37569}#
                                               #{init 37570}#)
                                          (list '#(syntax-object
                                                   if
                                                   ((top)
                                                    #(ribcage
                                                      #(e1 e2)
                                                      #((top) (top))
                                                      #("i37540" "i37541"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(step)
                                                      #((top))
                                                      #("i37531"))
                                                    #(ribcage
                                                      #(var init step e0 e1 c)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i37516"
                                                        "i37517"
                                                        "i37518"
                                                        "i37519"
                                                        "i37520"
                                                        "i37521"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(orig-x)
                                                      #((top))
                                                      #("i37513")))
                                                   (hygiene guile))
                                                #{e0 37572}#
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("i37540"
                                                              "i37541"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("i37531"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i37516"
                                                              "i37517"
                                                              "i37518"
                                                              "i37519"
                                                              "i37520"
                                                              "i37521"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("i37513")))
                                                         (hygiene guile))
                                                      (cons #{e1 37603}#
                                                            #{e2 37604}#))
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("i37540"
                                                              "i37541"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("i37531"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i37516"
                                                              "i37517"
                                                              "i37518"
                                                              "i37519"
                                                              "i37520"
                                                              "i37521"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("i37513")))
                                                         (hygiene guile))
                                                      (append
                                                        #{c 37574}#
                                                        (list (cons '#(syntax-object
                                                                       doloop
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(e1
                                                                            e2)
                                                                          #((top)
                                                                            (top))
                                                                          #("i37540"
                                                                            "i37541"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(step)
                                                                          #((top))
                                                                          #("i37531"))
                                                                        #(ribcage
                                                                          #(var
                                                                            init
                                                                            step
                                                                            e0
                                                                            e1
                                                                            c)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i37516"
                                                                            "i37517"
                                                                            "i37518"
                                                                            "i37519"
                                                                            "i37520"
                                                                            "i37521"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(orig-x)
                                                                          #((top))
                                                                          #("i37513")))
                                                                       (hygiene
                                                                         guile))
                                                                    #{step 37593}#)))))))
                                  #{tmp 37599}#)
                                (syntax-violation
                                  #f
                                  "source expression failed to match any pattern"
                                  #{e1 37573}#))))))
                      #{tmp 37576}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp 37575}#)))))
            #{tmp 37565}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{orig-x 37563}#))))))

(define quasiquote
  (make-syntax-transformer
    'quasiquote
    'macro
    (letrec*
      ((#{quasi 37890}#
         (lambda (#{p 37914}# #{lev 37915}#)
           (let ((#{tmp 37917}#
                   ($sc-dispatch
                     #{p 37914}#
                     '(#(free-id
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i37636" "i37637"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i37632"
                               "i37630"
                               "i37628"
                               "i37626"
                               "i37624"
                               "i37622"
                               "i37620")))
                           (hygiene guile)))
                       any))))
             (if #{tmp 37917}#
               (@apply
                 (lambda (#{p 37921}#)
                   (if (= #{lev 37915}# 0)
                     (list '#(syntax-object
                              "value"
                              ((top)
                               #(ribcage #(p) #((top)) #("i37640"))
                               #(ribcage () () ())
                               #(ribcage
                                 #(p lev)
                                 #((top) (top))
                                 #("i37636" "i37637"))
                               #(ribcage
                                 (emit quasivector
                                       quasilist*
                                       quasiappend
                                       quasicons
                                       vquasi
                                       quasi)
                                 ((top) (top) (top) (top) (top) (top) (top))
                                 ("i37632"
                                  "i37630"
                                  "i37628"
                                  "i37626"
                                  "i37624"
                                  "i37622"
                                  "i37620")))
                              (hygiene guile))
                           #{p 37921}#)
                     (#{quasicons 37892}#
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage #(p) #((top)) #("i37640"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i37636" "i37637"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i37632"
                               "i37630"
                               "i37628"
                               "i37626"
                               "i37624"
                               "i37622"
                               "i37620")))
                           (hygiene guile))
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage #(p) #((top)) #("i37640"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i37636" "i37637"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i37632"
                               "i37630"
                               "i37628"
                               "i37626"
                               "i37624"
                               "i37622"
                               "i37620")))
                           (hygiene guile)))
                       (#{quasi 37890}#
                         (list #{p 37921}#)
                         (#{1-}# #{lev 37915}#)))))
                 #{tmp 37917}#)
               (let ((#{tmp 37924}#
                       ($sc-dispatch
                         #{p 37914}#
                         '(#(free-id
                             #(syntax-object
                               quasiquote
                               ((top)
                                #(ribcage () () ())
                                #(ribcage
                                  #(p lev)
                                  #((top) (top))
                                  #("i37636" "i37637"))
                                #(ribcage
                                  (emit quasivector
                                        quasilist*
                                        quasiappend
                                        quasicons
                                        vquasi
                                        quasi)
                                  ((top) (top) (top) (top) (top) (top) (top))
                                  ("i37632"
                                   "i37630"
                                   "i37628"
                                   "i37626"
                                   "i37624"
                                   "i37622"
                                   "i37620")))
                               (hygiene guile)))
                           any))))
                 (if #{tmp 37924}#
                   (@apply
                     (lambda (#{p 37928}#)
                       (#{quasicons 37892}#
                         '(#(syntax-object
                             "quote"
                             ((top)
                              #(ribcage #(p) #((top)) #("i37643"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i37636" "i37637"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("i37632"
                                 "i37630"
                                 "i37628"
                                 "i37626"
                                 "i37624"
                                 "i37622"
                                 "i37620")))
                             (hygiene guile))
                           #(syntax-object
                             quasiquote
                             ((top)
                              #(ribcage #(p) #((top)) #("i37643"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i37636" "i37637"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("i37632"
                                 "i37630"
                                 "i37628"
                                 "i37626"
                                 "i37624"
                                 "i37622"
                                 "i37620")))
                             (hygiene guile)))
                         (#{quasi 37890}#
                           (list #{p 37928}#)
                           (#{1+}# #{lev 37915}#))))
                     #{tmp 37924}#)
                   (let ((#{tmp 37931}#
                           ($sc-dispatch #{p 37914}# '(any . any))))
                     (if #{tmp 37931}#
                       (@apply
                         (lambda (#{p 37935}# #{q 37936}#)
                           (let ((#{tmp 37938}#
                                   ($sc-dispatch
                                     #{p 37935}#
                                     '(#(free-id
                                         #(syntax-object
                                           unquote
                                           ((top)
                                            #(ribcage
                                              #(p q)
                                              #((top) (top))
                                              #("i37646" "i37647"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(p lev)
                                              #((top) (top))
                                              #("i37636" "i37637"))
                                            #(ribcage
                                              (emit quasivector
                                                    quasilist*
                                                    quasiappend
                                                    quasicons
                                                    vquasi
                                                    quasi)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("i37632"
                                               "i37630"
                                               "i37628"
                                               "i37626"
                                               "i37624"
                                               "i37622"
                                               "i37620")))
                                           (hygiene guile)))
                                       .
                                       each-any))))
                             (if #{tmp 37938}#
                               (@apply
                                 (lambda (#{p 37942}#)
                                   (if (= #{lev 37915}# 0)
                                     (#{quasilist* 37894}#
                                       (map (lambda (#{tmp 37654 37981}#)
                                              (list '#(syntax-object
                                                       "value"
                                                       ((top)
                                                        #(ribcage
                                                          #(p)
                                                          #((top))
                                                          #("i37652"))
                                                        #(ribcage
                                                          #(p q)
                                                          #((top) (top))
                                                          #("i37646" "i37647"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p lev)
                                                          #((top) (top))
                                                          #("i37636" "i37637"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i37632"
                                                           "i37630"
                                                           "i37628"
                                                           "i37626"
                                                           "i37624"
                                                           "i37622"
                                                           "i37620")))
                                                       (hygiene guile))
                                                    #{tmp 37654 37981}#))
                                            #{p 37942}#)
                                       (#{quasi 37890}#
                                         #{q 37936}#
                                         #{lev 37915}#))
                                     (#{quasicons 37892}#
                                       (#{quasicons 37892}#
                                         '(#(syntax-object
                                             "quote"
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("i37652"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("i37646" "i37647"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i37636" "i37637"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i37632"
                                                 "i37630"
                                                 "i37628"
                                                 "i37626"
                                                 "i37624"
                                                 "i37622"
                                                 "i37620")))
                                             (hygiene guile))
                                           #(syntax-object
                                             unquote
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("i37652"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("i37646" "i37647"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i37636" "i37637"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i37632"
                                                 "i37630"
                                                 "i37628"
                                                 "i37626"
                                                 "i37624"
                                                 "i37622"
                                                 "i37620")))
                                             (hygiene guile)))
                                         (#{quasi 37890}#
                                           #{p 37942}#
                                           (#{1-}# #{lev 37915}#)))
                                       (#{quasi 37890}#
                                         #{q 37936}#
                                         #{lev 37915}#))))
                                 #{tmp 37938}#)
                               (let ((#{tmp 37986}#
                                       ($sc-dispatch
                                         #{p 37935}#
                                         '(#(free-id
                                             #(syntax-object
                                               unquote-splicing
                                               ((top)
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("i37646" "i37647"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("i37636" "i37637"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i37632"
                                                   "i37630"
                                                   "i37628"
                                                   "i37626"
                                                   "i37624"
                                                   "i37622"
                                                   "i37620")))
                                               (hygiene guile)))
                                           .
                                           each-any))))
                                 (if #{tmp 37986}#
                                   (@apply
                                     (lambda (#{p 37990}#)
                                       (if (= #{lev 37915}# 0)
                                         (#{quasiappend 37893}#
                                           (map (lambda (#{tmp 37659 37993}#)
                                                  (list '#(syntax-object
                                                           "value"
                                                           ((top)
                                                            #(ribcage
                                                              #(p)
                                                              #((top))
                                                              #("i37657"))
                                                            #(ribcage
                                                              #(p q)
                                                              #((top) (top))
                                                              #("i37646"
                                                                "i37647"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(p lev)
                                                              #((top) (top))
                                                              #("i37636"
                                                                "i37637"))
                                                            #(ribcage
                                                              (emit quasivector
                                                                    quasilist*
                                                                    quasiappend
                                                                    quasicons
                                                                    vquasi
                                                                    quasi)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("i37632"
                                                               "i37630"
                                                               "i37628"
                                                               "i37626"
                                                               "i37624"
                                                               "i37622"
                                                               "i37620")))
                                                           (hygiene guile))
                                                        #{tmp 37659 37993}#))
                                                #{p 37990}#)
                                           (#{quasi 37890}#
                                             #{q 37936}#
                                             #{lev 37915}#))
                                         (#{quasicons 37892}#
                                           (#{quasicons 37892}#
                                             '(#(syntax-object
                                                 "quote"
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("i37657"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("i37646" "i37647"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("i37636" "i37637"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i37632"
                                                     "i37630"
                                                     "i37628"
                                                     "i37626"
                                                     "i37624"
                                                     "i37622"
                                                     "i37620")))
                                                 (hygiene guile))
                                               #(syntax-object
                                                 unquote-splicing
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("i37657"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("i37646" "i37647"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("i37636" "i37637"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i37632"
                                                     "i37630"
                                                     "i37628"
                                                     "i37626"
                                                     "i37624"
                                                     "i37622"
                                                     "i37620")))
                                                 (hygiene guile)))
                                             (#{quasi 37890}#
                                               #{p 37990}#
                                               (#{1-}# #{lev 37915}#)))
                                           (#{quasi 37890}#
                                             #{q 37936}#
                                             #{lev 37915}#))))
                                     #{tmp 37986}#)
                                   (#{quasicons 37892}#
                                     (#{quasi 37890}#
                                       #{p 37935}#
                                       #{lev 37915}#)
                                     (#{quasi 37890}#
                                       #{q 37936}#
                                       #{lev 37915}#)))))))
                         #{tmp 37931}#)
                       (let ((#{tmp 38007}#
                               ($sc-dispatch #{p 37914}# '#(vector each-any))))
                         (if #{tmp 38007}#
                           (@apply
                             (lambda (#{x 38011}#)
                               (let ((#{x 38014}#
                                       (#{vquasi 37891}#
                                         #{x 38011}#
                                         #{lev 37915}#)))
                                 (let ((#{tmp 38016}#
                                         ($sc-dispatch
                                           #{x 38014}#
                                           '(#(atom "quote") each-any))))
                                   (if #{tmp 38016}#
                                     (@apply
                                       (lambda (#{x 38020}#)
                                         (list '#(syntax-object
                                                  "quote"
                                                  ((top)
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i37764"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i37761"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i37632"
                                                      "i37630"
                                                      "i37628"
                                                      "i37626"
                                                      "i37624"
                                                      "i37622"
                                                      "i37620")))
                                                  (hygiene guile))
                                               (list->vector #{x 38020}#)))
                                       #{tmp 38016}#)
                                     (letrec*
                                       ((#{f 38022}#
                                          (lambda (#{y 38034}# #{k 38035}#)
                                            (let ((#{tmp 38037}#
                                                    ($sc-dispatch
                                                      #{y 38034}#
                                                      '(#(atom "quote")
                                                        each-any))))
                                              (if #{tmp 38037}#
                                                (@apply
                                                  (lambda (#{y 38040}#)
                                                    (#{k 38035}#
                                                      (map (lambda (#{tmp 37789 38041}#)
                                                             (list '#(syntax-object
                                                                      "quote"
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(y)
                                                                         #((top))
                                                                         #("i37787"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(f
                                                                           y
                                                                           k)
                                                                         #((top)
                                                                           (top)
                                                                           (top))
                                                                         #("i37769"
                                                                           "i37770"
                                                                           "i37771"))
                                                                       #(ribcage
                                                                         #(_)
                                                                         #((top))
                                                                         #("i37767"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(x)
                                                                         #((top))
                                                                         #("i37761"))
                                                                       #(ribcage
                                                                         (emit quasivector
                                                                               quasilist*
                                                                               quasiappend
                                                                               quasicons
                                                                               vquasi
                                                                               quasi)
                                                                         ((top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                         ("i37632"
                                                                          "i37630"
                                                                          "i37628"
                                                                          "i37626"
                                                                          "i37624"
                                                                          "i37622"
                                                                          "i37620")))
                                                                      (hygiene
                                                                        guile))
                                                                   #{tmp 37789 38041}#))
                                                           #{y 38040}#)))
                                                  #{tmp 38037}#)
                                                (let ((#{tmp 38042}#
                                                        ($sc-dispatch
                                                          #{y 38034}#
                                                          '(#(atom "list")
                                                            .
                                                            each-any))))
                                                  (if #{tmp 38042}#
                                                    (@apply
                                                      (lambda (#{y 38045}#)
                                                        (#{k 38035}#
                                                          #{y 38045}#))
                                                      #{tmp 38042}#)
                                                    (let ((#{tmp 38046}#
                                                            ($sc-dispatch
                                                              #{y 38034}#
                                                              '(#(atom "list*")
                                                                .
                                                                #(each+
                                                                  any
                                                                  (any)
                                                                  ())))))
                                                      (if #{tmp 38046}#
                                                        (@apply
                                                          (lambda (#{y 38049}#
                                                                   #{z 38050}#)
                                                            (#{f 38022}#
                                                              #{z 38050}#
                                                              (lambda (#{ls 38051}#)
                                                                (#{k 38035}#
                                                                  (append
                                                                    #{y 38049}#
                                                                    #{ls 38051}#)))))
                                                          #{tmp 38046}#)
                                                        (list '#(syntax-object
                                                                 "list->vector"
                                                                 ((top)
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(#{ g37804}#)
                                                                    #((m37805
                                                                        top))
                                                                    #("i37808"))
                                                                  #(ribcage
                                                                    #(else)
                                                                    #((top))
                                                                    #("i37802"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(f y k)
                                                                    #((top)
                                                                      (top)
                                                                      (top))
                                                                    #("i37769"
                                                                      "i37770"
                                                                      "i37771"))
                                                                  #(ribcage
                                                                    #(_)
                                                                    #((top))
                                                                    #("i37767"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x)
                                                                    #((top))
                                                                    #("i37761"))
                                                                  #(ribcage
                                                                    (emit quasivector
                                                                          quasilist*
                                                                          quasiappend
                                                                          quasicons
                                                                          vquasi
                                                                          quasi)
                                                                    ((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                    ("i37632"
                                                                     "i37630"
                                                                     "i37628"
                                                                     "i37626"
                                                                     "i37624"
                                                                     "i37622"
                                                                     "i37620")))
                                                                 (hygiene
                                                                   guile))
                                                              #{x 38014}#))))))))))
                                       (#{f 38022}#
                                         #{x 38014}#
                                         (lambda (#{ls 38024}#)
                                           (let ((#{tmp 38026}#
                                                   ($sc-dispatch
                                                     #{ls 38024}#
                                                     'each-any)))
                                             (if #{tmp 38026}#
                                               (@apply
                                                 (lambda (#{ g37777 38029}#)
                                                   (cons '#(syntax-object
                                                            "vector"
                                                            ((top)
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(#{ g37777}#)
                                                               #((m37778 top))
                                                               #("i37782"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(ls)
                                                               #((top))
                                                               #("i37776"))
                                                             #(ribcage
                                                               #(_)
                                                               #((top))
                                                               #("i37767"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i37761"))
                                                             #(ribcage
                                                               (emit quasivector
                                                                     quasilist*
                                                                     quasiappend
                                                                     quasicons
                                                                     vquasi
                                                                     quasi)
                                                               ((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                               ("i37632"
                                                                "i37630"
                                                                "i37628"
                                                                "i37626"
                                                                "i37624"
                                                                "i37622"
                                                                "i37620")))
                                                            (hygiene guile))
                                                         #{ g37777 38029}#))
                                                 #{tmp 38026}#)
                                               (syntax-violation
                                                 #f
                                                 "source expression failed to match any pattern"
                                                 #{ls 38024}#))))))))))
                             #{tmp 38007}#)
                           (list '#(syntax-object
                                    "quote"
                                    ((top)
                                     #(ribcage #(p) #((top)) #("i37667"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p lev)
                                       #((top) (top))
                                       #("i37636" "i37637"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i37632"
                                        "i37630"
                                        "i37628"
                                        "i37626"
                                        "i37624"
                                        "i37622"
                                        "i37620")))
                                    (hygiene guile))
                                 #{p 37914}#)))))))))))
       (#{vquasi 37891}#
         (lambda (#{p 38079}# #{lev 38080}#)
           (let ((#{tmp 38082}#
                   ($sc-dispatch #{p 38079}# '(any . any))))
             (if #{tmp 38082}#
               (@apply
                 (lambda (#{p 38086}# #{q 38087}#)
                   (let ((#{tmp 38089}#
                           ($sc-dispatch
                             #{p 38086}#
                             '(#(free-id
                                 #(syntax-object
                                   unquote
                                   ((top)
                                    #(ribcage
                                      #(p q)
                                      #((top) (top))
                                      #("i37675" "i37676"))
                                    #(ribcage () () ())
                                    #(ribcage
                                      #(p lev)
                                      #((top) (top))
                                      #("i37671" "i37672"))
                                    #(ribcage
                                      (emit quasivector
                                            quasilist*
                                            quasiappend
                                            quasicons
                                            vquasi
                                            quasi)
                                      ((top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top))
                                      ("i37632"
                                       "i37630"
                                       "i37628"
                                       "i37626"
                                       "i37624"
                                       "i37622"
                                       "i37620")))
                                   (hygiene guile)))
                               .
                               each-any))))
                     (if #{tmp 38089}#
                       (@apply
                         (lambda (#{p 38093}#)
                           (if (= #{lev 38080}# 0)
                             (#{quasilist* 37894}#
                               (map (lambda (#{tmp 37683 38132}#)
                                      (list '#(syntax-object
                                               "value"
                                               ((top)
                                                #(ribcage
                                                  #(p)
                                                  #((top))
                                                  #("i37681"))
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("i37675" "i37676"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("i37671" "i37672"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i37632"
                                                   "i37630"
                                                   "i37628"
                                                   "i37626"
                                                   "i37624"
                                                   "i37622"
                                                   "i37620")))
                                               (hygiene guile))
                                            #{tmp 37683 38132}#))
                                    #{p 38093}#)
                               (#{vquasi 37891}# #{q 38087}# #{lev 38080}#))
                             (#{quasicons 37892}#
                               (#{quasicons 37892}#
                                 '(#(syntax-object
                                     "quote"
                                     ((top)
                                      #(ribcage #(p) #((top)) #("i37681"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("i37675" "i37676"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("i37671" "i37672"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i37632"
                                         "i37630"
                                         "i37628"
                                         "i37626"
                                         "i37624"
                                         "i37622"
                                         "i37620")))
                                     (hygiene guile))
                                   #(syntax-object
                                     unquote
                                     ((top)
                                      #(ribcage #(p) #((top)) #("i37681"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("i37675" "i37676"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("i37671" "i37672"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i37632"
                                         "i37630"
                                         "i37628"
                                         "i37626"
                                         "i37624"
                                         "i37622"
                                         "i37620")))
                                     (hygiene guile)))
                                 (#{quasi 37890}#
                                   #{p 38093}#
                                   (#{1-}# #{lev 38080}#)))
                               (#{vquasi 37891}# #{q 38087}# #{lev 38080}#))))
                         #{tmp 38089}#)
                       (let ((#{tmp 38139}#
                               ($sc-dispatch
                                 #{p 38086}#
                                 '(#(free-id
                                     #(syntax-object
                                       unquote-splicing
                                       ((top)
                                        #(ribcage
                                          #(p q)
                                          #((top) (top))
                                          #("i37675" "i37676"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(p lev)
                                          #((top) (top))
                                          #("i37671" "i37672"))
                                        #(ribcage
                                          (emit quasivector
                                                quasilist*
                                                quasiappend
                                                quasicons
                                                vquasi
                                                quasi)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("i37632"
                                           "i37630"
                                           "i37628"
                                           "i37626"
                                           "i37624"
                                           "i37622"
                                           "i37620")))
                                       (hygiene guile)))
                                   .
                                   each-any))))
                         (if #{tmp 38139}#
                           (@apply
                             (lambda (#{p 38143}#)
                               (if (= #{lev 38080}# 0)
                                 (#{quasiappend 37893}#
                                   (map (lambda (#{tmp 37688 38146}#)
                                          (list '#(syntax-object
                                                   "value"
                                                   ((top)
                                                    #(ribcage
                                                      #(p)
                                                      #((top))
                                                      #("i37686"))
                                                    #(ribcage
                                                      #(p q)
                                                      #((top) (top))
                                                      #("i37675" "i37676"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(p lev)
                                                      #((top) (top))
                                                      #("i37671" "i37672"))
                                                    #(ribcage
                                                      (emit quasivector
                                                            quasilist*
                                                            quasiappend
                                                            quasicons
                                                            vquasi
                                                            quasi)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i37632"
                                                       "i37630"
                                                       "i37628"
                                                       "i37626"
                                                       "i37624"
                                                       "i37622"
                                                       "i37620")))
                                                   (hygiene guile))
                                                #{tmp 37688 38146}#))
                                        #{p 38143}#)
                                   (#{vquasi 37891}#
                                     #{q 38087}#
                                     #{lev 38080}#))
                                 (#{quasicons 37892}#
                                   (#{quasicons 37892}#
                                     '(#(syntax-object
                                         "quote"
                                         ((top)
                                          #(ribcage #(p) #((top)) #("i37686"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("i37675" "i37676"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("i37671" "i37672"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i37632"
                                             "i37630"
                                             "i37628"
                                             "i37626"
                                             "i37624"
                                             "i37622"
                                             "i37620")))
                                         (hygiene guile))
                                       #(syntax-object
                                         unquote-splicing
                                         ((top)
                                          #(ribcage #(p) #((top)) #("i37686"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("i37675" "i37676"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("i37671" "i37672"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i37632"
                                             "i37630"
                                             "i37628"
                                             "i37626"
                                             "i37624"
                                             "i37622"
                                             "i37620")))
                                         (hygiene guile)))
                                     (#{quasi 37890}#
                                       #{p 38143}#
                                       (#{1-}# #{lev 38080}#)))
                                   (#{vquasi 37891}#
                                     #{q 38087}#
                                     #{lev 38080}#))))
                             #{tmp 38139}#)
                           (#{quasicons 37892}#
                             (#{quasi 37890}# #{p 38086}# #{lev 38080}#)
                             (#{vquasi 37891}# #{q 38087}# #{lev 38080}#)))))))
                 #{tmp 38082}#)
               (let ((#{tmp 38164}# ($sc-dispatch #{p 38079}# '())))
                 (if #{tmp 38164}#
                   (@apply
                     (lambda ()
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i37671" "i37672"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i37632"
                               "i37630"
                               "i37628"
                               "i37626"
                               "i37624"
                               "i37622"
                               "i37620")))
                           (hygiene guile))
                         ()))
                     #{tmp 38164}#)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     #{p 38079}#)))))))
       (#{quasicons 37892}#
         (lambda (#{x 38177}# #{y 38178}#)
           (let ((#{tmp 38179}# (list #{x 38177}# #{y 38178}#)))
             (let ((#{tmp 38180}#
                     ($sc-dispatch #{tmp 38179}# '(any any))))
               (if #{tmp 38180}#
                 (@apply
                   (lambda (#{x 38182}# #{y 38183}#)
                     (let ((#{tmp 38185}#
                             ($sc-dispatch
                               #{y 38183}#
                               '(#(atom "quote") any))))
                       (if #{tmp 38185}#
                         (@apply
                           (lambda (#{dy 38189}#)
                             (let ((#{tmp 38191}#
                                     ($sc-dispatch
                                       #{x 38182}#
                                       '(#(atom "quote") any))))
                               (if #{tmp 38191}#
                                 (@apply
                                   (lambda (#{dx 38195}#)
                                     (list '#(syntax-object
                                              "quote"
                                              ((top)
                                               #(ribcage
                                                 #(dx)
                                                 #((top))
                                                 #("i37710"))
                                               #(ribcage
                                                 #(dy)
                                                 #((top))
                                                 #("i37706"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i37700" "i37701"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i37695" "i37696"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i37632"
                                                  "i37630"
                                                  "i37628"
                                                  "i37626"
                                                  "i37624"
                                                  "i37622"
                                                  "i37620")))
                                              (hygiene guile))
                                           (cons #{dx 38195}# #{dy 38189}#)))
                                   #{tmp 38191}#)
                                 (if (null? #{dy 38189}#)
                                   (list '#(syntax-object
                                            "list"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("i37712"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("i37706"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i37700" "i37701"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i37695" "i37696"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i37632"
                                                "i37630"
                                                "i37628"
                                                "i37626"
                                                "i37624"
                                                "i37622"
                                                "i37620")))
                                            (hygiene guile))
                                         #{x 38182}#)
                                   (list '#(syntax-object
                                            "list*"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("i37712"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("i37706"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i37700" "i37701"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i37695" "i37696"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i37632"
                                                "i37630"
                                                "i37628"
                                                "i37626"
                                                "i37624"
                                                "i37622"
                                                "i37620")))
                                            (hygiene guile))
                                         #{x 38182}#
                                         #{y 38183}#)))))
                           #{tmp 38185}#)
                         (let ((#{tmp 38200}#
                                 ($sc-dispatch
                                   #{y 38183}#
                                   '(#(atom "list") . any))))
                           (if #{tmp 38200}#
                             (@apply
                               (lambda (#{stuff 38204}#)
                                 (cons '#(syntax-object
                                          "list"
                                          ((top)
                                           #(ribcage
                                             #(stuff)
                                             #((top))
                                             #("i37715"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i37700" "i37701"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i37695" "i37696"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i37632"
                                              "i37630"
                                              "i37628"
                                              "i37626"
                                              "i37624"
                                              "i37622"
                                              "i37620")))
                                          (hygiene guile))
                                       (cons #{x 38182}# #{stuff 38204}#)))
                               #{tmp 38200}#)
                             (let ((#{tmp 38205}#
                                     ($sc-dispatch
                                       #{y 38183}#
                                       '(#(atom "list*") . any))))
                               (if #{tmp 38205}#
                                 (@apply
                                   (lambda (#{stuff 38209}#)
                                     (cons '#(syntax-object
                                              "list*"
                                              ((top)
                                               #(ribcage
                                                 #(stuff)
                                                 #((top))
                                                 #("i37718"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i37700" "i37701"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i37695" "i37696"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i37632"
                                                  "i37630"
                                                  "i37628"
                                                  "i37626"
                                                  "i37624"
                                                  "i37622"
                                                  "i37620")))
                                              (hygiene guile))
                                           (cons #{x 38182}# #{stuff 38209}#)))
                                   #{tmp 38205}#)
                                 (list '#(syntax-object
                                          "list*"
                                          ((top)
                                           #(ribcage #(_) #((top)) #("i37720"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i37700" "i37701"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i37695" "i37696"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i37632"
                                              "i37630"
                                              "i37628"
                                              "i37626"
                                              "i37624"
                                              "i37622"
                                              "i37620")))
                                          (hygiene guile))
                                       #{x 38182}#
                                       #{y 38183}#))))))))
                   #{tmp 38180}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{tmp 38179}#))))))
       (#{quasiappend 37893}#
         (lambda (#{x 38220}# #{y 38221}#)
           (let ((#{tmp 38223}#
                   ($sc-dispatch #{y 38221}# '(#(atom "quote") ()))))
             (if #{tmp 38223}#
               (@apply
                 (lambda ()
                   (if (null? #{x 38220}#)
                     '(#(syntax-object
                         "quote"
                         ((top)
                          #(ribcage () () ())
                          #(ribcage
                            #(x y)
                            #((top) (top))
                            #("i37724" "i37725"))
                          #(ribcage
                            (emit quasivector
                                  quasilist*
                                  quasiappend
                                  quasicons
                                  vquasi
                                  quasi)
                            ((top) (top) (top) (top) (top) (top) (top))
                            ("i37632"
                             "i37630"
                             "i37628"
                             "i37626"
                             "i37624"
                             "i37622"
                             "i37620")))
                         (hygiene guile))
                       ())
                     (if (null? (cdr #{x 38220}#))
                       (car #{x 38220}#)
                       (let ((#{tmp 38228}#
                               ($sc-dispatch #{x 38220}# 'each-any)))
                         (if #{tmp 38228}#
                           (@apply
                             (lambda (#{p 38232}#)
                               (cons '#(syntax-object
                                        "append"
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage #(p) #((top)) #("i37736"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(x y)
                                           #((top) (top))
                                           #("i37724" "i37725"))
                                         #(ribcage
                                           (emit quasivector
                                                 quasilist*
                                                 quasiappend
                                                 quasicons
                                                 vquasi
                                                 quasi)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("i37632"
                                            "i37630"
                                            "i37628"
                                            "i37626"
                                            "i37624"
                                            "i37622"
                                            "i37620")))
                                        (hygiene guile))
                                     #{p 38232}#))
                             #{tmp 38228}#)
                           (syntax-violation
                             #f
                             "source expression failed to match any pattern"
                             #{x 38220}#))))))
                 #{tmp 38223}#)
               (if (null? #{x 38220}#)
                 #{y 38221}#
                 (let ((#{tmp 38240}# (list #{x 38220}# #{y 38221}#)))
                   (let ((#{tmp 38241}#
                           ($sc-dispatch #{tmp 38240}# '(each-any any))))
                     (if #{tmp 38241}#
                       (@apply
                         (lambda (#{p 38243}# #{y 38244}#)
                           (cons '#(syntax-object
                                    "append"
                                    ((top)
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p y)
                                       #((top) (top))
                                       #("i37747" "i37748"))
                                     #(ribcage #(_) #((top)) #("i37739"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x y)
                                       #((top) (top))
                                       #("i37724" "i37725"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i37632"
                                        "i37630"
                                        "i37628"
                                        "i37626"
                                        "i37624"
                                        "i37622"
                                        "i37620")))
                                    (hygiene guile))
                                 (append #{p 38243}# (list #{y 38244}#))))
                         #{tmp 38241}#)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         #{tmp 38240}#)))))))))
       (#{quasilist* 37894}#
         (lambda (#{x 38248}# #{y 38249}#)
           (letrec*
             ((#{f 38250}#
                (lambda (#{x 38354}#)
                  (if (null? #{x 38354}#)
                    #{y 38249}#
                    (#{quasicons 37892}#
                      (car #{x 38354}#)
                      (#{f 38250}# (cdr #{x 38354}#)))))))
             (#{f 38250}# #{x 38248}#))))
       (#{emit 37896}#
         (lambda (#{x 38357}#)
           (let ((#{tmp 38359}#
                   ($sc-dispatch #{x 38357}# '(#(atom "quote") any))))
             (if #{tmp 38359}#
               (@apply
                 (lambda (#{x 38363}#)
                   (list '#(syntax-object
                            quote
                            ((top)
                             #(ribcage #(x) #((top)) #("i37814"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i37811"))
                             #(ribcage
                               (emit quasivector
                                     quasilist*
                                     quasiappend
                                     quasicons
                                     vquasi
                                     quasi)
                               ((top) (top) (top) (top) (top) (top) (top))
                               ("i37632"
                                "i37630"
                                "i37628"
                                "i37626"
                                "i37624"
                                "i37622"
                                "i37620")))
                            (hygiene guile))
                         #{x 38363}#))
                 #{tmp 38359}#)
               (let ((#{tmp 38364}#
                       ($sc-dispatch
                         #{x 38357}#
                         '(#(atom "list") . each-any))))
                 (if #{tmp 38364}#
                   (@apply
                     (lambda (#{x 38368}#)
                       (let ((#{tmp 38369}# (map #{emit 37896}# #{x 38368}#)))
                         (let ((#{tmp 38370}#
                                 ($sc-dispatch #{tmp 38369}# 'each-any)))
                           (if #{tmp 38370}#
                             (@apply
                               (lambda (#{ g37819 38372}#)
                                 (cons '#(syntax-object
                                          list
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(#{ g37819}#)
                                             #((m37820 top))
                                             #("i37824"))
                                           #(ribcage #(x) #((top)) #("i37817"))
                                           #(ribcage () () ())
                                           #(ribcage #(x) #((top)) #("i37811"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i37632"
                                              "i37630"
                                              "i37628"
                                              "i37626"
                                              "i37624"
                                              "i37622"
                                              "i37620")))
                                          (hygiene guile))
                                       #{ g37819 38372}#))
                               #{tmp 38370}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp 38369}#)))))
                     #{tmp 38364}#)
                   (let ((#{tmp 38373}#
                           ($sc-dispatch
                             #{x 38357}#
                             '(#(atom "list*") . #(each+ any (any) ())))))
                     (if #{tmp 38373}#
                       (@apply
                         (lambda (#{x 38377}# #{y 38378}#)
                           (letrec*
                             ((#{f 38379}#
                                (lambda (#{x* 38382}#)
                                  (if (null? #{x* 38382}#)
                                    (#{emit 37896}# #{y 38378}#)
                                    (let ((#{tmp 38383}#
                                            (list (#{emit 37896}#
                                                    (car #{x* 38382}#))
                                                  (#{f 38379}#
                                                    (cdr #{x* 38382}#)))))
                                      (let ((#{tmp 38384}#
                                              ($sc-dispatch
                                                #{tmp 38383}#
                                                '(any any))))
                                        (if #{tmp 38384}#
                                          (@apply
                                            (lambda (#{ g37839 38386}#
                                                     #{ g37838 38387}#)
                                              (list '#(syntax-object
                                                       cons
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(#{ g37839}#
                                                            #{ g37838}#)
                                                          #((m37840 top)
                                                            (m37840 top))
                                                          #("i37844" "i37845"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(f x*)
                                                          #((top) (top))
                                                          #("i37833" "i37834"))
                                                        #(ribcage
                                                          #(x y)
                                                          #((top) (top))
                                                          #("i37829" "i37830"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i37811"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i37632"
                                                           "i37630"
                                                           "i37628"
                                                           "i37626"
                                                           "i37624"
                                                           "i37622"
                                                           "i37620")))
                                                       (hygiene guile))
                                                    #{ g37839 38386}#
                                                    #{ g37838 38387}#))
                                            #{tmp 38384}#)
                                          (syntax-violation
                                            #f
                                            "source expression failed to match any pattern"
                                            #{tmp 38383}#))))))))
                             (#{f 38379}# #{x 38377}#)))
                         #{tmp 38373}#)
                       (let ((#{tmp 38388}#
                               ($sc-dispatch
                                 #{x 38357}#
                                 '(#(atom "append") . each-any))))
                         (if #{tmp 38388}#
                           (@apply
                             (lambda (#{x 38392}#)
                               (let ((#{tmp 38393}#
                                       (map #{emit 37896}# #{x 38392}#)))
                                 (let ((#{tmp 38394}#
                                         ($sc-dispatch
                                           #{tmp 38393}#
                                           'each-any)))
                                   (if #{tmp 38394}#
                                     (@apply
                                       (lambda (#{ g37851 38396}#)
                                         (cons '#(syntax-object
                                                  append
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(#{ g37851}#)
                                                     #((m37852 top))
                                                     #("i37856"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i37849"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i37811"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i37632"
                                                      "i37630"
                                                      "i37628"
                                                      "i37626"
                                                      "i37624"
                                                      "i37622"
                                                      "i37620")))
                                                  (hygiene guile))
                                               #{ g37851 38396}#))
                                       #{tmp 38394}#)
                                     (syntax-violation
                                       #f
                                       "source expression failed to match any pattern"
                                       #{tmp 38393}#)))))
                             #{tmp 38388}#)
                           (let ((#{tmp 38397}#
                                   ($sc-dispatch
                                     #{x 38357}#
                                     '(#(atom "vector") . each-any))))
                             (if #{tmp 38397}#
                               (@apply
                                 (lambda (#{x 38401}#)
                                   (let ((#{tmp 38402}#
                                           (map #{emit 37896}# #{x 38401}#)))
                                     (let ((#{tmp 38403}#
                                             ($sc-dispatch
                                               #{tmp 38402}#
                                               'each-any)))
                                       (if #{tmp 38403}#
                                         (@apply
                                           (lambda (#{ g37863 38405}#)
                                             (cons '#(syntax-object
                                                      vector
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(#{ g37863}#)
                                                         #((m37864 top))
                                                         #("i37868"))
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i37861"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i37811"))
                                                       #(ribcage
                                                         (emit quasivector
                                                               quasilist*
                                                               quasiappend
                                                               quasicons
                                                               vquasi
                                                               quasi)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("i37632"
                                                          "i37630"
                                                          "i37628"
                                                          "i37626"
                                                          "i37624"
                                                          "i37622"
                                                          "i37620")))
                                                      (hygiene guile))
                                                   #{ g37863 38405}#))
                                           #{tmp 38403}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp 38402}#)))))
                                 #{tmp 38397}#)
                               (let ((#{tmp 38406}#
                                       ($sc-dispatch
                                         #{x 38357}#
                                         '(#(atom "list->vector") any))))
                                 (if #{tmp 38406}#
                                   (@apply
                                     (lambda (#{x 38410}#)
                                       (let ((#{tmp 38411}#
                                               (#{emit 37896}# #{x 38410}#)))
                                         (list '#(syntax-object
                                                  list->vector
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(#{ g37875}#)
                                                     #((m37876 top))
                                                     #("i37879"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i37873"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i37811"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i37632"
                                                      "i37630"
                                                      "i37628"
                                                      "i37626"
                                                      "i37624"
                                                      "i37622"
                                                      "i37620")))
                                                  (hygiene guile))
                                               #{tmp 38411}#)))
                                     #{tmp 38406}#)
                                   (let ((#{tmp 38414}#
                                           ($sc-dispatch
                                             #{x 38357}#
                                             '(#(atom "value") any))))
                                     (if #{tmp 38414}#
                                       (@apply
                                         (lambda (#{x 38418}#) #{x 38418}#)
                                         #{tmp 38414}#)
                                       (syntax-violation
                                         #f
                                         "source expression failed to match any pattern"
                                         #{x 38357}#))))))))))))))))))
      (lambda (#{x 37897}#)
        (let ((#{tmp 37899}#
                ($sc-dispatch #{x 37897}# '(_ any))))
          (if #{tmp 37899}#
            (@apply
              (lambda (#{e 37903}#)
                (#{emit 37896}# (#{quasi 37890}# #{e 37903}# 0)))
              #{tmp 37899}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{x 37897}#)))))))

(define include
  (make-syntax-transformer
    'include
    'macro
    (lambda (#{x 38473}#)
      (letrec*
        ((#{read-file 38474}#
           (lambda (#{fn 38590}# #{k 38591}#)
             (let ((#{p 38592}# (open-input-file #{fn 38590}#)))
               (letrec*
                 ((#{f 38593}#
                    (lambda (#{x 38650}# #{result 38651}#)
                      (if (eof-object? #{x 38650}#)
                        (begin
                          (close-input-port #{p 38592}#)
                          (reverse #{result 38651}#))
                        (#{f 38593}#
                          (read #{p 38592}#)
                          (cons (datum->syntax #{k 38591}# #{x 38650}#)
                                #{result 38651}#))))))
                 (#{f 38593}# (read #{p 38592}#) '()))))))
        (let ((#{tmp 38476}#
                ($sc-dispatch #{x 38473}# '(any any))))
          (if #{tmp 38476}#
            (@apply
              (lambda (#{k 38480}# #{filename 38481}#)
                (let ((#{fn 38482}# (syntax->datum #{filename 38481}#)))
                  (let ((#{tmp 38483}#
                          (#{read-file 38474}#
                            #{fn 38482}#
                            #{filename 38481}#)))
                    (let ((#{tmp 38484}#
                            ($sc-dispatch #{tmp 38483}# 'each-any)))
                      (if #{tmp 38484}#
                        (@apply
                          (lambda (#{exp 38502}#)
                            (cons '#(syntax-object
                                     begin
                                     ((top)
                                      #(ribcage () () ())
                                      #(ribcage #(exp) #((top)) #("i38470"))
                                      #(ribcage () () ())
                                      #(ribcage () () ())
                                      #(ribcage #(fn) #((top)) #("i38465"))
                                      #(ribcage
                                        #(k filename)
                                        #((top) (top))
                                        #("i38461" "i38462"))
                                      #(ribcage (read-file) ((top)) ("i38445"))
                                      #(ribcage #(x) #((top)) #("i38444")))
                                     (hygiene guile))
                                  #{exp 38502}#))
                          #{tmp 38484}#)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          #{tmp 38483}#))))))
              #{tmp 38476}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{x 38473}#)))))))

(define include-from-path
  (make-syntax-transformer
    'include-from-path
    'macro
    (lambda (#{x 38670}#)
      (let ((#{tmp 38672}#
              ($sc-dispatch #{x 38670}# '(any any))))
        (if #{tmp 38672}#
          (@apply
            (lambda (#{k 38676}# #{filename 38677}#)
              (let ((#{fn 38678}# (syntax->datum #{filename 38677}#)))
                (let ((#{tmp 38679}#
                        (datum->syntax
                          #{filename 38677}#
                          (let ((#{t 38682}# (%search-load-path #{fn 38678}#)))
                            (if #{t 38682}#
                              #{t 38682}#
                              (syntax-violation
                                'include-from-path
                                "file not found in path"
                                #{x 38670}#
                                #{filename 38677}#))))))
                  (list '#(syntax-object
                           include
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("i38664"))
                            #(ribcage () () ())
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("i38660"))
                            #(ribcage
                              #(k filename)
                              #((top) (top))
                              #("i38656" "i38657"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i38653")))
                           (hygiene guile))
                        #{tmp 38679}#))))
            #{tmp 38672}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 38670}#))))))

(define unquote
  (make-syntax-transformer
    'unquote
    'macro
    (lambda (#{x 38691}#)
      (syntax-violation
        'unquote
        "expression not valid outside of quasiquote"
        #{x 38691}#))))

(define unquote-splicing
  (make-syntax-transformer
    'unquote-splicing
    'macro
    (lambda (#{x 38694}#)
      (syntax-violation
        'unquote-splicing
        "expression not valid outside of quasiquote"
        #{x 38694}#))))

(define case
  (make-syntax-transformer
    'case
    'macro
    (lambda (#{x 38750}#)
      (let ((#{tmp 38752}#
              ($sc-dispatch
                #{x 38750}#
                '(_ any any . each-any))))
        (if #{tmp 38752}#
          (@apply
            (lambda (#{e 38756}# #{m1 38757}# #{m2 38758}#)
              (let ((#{tmp 38759}#
                      (letrec*
                        ((#{f 38820}#
                           (lambda (#{clause 38823}# #{clauses 38824}#)
                             (if (null? #{clauses 38824}#)
                               (let ((#{tmp 38826}#
                                       ($sc-dispatch
                                         #{clause 38823}#
                                         '(#(free-id
                                             #(syntax-object
                                               else
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(f clause clauses)
                                                  #((top) (top) (top))
                                                  #("i38709"
                                                    "i38710"
                                                    "i38711"))
                                                #(ribcage
                                                  #(e m1 m2)
                                                  #((top) (top) (top))
                                                  #("i38699"
                                                    "i38700"
                                                    "i38701"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x)
                                                  #((top))
                                                  #("i38696")))
                                               (hygiene guile)))
                                           any
                                           .
                                           each-any))))
                                 (if #{tmp 38826}#
                                   (@apply
                                     (lambda (#{e1 38830}# #{e2 38831}#)
                                       (cons '#(syntax-object
                                                begin
                                                ((top)
                                                 #(ribcage
                                                   #(e1 e2)
                                                   #((top) (top))
                                                   #("i38718" "i38719"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(f clause clauses)
                                                   #((top) (top) (top))
                                                   #("i38709"
                                                     "i38710"
                                                     "i38711"))
                                                 #(ribcage
                                                   #(e m1 m2)
                                                   #((top) (top) (top))
                                                   #("i38699"
                                                     "i38700"
                                                     "i38701"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i38696")))
                                                (hygiene guile))
                                             (cons #{e1 38830}# #{e2 38831}#)))
                                     #{tmp 38826}#)
                                   (let ((#{tmp 38832}#
                                           ($sc-dispatch
                                             #{clause 38823}#
                                             '(each-any any . each-any))))
                                     (if #{tmp 38832}#
                                       (@apply
                                         (lambda (#{k 38836}#
                                                  #{e1 38837}#
                                                  #{e2 38838}#)
                                           (list '#(syntax-object
                                                    if
                                                    ((top)
                                                     #(ribcage
                                                       #(k e1 e2)
                                                       #((top) (top) (top))
                                                       #("i38724"
                                                         "i38725"
                                                         "i38726"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(f clause clauses)
                                                       #((top) (top) (top))
                                                       #("i38709"
                                                         "i38710"
                                                         "i38711"))
                                                     #(ribcage
                                                       #(e m1 m2)
                                                       #((top) (top) (top))
                                                       #("i38699"
                                                         "i38700"
                                                         "i38701"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i38696")))
                                                    (hygiene guile))
                                                 (list '#(syntax-object
                                                          memv
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i38724"
                                                               "i38725"
                                                               "i38726"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i38709"
                                                               "i38710"
                                                               "i38711"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i38699"
                                                               "i38700"
                                                               "i38701"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i38696")))
                                                          (hygiene guile))
                                                       '#(syntax-object
                                                          t
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i38724"
                                                               "i38725"
                                                               "i38726"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i38709"
                                                               "i38710"
                                                               "i38711"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i38699"
                                                               "i38700"
                                                               "i38701"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i38696")))
                                                          (hygiene guile))
                                                       (list '#(syntax-object
                                                                quote
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k e1 e2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i38724"
                                                                     "i38725"
                                                                     "i38726"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(f
                                                                     clause
                                                                     clauses)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i38709"
                                                                     "i38710"
                                                                     "i38711"))
                                                                 #(ribcage
                                                                   #(e m1 m2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i38699"
                                                                     "i38700"
                                                                     "i38701"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i38696")))
                                                                (hygiene
                                                                  guile))
                                                             #{k 38836}#))
                                                 (cons '#(syntax-object
                                                          begin
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i38724"
                                                               "i38725"
                                                               "i38726"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i38709"
                                                               "i38710"
                                                               "i38711"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i38699"
                                                               "i38700"
                                                               "i38701"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i38696")))
                                                          (hygiene guile))
                                                       (cons #{e1 38837}#
                                                             #{e2 38838}#))))
                                         #{tmp 38832}#)
                                       (syntax-violation
                                         'case
                                         "bad clause"
                                         #{x 38750}#
                                         #{clause 38823}#)))))
                               (let ((#{tmp 38846}#
                                       (#{f 38820}#
                                         (car #{clauses 38824}#)
                                         (cdr #{clauses 38824}#))))
                                 (let ((#{tmp 38849}#
                                         ($sc-dispatch
                                           #{clause 38823}#
                                           '(each-any any . each-any))))
                                   (if #{tmp 38849}#
                                     (@apply
                                       (lambda (#{k 38853}#
                                                #{e1 38854}#
                                                #{e2 38855}#)
                                         (list '#(syntax-object
                                                  if
                                                  ((top)
                                                   #(ribcage
                                                     #(k e1 e2)
                                                     #((top) (top) (top))
                                                     #("i38740"
                                                       "i38741"
                                                       "i38742"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(rest)
                                                     #((top))
                                                     #("i38736"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(f clause clauses)
                                                     #((top) (top) (top))
                                                     #("i38709"
                                                       "i38710"
                                                       "i38711"))
                                                   #(ribcage
                                                     #(e m1 m2)
                                                     #((top) (top) (top))
                                                     #("i38699"
                                                       "i38700"
                                                       "i38701"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i38696")))
                                                  (hygiene guile))
                                               (list '#(syntax-object
                                                        memv
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i38740"
                                                             "i38741"
                                                             "i38742"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i38736"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i38709"
                                                             "i38710"
                                                             "i38711"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i38699"
                                                             "i38700"
                                                             "i38701"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i38696")))
                                                        (hygiene guile))
                                                     '#(syntax-object
                                                        t
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i38740"
                                                             "i38741"
                                                             "i38742"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i38736"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i38709"
                                                             "i38710"
                                                             "i38711"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i38699"
                                                             "i38700"
                                                             "i38701"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i38696")))
                                                        (hygiene guile))
                                                     (list '#(syntax-object
                                                              quote
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i38740"
                                                                   "i38741"
                                                                   "i38742"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(rest)
                                                                 #((top))
                                                                 #("i38736"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i38709"
                                                                   "i38710"
                                                                   "i38711"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i38699"
                                                                   "i38700"
                                                                   "i38701"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i38696")))
                                                              (hygiene guile))
                                                           #{k 38853}#))
                                               (cons '#(syntax-object
                                                        begin
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i38740"
                                                             "i38741"
                                                             "i38742"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i38736"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i38709"
                                                             "i38710"
                                                             "i38711"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i38699"
                                                             "i38700"
                                                             "i38701"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i38696")))
                                                        (hygiene guile))
                                                     (cons #{e1 38854}#
                                                           #{e2 38855}#))
                                               #{tmp 38846}#))
                                       #{tmp 38849}#)
                                     (syntax-violation
                                       'case
                                       "bad clause"
                                       #{x 38750}#
                                       #{clause 38823}#))))))))
                        (#{f 38820}# #{m1 38757}# #{m2 38758}#))))
                (let ((#{body 38760}# #{tmp 38759}#))
                  (list '#(syntax-object
                           let
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(body) #((top)) #("i38707"))
                            #(ribcage
                              #(e m1 m2)
                              #((top) (top) (top))
                              #("i38699" "i38700" "i38701"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i38696")))
                           (hygiene guile))
                        (list (list '#(syntax-object
                                       t
                                       ((top)
                                        #(ribcage () () ())
                                        #(ribcage #(body) #((top)) #("i38707"))
                                        #(ribcage
                                          #(e m1 m2)
                                          #((top) (top) (top))
                                          #("i38699" "i38700" "i38701"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i38696")))
                                       (hygiene guile))
                                    #{e 38756}#))
                        #{body 38760}#))))
            #{tmp 38752}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 38750}#))))))

(define make-variable-transformer
  (lambda (#{proc 38873}#)
    (if (procedure? #{proc 38873}#)
      (letrec*
        ((#{trans 38874}#
           (lambda (#{x 38880}#)
             (#{proc 38873}# #{x 38880}#))))
        (begin
          (set-procedure-property!
            #{trans 38874}#
            'variable-transformer
            #t)
          #{trans 38874}#))
      (error "variable transformer not a procedure"
             #{proc 38873}#))))

(define identifier-syntax
  (make-syntax-transformer
    'identifier-syntax
    'macro
    (lambda (#{x 38912}#)
      (let ((#{tmp 38914}#
              ($sc-dispatch #{x 38912}# '(_ any))))
        (if #{tmp 38914}#
          (@apply
            (lambda (#{e 38918}#)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage #(e) #((top)) #("i38887"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i38884")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage #(e) #((top)) #("i38887"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("i38884")))
                        (hygiene guile)))
                    '#((#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage #(e) #((top)) #("i38887"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i38884")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          identifier-syntax
                          ((top)
                           #(ribcage #(e) #((top)) #("i38887"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i38884")))
                          (hygiene guile))))
                    (list '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage #(e) #((top)) #("i38887"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i38884")))
                             (hygiene guile))
                          '#(syntax-object
                             x
                             ((top)
                              #(ribcage #(e) #((top)) #("i38887"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i38884")))
                             (hygiene guile))
                          '()
                          (list '#(syntax-object
                                   id
                                   ((top)
                                    #(ribcage #(e) #((top)) #("i38887"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i38884")))
                                   (hygiene guile))
                                '(#(syntax-object
                                    identifier?
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i38887"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i38884")))
                                    (hygiene guile))
                                  (#(syntax-object
                                     syntax
                                     ((top)
                                      #(ribcage #(e) #((top)) #("i38887"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i38884")))
                                     (hygiene guile))
                                   #(syntax-object
                                     id
                                     ((top)
                                      #(ribcage #(e) #((top)) #("i38887"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i38884")))
                                     (hygiene guile))))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage #(e) #((top)) #("i38887"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i38884")))
                                         (hygiene guile))
                                      #{e 38918}#))
                          (list '(#(syntax-object
                                    _
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i38887"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i38884")))
                                    (hygiene guile))
                                  #(syntax-object
                                    x
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i38887"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i38884")))
                                    (hygiene guile))
                                  #(syntax-object
                                    ...
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i38887"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i38884")))
                                    (hygiene guile)))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage #(e) #((top)) #("i38887"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i38884")))
                                         (hygiene guile))
                                      (cons #{e 38918}#
                                            '(#(syntax-object
                                                x
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("i38887"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i38884")))
                                                (hygiene guile))
                                              #(syntax-object
                                                ...
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("i38887"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i38884")))
                                                (hygiene guile)))))))))
            #{tmp 38914}#)
          (let ((#{tmp 38919}#
                  ($sc-dispatch
                    #{x 38912}#
                    '(_ (any any)
                        ((#(free-id
                            #(syntax-object
                              set!
                              ((top)
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i38884")))
                              (hygiene guile)))
                          any
                          any)
                         any)))))
            (if (if #{tmp 38919}#
                  (@apply
                    (lambda (#{id 38923}#
                             #{exp1 38924}#
                             #{var 38925}#
                             #{val 38926}#
                             #{exp2 38927}#)
                      (if (identifier? #{id 38923}#)
                        (identifier? #{var 38925}#)
                        #f))
                    #{tmp 38919}#)
                  #f)
              (@apply
                (lambda (#{id 38928}#
                         #{exp1 38929}#
                         #{var 38930}#
                         #{val 38931}#
                         #{exp2 38932}#)
                  (list '#(syntax-object
                           make-variable-transformer
                           ((top)
                            #(ribcage
                              #(id exp1 var val exp2)
                              #((top) (top) (top) (top) (top))
                              #("i38902" "i38903" "i38904" "i38905" "i38906"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i38884")))
                           (hygiene guile))
                        (list '#(syntax-object
                                 lambda
                                 ((top)
                                  #(ribcage
                                    #(id exp1 var val exp2)
                                    #((top) (top) (top) (top) (top))
                                    #("i38902"
                                      "i38903"
                                      "i38904"
                                      "i38905"
                                      "i38906"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i38884")))
                                 (hygiene guile))
                              '(#(syntax-object
                                  x
                                  ((top)
                                   #(ribcage
                                     #(id exp1 var val exp2)
                                     #((top) (top) (top) (top) (top))
                                     #("i38902"
                                       "i38903"
                                       "i38904"
                                       "i38905"
                                       "i38906"))
                                   #(ribcage () () ())
                                   #(ribcage #(x) #((top)) #("i38884")))
                                  (hygiene guile)))
                              '#((#(syntax-object
                                    macro-type
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("i38902"
                                         "i38903"
                                         "i38904"
                                         "i38905"
                                         "i38906"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i38884")))
                                    (hygiene guile))
                                  .
                                  #(syntax-object
                                    variable-transformer
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("i38902"
                                         "i38903"
                                         "i38904"
                                         "i38905"
                                         "i38906"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i38884")))
                                    (hygiene guile))))
                              (list '#(syntax-object
                                       syntax-case
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("i38902"
                                            "i38903"
                                            "i38904"
                                            "i38905"
                                            "i38906"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i38884")))
                                       (hygiene guile))
                                    '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("i38902"
                                            "i38903"
                                            "i38904"
                                            "i38905"
                                            "i38906"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i38884")))
                                       (hygiene guile))
                                    '(#(syntax-object
                                        set!
                                        ((top)
                                         #(ribcage
                                           #(id exp1 var val exp2)
                                           #((top) (top) (top) (top) (top))
                                           #("i38902"
                                             "i38903"
                                             "i38904"
                                             "i38905"
                                             "i38906"))
                                         #(ribcage () () ())
                                         #(ribcage #(x) #((top)) #("i38884")))
                                        (hygiene guile)))
                                    (list (list '#(syntax-object
                                                   set!
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i38902"
                                                        "i38903"
                                                        "i38904"
                                                        "i38905"
                                                        "i38906"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i38884")))
                                                   (hygiene guile))
                                                #{var 38930}#
                                                #{val 38931}#)
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i38902"
                                                        "i38903"
                                                        "i38904"
                                                        "i38905"
                                                        "i38906"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i38884")))
                                                   (hygiene guile))
                                                #{exp2 38932}#))
                                    (list (cons #{id 38928}#
                                                '(#(syntax-object
                                                    x
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i38902"
                                                         "i38903"
                                                         "i38904"
                                                         "i38905"
                                                         "i38906"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i38884")))
                                                    (hygiene guile))
                                                  #(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i38902"
                                                         "i38903"
                                                         "i38904"
                                                         "i38905"
                                                         "i38906"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i38884")))
                                                    (hygiene guile))))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i38902"
                                                        "i38903"
                                                        "i38904"
                                                        "i38905"
                                                        "i38906"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i38884")))
                                                   (hygiene guile))
                                                (cons #{exp1 38929}#
                                                      '(#(syntax-object
                                                          x
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("i38902"
                                                               "i38903"
                                                               "i38904"
                                                               "i38905"
                                                               "i38906"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i38884")))
                                                          (hygiene guile))
                                                        #(syntax-object
                                                          ...
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("i38902"
                                                               "i38903"
                                                               "i38904"
                                                               "i38905"
                                                               "i38906"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i38884")))
                                                          (hygiene guile))))))
                                    (list #{id 38928}#
                                          (list '#(syntax-object
                                                   identifier?
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i38902"
                                                        "i38903"
                                                        "i38904"
                                                        "i38905"
                                                        "i38906"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i38884")))
                                                   (hygiene guile))
                                                (list '#(syntax-object
                                                         syntax
                                                         ((top)
                                                          #(ribcage
                                                            #(id
                                                              exp1
                                                              var
                                                              val
                                                              exp2)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i38902"
                                                              "i38903"
                                                              "i38904"
                                                              "i38905"
                                                              "i38906"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i38884")))
                                                         (hygiene guile))
                                                      #{id 38928}#))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i38902"
                                                        "i38903"
                                                        "i38904"
                                                        "i38905"
                                                        "i38906"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i38884")))
                                                   (hygiene guile))
                                                #{exp1 38929}#))))))
                #{tmp 38919}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 38912}#))))))))

(define define*
  (make-syntax-transformer
    'define*
    'macro
    (lambda (#{x 38964}#)
      (let ((#{tmp 38966}#
              ($sc-dispatch
                #{x 38964}#
                '(_ (any . any) any . each-any))))
        (if #{tmp 38966}#
          (@apply
            (lambda (#{id 38970}#
                     #{args 38971}#
                     #{b0 38972}#
                     #{b1 38973}#)
              (list '#(syntax-object
                       define
                       ((top)
                        #(ribcage
                          #(id args b0 b1)
                          #((top) (top) (top) (top))
                          #("i38946" "i38947" "i38948" "i38949"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i38943")))
                       (hygiene guile))
                    #{id 38970}#
                    (cons '#(syntax-object
                             lambda*
                             ((top)
                              #(ribcage
                                #(id args b0 b1)
                                #((top) (top) (top) (top))
                                #("i38946" "i38947" "i38948" "i38949"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i38943")))
                             (hygiene guile))
                          (cons #{args 38971}#
                                (cons #{b0 38972}# #{b1 38973}#)))))
            #{tmp 38966}#)
          (let ((#{tmp 38974}#
                  ($sc-dispatch #{x 38964}# '(_ any any))))
            (if (if #{tmp 38974}#
                  (@apply
                    (lambda (#{id 38978}# #{val 38979}#)
                      (identifier?
                        '#(syntax-object
                           x
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("i38956" "i38957"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i38943")))
                           (hygiene guile))))
                    #{tmp 38974}#)
                  #f)
              (@apply
                (lambda (#{id 38980}# #{val 38981}#)
                  (list '#(syntax-object
                           define
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("i38960" "i38961"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i38943")))
                           (hygiene guile))
                        #{id 38980}#
                        #{val 38981}#))
                #{tmp 38974}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 38964}#))))))))

